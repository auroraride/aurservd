// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionsetting"
)

// PromotionSettingCreate is the builder for creating a PromotionSetting entity.
type PromotionSettingCreate struct {
	config
	mutation *PromotionSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (psc *PromotionSettingCreate) SetCreatedAt(t time.Time) *PromotionSettingCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *PromotionSettingCreate) SetNillableCreatedAt(t *time.Time) *PromotionSettingCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *PromotionSettingCreate) SetUpdatedAt(t time.Time) *PromotionSettingCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *PromotionSettingCreate) SetNillableUpdatedAt(t *time.Time) *PromotionSettingCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetCreator sets the "creator" field.
func (psc *PromotionSettingCreate) SetCreator(m *model.Modifier) *PromotionSettingCreate {
	psc.mutation.SetCreator(m)
	return psc
}

// SetLastModifier sets the "last_modifier" field.
func (psc *PromotionSettingCreate) SetLastModifier(m *model.Modifier) *PromotionSettingCreate {
	psc.mutation.SetLastModifier(m)
	return psc
}

// SetRemark sets the "remark" field.
func (psc *PromotionSettingCreate) SetRemark(s string) *PromotionSettingCreate {
	psc.mutation.SetRemark(s)
	return psc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (psc *PromotionSettingCreate) SetNillableRemark(s *string) *PromotionSettingCreate {
	if s != nil {
		psc.SetRemark(*s)
	}
	return psc
}

// SetTitle sets the "title" field.
func (psc *PromotionSettingCreate) SetTitle(s string) *PromotionSettingCreate {
	psc.mutation.SetTitle(s)
	return psc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (psc *PromotionSettingCreate) SetNillableTitle(s *string) *PromotionSettingCreate {
	if s != nil {
		psc.SetTitle(*s)
	}
	return psc
}

// SetContent sets the "content" field.
func (psc *PromotionSettingCreate) SetContent(s string) *PromotionSettingCreate {
	psc.mutation.SetContent(s)
	return psc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (psc *PromotionSettingCreate) SetNillableContent(s *string) *PromotionSettingCreate {
	if s != nil {
		psc.SetContent(*s)
	}
	return psc
}

// SetKey sets the "key" field.
func (psc *PromotionSettingCreate) SetKey(s string) *PromotionSettingCreate {
	psc.mutation.SetKey(s)
	return psc
}

// Mutation returns the PromotionSettingMutation object of the builder.
func (psc *PromotionSettingCreate) Mutation() *PromotionSettingMutation {
	return psc.mutation
}

// Save creates the PromotionSetting in the database.
func (psc *PromotionSettingCreate) Save(ctx context.Context) (*PromotionSetting, error) {
	if err := psc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PromotionSettingCreate) SaveX(ctx context.Context) *PromotionSetting {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PromotionSettingCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PromotionSettingCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PromotionSettingCreate) defaults() error {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		if promotionsetting.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionsetting.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionsetting.DefaultCreatedAt()
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		if promotionsetting.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionsetting.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionsetting.DefaultUpdatedAt()
		psc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (psc *PromotionSettingCreate) check() error {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionSetting.created_at"`)}
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionSetting.updated_at"`)}
	}
	if _, ok := psc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "PromotionSetting.key"`)}
	}
	return nil
}

func (psc *PromotionSettingCreate) sqlSave(ctx context.Context) (*PromotionSetting, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PromotionSettingCreate) createSpec() (*PromotionSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionSetting{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(promotionsetting.Table, sqlgraph.NewFieldSpec(promotionsetting.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = psc.conflict
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.Creator(); ok {
		_spec.SetField(promotionsetting.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := psc.mutation.LastModifier(); ok {
		_spec.SetField(promotionsetting.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := psc.mutation.Remark(); ok {
		_spec.SetField(promotionsetting.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := psc.mutation.Title(); ok {
		_spec.SetField(promotionsetting.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := psc.mutation.Content(); ok {
		_spec.SetField(promotionsetting.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := psc.mutation.Key(); ok {
		_spec.SetField(promotionsetting.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionSetting.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionSettingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (psc *PromotionSettingCreate) OnConflict(opts ...sql.ConflictOption) *PromotionSettingUpsertOne {
	psc.conflict = opts
	return &PromotionSettingUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *PromotionSettingCreate) OnConflictColumns(columns ...string) *PromotionSettingUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &PromotionSettingUpsertOne{
		create: psc,
	}
}

type (
	// PromotionSettingUpsertOne is the builder for "upsert"-ing
	//  one PromotionSetting node.
	PromotionSettingUpsertOne struct {
		create *PromotionSettingCreate
	}

	// PromotionSettingUpsert is the "OnConflict" setter.
	PromotionSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionSettingUpsert) SetUpdatedAt(v time.Time) *PromotionSettingUpsert {
	u.Set(promotionsetting.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionSettingUpsert) UpdateUpdatedAt() *PromotionSettingUpsert {
	u.SetExcluded(promotionsetting.FieldUpdatedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionSettingUpsert) SetLastModifier(v *model.Modifier) *PromotionSettingUpsert {
	u.Set(promotionsetting.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionSettingUpsert) UpdateLastModifier() *PromotionSettingUpsert {
	u.SetExcluded(promotionsetting.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionSettingUpsert) ClearLastModifier() *PromotionSettingUpsert {
	u.SetNull(promotionsetting.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionSettingUpsert) SetRemark(v string) *PromotionSettingUpsert {
	u.Set(promotionsetting.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionSettingUpsert) UpdateRemark() *PromotionSettingUpsert {
	u.SetExcluded(promotionsetting.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionSettingUpsert) ClearRemark() *PromotionSettingUpsert {
	u.SetNull(promotionsetting.FieldRemark)
	return u
}

// SetTitle sets the "title" field.
func (u *PromotionSettingUpsert) SetTitle(v string) *PromotionSettingUpsert {
	u.Set(promotionsetting.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PromotionSettingUpsert) UpdateTitle() *PromotionSettingUpsert {
	u.SetExcluded(promotionsetting.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *PromotionSettingUpsert) ClearTitle() *PromotionSettingUpsert {
	u.SetNull(promotionsetting.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *PromotionSettingUpsert) SetContent(v string) *PromotionSettingUpsert {
	u.Set(promotionsetting.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PromotionSettingUpsert) UpdateContent() *PromotionSettingUpsert {
	u.SetExcluded(promotionsetting.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *PromotionSettingUpsert) ClearContent() *PromotionSettingUpsert {
	u.SetNull(promotionsetting.FieldContent)
	return u
}

// SetKey sets the "key" field.
func (u *PromotionSettingUpsert) SetKey(v string) *PromotionSettingUpsert {
	u.Set(promotionsetting.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PromotionSettingUpsert) UpdateKey() *PromotionSettingUpsert {
	u.SetExcluded(promotionsetting.FieldKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionSettingUpsertOne) UpdateNewValues() *PromotionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionsetting.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionsetting.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionSetting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionSettingUpsertOne) Ignore() *PromotionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionSettingUpsertOne) DoNothing() *PromotionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionSettingCreate.OnConflict
// documentation for more info.
func (u *PromotionSettingUpsertOne) Update(set func(*PromotionSettingUpsert)) *PromotionSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionSettingUpsertOne) SetUpdatedAt(v time.Time) *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionSettingUpsertOne) UpdateUpdatedAt() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionSettingUpsertOne) SetLastModifier(v *model.Modifier) *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionSettingUpsertOne) UpdateLastModifier() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionSettingUpsertOne) ClearLastModifier() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionSettingUpsertOne) SetRemark(v string) *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionSettingUpsertOne) UpdateRemark() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionSettingUpsertOne) ClearRemark() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.ClearRemark()
	})
}

// SetTitle sets the "title" field.
func (u *PromotionSettingUpsertOne) SetTitle(v string) *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PromotionSettingUpsertOne) UpdateTitle() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PromotionSettingUpsertOne) ClearTitle() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *PromotionSettingUpsertOne) SetContent(v string) *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PromotionSettingUpsertOne) UpdateContent() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *PromotionSettingUpsertOne) ClearContent() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.ClearContent()
	})
}

// SetKey sets the "key" field.
func (u *PromotionSettingUpsertOne) SetKey(v string) *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PromotionSettingUpsertOne) UpdateKey() *PromotionSettingUpsertOne {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateKey()
	})
}

// Exec executes the query.
func (u *PromotionSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionSettingUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionSettingUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionSettingCreateBulk is the builder for creating many PromotionSetting entities in bulk.
type PromotionSettingCreateBulk struct {
	config
	err      error
	builders []*PromotionSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionSetting entities in the database.
func (pscb *PromotionSettingCreateBulk) Save(ctx context.Context) ([]*PromotionSetting, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PromotionSetting, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PromotionSettingCreateBulk) SaveX(ctx context.Context) []*PromotionSetting {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PromotionSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PromotionSettingCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionSettingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pscb *PromotionSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionSettingUpsertBulk {
	pscb.conflict = opts
	return &PromotionSettingUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *PromotionSettingCreateBulk) OnConflictColumns(columns ...string) *PromotionSettingUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &PromotionSettingUpsertBulk{
		create: pscb,
	}
}

// PromotionSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionSetting nodes.
type PromotionSettingUpsertBulk struct {
	create *PromotionSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionSettingUpsertBulk) UpdateNewValues() *PromotionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionsetting.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionsetting.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionSettingUpsertBulk) Ignore() *PromotionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionSettingUpsertBulk) DoNothing() *PromotionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionSettingCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionSettingUpsertBulk) Update(set func(*PromotionSettingUpsert)) *PromotionSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionSettingUpsertBulk) SetUpdatedAt(v time.Time) *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionSettingUpsertBulk) UpdateUpdatedAt() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionSettingUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionSettingUpsertBulk) UpdateLastModifier() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionSettingUpsertBulk) ClearLastModifier() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionSettingUpsertBulk) SetRemark(v string) *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionSettingUpsertBulk) UpdateRemark() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionSettingUpsertBulk) ClearRemark() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.ClearRemark()
	})
}

// SetTitle sets the "title" field.
func (u *PromotionSettingUpsertBulk) SetTitle(v string) *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PromotionSettingUpsertBulk) UpdateTitle() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *PromotionSettingUpsertBulk) ClearTitle() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.ClearTitle()
	})
}

// SetContent sets the "content" field.
func (u *PromotionSettingUpsertBulk) SetContent(v string) *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PromotionSettingUpsertBulk) UpdateContent() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *PromotionSettingUpsertBulk) ClearContent() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.ClearContent()
	})
}

// SetKey sets the "key" field.
func (u *PromotionSettingUpsertBulk) SetKey(v string) *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PromotionSettingUpsertBulk) UpdateKey() *PromotionSettingUpsertBulk {
	return u.Update(func(s *PromotionSettingUpsert) {
		s.UpdateKey()
	})
}

// Exec executes the query.
func (u *PromotionSettingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
