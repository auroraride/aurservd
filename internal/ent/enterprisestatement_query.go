// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseinvoice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EnterpriseStatementQuery is the builder for querying EnterpriseStatement entities.
type EnterpriseStatementQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.EnterpriseStatement
	// eager-loading edges.
	withSubscribes *SubscribeQuery
	withInvoices   *EnterpriseInvoiceQuery
	withEnterprise *EnterpriseQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnterpriseStatementQuery builder.
func (esq *EnterpriseStatementQuery) Where(ps ...predicate.EnterpriseStatement) *EnterpriseStatementQuery {
	esq.predicates = append(esq.predicates, ps...)
	return esq
}

// Limit adds a limit step to the query.
func (esq *EnterpriseStatementQuery) Limit(limit int) *EnterpriseStatementQuery {
	esq.limit = &limit
	return esq
}

// Offset adds an offset step to the query.
func (esq *EnterpriseStatementQuery) Offset(offset int) *EnterpriseStatementQuery {
	esq.offset = &offset
	return esq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (esq *EnterpriseStatementQuery) Unique(unique bool) *EnterpriseStatementQuery {
	esq.unique = &unique
	return esq
}

// Order adds an order step to the query.
func (esq *EnterpriseStatementQuery) Order(o ...OrderFunc) *EnterpriseStatementQuery {
	esq.order = append(esq.order, o...)
	return esq
}

// QuerySubscribes chains the current query on the "subscribes" edge.
func (esq *EnterpriseStatementQuery) QuerySubscribes() *SubscribeQuery {
	query := &SubscribeQuery{config: esq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestatement.Table, enterprisestatement.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestatement.SubscribesTable, enterprisestatement.SubscribesColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvoices chains the current query on the "invoices" edge.
func (esq *EnterpriseStatementQuery) QueryInvoices() *EnterpriseInvoiceQuery {
	query := &EnterpriseInvoiceQuery{config: esq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestatement.Table, enterprisestatement.FieldID, selector),
			sqlgraph.To(enterpriseinvoice.Table, enterpriseinvoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestatement.InvoicesTable, enterprisestatement.InvoicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (esq *EnterpriseStatementQuery) QueryEnterprise() *EnterpriseQuery {
	query := &EnterpriseQuery{config: esq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestatement.Table, enterprisestatement.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisestatement.EnterpriseTable, enterprisestatement.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EnterpriseStatement entity from the query.
// Returns a *NotFoundError when no EnterpriseStatement was found.
func (esq *EnterpriseStatementQuery) First(ctx context.Context) (*EnterpriseStatement, error) {
	nodes, err := esq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enterprisestatement.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (esq *EnterpriseStatementQuery) FirstX(ctx context.Context) *EnterpriseStatement {
	node, err := esq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EnterpriseStatement ID from the query.
// Returns a *NotFoundError when no EnterpriseStatement ID was found.
func (esq *EnterpriseStatementQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = esq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enterprisestatement.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (esq *EnterpriseStatementQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := esq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EnterpriseStatement entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EnterpriseStatement entity is found.
// Returns a *NotFoundError when no EnterpriseStatement entities are found.
func (esq *EnterpriseStatementQuery) Only(ctx context.Context) (*EnterpriseStatement, error) {
	nodes, err := esq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enterprisestatement.Label}
	default:
		return nil, &NotSingularError{enterprisestatement.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (esq *EnterpriseStatementQuery) OnlyX(ctx context.Context) *EnterpriseStatement {
	node, err := esq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EnterpriseStatement ID in the query.
// Returns a *NotSingularError when more than one EnterpriseStatement ID is found.
// Returns a *NotFoundError when no entities are found.
func (esq *EnterpriseStatementQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = esq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enterprisestatement.Label}
	default:
		err = &NotSingularError{enterprisestatement.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (esq *EnterpriseStatementQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := esq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EnterpriseStatements.
func (esq *EnterpriseStatementQuery) All(ctx context.Context) ([]*EnterpriseStatement, error) {
	if err := esq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return esq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (esq *EnterpriseStatementQuery) AllX(ctx context.Context) []*EnterpriseStatement {
	nodes, err := esq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EnterpriseStatement IDs.
func (esq *EnterpriseStatementQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := esq.Select(enterprisestatement.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (esq *EnterpriseStatementQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := esq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (esq *EnterpriseStatementQuery) Count(ctx context.Context) (int, error) {
	if err := esq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return esq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (esq *EnterpriseStatementQuery) CountX(ctx context.Context) int {
	count, err := esq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (esq *EnterpriseStatementQuery) Exist(ctx context.Context) (bool, error) {
	if err := esq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return esq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (esq *EnterpriseStatementQuery) ExistX(ctx context.Context) bool {
	exist, err := esq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnterpriseStatementQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (esq *EnterpriseStatementQuery) Clone() *EnterpriseStatementQuery {
	if esq == nil {
		return nil
	}
	return &EnterpriseStatementQuery{
		config:         esq.config,
		limit:          esq.limit,
		offset:         esq.offset,
		order:          append([]OrderFunc{}, esq.order...),
		predicates:     append([]predicate.EnterpriseStatement{}, esq.predicates...),
		withSubscribes: esq.withSubscribes.Clone(),
		withInvoices:   esq.withInvoices.Clone(),
		withEnterprise: esq.withEnterprise.Clone(),
		// clone intermediate query.
		sql:    esq.sql.Clone(),
		path:   esq.path,
		unique: esq.unique,
	}
}

// WithSubscribes tells the query-builder to eager-load the nodes that are connected to
// the "subscribes" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStatementQuery) WithSubscribes(opts ...func(*SubscribeQuery)) *EnterpriseStatementQuery {
	query := &SubscribeQuery{config: esq.config}
	for _, opt := range opts {
		opt(query)
	}
	esq.withSubscribes = query
	return esq
}

// WithInvoices tells the query-builder to eager-load the nodes that are connected to
// the "invoices" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStatementQuery) WithInvoices(opts ...func(*EnterpriseInvoiceQuery)) *EnterpriseStatementQuery {
	query := &EnterpriseInvoiceQuery{config: esq.config}
	for _, opt := range opts {
		opt(query)
	}
	esq.withInvoices = query
	return esq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStatementQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *EnterpriseStatementQuery {
	query := &EnterpriseQuery{config: esq.config}
	for _, opt := range opts {
		opt(query)
	}
	esq.withEnterprise = query
	return esq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EnterpriseStatement.Query().
//		GroupBy(enterprisestatement.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (esq *EnterpriseStatementQuery) GroupBy(field string, fields ...string) *EnterpriseStatementGroupBy {
	grbuild := &EnterpriseStatementGroupBy{config: esq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return esq.sqlQuery(ctx), nil
	}
	grbuild.label = enterprisestatement.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EnterpriseStatement.Query().
//		Select(enterprisestatement.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (esq *EnterpriseStatementQuery) Select(fields ...string) *EnterpriseStatementSelect {
	esq.fields = append(esq.fields, fields...)
	selbuild := &EnterpriseStatementSelect{EnterpriseStatementQuery: esq}
	selbuild.label = enterprisestatement.Label
	selbuild.flds, selbuild.scan = &esq.fields, selbuild.Scan
	return selbuild
}

func (esq *EnterpriseStatementQuery) prepareQuery(ctx context.Context) error {
	for _, f := range esq.fields {
		if !enterprisestatement.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if esq.path != nil {
		prev, err := esq.path(ctx)
		if err != nil {
			return err
		}
		esq.sql = prev
	}
	return nil
}

func (esq *EnterpriseStatementQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EnterpriseStatement, error) {
	var (
		nodes       = []*EnterpriseStatement{}
		_spec       = esq.querySpec()
		loadedTypes = [3]bool{
			esq.withSubscribes != nil,
			esq.withInvoices != nil,
			esq.withEnterprise != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*EnterpriseStatement).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &EnterpriseStatement{config: esq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(esq.modifiers) > 0 {
		_spec.Modifiers = esq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, esq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := esq.withSubscribes; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*EnterpriseStatement)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Subscribes = []*Subscribe{}
		}
		query.Where(predicate.Subscribe(func(s *sql.Selector) {
			s.Where(sql.InValues(enterprisestatement.SubscribesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.StatementID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "statement_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Subscribes = append(node.Edges.Subscribes, n)
		}
	}

	if query := esq.withInvoices; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*EnterpriseStatement)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Invoices = []*EnterpriseInvoice{}
		}
		query.Where(predicate.EnterpriseInvoice(func(s *sql.Selector) {
			s.Where(sql.InValues(enterprisestatement.InvoicesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.StatementID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "statement_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Invoices = append(node.Edges.Invoices, n)
		}
	}

	if query := esq.withEnterprise; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EnterpriseStatement)
		for i := range nodes {
			fk := nodes[i].EnterpriseID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enterprise.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Enterprise = n
			}
		}
	}

	return nodes, nil
}

func (esq *EnterpriseStatementQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := esq.querySpec()
	if len(esq.modifiers) > 0 {
		_spec.Modifiers = esq.modifiers
	}
	_spec.Node.Columns = esq.fields
	if len(esq.fields) > 0 {
		_spec.Unique = esq.unique != nil && *esq.unique
	}
	return sqlgraph.CountNodes(ctx, esq.driver, _spec)
}

func (esq *EnterpriseStatementQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := esq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (esq *EnterpriseStatementQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisestatement.Table,
			Columns: enterprisestatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestatement.FieldID,
			},
		},
		From:   esq.sql,
		Unique: true,
	}
	if unique := esq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := esq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisestatement.FieldID)
		for i := range fields {
			if fields[i] != enterprisestatement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := esq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := esq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := esq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := esq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (esq *EnterpriseStatementQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(esq.driver.Dialect())
	t1 := builder.Table(enterprisestatement.Table)
	columns := esq.fields
	if len(columns) == 0 {
		columns = enterprisestatement.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if esq.sql != nil {
		selector = esq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if esq.unique != nil && *esq.unique {
		selector.Distinct()
	}
	for _, m := range esq.modifiers {
		m(selector)
	}
	for _, p := range esq.predicates {
		p(selector)
	}
	for _, p := range esq.order {
		p(selector)
	}
	if offset := esq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := esq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (esq *EnterpriseStatementQuery) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseStatementSelect {
	esq.modifiers = append(esq.modifiers, modifiers...)
	return esq.Select()
}

// EnterpriseStatementGroupBy is the group-by builder for EnterpriseStatement entities.
type EnterpriseStatementGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (esgb *EnterpriseStatementGroupBy) Aggregate(fns ...AggregateFunc) *EnterpriseStatementGroupBy {
	esgb.fns = append(esgb.fns, fns...)
	return esgb
}

// Scan applies the group-by query and scans the result into the given value.
func (esgb *EnterpriseStatementGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := esgb.path(ctx)
	if err != nil {
		return err
	}
	esgb.sql = query
	return esgb.sqlScan(ctx, v)
}

func (esgb *EnterpriseStatementGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range esgb.fields {
		if !enterprisestatement.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := esgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := esgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (esgb *EnterpriseStatementGroupBy) sqlQuery() *sql.Selector {
	selector := esgb.sql.Select()
	aggregation := make([]string, 0, len(esgb.fns))
	for _, fn := range esgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(esgb.fields)+len(esgb.fns))
		for _, f := range esgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(esgb.fields...)...)
}

// EnterpriseStatementSelect is the builder for selecting fields of EnterpriseStatement entities.
type EnterpriseStatementSelect struct {
	*EnterpriseStatementQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ess *EnterpriseStatementSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ess.prepareQuery(ctx); err != nil {
		return err
	}
	ess.sql = ess.EnterpriseStatementQuery.sqlQuery(ctx)
	return ess.sqlScan(ctx, v)
}

func (ess *EnterpriseStatementSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ess.sql.Query()
	if err := ess.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ess *EnterpriseStatementSelect) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseStatementSelect {
	ess.modifiers = append(ess.modifiers, modifiers...)
	return ess
}
