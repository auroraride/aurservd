// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/version"
)

// VersionCreate is the builder for creating a Version entity.
type VersionCreate struct {
	config
	mutation *VersionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (vc *VersionCreate) SetCreatedAt(t time.Time) *VersionCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VersionCreate) SetNillableCreatedAt(t *time.Time) *VersionCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VersionCreate) SetUpdatedAt(t time.Time) *VersionCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VersionCreate) SetNillableUpdatedAt(t *time.Time) *VersionCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetDeletedAt sets the "deleted_at" field.
func (vc *VersionCreate) SetDeletedAt(t time.Time) *VersionCreate {
	vc.mutation.SetDeletedAt(t)
	return vc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vc *VersionCreate) SetNillableDeletedAt(t *time.Time) *VersionCreate {
	if t != nil {
		vc.SetDeletedAt(*t)
	}
	return vc
}

// SetCreator sets the "creator" field.
func (vc *VersionCreate) SetCreator(m *model.Modifier) *VersionCreate {
	vc.mutation.SetCreator(m)
	return vc
}

// SetLastModifier sets the "last_modifier" field.
func (vc *VersionCreate) SetLastModifier(m *model.Modifier) *VersionCreate {
	vc.mutation.SetLastModifier(m)
	return vc
}

// SetRemark sets the "remark" field.
func (vc *VersionCreate) SetRemark(s string) *VersionCreate {
	vc.mutation.SetRemark(s)
	return vc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (vc *VersionCreate) SetNillableRemark(s *string) *VersionCreate {
	if s != nil {
		vc.SetRemark(*s)
	}
	return vc
}

// SetPlatform sets the "platform" field.
func (vc *VersionCreate) SetPlatform(m model.AppPlatform) *VersionCreate {
	vc.mutation.SetPlatform(m)
	return vc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (vc *VersionCreate) SetNillablePlatform(m *model.AppPlatform) *VersionCreate {
	if m != nil {
		vc.SetPlatform(*m)
	}
	return vc
}

// SetVersion sets the "version" field.
func (vc *VersionCreate) SetVersion(s string) *VersionCreate {
	vc.mutation.SetVersion(s)
	return vc
}

// SetContent sets the "content" field.
func (vc *VersionCreate) SetContent(s string) *VersionCreate {
	vc.mutation.SetContent(s)
	return vc
}

// SetForce sets the "force" field.
func (vc *VersionCreate) SetForce(b bool) *VersionCreate {
	vc.mutation.SetForce(b)
	return vc
}

// Mutation returns the VersionMutation object of the builder.
func (vc *VersionCreate) Mutation() *VersionMutation {
	return vc.mutation
}

// Save creates the Version in the database.
func (vc *VersionCreate) Save(ctx context.Context) (*Version, error) {
	if err := vc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VersionCreate) SaveX(ctx context.Context) *Version {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VersionCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VersionCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VersionCreate) defaults() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		if version.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized version.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := version.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		if version.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized version.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := version.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.Platform(); !ok {
		v := version.DefaultPlatform
		vc.mutation.SetPlatform(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (vc *VersionCreate) check() error {
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Version.created_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Version.updated_at"`)}
	}
	if _, ok := vc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Version.platform"`)}
	}
	if _, ok := vc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Version.version"`)}
	}
	if _, ok := vc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Version.content"`)}
	}
	if _, ok := vc.mutation.Force(); !ok {
		return &ValidationError{Name: "force", err: errors.New(`ent: missing required field "Version.force"`)}
	}
	return nil
}

func (vc *VersionCreate) sqlSave(ctx context.Context) (*Version, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VersionCreate) createSpec() (*Version, *sqlgraph.CreateSpec) {
	var (
		_node = &Version{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(version.Table, sqlgraph.NewFieldSpec(version.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(version.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(version.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.DeletedAt(); ok {
		_spec.SetField(version.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := vc.mutation.Creator(); ok {
		_spec.SetField(version.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := vc.mutation.LastModifier(); ok {
		_spec.SetField(version.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := vc.mutation.Remark(); ok {
		_spec.SetField(version.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := vc.mutation.Platform(); ok {
		_spec.SetField(version.FieldPlatform, field.TypeOther, value)
		_node.Platform = value
	}
	if value, ok := vc.mutation.Version(); ok {
		_spec.SetField(version.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := vc.mutation.Content(); ok {
		_spec.SetField(version.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := vc.mutation.Force(); ok {
		_spec.SetField(version.FieldForce, field.TypeBool, value)
		_node.Force = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Version.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VersionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vc *VersionCreate) OnConflict(opts ...sql.ConflictOption) *VersionUpsertOne {
	vc.conflict = opts
	return &VersionUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Version.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VersionCreate) OnConflictColumns(columns ...string) *VersionUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VersionUpsertOne{
		create: vc,
	}
}

type (
	// VersionUpsertOne is the builder for "upsert"-ing
	//  one Version node.
	VersionUpsertOne struct {
		create *VersionCreate
	}

	// VersionUpsert is the "OnConflict" setter.
	VersionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *VersionUpsert) SetUpdatedAt(v time.Time) *VersionUpsert {
	u.Set(version.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VersionUpsert) UpdateUpdatedAt() *VersionUpsert {
	u.SetExcluded(version.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VersionUpsert) SetDeletedAt(v time.Time) *VersionUpsert {
	u.Set(version.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VersionUpsert) UpdateDeletedAt() *VersionUpsert {
	u.SetExcluded(version.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *VersionUpsert) ClearDeletedAt() *VersionUpsert {
	u.SetNull(version.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *VersionUpsert) SetLastModifier(v *model.Modifier) *VersionUpsert {
	u.Set(version.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *VersionUpsert) UpdateLastModifier() *VersionUpsert {
	u.SetExcluded(version.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *VersionUpsert) ClearLastModifier() *VersionUpsert {
	u.SetNull(version.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *VersionUpsert) SetRemark(v string) *VersionUpsert {
	u.Set(version.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *VersionUpsert) UpdateRemark() *VersionUpsert {
	u.SetExcluded(version.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *VersionUpsert) ClearRemark() *VersionUpsert {
	u.SetNull(version.FieldRemark)
	return u
}

// SetPlatform sets the "platform" field.
func (u *VersionUpsert) SetPlatform(v model.AppPlatform) *VersionUpsert {
	u.Set(version.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *VersionUpsert) UpdatePlatform() *VersionUpsert {
	u.SetExcluded(version.FieldPlatform)
	return u
}

// SetVersion sets the "version" field.
func (u *VersionUpsert) SetVersion(v string) *VersionUpsert {
	u.Set(version.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *VersionUpsert) UpdateVersion() *VersionUpsert {
	u.SetExcluded(version.FieldVersion)
	return u
}

// SetContent sets the "content" field.
func (u *VersionUpsert) SetContent(v string) *VersionUpsert {
	u.Set(version.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *VersionUpsert) UpdateContent() *VersionUpsert {
	u.SetExcluded(version.FieldContent)
	return u
}

// SetForce sets the "force" field.
func (u *VersionUpsert) SetForce(v bool) *VersionUpsert {
	u.Set(version.FieldForce, v)
	return u
}

// UpdateForce sets the "force" field to the value that was provided on create.
func (u *VersionUpsert) UpdateForce() *VersionUpsert {
	u.SetExcluded(version.FieldForce)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Version.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VersionUpsertOne) UpdateNewValues() *VersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(version.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(version.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Version.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VersionUpsertOne) Ignore() *VersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VersionUpsertOne) DoNothing() *VersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VersionCreate.OnConflict
// documentation for more info.
func (u *VersionUpsertOne) Update(set func(*VersionUpsert)) *VersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VersionUpsertOne) SetUpdatedAt(v time.Time) *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VersionUpsertOne) UpdateUpdatedAt() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VersionUpsertOne) SetDeletedAt(v time.Time) *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VersionUpsertOne) UpdateDeletedAt() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *VersionUpsertOne) ClearDeletedAt() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *VersionUpsertOne) SetLastModifier(v *model.Modifier) *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *VersionUpsertOne) UpdateLastModifier() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *VersionUpsertOne) ClearLastModifier() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *VersionUpsertOne) SetRemark(v string) *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *VersionUpsertOne) UpdateRemark() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *VersionUpsertOne) ClearRemark() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.ClearRemark()
	})
}

// SetPlatform sets the "platform" field.
func (u *VersionUpsertOne) SetPlatform(v model.AppPlatform) *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *VersionUpsertOne) UpdatePlatform() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.UpdatePlatform()
	})
}

// SetVersion sets the "version" field.
func (u *VersionUpsertOne) SetVersion(v string) *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *VersionUpsertOne) UpdateVersion() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateVersion()
	})
}

// SetContent sets the "content" field.
func (u *VersionUpsertOne) SetContent(v string) *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *VersionUpsertOne) UpdateContent() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateContent()
	})
}

// SetForce sets the "force" field.
func (u *VersionUpsertOne) SetForce(v bool) *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.SetForce(v)
	})
}

// UpdateForce sets the "force" field to the value that was provided on create.
func (u *VersionUpsertOne) UpdateForce() *VersionUpsertOne {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateForce()
	})
}

// Exec executes the query.
func (u *VersionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VersionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VersionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VersionUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VersionUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VersionCreateBulk is the builder for creating many Version entities in bulk.
type VersionCreateBulk struct {
	config
	err      error
	builders []*VersionCreate
	conflict []sql.ConflictOption
}

// Save creates the Version entities in the database.
func (vcb *VersionCreateBulk) Save(ctx context.Context) ([]*Version, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Version, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VersionCreateBulk) SaveX(ctx context.Context) []*Version {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VersionCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VersionCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Version.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VersionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (vcb *VersionCreateBulk) OnConflict(opts ...sql.ConflictOption) *VersionUpsertBulk {
	vcb.conflict = opts
	return &VersionUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Version.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VersionCreateBulk) OnConflictColumns(columns ...string) *VersionUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VersionUpsertBulk{
		create: vcb,
	}
}

// VersionUpsertBulk is the builder for "upsert"-ing
// a bulk of Version nodes.
type VersionUpsertBulk struct {
	create *VersionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Version.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VersionUpsertBulk) UpdateNewValues() *VersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(version.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(version.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Version.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VersionUpsertBulk) Ignore() *VersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VersionUpsertBulk) DoNothing() *VersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VersionCreateBulk.OnConflict
// documentation for more info.
func (u *VersionUpsertBulk) Update(set func(*VersionUpsert)) *VersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VersionUpsertBulk) SetUpdatedAt(v time.Time) *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VersionUpsertBulk) UpdateUpdatedAt() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *VersionUpsertBulk) SetDeletedAt(v time.Time) *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *VersionUpsertBulk) UpdateDeletedAt() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *VersionUpsertBulk) ClearDeletedAt() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *VersionUpsertBulk) SetLastModifier(v *model.Modifier) *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *VersionUpsertBulk) UpdateLastModifier() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *VersionUpsertBulk) ClearLastModifier() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *VersionUpsertBulk) SetRemark(v string) *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *VersionUpsertBulk) UpdateRemark() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *VersionUpsertBulk) ClearRemark() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.ClearRemark()
	})
}

// SetPlatform sets the "platform" field.
func (u *VersionUpsertBulk) SetPlatform(v model.AppPlatform) *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *VersionUpsertBulk) UpdatePlatform() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.UpdatePlatform()
	})
}

// SetVersion sets the "version" field.
func (u *VersionUpsertBulk) SetVersion(v string) *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *VersionUpsertBulk) UpdateVersion() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateVersion()
	})
}

// SetContent sets the "content" field.
func (u *VersionUpsertBulk) SetContent(v string) *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *VersionUpsertBulk) UpdateContent() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateContent()
	})
}

// SetForce sets the "force" field.
func (u *VersionUpsertBulk) SetForce(v bool) *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.SetForce(v)
	})
}

// UpdateForce sets the "force" field to the value that was provided on create.
func (u *VersionUpsertBulk) UpdateForce() *VersionUpsertBulk {
	return u.Update(func(s *VersionUpsert) {
		s.UpdateForce()
	})
}

// Exec executes the query.
func (u *VersionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VersionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VersionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VersionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
