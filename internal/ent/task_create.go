// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/task"
	"github.com/rs/xid"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TaskCreate) SetUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetRiderID sets the "rider_id" field.
func (tc *TaskCreate) SetRiderID(u uint64) *TaskCreate {
	tc.mutation.SetRiderID(u)
	return tc
}

// SetUUID sets the "uuid" field.
func (tc *TaskCreate) SetUUID(x xid.ID) *TaskCreate {
	tc.mutation.SetUUID(x)
	return tc
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUUID(x *xid.ID) *TaskCreate {
	if x != nil {
		tc.SetUUID(*x)
	}
	return tc
}

// SetExchangeID sets the "exchange_id" field.
func (tc *TaskCreate) SetExchangeID(u uint64) *TaskCreate {
	tc.mutation.SetExchangeID(u)
	return tc
}

// SetNillableExchangeID sets the "exchange_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableExchangeID(u *uint64) *TaskCreate {
	if u != nil {
		tc.SetExchangeID(*u)
	}
	return tc
}

// SetCabinetID sets the "cabinet_id" field.
func (tc *TaskCreate) SetCabinetID(u uint64) *TaskCreate {
	tc.mutation.SetCabinetID(u)
	return tc
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCabinetID(u *uint64) *TaskCreate {
	if u != nil {
		tc.SetCabinetID(*u)
	}
	return tc
}

// SetSerial sets the "serial" field.
func (tc *TaskCreate) SetSerial(s string) *TaskCreate {
	tc.mutation.SetSerial(s)
	return tc
}

// SetJob sets the "job" field.
func (tc *TaskCreate) SetJob(mj model.TaskJob) *TaskCreate {
	tc.mutation.SetJob(mj)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(ms model.TaskStatus) *TaskCreate {
	tc.mutation.SetStatus(ms)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(ms *model.TaskStatus) *TaskCreate {
	if ms != nil {
		tc.SetStatus(*ms)
	}
	return tc
}

// SetStartAt sets the "start_at" field.
func (tc *TaskCreate) SetStartAt(t time.Time) *TaskCreate {
	tc.mutation.SetStartAt(t)
	return tc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStartAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetStartAt(*t)
	}
	return tc
}

// SetStopAt sets the "stop_at" field.
func (tc *TaskCreate) SetStopAt(t time.Time) *TaskCreate {
	tc.mutation.SetStopAt(t)
	return tc
}

// SetNillableStopAt sets the "stop_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStopAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetStopAt(*t)
	}
	return tc
}

// SetMessage sets the "message" field.
func (tc *TaskCreate) SetMessage(s string) *TaskCreate {
	tc.mutation.SetMessage(s)
	return tc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMessage(s *string) *TaskCreate {
	if s != nil {
		tc.SetMessage(*s)
	}
	return tc
}

// SetExchange sets the "exchange" field.
func (tc *TaskCreate) SetExchange(mti *model.ExchangeTaskInfo) *TaskCreate {
	tc.mutation.SetExchange(mti)
	return tc
}

// SetBusinessBinInfo sets the "business_bin_info" field.
func (tc *TaskCreate) SetBusinessBinInfo(mi *model.BinInfo) *TaskCreate {
	tc.mutation.SetBusinessBinInfo(mi)
	return tc
}

// SetCabinet sets the "cabinet" field.
func (tc *TaskCreate) SetCabinet(mtc *model.ExchangeTaskCabinet) *TaskCreate {
	tc.mutation.SetCabinet(mtc)
	return tc
}

// SetRider sets the "rider" edge to the Rider entity.
func (tc *TaskCreate) SetRider(r *Rider) *TaskCreate {
	return tc.SetRiderID(r.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks[*Task, TaskMutation](ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.UUID(); !ok {
		v := task.DefaultUUID()
		tc.mutation.SetUUID(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := task.DefaultStatus
		tc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	if _, ok := tc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "Task.rider_id"`)}
	}
	if _, ok := tc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Task.uuid"`)}
	}
	if _, ok := tc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "Task.serial"`)}
	}
	if _, ok := tc.mutation.Job(); !ok {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required field "Task.job"`)}
	}
	if v, ok := tc.mutation.Job(); ok {
		if err := task.JobValidator(v); err != nil {
			return &ValidationError{Name: "job", err: fmt.Errorf(`ent: validator failed for field "Task.job": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if _, ok := tc.mutation.Cabinet(); !ok {
		return &ValidationError{Name: "cabinet", err: errors.New(`ent: missing required field "Task.cabinet"`)}
	}
	if _, ok := tc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "Task.rider"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: task.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: task.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.UUID(); ok {
		_spec.SetField(task.FieldUUID, field.TypeOther, value)
		_node.UUID = value
	}
	if value, ok := tc.mutation.ExchangeID(); ok {
		_spec.SetField(task.FieldExchangeID, field.TypeUint64, value)
		_node.ExchangeID = &value
	}
	if value, ok := tc.mutation.CabinetID(); ok {
		_spec.SetField(task.FieldCabinetID, field.TypeUint64, value)
		_node.CabinetID = &value
	}
	if value, ok := tc.mutation.Serial(); ok {
		_spec.SetField(task.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := tc.mutation.Job(); ok {
		_spec.SetField(task.FieldJob, field.TypeEnum, value)
		_node.Job = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeOther, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.StartAt(); ok {
		_spec.SetField(task.FieldStartAt, field.TypeTime, value)
		_node.StartAt = &value
	}
	if value, ok := tc.mutation.StopAt(); ok {
		_spec.SetField(task.FieldStopAt, field.TypeTime, value)
		_node.StopAt = &value
	}
	if value, ok := tc.mutation.Message(); ok {
		_spec.SetField(task.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := tc.mutation.Exchange(); ok {
		_spec.SetField(task.FieldExchange, field.TypeJSON, value)
		_node.Exchange = value
	}
	if value, ok := tc.mutation.BusinessBinInfo(); ok {
		_spec.SetField(task.FieldBusinessBinInfo, field.TypeJSON, value)
		_node.BusinessBinInfo = value
	}
	if value, ok := tc.mutation.Cabinet(); ok {
		_spec.SetField(task.FieldCabinet, field.TypeJSON, value)
		_node.Cabinet = value
	}
	if nodes := tc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.RiderTable,
			Columns: []string{task.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsert) SetUpdatedAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateUpdatedAt() *TaskUpsert {
	u.SetExcluded(task.FieldUpdatedAt)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *TaskUpsert) SetRiderID(v uint64) *TaskUpsert {
	u.Set(task.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRiderID() *TaskUpsert {
	u.SetExcluded(task.FieldRiderID)
	return u
}

// SetExchangeID sets the "exchange_id" field.
func (u *TaskUpsert) SetExchangeID(v uint64) *TaskUpsert {
	u.Set(task.FieldExchangeID, v)
	return u
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateExchangeID() *TaskUpsert {
	u.SetExcluded(task.FieldExchangeID)
	return u
}

// AddExchangeID adds v to the "exchange_id" field.
func (u *TaskUpsert) AddExchangeID(v uint64) *TaskUpsert {
	u.Add(task.FieldExchangeID, v)
	return u
}

// ClearExchangeID clears the value of the "exchange_id" field.
func (u *TaskUpsert) ClearExchangeID() *TaskUpsert {
	u.SetNull(task.FieldExchangeID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *TaskUpsert) SetCabinetID(v uint64) *TaskUpsert {
	u.Set(task.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCabinetID() *TaskUpsert {
	u.SetExcluded(task.FieldCabinetID)
	return u
}

// AddCabinetID adds v to the "cabinet_id" field.
func (u *TaskUpsert) AddCabinetID(v uint64) *TaskUpsert {
	u.Add(task.FieldCabinetID, v)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *TaskUpsert) ClearCabinetID() *TaskUpsert {
	u.SetNull(task.FieldCabinetID)
	return u
}

// SetSerial sets the "serial" field.
func (u *TaskUpsert) SetSerial(v string) *TaskUpsert {
	u.Set(task.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSerial() *TaskUpsert {
	u.SetExcluded(task.FieldSerial)
	return u
}

// SetJob sets the "job" field.
func (u *TaskUpsert) SetJob(v model.TaskJob) *TaskUpsert {
	u.Set(task.FieldJob, v)
	return u
}

// UpdateJob sets the "job" field to the value that was provided on create.
func (u *TaskUpsert) UpdateJob() *TaskUpsert {
	u.SetExcluded(task.FieldJob)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskUpsert) SetStatus(v model.TaskStatus) *TaskUpsert {
	u.Set(task.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStatus() *TaskUpsert {
	u.SetExcluded(task.FieldStatus)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *TaskUpsert) SetStartAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStartAt() *TaskUpsert {
	u.SetExcluded(task.FieldStartAt)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *TaskUpsert) ClearStartAt() *TaskUpsert {
	u.SetNull(task.FieldStartAt)
	return u
}

// SetStopAt sets the "stop_at" field.
func (u *TaskUpsert) SetStopAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldStopAt, v)
	return u
}

// UpdateStopAt sets the "stop_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStopAt() *TaskUpsert {
	u.SetExcluded(task.FieldStopAt)
	return u
}

// ClearStopAt clears the value of the "stop_at" field.
func (u *TaskUpsert) ClearStopAt() *TaskUpsert {
	u.SetNull(task.FieldStopAt)
	return u
}

// SetMessage sets the "message" field.
func (u *TaskUpsert) SetMessage(v string) *TaskUpsert {
	u.Set(task.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMessage() *TaskUpsert {
	u.SetExcluded(task.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *TaskUpsert) ClearMessage() *TaskUpsert {
	u.SetNull(task.FieldMessage)
	return u
}

// SetExchange sets the "exchange" field.
func (u *TaskUpsert) SetExchange(v *model.ExchangeTaskInfo) *TaskUpsert {
	u.Set(task.FieldExchange, v)
	return u
}

// UpdateExchange sets the "exchange" field to the value that was provided on create.
func (u *TaskUpsert) UpdateExchange() *TaskUpsert {
	u.SetExcluded(task.FieldExchange)
	return u
}

// ClearExchange clears the value of the "exchange" field.
func (u *TaskUpsert) ClearExchange() *TaskUpsert {
	u.SetNull(task.FieldExchange)
	return u
}

// SetBusinessBinInfo sets the "business_bin_info" field.
func (u *TaskUpsert) SetBusinessBinInfo(v *model.BinInfo) *TaskUpsert {
	u.Set(task.FieldBusinessBinInfo, v)
	return u
}

// UpdateBusinessBinInfo sets the "business_bin_info" field to the value that was provided on create.
func (u *TaskUpsert) UpdateBusinessBinInfo() *TaskUpsert {
	u.SetExcluded(task.FieldBusinessBinInfo)
	return u
}

// ClearBusinessBinInfo clears the value of the "business_bin_info" field.
func (u *TaskUpsert) ClearBusinessBinInfo() *TaskUpsert {
	u.SetNull(task.FieldBusinessBinInfo)
	return u
}

// SetCabinet sets the "cabinet" field.
func (u *TaskUpsert) SetCabinet(v *model.ExchangeTaskCabinet) *TaskUpsert {
	u.Set(task.FieldCabinet, v)
	return u
}

// UpdateCabinet sets the "cabinet" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCabinet() *TaskUpsert {
	u.SetExcluded(task.FieldCabinet)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(task.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(task.FieldUUID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsertOne) SetUpdatedAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateUpdatedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *TaskUpsertOne) SetRiderID(v uint64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRiderID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRiderID()
	})
}

// SetExchangeID sets the "exchange_id" field.
func (u *TaskUpsertOne) SetExchangeID(v uint64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetExchangeID(v)
	})
}

// AddExchangeID adds v to the "exchange_id" field.
func (u *TaskUpsertOne) AddExchangeID(v uint64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddExchangeID(v)
	})
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateExchangeID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExchangeID()
	})
}

// ClearExchangeID clears the value of the "exchange_id" field.
func (u *TaskUpsertOne) ClearExchangeID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearExchangeID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *TaskUpsertOne) SetCabinetID(v uint64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCabinetID(v)
	})
}

// AddCabinetID adds v to the "cabinet_id" field.
func (u *TaskUpsertOne) AddCabinetID(v uint64) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCabinetID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *TaskUpsertOne) ClearCabinetID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCabinetID()
	})
}

// SetSerial sets the "serial" field.
func (u *TaskUpsertOne) SetSerial(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSerial() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSerial()
	})
}

// SetJob sets the "job" field.
func (u *TaskUpsertOne) SetJob(v model.TaskJob) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetJob(v)
	})
}

// UpdateJob sets the "job" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateJob() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateJob()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertOne) SetStatus(v model.TaskStatus) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStatus() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetStartAt sets the "start_at" field.
func (u *TaskUpsertOne) SetStartAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStartAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *TaskUpsertOne) ClearStartAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearStartAt()
	})
}

// SetStopAt sets the "stop_at" field.
func (u *TaskUpsertOne) SetStopAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStopAt(v)
	})
}

// UpdateStopAt sets the "stop_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStopAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStopAt()
	})
}

// ClearStopAt clears the value of the "stop_at" field.
func (u *TaskUpsertOne) ClearStopAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearStopAt()
	})
}

// SetMessage sets the "message" field.
func (u *TaskUpsertOne) SetMessage(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMessage() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *TaskUpsertOne) ClearMessage() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMessage()
	})
}

// SetExchange sets the "exchange" field.
func (u *TaskUpsertOne) SetExchange(v *model.ExchangeTaskInfo) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetExchange(v)
	})
}

// UpdateExchange sets the "exchange" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateExchange() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExchange()
	})
}

// ClearExchange clears the value of the "exchange" field.
func (u *TaskUpsertOne) ClearExchange() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearExchange()
	})
}

// SetBusinessBinInfo sets the "business_bin_info" field.
func (u *TaskUpsertOne) SetBusinessBinInfo(v *model.BinInfo) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetBusinessBinInfo(v)
	})
}

// UpdateBusinessBinInfo sets the "business_bin_info" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateBusinessBinInfo() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateBusinessBinInfo()
	})
}

// ClearBusinessBinInfo clears the value of the "business_bin_info" field.
func (u *TaskUpsertOne) ClearBusinessBinInfo() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearBusinessBinInfo()
	})
}

// SetCabinet sets the "cabinet" field.
func (u *TaskUpsertOne) SetCabinet(v *model.ExchangeTaskCabinet) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCabinet(v)
	})
}

// UpdateCabinet sets the "cabinet" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCabinet() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCabinet()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(task.FieldCreatedAt)
			}
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(task.FieldUUID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskUpsertBulk) SetUpdatedAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateUpdatedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *TaskUpsertBulk) SetRiderID(v uint64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRiderID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRiderID()
	})
}

// SetExchangeID sets the "exchange_id" field.
func (u *TaskUpsertBulk) SetExchangeID(v uint64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetExchangeID(v)
	})
}

// AddExchangeID adds v to the "exchange_id" field.
func (u *TaskUpsertBulk) AddExchangeID(v uint64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddExchangeID(v)
	})
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateExchangeID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExchangeID()
	})
}

// ClearExchangeID clears the value of the "exchange_id" field.
func (u *TaskUpsertBulk) ClearExchangeID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearExchangeID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *TaskUpsertBulk) SetCabinetID(v uint64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCabinetID(v)
	})
}

// AddCabinetID adds v to the "cabinet_id" field.
func (u *TaskUpsertBulk) AddCabinetID(v uint64) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCabinetID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *TaskUpsertBulk) ClearCabinetID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCabinetID()
	})
}

// SetSerial sets the "serial" field.
func (u *TaskUpsertBulk) SetSerial(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSerial() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSerial()
	})
}

// SetJob sets the "job" field.
func (u *TaskUpsertBulk) SetJob(v model.TaskJob) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetJob(v)
	})
}

// UpdateJob sets the "job" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateJob() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateJob()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertBulk) SetStatus(v model.TaskStatus) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStatus() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetStartAt sets the "start_at" field.
func (u *TaskUpsertBulk) SetStartAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStartAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *TaskUpsertBulk) ClearStartAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearStartAt()
	})
}

// SetStopAt sets the "stop_at" field.
func (u *TaskUpsertBulk) SetStopAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStopAt(v)
	})
}

// UpdateStopAt sets the "stop_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStopAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStopAt()
	})
}

// ClearStopAt clears the value of the "stop_at" field.
func (u *TaskUpsertBulk) ClearStopAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearStopAt()
	})
}

// SetMessage sets the "message" field.
func (u *TaskUpsertBulk) SetMessage(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMessage() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *TaskUpsertBulk) ClearMessage() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMessage()
	})
}

// SetExchange sets the "exchange" field.
func (u *TaskUpsertBulk) SetExchange(v *model.ExchangeTaskInfo) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetExchange(v)
	})
}

// UpdateExchange sets the "exchange" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateExchange() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExchange()
	})
}

// ClearExchange clears the value of the "exchange" field.
func (u *TaskUpsertBulk) ClearExchange() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearExchange()
	})
}

// SetBusinessBinInfo sets the "business_bin_info" field.
func (u *TaskUpsertBulk) SetBusinessBinInfo(v *model.BinInfo) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetBusinessBinInfo(v)
	})
}

// UpdateBusinessBinInfo sets the "business_bin_info" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateBusinessBinInfo() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateBusinessBinInfo()
	})
}

// ClearBusinessBinInfo clears the value of the "business_bin_info" field.
func (u *TaskUpsertBulk) ClearBusinessBinInfo() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearBusinessBinInfo()
	})
}

// SetCabinet sets the "cabinet" field.
func (u *TaskUpsertBulk) SetCabinet(v *model.ExchangeTaskCabinet) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCabinet(v)
	})
}

// UpdateCabinet sets the "cabinet" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCabinet() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCabinet()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
