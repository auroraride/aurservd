// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetTransferQuery is the builder for querying AssetTransfer entities.
type AssetTransferQuery struct {
	config
	ctx                      *QueryContext
	order                    []assettransfer.OrderOption
	inters                   []Interceptor
	predicates               []predicate.AssetTransfer
	withDetails              *AssetTransferDetailsQuery
	withLocationStore        *StoreQuery
	withLocationCabinet      *CabinetQuery
	withLocationStation      *EnterpriseStationQuery
	withLocationRider        *RiderQuery
	withLocationOperator     *MaintainerQuery
	withLocationWarehouse    *WarehouseQuery
	withToStore              *StoreQuery
	withToCabinet            *CabinetQuery
	withToStation            *EnterpriseStationQuery
	withToRider              *RiderQuery
	withToOperator           *MaintainerQuery
	withToWarehouse          *WarehouseQuery
	withOutOperateManager    *ManagerQuery
	withOutOperateStore      *StoreQuery
	withOutOperateAgent      *AgentQuery
	withOutOperateMaintainer *MaintainerQuery
	withOutOperateCabinet    *CabinetQuery
	withOutOperateRider      *RiderQuery
	withInOperateManager     *ManagerQuery
	withInOperateStore       *StoreQuery
	withInOperateAgent       *AgentQuery
	withInOperateMaintainer  *MaintainerQuery
	withInOperateCabinet     *CabinetQuery
	withInOperateRider       *RiderQuery
	modifiers                []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetTransferQuery builder.
func (atq *AssetTransferQuery) Where(ps ...predicate.AssetTransfer) *AssetTransferQuery {
	atq.predicates = append(atq.predicates, ps...)
	return atq
}

// Limit the number of records to be returned by this query.
func (atq *AssetTransferQuery) Limit(limit int) *AssetTransferQuery {
	atq.ctx.Limit = &limit
	return atq
}

// Offset to start from.
func (atq *AssetTransferQuery) Offset(offset int) *AssetTransferQuery {
	atq.ctx.Offset = &offset
	return atq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (atq *AssetTransferQuery) Unique(unique bool) *AssetTransferQuery {
	atq.ctx.Unique = &unique
	return atq
}

// Order specifies how the records should be ordered.
func (atq *AssetTransferQuery) Order(o ...assettransfer.OrderOption) *AssetTransferQuery {
	atq.order = append(atq.order, o...)
	return atq
}

// QueryDetails chains the current query on the "details" edge.
func (atq *AssetTransferQuery) QueryDetails() *AssetTransferDetailsQuery {
	query := (&AssetTransferDetailsClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(assettransferdetails.Table, assettransferdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assettransfer.DetailsTable, assettransfer.DetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationStore chains the current query on the "location_store" edge.
func (atq *AssetTransferQuery) QueryLocationStore() *StoreQuery {
	query := (&StoreClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.LocationStoreTable, assettransfer.LocationStoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationCabinet chains the current query on the "location_cabinet" edge.
func (atq *AssetTransferQuery) QueryLocationCabinet() *CabinetQuery {
	query := (&CabinetClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.LocationCabinetTable, assettransfer.LocationCabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationStation chains the current query on the "location_station" edge.
func (atq *AssetTransferQuery) QueryLocationStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.LocationStationTable, assettransfer.LocationStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationRider chains the current query on the "location_rider" edge.
func (atq *AssetTransferQuery) QueryLocationRider() *RiderQuery {
	query := (&RiderClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.LocationRiderTable, assettransfer.LocationRiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationOperator chains the current query on the "location_operator" edge.
func (atq *AssetTransferQuery) QueryLocationOperator() *MaintainerQuery {
	query := (&MaintainerClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.LocationOperatorTable, assettransfer.LocationOperatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocationWarehouse chains the current query on the "location_warehouse" edge.
func (atq *AssetTransferQuery) QueryLocationWarehouse() *WarehouseQuery {
	query := (&WarehouseClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.LocationWarehouseTable, assettransfer.LocationWarehouseColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToStore chains the current query on the "to_store" edge.
func (atq *AssetTransferQuery) QueryToStore() *StoreQuery {
	query := (&StoreClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToStoreTable, assettransfer.ToStoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToCabinet chains the current query on the "to_cabinet" edge.
func (atq *AssetTransferQuery) QueryToCabinet() *CabinetQuery {
	query := (&CabinetClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToCabinetTable, assettransfer.ToCabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToStation chains the current query on the "to_station" edge.
func (atq *AssetTransferQuery) QueryToStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToStationTable, assettransfer.ToStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToRider chains the current query on the "to_rider" edge.
func (atq *AssetTransferQuery) QueryToRider() *RiderQuery {
	query := (&RiderClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToRiderTable, assettransfer.ToRiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToOperator chains the current query on the "to_operator" edge.
func (atq *AssetTransferQuery) QueryToOperator() *MaintainerQuery {
	query := (&MaintainerClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToOperatorTable, assettransfer.ToOperatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryToWarehouse chains the current query on the "to_warehouse" edge.
func (atq *AssetTransferQuery) QueryToWarehouse() *WarehouseQuery {
	query := (&WarehouseClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToWarehouseTable, assettransfer.ToWarehouseColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOutOperateManager chains the current query on the "out_operate_manager" edge.
func (atq *AssetTransferQuery) QueryOutOperateManager() *ManagerQuery {
	query := (&ManagerClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateManagerTable, assettransfer.OutOperateManagerColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOutOperateStore chains the current query on the "out_operate_store" edge.
func (atq *AssetTransferQuery) QueryOutOperateStore() *StoreQuery {
	query := (&StoreClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateStoreTable, assettransfer.OutOperateStoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOutOperateAgent chains the current query on the "out_operate_agent" edge.
func (atq *AssetTransferQuery) QueryOutOperateAgent() *AgentQuery {
	query := (&AgentClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateAgentTable, assettransfer.OutOperateAgentColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOutOperateMaintainer chains the current query on the "out_operate_maintainer" edge.
func (atq *AssetTransferQuery) QueryOutOperateMaintainer() *MaintainerQuery {
	query := (&MaintainerClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateMaintainerTable, assettransfer.OutOperateMaintainerColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOutOperateCabinet chains the current query on the "out_operate_cabinet" edge.
func (atq *AssetTransferQuery) QueryOutOperateCabinet() *CabinetQuery {
	query := (&CabinetClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateCabinetTable, assettransfer.OutOperateCabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOutOperateRider chains the current query on the "out_operate_rider" edge.
func (atq *AssetTransferQuery) QueryOutOperateRider() *RiderQuery {
	query := (&RiderClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateRiderTable, assettransfer.OutOperateRiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateManager chains the current query on the "in_operate_manager" edge.
func (atq *AssetTransferQuery) QueryInOperateManager() *ManagerQuery {
	query := (&ManagerClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.InOperateManagerTable, assettransfer.InOperateManagerColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateStore chains the current query on the "in_operate_store" edge.
func (atq *AssetTransferQuery) QueryInOperateStore() *StoreQuery {
	query := (&StoreClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.InOperateStoreTable, assettransfer.InOperateStoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateAgent chains the current query on the "in_operate_agent" edge.
func (atq *AssetTransferQuery) QueryInOperateAgent() *AgentQuery {
	query := (&AgentClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.InOperateAgentTable, assettransfer.InOperateAgentColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateMaintainer chains the current query on the "in_operate_maintainer" edge.
func (atq *AssetTransferQuery) QueryInOperateMaintainer() *MaintainerQuery {
	query := (&MaintainerClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.InOperateMaintainerTable, assettransfer.InOperateMaintainerColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateCabinet chains the current query on the "in_operate_cabinet" edge.
func (atq *AssetTransferQuery) QueryInOperateCabinet() *CabinetQuery {
	query := (&CabinetClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.InOperateCabinetTable, assettransfer.InOperateCabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateRider chains the current query on the "in_operate_rider" edge.
func (atq *AssetTransferQuery) QueryInOperateRider() *RiderQuery {
	query := (&RiderClient{config: atq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.InOperateRiderTable, assettransfer.InOperateRiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(atq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssetTransfer entity from the query.
// Returns a *NotFoundError when no AssetTransfer was found.
func (atq *AssetTransferQuery) First(ctx context.Context) (*AssetTransfer, error) {
	nodes, err := atq.Limit(1).All(setContextOp(ctx, atq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assettransfer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (atq *AssetTransferQuery) FirstX(ctx context.Context) *AssetTransfer {
	node, err := atq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssetTransfer ID from the query.
// Returns a *NotFoundError when no AssetTransfer ID was found.
func (atq *AssetTransferQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = atq.Limit(1).IDs(setContextOp(ctx, atq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assettransfer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (atq *AssetTransferQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := atq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssetTransfer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssetTransfer entity is found.
// Returns a *NotFoundError when no AssetTransfer entities are found.
func (atq *AssetTransferQuery) Only(ctx context.Context) (*AssetTransfer, error) {
	nodes, err := atq.Limit(2).All(setContextOp(ctx, atq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assettransfer.Label}
	default:
		return nil, &NotSingularError{assettransfer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (atq *AssetTransferQuery) OnlyX(ctx context.Context) *AssetTransfer {
	node, err := atq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssetTransfer ID in the query.
// Returns a *NotSingularError when more than one AssetTransfer ID is found.
// Returns a *NotFoundError when no entities are found.
func (atq *AssetTransferQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = atq.Limit(2).IDs(setContextOp(ctx, atq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assettransfer.Label}
	default:
		err = &NotSingularError{assettransfer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (atq *AssetTransferQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := atq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssetTransfers.
func (atq *AssetTransferQuery) All(ctx context.Context) ([]*AssetTransfer, error) {
	ctx = setContextOp(ctx, atq.ctx, "All")
	if err := atq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssetTransfer, *AssetTransferQuery]()
	return withInterceptors[[]*AssetTransfer](ctx, atq, qr, atq.inters)
}

// AllX is like All, but panics if an error occurs.
func (atq *AssetTransferQuery) AllX(ctx context.Context) []*AssetTransfer {
	nodes, err := atq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssetTransfer IDs.
func (atq *AssetTransferQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if atq.ctx.Unique == nil && atq.path != nil {
		atq.Unique(true)
	}
	ctx = setContextOp(ctx, atq.ctx, "IDs")
	if err = atq.Select(assettransfer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (atq *AssetTransferQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := atq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (atq *AssetTransferQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, atq.ctx, "Count")
	if err := atq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, atq, querierCount[*AssetTransferQuery](), atq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (atq *AssetTransferQuery) CountX(ctx context.Context) int {
	count, err := atq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (atq *AssetTransferQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, atq.ctx, "Exist")
	switch _, err := atq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (atq *AssetTransferQuery) ExistX(ctx context.Context) bool {
	exist, err := atq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetTransferQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (atq *AssetTransferQuery) Clone() *AssetTransferQuery {
	if atq == nil {
		return nil
	}
	return &AssetTransferQuery{
		config:                   atq.config,
		ctx:                      atq.ctx.Clone(),
		order:                    append([]assettransfer.OrderOption{}, atq.order...),
		inters:                   append([]Interceptor{}, atq.inters...),
		predicates:               append([]predicate.AssetTransfer{}, atq.predicates...),
		withDetails:              atq.withDetails.Clone(),
		withLocationStore:        atq.withLocationStore.Clone(),
		withLocationCabinet:      atq.withLocationCabinet.Clone(),
		withLocationStation:      atq.withLocationStation.Clone(),
		withLocationRider:        atq.withLocationRider.Clone(),
		withLocationOperator:     atq.withLocationOperator.Clone(),
		withLocationWarehouse:    atq.withLocationWarehouse.Clone(),
		withToStore:              atq.withToStore.Clone(),
		withToCabinet:            atq.withToCabinet.Clone(),
		withToStation:            atq.withToStation.Clone(),
		withToRider:              atq.withToRider.Clone(),
		withToOperator:           atq.withToOperator.Clone(),
		withToWarehouse:          atq.withToWarehouse.Clone(),
		withOutOperateManager:    atq.withOutOperateManager.Clone(),
		withOutOperateStore:      atq.withOutOperateStore.Clone(),
		withOutOperateAgent:      atq.withOutOperateAgent.Clone(),
		withOutOperateMaintainer: atq.withOutOperateMaintainer.Clone(),
		withOutOperateCabinet:    atq.withOutOperateCabinet.Clone(),
		withOutOperateRider:      atq.withOutOperateRider.Clone(),
		withInOperateManager:     atq.withInOperateManager.Clone(),
		withInOperateStore:       atq.withInOperateStore.Clone(),
		withInOperateAgent:       atq.withInOperateAgent.Clone(),
		withInOperateMaintainer:  atq.withInOperateMaintainer.Clone(),
		withInOperateCabinet:     atq.withInOperateCabinet.Clone(),
		withInOperateRider:       atq.withInOperateRider.Clone(),
		// clone intermediate query.
		sql:  atq.sql.Clone(),
		path: atq.path,
	}
}

// WithDetails tells the query-builder to eager-load the nodes that are connected to
// the "details" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithDetails(opts ...func(*AssetTransferDetailsQuery)) *AssetTransferQuery {
	query := (&AssetTransferDetailsClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withDetails = query
	return atq
}

// WithLocationStore tells the query-builder to eager-load the nodes that are connected to
// the "location_store" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithLocationStore(opts ...func(*StoreQuery)) *AssetTransferQuery {
	query := (&StoreClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withLocationStore = query
	return atq
}

// WithLocationCabinet tells the query-builder to eager-load the nodes that are connected to
// the "location_cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithLocationCabinet(opts ...func(*CabinetQuery)) *AssetTransferQuery {
	query := (&CabinetClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withLocationCabinet = query
	return atq
}

// WithLocationStation tells the query-builder to eager-load the nodes that are connected to
// the "location_station" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithLocationStation(opts ...func(*EnterpriseStationQuery)) *AssetTransferQuery {
	query := (&EnterpriseStationClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withLocationStation = query
	return atq
}

// WithLocationRider tells the query-builder to eager-load the nodes that are connected to
// the "location_rider" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithLocationRider(opts ...func(*RiderQuery)) *AssetTransferQuery {
	query := (&RiderClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withLocationRider = query
	return atq
}

// WithLocationOperator tells the query-builder to eager-load the nodes that are connected to
// the "location_operator" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithLocationOperator(opts ...func(*MaintainerQuery)) *AssetTransferQuery {
	query := (&MaintainerClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withLocationOperator = query
	return atq
}

// WithLocationWarehouse tells the query-builder to eager-load the nodes that are connected to
// the "location_warehouse" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithLocationWarehouse(opts ...func(*WarehouseQuery)) *AssetTransferQuery {
	query := (&WarehouseClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withLocationWarehouse = query
	return atq
}

// WithToStore tells the query-builder to eager-load the nodes that are connected to
// the "to_store" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithToStore(opts ...func(*StoreQuery)) *AssetTransferQuery {
	query := (&StoreClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withToStore = query
	return atq
}

// WithToCabinet tells the query-builder to eager-load the nodes that are connected to
// the "to_cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithToCabinet(opts ...func(*CabinetQuery)) *AssetTransferQuery {
	query := (&CabinetClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withToCabinet = query
	return atq
}

// WithToStation tells the query-builder to eager-load the nodes that are connected to
// the "to_station" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithToStation(opts ...func(*EnterpriseStationQuery)) *AssetTransferQuery {
	query := (&EnterpriseStationClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withToStation = query
	return atq
}

// WithToRider tells the query-builder to eager-load the nodes that are connected to
// the "to_rider" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithToRider(opts ...func(*RiderQuery)) *AssetTransferQuery {
	query := (&RiderClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withToRider = query
	return atq
}

// WithToOperator tells the query-builder to eager-load the nodes that are connected to
// the "to_operator" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithToOperator(opts ...func(*MaintainerQuery)) *AssetTransferQuery {
	query := (&MaintainerClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withToOperator = query
	return atq
}

// WithToWarehouse tells the query-builder to eager-load the nodes that are connected to
// the "to_warehouse" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithToWarehouse(opts ...func(*WarehouseQuery)) *AssetTransferQuery {
	query := (&WarehouseClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withToWarehouse = query
	return atq
}

// WithOutOperateManager tells the query-builder to eager-load the nodes that are connected to
// the "out_operate_manager" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithOutOperateManager(opts ...func(*ManagerQuery)) *AssetTransferQuery {
	query := (&ManagerClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withOutOperateManager = query
	return atq
}

// WithOutOperateStore tells the query-builder to eager-load the nodes that are connected to
// the "out_operate_store" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithOutOperateStore(opts ...func(*StoreQuery)) *AssetTransferQuery {
	query := (&StoreClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withOutOperateStore = query
	return atq
}

// WithOutOperateAgent tells the query-builder to eager-load the nodes that are connected to
// the "out_operate_agent" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithOutOperateAgent(opts ...func(*AgentQuery)) *AssetTransferQuery {
	query := (&AgentClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withOutOperateAgent = query
	return atq
}

// WithOutOperateMaintainer tells the query-builder to eager-load the nodes that are connected to
// the "out_operate_maintainer" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithOutOperateMaintainer(opts ...func(*MaintainerQuery)) *AssetTransferQuery {
	query := (&MaintainerClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withOutOperateMaintainer = query
	return atq
}

// WithOutOperateCabinet tells the query-builder to eager-load the nodes that are connected to
// the "out_operate_cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithOutOperateCabinet(opts ...func(*CabinetQuery)) *AssetTransferQuery {
	query := (&CabinetClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withOutOperateCabinet = query
	return atq
}

// WithOutOperateRider tells the query-builder to eager-load the nodes that are connected to
// the "out_operate_rider" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithOutOperateRider(opts ...func(*RiderQuery)) *AssetTransferQuery {
	query := (&RiderClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withOutOperateRider = query
	return atq
}

// WithInOperateManager tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_manager" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithInOperateManager(opts ...func(*ManagerQuery)) *AssetTransferQuery {
	query := (&ManagerClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withInOperateManager = query
	return atq
}

// WithInOperateStore tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_store" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithInOperateStore(opts ...func(*StoreQuery)) *AssetTransferQuery {
	query := (&StoreClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withInOperateStore = query
	return atq
}

// WithInOperateAgent tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_agent" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithInOperateAgent(opts ...func(*AgentQuery)) *AssetTransferQuery {
	query := (&AgentClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withInOperateAgent = query
	return atq
}

// WithInOperateMaintainer tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_maintainer" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithInOperateMaintainer(opts ...func(*MaintainerQuery)) *AssetTransferQuery {
	query := (&MaintainerClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withInOperateMaintainer = query
	return atq
}

// WithInOperateCabinet tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithInOperateCabinet(opts ...func(*CabinetQuery)) *AssetTransferQuery {
	query := (&CabinetClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withInOperateCabinet = query
	return atq
}

// WithInOperateRider tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_rider" edge. The optional arguments are used to configure the query builder of the edge.
func (atq *AssetTransferQuery) WithInOperateRider(opts ...func(*RiderQuery)) *AssetTransferQuery {
	query := (&RiderClient{config: atq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atq.withInOperateRider = query
	return atq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssetTransfer.Query().
//		GroupBy(assettransfer.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (atq *AssetTransferQuery) GroupBy(field string, fields ...string) *AssetTransferGroupBy {
	atq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetTransferGroupBy{build: atq}
	grbuild.flds = &atq.ctx.Fields
	grbuild.label = assettransfer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AssetTransfer.Query().
//		Select(assettransfer.FieldCreatedAt).
//		Scan(ctx, &v)
func (atq *AssetTransferQuery) Select(fields ...string) *AssetTransferSelect {
	atq.ctx.Fields = append(atq.ctx.Fields, fields...)
	sbuild := &AssetTransferSelect{AssetTransferQuery: atq}
	sbuild.label = assettransfer.Label
	sbuild.flds, sbuild.scan = &atq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetTransferSelect configured with the given aggregations.
func (atq *AssetTransferQuery) Aggregate(fns ...AggregateFunc) *AssetTransferSelect {
	return atq.Select().Aggregate(fns...)
}

func (atq *AssetTransferQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range atq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, atq); err != nil {
				return err
			}
		}
	}
	for _, f := range atq.ctx.Fields {
		if !assettransfer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if atq.path != nil {
		prev, err := atq.path(ctx)
		if err != nil {
			return err
		}
		atq.sql = prev
	}
	return nil
}

func (atq *AssetTransferQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssetTransfer, error) {
	var (
		nodes       = []*AssetTransfer{}
		_spec       = atq.querySpec()
		loadedTypes = [25]bool{
			atq.withDetails != nil,
			atq.withLocationStore != nil,
			atq.withLocationCabinet != nil,
			atq.withLocationStation != nil,
			atq.withLocationRider != nil,
			atq.withLocationOperator != nil,
			atq.withLocationWarehouse != nil,
			atq.withToStore != nil,
			atq.withToCabinet != nil,
			atq.withToStation != nil,
			atq.withToRider != nil,
			atq.withToOperator != nil,
			atq.withToWarehouse != nil,
			atq.withOutOperateManager != nil,
			atq.withOutOperateStore != nil,
			atq.withOutOperateAgent != nil,
			atq.withOutOperateMaintainer != nil,
			atq.withOutOperateCabinet != nil,
			atq.withOutOperateRider != nil,
			atq.withInOperateManager != nil,
			atq.withInOperateStore != nil,
			atq.withInOperateAgent != nil,
			atq.withInOperateMaintainer != nil,
			atq.withInOperateCabinet != nil,
			atq.withInOperateRider != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssetTransfer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssetTransfer{config: atq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(atq.modifiers) > 0 {
		_spec.Modifiers = atq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, atq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := atq.withDetails; query != nil {
		if err := atq.loadDetails(ctx, query, nodes,
			func(n *AssetTransfer) { n.Edges.Details = []*AssetTransferDetails{} },
			func(n *AssetTransfer, e *AssetTransferDetails) { n.Edges.Details = append(n.Edges.Details, e) }); err != nil {
			return nil, err
		}
	}
	if query := atq.withLocationStore; query != nil {
		if err := atq.loadLocationStore(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Store) { n.Edges.LocationStore = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withLocationCabinet; query != nil {
		if err := atq.loadLocationCabinet(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Cabinet) { n.Edges.LocationCabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withLocationStation; query != nil {
		if err := atq.loadLocationStation(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *EnterpriseStation) { n.Edges.LocationStation = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withLocationRider; query != nil {
		if err := atq.loadLocationRider(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Rider) { n.Edges.LocationRider = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withLocationOperator; query != nil {
		if err := atq.loadLocationOperator(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Maintainer) { n.Edges.LocationOperator = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withLocationWarehouse; query != nil {
		if err := atq.loadLocationWarehouse(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Warehouse) { n.Edges.LocationWarehouse = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withToStore; query != nil {
		if err := atq.loadToStore(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Store) { n.Edges.ToStore = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withToCabinet; query != nil {
		if err := atq.loadToCabinet(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Cabinet) { n.Edges.ToCabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withToStation; query != nil {
		if err := atq.loadToStation(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *EnterpriseStation) { n.Edges.ToStation = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withToRider; query != nil {
		if err := atq.loadToRider(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Rider) { n.Edges.ToRider = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withToOperator; query != nil {
		if err := atq.loadToOperator(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Maintainer) { n.Edges.ToOperator = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withToWarehouse; query != nil {
		if err := atq.loadToWarehouse(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Warehouse) { n.Edges.ToWarehouse = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withOutOperateManager; query != nil {
		if err := atq.loadOutOperateManager(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Manager) { n.Edges.OutOperateManager = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withOutOperateStore; query != nil {
		if err := atq.loadOutOperateStore(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Store) { n.Edges.OutOperateStore = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withOutOperateAgent; query != nil {
		if err := atq.loadOutOperateAgent(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Agent) { n.Edges.OutOperateAgent = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withOutOperateMaintainer; query != nil {
		if err := atq.loadOutOperateMaintainer(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Maintainer) { n.Edges.OutOperateMaintainer = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withOutOperateCabinet; query != nil {
		if err := atq.loadOutOperateCabinet(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Cabinet) { n.Edges.OutOperateCabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withOutOperateRider; query != nil {
		if err := atq.loadOutOperateRider(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Rider) { n.Edges.OutOperateRider = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withInOperateManager; query != nil {
		if err := atq.loadInOperateManager(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Manager) { n.Edges.InOperateManager = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withInOperateStore; query != nil {
		if err := atq.loadInOperateStore(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Store) { n.Edges.InOperateStore = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withInOperateAgent; query != nil {
		if err := atq.loadInOperateAgent(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Agent) { n.Edges.InOperateAgent = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withInOperateMaintainer; query != nil {
		if err := atq.loadInOperateMaintainer(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Maintainer) { n.Edges.InOperateMaintainer = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withInOperateCabinet; query != nil {
		if err := atq.loadInOperateCabinet(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Cabinet) { n.Edges.InOperateCabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := atq.withInOperateRider; query != nil {
		if err := atq.loadInOperateRider(ctx, query, nodes, nil,
			func(n *AssetTransfer, e *Rider) { n.Edges.InOperateRider = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (atq *AssetTransferQuery) loadDetails(ctx context.Context, query *AssetTransferDetailsQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *AssetTransferDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*AssetTransfer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(assettransferdetails.FieldTransferID)
	}
	query.Where(predicate.AssetTransferDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(assettransfer.DetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.TransferID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "transfer_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (atq *AssetTransferQuery) loadLocationStore(ctx context.Context, query *StoreQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].FromLocationID == nil {
			continue
		}
		fk := *nodes[i].FromLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "from_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadLocationCabinet(ctx context.Context, query *CabinetQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].FromLocationID == nil {
			continue
		}
		fk := *nodes[i].FromLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "from_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadLocationStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].FromLocationID == nil {
			continue
		}
		fk := *nodes[i].FromLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "from_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadLocationRider(ctx context.Context, query *RiderQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].FromLocationID == nil {
			continue
		}
		fk := *nodes[i].FromLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "from_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadLocationOperator(ctx context.Context, query *MaintainerQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].FromLocationID == nil {
			continue
		}
		fk := *nodes[i].FromLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "from_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadLocationWarehouse(ctx context.Context, query *WarehouseQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Warehouse)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].FromLocationID == nil {
			continue
		}
		fk := *nodes[i].FromLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(warehouse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "from_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadToStore(ctx context.Context, query *StoreQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].ToLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "to_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadToCabinet(ctx context.Context, query *CabinetQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].ToLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "to_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadToStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].ToLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "to_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadToRider(ctx context.Context, query *RiderQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].ToLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "to_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadToOperator(ctx context.Context, query *MaintainerQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].ToLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "to_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadToWarehouse(ctx context.Context, query *WarehouseQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Warehouse)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].ToLocationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(warehouse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "to_location_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadOutOperateManager(ctx context.Context, query *ManagerQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Manager)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].OutOperateID == nil {
			continue
		}
		fk := *nodes[i].OutOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(manager.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "out_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadOutOperateStore(ctx context.Context, query *StoreQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].OutOperateID == nil {
			continue
		}
		fk := *nodes[i].OutOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "out_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadOutOperateAgent(ctx context.Context, query *AgentQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Agent)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].OutOperateID == nil {
			continue
		}
		fk := *nodes[i].OutOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(agent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "out_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadOutOperateMaintainer(ctx context.Context, query *MaintainerQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].OutOperateID == nil {
			continue
		}
		fk := *nodes[i].OutOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "out_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadOutOperateCabinet(ctx context.Context, query *CabinetQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].OutOperateID == nil {
			continue
		}
		fk := *nodes[i].OutOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "out_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadOutOperateRider(ctx context.Context, query *RiderQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		if nodes[i].OutOperateID == nil {
			continue
		}
		fk := *nodes[i].OutOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "out_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadInOperateManager(ctx context.Context, query *ManagerQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Manager)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(manager.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadInOperateStore(ctx context.Context, query *StoreQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadInOperateAgent(ctx context.Context, query *AgentQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Agent)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(agent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadInOperateMaintainer(ctx context.Context, query *MaintainerQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadInOperateCabinet(ctx context.Context, query *CabinetQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atq *AssetTransferQuery) loadInOperateRider(ctx context.Context, query *RiderQuery, nodes []*AssetTransfer, init func(*AssetTransfer), assign func(*AssetTransfer, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransfer)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (atq *AssetTransferQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := atq.querySpec()
	if len(atq.modifiers) > 0 {
		_spec.Modifiers = atq.modifiers
	}
	_spec.Node.Columns = atq.ctx.Fields
	if len(atq.ctx.Fields) > 0 {
		_spec.Unique = atq.ctx.Unique != nil && *atq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, atq.driver, _spec)
}

func (atq *AssetTransferQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assettransfer.Table, assettransfer.Columns, sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64))
	_spec.From = atq.sql
	if unique := atq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if atq.path != nil {
		_spec.Unique = true
	}
	if fields := atq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransfer.FieldID)
		for i := range fields {
			if fields[i] != assettransfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if atq.withLocationStore != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldFromLocationID)
		}
		if atq.withLocationCabinet != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldFromLocationID)
		}
		if atq.withLocationStation != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldFromLocationID)
		}
		if atq.withLocationRider != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldFromLocationID)
		}
		if atq.withLocationOperator != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldFromLocationID)
		}
		if atq.withLocationWarehouse != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldFromLocationID)
		}
		if atq.withToStore != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldToLocationID)
		}
		if atq.withToCabinet != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldToLocationID)
		}
		if atq.withToStation != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldToLocationID)
		}
		if atq.withToRider != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldToLocationID)
		}
		if atq.withToOperator != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldToLocationID)
		}
		if atq.withToWarehouse != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldToLocationID)
		}
		if atq.withOutOperateManager != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldOutOperateID)
		}
		if atq.withOutOperateStore != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldOutOperateID)
		}
		if atq.withOutOperateAgent != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldOutOperateID)
		}
		if atq.withOutOperateMaintainer != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldOutOperateID)
		}
		if atq.withOutOperateCabinet != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldOutOperateID)
		}
		if atq.withOutOperateRider != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldOutOperateID)
		}
		if atq.withInOperateManager != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldInOperateID)
		}
		if atq.withInOperateStore != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldInOperateID)
		}
		if atq.withInOperateAgent != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldInOperateID)
		}
		if atq.withInOperateMaintainer != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldInOperateID)
		}
		if atq.withInOperateCabinet != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldInOperateID)
		}
		if atq.withInOperateRider != nil {
			_spec.Node.AddColumnOnce(assettransfer.FieldInOperateID)
		}
	}
	if ps := atq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := atq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := atq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := atq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (atq *AssetTransferQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(atq.driver.Dialect())
	t1 := builder.Table(assettransfer.Table)
	columns := atq.ctx.Fields
	if len(columns) == 0 {
		columns = assettransfer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if atq.sql != nil {
		selector = atq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if atq.ctx.Unique != nil && *atq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range atq.modifiers {
		m(selector)
	}
	for _, p := range atq.predicates {
		p(selector)
	}
	for _, p := range atq.order {
		p(selector)
	}
	if offset := atq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := atq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (atq *AssetTransferQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetTransferSelect {
	atq.modifiers = append(atq.modifiers, modifiers...)
	return atq.Select()
}

type AssetTransferQueryWith string

var (
	AssetTransferQueryWithDetails              AssetTransferQueryWith = "Details"
	AssetTransferQueryWithLocationStore        AssetTransferQueryWith = "LocationStore"
	AssetTransferQueryWithLocationCabinet      AssetTransferQueryWith = "LocationCabinet"
	AssetTransferQueryWithLocationStation      AssetTransferQueryWith = "LocationStation"
	AssetTransferQueryWithLocationRider        AssetTransferQueryWith = "LocationRider"
	AssetTransferQueryWithLocationOperator     AssetTransferQueryWith = "LocationOperator"
	AssetTransferQueryWithLocationWarehouse    AssetTransferQueryWith = "LocationWarehouse"
	AssetTransferQueryWithToStore              AssetTransferQueryWith = "ToStore"
	AssetTransferQueryWithToCabinet            AssetTransferQueryWith = "ToCabinet"
	AssetTransferQueryWithToStation            AssetTransferQueryWith = "ToStation"
	AssetTransferQueryWithToRider              AssetTransferQueryWith = "ToRider"
	AssetTransferQueryWithToOperator           AssetTransferQueryWith = "ToOperator"
	AssetTransferQueryWithToWarehouse          AssetTransferQueryWith = "ToWarehouse"
	AssetTransferQueryWithOutOperateManager    AssetTransferQueryWith = "OutOperateManager"
	AssetTransferQueryWithOutOperateStore      AssetTransferQueryWith = "OutOperateStore"
	AssetTransferQueryWithOutOperateAgent      AssetTransferQueryWith = "OutOperateAgent"
	AssetTransferQueryWithOutOperateMaintainer AssetTransferQueryWith = "OutOperateMaintainer"
	AssetTransferQueryWithOutOperateCabinet    AssetTransferQueryWith = "OutOperateCabinet"
	AssetTransferQueryWithOutOperateRider      AssetTransferQueryWith = "OutOperateRider"
	AssetTransferQueryWithInOperateManager     AssetTransferQueryWith = "InOperateManager"
	AssetTransferQueryWithInOperateStore       AssetTransferQueryWith = "InOperateStore"
	AssetTransferQueryWithInOperateAgent       AssetTransferQueryWith = "InOperateAgent"
	AssetTransferQueryWithInOperateMaintainer  AssetTransferQueryWith = "InOperateMaintainer"
	AssetTransferQueryWithInOperateCabinet     AssetTransferQueryWith = "InOperateCabinet"
	AssetTransferQueryWithInOperateRider       AssetTransferQueryWith = "InOperateRider"
)

func (atq *AssetTransferQuery) With(withEdges ...AssetTransferQueryWith) *AssetTransferQuery {
	for _, v := range withEdges {
		switch v {
		case AssetTransferQueryWithDetails:
			atq.WithDetails()
		case AssetTransferQueryWithLocationStore:
			atq.WithLocationStore()
		case AssetTransferQueryWithLocationCabinet:
			atq.WithLocationCabinet()
		case AssetTransferQueryWithLocationStation:
			atq.WithLocationStation()
		case AssetTransferQueryWithLocationRider:
			atq.WithLocationRider()
		case AssetTransferQueryWithLocationOperator:
			atq.WithLocationOperator()
		case AssetTransferQueryWithLocationWarehouse:
			atq.WithLocationWarehouse()
		case AssetTransferQueryWithToStore:
			atq.WithToStore()
		case AssetTransferQueryWithToCabinet:
			atq.WithToCabinet()
		case AssetTransferQueryWithToStation:
			atq.WithToStation()
		case AssetTransferQueryWithToRider:
			atq.WithToRider()
		case AssetTransferQueryWithToOperator:
			atq.WithToOperator()
		case AssetTransferQueryWithToWarehouse:
			atq.WithToWarehouse()
		case AssetTransferQueryWithOutOperateManager:
			atq.WithOutOperateManager()
		case AssetTransferQueryWithOutOperateStore:
			atq.WithOutOperateStore()
		case AssetTransferQueryWithOutOperateAgent:
			atq.WithOutOperateAgent()
		case AssetTransferQueryWithOutOperateMaintainer:
			atq.WithOutOperateMaintainer()
		case AssetTransferQueryWithOutOperateCabinet:
			atq.WithOutOperateCabinet()
		case AssetTransferQueryWithOutOperateRider:
			atq.WithOutOperateRider()
		case AssetTransferQueryWithInOperateManager:
			atq.WithInOperateManager()
		case AssetTransferQueryWithInOperateStore:
			atq.WithInOperateStore()
		case AssetTransferQueryWithInOperateAgent:
			atq.WithInOperateAgent()
		case AssetTransferQueryWithInOperateMaintainer:
			atq.WithInOperateMaintainer()
		case AssetTransferQueryWithInOperateCabinet:
			atq.WithInOperateCabinet()
		case AssetTransferQueryWithInOperateRider:
			atq.WithInOperateRider()
		}
	}
	return atq
}

// AssetTransferGroupBy is the group-by builder for AssetTransfer entities.
type AssetTransferGroupBy struct {
	selector
	build *AssetTransferQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (atgb *AssetTransferGroupBy) Aggregate(fns ...AggregateFunc) *AssetTransferGroupBy {
	atgb.fns = append(atgb.fns, fns...)
	return atgb
}

// Scan applies the selector query and scans the result into the given value.
func (atgb *AssetTransferGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, atgb.build.ctx, "GroupBy")
	if err := atgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetTransferQuery, *AssetTransferGroupBy](ctx, atgb.build, atgb, atgb.build.inters, v)
}

func (atgb *AssetTransferGroupBy) sqlScan(ctx context.Context, root *AssetTransferQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(atgb.fns))
	for _, fn := range atgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*atgb.flds)+len(atgb.fns))
		for _, f := range *atgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*atgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetTransferSelect is the builder for selecting fields of AssetTransfer entities.
type AssetTransferSelect struct {
	*AssetTransferQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ats *AssetTransferSelect) Aggregate(fns ...AggregateFunc) *AssetTransferSelect {
	ats.fns = append(ats.fns, fns...)
	return ats
}

// Scan applies the selector query and scans the result into the given value.
func (ats *AssetTransferSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ats.ctx, "Select")
	if err := ats.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetTransferQuery, *AssetTransferSelect](ctx, ats.AssetTransferQuery, ats, ats.inters, v)
}

func (ats *AssetTransferSelect) sqlScan(ctx context.Context, root *AssetTransferQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ats.fns))
	for _, fn := range ats.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ats.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ats.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ats *AssetTransferSelect) Modify(modifiers ...func(s *sql.Selector)) *AssetTransferSelect {
	ats.modifiers = append(ats.modifiers, modifiers...)
	return ats
}
