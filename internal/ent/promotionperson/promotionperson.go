// Code generated by ent, DO NOT EDIT.

package promotionperson

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotionperson type in the database.
	Label = "promotion_person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIDCardNumber holds the string denoting the id_card_number field in the database.
	FieldIDCardNumber = "id_card_number"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// Table holds the table name of the promotionperson in the database.
	Table = "promotion_person"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "promotion_member"
	// MemberInverseTable is the table name for the PromotionMember entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmember" package.
	MemberInverseTable = "promotion_member"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "person_id"
)

// Columns holds all SQL columns for promotionperson fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldName,
	FieldIDCardNumber,
	FieldAddress,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// IDCardNumberValidator is a validator for the "id_card_number" field. It is called by the builders before save.
	IDCardNumberValidator func(string) error
)

// OrderOption defines the ordering options for the PromotionPerson queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIDCardNumber orders the results by the id_card_number field.
func ByIDCardNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCardNumber, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByMemberCount orders the results by member count.
func ByMemberCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberStep(), opts...)
	}
}

// ByMember orders the results by member terms.
func ByMember(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberTable, MemberColumn),
	)
}
