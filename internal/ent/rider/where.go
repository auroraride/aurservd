// Code generated by entc, DO NOT EDIT.

package rider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// PersonID applies equality check predicate on the "person_id" field. It's identical to PersonIDEQ.
func PersonID(v uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPersonID), v))
	})
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnterpriseID), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// DeviceType applies equality check predicate on the "device_type" field. It's identical to DeviceTypeEQ.
func DeviceType(v uint8) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceType), v))
	})
}

// LastDevice applies equality check predicate on the "last_device" field. It's identical to LastDeviceEQ.
func LastDevice(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastDevice), v))
	})
}

// IsNewDevice applies equality check predicate on the "is_new_device" field. It's identical to IsNewDeviceEQ.
func IsNewDevice(v bool) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsNewDevice), v))
	})
}

// LastFace applies equality check predicate on the "last_face" field. It's identical to LastFaceEQ.
func LastFace(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastFace), v))
	})
}

// PushID applies equality check predicate on the "push_id" field. It's identical to PushIDEQ.
func PushID(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPushID), v))
	})
}

// LastSigninAt applies equality check predicate on the "last_signin_at" field. It's identical to LastSigninAtEQ.
func LastSigninAt(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSigninAt), v))
	})
}

// EsignAccountID applies equality check predicate on the "esign_account_id" field. It's identical to EsignAccountIDEQ.
func EsignAccountID(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEsignAccountID), v))
	})
}

// PlanAt applies equality check predicate on the "plan_at" field. It's identical to PlanAtEQ.
func PlanAt(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlanAt), v))
	})
}

// Blocked applies equality check predicate on the "blocked" field. It's identical to BlockedEQ.
func Blocked(v bool) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlocked), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// PersonIDEQ applies the EQ predicate on the "person_id" field.
func PersonIDEQ(v uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPersonID), v))
	})
}

// PersonIDNEQ applies the NEQ predicate on the "person_id" field.
func PersonIDNEQ(v uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPersonID), v))
	})
}

// PersonIDIn applies the In predicate on the "person_id" field.
func PersonIDIn(vs ...uint64) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPersonID), v...))
	})
}

// PersonIDNotIn applies the NotIn predicate on the "person_id" field.
func PersonIDNotIn(vs ...uint64) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPersonID), v...))
	})
}

// PersonIDIsNil applies the IsNil predicate on the "person_id" field.
func PersonIDIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPersonID)))
	})
}

// PersonIDNotNil applies the NotNil predicate on the "person_id" field.
func PersonIDNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPersonID)))
	})
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnterpriseID), v))
	})
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnterpriseID), v))
	})
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnterpriseID), v...))
	})
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnterpriseID), v...))
	})
}

// EnterpriseIDIsNil applies the IsNil predicate on the "enterprise_id" field.
func EnterpriseIDIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEnterpriseID)))
	})
}

// EnterpriseIDNotNil applies the NotNil predicate on the "enterprise_id" field.
func EnterpriseIDNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEnterpriseID)))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// ContactIsNil applies the IsNil predicate on the "contact" field.
func ContactIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContact)))
	})
}

// ContactNotNil applies the NotNil predicate on the "contact" field.
func ContactNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContact)))
	})
}

// DeviceTypeEQ applies the EQ predicate on the "device_type" field.
func DeviceTypeEQ(v uint8) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeviceType), v))
	})
}

// DeviceTypeNEQ applies the NEQ predicate on the "device_type" field.
func DeviceTypeNEQ(v uint8) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeviceType), v))
	})
}

// DeviceTypeIn applies the In predicate on the "device_type" field.
func DeviceTypeIn(vs ...uint8) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeviceType), v...))
	})
}

// DeviceTypeNotIn applies the NotIn predicate on the "device_type" field.
func DeviceTypeNotIn(vs ...uint8) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeviceType), v...))
	})
}

// DeviceTypeGT applies the GT predicate on the "device_type" field.
func DeviceTypeGT(v uint8) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeviceType), v))
	})
}

// DeviceTypeGTE applies the GTE predicate on the "device_type" field.
func DeviceTypeGTE(v uint8) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeviceType), v))
	})
}

// DeviceTypeLT applies the LT predicate on the "device_type" field.
func DeviceTypeLT(v uint8) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeviceType), v))
	})
}

// DeviceTypeLTE applies the LTE predicate on the "device_type" field.
func DeviceTypeLTE(v uint8) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeviceType), v))
	})
}

// LastDeviceEQ applies the EQ predicate on the "last_device" field.
func LastDeviceEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastDevice), v))
	})
}

// LastDeviceNEQ applies the NEQ predicate on the "last_device" field.
func LastDeviceNEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastDevice), v))
	})
}

// LastDeviceIn applies the In predicate on the "last_device" field.
func LastDeviceIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastDevice), v...))
	})
}

// LastDeviceNotIn applies the NotIn predicate on the "last_device" field.
func LastDeviceNotIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastDevice), v...))
	})
}

// LastDeviceGT applies the GT predicate on the "last_device" field.
func LastDeviceGT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastDevice), v))
	})
}

// LastDeviceGTE applies the GTE predicate on the "last_device" field.
func LastDeviceGTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastDevice), v))
	})
}

// LastDeviceLT applies the LT predicate on the "last_device" field.
func LastDeviceLT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastDevice), v))
	})
}

// LastDeviceLTE applies the LTE predicate on the "last_device" field.
func LastDeviceLTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastDevice), v))
	})
}

// LastDeviceContains applies the Contains predicate on the "last_device" field.
func LastDeviceContains(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastDevice), v))
	})
}

// LastDeviceHasPrefix applies the HasPrefix predicate on the "last_device" field.
func LastDeviceHasPrefix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastDevice), v))
	})
}

// LastDeviceHasSuffix applies the HasSuffix predicate on the "last_device" field.
func LastDeviceHasSuffix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastDevice), v))
	})
}

// LastDeviceEqualFold applies the EqualFold predicate on the "last_device" field.
func LastDeviceEqualFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastDevice), v))
	})
}

// LastDeviceContainsFold applies the ContainsFold predicate on the "last_device" field.
func LastDeviceContainsFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastDevice), v))
	})
}

// IsNewDeviceEQ applies the EQ predicate on the "is_new_device" field.
func IsNewDeviceEQ(v bool) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsNewDevice), v))
	})
}

// IsNewDeviceNEQ applies the NEQ predicate on the "is_new_device" field.
func IsNewDeviceNEQ(v bool) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsNewDevice), v))
	})
}

// LastFaceEQ applies the EQ predicate on the "last_face" field.
func LastFaceEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastFace), v))
	})
}

// LastFaceNEQ applies the NEQ predicate on the "last_face" field.
func LastFaceNEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastFace), v))
	})
}

// LastFaceIn applies the In predicate on the "last_face" field.
func LastFaceIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastFace), v...))
	})
}

// LastFaceNotIn applies the NotIn predicate on the "last_face" field.
func LastFaceNotIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastFace), v...))
	})
}

// LastFaceGT applies the GT predicate on the "last_face" field.
func LastFaceGT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastFace), v))
	})
}

// LastFaceGTE applies the GTE predicate on the "last_face" field.
func LastFaceGTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastFace), v))
	})
}

// LastFaceLT applies the LT predicate on the "last_face" field.
func LastFaceLT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastFace), v))
	})
}

// LastFaceLTE applies the LTE predicate on the "last_face" field.
func LastFaceLTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastFace), v))
	})
}

// LastFaceContains applies the Contains predicate on the "last_face" field.
func LastFaceContains(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastFace), v))
	})
}

// LastFaceHasPrefix applies the HasPrefix predicate on the "last_face" field.
func LastFaceHasPrefix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastFace), v))
	})
}

// LastFaceHasSuffix applies the HasSuffix predicate on the "last_face" field.
func LastFaceHasSuffix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastFace), v))
	})
}

// LastFaceIsNil applies the IsNil predicate on the "last_face" field.
func LastFaceIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastFace)))
	})
}

// LastFaceNotNil applies the NotNil predicate on the "last_face" field.
func LastFaceNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastFace)))
	})
}

// LastFaceEqualFold applies the EqualFold predicate on the "last_face" field.
func LastFaceEqualFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastFace), v))
	})
}

// LastFaceContainsFold applies the ContainsFold predicate on the "last_face" field.
func LastFaceContainsFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastFace), v))
	})
}

// PushIDEQ applies the EQ predicate on the "push_id" field.
func PushIDEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPushID), v))
	})
}

// PushIDNEQ applies the NEQ predicate on the "push_id" field.
func PushIDNEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPushID), v))
	})
}

// PushIDIn applies the In predicate on the "push_id" field.
func PushIDIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPushID), v...))
	})
}

// PushIDNotIn applies the NotIn predicate on the "push_id" field.
func PushIDNotIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPushID), v...))
	})
}

// PushIDGT applies the GT predicate on the "push_id" field.
func PushIDGT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPushID), v))
	})
}

// PushIDGTE applies the GTE predicate on the "push_id" field.
func PushIDGTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPushID), v))
	})
}

// PushIDLT applies the LT predicate on the "push_id" field.
func PushIDLT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPushID), v))
	})
}

// PushIDLTE applies the LTE predicate on the "push_id" field.
func PushIDLTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPushID), v))
	})
}

// PushIDContains applies the Contains predicate on the "push_id" field.
func PushIDContains(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPushID), v))
	})
}

// PushIDHasPrefix applies the HasPrefix predicate on the "push_id" field.
func PushIDHasPrefix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPushID), v))
	})
}

// PushIDHasSuffix applies the HasSuffix predicate on the "push_id" field.
func PushIDHasSuffix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPushID), v))
	})
}

// PushIDIsNil applies the IsNil predicate on the "push_id" field.
func PushIDIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPushID)))
	})
}

// PushIDNotNil applies the NotNil predicate on the "push_id" field.
func PushIDNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPushID)))
	})
}

// PushIDEqualFold applies the EqualFold predicate on the "push_id" field.
func PushIDEqualFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPushID), v))
	})
}

// PushIDContainsFold applies the ContainsFold predicate on the "push_id" field.
func PushIDContainsFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPushID), v))
	})
}

// LastSigninAtEQ applies the EQ predicate on the "last_signin_at" field.
func LastSigninAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastSigninAt), v))
	})
}

// LastSigninAtNEQ applies the NEQ predicate on the "last_signin_at" field.
func LastSigninAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastSigninAt), v))
	})
}

// LastSigninAtIn applies the In predicate on the "last_signin_at" field.
func LastSigninAtIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastSigninAt), v...))
	})
}

// LastSigninAtNotIn applies the NotIn predicate on the "last_signin_at" field.
func LastSigninAtNotIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastSigninAt), v...))
	})
}

// LastSigninAtGT applies the GT predicate on the "last_signin_at" field.
func LastSigninAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastSigninAt), v))
	})
}

// LastSigninAtGTE applies the GTE predicate on the "last_signin_at" field.
func LastSigninAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastSigninAt), v))
	})
}

// LastSigninAtLT applies the LT predicate on the "last_signin_at" field.
func LastSigninAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastSigninAt), v))
	})
}

// LastSigninAtLTE applies the LTE predicate on the "last_signin_at" field.
func LastSigninAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastSigninAt), v))
	})
}

// LastSigninAtIsNil applies the IsNil predicate on the "last_signin_at" field.
func LastSigninAtIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastSigninAt)))
	})
}

// LastSigninAtNotNil applies the NotNil predicate on the "last_signin_at" field.
func LastSigninAtNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastSigninAt)))
	})
}

// EsignAccountIDEQ applies the EQ predicate on the "esign_account_id" field.
func EsignAccountIDEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDNEQ applies the NEQ predicate on the "esign_account_id" field.
func EsignAccountIDNEQ(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDIn applies the In predicate on the "esign_account_id" field.
func EsignAccountIDIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEsignAccountID), v...))
	})
}

// EsignAccountIDNotIn applies the NotIn predicate on the "esign_account_id" field.
func EsignAccountIDNotIn(vs ...string) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEsignAccountID), v...))
	})
}

// EsignAccountIDGT applies the GT predicate on the "esign_account_id" field.
func EsignAccountIDGT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDGTE applies the GTE predicate on the "esign_account_id" field.
func EsignAccountIDGTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDLT applies the LT predicate on the "esign_account_id" field.
func EsignAccountIDLT(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDLTE applies the LTE predicate on the "esign_account_id" field.
func EsignAccountIDLTE(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDContains applies the Contains predicate on the "esign_account_id" field.
func EsignAccountIDContains(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDHasPrefix applies the HasPrefix predicate on the "esign_account_id" field.
func EsignAccountIDHasPrefix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDHasSuffix applies the HasSuffix predicate on the "esign_account_id" field.
func EsignAccountIDHasSuffix(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDIsNil applies the IsNil predicate on the "esign_account_id" field.
func EsignAccountIDIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEsignAccountID)))
	})
}

// EsignAccountIDNotNil applies the NotNil predicate on the "esign_account_id" field.
func EsignAccountIDNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEsignAccountID)))
	})
}

// EsignAccountIDEqualFold applies the EqualFold predicate on the "esign_account_id" field.
func EsignAccountIDEqualFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEsignAccountID), v))
	})
}

// EsignAccountIDContainsFold applies the ContainsFold predicate on the "esign_account_id" field.
func EsignAccountIDContainsFold(v string) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEsignAccountID), v))
	})
}

// PlanAtEQ applies the EQ predicate on the "plan_at" field.
func PlanAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlanAt), v))
	})
}

// PlanAtNEQ applies the NEQ predicate on the "plan_at" field.
func PlanAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlanAt), v))
	})
}

// PlanAtIn applies the In predicate on the "plan_at" field.
func PlanAtIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlanAt), v...))
	})
}

// PlanAtNotIn applies the NotIn predicate on the "plan_at" field.
func PlanAtNotIn(vs ...time.Time) predicate.Rider {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rider(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlanAt), v...))
	})
}

// PlanAtGT applies the GT predicate on the "plan_at" field.
func PlanAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlanAt), v))
	})
}

// PlanAtGTE applies the GTE predicate on the "plan_at" field.
func PlanAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlanAt), v))
	})
}

// PlanAtLT applies the LT predicate on the "plan_at" field.
func PlanAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlanAt), v))
	})
}

// PlanAtLTE applies the LTE predicate on the "plan_at" field.
func PlanAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlanAt), v))
	})
}

// PlanAtIsNil applies the IsNil predicate on the "plan_at" field.
func PlanAtIsNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlanAt)))
	})
}

// PlanAtNotNil applies the NotNil predicate on the "plan_at" field.
func PlanAtNotNil() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlanAt)))
	})
}

// BlockedEQ applies the EQ predicate on the "blocked" field.
func BlockedEQ(v bool) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlocked), v))
	})
}

// BlockedNEQ applies the NEQ predicate on the "blocked" field.
func BlockedNEQ(v bool) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlocked), v))
	})
}

// HasPerson applies the HasEdge predicate on the "person" edge.
func HasPerson() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonWith applies the HasEdge predicate on the "person" edge with a given conditions (other predicates).
func HasPersonWith(preds ...predicate.Person) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PersonInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnterpriseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnterpriseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContract applies the HasEdge predicate on the "contract" edge.
func HasContract() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContractTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContractTable, ContractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractWith applies the HasEdge predicate on the "contract" edge with a given conditions (other predicates).
func HasContractWith(preds ...predicate.Contract) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContractInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContractTable, ContractColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFaults applies the HasEdge predicate on the "faults" edge.
func HasFaults() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FaultsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FaultsTable, FaultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFaultsWith applies the HasEdge predicate on the "faults" edge with a given conditions (other predicates).
func HasFaultsWith(preds ...predicate.CabinetFault) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FaultsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FaultsTable, FaultsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rider) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rider) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rider) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		p(s.Not())
	})
}
