// Code generated by ent, DO NOT EDIT.

package rider

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldRemark, v))
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldStationID, v))
}

// PersonID applies equality check predicate on the "person_id" field. It's identical to PersonIDEQ.
func PersonID(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldPersonID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldName, v))
}

// IDCardNumber applies equality check predicate on the "id_card_number" field. It's identical to IDCardNumberEQ.
func IDCardNumber(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldIDCardNumber, v))
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldEnterpriseID, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldPhone, v))
}

// DeviceType applies equality check predicate on the "device_type" field. It's identical to DeviceTypeEQ.
func DeviceType(v uint8) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldDeviceType, v))
}

// LastDevice applies equality check predicate on the "last_device" field. It's identical to LastDeviceEQ.
func LastDevice(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldLastDevice, v))
}

// IsNewDevice applies equality check predicate on the "is_new_device" field. It's identical to IsNewDeviceEQ.
func IsNewDevice(v bool) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldIsNewDevice, v))
}

// PushID applies equality check predicate on the "push_id" field. It's identical to PushIDEQ.
func PushID(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldPushID, v))
}

// LastSigninAt applies equality check predicate on the "last_signin_at" field. It's identical to LastSigninAtEQ.
func LastSigninAt(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldLastSigninAt, v))
}

// Blocked applies equality check predicate on the "blocked" field. It's identical to BlockedEQ.
func Blocked(v bool) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldBlocked, v))
}

// Points applies equality check predicate on the "points" field. It's identical to PointsEQ.
func Points(v int64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldPoints, v))
}

// JoinEnterpriseAt applies equality check predicate on the "join_enterprise_at" field. It's identical to JoinEnterpriseAtEQ.
func JoinEnterpriseAt(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldJoinEnterpriseAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContainsFold(FieldRemark, v))
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldStationID, v))
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldStationID, v))
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...uint64) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldStationID, vs...))
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...uint64) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldStationID, vs...))
}

// StationIDIsNil applies the IsNil predicate on the "station_id" field.
func StationIDIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldStationID))
}

// StationIDNotNil applies the NotNil predicate on the "station_id" field.
func StationIDNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldStationID))
}

// PersonIDEQ applies the EQ predicate on the "person_id" field.
func PersonIDEQ(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldPersonID, v))
}

// PersonIDNEQ applies the NEQ predicate on the "person_id" field.
func PersonIDNEQ(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldPersonID, v))
}

// PersonIDIn applies the In predicate on the "person_id" field.
func PersonIDIn(vs ...uint64) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldPersonID, vs...))
}

// PersonIDNotIn applies the NotIn predicate on the "person_id" field.
func PersonIDNotIn(vs ...uint64) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldPersonID, vs...))
}

// PersonIDIsNil applies the IsNil predicate on the "person_id" field.
func PersonIDIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldPersonID))
}

// PersonIDNotNil applies the NotNil predicate on the "person_id" field.
func PersonIDNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldPersonID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContainsFold(FieldName, v))
}

// IDCardNumberEQ applies the EQ predicate on the "id_card_number" field.
func IDCardNumberEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldIDCardNumber, v))
}

// IDCardNumberNEQ applies the NEQ predicate on the "id_card_number" field.
func IDCardNumberNEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldIDCardNumber, v))
}

// IDCardNumberIn applies the In predicate on the "id_card_number" field.
func IDCardNumberIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldIDCardNumber, vs...))
}

// IDCardNumberNotIn applies the NotIn predicate on the "id_card_number" field.
func IDCardNumberNotIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldIDCardNumber, vs...))
}

// IDCardNumberGT applies the GT predicate on the "id_card_number" field.
func IDCardNumberGT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldIDCardNumber, v))
}

// IDCardNumberGTE applies the GTE predicate on the "id_card_number" field.
func IDCardNumberGTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldIDCardNumber, v))
}

// IDCardNumberLT applies the LT predicate on the "id_card_number" field.
func IDCardNumberLT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldIDCardNumber, v))
}

// IDCardNumberLTE applies the LTE predicate on the "id_card_number" field.
func IDCardNumberLTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldIDCardNumber, v))
}

// IDCardNumberContains applies the Contains predicate on the "id_card_number" field.
func IDCardNumberContains(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContains(FieldIDCardNumber, v))
}

// IDCardNumberHasPrefix applies the HasPrefix predicate on the "id_card_number" field.
func IDCardNumberHasPrefix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasPrefix(FieldIDCardNumber, v))
}

// IDCardNumberHasSuffix applies the HasSuffix predicate on the "id_card_number" field.
func IDCardNumberHasSuffix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasSuffix(FieldIDCardNumber, v))
}

// IDCardNumberIsNil applies the IsNil predicate on the "id_card_number" field.
func IDCardNumberIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldIDCardNumber))
}

// IDCardNumberNotNil applies the NotNil predicate on the "id_card_number" field.
func IDCardNumberNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldIDCardNumber))
}

// IDCardNumberEqualFold applies the EqualFold predicate on the "id_card_number" field.
func IDCardNumberEqualFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEqualFold(FieldIDCardNumber, v))
}

// IDCardNumberContainsFold applies the ContainsFold predicate on the "id_card_number" field.
func IDCardNumberContainsFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContainsFold(FieldIDCardNumber, v))
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldEnterpriseID, v))
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldEnterpriseID, v))
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDIsNil applies the IsNil predicate on the "enterprise_id" field.
func EnterpriseIDIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldEnterpriseID))
}

// EnterpriseIDNotNil applies the NotNil predicate on the "enterprise_id" field.
func EnterpriseIDNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldEnterpriseID))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContainsFold(FieldPhone, v))
}

// ContactIsNil applies the IsNil predicate on the "contact" field.
func ContactIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldContact))
}

// ContactNotNil applies the NotNil predicate on the "contact" field.
func ContactNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldContact))
}

// DeviceTypeEQ applies the EQ predicate on the "device_type" field.
func DeviceTypeEQ(v uint8) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldDeviceType, v))
}

// DeviceTypeNEQ applies the NEQ predicate on the "device_type" field.
func DeviceTypeNEQ(v uint8) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldDeviceType, v))
}

// DeviceTypeIn applies the In predicate on the "device_type" field.
func DeviceTypeIn(vs ...uint8) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldDeviceType, vs...))
}

// DeviceTypeNotIn applies the NotIn predicate on the "device_type" field.
func DeviceTypeNotIn(vs ...uint8) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldDeviceType, vs...))
}

// DeviceTypeGT applies the GT predicate on the "device_type" field.
func DeviceTypeGT(v uint8) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldDeviceType, v))
}

// DeviceTypeGTE applies the GTE predicate on the "device_type" field.
func DeviceTypeGTE(v uint8) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldDeviceType, v))
}

// DeviceTypeLT applies the LT predicate on the "device_type" field.
func DeviceTypeLT(v uint8) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldDeviceType, v))
}

// DeviceTypeLTE applies the LTE predicate on the "device_type" field.
func DeviceTypeLTE(v uint8) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldDeviceType, v))
}

// DeviceTypeIsNil applies the IsNil predicate on the "device_type" field.
func DeviceTypeIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldDeviceType))
}

// DeviceTypeNotNil applies the NotNil predicate on the "device_type" field.
func DeviceTypeNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldDeviceType))
}

// LastDeviceEQ applies the EQ predicate on the "last_device" field.
func LastDeviceEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldLastDevice, v))
}

// LastDeviceNEQ applies the NEQ predicate on the "last_device" field.
func LastDeviceNEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldLastDevice, v))
}

// LastDeviceIn applies the In predicate on the "last_device" field.
func LastDeviceIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldLastDevice, vs...))
}

// LastDeviceNotIn applies the NotIn predicate on the "last_device" field.
func LastDeviceNotIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldLastDevice, vs...))
}

// LastDeviceGT applies the GT predicate on the "last_device" field.
func LastDeviceGT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldLastDevice, v))
}

// LastDeviceGTE applies the GTE predicate on the "last_device" field.
func LastDeviceGTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldLastDevice, v))
}

// LastDeviceLT applies the LT predicate on the "last_device" field.
func LastDeviceLT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldLastDevice, v))
}

// LastDeviceLTE applies the LTE predicate on the "last_device" field.
func LastDeviceLTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldLastDevice, v))
}

// LastDeviceContains applies the Contains predicate on the "last_device" field.
func LastDeviceContains(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContains(FieldLastDevice, v))
}

// LastDeviceHasPrefix applies the HasPrefix predicate on the "last_device" field.
func LastDeviceHasPrefix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasPrefix(FieldLastDevice, v))
}

// LastDeviceHasSuffix applies the HasSuffix predicate on the "last_device" field.
func LastDeviceHasSuffix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasSuffix(FieldLastDevice, v))
}

// LastDeviceIsNil applies the IsNil predicate on the "last_device" field.
func LastDeviceIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldLastDevice))
}

// LastDeviceNotNil applies the NotNil predicate on the "last_device" field.
func LastDeviceNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldLastDevice))
}

// LastDeviceEqualFold applies the EqualFold predicate on the "last_device" field.
func LastDeviceEqualFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEqualFold(FieldLastDevice, v))
}

// LastDeviceContainsFold applies the ContainsFold predicate on the "last_device" field.
func LastDeviceContainsFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContainsFold(FieldLastDevice, v))
}

// IsNewDeviceEQ applies the EQ predicate on the "is_new_device" field.
func IsNewDeviceEQ(v bool) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldIsNewDevice, v))
}

// IsNewDeviceNEQ applies the NEQ predicate on the "is_new_device" field.
func IsNewDeviceNEQ(v bool) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldIsNewDevice, v))
}

// PushIDEQ applies the EQ predicate on the "push_id" field.
func PushIDEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldPushID, v))
}

// PushIDNEQ applies the NEQ predicate on the "push_id" field.
func PushIDNEQ(v string) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldPushID, v))
}

// PushIDIn applies the In predicate on the "push_id" field.
func PushIDIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldPushID, vs...))
}

// PushIDNotIn applies the NotIn predicate on the "push_id" field.
func PushIDNotIn(vs ...string) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldPushID, vs...))
}

// PushIDGT applies the GT predicate on the "push_id" field.
func PushIDGT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldPushID, v))
}

// PushIDGTE applies the GTE predicate on the "push_id" field.
func PushIDGTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldPushID, v))
}

// PushIDLT applies the LT predicate on the "push_id" field.
func PushIDLT(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldPushID, v))
}

// PushIDLTE applies the LTE predicate on the "push_id" field.
func PushIDLTE(v string) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldPushID, v))
}

// PushIDContains applies the Contains predicate on the "push_id" field.
func PushIDContains(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContains(FieldPushID, v))
}

// PushIDHasPrefix applies the HasPrefix predicate on the "push_id" field.
func PushIDHasPrefix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasPrefix(FieldPushID, v))
}

// PushIDHasSuffix applies the HasSuffix predicate on the "push_id" field.
func PushIDHasSuffix(v string) predicate.Rider {
	return predicate.Rider(sql.FieldHasSuffix(FieldPushID, v))
}

// PushIDIsNil applies the IsNil predicate on the "push_id" field.
func PushIDIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldPushID))
}

// PushIDNotNil applies the NotNil predicate on the "push_id" field.
func PushIDNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldPushID))
}

// PushIDEqualFold applies the EqualFold predicate on the "push_id" field.
func PushIDEqualFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldEqualFold(FieldPushID, v))
}

// PushIDContainsFold applies the ContainsFold predicate on the "push_id" field.
func PushIDContainsFold(v string) predicate.Rider {
	return predicate.Rider(sql.FieldContainsFold(FieldPushID, v))
}

// LastSigninAtEQ applies the EQ predicate on the "last_signin_at" field.
func LastSigninAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldLastSigninAt, v))
}

// LastSigninAtNEQ applies the NEQ predicate on the "last_signin_at" field.
func LastSigninAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldLastSigninAt, v))
}

// LastSigninAtIn applies the In predicate on the "last_signin_at" field.
func LastSigninAtIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldLastSigninAt, vs...))
}

// LastSigninAtNotIn applies the NotIn predicate on the "last_signin_at" field.
func LastSigninAtNotIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldLastSigninAt, vs...))
}

// LastSigninAtGT applies the GT predicate on the "last_signin_at" field.
func LastSigninAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldLastSigninAt, v))
}

// LastSigninAtGTE applies the GTE predicate on the "last_signin_at" field.
func LastSigninAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldLastSigninAt, v))
}

// LastSigninAtLT applies the LT predicate on the "last_signin_at" field.
func LastSigninAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldLastSigninAt, v))
}

// LastSigninAtLTE applies the LTE predicate on the "last_signin_at" field.
func LastSigninAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldLastSigninAt, v))
}

// LastSigninAtIsNil applies the IsNil predicate on the "last_signin_at" field.
func LastSigninAtIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldLastSigninAt))
}

// LastSigninAtNotNil applies the NotNil predicate on the "last_signin_at" field.
func LastSigninAtNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldLastSigninAt))
}

// BlockedEQ applies the EQ predicate on the "blocked" field.
func BlockedEQ(v bool) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldBlocked, v))
}

// BlockedNEQ applies the NEQ predicate on the "blocked" field.
func BlockedNEQ(v bool) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldBlocked, v))
}

// PointsEQ applies the EQ predicate on the "points" field.
func PointsEQ(v int64) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldPoints, v))
}

// PointsNEQ applies the NEQ predicate on the "points" field.
func PointsNEQ(v int64) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldPoints, v))
}

// PointsIn applies the In predicate on the "points" field.
func PointsIn(vs ...int64) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldPoints, vs...))
}

// PointsNotIn applies the NotIn predicate on the "points" field.
func PointsNotIn(vs ...int64) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldPoints, vs...))
}

// PointsGT applies the GT predicate on the "points" field.
func PointsGT(v int64) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldPoints, v))
}

// PointsGTE applies the GTE predicate on the "points" field.
func PointsGTE(v int64) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldPoints, v))
}

// PointsLT applies the LT predicate on the "points" field.
func PointsLT(v int64) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldPoints, v))
}

// PointsLTE applies the LTE predicate on the "points" field.
func PointsLTE(v int64) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldPoints, v))
}

// ExchangeLimitIsNil applies the IsNil predicate on the "exchange_limit" field.
func ExchangeLimitIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldExchangeLimit))
}

// ExchangeLimitNotNil applies the NotNil predicate on the "exchange_limit" field.
func ExchangeLimitNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldExchangeLimit))
}

// ExchangeFrequencyIsNil applies the IsNil predicate on the "exchange_frequency" field.
func ExchangeFrequencyIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldExchangeFrequency))
}

// ExchangeFrequencyNotNil applies the NotNil predicate on the "exchange_frequency" field.
func ExchangeFrequencyNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldExchangeFrequency))
}

// JoinEnterpriseAtEQ applies the EQ predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldEQ(FieldJoinEnterpriseAt, v))
}

// JoinEnterpriseAtNEQ applies the NEQ predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtNEQ(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNEQ(FieldJoinEnterpriseAt, v))
}

// JoinEnterpriseAtIn applies the In predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldIn(FieldJoinEnterpriseAt, vs...))
}

// JoinEnterpriseAtNotIn applies the NotIn predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtNotIn(vs ...time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldNotIn(FieldJoinEnterpriseAt, vs...))
}

// JoinEnterpriseAtGT applies the GT predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtGT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGT(FieldJoinEnterpriseAt, v))
}

// JoinEnterpriseAtGTE applies the GTE predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtGTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldGTE(FieldJoinEnterpriseAt, v))
}

// JoinEnterpriseAtLT applies the LT predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtLT(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLT(FieldJoinEnterpriseAt, v))
}

// JoinEnterpriseAtLTE applies the LTE predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtLTE(v time.Time) predicate.Rider {
	return predicate.Rider(sql.FieldLTE(FieldJoinEnterpriseAt, v))
}

// JoinEnterpriseAtIsNil applies the IsNil predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtIsNil() predicate.Rider {
	return predicate.Rider(sql.FieldIsNull(FieldJoinEnterpriseAt))
}

// JoinEnterpriseAtNotNil applies the NotNil predicate on the "join_enterprise_at" field.
func JoinEnterpriseAtNotNil() predicate.Rider {
	return predicate.Rider(sql.FieldNotNull(FieldJoinEnterpriseAt))
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.EnterpriseStation) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPerson applies the HasEdge predicate on the "person" edge.
func HasPerson() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonWith applies the HasEdge predicate on the "person" edge with a given conditions (other predicates).
func HasPersonWith(preds ...predicate.Person) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newPersonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContracts applies the HasEdge predicate on the "contracts" edge.
func HasContracts() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContractsTable, ContractsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractsWith applies the HasEdge predicate on the "contracts" edge with a given conditions (other predicates).
func HasContractsWith(preds ...predicate.Contract) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newContractsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFaults applies the HasEdge predicate on the "faults" edge.
func HasFaults() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FaultsTable, FaultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFaultsWith applies the HasEdge predicate on the "faults" edge with a given conditions (other predicates).
func HasFaultsWith(preds ...predicate.CabinetFault) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newFaultsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newOrdersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExchanges applies the HasEdge predicate on the "exchanges" edge.
func HasExchanges() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExchangesTable, ExchangesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExchangesWith applies the HasEdge predicate on the "exchanges" edge with a given conditions (other predicates).
func HasExchangesWith(preds ...predicate.Exchange) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newExchangesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribes applies the HasEdge predicate on the "subscribes" edge.
func HasSubscribes() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscribesTable, SubscribesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribesWith applies the HasEdge predicate on the "subscribes" edge with a given conditions (other predicates).
func HasSubscribesWith(preds ...predicate.Subscribe) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newSubscribesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsset applies the HasEdge predicate on the "asset" edge.
func HasAsset() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AssetTable, AssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetWith applies the HasEdge predicate on the "asset" edge with a given conditions (other predicates).
func HasAssetWith(preds ...predicate.Asset) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newAssetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowups applies the HasEdge predicate on the "followups" edge.
func HasFollowups() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FollowupsTable, FollowupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowupsWith applies the HasEdge predicate on the "followups" edge with a given conditions (other predicates).
func HasFollowupsWith(preds ...predicate.RiderFollowUp) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newFollowupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBattery applies the HasEdge predicate on the "battery" edge.
func HasBattery() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, BatteryTable, BatteryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBatteryWith applies the HasEdge predicate on the "battery" edge with a given conditions (other predicates).
func HasBatteryWith(preds ...predicate.Battery) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newBatteryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBatteryFlows applies the HasEdge predicate on the "battery_flows" edge.
func HasBatteryFlows() predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BatteryFlowsTable, BatteryFlowsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBatteryFlowsWith applies the HasEdge predicate on the "battery_flows" edge with a given conditions (other predicates).
func HasBatteryFlowsWith(preds ...predicate.BatteryFlow) predicate.Rider {
	return predicate.Rider(func(s *sql.Selector) {
		step := newBatteryFlowsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rider) predicate.Rider {
	return predicate.Rider(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rider) predicate.Rider {
	return predicate.Rider(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rider) predicate.Rider {
	return predicate.Rider(sql.NotPredicates(p))
}
