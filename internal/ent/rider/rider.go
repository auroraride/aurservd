// Code generated by ent, DO NOT EDIT.

package rider

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the rider type in the database.
	Label = "rider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldPersonID holds the string denoting the person_id field in the database.
	FieldPersonID = "person_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIDCardNumber holds the string denoting the id_card_number field in the database.
	FieldIDCardNumber = "id_card_number"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldContact holds the string denoting the contact field in the database.
	FieldContact = "contact"
	// FieldDeviceType holds the string denoting the device_type field in the database.
	FieldDeviceType = "device_type"
	// FieldLastDevice holds the string denoting the last_device field in the database.
	FieldLastDevice = "last_device"
	// FieldIsNewDevice holds the string denoting the is_new_device field in the database.
	FieldIsNewDevice = "is_new_device"
	// FieldLastFace holds the string denoting the last_face field in the database.
	FieldLastFace = "last_face"
	// FieldPushID holds the string denoting the push_id field in the database.
	FieldPushID = "push_id"
	// FieldLastSigninAt holds the string denoting the last_signin_at field in the database.
	FieldLastSigninAt = "last_signin_at"
	// FieldBlocked holds the string denoting the blocked field in the database.
	FieldBlocked = "blocked"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// EdgeContracts holds the string denoting the contracts edge name in mutations.
	EdgeContracts = "contracts"
	// EdgeFaults holds the string denoting the faults edge name in mutations.
	EdgeFaults = "faults"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeExchanges holds the string denoting the exchanges edge name in mutations.
	EdgeExchanges = "exchanges"
	// EdgeSubscribes holds the string denoting the subscribes edge name in mutations.
	EdgeSubscribes = "subscribes"
	// EdgeStocks holds the string denoting the stocks edge name in mutations.
	EdgeStocks = "stocks"
	// EdgeFollowups holds the string denoting the followups edge name in mutations.
	EdgeFollowups = "followups"
	// Table holds the table name of the rider in the database.
	Table = "rider"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "rider"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// PersonTable is the table that holds the person relation/edge.
	PersonTable = "rider"
	// PersonInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonInverseTable = "person"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "person_id"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "rider"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
	// ContractsTable is the table that holds the contracts relation/edge.
	ContractsTable = "contract"
	// ContractsInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractsInverseTable = "contract"
	// ContractsColumn is the table column denoting the contracts relation/edge.
	ContractsColumn = "rider_id"
	// FaultsTable is the table that holds the faults relation/edge.
	FaultsTable = "cabinet_fault"
	// FaultsInverseTable is the table name for the CabinetFault entity.
	// It exists in this package in order to avoid circular dependency with the "cabinetfault" package.
	FaultsInverseTable = "cabinet_fault"
	// FaultsColumn is the table column denoting the faults relation/edge.
	FaultsColumn = "rider_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "order"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "order"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "rider_id"
	// ExchangesTable is the table that holds the exchanges relation/edge.
	ExchangesTable = "exchange"
	// ExchangesInverseTable is the table name for the Exchange entity.
	// It exists in this package in order to avoid circular dependency with the "exchange" package.
	ExchangesInverseTable = "exchange"
	// ExchangesColumn is the table column denoting the exchanges relation/edge.
	ExchangesColumn = "rider_id"
	// SubscribesTable is the table that holds the subscribes relation/edge.
	SubscribesTable = "subscribe"
	// SubscribesInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribesInverseTable = "subscribe"
	// SubscribesColumn is the table column denoting the subscribes relation/edge.
	SubscribesColumn = "rider_id"
	// StocksTable is the table that holds the stocks relation/edge.
	StocksTable = "stock"
	// StocksInverseTable is the table name for the Stock entity.
	// It exists in this package in order to avoid circular dependency with the "stock" package.
	StocksInverseTable = "stock"
	// StocksColumn is the table column denoting the stocks relation/edge.
	StocksColumn = "rider_id"
	// FollowupsTable is the table that holds the followups relation/edge.
	FollowupsTable = "rider_follow_up"
	// FollowupsInverseTable is the table name for the RiderFollowUp entity.
	// It exists in this package in order to avoid circular dependency with the "riderfollowup" package.
	FollowupsInverseTable = "rider_follow_up"
	// FollowupsColumn is the table column denoting the followups relation/edge.
	FollowupsColumn = "rider_id"
)

// Columns holds all SQL columns for rider fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldStationID,
	FieldPersonID,
	FieldName,
	FieldIDCardNumber,
	FieldEnterpriseID,
	FieldPhone,
	FieldContact,
	FieldDeviceType,
	FieldLastDevice,
	FieldIsNewDevice,
	FieldLastFace,
	FieldPushID,
	FieldLastSigninAt,
	FieldBlocked,
	FieldPoints,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// LastDeviceValidator is a validator for the "last_device" field. It is called by the builders before save.
	LastDeviceValidator func(string) error
	// DefaultIsNewDevice holds the default value on creation for the "is_new_device" field.
	DefaultIsNewDevice bool
	// PushIDValidator is a validator for the "push_id" field. It is called by the builders before save.
	PushIDValidator func(string) error
	// DefaultBlocked holds the default value on creation for the "blocked" field.
	DefaultBlocked bool
	// DefaultPoints holds the default value on creation for the "points" field.
	DefaultPoints int64
)
