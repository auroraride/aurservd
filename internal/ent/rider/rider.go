// Code generated by ent, DO NOT EDIT.

package rider

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rider type in the database.
	Label = "rider"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldPersonID holds the string denoting the person_id field in the database.
	FieldPersonID = "person_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIDCardNumber holds the string denoting the id_card_number field in the database.
	FieldIDCardNumber = "id_card_number"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldContact holds the string denoting the contact field in the database.
	FieldContact = "contact"
	// FieldDeviceType holds the string denoting the device_type field in the database.
	FieldDeviceType = "device_type"
	// FieldLastDevice holds the string denoting the last_device field in the database.
	FieldLastDevice = "last_device"
	// FieldIsNewDevice holds the string denoting the is_new_device field in the database.
	FieldIsNewDevice = "is_new_device"
	// FieldLastFace holds the string denoting the last_face field in the database.
	FieldLastFace = "last_face"
	// FieldPushID holds the string denoting the push_id field in the database.
	FieldPushID = "push_id"
	// FieldLastSigninAt holds the string denoting the last_signin_at field in the database.
	FieldLastSigninAt = "last_signin_at"
	// FieldBlocked holds the string denoting the blocked field in the database.
	FieldBlocked = "blocked"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// FieldExchangeLimit holds the string denoting the exchange_limit field in the database.
	FieldExchangeLimit = "exchange_limit"
	// FieldExchangeFrequency holds the string denoting the exchange_frequency field in the database.
	FieldExchangeFrequency = "exchange_frequency"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// EdgeContracts holds the string denoting the contracts edge name in mutations.
	EdgeContracts = "contracts"
	// EdgeFaults holds the string denoting the faults edge name in mutations.
	EdgeFaults = "faults"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeExchanges holds the string denoting the exchanges edge name in mutations.
	EdgeExchanges = "exchanges"
	// EdgeSubscribes holds the string denoting the subscribes edge name in mutations.
	EdgeSubscribes = "subscribes"
	// EdgeStocks holds the string denoting the stocks edge name in mutations.
	EdgeStocks = "stocks"
	// EdgeFollowups holds the string denoting the followups edge name in mutations.
	EdgeFollowups = "followups"
	// EdgeBattery holds the string denoting the battery edge name in mutations.
	EdgeBattery = "battery"
	// EdgeBatteryFlows holds the string denoting the battery_flows edge name in mutations.
	EdgeBatteryFlows = "battery_flows"
	// Table holds the table name of the rider in the database.
	Table = "rider"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "rider"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// PersonTable is the table that holds the person relation/edge.
	PersonTable = "rider"
	// PersonInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	PersonInverseTable = "person"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "person_id"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "rider"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
	// ContractsTable is the table that holds the contracts relation/edge.
	ContractsTable = "contract"
	// ContractsInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractsInverseTable = "contract"
	// ContractsColumn is the table column denoting the contracts relation/edge.
	ContractsColumn = "rider_id"
	// FaultsTable is the table that holds the faults relation/edge.
	FaultsTable = "cabinet_fault"
	// FaultsInverseTable is the table name for the CabinetFault entity.
	// It exists in this package in order to avoid circular dependency with the "cabinetfault" package.
	FaultsInverseTable = "cabinet_fault"
	// FaultsColumn is the table column denoting the faults relation/edge.
	FaultsColumn = "rider_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "order"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "order"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "rider_id"
	// ExchangesTable is the table that holds the exchanges relation/edge.
	ExchangesTable = "exchange"
	// ExchangesInverseTable is the table name for the Exchange entity.
	// It exists in this package in order to avoid circular dependency with the "exchange" package.
	ExchangesInverseTable = "exchange"
	// ExchangesColumn is the table column denoting the exchanges relation/edge.
	ExchangesColumn = "rider_id"
	// SubscribesTable is the table that holds the subscribes relation/edge.
	SubscribesTable = "subscribe"
	// SubscribesInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribesInverseTable = "subscribe"
	// SubscribesColumn is the table column denoting the subscribes relation/edge.
	SubscribesColumn = "rider_id"
	// StocksTable is the table that holds the stocks relation/edge.
	StocksTable = "stock"
	// StocksInverseTable is the table name for the Stock entity.
	// It exists in this package in order to avoid circular dependency with the "stock" package.
	StocksInverseTable = "stock"
	// StocksColumn is the table column denoting the stocks relation/edge.
	StocksColumn = "rider_id"
	// FollowupsTable is the table that holds the followups relation/edge.
	FollowupsTable = "rider_follow_up"
	// FollowupsInverseTable is the table name for the RiderFollowUp entity.
	// It exists in this package in order to avoid circular dependency with the "riderfollowup" package.
	FollowupsInverseTable = "rider_follow_up"
	// FollowupsColumn is the table column denoting the followups relation/edge.
	FollowupsColumn = "rider_id"
	// BatteryTable is the table that holds the battery relation/edge.
	BatteryTable = "battery"
	// BatteryInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteryInverseTable = "battery"
	// BatteryColumn is the table column denoting the battery relation/edge.
	BatteryColumn = "rider_id"
	// BatteryFlowsTable is the table that holds the battery_flows relation/edge.
	BatteryFlowsTable = "battery_flow"
	// BatteryFlowsInverseTable is the table name for the BatteryFlow entity.
	// It exists in this package in order to avoid circular dependency with the "batteryflow" package.
	BatteryFlowsInverseTable = "battery_flow"
	// BatteryFlowsColumn is the table column denoting the battery_flows relation/edge.
	BatteryFlowsColumn = "rider_id"
)

// Columns holds all SQL columns for rider fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldStationID,
	FieldPersonID,
	FieldName,
	FieldIDCardNumber,
	FieldEnterpriseID,
	FieldPhone,
	FieldContact,
	FieldDeviceType,
	FieldLastDevice,
	FieldIsNewDevice,
	FieldLastFace,
	FieldPushID,
	FieldLastSigninAt,
	FieldBlocked,
	FieldPoints,
	FieldExchangeLimit,
	FieldExchangeFrequency,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// LastDeviceValidator is a validator for the "last_device" field. It is called by the builders before save.
	LastDeviceValidator func(string) error
	// DefaultIsNewDevice holds the default value on creation for the "is_new_device" field.
	DefaultIsNewDevice bool
	// PushIDValidator is a validator for the "push_id" field. It is called by the builders before save.
	PushIDValidator func(string) error
	// DefaultBlocked holds the default value on creation for the "blocked" field.
	DefaultBlocked bool
	// DefaultPoints holds the default value on creation for the "points" field.
	DefaultPoints int64
)

// OrderOption defines the ordering options for the Rider queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// ByPersonID orders the results by the person_id field.
func ByPersonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIDCardNumber orders the results by the id_card_number field.
func ByIDCardNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCardNumber, opts...).ToFunc()
}

// ByEnterpriseID orders the results by the enterprise_id field.
func ByEnterpriseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterpriseID, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByDeviceType orders the results by the device_type field.
func ByDeviceType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceType, opts...).ToFunc()
}

// ByLastDevice orders the results by the last_device field.
func ByLastDevice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastDevice, opts...).ToFunc()
}

// ByIsNewDevice orders the results by the is_new_device field.
func ByIsNewDevice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsNewDevice, opts...).ToFunc()
}

// ByLastFace orders the results by the last_face field.
func ByLastFace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastFace, opts...).ToFunc()
}

// ByPushID orders the results by the push_id field.
func ByPushID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPushID, opts...).ToFunc()
}

// ByLastSigninAt orders the results by the last_signin_at field.
func ByLastSigninAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSigninAt, opts...).ToFunc()
}

// ByBlocked orders the results by the blocked field.
func ByBlocked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlocked, opts...).ToFunc()
}

// ByPoints orders the results by the points field.
func ByPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoints, opts...).ToFunc()
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByPersonField orders the results by person field.
func ByPersonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnterpriseField orders the results by enterprise field.
func ByEnterpriseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnterpriseStep(), sql.OrderByField(field, opts...))
	}
}

// ByContractsCount orders the results by contracts count.
func ByContractsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContractsStep(), opts...)
	}
}

// ByContracts orders the results by contracts terms.
func ByContracts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFaultsCount orders the results by faults count.
func ByFaultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFaultsStep(), opts...)
	}
}

// ByFaults orders the results by faults terms.
func ByFaults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFaultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExchangesCount orders the results by exchanges count.
func ByExchangesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExchangesStep(), opts...)
	}
}

// ByExchanges orders the results by exchanges terms.
func ByExchanges(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExchangesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscribesCount orders the results by subscribes count.
func BySubscribesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscribesStep(), opts...)
	}
}

// BySubscribes orders the results by subscribes terms.
func BySubscribes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStocksCount orders the results by stocks count.
func ByStocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStocksStep(), opts...)
	}
}

// ByStocks orders the results by stocks terms.
func ByStocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFollowupsCount orders the results by followups count.
func ByFollowupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFollowupsStep(), opts...)
	}
}

// ByFollowups orders the results by followups terms.
func ByFollowups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBatteryField orders the results by battery field.
func ByBatteryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteryStep(), sql.OrderByField(field, opts...))
	}
}

// ByBatteryFlowsCount orders the results by battery_flows count.
func ByBatteryFlowsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBatteryFlowsStep(), opts...)
	}
}

// ByBatteryFlows orders the results by battery_flows terms.
func ByBatteryFlows(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteryFlowsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
	)
}
func newPersonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
	)
}
func newEnterpriseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnterpriseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
	)
}
func newContractsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContractsTable, ContractsColumn),
	)
}
func newFaultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FaultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FaultsTable, FaultsColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
func newExchangesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExchangesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExchangesTable, ExchangesColumn),
	)
}
func newSubscribesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubscribesTable, SubscribesColumn),
	)
}
func newStocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StocksTable, StocksColumn),
	)
}
func newFollowupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FollowupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FollowupsTable, FollowupsColumn),
	)
}
func newBatteryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BatteryTable, BatteryColumn),
	)
}
func newBatteryFlowsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteryFlowsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BatteryFlowsTable, BatteryFlowsColumn),
	)
}
