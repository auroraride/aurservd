// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// MaintainerQuery is the builder for querying Maintainer entities.
type MaintainerQuery struct {
	config
	ctx        *QueryContext
	order      []maintainer.OrderOption
	inters     []Interceptor
	predicates []predicate.Maintainer
	withCities *CityQuery
	withAsset  *AssetQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MaintainerQuery builder.
func (mq *MaintainerQuery) Where(ps ...predicate.Maintainer) *MaintainerQuery {
	mq.predicates = append(mq.predicates, ps...)
	return mq
}

// Limit the number of records to be returned by this query.
func (mq *MaintainerQuery) Limit(limit int) *MaintainerQuery {
	mq.ctx.Limit = &limit
	return mq
}

// Offset to start from.
func (mq *MaintainerQuery) Offset(offset int) *MaintainerQuery {
	mq.ctx.Offset = &offset
	return mq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mq *MaintainerQuery) Unique(unique bool) *MaintainerQuery {
	mq.ctx.Unique = &unique
	return mq
}

// Order specifies how the records should be ordered.
func (mq *MaintainerQuery) Order(o ...maintainer.OrderOption) *MaintainerQuery {
	mq.order = append(mq.order, o...)
	return mq
}

// QueryCities chains the current query on the "cities" edge.
func (mq *MaintainerQuery) QueryCities() *CityQuery {
	query := (&CityClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(maintainer.Table, maintainer.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, maintainer.CitiesTable, maintainer.CitiesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (mq *MaintainerQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(maintainer.Table, maintainer.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, maintainer.AssetTable, maintainer.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Maintainer entity from the query.
// Returns a *NotFoundError when no Maintainer was found.
func (mq *MaintainerQuery) First(ctx context.Context) (*Maintainer, error) {
	nodes, err := mq.Limit(1).All(setContextOp(ctx, mq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{maintainer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mq *MaintainerQuery) FirstX(ctx context.Context) *Maintainer {
	node, err := mq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Maintainer ID from the query.
// Returns a *NotFoundError when no Maintainer ID was found.
func (mq *MaintainerQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = mq.Limit(1).IDs(setContextOp(ctx, mq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{maintainer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mq *MaintainerQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := mq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Maintainer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Maintainer entity is found.
// Returns a *NotFoundError when no Maintainer entities are found.
func (mq *MaintainerQuery) Only(ctx context.Context) (*Maintainer, error) {
	nodes, err := mq.Limit(2).All(setContextOp(ctx, mq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{maintainer.Label}
	default:
		return nil, &NotSingularError{maintainer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mq *MaintainerQuery) OnlyX(ctx context.Context) *Maintainer {
	node, err := mq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Maintainer ID in the query.
// Returns a *NotSingularError when more than one Maintainer ID is found.
// Returns a *NotFoundError when no entities are found.
func (mq *MaintainerQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = mq.Limit(2).IDs(setContextOp(ctx, mq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{maintainer.Label}
	default:
		err = &NotSingularError{maintainer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mq *MaintainerQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := mq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Maintainers.
func (mq *MaintainerQuery) All(ctx context.Context) ([]*Maintainer, error) {
	ctx = setContextOp(ctx, mq.ctx, "All")
	if err := mq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Maintainer, *MaintainerQuery]()
	return withInterceptors[[]*Maintainer](ctx, mq, qr, mq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mq *MaintainerQuery) AllX(ctx context.Context) []*Maintainer {
	nodes, err := mq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Maintainer IDs.
func (mq *MaintainerQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if mq.ctx.Unique == nil && mq.path != nil {
		mq.Unique(true)
	}
	ctx = setContextOp(ctx, mq.ctx, "IDs")
	if err = mq.Select(maintainer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mq *MaintainerQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := mq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mq *MaintainerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mq.ctx, "Count")
	if err := mq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mq, querierCount[*MaintainerQuery](), mq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mq *MaintainerQuery) CountX(ctx context.Context) int {
	count, err := mq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mq *MaintainerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mq.ctx, "Exist")
	switch _, err := mq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mq *MaintainerQuery) ExistX(ctx context.Context) bool {
	exist, err := mq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MaintainerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mq *MaintainerQuery) Clone() *MaintainerQuery {
	if mq == nil {
		return nil
	}
	return &MaintainerQuery{
		config:     mq.config,
		ctx:        mq.ctx.Clone(),
		order:      append([]maintainer.OrderOption{}, mq.order...),
		inters:     append([]Interceptor{}, mq.inters...),
		predicates: append([]predicate.Maintainer{}, mq.predicates...),
		withCities: mq.withCities.Clone(),
		withAsset:  mq.withAsset.Clone(),
		// clone intermediate query.
		sql:  mq.sql.Clone(),
		path: mq.path,
	}
}

// WithCities tells the query-builder to eager-load the nodes that are connected to
// the "cities" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MaintainerQuery) WithCities(opts ...func(*CityQuery)) *MaintainerQuery {
	query := (&CityClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withCities = query
	return mq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MaintainerQuery) WithAsset(opts ...func(*AssetQuery)) *MaintainerQuery {
	query := (&AssetClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withAsset = query
	return mq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Enable bool `json:"enable,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Maintainer.Query().
//		GroupBy(maintainer.FieldEnable).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mq *MaintainerQuery) GroupBy(field string, fields ...string) *MaintainerGroupBy {
	mq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MaintainerGroupBy{build: mq}
	grbuild.flds = &mq.ctx.Fields
	grbuild.label = maintainer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Enable bool `json:"enable,omitempty"`
//	}
//
//	client.Maintainer.Query().
//		Select(maintainer.FieldEnable).
//		Scan(ctx, &v)
func (mq *MaintainerQuery) Select(fields ...string) *MaintainerSelect {
	mq.ctx.Fields = append(mq.ctx.Fields, fields...)
	sbuild := &MaintainerSelect{MaintainerQuery: mq}
	sbuild.label = maintainer.Label
	sbuild.flds, sbuild.scan = &mq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MaintainerSelect configured with the given aggregations.
func (mq *MaintainerQuery) Aggregate(fns ...AggregateFunc) *MaintainerSelect {
	return mq.Select().Aggregate(fns...)
}

func (mq *MaintainerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mq); err != nil {
				return err
			}
		}
	}
	for _, f := range mq.ctx.Fields {
		if !maintainer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mq.path != nil {
		prev, err := mq.path(ctx)
		if err != nil {
			return err
		}
		mq.sql = prev
	}
	return nil
}

func (mq *MaintainerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Maintainer, error) {
	var (
		nodes       = []*Maintainer{}
		_spec       = mq.querySpec()
		loadedTypes = [2]bool{
			mq.withCities != nil,
			mq.withAsset != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Maintainer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Maintainer{config: mq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mq.modifiers) > 0 {
		_spec.Modifiers = mq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mq.withCities; query != nil {
		if err := mq.loadCities(ctx, query, nodes,
			func(n *Maintainer) { n.Edges.Cities = []*City{} },
			func(n *Maintainer, e *City) { n.Edges.Cities = append(n.Edges.Cities, e) }); err != nil {
			return nil, err
		}
	}
	if query := mq.withAsset; query != nil {
		if err := mq.loadAsset(ctx, query, nodes,
			func(n *Maintainer) { n.Edges.Asset = []*Asset{} },
			func(n *Maintainer, e *Asset) { n.Edges.Asset = append(n.Edges.Asset, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mq *MaintainerQuery) loadCities(ctx context.Context, query *CityQuery, nodes []*Maintainer, init func(*Maintainer), assign func(*Maintainer, *City)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Maintainer)
	nids := make(map[uint64]map[*Maintainer]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(maintainer.CitiesTable)
		s.Join(joinT).On(s.C(city.FieldID), joinT.C(maintainer.CitiesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(maintainer.CitiesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(maintainer.CitiesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Maintainer]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*City](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "cities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (mq *MaintainerQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*Maintainer, init func(*Maintainer), assign func(*Maintainer, *Asset)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Maintainer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(asset.FieldLocationsID)
	}
	query.Where(predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(maintainer.AssetColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LocationsID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "locations_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (mq *MaintainerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mq.querySpec()
	if len(mq.modifiers) > 0 {
		_spec.Modifiers = mq.modifiers
	}
	_spec.Node.Columns = mq.ctx.Fields
	if len(mq.ctx.Fields) > 0 {
		_spec.Unique = mq.ctx.Unique != nil && *mq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mq.driver, _spec)
}

func (mq *MaintainerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(maintainer.Table, maintainer.Columns, sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64))
	_spec.From = mq.sql
	if unique := mq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mq.path != nil {
		_spec.Unique = true
	}
	if fields := mq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, maintainer.FieldID)
		for i := range fields {
			if fields[i] != maintainer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mq *MaintainerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mq.driver.Dialect())
	t1 := builder.Table(maintainer.Table)
	columns := mq.ctx.Fields
	if len(columns) == 0 {
		columns = maintainer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mq.sql != nil {
		selector = mq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mq.ctx.Unique != nil && *mq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range mq.modifiers {
		m(selector)
	}
	for _, p := range mq.predicates {
		p(selector)
	}
	for _, p := range mq.order {
		p(selector)
	}
	if offset := mq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mq *MaintainerQuery) Modify(modifiers ...func(s *sql.Selector)) *MaintainerSelect {
	mq.modifiers = append(mq.modifiers, modifiers...)
	return mq.Select()
}

type MaintainerQueryWith string

var (
	MaintainerQueryWithCities MaintainerQueryWith = "Cities"
	MaintainerQueryWithAsset  MaintainerQueryWith = "Asset"
)

func (mq *MaintainerQuery) With(withEdges ...MaintainerQueryWith) *MaintainerQuery {
	for _, v := range withEdges {
		switch v {
		case MaintainerQueryWithCities:
			mq.WithCities()
		case MaintainerQueryWithAsset:
			mq.WithAsset()
		}
	}
	return mq
}

// MaintainerGroupBy is the group-by builder for Maintainer entities.
type MaintainerGroupBy struct {
	selector
	build *MaintainerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mgb *MaintainerGroupBy) Aggregate(fns ...AggregateFunc) *MaintainerGroupBy {
	mgb.fns = append(mgb.fns, fns...)
	return mgb
}

// Scan applies the selector query and scans the result into the given value.
func (mgb *MaintainerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mgb.build.ctx, "GroupBy")
	if err := mgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MaintainerQuery, *MaintainerGroupBy](ctx, mgb.build, mgb, mgb.build.inters, v)
}

func (mgb *MaintainerGroupBy) sqlScan(ctx context.Context, root *MaintainerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mgb.fns))
	for _, fn := range mgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mgb.flds)+len(mgb.fns))
		for _, f := range *mgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MaintainerSelect is the builder for selecting fields of Maintainer entities.
type MaintainerSelect struct {
	*MaintainerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ms *MaintainerSelect) Aggregate(fns ...AggregateFunc) *MaintainerSelect {
	ms.fns = append(ms.fns, fns...)
	return ms
}

// Scan applies the selector query and scans the result into the given value.
func (ms *MaintainerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ms.ctx, "Select")
	if err := ms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MaintainerQuery, *MaintainerSelect](ctx, ms.MaintainerQuery, ms, ms.inters, v)
}

func (ms *MaintainerSelect) sqlScan(ctx context.Context, root *MaintainerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ms.fns))
	for _, fn := range ms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ms *MaintainerSelect) Modify(modifiers ...func(s *sql.Selector)) *MaintainerSelect {
	ms.modifiers = append(ms.modifiers, modifiers...)
	return ms
}
