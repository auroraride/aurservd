// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/city"
)

// Branch is the model entity for the Branch schema.
type Branch struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// 网点名称
	Name string `json:"name,omitempty"`
	// 经度
	Lng float64 `json:"lng,omitempty"`
	// 纬度
	Lat float64 `json:"lat,omitempty"`
	// 详细地址
	Address string `json:"address,omitempty"`
	// 网点照片
	Photos []string `json:"photos,omitempty"`
	// 坐标
	Geom *model.Geometry `json:"geom,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BranchQuery when eager-loading is set.
	Edges BranchEdges `json:"edges"`
}

// BranchEdges holds the relations/edges for other nodes in the graph.
type BranchEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Contracts holds the value of the contracts edge.
	Contracts []*BranchContract `json:"contracts,omitempty"`
	// Cabinets holds the value of the cabinets edge.
	Cabinets []*Cabinet `json:"cabinets,omitempty"`
	// Faults holds the value of the faults edge.
	Faults []*CabinetFault `json:"faults,omitempty"`
	// Stores holds the value of the stores edge.
	Stores []*Store `json:"stores,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BranchEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// ContractsOrErr returns the Contracts value or an error if the edge
// was not loaded in eager-loading.
func (e BranchEdges) ContractsOrErr() ([]*BranchContract, error) {
	if e.loadedTypes[1] {
		return e.Contracts, nil
	}
	return nil, &NotLoadedError{edge: "contracts"}
}

// CabinetsOrErr returns the Cabinets value or an error if the edge
// was not loaded in eager-loading.
func (e BranchEdges) CabinetsOrErr() ([]*Cabinet, error) {
	if e.loadedTypes[2] {
		return e.Cabinets, nil
	}
	return nil, &NotLoadedError{edge: "cabinets"}
}

// FaultsOrErr returns the Faults value or an error if the edge
// was not loaded in eager-loading.
func (e BranchEdges) FaultsOrErr() ([]*CabinetFault, error) {
	if e.loadedTypes[3] {
		return e.Faults, nil
	}
	return nil, &NotLoadedError{edge: "faults"}
}

// StoresOrErr returns the Stores value or an error if the edge
// was not loaded in eager-loading.
func (e BranchEdges) StoresOrErr() ([]*Store, error) {
	if e.loadedTypes[4] {
		return e.Stores, nil
	}
	return nil, &NotLoadedError{edge: "stores"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Branch) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case branch.FieldCreator, branch.FieldLastModifier, branch.FieldPhotos:
			values[i] = new([]byte)
		case branch.FieldGeom:
			values[i] = new(model.Geometry)
		case branch.FieldLng, branch.FieldLat:
			values[i] = new(sql.NullFloat64)
		case branch.FieldID, branch.FieldCityID:
			values[i] = new(sql.NullInt64)
		case branch.FieldRemark, branch.FieldName, branch.FieldAddress:
			values[i] = new(sql.NullString)
		case branch.FieldCreatedAt, branch.FieldUpdatedAt, branch.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Branch", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Branch fields.
func (b *Branch) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case branch.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = uint64(value.Int64)
		case branch.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case branch.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case branch.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				b.DeletedAt = new(time.Time)
				*b.DeletedAt = value.Time
			}
		case branch.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case branch.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case branch.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				b.Remark = value.String
			}
		case branch.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				b.CityID = uint64(value.Int64)
			}
		case branch.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case branch.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				b.Lng = value.Float64
			}
		case branch.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				b.Lat = value.Float64
			}
		case branch.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				b.Address = value.String
			}
		case branch.FieldPhotos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Photos); err != nil {
					return fmt.Errorf("unmarshal field photos: %w", err)
				}
			}
		case branch.FieldGeom:
			if value, ok := values[i].(*model.Geometry); !ok {
				return fmt.Errorf("unexpected type %T for field geom", values[i])
			} else if value != nil {
				b.Geom = value
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the Branch entity.
func (b *Branch) QueryCity() *CityQuery {
	return (&BranchClient{config: b.config}).QueryCity(b)
}

// QueryContracts queries the "contracts" edge of the Branch entity.
func (b *Branch) QueryContracts() *BranchContractQuery {
	return (&BranchClient{config: b.config}).QueryContracts(b)
}

// QueryCabinets queries the "cabinets" edge of the Branch entity.
func (b *Branch) QueryCabinets() *CabinetQuery {
	return (&BranchClient{config: b.config}).QueryCabinets(b)
}

// QueryFaults queries the "faults" edge of the Branch entity.
func (b *Branch) QueryFaults() *CabinetFaultQuery {
	return (&BranchClient{config: b.config}).QueryFaults(b)
}

// QueryStores queries the "stores" edge of the Branch entity.
func (b *Branch) QueryStores() *StoreQuery {
	return (&BranchClient{config: b.config}).QueryStores(b)
}

// Update returns a builder for updating this Branch.
// Note that you need to call Branch.Unwrap() before calling this method if this Branch
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Branch) Update() *BranchUpdateOne {
	return (&BranchClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Branch entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Branch) Unwrap() *Branch {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Branch is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Branch) String() string {
	var builder strings.Builder
	builder.WriteString("Branch(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := b.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", b.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", b.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(b.Remark)
	builder.WriteString(", ")
	builder.WriteString("city_id=")
	builder.WriteString(fmt.Sprintf("%v", b.CityID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("lng=")
	builder.WriteString(fmt.Sprintf("%v", b.Lng))
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", b.Lat))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(b.Address)
	builder.WriteString(", ")
	builder.WriteString("photos=")
	builder.WriteString(fmt.Sprintf("%v", b.Photos))
	builder.WriteString(", ")
	builder.WriteString("geom=")
	builder.WriteString(fmt.Sprintf("%v", b.Geom))
	builder.WriteByte(')')
	return builder.String()
}

// Branches is a parsable slice of Branch.
type Branches []*Branch

func (b Branches) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
