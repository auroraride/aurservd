// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// AssetTransferDetailsCreate is the builder for creating a AssetTransferDetails entity.
type AssetTransferDetailsCreate struct {
	config
	mutation *AssetTransferDetailsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (atdc *AssetTransferDetailsCreate) SetCreatedAt(t time.Time) *AssetTransferDetailsCreate {
	atdc.mutation.SetCreatedAt(t)
	return atdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableCreatedAt(t *time.Time) *AssetTransferDetailsCreate {
	if t != nil {
		atdc.SetCreatedAt(*t)
	}
	return atdc
}

// SetUpdatedAt sets the "updated_at" field.
func (atdc *AssetTransferDetailsCreate) SetUpdatedAt(t time.Time) *AssetTransferDetailsCreate {
	atdc.mutation.SetUpdatedAt(t)
	return atdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableUpdatedAt(t *time.Time) *AssetTransferDetailsCreate {
	if t != nil {
		atdc.SetUpdatedAt(*t)
	}
	return atdc
}

// SetDeletedAt sets the "deleted_at" field.
func (atdc *AssetTransferDetailsCreate) SetDeletedAt(t time.Time) *AssetTransferDetailsCreate {
	atdc.mutation.SetDeletedAt(t)
	return atdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableDeletedAt(t *time.Time) *AssetTransferDetailsCreate {
	if t != nil {
		atdc.SetDeletedAt(*t)
	}
	return atdc
}

// SetCreator sets the "creator" field.
func (atdc *AssetTransferDetailsCreate) SetCreator(m *model.Modifier) *AssetTransferDetailsCreate {
	atdc.mutation.SetCreator(m)
	return atdc
}

// SetLastModifier sets the "last_modifier" field.
func (atdc *AssetTransferDetailsCreate) SetLastModifier(m *model.Modifier) *AssetTransferDetailsCreate {
	atdc.mutation.SetLastModifier(m)
	return atdc
}

// SetRemark sets the "remark" field.
func (atdc *AssetTransferDetailsCreate) SetRemark(s string) *AssetTransferDetailsCreate {
	atdc.mutation.SetRemark(s)
	return atdc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableRemark(s *string) *AssetTransferDetailsCreate {
	if s != nil {
		atdc.SetRemark(*s)
	}
	return atdc
}

// SetSn sets the "sn" field.
func (atdc *AssetTransferDetailsCreate) SetSn(s string) *AssetTransferDetailsCreate {
	atdc.mutation.SetSn(s)
	return atdc
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableSn(s *string) *AssetTransferDetailsCreate {
	if s != nil {
		atdc.SetSn(*s)
	}
	return atdc
}

// SetTransferID sets the "transfer_id" field.
func (atdc *AssetTransferDetailsCreate) SetTransferID(u uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetTransferID(u)
	return atdc
}

// SetNillableTransferID sets the "transfer_id" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableTransferID(u *uint64) *AssetTransferDetailsCreate {
	if u != nil {
		atdc.SetTransferID(*u)
	}
	return atdc
}

// SetIsIn sets the "is_in" field.
func (atdc *AssetTransferDetailsCreate) SetIsIn(b bool) *AssetTransferDetailsCreate {
	atdc.mutation.SetIsIn(b)
	return atdc
}

// SetNillableIsIn sets the "is_in" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableIsIn(b *bool) *AssetTransferDetailsCreate {
	if b != nil {
		atdc.SetIsIn(*b)
	}
	return atdc
}

// SetInOperateID sets the "in_operate_id" field.
func (atdc *AssetTransferDetailsCreate) SetInOperateID(u uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateID(u)
	return atdc
}

// SetNillableInOperateID sets the "in_operate_id" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateID(u *uint64) *AssetTransferDetailsCreate {
	if u != nil {
		atdc.SetInOperateID(*u)
	}
	return atdc
}

// SetInOperateType sets the "in_operate_type" field.
func (atdc *AssetTransferDetailsCreate) SetInOperateType(u uint8) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateType(u)
	return atdc
}

// SetNillableInOperateType sets the "in_operate_type" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateType(u *uint8) *AssetTransferDetailsCreate {
	if u != nil {
		atdc.SetInOperateType(*u)
	}
	return atdc
}

// SetInTimeAt sets the "in_time_at" field.
func (atdc *AssetTransferDetailsCreate) SetInTimeAt(t time.Time) *AssetTransferDetailsCreate {
	atdc.mutation.SetInTimeAt(t)
	return atdc
}

// SetNillableInTimeAt sets the "in_time_at" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInTimeAt(t *time.Time) *AssetTransferDetailsCreate {
	if t != nil {
		atdc.SetInTimeAt(*t)
	}
	return atdc
}

// SetAssetID sets the "asset_id" field.
func (atdc *AssetTransferDetailsCreate) SetAssetID(u uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetAssetID(u)
	return atdc
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableAssetID(u *uint64) *AssetTransferDetailsCreate {
	if u != nil {
		atdc.SetAssetID(*u)
	}
	return atdc
}

// SetTransfer sets the "transfer" edge to the AssetTransfer entity.
func (atdc *AssetTransferDetailsCreate) SetTransfer(a *AssetTransfer) *AssetTransferDetailsCreate {
	return atdc.SetTransferID(a.ID)
}

// SetInOperateAssetManagerID sets the "in_operate_asset_manager" edge to the AssetManager entity by ID.
func (atdc *AssetTransferDetailsCreate) SetInOperateAssetManagerID(id uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateAssetManagerID(id)
	return atdc
}

// SetNillableInOperateAssetManagerID sets the "in_operate_asset_manager" edge to the AssetManager entity by ID if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateAssetManagerID(id *uint64) *AssetTransferDetailsCreate {
	if id != nil {
		atdc = atdc.SetInOperateAssetManagerID(*id)
	}
	return atdc
}

// SetInOperateAssetManager sets the "in_operate_asset_manager" edge to the AssetManager entity.
func (atdc *AssetTransferDetailsCreate) SetInOperateAssetManager(a *AssetManager) *AssetTransferDetailsCreate {
	return atdc.SetInOperateAssetManagerID(a.ID)
}

// SetInOperateEmployeeID sets the "in_operate_employee" edge to the Employee entity by ID.
func (atdc *AssetTransferDetailsCreate) SetInOperateEmployeeID(id uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateEmployeeID(id)
	return atdc
}

// SetNillableInOperateEmployeeID sets the "in_operate_employee" edge to the Employee entity by ID if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateEmployeeID(id *uint64) *AssetTransferDetailsCreate {
	if id != nil {
		atdc = atdc.SetInOperateEmployeeID(*id)
	}
	return atdc
}

// SetInOperateEmployee sets the "in_operate_employee" edge to the Employee entity.
func (atdc *AssetTransferDetailsCreate) SetInOperateEmployee(e *Employee) *AssetTransferDetailsCreate {
	return atdc.SetInOperateEmployeeID(e.ID)
}

// SetInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID.
func (atdc *AssetTransferDetailsCreate) SetInOperateAgentID(id uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateAgentID(id)
	return atdc
}

// SetNillableInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateAgentID(id *uint64) *AssetTransferDetailsCreate {
	if id != nil {
		atdc = atdc.SetInOperateAgentID(*id)
	}
	return atdc
}

// SetInOperateAgent sets the "in_operate_agent" edge to the Agent entity.
func (atdc *AssetTransferDetailsCreate) SetInOperateAgent(a *Agent) *AssetTransferDetailsCreate {
	return atdc.SetInOperateAgentID(a.ID)
}

// SetInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID.
func (atdc *AssetTransferDetailsCreate) SetInOperateMaintainerID(id uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateMaintainerID(id)
	return atdc
}

// SetNillableInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateMaintainerID(id *uint64) *AssetTransferDetailsCreate {
	if id != nil {
		atdc = atdc.SetInOperateMaintainerID(*id)
	}
	return atdc
}

// SetInOperateMaintainer sets the "in_operate_maintainer" edge to the Maintainer entity.
func (atdc *AssetTransferDetailsCreate) SetInOperateMaintainer(m *Maintainer) *AssetTransferDetailsCreate {
	return atdc.SetInOperateMaintainerID(m.ID)
}

// SetInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID.
func (atdc *AssetTransferDetailsCreate) SetInOperateCabinetID(id uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateCabinetID(id)
	return atdc
}

// SetNillableInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateCabinetID(id *uint64) *AssetTransferDetailsCreate {
	if id != nil {
		atdc = atdc.SetInOperateCabinetID(*id)
	}
	return atdc
}

// SetInOperateCabinet sets the "in_operate_cabinet" edge to the Cabinet entity.
func (atdc *AssetTransferDetailsCreate) SetInOperateCabinet(c *Cabinet) *AssetTransferDetailsCreate {
	return atdc.SetInOperateCabinetID(c.ID)
}

// SetInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID.
func (atdc *AssetTransferDetailsCreate) SetInOperateRiderID(id uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateRiderID(id)
	return atdc
}

// SetNillableInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateRiderID(id *uint64) *AssetTransferDetailsCreate {
	if id != nil {
		atdc = atdc.SetInOperateRiderID(*id)
	}
	return atdc
}

// SetInOperateRider sets the "in_operate_rider" edge to the Rider entity.
func (atdc *AssetTransferDetailsCreate) SetInOperateRider(r *Rider) *AssetTransferDetailsCreate {
	return atdc.SetInOperateRiderID(r.ID)
}

// SetInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID.
func (atdc *AssetTransferDetailsCreate) SetInOperateManagerID(id uint64) *AssetTransferDetailsCreate {
	atdc.mutation.SetInOperateManagerID(id)
	return atdc
}

// SetNillableInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atdc *AssetTransferDetailsCreate) SetNillableInOperateManagerID(id *uint64) *AssetTransferDetailsCreate {
	if id != nil {
		atdc = atdc.SetInOperateManagerID(*id)
	}
	return atdc
}

// SetInOperateManager sets the "in_operate_manager" edge to the Manager entity.
func (atdc *AssetTransferDetailsCreate) SetInOperateManager(m *Manager) *AssetTransferDetailsCreate {
	return atdc.SetInOperateManagerID(m.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (atdc *AssetTransferDetailsCreate) SetAsset(a *Asset) *AssetTransferDetailsCreate {
	return atdc.SetAssetID(a.ID)
}

// Mutation returns the AssetTransferDetailsMutation object of the builder.
func (atdc *AssetTransferDetailsCreate) Mutation() *AssetTransferDetailsMutation {
	return atdc.mutation
}

// Save creates the AssetTransferDetails in the database.
func (atdc *AssetTransferDetailsCreate) Save(ctx context.Context) (*AssetTransferDetails, error) {
	if err := atdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atdc.sqlSave, atdc.mutation, atdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atdc *AssetTransferDetailsCreate) SaveX(ctx context.Context) *AssetTransferDetails {
	v, err := atdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atdc *AssetTransferDetailsCreate) Exec(ctx context.Context) error {
	_, err := atdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atdc *AssetTransferDetailsCreate) ExecX(ctx context.Context) {
	if err := atdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atdc *AssetTransferDetailsCreate) defaults() error {
	if _, ok := atdc.mutation.CreatedAt(); !ok {
		if assettransferdetails.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransferdetails.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assettransferdetails.DefaultCreatedAt()
		atdc.mutation.SetCreatedAt(v)
	}
	if _, ok := atdc.mutation.UpdatedAt(); !ok {
		if assettransferdetails.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransferdetails.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransferdetails.DefaultUpdatedAt()
		atdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := atdc.mutation.IsIn(); !ok {
		v := assettransferdetails.DefaultIsIn
		atdc.mutation.SetIsIn(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (atdc *AssetTransferDetailsCreate) check() error {
	if _, ok := atdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetTransferDetails.created_at"`)}
	}
	if _, ok := atdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetTransferDetails.updated_at"`)}
	}
	if _, ok := atdc.mutation.IsIn(); !ok {
		return &ValidationError{Name: "is_in", err: errors.New(`ent: missing required field "AssetTransferDetails.is_in"`)}
	}
	return nil
}

func (atdc *AssetTransferDetailsCreate) sqlSave(ctx context.Context) (*AssetTransferDetails, error) {
	if err := atdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	atdc.mutation.id = &_node.ID
	atdc.mutation.done = true
	return _node, nil
}

func (atdc *AssetTransferDetailsCreate) createSpec() (*AssetTransferDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetTransferDetails{config: atdc.config}
		_spec = sqlgraph.NewCreateSpec(assettransferdetails.Table, sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = atdc.conflict
	if value, ok := atdc.mutation.CreatedAt(); ok {
		_spec.SetField(assettransferdetails.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := atdc.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransferdetails.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := atdc.mutation.DeletedAt(); ok {
		_spec.SetField(assettransferdetails.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := atdc.mutation.Creator(); ok {
		_spec.SetField(assettransferdetails.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := atdc.mutation.LastModifier(); ok {
		_spec.SetField(assettransferdetails.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := atdc.mutation.Remark(); ok {
		_spec.SetField(assettransferdetails.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := atdc.mutation.Sn(); ok {
		_spec.SetField(assettransferdetails.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := atdc.mutation.IsIn(); ok {
		_spec.SetField(assettransferdetails.FieldIsIn, field.TypeBool, value)
		_node.IsIn = value
	}
	if value, ok := atdc.mutation.InOperateType(); ok {
		_spec.SetField(assettransferdetails.FieldInOperateType, field.TypeUint8, value)
		_node.InOperateType = value
	}
	if value, ok := atdc.mutation.InTimeAt(); ok {
		_spec.SetField(assettransferdetails.FieldInTimeAt, field.TypeTime, value)
		_node.InTimeAt = &value
	}
	if nodes := atdc.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TransferID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atdc.mutation.InOperateAssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAssetManagerTable,
			Columns: []string{assettransferdetails.InOperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InOperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atdc.mutation.InOperateEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateEmployeeTable,
			Columns: []string{assettransferdetails.InOperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InOperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atdc.mutation.InOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAgentTable,
			Columns: []string{assettransferdetails.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InOperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atdc.mutation.InOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateMaintainerTable,
			Columns: []string{assettransferdetails.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InOperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atdc.mutation.InOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateCabinetTable,
			Columns: []string{assettransferdetails.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InOperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atdc.mutation.InOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateRiderTable,
			Columns: []string{assettransferdetails.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InOperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atdc.mutation.InOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateManagerTable,
			Columns: []string{assettransferdetails.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InOperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atdc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetTransferDetails.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetTransferDetailsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (atdc *AssetTransferDetailsCreate) OnConflict(opts ...sql.ConflictOption) *AssetTransferDetailsUpsertOne {
	atdc.conflict = opts
	return &AssetTransferDetailsUpsertOne{
		create: atdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetTransferDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atdc *AssetTransferDetailsCreate) OnConflictColumns(columns ...string) *AssetTransferDetailsUpsertOne {
	atdc.conflict = append(atdc.conflict, sql.ConflictColumns(columns...))
	return &AssetTransferDetailsUpsertOne{
		create: atdc,
	}
}

type (
	// AssetTransferDetailsUpsertOne is the builder for "upsert"-ing
	//  one AssetTransferDetails node.
	AssetTransferDetailsUpsertOne struct {
		create *AssetTransferDetailsCreate
	}

	// AssetTransferDetailsUpsert is the "OnConflict" setter.
	AssetTransferDetailsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetTransferDetailsUpsert) SetUpdatedAt(v time.Time) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateUpdatedAt() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetTransferDetailsUpsert) SetDeletedAt(v time.Time) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateDeletedAt() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetTransferDetailsUpsert) ClearDeletedAt() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetTransferDetailsUpsert) SetLastModifier(v *model.Modifier) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateLastModifier() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetTransferDetailsUpsert) ClearLastModifier() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetTransferDetailsUpsert) SetRemark(v string) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateRemark() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetTransferDetailsUpsert) ClearRemark() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldRemark)
	return u
}

// SetSn sets the "sn" field.
func (u *AssetTransferDetailsUpsert) SetSn(v string) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateSn() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldSn)
	return u
}

// ClearSn clears the value of the "sn" field.
func (u *AssetTransferDetailsUpsert) ClearSn() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldSn)
	return u
}

// SetTransferID sets the "transfer_id" field.
func (u *AssetTransferDetailsUpsert) SetTransferID(v uint64) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldTransferID, v)
	return u
}

// UpdateTransferID sets the "transfer_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateTransferID() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldTransferID)
	return u
}

// ClearTransferID clears the value of the "transfer_id" field.
func (u *AssetTransferDetailsUpsert) ClearTransferID() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldTransferID)
	return u
}

// SetIsIn sets the "is_in" field.
func (u *AssetTransferDetailsUpsert) SetIsIn(v bool) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldIsIn, v)
	return u
}

// UpdateIsIn sets the "is_in" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateIsIn() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldIsIn)
	return u
}

// SetInOperateID sets the "in_operate_id" field.
func (u *AssetTransferDetailsUpsert) SetInOperateID(v uint64) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldInOperateID, v)
	return u
}

// UpdateInOperateID sets the "in_operate_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateInOperateID() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldInOperateID)
	return u
}

// ClearInOperateID clears the value of the "in_operate_id" field.
func (u *AssetTransferDetailsUpsert) ClearInOperateID() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldInOperateID)
	return u
}

// SetInOperateType sets the "in_operate_type" field.
func (u *AssetTransferDetailsUpsert) SetInOperateType(v uint8) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldInOperateType, v)
	return u
}

// UpdateInOperateType sets the "in_operate_type" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateInOperateType() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldInOperateType)
	return u
}

// AddInOperateType adds v to the "in_operate_type" field.
func (u *AssetTransferDetailsUpsert) AddInOperateType(v uint8) *AssetTransferDetailsUpsert {
	u.Add(assettransferdetails.FieldInOperateType, v)
	return u
}

// ClearInOperateType clears the value of the "in_operate_type" field.
func (u *AssetTransferDetailsUpsert) ClearInOperateType() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldInOperateType)
	return u
}

// SetInTimeAt sets the "in_time_at" field.
func (u *AssetTransferDetailsUpsert) SetInTimeAt(v time.Time) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldInTimeAt, v)
	return u
}

// UpdateInTimeAt sets the "in_time_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateInTimeAt() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldInTimeAt)
	return u
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (u *AssetTransferDetailsUpsert) ClearInTimeAt() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldInTimeAt)
	return u
}

// SetAssetID sets the "asset_id" field.
func (u *AssetTransferDetailsUpsert) SetAssetID(v uint64) *AssetTransferDetailsUpsert {
	u.Set(assettransferdetails.FieldAssetID, v)
	return u
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsert) UpdateAssetID() *AssetTransferDetailsUpsert {
	u.SetExcluded(assettransferdetails.FieldAssetID)
	return u
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetTransferDetailsUpsert) ClearAssetID() *AssetTransferDetailsUpsert {
	u.SetNull(assettransferdetails.FieldAssetID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetTransferDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetTransferDetailsUpsertOne) UpdateNewValues() *AssetTransferDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assettransferdetails.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(assettransferdetails.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetTransferDetails.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetTransferDetailsUpsertOne) Ignore() *AssetTransferDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetTransferDetailsUpsertOne) DoNothing() *AssetTransferDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetTransferDetailsCreate.OnConflict
// documentation for more info.
func (u *AssetTransferDetailsUpsertOne) Update(set func(*AssetTransferDetailsUpsert)) *AssetTransferDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetTransferDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetTransferDetailsUpsertOne) SetUpdatedAt(v time.Time) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateUpdatedAt() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetTransferDetailsUpsertOne) SetDeletedAt(v time.Time) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateDeletedAt() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetTransferDetailsUpsertOne) ClearDeletedAt() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetTransferDetailsUpsertOne) SetLastModifier(v *model.Modifier) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateLastModifier() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetTransferDetailsUpsertOne) ClearLastModifier() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetTransferDetailsUpsertOne) SetRemark(v string) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateRemark() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetTransferDetailsUpsertOne) ClearRemark() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearRemark()
	})
}

// SetSn sets the "sn" field.
func (u *AssetTransferDetailsUpsertOne) SetSn(v string) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateSn() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateSn()
	})
}

// ClearSn clears the value of the "sn" field.
func (u *AssetTransferDetailsUpsertOne) ClearSn() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearSn()
	})
}

// SetTransferID sets the "transfer_id" field.
func (u *AssetTransferDetailsUpsertOne) SetTransferID(v uint64) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetTransferID(v)
	})
}

// UpdateTransferID sets the "transfer_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateTransferID() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateTransferID()
	})
}

// ClearTransferID clears the value of the "transfer_id" field.
func (u *AssetTransferDetailsUpsertOne) ClearTransferID() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearTransferID()
	})
}

// SetIsIn sets the "is_in" field.
func (u *AssetTransferDetailsUpsertOne) SetIsIn(v bool) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetIsIn(v)
	})
}

// UpdateIsIn sets the "is_in" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateIsIn() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateIsIn()
	})
}

// SetInOperateID sets the "in_operate_id" field.
func (u *AssetTransferDetailsUpsertOne) SetInOperateID(v uint64) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetInOperateID(v)
	})
}

// UpdateInOperateID sets the "in_operate_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateInOperateID() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateInOperateID()
	})
}

// ClearInOperateID clears the value of the "in_operate_id" field.
func (u *AssetTransferDetailsUpsertOne) ClearInOperateID() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearInOperateID()
	})
}

// SetInOperateType sets the "in_operate_type" field.
func (u *AssetTransferDetailsUpsertOne) SetInOperateType(v uint8) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetInOperateType(v)
	})
}

// AddInOperateType adds v to the "in_operate_type" field.
func (u *AssetTransferDetailsUpsertOne) AddInOperateType(v uint8) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.AddInOperateType(v)
	})
}

// UpdateInOperateType sets the "in_operate_type" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateInOperateType() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateInOperateType()
	})
}

// ClearInOperateType clears the value of the "in_operate_type" field.
func (u *AssetTransferDetailsUpsertOne) ClearInOperateType() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearInOperateType()
	})
}

// SetInTimeAt sets the "in_time_at" field.
func (u *AssetTransferDetailsUpsertOne) SetInTimeAt(v time.Time) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetInTimeAt(v)
	})
}

// UpdateInTimeAt sets the "in_time_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateInTimeAt() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateInTimeAt()
	})
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (u *AssetTransferDetailsUpsertOne) ClearInTimeAt() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearInTimeAt()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetTransferDetailsUpsertOne) SetAssetID(v uint64) *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertOne) UpdateAssetID() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateAssetID()
	})
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetTransferDetailsUpsertOne) ClearAssetID() *AssetTransferDetailsUpsertOne {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearAssetID()
	})
}

// Exec executes the query.
func (u *AssetTransferDetailsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetTransferDetailsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetTransferDetailsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetTransferDetailsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetTransferDetailsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetTransferDetailsCreateBulk is the builder for creating many AssetTransferDetails entities in bulk.
type AssetTransferDetailsCreateBulk struct {
	config
	err      error
	builders []*AssetTransferDetailsCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetTransferDetails entities in the database.
func (atdcb *AssetTransferDetailsCreateBulk) Save(ctx context.Context) ([]*AssetTransferDetails, error) {
	if atdcb.err != nil {
		return nil, atdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atdcb.builders))
	nodes := make([]*AssetTransferDetails, len(atdcb.builders))
	mutators := make([]Mutator, len(atdcb.builders))
	for i := range atdcb.builders {
		func(i int, root context.Context) {
			builder := atdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetTransferDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = atdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atdcb *AssetTransferDetailsCreateBulk) SaveX(ctx context.Context) []*AssetTransferDetails {
	v, err := atdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atdcb *AssetTransferDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := atdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atdcb *AssetTransferDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := atdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetTransferDetails.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetTransferDetailsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (atdcb *AssetTransferDetailsCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetTransferDetailsUpsertBulk {
	atdcb.conflict = opts
	return &AssetTransferDetailsUpsertBulk{
		create: atdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetTransferDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atdcb *AssetTransferDetailsCreateBulk) OnConflictColumns(columns ...string) *AssetTransferDetailsUpsertBulk {
	atdcb.conflict = append(atdcb.conflict, sql.ConflictColumns(columns...))
	return &AssetTransferDetailsUpsertBulk{
		create: atdcb,
	}
}

// AssetTransferDetailsUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetTransferDetails nodes.
type AssetTransferDetailsUpsertBulk struct {
	create *AssetTransferDetailsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetTransferDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetTransferDetailsUpsertBulk) UpdateNewValues() *AssetTransferDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assettransferdetails.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(assettransferdetails.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetTransferDetails.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetTransferDetailsUpsertBulk) Ignore() *AssetTransferDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetTransferDetailsUpsertBulk) DoNothing() *AssetTransferDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetTransferDetailsCreateBulk.OnConflict
// documentation for more info.
func (u *AssetTransferDetailsUpsertBulk) Update(set func(*AssetTransferDetailsUpsert)) *AssetTransferDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetTransferDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetTransferDetailsUpsertBulk) SetUpdatedAt(v time.Time) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateUpdatedAt() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetTransferDetailsUpsertBulk) SetDeletedAt(v time.Time) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateDeletedAt() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetTransferDetailsUpsertBulk) ClearDeletedAt() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetTransferDetailsUpsertBulk) SetLastModifier(v *model.Modifier) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateLastModifier() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetTransferDetailsUpsertBulk) ClearLastModifier() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetTransferDetailsUpsertBulk) SetRemark(v string) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateRemark() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetTransferDetailsUpsertBulk) ClearRemark() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearRemark()
	})
}

// SetSn sets the "sn" field.
func (u *AssetTransferDetailsUpsertBulk) SetSn(v string) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateSn() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateSn()
	})
}

// ClearSn clears the value of the "sn" field.
func (u *AssetTransferDetailsUpsertBulk) ClearSn() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearSn()
	})
}

// SetTransferID sets the "transfer_id" field.
func (u *AssetTransferDetailsUpsertBulk) SetTransferID(v uint64) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetTransferID(v)
	})
}

// UpdateTransferID sets the "transfer_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateTransferID() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateTransferID()
	})
}

// ClearTransferID clears the value of the "transfer_id" field.
func (u *AssetTransferDetailsUpsertBulk) ClearTransferID() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearTransferID()
	})
}

// SetIsIn sets the "is_in" field.
func (u *AssetTransferDetailsUpsertBulk) SetIsIn(v bool) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetIsIn(v)
	})
}

// UpdateIsIn sets the "is_in" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateIsIn() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateIsIn()
	})
}

// SetInOperateID sets the "in_operate_id" field.
func (u *AssetTransferDetailsUpsertBulk) SetInOperateID(v uint64) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetInOperateID(v)
	})
}

// UpdateInOperateID sets the "in_operate_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateInOperateID() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateInOperateID()
	})
}

// ClearInOperateID clears the value of the "in_operate_id" field.
func (u *AssetTransferDetailsUpsertBulk) ClearInOperateID() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearInOperateID()
	})
}

// SetInOperateType sets the "in_operate_type" field.
func (u *AssetTransferDetailsUpsertBulk) SetInOperateType(v uint8) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetInOperateType(v)
	})
}

// AddInOperateType adds v to the "in_operate_type" field.
func (u *AssetTransferDetailsUpsertBulk) AddInOperateType(v uint8) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.AddInOperateType(v)
	})
}

// UpdateInOperateType sets the "in_operate_type" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateInOperateType() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateInOperateType()
	})
}

// ClearInOperateType clears the value of the "in_operate_type" field.
func (u *AssetTransferDetailsUpsertBulk) ClearInOperateType() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearInOperateType()
	})
}

// SetInTimeAt sets the "in_time_at" field.
func (u *AssetTransferDetailsUpsertBulk) SetInTimeAt(v time.Time) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetInTimeAt(v)
	})
}

// UpdateInTimeAt sets the "in_time_at" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateInTimeAt() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateInTimeAt()
	})
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (u *AssetTransferDetailsUpsertBulk) ClearInTimeAt() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearInTimeAt()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetTransferDetailsUpsertBulk) SetAssetID(v uint64) *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetTransferDetailsUpsertBulk) UpdateAssetID() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.UpdateAssetID()
	})
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetTransferDetailsUpsertBulk) ClearAssetID() *AssetTransferDetailsUpsertBulk {
	return u.Update(func(s *AssetTransferDetailsUpsert) {
		s.ClearAssetID()
	})
}

// Exec executes the query.
func (u *AssetTransferDetailsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetTransferDetailsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetTransferDetailsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetTransferDetailsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
