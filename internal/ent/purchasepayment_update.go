// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
	"github.com/auroraride/aurservd/internal/ent/purchasepayment"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PurchasePaymentUpdate is the builder for updating PurchasePayment entities.
type PurchasePaymentUpdate struct {
	config
	hooks     []Hook
	mutation  *PurchasePaymentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PurchasePaymentUpdate builder.
func (ppu *PurchasePaymentUpdate) Where(ps ...predicate.PurchasePayment) *PurchasePaymentUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppu *PurchasePaymentUpdate) SetUpdatedAt(t time.Time) *PurchasePaymentUpdate {
	ppu.mutation.SetUpdatedAt(t)
	return ppu
}

// SetDeletedAt sets the "deleted_at" field.
func (ppu *PurchasePaymentUpdate) SetDeletedAt(t time.Time) *PurchasePaymentUpdate {
	ppu.mutation.SetDeletedAt(t)
	return ppu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableDeletedAt(t *time.Time) *PurchasePaymentUpdate {
	if t != nil {
		ppu.SetDeletedAt(*t)
	}
	return ppu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ppu *PurchasePaymentUpdate) ClearDeletedAt() *PurchasePaymentUpdate {
	ppu.mutation.ClearDeletedAt()
	return ppu
}

// SetLastModifier sets the "last_modifier" field.
func (ppu *PurchasePaymentUpdate) SetLastModifier(m *model.Modifier) *PurchasePaymentUpdate {
	ppu.mutation.SetLastModifier(m)
	return ppu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ppu *PurchasePaymentUpdate) ClearLastModifier() *PurchasePaymentUpdate {
	ppu.mutation.ClearLastModifier()
	return ppu
}

// SetRemark sets the "remark" field.
func (ppu *PurchasePaymentUpdate) SetRemark(s string) *PurchasePaymentUpdate {
	ppu.mutation.SetRemark(s)
	return ppu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableRemark(s *string) *PurchasePaymentUpdate {
	if s != nil {
		ppu.SetRemark(*s)
	}
	return ppu
}

// ClearRemark clears the value of the "remark" field.
func (ppu *PurchasePaymentUpdate) ClearRemark() *PurchasePaymentUpdate {
	ppu.mutation.ClearRemark()
	return ppu
}

// SetRiderID sets the "rider_id" field.
func (ppu *PurchasePaymentUpdate) SetRiderID(u uint64) *PurchasePaymentUpdate {
	ppu.mutation.SetRiderID(u)
	return ppu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableRiderID(u *uint64) *PurchasePaymentUpdate {
	if u != nil {
		ppu.SetRiderID(*u)
	}
	return ppu
}

// SetGoodsID sets the "goods_id" field.
func (ppu *PurchasePaymentUpdate) SetGoodsID(u uint64) *PurchasePaymentUpdate {
	ppu.mutation.SetGoodsID(u)
	return ppu
}

// SetNillableGoodsID sets the "goods_id" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableGoodsID(u *uint64) *PurchasePaymentUpdate {
	if u != nil {
		ppu.SetGoodsID(*u)
	}
	return ppu
}

// SetOrderID sets the "order_id" field.
func (ppu *PurchasePaymentUpdate) SetOrderID(u uint64) *PurchasePaymentUpdate {
	ppu.mutation.SetOrderID(u)
	return ppu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableOrderID(u *uint64) *PurchasePaymentUpdate {
	if u != nil {
		ppu.SetOrderID(*u)
	}
	return ppu
}

// SetOutTradeNo sets the "out_trade_no" field.
func (ppu *PurchasePaymentUpdate) SetOutTradeNo(s string) *PurchasePaymentUpdate {
	ppu.mutation.SetOutTradeNo(s)
	return ppu
}

// SetNillableOutTradeNo sets the "out_trade_no" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableOutTradeNo(s *string) *PurchasePaymentUpdate {
	if s != nil {
		ppu.SetOutTradeNo(*s)
	}
	return ppu
}

// SetIndex sets the "index" field.
func (ppu *PurchasePaymentUpdate) SetIndex(i int) *PurchasePaymentUpdate {
	ppu.mutation.ResetIndex()
	ppu.mutation.SetIndex(i)
	return ppu
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableIndex(i *int) *PurchasePaymentUpdate {
	if i != nil {
		ppu.SetIndex(*i)
	}
	return ppu
}

// AddIndex adds i to the "index" field.
func (ppu *PurchasePaymentUpdate) AddIndex(i int) *PurchasePaymentUpdate {
	ppu.mutation.AddIndex(i)
	return ppu
}

// SetStatus sets the "status" field.
func (ppu *PurchasePaymentUpdate) SetStatus(pu purchasepayment.Status) *PurchasePaymentUpdate {
	ppu.mutation.SetStatus(pu)
	return ppu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableStatus(pu *purchasepayment.Status) *PurchasePaymentUpdate {
	if pu != nil {
		ppu.SetStatus(*pu)
	}
	return ppu
}

// SetPayway sets the "payway" field.
func (ppu *PurchasePaymentUpdate) SetPayway(pu purchasepayment.Payway) *PurchasePaymentUpdate {
	ppu.mutation.SetPayway(pu)
	return ppu
}

// SetNillablePayway sets the "payway" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillablePayway(pu *purchasepayment.Payway) *PurchasePaymentUpdate {
	if pu != nil {
		ppu.SetPayway(*pu)
	}
	return ppu
}

// ClearPayway clears the value of the "payway" field.
func (ppu *PurchasePaymentUpdate) ClearPayway() *PurchasePaymentUpdate {
	ppu.mutation.ClearPayway()
	return ppu
}

// SetTotal sets the "total" field.
func (ppu *PurchasePaymentUpdate) SetTotal(f float64) *PurchasePaymentUpdate {
	ppu.mutation.ResetTotal()
	ppu.mutation.SetTotal(f)
	return ppu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableTotal(f *float64) *PurchasePaymentUpdate {
	if f != nil {
		ppu.SetTotal(*f)
	}
	return ppu
}

// AddTotal adds f to the "total" field.
func (ppu *PurchasePaymentUpdate) AddTotal(f float64) *PurchasePaymentUpdate {
	ppu.mutation.AddTotal(f)
	return ppu
}

// SetAmount sets the "amount" field.
func (ppu *PurchasePaymentUpdate) SetAmount(f float64) *PurchasePaymentUpdate {
	ppu.mutation.ResetAmount()
	ppu.mutation.SetAmount(f)
	return ppu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableAmount(f *float64) *PurchasePaymentUpdate {
	if f != nil {
		ppu.SetAmount(*f)
	}
	return ppu
}

// AddAmount adds f to the "amount" field.
func (ppu *PurchasePaymentUpdate) AddAmount(f float64) *PurchasePaymentUpdate {
	ppu.mutation.AddAmount(f)
	return ppu
}

// SetForfeit sets the "forfeit" field.
func (ppu *PurchasePaymentUpdate) SetForfeit(f float64) *PurchasePaymentUpdate {
	ppu.mutation.ResetForfeit()
	ppu.mutation.SetForfeit(f)
	return ppu
}

// SetNillableForfeit sets the "forfeit" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableForfeit(f *float64) *PurchasePaymentUpdate {
	if f != nil {
		ppu.SetForfeit(*f)
	}
	return ppu
}

// AddForfeit adds f to the "forfeit" field.
func (ppu *PurchasePaymentUpdate) AddForfeit(f float64) *PurchasePaymentUpdate {
	ppu.mutation.AddForfeit(f)
	return ppu
}

// SetBillingDate sets the "billing_date" field.
func (ppu *PurchasePaymentUpdate) SetBillingDate(t time.Time) *PurchasePaymentUpdate {
	ppu.mutation.SetBillingDate(t)
	return ppu
}

// SetNillableBillingDate sets the "billing_date" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableBillingDate(t *time.Time) *PurchasePaymentUpdate {
	if t != nil {
		ppu.SetBillingDate(*t)
	}
	return ppu
}

// SetPaymentDate sets the "payment_date" field.
func (ppu *PurchasePaymentUpdate) SetPaymentDate(t time.Time) *PurchasePaymentUpdate {
	ppu.mutation.SetPaymentDate(t)
	return ppu
}

// SetNillablePaymentDate sets the "payment_date" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillablePaymentDate(t *time.Time) *PurchasePaymentUpdate {
	if t != nil {
		ppu.SetPaymentDate(*t)
	}
	return ppu
}

// SetTradeNo sets the "trade_no" field.
func (ppu *PurchasePaymentUpdate) SetTradeNo(s string) *PurchasePaymentUpdate {
	ppu.mutation.SetTradeNo(s)
	return ppu
}

// SetNillableTradeNo sets the "trade_no" field if the given value is not nil.
func (ppu *PurchasePaymentUpdate) SetNillableTradeNo(s *string) *PurchasePaymentUpdate {
	if s != nil {
		ppu.SetTradeNo(*s)
	}
	return ppu
}

// ClearTradeNo clears the value of the "trade_no" field.
func (ppu *PurchasePaymentUpdate) ClearTradeNo() *PurchasePaymentUpdate {
	ppu.mutation.ClearTradeNo()
	return ppu
}

// SetRider sets the "rider" edge to the Rider entity.
func (ppu *PurchasePaymentUpdate) SetRider(r *Rider) *PurchasePaymentUpdate {
	return ppu.SetRiderID(r.ID)
}

// SetGoods sets the "goods" edge to the Goods entity.
func (ppu *PurchasePaymentUpdate) SetGoods(g *Goods) *PurchasePaymentUpdate {
	return ppu.SetGoodsID(g.ID)
}

// SetOrder sets the "order" edge to the PurchaseOrder entity.
func (ppu *PurchasePaymentUpdate) SetOrder(p *PurchaseOrder) *PurchasePaymentUpdate {
	return ppu.SetOrderID(p.ID)
}

// Mutation returns the PurchasePaymentMutation object of the builder.
func (ppu *PurchasePaymentUpdate) Mutation() *PurchasePaymentMutation {
	return ppu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ppu *PurchasePaymentUpdate) ClearRider() *PurchasePaymentUpdate {
	ppu.mutation.ClearRider()
	return ppu
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (ppu *PurchasePaymentUpdate) ClearGoods() *PurchasePaymentUpdate {
	ppu.mutation.ClearGoods()
	return ppu
}

// ClearOrder clears the "order" edge to the PurchaseOrder entity.
func (ppu *PurchasePaymentUpdate) ClearOrder() *PurchasePaymentUpdate {
	ppu.mutation.ClearOrder()
	return ppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PurchasePaymentUpdate) Save(ctx context.Context) (int, error) {
	if err := ppu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PurchasePaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PurchasePaymentUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PurchasePaymentUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *PurchasePaymentUpdate) defaults() error {
	if _, ok := ppu.mutation.UpdatedAt(); !ok {
		if purchasepayment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasepayment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasepayment.UpdateDefaultUpdatedAt()
		ppu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ppu *PurchasePaymentUpdate) check() error {
	if v, ok := ppu.mutation.Status(); ok {
		if err := purchasepayment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PurchasePayment.status": %w`, err)}
		}
	}
	if v, ok := ppu.mutation.Payway(); ok {
		if err := purchasepayment.PaywayValidator(v); err != nil {
			return &ValidationError{Name: "payway", err: fmt.Errorf(`ent: validator failed for field "PurchasePayment.payway": %w`, err)}
		}
	}
	if ppu.mutation.RiderCleared() && len(ppu.mutation.RiderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchasePayment.rider"`)
	}
	if ppu.mutation.GoodsCleared() && len(ppu.mutation.GoodsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchasePayment.goods"`)
	}
	if ppu.mutation.OrderCleared() && len(ppu.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchasePayment.order"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ppu *PurchasePaymentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PurchasePaymentUpdate {
	ppu.modifiers = append(ppu.modifiers, modifiers...)
	return ppu
}

func (ppu *PurchasePaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(purchasepayment.Table, purchasepayment.Columns, sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasepayment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.DeletedAt(); ok {
		_spec.SetField(purchasepayment.FieldDeletedAt, field.TypeTime, value)
	}
	if ppu.mutation.DeletedAtCleared() {
		_spec.ClearField(purchasepayment.FieldDeletedAt, field.TypeTime)
	}
	if ppu.mutation.CreatorCleared() {
		_spec.ClearField(purchasepayment.FieldCreator, field.TypeJSON)
	}
	if value, ok := ppu.mutation.LastModifier(); ok {
		_spec.SetField(purchasepayment.FieldLastModifier, field.TypeJSON, value)
	}
	if ppu.mutation.LastModifierCleared() {
		_spec.ClearField(purchasepayment.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ppu.mutation.Remark(); ok {
		_spec.SetField(purchasepayment.FieldRemark, field.TypeString, value)
	}
	if ppu.mutation.RemarkCleared() {
		_spec.ClearField(purchasepayment.FieldRemark, field.TypeString)
	}
	if value, ok := ppu.mutation.OutTradeNo(); ok {
		_spec.SetField(purchasepayment.FieldOutTradeNo, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Index(); ok {
		_spec.SetField(purchasepayment.FieldIndex, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.AddedIndex(); ok {
		_spec.AddField(purchasepayment.FieldIndex, field.TypeInt, value)
	}
	if value, ok := ppu.mutation.Status(); ok {
		_spec.SetField(purchasepayment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ppu.mutation.Payway(); ok {
		_spec.SetField(purchasepayment.FieldPayway, field.TypeEnum, value)
	}
	if ppu.mutation.PaywayCleared() {
		_spec.ClearField(purchasepayment.FieldPayway, field.TypeEnum)
	}
	if value, ok := ppu.mutation.Total(); ok {
		_spec.SetField(purchasepayment.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedTotal(); ok {
		_spec.AddField(purchasepayment.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.Amount(); ok {
		_spec.SetField(purchasepayment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedAmount(); ok {
		_spec.AddField(purchasepayment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.Forfeit(); ok {
		_spec.SetField(purchasepayment.FieldForfeit, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.AddedForfeit(); ok {
		_spec.AddField(purchasepayment.FieldForfeit, field.TypeFloat64, value)
	}
	if value, ok := ppu.mutation.BillingDate(); ok {
		_spec.SetField(purchasepayment.FieldBillingDate, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.PaymentDate(); ok {
		_spec.SetField(purchasepayment.FieldPaymentDate, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.TradeNo(); ok {
		_spec.SetField(purchasepayment.FieldTradeNo, field.TypeString, value)
	}
	if ppu.mutation.TradeNoCleared() {
		_spec.ClearField(purchasepayment.FieldTradeNo, field.TypeString)
	}
	if ppu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.RiderTable,
			Columns: []string{purchasepayment.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.RiderTable,
			Columns: []string{purchasepayment.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.GoodsTable,
			Columns: []string{purchasepayment.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.GoodsTable,
			Columns: []string{purchasepayment.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.OrderTable,
			Columns: []string{purchasepayment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.OrderTable,
			Columns: []string{purchasepayment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ppu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchasepayment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// PurchasePaymentUpdateOne is the builder for updating a single PurchasePayment entity.
type PurchasePaymentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PurchasePaymentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ppuo *PurchasePaymentUpdateOne) SetUpdatedAt(t time.Time) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetUpdatedAt(t)
	return ppuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ppuo *PurchasePaymentUpdateOne) SetDeletedAt(t time.Time) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetDeletedAt(t)
	return ppuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableDeletedAt(t *time.Time) *PurchasePaymentUpdateOne {
	if t != nil {
		ppuo.SetDeletedAt(*t)
	}
	return ppuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ppuo *PurchasePaymentUpdateOne) ClearDeletedAt() *PurchasePaymentUpdateOne {
	ppuo.mutation.ClearDeletedAt()
	return ppuo
}

// SetLastModifier sets the "last_modifier" field.
func (ppuo *PurchasePaymentUpdateOne) SetLastModifier(m *model.Modifier) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetLastModifier(m)
	return ppuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ppuo *PurchasePaymentUpdateOne) ClearLastModifier() *PurchasePaymentUpdateOne {
	ppuo.mutation.ClearLastModifier()
	return ppuo
}

// SetRemark sets the "remark" field.
func (ppuo *PurchasePaymentUpdateOne) SetRemark(s string) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetRemark(s)
	return ppuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableRemark(s *string) *PurchasePaymentUpdateOne {
	if s != nil {
		ppuo.SetRemark(*s)
	}
	return ppuo
}

// ClearRemark clears the value of the "remark" field.
func (ppuo *PurchasePaymentUpdateOne) ClearRemark() *PurchasePaymentUpdateOne {
	ppuo.mutation.ClearRemark()
	return ppuo
}

// SetRiderID sets the "rider_id" field.
func (ppuo *PurchasePaymentUpdateOne) SetRiderID(u uint64) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetRiderID(u)
	return ppuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableRiderID(u *uint64) *PurchasePaymentUpdateOne {
	if u != nil {
		ppuo.SetRiderID(*u)
	}
	return ppuo
}

// SetGoodsID sets the "goods_id" field.
func (ppuo *PurchasePaymentUpdateOne) SetGoodsID(u uint64) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetGoodsID(u)
	return ppuo
}

// SetNillableGoodsID sets the "goods_id" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableGoodsID(u *uint64) *PurchasePaymentUpdateOne {
	if u != nil {
		ppuo.SetGoodsID(*u)
	}
	return ppuo
}

// SetOrderID sets the "order_id" field.
func (ppuo *PurchasePaymentUpdateOne) SetOrderID(u uint64) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetOrderID(u)
	return ppuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableOrderID(u *uint64) *PurchasePaymentUpdateOne {
	if u != nil {
		ppuo.SetOrderID(*u)
	}
	return ppuo
}

// SetOutTradeNo sets the "out_trade_no" field.
func (ppuo *PurchasePaymentUpdateOne) SetOutTradeNo(s string) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetOutTradeNo(s)
	return ppuo
}

// SetNillableOutTradeNo sets the "out_trade_no" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableOutTradeNo(s *string) *PurchasePaymentUpdateOne {
	if s != nil {
		ppuo.SetOutTradeNo(*s)
	}
	return ppuo
}

// SetIndex sets the "index" field.
func (ppuo *PurchasePaymentUpdateOne) SetIndex(i int) *PurchasePaymentUpdateOne {
	ppuo.mutation.ResetIndex()
	ppuo.mutation.SetIndex(i)
	return ppuo
}

// SetNillableIndex sets the "index" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableIndex(i *int) *PurchasePaymentUpdateOne {
	if i != nil {
		ppuo.SetIndex(*i)
	}
	return ppuo
}

// AddIndex adds i to the "index" field.
func (ppuo *PurchasePaymentUpdateOne) AddIndex(i int) *PurchasePaymentUpdateOne {
	ppuo.mutation.AddIndex(i)
	return ppuo
}

// SetStatus sets the "status" field.
func (ppuo *PurchasePaymentUpdateOne) SetStatus(pu purchasepayment.Status) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetStatus(pu)
	return ppuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableStatus(pu *purchasepayment.Status) *PurchasePaymentUpdateOne {
	if pu != nil {
		ppuo.SetStatus(*pu)
	}
	return ppuo
}

// SetPayway sets the "payway" field.
func (ppuo *PurchasePaymentUpdateOne) SetPayway(pu purchasepayment.Payway) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetPayway(pu)
	return ppuo
}

// SetNillablePayway sets the "payway" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillablePayway(pu *purchasepayment.Payway) *PurchasePaymentUpdateOne {
	if pu != nil {
		ppuo.SetPayway(*pu)
	}
	return ppuo
}

// ClearPayway clears the value of the "payway" field.
func (ppuo *PurchasePaymentUpdateOne) ClearPayway() *PurchasePaymentUpdateOne {
	ppuo.mutation.ClearPayway()
	return ppuo
}

// SetTotal sets the "total" field.
func (ppuo *PurchasePaymentUpdateOne) SetTotal(f float64) *PurchasePaymentUpdateOne {
	ppuo.mutation.ResetTotal()
	ppuo.mutation.SetTotal(f)
	return ppuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableTotal(f *float64) *PurchasePaymentUpdateOne {
	if f != nil {
		ppuo.SetTotal(*f)
	}
	return ppuo
}

// AddTotal adds f to the "total" field.
func (ppuo *PurchasePaymentUpdateOne) AddTotal(f float64) *PurchasePaymentUpdateOne {
	ppuo.mutation.AddTotal(f)
	return ppuo
}

// SetAmount sets the "amount" field.
func (ppuo *PurchasePaymentUpdateOne) SetAmount(f float64) *PurchasePaymentUpdateOne {
	ppuo.mutation.ResetAmount()
	ppuo.mutation.SetAmount(f)
	return ppuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableAmount(f *float64) *PurchasePaymentUpdateOne {
	if f != nil {
		ppuo.SetAmount(*f)
	}
	return ppuo
}

// AddAmount adds f to the "amount" field.
func (ppuo *PurchasePaymentUpdateOne) AddAmount(f float64) *PurchasePaymentUpdateOne {
	ppuo.mutation.AddAmount(f)
	return ppuo
}

// SetForfeit sets the "forfeit" field.
func (ppuo *PurchasePaymentUpdateOne) SetForfeit(f float64) *PurchasePaymentUpdateOne {
	ppuo.mutation.ResetForfeit()
	ppuo.mutation.SetForfeit(f)
	return ppuo
}

// SetNillableForfeit sets the "forfeit" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableForfeit(f *float64) *PurchasePaymentUpdateOne {
	if f != nil {
		ppuo.SetForfeit(*f)
	}
	return ppuo
}

// AddForfeit adds f to the "forfeit" field.
func (ppuo *PurchasePaymentUpdateOne) AddForfeit(f float64) *PurchasePaymentUpdateOne {
	ppuo.mutation.AddForfeit(f)
	return ppuo
}

// SetBillingDate sets the "billing_date" field.
func (ppuo *PurchasePaymentUpdateOne) SetBillingDate(t time.Time) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetBillingDate(t)
	return ppuo
}

// SetNillableBillingDate sets the "billing_date" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableBillingDate(t *time.Time) *PurchasePaymentUpdateOne {
	if t != nil {
		ppuo.SetBillingDate(*t)
	}
	return ppuo
}

// SetPaymentDate sets the "payment_date" field.
func (ppuo *PurchasePaymentUpdateOne) SetPaymentDate(t time.Time) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetPaymentDate(t)
	return ppuo
}

// SetNillablePaymentDate sets the "payment_date" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillablePaymentDate(t *time.Time) *PurchasePaymentUpdateOne {
	if t != nil {
		ppuo.SetPaymentDate(*t)
	}
	return ppuo
}

// SetTradeNo sets the "trade_no" field.
func (ppuo *PurchasePaymentUpdateOne) SetTradeNo(s string) *PurchasePaymentUpdateOne {
	ppuo.mutation.SetTradeNo(s)
	return ppuo
}

// SetNillableTradeNo sets the "trade_no" field if the given value is not nil.
func (ppuo *PurchasePaymentUpdateOne) SetNillableTradeNo(s *string) *PurchasePaymentUpdateOne {
	if s != nil {
		ppuo.SetTradeNo(*s)
	}
	return ppuo
}

// ClearTradeNo clears the value of the "trade_no" field.
func (ppuo *PurchasePaymentUpdateOne) ClearTradeNo() *PurchasePaymentUpdateOne {
	ppuo.mutation.ClearTradeNo()
	return ppuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (ppuo *PurchasePaymentUpdateOne) SetRider(r *Rider) *PurchasePaymentUpdateOne {
	return ppuo.SetRiderID(r.ID)
}

// SetGoods sets the "goods" edge to the Goods entity.
func (ppuo *PurchasePaymentUpdateOne) SetGoods(g *Goods) *PurchasePaymentUpdateOne {
	return ppuo.SetGoodsID(g.ID)
}

// SetOrder sets the "order" edge to the PurchaseOrder entity.
func (ppuo *PurchasePaymentUpdateOne) SetOrder(p *PurchaseOrder) *PurchasePaymentUpdateOne {
	return ppuo.SetOrderID(p.ID)
}

// Mutation returns the PurchasePaymentMutation object of the builder.
func (ppuo *PurchasePaymentUpdateOne) Mutation() *PurchasePaymentMutation {
	return ppuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ppuo *PurchasePaymentUpdateOne) ClearRider() *PurchasePaymentUpdateOne {
	ppuo.mutation.ClearRider()
	return ppuo
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (ppuo *PurchasePaymentUpdateOne) ClearGoods() *PurchasePaymentUpdateOne {
	ppuo.mutation.ClearGoods()
	return ppuo
}

// ClearOrder clears the "order" edge to the PurchaseOrder entity.
func (ppuo *PurchasePaymentUpdateOne) ClearOrder() *PurchasePaymentUpdateOne {
	ppuo.mutation.ClearOrder()
	return ppuo
}

// Where appends a list predicates to the PurchasePaymentUpdate builder.
func (ppuo *PurchasePaymentUpdateOne) Where(ps ...predicate.PurchasePayment) *PurchasePaymentUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PurchasePaymentUpdateOne) Select(field string, fields ...string) *PurchasePaymentUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PurchasePayment entity.
func (ppuo *PurchasePaymentUpdateOne) Save(ctx context.Context) (*PurchasePayment, error) {
	if err := ppuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PurchasePaymentUpdateOne) SaveX(ctx context.Context) *PurchasePayment {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PurchasePaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PurchasePaymentUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *PurchasePaymentUpdateOne) defaults() error {
	if _, ok := ppuo.mutation.UpdatedAt(); !ok {
		if purchasepayment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasepayment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasepayment.UpdateDefaultUpdatedAt()
		ppuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *PurchasePaymentUpdateOne) check() error {
	if v, ok := ppuo.mutation.Status(); ok {
		if err := purchasepayment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PurchasePayment.status": %w`, err)}
		}
	}
	if v, ok := ppuo.mutation.Payway(); ok {
		if err := purchasepayment.PaywayValidator(v); err != nil {
			return &ValidationError{Name: "payway", err: fmt.Errorf(`ent: validator failed for field "PurchasePayment.payway": %w`, err)}
		}
	}
	if ppuo.mutation.RiderCleared() && len(ppuo.mutation.RiderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchasePayment.rider"`)
	}
	if ppuo.mutation.GoodsCleared() && len(ppuo.mutation.GoodsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchasePayment.goods"`)
	}
	if ppuo.mutation.OrderCleared() && len(ppuo.mutation.OrderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchasePayment.order"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ppuo *PurchasePaymentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PurchasePaymentUpdateOne {
	ppuo.modifiers = append(ppuo.modifiers, modifiers...)
	return ppuo
}

func (ppuo *PurchasePaymentUpdateOne) sqlSave(ctx context.Context) (_node *PurchasePayment, err error) {
	if err := ppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(purchasepayment.Table, purchasepayment.Columns, sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PurchasePayment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purchasepayment.FieldID)
		for _, f := range fields {
			if !purchasepayment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != purchasepayment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasepayment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.DeletedAt(); ok {
		_spec.SetField(purchasepayment.FieldDeletedAt, field.TypeTime, value)
	}
	if ppuo.mutation.DeletedAtCleared() {
		_spec.ClearField(purchasepayment.FieldDeletedAt, field.TypeTime)
	}
	if ppuo.mutation.CreatorCleared() {
		_spec.ClearField(purchasepayment.FieldCreator, field.TypeJSON)
	}
	if value, ok := ppuo.mutation.LastModifier(); ok {
		_spec.SetField(purchasepayment.FieldLastModifier, field.TypeJSON, value)
	}
	if ppuo.mutation.LastModifierCleared() {
		_spec.ClearField(purchasepayment.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ppuo.mutation.Remark(); ok {
		_spec.SetField(purchasepayment.FieldRemark, field.TypeString, value)
	}
	if ppuo.mutation.RemarkCleared() {
		_spec.ClearField(purchasepayment.FieldRemark, field.TypeString)
	}
	if value, ok := ppuo.mutation.OutTradeNo(); ok {
		_spec.SetField(purchasepayment.FieldOutTradeNo, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Index(); ok {
		_spec.SetField(purchasepayment.FieldIndex, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.AddedIndex(); ok {
		_spec.AddField(purchasepayment.FieldIndex, field.TypeInt, value)
	}
	if value, ok := ppuo.mutation.Status(); ok {
		_spec.SetField(purchasepayment.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ppuo.mutation.Payway(); ok {
		_spec.SetField(purchasepayment.FieldPayway, field.TypeEnum, value)
	}
	if ppuo.mutation.PaywayCleared() {
		_spec.ClearField(purchasepayment.FieldPayway, field.TypeEnum)
	}
	if value, ok := ppuo.mutation.Total(); ok {
		_spec.SetField(purchasepayment.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedTotal(); ok {
		_spec.AddField(purchasepayment.FieldTotal, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.Amount(); ok {
		_spec.SetField(purchasepayment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedAmount(); ok {
		_spec.AddField(purchasepayment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.Forfeit(); ok {
		_spec.SetField(purchasepayment.FieldForfeit, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.AddedForfeit(); ok {
		_spec.AddField(purchasepayment.FieldForfeit, field.TypeFloat64, value)
	}
	if value, ok := ppuo.mutation.BillingDate(); ok {
		_spec.SetField(purchasepayment.FieldBillingDate, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.PaymentDate(); ok {
		_spec.SetField(purchasepayment.FieldPaymentDate, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.TradeNo(); ok {
		_spec.SetField(purchasepayment.FieldTradeNo, field.TypeString, value)
	}
	if ppuo.mutation.TradeNoCleared() {
		_spec.ClearField(purchasepayment.FieldTradeNo, field.TypeString)
	}
	if ppuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.RiderTable,
			Columns: []string{purchasepayment.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.RiderTable,
			Columns: []string{purchasepayment.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.GoodsTable,
			Columns: []string{purchasepayment.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.GoodsTable,
			Columns: []string{purchasepayment.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.OrderTable,
			Columns: []string{purchasepayment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.OrderTable,
			Columns: []string{purchasepayment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ppuo.modifiers...)
	_node = &PurchasePayment{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchasepayment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
