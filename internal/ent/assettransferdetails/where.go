// Code generated by ent, DO NOT EDIT.

package assettransferdetails

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldRemark, v))
}

// TransferID applies equality check predicate on the "transfer_id" field. It's identical to TransferIDEQ.
func TransferID(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldTransferID, v))
}

// IsIn applies equality check predicate on the "is_in" field. It's identical to IsInEQ.
func IsIn(v bool) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldIsIn, v))
}

// InOperateID applies equality check predicate on the "in_operate_id" field. It's identical to InOperateIDEQ.
func InOperateID(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldInOperateID, v))
}

// InOperateType applies equality check predicate on the "in_operate_type" field. It's identical to InOperateTypeEQ.
func InOperateType(v uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldInOperateType, v))
}

// InTimeAt applies equality check predicate on the "in_time_at" field. It's identical to InTimeAtEQ.
func InTimeAt(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldInTimeAt, v))
}

// AssetID applies equality check predicate on the "asset_id" field. It's identical to AssetIDEQ.
func AssetID(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldAssetID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldContainsFold(FieldRemark, v))
}

// TransferIDEQ applies the EQ predicate on the "transfer_id" field.
func TransferIDEQ(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldTransferID, v))
}

// TransferIDNEQ applies the NEQ predicate on the "transfer_id" field.
func TransferIDNEQ(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldTransferID, v))
}

// TransferIDIn applies the In predicate on the "transfer_id" field.
func TransferIDIn(vs ...uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldTransferID, vs...))
}

// TransferIDNotIn applies the NotIn predicate on the "transfer_id" field.
func TransferIDNotIn(vs ...uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldTransferID, vs...))
}

// TransferIDIsNil applies the IsNil predicate on the "transfer_id" field.
func TransferIDIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldTransferID))
}

// TransferIDNotNil applies the NotNil predicate on the "transfer_id" field.
func TransferIDNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldTransferID))
}

// IsInEQ applies the EQ predicate on the "is_in" field.
func IsInEQ(v bool) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldIsIn, v))
}

// IsInNEQ applies the NEQ predicate on the "is_in" field.
func IsInNEQ(v bool) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldIsIn, v))
}

// InOperateIDEQ applies the EQ predicate on the "in_operate_id" field.
func InOperateIDEQ(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldInOperateID, v))
}

// InOperateIDNEQ applies the NEQ predicate on the "in_operate_id" field.
func InOperateIDNEQ(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldInOperateID, v))
}

// InOperateIDIn applies the In predicate on the "in_operate_id" field.
func InOperateIDIn(vs ...uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldInOperateID, vs...))
}

// InOperateIDNotIn applies the NotIn predicate on the "in_operate_id" field.
func InOperateIDNotIn(vs ...uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldInOperateID, vs...))
}

// InOperateIDIsNil applies the IsNil predicate on the "in_operate_id" field.
func InOperateIDIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldInOperateID))
}

// InOperateIDNotNil applies the NotNil predicate on the "in_operate_id" field.
func InOperateIDNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldInOperateID))
}

// InOperateTypeEQ applies the EQ predicate on the "in_operate_type" field.
func InOperateTypeEQ(v uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldInOperateType, v))
}

// InOperateTypeNEQ applies the NEQ predicate on the "in_operate_type" field.
func InOperateTypeNEQ(v uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldInOperateType, v))
}

// InOperateTypeIn applies the In predicate on the "in_operate_type" field.
func InOperateTypeIn(vs ...uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldInOperateType, vs...))
}

// InOperateTypeNotIn applies the NotIn predicate on the "in_operate_type" field.
func InOperateTypeNotIn(vs ...uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldInOperateType, vs...))
}

// InOperateTypeGT applies the GT predicate on the "in_operate_type" field.
func InOperateTypeGT(v uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGT(FieldInOperateType, v))
}

// InOperateTypeGTE applies the GTE predicate on the "in_operate_type" field.
func InOperateTypeGTE(v uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGTE(FieldInOperateType, v))
}

// InOperateTypeLT applies the LT predicate on the "in_operate_type" field.
func InOperateTypeLT(v uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLT(FieldInOperateType, v))
}

// InOperateTypeLTE applies the LTE predicate on the "in_operate_type" field.
func InOperateTypeLTE(v uint8) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLTE(FieldInOperateType, v))
}

// InOperateTypeIsNil applies the IsNil predicate on the "in_operate_type" field.
func InOperateTypeIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldInOperateType))
}

// InOperateTypeNotNil applies the NotNil predicate on the "in_operate_type" field.
func InOperateTypeNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldInOperateType))
}

// InTimeAtEQ applies the EQ predicate on the "in_time_at" field.
func InTimeAtEQ(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldInTimeAt, v))
}

// InTimeAtNEQ applies the NEQ predicate on the "in_time_at" field.
func InTimeAtNEQ(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldInTimeAt, v))
}

// InTimeAtIn applies the In predicate on the "in_time_at" field.
func InTimeAtIn(vs ...time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldInTimeAt, vs...))
}

// InTimeAtNotIn applies the NotIn predicate on the "in_time_at" field.
func InTimeAtNotIn(vs ...time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldInTimeAt, vs...))
}

// InTimeAtGT applies the GT predicate on the "in_time_at" field.
func InTimeAtGT(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGT(FieldInTimeAt, v))
}

// InTimeAtGTE applies the GTE predicate on the "in_time_at" field.
func InTimeAtGTE(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldGTE(FieldInTimeAt, v))
}

// InTimeAtLT applies the LT predicate on the "in_time_at" field.
func InTimeAtLT(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLT(FieldInTimeAt, v))
}

// InTimeAtLTE applies the LTE predicate on the "in_time_at" field.
func InTimeAtLTE(v time.Time) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldLTE(FieldInTimeAt, v))
}

// InTimeAtIsNil applies the IsNil predicate on the "in_time_at" field.
func InTimeAtIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldInTimeAt))
}

// InTimeAtNotNil applies the NotNil predicate on the "in_time_at" field.
func InTimeAtNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldInTimeAt))
}

// AssetIDEQ applies the EQ predicate on the "asset_id" field.
func AssetIDEQ(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldEQ(FieldAssetID, v))
}

// AssetIDNEQ applies the NEQ predicate on the "asset_id" field.
func AssetIDNEQ(v uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNEQ(FieldAssetID, v))
}

// AssetIDIn applies the In predicate on the "asset_id" field.
func AssetIDIn(vs ...uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIn(FieldAssetID, vs...))
}

// AssetIDNotIn applies the NotIn predicate on the "asset_id" field.
func AssetIDNotIn(vs ...uint64) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotIn(FieldAssetID, vs...))
}

// AssetIDIsNil applies the IsNil predicate on the "asset_id" field.
func AssetIDIsNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldIsNull(FieldAssetID))
}

// AssetIDNotNil applies the NotNil predicate on the "asset_id" field.
func AssetIDNotNil() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.FieldNotNull(FieldAssetID))
}

// HasTransfer applies the HasEdge predicate on the "transfer" edge.
func HasTransfer() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TransferTable, TransferColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransferWith applies the HasEdge predicate on the "transfer" edge with a given conditions (other predicates).
func HasTransferWith(preds ...predicate.AssetTransfer) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := newTransferStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInOperateManager applies the HasEdge predicate on the "in_operate_manager" edge.
func HasInOperateManager() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InOperateManagerTable, InOperateManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInOperateManagerWith applies the HasEdge predicate on the "in_operate_manager" edge with a given conditions (other predicates).
func HasInOperateManagerWith(preds ...predicate.Manager) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := newInOperateManagerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInOperateStore applies the HasEdge predicate on the "in_operate_store" edge.
func HasInOperateStore() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InOperateStoreTable, InOperateStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInOperateStoreWith applies the HasEdge predicate on the "in_operate_store" edge with a given conditions (other predicates).
func HasInOperateStoreWith(preds ...predicate.Store) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := newInOperateStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInOperateAgent applies the HasEdge predicate on the "in_operate_agent" edge.
func HasInOperateAgent() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InOperateAgentTable, InOperateAgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInOperateAgentWith applies the HasEdge predicate on the "in_operate_agent" edge with a given conditions (other predicates).
func HasInOperateAgentWith(preds ...predicate.Agent) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := newInOperateAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInOperateMaintainer applies the HasEdge predicate on the "in_operate_maintainer" edge.
func HasInOperateMaintainer() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InOperateMaintainerTable, InOperateMaintainerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInOperateMaintainerWith applies the HasEdge predicate on the "in_operate_maintainer" edge with a given conditions (other predicates).
func HasInOperateMaintainerWith(preds ...predicate.Maintainer) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := newInOperateMaintainerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInOperateCabinet applies the HasEdge predicate on the "in_operate_cabinet" edge.
func HasInOperateCabinet() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InOperateCabinetTable, InOperateCabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInOperateCabinetWith applies the HasEdge predicate on the "in_operate_cabinet" edge with a given conditions (other predicates).
func HasInOperateCabinetWith(preds ...predicate.Cabinet) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := newInOperateCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInOperateRider applies the HasEdge predicate on the "in_operate_rider" edge.
func HasInOperateRider() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InOperateRiderTable, InOperateRiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInOperateRiderWith applies the HasEdge predicate on the "in_operate_rider" edge with a given conditions (other predicates).
func HasInOperateRiderWith(preds ...predicate.Rider) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := newInOperateRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsset applies the HasEdge predicate on the "asset" edge.
func HasAsset() predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetWith applies the HasEdge predicate on the "asset" edge with a given conditions (other predicates).
func HasAssetWith(preds ...predicate.Asset) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(func(s *sql.Selector) {
		step := newAssetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetTransferDetails) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetTransferDetails) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetTransferDetails) predicate.AssetTransferDetails {
	return predicate.AssetTransferDetails(sql.NotPredicates(p))
}
