// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionwithdrawal"
)

// PromotionWithdrawalCreate is the builder for creating a PromotionWithdrawal entity.
type PromotionWithdrawalCreate struct {
	config
	mutation *PromotionWithdrawalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pwc *PromotionWithdrawalCreate) SetCreatedAt(t time.Time) *PromotionWithdrawalCreate {
	pwc.mutation.SetCreatedAt(t)
	return pwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableCreatedAt(t *time.Time) *PromotionWithdrawalCreate {
	if t != nil {
		pwc.SetCreatedAt(*t)
	}
	return pwc
}

// SetUpdatedAt sets the "updated_at" field.
func (pwc *PromotionWithdrawalCreate) SetUpdatedAt(t time.Time) *PromotionWithdrawalCreate {
	pwc.mutation.SetUpdatedAt(t)
	return pwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableUpdatedAt(t *time.Time) *PromotionWithdrawalCreate {
	if t != nil {
		pwc.SetUpdatedAt(*t)
	}
	return pwc
}

// SetDeletedAt sets the "deleted_at" field.
func (pwc *PromotionWithdrawalCreate) SetDeletedAt(t time.Time) *PromotionWithdrawalCreate {
	pwc.mutation.SetDeletedAt(t)
	return pwc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableDeletedAt(t *time.Time) *PromotionWithdrawalCreate {
	if t != nil {
		pwc.SetDeletedAt(*t)
	}
	return pwc
}

// SetCreator sets the "creator" field.
func (pwc *PromotionWithdrawalCreate) SetCreator(m *model.Modifier) *PromotionWithdrawalCreate {
	pwc.mutation.SetCreator(m)
	return pwc
}

// SetLastModifier sets the "last_modifier" field.
func (pwc *PromotionWithdrawalCreate) SetLastModifier(m *model.Modifier) *PromotionWithdrawalCreate {
	pwc.mutation.SetLastModifier(m)
	return pwc
}

// SetRemark sets the "remark" field.
func (pwc *PromotionWithdrawalCreate) SetRemark(s string) *PromotionWithdrawalCreate {
	pwc.mutation.SetRemark(s)
	return pwc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableRemark(s *string) *PromotionWithdrawalCreate {
	if s != nil {
		pwc.SetRemark(*s)
	}
	return pwc
}

// SetMemberID sets the "member_id" field.
func (pwc *PromotionWithdrawalCreate) SetMemberID(u uint64) *PromotionWithdrawalCreate {
	pwc.mutation.SetMemberID(u)
	return pwc
}

// SetStatus sets the "status" field.
func (pwc *PromotionWithdrawalCreate) SetStatus(u uint8) *PromotionWithdrawalCreate {
	pwc.mutation.SetStatus(u)
	return pwc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableStatus(u *uint8) *PromotionWithdrawalCreate {
	if u != nil {
		pwc.SetStatus(*u)
	}
	return pwc
}

// SetApplyAmount sets the "apply_amount" field.
func (pwc *PromotionWithdrawalCreate) SetApplyAmount(f float64) *PromotionWithdrawalCreate {
	pwc.mutation.SetApplyAmount(f)
	return pwc
}

// SetNillableApplyAmount sets the "apply_amount" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableApplyAmount(f *float64) *PromotionWithdrawalCreate {
	if f != nil {
		pwc.SetApplyAmount(*f)
	}
	return pwc
}

// SetAmount sets the "amount" field.
func (pwc *PromotionWithdrawalCreate) SetAmount(f float64) *PromotionWithdrawalCreate {
	pwc.mutation.SetAmount(f)
	return pwc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableAmount(f *float64) *PromotionWithdrawalCreate {
	if f != nil {
		pwc.SetAmount(*f)
	}
	return pwc
}

// SetFee sets the "fee" field.
func (pwc *PromotionWithdrawalCreate) SetFee(f float64) *PromotionWithdrawalCreate {
	pwc.mutation.SetFee(f)
	return pwc
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableFee(f *float64) *PromotionWithdrawalCreate {
	if f != nil {
		pwc.SetFee(*f)
	}
	return pwc
}

// SetTex sets the "tex" field.
func (pwc *PromotionWithdrawalCreate) SetTex(f float64) *PromotionWithdrawalCreate {
	pwc.mutation.SetTex(f)
	return pwc
}

// SetNillableTex sets the "tex" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableTex(f *float64) *PromotionWithdrawalCreate {
	if f != nil {
		pwc.SetTex(*f)
	}
	return pwc
}

// SetMethod sets the "method" field.
func (pwc *PromotionWithdrawalCreate) SetMethod(u uint8) *PromotionWithdrawalCreate {
	pwc.mutation.SetMethod(u)
	return pwc
}

// SetAccountID sets the "account_id" field.
func (pwc *PromotionWithdrawalCreate) SetAccountID(u uint64) *PromotionWithdrawalCreate {
	pwc.mutation.SetAccountID(u)
	return pwc
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableAccountID(u *uint64) *PromotionWithdrawalCreate {
	if u != nil {
		pwc.SetAccountID(*u)
	}
	return pwc
}

// SetApplyTime sets the "apply_time" field.
func (pwc *PromotionWithdrawalCreate) SetApplyTime(t time.Time) *PromotionWithdrawalCreate {
	pwc.mutation.SetApplyTime(t)
	return pwc
}

// SetNillableApplyTime sets the "apply_time" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableApplyTime(t *time.Time) *PromotionWithdrawalCreate {
	if t != nil {
		pwc.SetApplyTime(*t)
	}
	return pwc
}

// SetReviewTime sets the "review_time" field.
func (pwc *PromotionWithdrawalCreate) SetReviewTime(t time.Time) *PromotionWithdrawalCreate {
	pwc.mutation.SetReviewTime(t)
	return pwc
}

// SetNillableReviewTime sets the "review_time" field if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableReviewTime(t *time.Time) *PromotionWithdrawalCreate {
	if t != nil {
		pwc.SetReviewTime(*t)
	}
	return pwc
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pwc *PromotionWithdrawalCreate) SetMember(p *PromotionMember) *PromotionWithdrawalCreate {
	return pwc.SetMemberID(p.ID)
}

// SetCardsID sets the "cards" edge to the PromotionBankCard entity by ID.
func (pwc *PromotionWithdrawalCreate) SetCardsID(id uint64) *PromotionWithdrawalCreate {
	pwc.mutation.SetCardsID(id)
	return pwc
}

// SetNillableCardsID sets the "cards" edge to the PromotionBankCard entity by ID if the given value is not nil.
func (pwc *PromotionWithdrawalCreate) SetNillableCardsID(id *uint64) *PromotionWithdrawalCreate {
	if id != nil {
		pwc = pwc.SetCardsID(*id)
	}
	return pwc
}

// SetCards sets the "cards" edge to the PromotionBankCard entity.
func (pwc *PromotionWithdrawalCreate) SetCards(p *PromotionBankCard) *PromotionWithdrawalCreate {
	return pwc.SetCardsID(p.ID)
}

// Mutation returns the PromotionWithdrawalMutation object of the builder.
func (pwc *PromotionWithdrawalCreate) Mutation() *PromotionWithdrawalMutation {
	return pwc.mutation
}

// Save creates the PromotionWithdrawal in the database.
func (pwc *PromotionWithdrawalCreate) Save(ctx context.Context) (*PromotionWithdrawal, error) {
	if err := pwc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pwc.sqlSave, pwc.mutation, pwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pwc *PromotionWithdrawalCreate) SaveX(ctx context.Context) *PromotionWithdrawal {
	v, err := pwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pwc *PromotionWithdrawalCreate) Exec(ctx context.Context) error {
	_, err := pwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwc *PromotionWithdrawalCreate) ExecX(ctx context.Context) {
	if err := pwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwc *PromotionWithdrawalCreate) defaults() error {
	if _, ok := pwc.mutation.CreatedAt(); !ok {
		if promotionwithdrawal.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionwithdrawal.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionwithdrawal.DefaultCreatedAt()
		pwc.mutation.SetCreatedAt(v)
	}
	if _, ok := pwc.mutation.UpdatedAt(); !ok {
		if promotionwithdrawal.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionwithdrawal.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionwithdrawal.DefaultUpdatedAt()
		pwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pwc.mutation.Status(); !ok {
		v := promotionwithdrawal.DefaultStatus
		pwc.mutation.SetStatus(v)
	}
	if _, ok := pwc.mutation.ApplyAmount(); !ok {
		v := promotionwithdrawal.DefaultApplyAmount
		pwc.mutation.SetApplyAmount(v)
	}
	if _, ok := pwc.mutation.Amount(); !ok {
		v := promotionwithdrawal.DefaultAmount
		pwc.mutation.SetAmount(v)
	}
	if _, ok := pwc.mutation.Fee(); !ok {
		v := promotionwithdrawal.DefaultFee
		pwc.mutation.SetFee(v)
	}
	if _, ok := pwc.mutation.Tex(); !ok {
		v := promotionwithdrawal.DefaultTex
		pwc.mutation.SetTex(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pwc *PromotionWithdrawalCreate) check() error {
	if _, ok := pwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionWithdrawal.created_at"`)}
	}
	if _, ok := pwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionWithdrawal.updated_at"`)}
	}
	if _, ok := pwc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "PromotionWithdrawal.member_id"`)}
	}
	if _, ok := pwc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PromotionWithdrawal.status"`)}
	}
	if _, ok := pwc.mutation.ApplyAmount(); !ok {
		return &ValidationError{Name: "apply_amount", err: errors.New(`ent: missing required field "PromotionWithdrawal.apply_amount"`)}
	}
	if _, ok := pwc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PromotionWithdrawal.amount"`)}
	}
	if _, ok := pwc.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "PromotionWithdrawal.fee"`)}
	}
	if _, ok := pwc.mutation.Tex(); !ok {
		return &ValidationError{Name: "tex", err: errors.New(`ent: missing required field "PromotionWithdrawal.tex"`)}
	}
	if _, ok := pwc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New(`ent: missing required field "PromotionWithdrawal.method"`)}
	}
	if len(pwc.mutation.MemberIDs()) == 0 {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "PromotionWithdrawal.member"`)}
	}
	return nil
}

func (pwc *PromotionWithdrawalCreate) sqlSave(ctx context.Context) (*PromotionWithdrawal, error) {
	if err := pwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pwc.mutation.id = &_node.ID
	pwc.mutation.done = true
	return _node, nil
}

func (pwc *PromotionWithdrawalCreate) createSpec() (*PromotionWithdrawal, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionWithdrawal{config: pwc.config}
		_spec = sqlgraph.NewCreateSpec(promotionwithdrawal.Table, sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pwc.conflict
	if value, ok := pwc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionwithdrawal.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pwc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionwithdrawal.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pwc.mutation.DeletedAt(); ok {
		_spec.SetField(promotionwithdrawal.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pwc.mutation.Creator(); ok {
		_spec.SetField(promotionwithdrawal.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pwc.mutation.LastModifier(); ok {
		_spec.SetField(promotionwithdrawal.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pwc.mutation.Remark(); ok {
		_spec.SetField(promotionwithdrawal.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pwc.mutation.Status(); ok {
		_spec.SetField(promotionwithdrawal.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := pwc.mutation.ApplyAmount(); ok {
		_spec.SetField(promotionwithdrawal.FieldApplyAmount, field.TypeFloat64, value)
		_node.ApplyAmount = value
	}
	if value, ok := pwc.mutation.Amount(); ok {
		_spec.SetField(promotionwithdrawal.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := pwc.mutation.Fee(); ok {
		_spec.SetField(promotionwithdrawal.FieldFee, field.TypeFloat64, value)
		_node.Fee = value
	}
	if value, ok := pwc.mutation.Tex(); ok {
		_spec.SetField(promotionwithdrawal.FieldTex, field.TypeFloat64, value)
		_node.Tex = value
	}
	if value, ok := pwc.mutation.Method(); ok {
		_spec.SetField(promotionwithdrawal.FieldMethod, field.TypeUint8, value)
		_node.Method = value
	}
	if value, ok := pwc.mutation.ApplyTime(); ok {
		_spec.SetField(promotionwithdrawal.FieldApplyTime, field.TypeTime, value)
		_node.ApplyTime = value
	}
	if value, ok := pwc.mutation.ReviewTime(); ok {
		_spec.SetField(promotionwithdrawal.FieldReviewTime, field.TypeTime, value)
		_node.ReviewTime = &value
	}
	if nodes := pwc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionwithdrawal.MemberTable,
			Columns: []string{promotionwithdrawal.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pwc.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionwithdrawal.CardsTable,
			Columns: []string{promotionwithdrawal.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionWithdrawal.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionWithdrawalUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pwc *PromotionWithdrawalCreate) OnConflict(opts ...sql.ConflictOption) *PromotionWithdrawalUpsertOne {
	pwc.conflict = opts
	return &PromotionWithdrawalUpsertOne{
		create: pwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionWithdrawal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pwc *PromotionWithdrawalCreate) OnConflictColumns(columns ...string) *PromotionWithdrawalUpsertOne {
	pwc.conflict = append(pwc.conflict, sql.ConflictColumns(columns...))
	return &PromotionWithdrawalUpsertOne{
		create: pwc,
	}
}

type (
	// PromotionWithdrawalUpsertOne is the builder for "upsert"-ing
	//  one PromotionWithdrawal node.
	PromotionWithdrawalUpsertOne struct {
		create *PromotionWithdrawalCreate
	}

	// PromotionWithdrawalUpsert is the "OnConflict" setter.
	PromotionWithdrawalUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionWithdrawalUpsert) SetUpdatedAt(v time.Time) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateUpdatedAt() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionWithdrawalUpsert) SetDeletedAt(v time.Time) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateDeletedAt() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionWithdrawalUpsert) ClearDeletedAt() *PromotionWithdrawalUpsert {
	u.SetNull(promotionwithdrawal.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionWithdrawalUpsert) SetLastModifier(v *model.Modifier) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateLastModifier() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionWithdrawalUpsert) ClearLastModifier() *PromotionWithdrawalUpsert {
	u.SetNull(promotionwithdrawal.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionWithdrawalUpsert) SetRemark(v string) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateRemark() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionWithdrawalUpsert) ClearRemark() *PromotionWithdrawalUpsert {
	u.SetNull(promotionwithdrawal.FieldRemark)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *PromotionWithdrawalUpsert) SetMemberID(v uint64) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateMemberID() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldMemberID)
	return u
}

// SetStatus sets the "status" field.
func (u *PromotionWithdrawalUpsert) SetStatus(v uint8) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateStatus() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PromotionWithdrawalUpsert) AddStatus(v uint8) *PromotionWithdrawalUpsert {
	u.Add(promotionwithdrawal.FieldStatus, v)
	return u
}

// SetApplyAmount sets the "apply_amount" field.
func (u *PromotionWithdrawalUpsert) SetApplyAmount(v float64) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldApplyAmount, v)
	return u
}

// UpdateApplyAmount sets the "apply_amount" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateApplyAmount() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldApplyAmount)
	return u
}

// AddApplyAmount adds v to the "apply_amount" field.
func (u *PromotionWithdrawalUpsert) AddApplyAmount(v float64) *PromotionWithdrawalUpsert {
	u.Add(promotionwithdrawal.FieldApplyAmount, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *PromotionWithdrawalUpsert) SetAmount(v float64) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateAmount() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *PromotionWithdrawalUpsert) AddAmount(v float64) *PromotionWithdrawalUpsert {
	u.Add(promotionwithdrawal.FieldAmount, v)
	return u
}

// SetFee sets the "fee" field.
func (u *PromotionWithdrawalUpsert) SetFee(v float64) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateFee() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *PromotionWithdrawalUpsert) AddFee(v float64) *PromotionWithdrawalUpsert {
	u.Add(promotionwithdrawal.FieldFee, v)
	return u
}

// SetTex sets the "tex" field.
func (u *PromotionWithdrawalUpsert) SetTex(v float64) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldTex, v)
	return u
}

// UpdateTex sets the "tex" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateTex() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldTex)
	return u
}

// AddTex adds v to the "tex" field.
func (u *PromotionWithdrawalUpsert) AddTex(v float64) *PromotionWithdrawalUpsert {
	u.Add(promotionwithdrawal.FieldTex, v)
	return u
}

// SetMethod sets the "method" field.
func (u *PromotionWithdrawalUpsert) SetMethod(v uint8) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldMethod, v)
	return u
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateMethod() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldMethod)
	return u
}

// AddMethod adds v to the "method" field.
func (u *PromotionWithdrawalUpsert) AddMethod(v uint8) *PromotionWithdrawalUpsert {
	u.Add(promotionwithdrawal.FieldMethod, v)
	return u
}

// SetAccountID sets the "account_id" field.
func (u *PromotionWithdrawalUpsert) SetAccountID(v uint64) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldAccountID, v)
	return u
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateAccountID() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldAccountID)
	return u
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PromotionWithdrawalUpsert) ClearAccountID() *PromotionWithdrawalUpsert {
	u.SetNull(promotionwithdrawal.FieldAccountID)
	return u
}

// SetApplyTime sets the "apply_time" field.
func (u *PromotionWithdrawalUpsert) SetApplyTime(v time.Time) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldApplyTime, v)
	return u
}

// UpdateApplyTime sets the "apply_time" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateApplyTime() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldApplyTime)
	return u
}

// ClearApplyTime clears the value of the "apply_time" field.
func (u *PromotionWithdrawalUpsert) ClearApplyTime() *PromotionWithdrawalUpsert {
	u.SetNull(promotionwithdrawal.FieldApplyTime)
	return u
}

// SetReviewTime sets the "review_time" field.
func (u *PromotionWithdrawalUpsert) SetReviewTime(v time.Time) *PromotionWithdrawalUpsert {
	u.Set(promotionwithdrawal.FieldReviewTime, v)
	return u
}

// UpdateReviewTime sets the "review_time" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsert) UpdateReviewTime() *PromotionWithdrawalUpsert {
	u.SetExcluded(promotionwithdrawal.FieldReviewTime)
	return u
}

// ClearReviewTime clears the value of the "review_time" field.
func (u *PromotionWithdrawalUpsert) ClearReviewTime() *PromotionWithdrawalUpsert {
	u.SetNull(promotionwithdrawal.FieldReviewTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionWithdrawal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionWithdrawalUpsertOne) UpdateNewValues() *PromotionWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionwithdrawal.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionwithdrawal.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionWithdrawal.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionWithdrawalUpsertOne) Ignore() *PromotionWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionWithdrawalUpsertOne) DoNothing() *PromotionWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionWithdrawalCreate.OnConflict
// documentation for more info.
func (u *PromotionWithdrawalUpsertOne) Update(set func(*PromotionWithdrawalUpsert)) *PromotionWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionWithdrawalUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionWithdrawalUpsertOne) SetUpdatedAt(v time.Time) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateUpdatedAt() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionWithdrawalUpsertOne) SetDeletedAt(v time.Time) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateDeletedAt() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionWithdrawalUpsertOne) ClearDeletedAt() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionWithdrawalUpsertOne) SetLastModifier(v *model.Modifier) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateLastModifier() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionWithdrawalUpsertOne) ClearLastModifier() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionWithdrawalUpsertOne) SetRemark(v string) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateRemark() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionWithdrawalUpsertOne) ClearRemark() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearRemark()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionWithdrawalUpsertOne) SetMemberID(v uint64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateMemberID() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateMemberID()
	})
}

// SetStatus sets the "status" field.
func (u *PromotionWithdrawalUpsertOne) SetStatus(v uint8) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PromotionWithdrawalUpsertOne) AddStatus(v uint8) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateStatus() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateStatus()
	})
}

// SetApplyAmount sets the "apply_amount" field.
func (u *PromotionWithdrawalUpsertOne) SetApplyAmount(v float64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetApplyAmount(v)
	})
}

// AddApplyAmount adds v to the "apply_amount" field.
func (u *PromotionWithdrawalUpsertOne) AddApplyAmount(v float64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddApplyAmount(v)
	})
}

// UpdateApplyAmount sets the "apply_amount" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateApplyAmount() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateApplyAmount()
	})
}

// SetAmount sets the "amount" field.
func (u *PromotionWithdrawalUpsertOne) SetAmount(v float64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PromotionWithdrawalUpsertOne) AddAmount(v float64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateAmount() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateAmount()
	})
}

// SetFee sets the "fee" field.
func (u *PromotionWithdrawalUpsertOne) SetFee(v float64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *PromotionWithdrawalUpsertOne) AddFee(v float64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateFee() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateFee()
	})
}

// SetTex sets the "tex" field.
func (u *PromotionWithdrawalUpsertOne) SetTex(v float64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetTex(v)
	})
}

// AddTex adds v to the "tex" field.
func (u *PromotionWithdrawalUpsertOne) AddTex(v float64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddTex(v)
	})
}

// UpdateTex sets the "tex" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateTex() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateTex()
	})
}

// SetMethod sets the "method" field.
func (u *PromotionWithdrawalUpsertOne) SetMethod(v uint8) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetMethod(v)
	})
}

// AddMethod adds v to the "method" field.
func (u *PromotionWithdrawalUpsertOne) AddMethod(v uint8) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateMethod() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateMethod()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PromotionWithdrawalUpsertOne) SetAccountID(v uint64) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateAccountID() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PromotionWithdrawalUpsertOne) ClearAccountID() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearAccountID()
	})
}

// SetApplyTime sets the "apply_time" field.
func (u *PromotionWithdrawalUpsertOne) SetApplyTime(v time.Time) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetApplyTime(v)
	})
}

// UpdateApplyTime sets the "apply_time" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateApplyTime() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateApplyTime()
	})
}

// ClearApplyTime clears the value of the "apply_time" field.
func (u *PromotionWithdrawalUpsertOne) ClearApplyTime() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearApplyTime()
	})
}

// SetReviewTime sets the "review_time" field.
func (u *PromotionWithdrawalUpsertOne) SetReviewTime(v time.Time) *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetReviewTime(v)
	})
}

// UpdateReviewTime sets the "review_time" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertOne) UpdateReviewTime() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateReviewTime()
	})
}

// ClearReviewTime clears the value of the "review_time" field.
func (u *PromotionWithdrawalUpsertOne) ClearReviewTime() *PromotionWithdrawalUpsertOne {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearReviewTime()
	})
}

// Exec executes the query.
func (u *PromotionWithdrawalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionWithdrawalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionWithdrawalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionWithdrawalUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionWithdrawalUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionWithdrawalCreateBulk is the builder for creating many PromotionWithdrawal entities in bulk.
type PromotionWithdrawalCreateBulk struct {
	config
	err      error
	builders []*PromotionWithdrawalCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionWithdrawal entities in the database.
func (pwcb *PromotionWithdrawalCreateBulk) Save(ctx context.Context) ([]*PromotionWithdrawal, error) {
	if pwcb.err != nil {
		return nil, pwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pwcb.builders))
	nodes := make([]*PromotionWithdrawal, len(pwcb.builders))
	mutators := make([]Mutator, len(pwcb.builders))
	for i := range pwcb.builders {
		func(i int, root context.Context) {
			builder := pwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionWithdrawalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pwcb *PromotionWithdrawalCreateBulk) SaveX(ctx context.Context) []*PromotionWithdrawal {
	v, err := pwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pwcb *PromotionWithdrawalCreateBulk) Exec(ctx context.Context) error {
	_, err := pwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwcb *PromotionWithdrawalCreateBulk) ExecX(ctx context.Context) {
	if err := pwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionWithdrawal.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionWithdrawalUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pwcb *PromotionWithdrawalCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionWithdrawalUpsertBulk {
	pwcb.conflict = opts
	return &PromotionWithdrawalUpsertBulk{
		create: pwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionWithdrawal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pwcb *PromotionWithdrawalCreateBulk) OnConflictColumns(columns ...string) *PromotionWithdrawalUpsertBulk {
	pwcb.conflict = append(pwcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionWithdrawalUpsertBulk{
		create: pwcb,
	}
}

// PromotionWithdrawalUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionWithdrawal nodes.
type PromotionWithdrawalUpsertBulk struct {
	create *PromotionWithdrawalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionWithdrawal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionWithdrawalUpsertBulk) UpdateNewValues() *PromotionWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionwithdrawal.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionwithdrawal.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionWithdrawal.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionWithdrawalUpsertBulk) Ignore() *PromotionWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionWithdrawalUpsertBulk) DoNothing() *PromotionWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionWithdrawalCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionWithdrawalUpsertBulk) Update(set func(*PromotionWithdrawalUpsert)) *PromotionWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionWithdrawalUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionWithdrawalUpsertBulk) SetUpdatedAt(v time.Time) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateUpdatedAt() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionWithdrawalUpsertBulk) SetDeletedAt(v time.Time) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateDeletedAt() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionWithdrawalUpsertBulk) ClearDeletedAt() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionWithdrawalUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateLastModifier() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionWithdrawalUpsertBulk) ClearLastModifier() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionWithdrawalUpsertBulk) SetRemark(v string) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateRemark() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionWithdrawalUpsertBulk) ClearRemark() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearRemark()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionWithdrawalUpsertBulk) SetMemberID(v uint64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateMemberID() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateMemberID()
	})
}

// SetStatus sets the "status" field.
func (u *PromotionWithdrawalUpsertBulk) SetStatus(v uint8) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PromotionWithdrawalUpsertBulk) AddStatus(v uint8) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateStatus() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateStatus()
	})
}

// SetApplyAmount sets the "apply_amount" field.
func (u *PromotionWithdrawalUpsertBulk) SetApplyAmount(v float64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetApplyAmount(v)
	})
}

// AddApplyAmount adds v to the "apply_amount" field.
func (u *PromotionWithdrawalUpsertBulk) AddApplyAmount(v float64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddApplyAmount(v)
	})
}

// UpdateApplyAmount sets the "apply_amount" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateApplyAmount() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateApplyAmount()
	})
}

// SetAmount sets the "amount" field.
func (u *PromotionWithdrawalUpsertBulk) SetAmount(v float64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PromotionWithdrawalUpsertBulk) AddAmount(v float64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateAmount() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateAmount()
	})
}

// SetFee sets the "fee" field.
func (u *PromotionWithdrawalUpsertBulk) SetFee(v float64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *PromotionWithdrawalUpsertBulk) AddFee(v float64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateFee() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateFee()
	})
}

// SetTex sets the "tex" field.
func (u *PromotionWithdrawalUpsertBulk) SetTex(v float64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetTex(v)
	})
}

// AddTex adds v to the "tex" field.
func (u *PromotionWithdrawalUpsertBulk) AddTex(v float64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddTex(v)
	})
}

// UpdateTex sets the "tex" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateTex() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateTex()
	})
}

// SetMethod sets the "method" field.
func (u *PromotionWithdrawalUpsertBulk) SetMethod(v uint8) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetMethod(v)
	})
}

// AddMethod adds v to the "method" field.
func (u *PromotionWithdrawalUpsertBulk) AddMethod(v uint8) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.AddMethod(v)
	})
}

// UpdateMethod sets the "method" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateMethod() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateMethod()
	})
}

// SetAccountID sets the "account_id" field.
func (u *PromotionWithdrawalUpsertBulk) SetAccountID(v uint64) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetAccountID(v)
	})
}

// UpdateAccountID sets the "account_id" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateAccountID() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateAccountID()
	})
}

// ClearAccountID clears the value of the "account_id" field.
func (u *PromotionWithdrawalUpsertBulk) ClearAccountID() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearAccountID()
	})
}

// SetApplyTime sets the "apply_time" field.
func (u *PromotionWithdrawalUpsertBulk) SetApplyTime(v time.Time) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetApplyTime(v)
	})
}

// UpdateApplyTime sets the "apply_time" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateApplyTime() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateApplyTime()
	})
}

// ClearApplyTime clears the value of the "apply_time" field.
func (u *PromotionWithdrawalUpsertBulk) ClearApplyTime() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearApplyTime()
	})
}

// SetReviewTime sets the "review_time" field.
func (u *PromotionWithdrawalUpsertBulk) SetReviewTime(v time.Time) *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.SetReviewTime(v)
	})
}

// UpdateReviewTime sets the "review_time" field to the value that was provided on create.
func (u *PromotionWithdrawalUpsertBulk) UpdateReviewTime() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.UpdateReviewTime()
	})
}

// ClearReviewTime clears the value of the "review_time" field.
func (u *PromotionWithdrawalUpsertBulk) ClearReviewTime() *PromotionWithdrawalUpsertBulk {
	return u.Update(func(s *PromotionWithdrawalUpsert) {
		s.ClearReviewTime()
	})
}

// Exec executes the query.
func (u *PromotionWithdrawalUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionWithdrawalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionWithdrawalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionWithdrawalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
