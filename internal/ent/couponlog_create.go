// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/couponlog"
)

// CouponLogCreate is the builder for creating a CouponLog entity.
type CouponLogCreate struct {
	config
	mutation *CouponLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (clc *CouponLogCreate) SetCreatedAt(t time.Time) *CouponLogCreate {
	clc.mutation.SetCreatedAt(t)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *CouponLogCreate) SetNillableCreatedAt(t *time.Time) *CouponLogCreate {
	if t != nil {
		clc.SetCreatedAt(*t)
	}
	return clc
}

// SetUpdatedAt sets the "updated_at" field.
func (clc *CouponLogCreate) SetUpdatedAt(t time.Time) *CouponLogCreate {
	clc.mutation.SetUpdatedAt(t)
	return clc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clc *CouponLogCreate) SetNillableUpdatedAt(t *time.Time) *CouponLogCreate {
	if t != nil {
		clc.SetUpdatedAt(*t)
	}
	return clc
}

// SetDeletedAt sets the "deleted_at" field.
func (clc *CouponLogCreate) SetDeletedAt(t time.Time) *CouponLogCreate {
	clc.mutation.SetDeletedAt(t)
	return clc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (clc *CouponLogCreate) SetNillableDeletedAt(t *time.Time) *CouponLogCreate {
	if t != nil {
		clc.SetDeletedAt(*t)
	}
	return clc
}

// SetCreator sets the "creator" field.
func (clc *CouponLogCreate) SetCreator(m *model.Modifier) *CouponLogCreate {
	clc.mutation.SetCreator(m)
	return clc
}

// SetLastModifier sets the "last_modifier" field.
func (clc *CouponLogCreate) SetLastModifier(m *model.Modifier) *CouponLogCreate {
	clc.mutation.SetLastModifier(m)
	return clc
}

// SetRemark sets the "remark" field.
func (clc *CouponLogCreate) SetRemark(s string) *CouponLogCreate {
	clc.mutation.SetRemark(s)
	return clc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (clc *CouponLogCreate) SetNillableRemark(s *string) *CouponLogCreate {
	if s != nil {
		clc.SetRemark(*s)
	}
	return clc
}

// Mutation returns the CouponLogMutation object of the builder.
func (clc *CouponLogCreate) Mutation() *CouponLogMutation {
	return clc.mutation
}

// Save creates the CouponLog in the database.
func (clc *CouponLogCreate) Save(ctx context.Context) (*CouponLog, error) {
	var (
		err  error
		node *CouponLog
	)
	if err := clc.defaults(); err != nil {
		return nil, err
	}
	if len(clc.hooks) == 0 {
		if err = clc.check(); err != nil {
			return nil, err
		}
		node, err = clc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = clc.check(); err != nil {
				return nil, err
			}
			clc.mutation = mutation
			if node, err = clc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(clc.hooks) - 1; i >= 0; i-- {
			if clc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = clc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, clc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponLog)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponLogMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CouponLogCreate) SaveX(ctx context.Context) *CouponLog {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CouponLogCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CouponLogCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *CouponLogCreate) defaults() error {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		if couponlog.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponlog.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := couponlog.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		if couponlog.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponlog.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponlog.DefaultUpdatedAt()
		clc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (clc *CouponLogCreate) check() error {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponLog.created_at"`)}
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponLog.updated_at"`)}
	}
	return nil
}

func (clc *CouponLogCreate) sqlSave(ctx context.Context) (*CouponLog, error) {
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (clc *CouponLogCreate) createSpec() (*CouponLog, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponLog{config: clc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: couponlog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: couponlog.FieldID,
			},
		}
	)
	_spec.OnConflict = clc.conflict
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: couponlog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := clc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: couponlog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := clc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: couponlog.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := clc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponlog.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := clc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponlog.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := clc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponlog.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponLog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (clc *CouponLogCreate) OnConflict(opts ...sql.ConflictOption) *CouponLogUpsertOne {
	clc.conflict = opts
	return &CouponLogUpsertOne{
		create: clc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clc *CouponLogCreate) OnConflictColumns(columns ...string) *CouponLogUpsertOne {
	clc.conflict = append(clc.conflict, sql.ConflictColumns(columns...))
	return &CouponLogUpsertOne{
		create: clc,
	}
}

type (
	// CouponLogUpsertOne is the builder for "upsert"-ing
	//  one CouponLog node.
	CouponLogUpsertOne struct {
		create *CouponLogCreate
	}

	// CouponLogUpsert is the "OnConflict" setter.
	CouponLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponLogUpsert) SetUpdatedAt(v time.Time) *CouponLogUpsert {
	u.Set(couponlog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponLogUpsert) UpdateUpdatedAt() *CouponLogUpsert {
	u.SetExcluded(couponlog.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponLogUpsert) SetDeletedAt(v time.Time) *CouponLogUpsert {
	u.Set(couponlog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponLogUpsert) UpdateDeletedAt() *CouponLogUpsert {
	u.SetExcluded(couponlog.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CouponLogUpsert) ClearDeletedAt() *CouponLogUpsert {
	u.SetNull(couponlog.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponLogUpsert) SetLastModifier(v *model.Modifier) *CouponLogUpsert {
	u.Set(couponlog.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponLogUpsert) UpdateLastModifier() *CouponLogUpsert {
	u.SetExcluded(couponlog.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponLogUpsert) ClearLastModifier() *CouponLogUpsert {
	u.SetNull(couponlog.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CouponLogUpsert) SetRemark(v string) *CouponLogUpsert {
	u.Set(couponlog.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponLogUpsert) UpdateRemark() *CouponLogUpsert {
	u.SetExcluded(couponlog.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponLogUpsert) ClearRemark() *CouponLogUpsert {
	u.SetNull(couponlog.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CouponLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CouponLogUpsertOne) UpdateNewValues() *CouponLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(couponlog.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(couponlog.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponLogUpsertOne) Ignore() *CouponLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponLogUpsertOne) DoNothing() *CouponLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponLogCreate.OnConflict
// documentation for more info.
func (u *CouponLogUpsertOne) Update(set func(*CouponLogUpsert)) *CouponLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponLogUpsertOne) SetUpdatedAt(v time.Time) *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponLogUpsertOne) UpdateUpdatedAt() *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponLogUpsertOne) SetDeletedAt(v time.Time) *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponLogUpsertOne) UpdateDeletedAt() *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CouponLogUpsertOne) ClearDeletedAt() *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponLogUpsertOne) SetLastModifier(v *model.Modifier) *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponLogUpsertOne) UpdateLastModifier() *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponLogUpsertOne) ClearLastModifier() *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CouponLogUpsertOne) SetRemark(v string) *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponLogUpsertOne) UpdateRemark() *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponLogUpsertOne) ClearRemark() *CouponLogUpsertOne {
	return u.Update(func(s *CouponLogUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *CouponLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponLogUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponLogUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponLogCreateBulk is the builder for creating many CouponLog entities in bulk.
type CouponLogCreateBulk struct {
	config
	builders []*CouponLogCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponLog entities in the database.
func (clcb *CouponLogCreateBulk) Save(ctx context.Context) ([]*CouponLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CouponLog, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = clcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CouponLogCreateBulk) SaveX(ctx context.Context) []*CouponLog {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CouponLogCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CouponLogCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (clcb *CouponLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponLogUpsertBulk {
	clcb.conflict = opts
	return &CouponLogUpsertBulk{
		create: clcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clcb *CouponLogCreateBulk) OnConflictColumns(columns ...string) *CouponLogUpsertBulk {
	clcb.conflict = append(clcb.conflict, sql.ConflictColumns(columns...))
	return &CouponLogUpsertBulk{
		create: clcb,
	}
}

// CouponLogUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponLog nodes.
type CouponLogUpsertBulk struct {
	create *CouponLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CouponLogUpsertBulk) UpdateNewValues() *CouponLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(couponlog.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(couponlog.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponLogUpsertBulk) Ignore() *CouponLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponLogUpsertBulk) DoNothing() *CouponLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponLogCreateBulk.OnConflict
// documentation for more info.
func (u *CouponLogUpsertBulk) Update(set func(*CouponLogUpsert)) *CouponLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponLogUpsertBulk) SetUpdatedAt(v time.Time) *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponLogUpsertBulk) UpdateUpdatedAt() *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CouponLogUpsertBulk) SetDeletedAt(v time.Time) *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CouponLogUpsertBulk) UpdateDeletedAt() *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CouponLogUpsertBulk) ClearDeletedAt() *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponLogUpsertBulk) SetLastModifier(v *model.Modifier) *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponLogUpsertBulk) UpdateLastModifier() *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponLogUpsertBulk) ClearLastModifier() *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CouponLogUpsertBulk) SetRemark(v string) *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponLogUpsertBulk) UpdateRemark() *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponLogUpsertBulk) ClearRemark() *CouponLogUpsertBulk {
	return u.Update(func(s *CouponLogUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *CouponLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
