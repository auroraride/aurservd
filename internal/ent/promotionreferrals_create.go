// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
)

// PromotionReferralsCreate is the builder for creating a PromotionReferrals entity.
type PromotionReferralsCreate struct {
	config
	mutation *PromotionReferralsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (prc *PromotionReferralsCreate) SetCreatedAt(t time.Time) *PromotionReferralsCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *PromotionReferralsCreate) SetNillableCreatedAt(t *time.Time) *PromotionReferralsCreate {
	if t != nil {
		prc.SetCreatedAt(*t)
	}
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PromotionReferralsCreate) SetUpdatedAt(t time.Time) *PromotionReferralsCreate {
	prc.mutation.SetUpdatedAt(t)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *PromotionReferralsCreate) SetNillableUpdatedAt(t *time.Time) *PromotionReferralsCreate {
	if t != nil {
		prc.SetUpdatedAt(*t)
	}
	return prc
}

// SetDeletedAt sets the "deleted_at" field.
func (prc *PromotionReferralsCreate) SetDeletedAt(t time.Time) *PromotionReferralsCreate {
	prc.mutation.SetDeletedAt(t)
	return prc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prc *PromotionReferralsCreate) SetNillableDeletedAt(t *time.Time) *PromotionReferralsCreate {
	if t != nil {
		prc.SetDeletedAt(*t)
	}
	return prc
}

// SetCreator sets the "creator" field.
func (prc *PromotionReferralsCreate) SetCreator(m *model.Modifier) *PromotionReferralsCreate {
	prc.mutation.SetCreator(m)
	return prc
}

// SetLastModifier sets the "last_modifier" field.
func (prc *PromotionReferralsCreate) SetLastModifier(m *model.Modifier) *PromotionReferralsCreate {
	prc.mutation.SetLastModifier(m)
	return prc
}

// SetRemark sets the "remark" field.
func (prc *PromotionReferralsCreate) SetRemark(s string) *PromotionReferralsCreate {
	prc.mutation.SetRemark(s)
	return prc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (prc *PromotionReferralsCreate) SetNillableRemark(s *string) *PromotionReferralsCreate {
	if s != nil {
		prc.SetRemark(*s)
	}
	return prc
}

// SetReferringMemberID sets the "referring_member_id" field.
func (prc *PromotionReferralsCreate) SetReferringMemberID(u uint64) *PromotionReferralsCreate {
	prc.mutation.SetReferringMemberID(u)
	return prc
}

// SetNillableReferringMemberID sets the "referring_member_id" field if the given value is not nil.
func (prc *PromotionReferralsCreate) SetNillableReferringMemberID(u *uint64) *PromotionReferralsCreate {
	if u != nil {
		prc.SetReferringMemberID(*u)
	}
	return prc
}

// SetReferredMemberID sets the "referred_member_id" field.
func (prc *PromotionReferralsCreate) SetReferredMemberID(u uint64) *PromotionReferralsCreate {
	prc.mutation.SetReferredMemberID(u)
	return prc
}

// SetNillableReferredMemberID sets the "referred_member_id" field if the given value is not nil.
func (prc *PromotionReferralsCreate) SetNillableReferredMemberID(u *uint64) *PromotionReferralsCreate {
	if u != nil {
		prc.SetReferredMemberID(*u)
	}
	return prc
}

// SetRiderID sets the "rider_id" field.
func (prc *PromotionReferralsCreate) SetRiderID(u uint64) *PromotionReferralsCreate {
	prc.mutation.SetRiderID(u)
	return prc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (prc *PromotionReferralsCreate) SetNillableRiderID(u *uint64) *PromotionReferralsCreate {
	if u != nil {
		prc.SetRiderID(*u)
	}
	return prc
}

// SetParentID sets the "parent_id" field.
func (prc *PromotionReferralsCreate) SetParentID(u uint64) *PromotionReferralsCreate {
	prc.mutation.SetParentID(u)
	return prc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (prc *PromotionReferralsCreate) SetNillableParentID(u *uint64) *PromotionReferralsCreate {
	if u != nil {
		prc.SetParentID(*u)
	}
	return prc
}

// SetReferringMember sets the "referring_member" edge to the PromotionMember entity.
func (prc *PromotionReferralsCreate) SetReferringMember(p *PromotionMember) *PromotionReferralsCreate {
	return prc.SetReferringMemberID(p.ID)
}

// SetReferredMember sets the "referred_member" edge to the PromotionMember entity.
func (prc *PromotionReferralsCreate) SetReferredMember(p *PromotionMember) *PromotionReferralsCreate {
	return prc.SetReferredMemberID(p.ID)
}

// SetParent sets the "parent" edge to the PromotionReferrals entity.
func (prc *PromotionReferralsCreate) SetParent(p *PromotionReferrals) *PromotionReferralsCreate {
	return prc.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PromotionReferrals entity by IDs.
func (prc *PromotionReferralsCreate) AddChildIDs(ids ...uint64) *PromotionReferralsCreate {
	prc.mutation.AddChildIDs(ids...)
	return prc
}

// AddChildren adds the "children" edges to the PromotionReferrals entity.
func (prc *PromotionReferralsCreate) AddChildren(p ...*PromotionReferrals) *PromotionReferralsCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return prc.AddChildIDs(ids...)
}

// Mutation returns the PromotionReferralsMutation object of the builder.
func (prc *PromotionReferralsCreate) Mutation() *PromotionReferralsMutation {
	return prc.mutation
}

// Save creates the PromotionReferrals in the database.
func (prc *PromotionReferralsCreate) Save(ctx context.Context) (*PromotionReferrals, error) {
	if err := prc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PromotionReferralsCreate) SaveX(ctx context.Context) *PromotionReferrals {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PromotionReferralsCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PromotionReferralsCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PromotionReferralsCreate) defaults() error {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		if promotionreferrals.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionreferrals.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionreferrals.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		if promotionreferrals.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionreferrals.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionreferrals.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (prc *PromotionReferralsCreate) check() error {
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionReferrals.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionReferrals.updated_at"`)}
	}
	return nil
}

func (prc *PromotionReferralsCreate) sqlSave(ctx context.Context) (*PromotionReferrals, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PromotionReferralsCreate) createSpec() (*PromotionReferrals, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionReferrals{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(promotionreferrals.Table, sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = prc.conflict
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionreferrals.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionreferrals.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := prc.mutation.DeletedAt(); ok {
		_spec.SetField(promotionreferrals.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := prc.mutation.Creator(); ok {
		_spec.SetField(promotionreferrals.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := prc.mutation.LastModifier(); ok {
		_spec.SetField(promotionreferrals.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := prc.mutation.Remark(); ok {
		_spec.SetField(promotionreferrals.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := prc.mutation.RiderID(); ok {
		_spec.SetField(promotionreferrals.FieldRiderID, field.TypeUint64, value)
		_node.RiderID = &value
	}
	if nodes := prc.mutation.ReferringMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ReferringMemberTable,
			Columns: []string{promotionreferrals.ReferringMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReferringMemberID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.ReferredMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   promotionreferrals.ReferredMemberTable,
			Columns: []string{promotionreferrals.ReferredMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReferredMemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ParentTable,
			Columns: []string{promotionreferrals.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionreferrals.ChildrenTable,
			Columns: []string{promotionreferrals.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionReferrals.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionReferralsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (prc *PromotionReferralsCreate) OnConflict(opts ...sql.ConflictOption) *PromotionReferralsUpsertOne {
	prc.conflict = opts
	return &PromotionReferralsUpsertOne{
		create: prc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionReferrals.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prc *PromotionReferralsCreate) OnConflictColumns(columns ...string) *PromotionReferralsUpsertOne {
	prc.conflict = append(prc.conflict, sql.ConflictColumns(columns...))
	return &PromotionReferralsUpsertOne{
		create: prc,
	}
}

type (
	// PromotionReferralsUpsertOne is the builder for "upsert"-ing
	//  one PromotionReferrals node.
	PromotionReferralsUpsertOne struct {
		create *PromotionReferralsCreate
	}

	// PromotionReferralsUpsert is the "OnConflict" setter.
	PromotionReferralsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionReferralsUpsert) SetUpdatedAt(v time.Time) *PromotionReferralsUpsert {
	u.Set(promotionreferrals.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionReferralsUpsert) UpdateUpdatedAt() *PromotionReferralsUpsert {
	u.SetExcluded(promotionreferrals.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionReferralsUpsert) SetDeletedAt(v time.Time) *PromotionReferralsUpsert {
	u.Set(promotionreferrals.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionReferralsUpsert) UpdateDeletedAt() *PromotionReferralsUpsert {
	u.SetExcluded(promotionreferrals.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionReferralsUpsert) ClearDeletedAt() *PromotionReferralsUpsert {
	u.SetNull(promotionreferrals.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionReferralsUpsert) SetLastModifier(v *model.Modifier) *PromotionReferralsUpsert {
	u.Set(promotionreferrals.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionReferralsUpsert) UpdateLastModifier() *PromotionReferralsUpsert {
	u.SetExcluded(promotionreferrals.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionReferralsUpsert) ClearLastModifier() *PromotionReferralsUpsert {
	u.SetNull(promotionreferrals.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionReferralsUpsert) SetRemark(v string) *PromotionReferralsUpsert {
	u.Set(promotionreferrals.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionReferralsUpsert) UpdateRemark() *PromotionReferralsUpsert {
	u.SetExcluded(promotionreferrals.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionReferralsUpsert) ClearRemark() *PromotionReferralsUpsert {
	u.SetNull(promotionreferrals.FieldRemark)
	return u
}

// SetReferringMemberID sets the "referring_member_id" field.
func (u *PromotionReferralsUpsert) SetReferringMemberID(v uint64) *PromotionReferralsUpsert {
	u.Set(promotionreferrals.FieldReferringMemberID, v)
	return u
}

// UpdateReferringMemberID sets the "referring_member_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsert) UpdateReferringMemberID() *PromotionReferralsUpsert {
	u.SetExcluded(promotionreferrals.FieldReferringMemberID)
	return u
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (u *PromotionReferralsUpsert) ClearReferringMemberID() *PromotionReferralsUpsert {
	u.SetNull(promotionreferrals.FieldReferringMemberID)
	return u
}

// SetReferredMemberID sets the "referred_member_id" field.
func (u *PromotionReferralsUpsert) SetReferredMemberID(v uint64) *PromotionReferralsUpsert {
	u.Set(promotionreferrals.FieldReferredMemberID, v)
	return u
}

// UpdateReferredMemberID sets the "referred_member_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsert) UpdateReferredMemberID() *PromotionReferralsUpsert {
	u.SetExcluded(promotionreferrals.FieldReferredMemberID)
	return u
}

// ClearReferredMemberID clears the value of the "referred_member_id" field.
func (u *PromotionReferralsUpsert) ClearReferredMemberID() *PromotionReferralsUpsert {
	u.SetNull(promotionreferrals.FieldReferredMemberID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionReferralsUpsert) SetRiderID(v uint64) *PromotionReferralsUpsert {
	u.Set(promotionreferrals.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsert) UpdateRiderID() *PromotionReferralsUpsert {
	u.SetExcluded(promotionreferrals.FieldRiderID)
	return u
}

// AddRiderID adds v to the "rider_id" field.
func (u *PromotionReferralsUpsert) AddRiderID(v uint64) *PromotionReferralsUpsert {
	u.Add(promotionreferrals.FieldRiderID, v)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionReferralsUpsert) ClearRiderID() *PromotionReferralsUpsert {
	u.SetNull(promotionreferrals.FieldRiderID)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *PromotionReferralsUpsert) SetParentID(v uint64) *PromotionReferralsUpsert {
	u.Set(promotionreferrals.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsert) UpdateParentID() *PromotionReferralsUpsert {
	u.SetExcluded(promotionreferrals.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PromotionReferralsUpsert) ClearParentID() *PromotionReferralsUpsert {
	u.SetNull(promotionreferrals.FieldParentID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionReferrals.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionReferralsUpsertOne) UpdateNewValues() *PromotionReferralsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionreferrals.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionreferrals.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionReferrals.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionReferralsUpsertOne) Ignore() *PromotionReferralsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionReferralsUpsertOne) DoNothing() *PromotionReferralsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionReferralsCreate.OnConflict
// documentation for more info.
func (u *PromotionReferralsUpsertOne) Update(set func(*PromotionReferralsUpsert)) *PromotionReferralsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionReferralsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionReferralsUpsertOne) SetUpdatedAt(v time.Time) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionReferralsUpsertOne) UpdateUpdatedAt() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionReferralsUpsertOne) SetDeletedAt(v time.Time) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionReferralsUpsertOne) UpdateDeletedAt() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionReferralsUpsertOne) ClearDeletedAt() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionReferralsUpsertOne) SetLastModifier(v *model.Modifier) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionReferralsUpsertOne) UpdateLastModifier() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionReferralsUpsertOne) ClearLastModifier() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionReferralsUpsertOne) SetRemark(v string) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionReferralsUpsertOne) UpdateRemark() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionReferralsUpsertOne) ClearRemark() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearRemark()
	})
}

// SetReferringMemberID sets the "referring_member_id" field.
func (u *PromotionReferralsUpsertOne) SetReferringMemberID(v uint64) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetReferringMemberID(v)
	})
}

// UpdateReferringMemberID sets the "referring_member_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsertOne) UpdateReferringMemberID() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateReferringMemberID()
	})
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (u *PromotionReferralsUpsertOne) ClearReferringMemberID() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearReferringMemberID()
	})
}

// SetReferredMemberID sets the "referred_member_id" field.
func (u *PromotionReferralsUpsertOne) SetReferredMemberID(v uint64) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetReferredMemberID(v)
	})
}

// UpdateReferredMemberID sets the "referred_member_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsertOne) UpdateReferredMemberID() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateReferredMemberID()
	})
}

// ClearReferredMemberID clears the value of the "referred_member_id" field.
func (u *PromotionReferralsUpsertOne) ClearReferredMemberID() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearReferredMemberID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionReferralsUpsertOne) SetRiderID(v uint64) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetRiderID(v)
	})
}

// AddRiderID adds v to the "rider_id" field.
func (u *PromotionReferralsUpsertOne) AddRiderID(v uint64) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.AddRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsertOne) UpdateRiderID() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionReferralsUpsertOne) ClearRiderID() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearRiderID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *PromotionReferralsUpsertOne) SetParentID(v uint64) *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsertOne) UpdateParentID() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PromotionReferralsUpsertOne) ClearParentID() *PromotionReferralsUpsertOne {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *PromotionReferralsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionReferralsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionReferralsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionReferralsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionReferralsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionReferralsCreateBulk is the builder for creating many PromotionReferrals entities in bulk.
type PromotionReferralsCreateBulk struct {
	config
	builders []*PromotionReferralsCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionReferrals entities in the database.
func (prcb *PromotionReferralsCreateBulk) Save(ctx context.Context) ([]*PromotionReferrals, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PromotionReferrals, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionReferralsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PromotionReferralsCreateBulk) SaveX(ctx context.Context) []*PromotionReferrals {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PromotionReferralsCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PromotionReferralsCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionReferrals.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionReferralsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (prcb *PromotionReferralsCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionReferralsUpsertBulk {
	prcb.conflict = opts
	return &PromotionReferralsUpsertBulk{
		create: prcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionReferrals.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prcb *PromotionReferralsCreateBulk) OnConflictColumns(columns ...string) *PromotionReferralsUpsertBulk {
	prcb.conflict = append(prcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionReferralsUpsertBulk{
		create: prcb,
	}
}

// PromotionReferralsUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionReferrals nodes.
type PromotionReferralsUpsertBulk struct {
	create *PromotionReferralsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionReferrals.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionReferralsUpsertBulk) UpdateNewValues() *PromotionReferralsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionreferrals.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionreferrals.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionReferrals.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionReferralsUpsertBulk) Ignore() *PromotionReferralsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionReferralsUpsertBulk) DoNothing() *PromotionReferralsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionReferralsCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionReferralsUpsertBulk) Update(set func(*PromotionReferralsUpsert)) *PromotionReferralsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionReferralsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionReferralsUpsertBulk) SetUpdatedAt(v time.Time) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionReferralsUpsertBulk) UpdateUpdatedAt() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionReferralsUpsertBulk) SetDeletedAt(v time.Time) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionReferralsUpsertBulk) UpdateDeletedAt() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionReferralsUpsertBulk) ClearDeletedAt() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionReferralsUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionReferralsUpsertBulk) UpdateLastModifier() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionReferralsUpsertBulk) ClearLastModifier() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionReferralsUpsertBulk) SetRemark(v string) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionReferralsUpsertBulk) UpdateRemark() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionReferralsUpsertBulk) ClearRemark() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearRemark()
	})
}

// SetReferringMemberID sets the "referring_member_id" field.
func (u *PromotionReferralsUpsertBulk) SetReferringMemberID(v uint64) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetReferringMemberID(v)
	})
}

// UpdateReferringMemberID sets the "referring_member_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsertBulk) UpdateReferringMemberID() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateReferringMemberID()
	})
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (u *PromotionReferralsUpsertBulk) ClearReferringMemberID() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearReferringMemberID()
	})
}

// SetReferredMemberID sets the "referred_member_id" field.
func (u *PromotionReferralsUpsertBulk) SetReferredMemberID(v uint64) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetReferredMemberID(v)
	})
}

// UpdateReferredMemberID sets the "referred_member_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsertBulk) UpdateReferredMemberID() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateReferredMemberID()
	})
}

// ClearReferredMemberID clears the value of the "referred_member_id" field.
func (u *PromotionReferralsUpsertBulk) ClearReferredMemberID() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearReferredMemberID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionReferralsUpsertBulk) SetRiderID(v uint64) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetRiderID(v)
	})
}

// AddRiderID adds v to the "rider_id" field.
func (u *PromotionReferralsUpsertBulk) AddRiderID(v uint64) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.AddRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsertBulk) UpdateRiderID() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionReferralsUpsertBulk) ClearRiderID() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearRiderID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *PromotionReferralsUpsertBulk) SetParentID(v uint64) *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PromotionReferralsUpsertBulk) UpdateParentID() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PromotionReferralsUpsertBulk) ClearParentID() *PromotionReferralsUpsertBulk {
	return u.Update(func(s *PromotionReferralsUpsert) {
		s.ClearParentID()
	})
}

// Exec executes the query.
func (u *PromotionReferralsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionReferralsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionReferralsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionReferralsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
