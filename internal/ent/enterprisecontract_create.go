// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
)

// EnterpriseContractCreate is the builder for creating a EnterpriseContract entity.
type EnterpriseContractCreate struct {
	config
	mutation *EnterpriseContractMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ecc *EnterpriseContractCreate) SetCreatedAt(t time.Time) *EnterpriseContractCreate {
	ecc.mutation.SetCreatedAt(t)
	return ecc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ecc *EnterpriseContractCreate) SetNillableCreatedAt(t *time.Time) *EnterpriseContractCreate {
	if t != nil {
		ecc.SetCreatedAt(*t)
	}
	return ecc
}

// SetUpdatedAt sets the "updated_at" field.
func (ecc *EnterpriseContractCreate) SetUpdatedAt(t time.Time) *EnterpriseContractCreate {
	ecc.mutation.SetUpdatedAt(t)
	return ecc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ecc *EnterpriseContractCreate) SetNillableUpdatedAt(t *time.Time) *EnterpriseContractCreate {
	if t != nil {
		ecc.SetUpdatedAt(*t)
	}
	return ecc
}

// SetDeletedAt sets the "deleted_at" field.
func (ecc *EnterpriseContractCreate) SetDeletedAt(t time.Time) *EnterpriseContractCreate {
	ecc.mutation.SetDeletedAt(t)
	return ecc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecc *EnterpriseContractCreate) SetNillableDeletedAt(t *time.Time) *EnterpriseContractCreate {
	if t != nil {
		ecc.SetDeletedAt(*t)
	}
	return ecc
}

// SetCreator sets the "creator" field.
func (ecc *EnterpriseContractCreate) SetCreator(m *model.Modifier) *EnterpriseContractCreate {
	ecc.mutation.SetCreator(m)
	return ecc
}

// SetLastModifier sets the "last_modifier" field.
func (ecc *EnterpriseContractCreate) SetLastModifier(m *model.Modifier) *EnterpriseContractCreate {
	ecc.mutation.SetLastModifier(m)
	return ecc
}

// SetRemark sets the "remark" field.
func (ecc *EnterpriseContractCreate) SetRemark(s string) *EnterpriseContractCreate {
	ecc.mutation.SetRemark(s)
	return ecc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ecc *EnterpriseContractCreate) SetNillableRemark(s *string) *EnterpriseContractCreate {
	if s != nil {
		ecc.SetRemark(*s)
	}
	return ecc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ecc *EnterpriseContractCreate) SetEnterpriseID(u uint64) *EnterpriseContractCreate {
	ecc.mutation.SetEnterpriseID(u)
	return ecc
}

// SetStart sets the "start" field.
func (ecc *EnterpriseContractCreate) SetStart(t time.Time) *EnterpriseContractCreate {
	ecc.mutation.SetStart(t)
	return ecc
}

// SetEnd sets the "end" field.
func (ecc *EnterpriseContractCreate) SetEnd(t time.Time) *EnterpriseContractCreate {
	ecc.mutation.SetEnd(t)
	return ecc
}

// SetFile sets the "file" field.
func (ecc *EnterpriseContractCreate) SetFile(s string) *EnterpriseContractCreate {
	ecc.mutation.SetFile(s)
	return ecc
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ecc *EnterpriseContractCreate) SetEnterprise(e *Enterprise) *EnterpriseContractCreate {
	return ecc.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterpriseContractMutation object of the builder.
func (ecc *EnterpriseContractCreate) Mutation() *EnterpriseContractMutation {
	return ecc.mutation
}

// Save creates the EnterpriseContract in the database.
func (ecc *EnterpriseContractCreate) Save(ctx context.Context) (*EnterpriseContract, error) {
	if err := ecc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*EnterpriseContract, EnterpriseContractMutation](ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EnterpriseContractCreate) SaveX(ctx context.Context) *EnterpriseContract {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EnterpriseContractCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EnterpriseContractCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecc *EnterpriseContractCreate) defaults() error {
	if _, ok := ecc.mutation.CreatedAt(); !ok {
		if enterprisecontract.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisecontract.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisecontract.DefaultCreatedAt()
		ecc.mutation.SetCreatedAt(v)
	}
	if _, ok := ecc.mutation.UpdatedAt(); !ok {
		if enterprisecontract.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisecontract.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisecontract.DefaultUpdatedAt()
		ecc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EnterpriseContractCreate) check() error {
	if _, ok := ecc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EnterpriseContract.created_at"`)}
	}
	if _, ok := ecc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EnterpriseContract.updated_at"`)}
	}
	if _, ok := ecc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise_id", err: errors.New(`ent: missing required field "EnterpriseContract.enterprise_id"`)}
	}
	if _, ok := ecc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "EnterpriseContract.start"`)}
	}
	if _, ok := ecc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "EnterpriseContract.end"`)}
	}
	if _, ok := ecc.mutation.File(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required field "EnterpriseContract.file"`)}
	}
	if _, ok := ecc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise", err: errors.New(`ent: missing required edge "EnterpriseContract.enterprise"`)}
	}
	return nil
}

func (ecc *EnterpriseContractCreate) sqlSave(ctx context.Context) (*EnterpriseContract, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *EnterpriseContractCreate) createSpec() (*EnterpriseContract, *sqlgraph.CreateSpec) {
	var (
		_node = &EnterpriseContract{config: ecc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: enterprisecontract.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisecontract.FieldID,
			},
		}
	)
	_spec.OnConflict = ecc.conflict
	if value, ok := ecc.mutation.CreatedAt(); ok {
		_spec.SetField(enterprisecontract.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ecc.mutation.UpdatedAt(); ok {
		_spec.SetField(enterprisecontract.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ecc.mutation.DeletedAt(); ok {
		_spec.SetField(enterprisecontract.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ecc.mutation.Creator(); ok {
		_spec.SetField(enterprisecontract.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ecc.mutation.LastModifier(); ok {
		_spec.SetField(enterprisecontract.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ecc.mutation.Remark(); ok {
		_spec.SetField(enterprisecontract.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ecc.mutation.Start(); ok {
		_spec.SetField(enterprisecontract.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := ecc.mutation.End(); ok {
		_spec.SetField(enterprisecontract.FieldEnd, field.TypeTime, value)
		_node.End = value
	}
	if value, ok := ecc.mutation.File(); ok {
		_spec.SetField(enterprisecontract.FieldFile, field.TypeString, value)
		_node.File = value
	}
	if nodes := ecc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisecontract.EnterpriseTable,
			Columns: []string{enterprisecontract.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseContract.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecc *EnterpriseContractCreate) OnConflict(opts ...sql.ConflictOption) *EnterpriseContractUpsertOne {
	ecc.conflict = opts
	return &EnterpriseContractUpsertOne{
		create: ecc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseContract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecc *EnterpriseContractCreate) OnConflictColumns(columns ...string) *EnterpriseContractUpsertOne {
	ecc.conflict = append(ecc.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseContractUpsertOne{
		create: ecc,
	}
}

type (
	// EnterpriseContractUpsertOne is the builder for "upsert"-ing
	//  one EnterpriseContract node.
	EnterpriseContractUpsertOne struct {
		create *EnterpriseContractCreate
	}

	// EnterpriseContractUpsert is the "OnConflict" setter.
	EnterpriseContractUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseContractUpsert) SetUpdatedAt(v time.Time) *EnterpriseContractUpsert {
	u.Set(enterprisecontract.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseContractUpsert) UpdateUpdatedAt() *EnterpriseContractUpsert {
	u.SetExcluded(enterprisecontract.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseContractUpsert) SetDeletedAt(v time.Time) *EnterpriseContractUpsert {
	u.Set(enterprisecontract.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseContractUpsert) UpdateDeletedAt() *EnterpriseContractUpsert {
	u.SetExcluded(enterprisecontract.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseContractUpsert) ClearDeletedAt() *EnterpriseContractUpsert {
	u.SetNull(enterprisecontract.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseContractUpsert) SetLastModifier(v *model.Modifier) *EnterpriseContractUpsert {
	u.Set(enterprisecontract.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseContractUpsert) UpdateLastModifier() *EnterpriseContractUpsert {
	u.SetExcluded(enterprisecontract.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseContractUpsert) ClearLastModifier() *EnterpriseContractUpsert {
	u.SetNull(enterprisecontract.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EnterpriseContractUpsert) SetRemark(v string) *EnterpriseContractUpsert {
	u.Set(enterprisecontract.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseContractUpsert) UpdateRemark() *EnterpriseContractUpsert {
	u.SetExcluded(enterprisecontract.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseContractUpsert) ClearRemark() *EnterpriseContractUpsert {
	u.SetNull(enterprisecontract.FieldRemark)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseContractUpsert) SetEnterpriseID(v uint64) *EnterpriseContractUpsert {
	u.Set(enterprisecontract.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseContractUpsert) UpdateEnterpriseID() *EnterpriseContractUpsert {
	u.SetExcluded(enterprisecontract.FieldEnterpriseID)
	return u
}

// SetStart sets the "start" field.
func (u *EnterpriseContractUpsert) SetStart(v time.Time) *EnterpriseContractUpsert {
	u.Set(enterprisecontract.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *EnterpriseContractUpsert) UpdateStart() *EnterpriseContractUpsert {
	u.SetExcluded(enterprisecontract.FieldStart)
	return u
}

// SetEnd sets the "end" field.
func (u *EnterpriseContractUpsert) SetEnd(v time.Time) *EnterpriseContractUpsert {
	u.Set(enterprisecontract.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *EnterpriseContractUpsert) UpdateEnd() *EnterpriseContractUpsert {
	u.SetExcluded(enterprisecontract.FieldEnd)
	return u
}

// SetFile sets the "file" field.
func (u *EnterpriseContractUpsert) SetFile(v string) *EnterpriseContractUpsert {
	u.Set(enterprisecontract.FieldFile, v)
	return u
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *EnterpriseContractUpsert) UpdateFile() *EnterpriseContractUpsert {
	u.SetExcluded(enterprisecontract.FieldFile)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EnterpriseContract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EnterpriseContractUpsertOne) UpdateNewValues() *EnterpriseContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(enterprisecontract.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(enterprisecontract.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterpriseContract.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EnterpriseContractUpsertOne) Ignore() *EnterpriseContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseContractUpsertOne) DoNothing() *EnterpriseContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseContractCreate.OnConflict
// documentation for more info.
func (u *EnterpriseContractUpsertOne) Update(set func(*EnterpriseContractUpsert)) *EnterpriseContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseContractUpsertOne) SetUpdatedAt(v time.Time) *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseContractUpsertOne) UpdateUpdatedAt() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseContractUpsertOne) SetDeletedAt(v time.Time) *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseContractUpsertOne) UpdateDeletedAt() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseContractUpsertOne) ClearDeletedAt() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseContractUpsertOne) SetLastModifier(v *model.Modifier) *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseContractUpsertOne) UpdateLastModifier() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseContractUpsertOne) ClearLastModifier() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterpriseContractUpsertOne) SetRemark(v string) *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseContractUpsertOne) UpdateRemark() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseContractUpsertOne) ClearRemark() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.ClearRemark()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseContractUpsertOne) SetEnterpriseID(v uint64) *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseContractUpsertOne) UpdateEnterpriseID() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetStart sets the "start" field.
func (u *EnterpriseContractUpsertOne) SetStart(v time.Time) *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *EnterpriseContractUpsertOne) UpdateStart() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *EnterpriseContractUpsertOne) SetEnd(v time.Time) *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *EnterpriseContractUpsertOne) UpdateEnd() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateEnd()
	})
}

// SetFile sets the "file" field.
func (u *EnterpriseContractUpsertOne) SetFile(v string) *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetFile(v)
	})
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *EnterpriseContractUpsertOne) UpdateFile() *EnterpriseContractUpsertOne {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateFile()
	})
}

// Exec executes the query.
func (u *EnterpriseContractUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseContractCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseContractUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnterpriseContractUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnterpriseContractUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnterpriseContractCreateBulk is the builder for creating many EnterpriseContract entities in bulk.
type EnterpriseContractCreateBulk struct {
	config
	builders []*EnterpriseContractCreate
	conflict []sql.ConflictOption
}

// Save creates the EnterpriseContract entities in the database.
func (eccb *EnterpriseContractCreateBulk) Save(ctx context.Context) ([]*EnterpriseContract, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EnterpriseContract, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnterpriseContractMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EnterpriseContractCreateBulk) SaveX(ctx context.Context) []*EnterpriseContract {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EnterpriseContractCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EnterpriseContractCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseContract.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (eccb *EnterpriseContractCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnterpriseContractUpsertBulk {
	eccb.conflict = opts
	return &EnterpriseContractUpsertBulk{
		create: eccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseContract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eccb *EnterpriseContractCreateBulk) OnConflictColumns(columns ...string) *EnterpriseContractUpsertBulk {
	eccb.conflict = append(eccb.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseContractUpsertBulk{
		create: eccb,
	}
}

// EnterpriseContractUpsertBulk is the builder for "upsert"-ing
// a bulk of EnterpriseContract nodes.
type EnterpriseContractUpsertBulk struct {
	create *EnterpriseContractCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnterpriseContract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EnterpriseContractUpsertBulk) UpdateNewValues() *EnterpriseContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(enterprisecontract.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(enterprisecontract.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterpriseContract.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EnterpriseContractUpsertBulk) Ignore() *EnterpriseContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseContractUpsertBulk) DoNothing() *EnterpriseContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseContractCreateBulk.OnConflict
// documentation for more info.
func (u *EnterpriseContractUpsertBulk) Update(set func(*EnterpriseContractUpsert)) *EnterpriseContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseContractUpsertBulk) SetUpdatedAt(v time.Time) *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseContractUpsertBulk) UpdateUpdatedAt() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseContractUpsertBulk) SetDeletedAt(v time.Time) *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseContractUpsertBulk) UpdateDeletedAt() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseContractUpsertBulk) ClearDeletedAt() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseContractUpsertBulk) SetLastModifier(v *model.Modifier) *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseContractUpsertBulk) UpdateLastModifier() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseContractUpsertBulk) ClearLastModifier() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterpriseContractUpsertBulk) SetRemark(v string) *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseContractUpsertBulk) UpdateRemark() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseContractUpsertBulk) ClearRemark() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.ClearRemark()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseContractUpsertBulk) SetEnterpriseID(v uint64) *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseContractUpsertBulk) UpdateEnterpriseID() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetStart sets the "start" field.
func (u *EnterpriseContractUpsertBulk) SetStart(v time.Time) *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *EnterpriseContractUpsertBulk) UpdateStart() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *EnterpriseContractUpsertBulk) SetEnd(v time.Time) *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *EnterpriseContractUpsertBulk) UpdateEnd() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateEnd()
	})
}

// SetFile sets the "file" field.
func (u *EnterpriseContractUpsertBulk) SetFile(v string) *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.SetFile(v)
	})
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *EnterpriseContractUpsertBulk) UpdateFile() *EnterpriseContractUpsertBulk {
	return u.Update(func(s *EnterpriseContractUpsert) {
		s.UpdateFile()
	})
}

// Exec executes the query.
func (u *EnterpriseContractUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EnterpriseContractCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseContractCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseContractUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
