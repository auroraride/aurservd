// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// BatteryUpdate is the builder for updating Battery entities.
type BatteryUpdate struct {
	config
	hooks     []Hook
	mutation  *BatteryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BatteryUpdate builder.
func (bu *BatteryUpdate) Where(ps ...predicate.Battery) *BatteryUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BatteryUpdate) SetUpdatedAt(t time.Time) *BatteryUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BatteryUpdate) SetDeletedAt(t time.Time) *BatteryUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableDeletedAt(t *time.Time) *BatteryUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BatteryUpdate) ClearDeletedAt() *BatteryUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetLastModifier sets the "last_modifier" field.
func (bu *BatteryUpdate) SetLastModifier(m *model.Modifier) *BatteryUpdate {
	bu.mutation.SetLastModifier(m)
	return bu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bu *BatteryUpdate) ClearLastModifier() *BatteryUpdate {
	bu.mutation.ClearLastModifier()
	return bu
}

// SetRemark sets the "remark" field.
func (bu *BatteryUpdate) SetRemark(s string) *BatteryUpdate {
	bu.mutation.SetRemark(s)
	return bu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableRemark(s *string) *BatteryUpdate {
	if s != nil {
		bu.SetRemark(*s)
	}
	return bu
}

// ClearRemark clears the value of the "remark" field.
func (bu *BatteryUpdate) ClearRemark() *BatteryUpdate {
	bu.mutation.ClearRemark()
	return bu
}

// SetCityID sets the "city_id" field.
func (bu *BatteryUpdate) SetCityID(u uint64) *BatteryUpdate {
	bu.mutation.SetCityID(u)
	return bu
}

// SetRiderID sets the "rider_id" field.
func (bu *BatteryUpdate) SetRiderID(u uint64) *BatteryUpdate {
	bu.mutation.SetRiderID(u)
	return bu
}

// SetCabinetID sets the "cabinet_id" field.
func (bu *BatteryUpdate) SetCabinetID(u uint64) *BatteryUpdate {
	bu.mutation.SetCabinetID(u)
	return bu
}

// SetSn sets the "sn" field.
func (bu *BatteryUpdate) SetSn(s string) *BatteryUpdate {
	bu.mutation.SetSn(s)
	return bu
}

// SetEnable sets the "enable" field.
func (bu *BatteryUpdate) SetEnable(b bool) *BatteryUpdate {
	bu.mutation.SetEnable(b)
	return bu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (bu *BatteryUpdate) SetNillableEnable(b *bool) *BatteryUpdate {
	if b != nil {
		bu.SetEnable(*b)
	}
	return bu
}

// SetModel sets the "model" field.
func (bu *BatteryUpdate) SetModel(s string) *BatteryUpdate {
	bu.mutation.SetModel(s)
	return bu
}

// SetCity sets the "city" edge to the City entity.
func (bu *BatteryUpdate) SetCity(c *City) *BatteryUpdate {
	return bu.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (bu *BatteryUpdate) SetRider(r *Rider) *BatteryUpdate {
	return bu.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (bu *BatteryUpdate) SetCabinet(c *Cabinet) *BatteryUpdate {
	return bu.SetCabinetID(c.ID)
}

// Mutation returns the BatteryMutation object of the builder.
func (bu *BatteryUpdate) Mutation() *BatteryMutation {
	return bu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (bu *BatteryUpdate) ClearCity() *BatteryUpdate {
	bu.mutation.ClearCity()
	return bu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (bu *BatteryUpdate) ClearRider() *BatteryUpdate {
	bu.mutation.ClearRider()
	return bu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (bu *BatteryUpdate) ClearCabinet() *BatteryUpdate {
	bu.mutation.ClearCabinet()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BatteryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := bu.defaults(); err != nil {
		return 0, err
	}
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BatteryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BatteryUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BatteryUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BatteryUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BatteryUpdate) defaults() error {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		if battery.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized battery.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := battery.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bu *BatteryUpdate) check() error {
	if _, ok := bu.mutation.CityID(); bu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Battery.city"`)
	}
	if _, ok := bu.mutation.RiderID(); bu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Battery.rider"`)
	}
	if _, ok := bu.mutation.CabinetID(); bu.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Battery.cabinet"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bu *BatteryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryUpdate {
	bu.modifiers = append(bu.modifiers, modifiers...)
	return bu
}

func (bu *BatteryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   battery.Table,
			Columns: battery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: battery.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: battery.FieldUpdatedAt,
		})
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: battery.FieldDeletedAt,
		})
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: battery.FieldDeletedAt,
		})
	}
	if bu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: battery.FieldCreator,
		})
	}
	if value, ok := bu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: battery.FieldLastModifier,
		})
	}
	if bu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: battery.FieldLastModifier,
		})
	}
	if value, ok := bu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battery.FieldRemark,
		})
	}
	if bu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: battery.FieldRemark,
		})
	}
	if value, ok := bu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battery.FieldSn,
		})
	}
	if value, ok := bu.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: battery.FieldEnable,
		})
	}
	if value, ok := bu.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battery.FieldModel,
		})
	}
	if bu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CityTable,
			Columns: []string{battery.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CityTable,
			Columns: []string{battery.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.RiderTable,
			Columns: []string{battery.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.RiderTable,
			Columns: []string{battery.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CabinetTable,
			Columns: []string{battery.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CabinetTable,
			Columns: []string{battery.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = bu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{battery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BatteryUpdateOne is the builder for updating a single Battery entity.
type BatteryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BatteryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BatteryUpdateOne) SetUpdatedAt(t time.Time) *BatteryUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BatteryUpdateOne) SetDeletedAt(t time.Time) *BatteryUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableDeletedAt(t *time.Time) *BatteryUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BatteryUpdateOne) ClearDeletedAt() *BatteryUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetLastModifier sets the "last_modifier" field.
func (buo *BatteryUpdateOne) SetLastModifier(m *model.Modifier) *BatteryUpdateOne {
	buo.mutation.SetLastModifier(m)
	return buo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (buo *BatteryUpdateOne) ClearLastModifier() *BatteryUpdateOne {
	buo.mutation.ClearLastModifier()
	return buo
}

// SetRemark sets the "remark" field.
func (buo *BatteryUpdateOne) SetRemark(s string) *BatteryUpdateOne {
	buo.mutation.SetRemark(s)
	return buo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableRemark(s *string) *BatteryUpdateOne {
	if s != nil {
		buo.SetRemark(*s)
	}
	return buo
}

// ClearRemark clears the value of the "remark" field.
func (buo *BatteryUpdateOne) ClearRemark() *BatteryUpdateOne {
	buo.mutation.ClearRemark()
	return buo
}

// SetCityID sets the "city_id" field.
func (buo *BatteryUpdateOne) SetCityID(u uint64) *BatteryUpdateOne {
	buo.mutation.SetCityID(u)
	return buo
}

// SetRiderID sets the "rider_id" field.
func (buo *BatteryUpdateOne) SetRiderID(u uint64) *BatteryUpdateOne {
	buo.mutation.SetRiderID(u)
	return buo
}

// SetCabinetID sets the "cabinet_id" field.
func (buo *BatteryUpdateOne) SetCabinetID(u uint64) *BatteryUpdateOne {
	buo.mutation.SetCabinetID(u)
	return buo
}

// SetSn sets the "sn" field.
func (buo *BatteryUpdateOne) SetSn(s string) *BatteryUpdateOne {
	buo.mutation.SetSn(s)
	return buo
}

// SetEnable sets the "enable" field.
func (buo *BatteryUpdateOne) SetEnable(b bool) *BatteryUpdateOne {
	buo.mutation.SetEnable(b)
	return buo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (buo *BatteryUpdateOne) SetNillableEnable(b *bool) *BatteryUpdateOne {
	if b != nil {
		buo.SetEnable(*b)
	}
	return buo
}

// SetModel sets the "model" field.
func (buo *BatteryUpdateOne) SetModel(s string) *BatteryUpdateOne {
	buo.mutation.SetModel(s)
	return buo
}

// SetCity sets the "city" edge to the City entity.
func (buo *BatteryUpdateOne) SetCity(c *City) *BatteryUpdateOne {
	return buo.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (buo *BatteryUpdateOne) SetRider(r *Rider) *BatteryUpdateOne {
	return buo.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (buo *BatteryUpdateOne) SetCabinet(c *Cabinet) *BatteryUpdateOne {
	return buo.SetCabinetID(c.ID)
}

// Mutation returns the BatteryMutation object of the builder.
func (buo *BatteryUpdateOne) Mutation() *BatteryMutation {
	return buo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (buo *BatteryUpdateOne) ClearCity() *BatteryUpdateOne {
	buo.mutation.ClearCity()
	return buo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (buo *BatteryUpdateOne) ClearRider() *BatteryUpdateOne {
	buo.mutation.ClearRider()
	return buo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (buo *BatteryUpdateOne) ClearCabinet() *BatteryUpdateOne {
	buo.mutation.ClearCabinet()
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BatteryUpdateOne) Select(field string, fields ...string) *BatteryUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Battery entity.
func (buo *BatteryUpdateOne) Save(ctx context.Context) (*Battery, error) {
	var (
		err  error
		node *Battery
	)
	if err := buo.defaults(); err != nil {
		return nil, err
	}
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BatteryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Battery)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BatteryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BatteryUpdateOne) SaveX(ctx context.Context) *Battery {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BatteryUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BatteryUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BatteryUpdateOne) defaults() error {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		if battery.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized battery.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := battery.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (buo *BatteryUpdateOne) check() error {
	if _, ok := buo.mutation.CityID(); buo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Battery.city"`)
	}
	if _, ok := buo.mutation.RiderID(); buo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Battery.rider"`)
	}
	if _, ok := buo.mutation.CabinetID(); buo.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Battery.cabinet"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buo *BatteryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryUpdateOne {
	buo.modifiers = append(buo.modifiers, modifiers...)
	return buo
}

func (buo *BatteryUpdateOne) sqlSave(ctx context.Context) (_node *Battery, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   battery.Table,
			Columns: battery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: battery.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Battery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, battery.FieldID)
		for _, f := range fields {
			if !battery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != battery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: battery.FieldUpdatedAt,
		})
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: battery.FieldDeletedAt,
		})
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: battery.FieldDeletedAt,
		})
	}
	if buo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: battery.FieldCreator,
		})
	}
	if value, ok := buo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: battery.FieldLastModifier,
		})
	}
	if buo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: battery.FieldLastModifier,
		})
	}
	if value, ok := buo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battery.FieldRemark,
		})
	}
	if buo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: battery.FieldRemark,
		})
	}
	if value, ok := buo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battery.FieldSn,
		})
	}
	if value, ok := buo.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: battery.FieldEnable,
		})
	}
	if value, ok := buo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: battery.FieldModel,
		})
	}
	if buo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CityTable,
			Columns: []string{battery.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CityTable,
			Columns: []string{battery.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.RiderTable,
			Columns: []string{battery.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.RiderTable,
			Columns: []string{battery.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CabinetTable,
			Columns: []string{battery.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CabinetTable,
			Columns: []string{battery.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = buo.modifiers
	_node = &Battery{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{battery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
