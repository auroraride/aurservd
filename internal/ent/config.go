// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	stdsql "database/sql"
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
)

// Option function to configure the client.
type Option func(*config)

// Config is the configuration for the client and its builder.
type config struct {
	// driver used for executing database requests.
	driver dialect.Driver
	// debug enable a debug logging.
	debug bool
	// log used for logging on debug mode.
	log func(...any)
	// hooks to execute on mutations.
	hooks *hooks
	// interceptors to execute on queries.
	inters *inters
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Agent                []ent.Hook
		Allocate             []ent.Hook
		Assistance           []ent.Hook
		Attendance           []ent.Hook
		Battery              []ent.Hook
		BatteryFlow          []ent.Hook
		BatteryModel         []ent.Hook
		Branch               []ent.Hook
		BranchContract       []ent.Hook
		Business             []ent.Hook
		Cabinet              []ent.Hook
		CabinetFault         []ent.Hook
		City                 []ent.Hook
		Commission           []ent.Hook
		Contract             []ent.Hook
		Coupon               []ent.Hook
		CouponAssembly       []ent.Hook
		CouponTemplate       []ent.Hook
		Ebike                []ent.Hook
		EbikeBrand           []ent.Hook
		Employee             []ent.Hook
		Enterprise           []ent.Hook
		EnterpriseBill       []ent.Hook
		EnterpriseContract   []ent.Hook
		EnterprisePrepayment []ent.Hook
		EnterprisePrice      []ent.Hook
		EnterpriseStatement  []ent.Hook
		EnterpriseStation    []ent.Hook
		Exception            []ent.Hook
		Exchange             []ent.Hook
		Export               []ent.Hook
		Inventory            []ent.Hook
		Manager              []ent.Hook
		Order                []ent.Hook
		OrderRefund          []ent.Hook
		Person               []ent.Hook
		Plan                 []ent.Hook
		PlanIntroduce        []ent.Hook
		PointLog             []ent.Hook
		Reserve              []ent.Hook
		Rider                []ent.Hook
		RiderFollowUp        []ent.Hook
		Role                 []ent.Hook
		Setting              []ent.Hook
		Stock                []ent.Hook
		Store                []ent.Hook
		Subscribe            []ent.Hook
		SubscribeAlter       []ent.Hook
		SubscribePause       []ent.Hook
		SubscribeReminder    []ent.Hook
		SubscribeSuspend     []ent.Hook
	}
	inters struct {
		Agent                []ent.Interceptor
		Allocate             []ent.Interceptor
		Assistance           []ent.Interceptor
		Attendance           []ent.Interceptor
		Battery              []ent.Interceptor
		BatteryFlow          []ent.Interceptor
		BatteryModel         []ent.Interceptor
		Branch               []ent.Interceptor
		BranchContract       []ent.Interceptor
		Business             []ent.Interceptor
		Cabinet              []ent.Interceptor
		CabinetFault         []ent.Interceptor
		City                 []ent.Interceptor
		Commission           []ent.Interceptor
		Contract             []ent.Interceptor
		Coupon               []ent.Interceptor
		CouponAssembly       []ent.Interceptor
		CouponTemplate       []ent.Interceptor
		Ebike                []ent.Interceptor
		EbikeBrand           []ent.Interceptor
		Employee             []ent.Interceptor
		Enterprise           []ent.Interceptor
		EnterpriseBill       []ent.Interceptor
		EnterpriseContract   []ent.Interceptor
		EnterprisePrepayment []ent.Interceptor
		EnterprisePrice      []ent.Interceptor
		EnterpriseStatement  []ent.Interceptor
		EnterpriseStation    []ent.Interceptor
		Exception            []ent.Interceptor
		Exchange             []ent.Interceptor
		Export               []ent.Interceptor
		Inventory            []ent.Interceptor
		Manager              []ent.Interceptor
		Order                []ent.Interceptor
		OrderRefund          []ent.Interceptor
		Person               []ent.Interceptor
		Plan                 []ent.Interceptor
		PlanIntroduce        []ent.Interceptor
		PointLog             []ent.Interceptor
		Reserve              []ent.Interceptor
		Rider                []ent.Interceptor
		RiderFollowUp        []ent.Interceptor
		Role                 []ent.Interceptor
		Setting              []ent.Interceptor
		Stock                []ent.Interceptor
		Store                []ent.Interceptor
		Subscribe            []ent.Interceptor
		SubscribeAlter       []ent.Interceptor
		SubscribePause       []ent.Interceptor
		SubscribeReminder    []ent.Interceptor
		SubscribeSuspend     []ent.Interceptor
	}
)

// Options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
