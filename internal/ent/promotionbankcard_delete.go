// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
)

// PromotionBankCardDelete is the builder for deleting a PromotionBankCard entity.
type PromotionBankCardDelete struct {
	config
	hooks    []Hook
	mutation *PromotionBankCardMutation
}

// Where appends a list predicates to the PromotionBankCardDelete builder.
func (pbcd *PromotionBankCardDelete) Where(ps ...predicate.PromotionBankCard) *PromotionBankCardDelete {
	pbcd.mutation.Where(ps...)
	return pbcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pbcd *PromotionBankCardDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pbcd.sqlExec, pbcd.mutation, pbcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcd *PromotionBankCardDelete) ExecX(ctx context.Context) int {
	n, err := pbcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pbcd *PromotionBankCardDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(promotionbankcard.Table, sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64))
	if ps := pbcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pbcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pbcd.mutation.done = true
	return affected, err
}

// PromotionBankCardDeleteOne is the builder for deleting a single PromotionBankCard entity.
type PromotionBankCardDeleteOne struct {
	pbcd *PromotionBankCardDelete
}

// Where appends a list predicates to the PromotionBankCardDelete builder.
func (pbcdo *PromotionBankCardDeleteOne) Where(ps ...predicate.PromotionBankCard) *PromotionBankCardDeleteOne {
	pbcdo.pbcd.mutation.Where(ps...)
	return pbcdo
}

// Exec executes the deletion query.
func (pbcdo *PromotionBankCardDeleteOne) Exec(ctx context.Context) error {
	n, err := pbcdo.pbcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{promotionbankcard.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcdo *PromotionBankCardDeleteOne) ExecX(ctx context.Context) {
	if err := pbcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
