// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/orderrefund"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// OrderRefundMutation represents an operation that mutates the OrderRefund nodes in the graph.
type OrderRefundMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	creator       **model.Modifier
	last_modifier **model.Modifier
	remark        *string
	status        *uint8
	addstatus     *int8
	amount        *float64
	addamount     *float64
	out_refund_no *string
	reason        *string
	refund_at     *time.Time
	clearedFields map[string]struct{}
	_order        *uint64
	cleared_order bool
	done          bool
	oldValue      func(context.Context) (*OrderRefund, error)
	predicates    []predicate.OrderRefund
}

var _ ent.Mutation = (*OrderRefundMutation)(nil)

// orderrefundOption allows management of the mutation configuration using functional options.
type orderrefundOption func(*OrderRefundMutation)

// newOrderRefundMutation creates new mutation for the OrderRefund entity.
func newOrderRefundMutation(c config, op Op, opts ...orderrefundOption) *OrderRefundMutation {
	m := &OrderRefundMutation{
		config:        c,
		op:            op,
		typ:           TypeOrderRefund,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderRefundID sets the ID field of the mutation.
func withOrderRefundID(id uint64) orderrefundOption {
	return func(m *OrderRefundMutation) {
		var (
			err   error
			once  sync.Once
			value *OrderRefund
		)
		m.oldValue = func(ctx context.Context) (*OrderRefund, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrderRefund.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrderRefund sets the old OrderRefund of the mutation.
func withOrderRefund(node *OrderRefund) orderrefundOption {
	return func(m *OrderRefundMutation) {
		m.oldValue = func(context.Context) (*OrderRefund, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderRefundMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderRefundMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderRefundMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderRefundMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrderRefund.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderRefundMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderRefundMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderRefundMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderRefundMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderRefundMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderRefundMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderRefundMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderRefundMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrderRefundMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[orderrefund.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrderRefundMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[orderrefund.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderRefundMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, orderrefund.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *OrderRefundMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *OrderRefundMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *OrderRefundMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[orderrefund.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *OrderRefundMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[orderrefund.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *OrderRefundMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, orderrefund.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *OrderRefundMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *OrderRefundMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *OrderRefundMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[orderrefund.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *OrderRefundMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[orderrefund.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *OrderRefundMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, orderrefund.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *OrderRefundMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *OrderRefundMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *OrderRefundMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[orderrefund.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *OrderRefundMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[orderrefund.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *OrderRefundMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, orderrefund.FieldRemark)
}

// SetOrderID sets the "order_id" field.
func (m *OrderRefundMutation) SetOrderID(u uint64) {
	m._order = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *OrderRefundMutation) OrderID() (r uint64, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldOrderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *OrderRefundMutation) ResetOrderID() {
	m._order = nil
}

// SetStatus sets the "status" field.
func (m *OrderRefundMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderRefundMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *OrderRefundMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *OrderRefundMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderRefundMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetAmount sets the "amount" field.
func (m *OrderRefundMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *OrderRefundMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *OrderRefundMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *OrderRefundMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *OrderRefundMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetOutRefundNo sets the "out_refund_no" field.
func (m *OrderRefundMutation) SetOutRefundNo(s string) {
	m.out_refund_no = &s
}

// OutRefundNo returns the value of the "out_refund_no" field in the mutation.
func (m *OrderRefundMutation) OutRefundNo() (r string, exists bool) {
	v := m.out_refund_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOutRefundNo returns the old "out_refund_no" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldOutRefundNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutRefundNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutRefundNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutRefundNo: %w", err)
	}
	return oldValue.OutRefundNo, nil
}

// ResetOutRefundNo resets all changes to the "out_refund_no" field.
func (m *OrderRefundMutation) ResetOutRefundNo() {
	m.out_refund_no = nil
}

// SetReason sets the "reason" field.
func (m *OrderRefundMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *OrderRefundMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *OrderRefundMutation) ResetReason() {
	m.reason = nil
}

// SetRefundAt sets the "refund_at" field.
func (m *OrderRefundMutation) SetRefundAt(t time.Time) {
	m.refund_at = &t
}

// RefundAt returns the value of the "refund_at" field in the mutation.
func (m *OrderRefundMutation) RefundAt() (r time.Time, exists bool) {
	v := m.refund_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundAt returns the old "refund_at" field's value of the OrderRefund entity.
// If the OrderRefund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderRefundMutation) OldRefundAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundAt: %w", err)
	}
	return oldValue.RefundAt, nil
}

// ClearRefundAt clears the value of the "refund_at" field.
func (m *OrderRefundMutation) ClearRefundAt() {
	m.refund_at = nil
	m.clearedFields[orderrefund.FieldRefundAt] = struct{}{}
}

// RefundAtCleared returns if the "refund_at" field was cleared in this mutation.
func (m *OrderRefundMutation) RefundAtCleared() bool {
	_, ok := m.clearedFields[orderrefund.FieldRefundAt]
	return ok
}

// ResetRefundAt resets all changes to the "refund_at" field.
func (m *OrderRefundMutation) ResetRefundAt() {
	m.refund_at = nil
	delete(m.clearedFields, orderrefund.FieldRefundAt)
}

// ClearOrder clears the "order" edge to the Order entity.
func (m *OrderRefundMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the Order entity was cleared.
func (m *OrderRefundMutation) OrderCleared() bool {
	return m.cleared_order
}

// OrderIDs returns the "order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderID instead. It exists only for internal usage by the builders.
func (m *OrderRefundMutation) OrderIDs() (ids []uint64) {
	if id := m._order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *OrderRefundMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
}

// Where appends a list predicates to the OrderRefundMutation builder.
func (m *OrderRefundMutation) Where(ps ...predicate.OrderRefund) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderRefundMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (OrderRefund).
func (m *OrderRefundMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderRefundMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, orderrefund.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orderrefund.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, orderrefund.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, orderrefund.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, orderrefund.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, orderrefund.FieldRemark)
	}
	if m._order != nil {
		fields = append(fields, orderrefund.FieldOrderID)
	}
	if m.status != nil {
		fields = append(fields, orderrefund.FieldStatus)
	}
	if m.amount != nil {
		fields = append(fields, orderrefund.FieldAmount)
	}
	if m.out_refund_no != nil {
		fields = append(fields, orderrefund.FieldOutRefundNo)
	}
	if m.reason != nil {
		fields = append(fields, orderrefund.FieldReason)
	}
	if m.refund_at != nil {
		fields = append(fields, orderrefund.FieldRefundAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderRefundMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orderrefund.FieldCreatedAt:
		return m.CreatedAt()
	case orderrefund.FieldUpdatedAt:
		return m.UpdatedAt()
	case orderrefund.FieldDeletedAt:
		return m.DeletedAt()
	case orderrefund.FieldCreator:
		return m.Creator()
	case orderrefund.FieldLastModifier:
		return m.LastModifier()
	case orderrefund.FieldRemark:
		return m.Remark()
	case orderrefund.FieldOrderID:
		return m.OrderID()
	case orderrefund.FieldStatus:
		return m.Status()
	case orderrefund.FieldAmount:
		return m.Amount()
	case orderrefund.FieldOutRefundNo:
		return m.OutRefundNo()
	case orderrefund.FieldReason:
		return m.Reason()
	case orderrefund.FieldRefundAt:
		return m.RefundAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderRefundMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orderrefund.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orderrefund.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orderrefund.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orderrefund.FieldCreator:
		return m.OldCreator(ctx)
	case orderrefund.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case orderrefund.FieldRemark:
		return m.OldRemark(ctx)
	case orderrefund.FieldOrderID:
		return m.OldOrderID(ctx)
	case orderrefund.FieldStatus:
		return m.OldStatus(ctx)
	case orderrefund.FieldAmount:
		return m.OldAmount(ctx)
	case orderrefund.FieldOutRefundNo:
		return m.OldOutRefundNo(ctx)
	case orderrefund.FieldReason:
		return m.OldReason(ctx)
	case orderrefund.FieldRefundAt:
		return m.OldRefundAt(ctx)
	}
	return nil, fmt.Errorf("unknown OrderRefund field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderRefundMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orderrefund.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orderrefund.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orderrefund.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orderrefund.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case orderrefund.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case orderrefund.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case orderrefund.FieldOrderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case orderrefund.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case orderrefund.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case orderrefund.FieldOutRefundNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutRefundNo(v)
		return nil
	case orderrefund.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case orderrefund.FieldRefundAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundAt(v)
		return nil
	}
	return fmt.Errorf("unknown OrderRefund field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderRefundMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, orderrefund.FieldStatus)
	}
	if m.addamount != nil {
		fields = append(fields, orderrefund.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderRefundMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case orderrefund.FieldStatus:
		return m.AddedStatus()
	case orderrefund.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderRefundMutation) AddField(name string, value ent.Value) error {
	switch name {
	case orderrefund.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case orderrefund.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown OrderRefund numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderRefundMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orderrefund.FieldDeletedAt) {
		fields = append(fields, orderrefund.FieldDeletedAt)
	}
	if m.FieldCleared(orderrefund.FieldCreator) {
		fields = append(fields, orderrefund.FieldCreator)
	}
	if m.FieldCleared(orderrefund.FieldLastModifier) {
		fields = append(fields, orderrefund.FieldLastModifier)
	}
	if m.FieldCleared(orderrefund.FieldRemark) {
		fields = append(fields, orderrefund.FieldRemark)
	}
	if m.FieldCleared(orderrefund.FieldRefundAt) {
		fields = append(fields, orderrefund.FieldRefundAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderRefundMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderRefundMutation) ClearField(name string) error {
	switch name {
	case orderrefund.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case orderrefund.FieldCreator:
		m.ClearCreator()
		return nil
	case orderrefund.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case orderrefund.FieldRemark:
		m.ClearRemark()
		return nil
	case orderrefund.FieldRefundAt:
		m.ClearRefundAt()
		return nil
	}
	return fmt.Errorf("unknown OrderRefund nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderRefundMutation) ResetField(name string) error {
	switch name {
	case orderrefund.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orderrefund.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orderrefund.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orderrefund.FieldCreator:
		m.ResetCreator()
		return nil
	case orderrefund.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case orderrefund.FieldRemark:
		m.ResetRemark()
		return nil
	case orderrefund.FieldOrderID:
		m.ResetOrderID()
		return nil
	case orderrefund.FieldStatus:
		m.ResetStatus()
		return nil
	case orderrefund.FieldAmount:
		m.ResetAmount()
		return nil
	case orderrefund.FieldOutRefundNo:
		m.ResetOutRefundNo()
		return nil
	case orderrefund.FieldReason:
		m.ResetReason()
		return nil
	case orderrefund.FieldRefundAt:
		m.ResetRefundAt()
		return nil
	}
	return fmt.Errorf("unknown OrderRefund field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderRefundMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._order != nil {
		edges = append(edges, orderrefund.EdgeOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderRefundMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orderrefund.EdgeOrder:
		if id := m._order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderRefundMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderRefundMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderRefundMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_order {
		edges = append(edges, orderrefund.EdgeOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderRefundMutation) EdgeCleared(name string) bool {
	switch name {
	case orderrefund.EdgeOrder:
		return m.cleared_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderRefundMutation) ClearEdge(name string) error {
	switch name {
	case orderrefund.EdgeOrder:
		m.ClearOrder()
		return nil
	}
	return fmt.Errorf("unknown OrderRefund unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderRefundMutation) ResetEdge(name string) error {
	switch name {
	case orderrefund.EdgeOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown OrderRefund edge %s", name)
}

