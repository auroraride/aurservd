// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assetattributes"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
)

// AssetAttributesCreate is the builder for creating a AssetAttributes entity.
type AssetAttributesCreate struct {
	config
	mutation *AssetAttributesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (aac *AssetAttributesCreate) SetCreatedAt(t time.Time) *AssetAttributesCreate {
	aac.mutation.SetCreatedAt(t)
	return aac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aac *AssetAttributesCreate) SetNillableCreatedAt(t *time.Time) *AssetAttributesCreate {
	if t != nil {
		aac.SetCreatedAt(*t)
	}
	return aac
}

// SetUpdatedAt sets the "updated_at" field.
func (aac *AssetAttributesCreate) SetUpdatedAt(t time.Time) *AssetAttributesCreate {
	aac.mutation.SetUpdatedAt(t)
	return aac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aac *AssetAttributesCreate) SetNillableUpdatedAt(t *time.Time) *AssetAttributesCreate {
	if t != nil {
		aac.SetUpdatedAt(*t)
	}
	return aac
}

// SetAssetType sets the "asset_type" field.
func (aac *AssetAttributesCreate) SetAssetType(u uint8) *AssetAttributesCreate {
	aac.mutation.SetAssetType(u)
	return aac
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (aac *AssetAttributesCreate) SetNillableAssetType(u *uint8) *AssetAttributesCreate {
	if u != nil {
		aac.SetAssetType(*u)
	}
	return aac
}

// SetName sets the "name" field.
func (aac *AssetAttributesCreate) SetName(s string) *AssetAttributesCreate {
	aac.mutation.SetName(s)
	return aac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aac *AssetAttributesCreate) SetNillableName(s *string) *AssetAttributesCreate {
	if s != nil {
		aac.SetName(*s)
	}
	return aac
}

// SetKey sets the "key" field.
func (aac *AssetAttributesCreate) SetKey(s string) *AssetAttributesCreate {
	aac.mutation.SetKey(s)
	return aac
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aac *AssetAttributesCreate) SetNillableKey(s *string) *AssetAttributesCreate {
	if s != nil {
		aac.SetKey(*s)
	}
	return aac
}

// AddValueIDs adds the "values" edge to the AssetAttributeValues entity by IDs.
func (aac *AssetAttributesCreate) AddValueIDs(ids ...uint64) *AssetAttributesCreate {
	aac.mutation.AddValueIDs(ids...)
	return aac
}

// AddValues adds the "values" edges to the AssetAttributeValues entity.
func (aac *AssetAttributesCreate) AddValues(a ...*AssetAttributeValues) *AssetAttributesCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aac.AddValueIDs(ids...)
}

// Mutation returns the AssetAttributesMutation object of the builder.
func (aac *AssetAttributesCreate) Mutation() *AssetAttributesMutation {
	return aac.mutation
}

// Save creates the AssetAttributes in the database.
func (aac *AssetAttributesCreate) Save(ctx context.Context) (*AssetAttributes, error) {
	aac.defaults()
	return withHooks(ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *AssetAttributesCreate) SaveX(ctx context.Context) *AssetAttributes {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *AssetAttributesCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *AssetAttributesCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aac *AssetAttributesCreate) defaults() {
	if _, ok := aac.mutation.CreatedAt(); !ok {
		v := assetattributes.DefaultCreatedAt()
		aac.mutation.SetCreatedAt(v)
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		v := assetattributes.DefaultUpdatedAt()
		aac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *AssetAttributesCreate) check() error {
	if _, ok := aac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetAttributes.created_at"`)}
	}
	if _, ok := aac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetAttributes.updated_at"`)}
	}
	return nil
}

func (aac *AssetAttributesCreate) sqlSave(ctx context.Context) (*AssetAttributes, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *AssetAttributesCreate) createSpec() (*AssetAttributes, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetAttributes{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(assetattributes.Table, sqlgraph.NewFieldSpec(assetattributes.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = aac.conflict
	if value, ok := aac.mutation.CreatedAt(); ok {
		_spec.SetField(assetattributes.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aac.mutation.UpdatedAt(); ok {
		_spec.SetField(assetattributes.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aac.mutation.AssetType(); ok {
		_spec.SetField(assetattributes.FieldAssetType, field.TypeUint8, value)
		_node.AssetType = value
	}
	if value, ok := aac.mutation.Name(); ok {
		_spec.SetField(assetattributes.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := aac.mutation.Key(); ok {
		_spec.SetField(assetattributes.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if nodes := aac.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetattributes.ValuesTable,
			Columns: []string{assetattributes.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetAttributes.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetAttributesUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aac *AssetAttributesCreate) OnConflict(opts ...sql.ConflictOption) *AssetAttributesUpsertOne {
	aac.conflict = opts
	return &AssetAttributesUpsertOne{
		create: aac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetAttributes.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aac *AssetAttributesCreate) OnConflictColumns(columns ...string) *AssetAttributesUpsertOne {
	aac.conflict = append(aac.conflict, sql.ConflictColumns(columns...))
	return &AssetAttributesUpsertOne{
		create: aac,
	}
}

type (
	// AssetAttributesUpsertOne is the builder for "upsert"-ing
	//  one AssetAttributes node.
	AssetAttributesUpsertOne struct {
		create *AssetAttributesCreate
	}

	// AssetAttributesUpsert is the "OnConflict" setter.
	AssetAttributesUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetAttributesUpsert) SetUpdatedAt(v time.Time) *AssetAttributesUpsert {
	u.Set(assetattributes.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetAttributesUpsert) UpdateUpdatedAt() *AssetAttributesUpsert {
	u.SetExcluded(assetattributes.FieldUpdatedAt)
	return u
}

// SetAssetType sets the "asset_type" field.
func (u *AssetAttributesUpsert) SetAssetType(v uint8) *AssetAttributesUpsert {
	u.Set(assetattributes.FieldAssetType, v)
	return u
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *AssetAttributesUpsert) UpdateAssetType() *AssetAttributesUpsert {
	u.SetExcluded(assetattributes.FieldAssetType)
	return u
}

// AddAssetType adds v to the "asset_type" field.
func (u *AssetAttributesUpsert) AddAssetType(v uint8) *AssetAttributesUpsert {
	u.Add(assetattributes.FieldAssetType, v)
	return u
}

// ClearAssetType clears the value of the "asset_type" field.
func (u *AssetAttributesUpsert) ClearAssetType() *AssetAttributesUpsert {
	u.SetNull(assetattributes.FieldAssetType)
	return u
}

// SetName sets the "name" field.
func (u *AssetAttributesUpsert) SetName(v string) *AssetAttributesUpsert {
	u.Set(assetattributes.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetAttributesUpsert) UpdateName() *AssetAttributesUpsert {
	u.SetExcluded(assetattributes.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AssetAttributesUpsert) ClearName() *AssetAttributesUpsert {
	u.SetNull(assetattributes.FieldName)
	return u
}

// SetKey sets the "key" field.
func (u *AssetAttributesUpsert) SetKey(v string) *AssetAttributesUpsert {
	u.Set(assetattributes.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AssetAttributesUpsert) UpdateKey() *AssetAttributesUpsert {
	u.SetExcluded(assetattributes.FieldKey)
	return u
}

// ClearKey clears the value of the "key" field.
func (u *AssetAttributesUpsert) ClearKey() *AssetAttributesUpsert {
	u.SetNull(assetattributes.FieldKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetAttributes.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetAttributesUpsertOne) UpdateNewValues() *AssetAttributesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetattributes.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetAttributes.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetAttributesUpsertOne) Ignore() *AssetAttributesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetAttributesUpsertOne) DoNothing() *AssetAttributesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetAttributesCreate.OnConflict
// documentation for more info.
func (u *AssetAttributesUpsertOne) Update(set func(*AssetAttributesUpsert)) *AssetAttributesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetAttributesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetAttributesUpsertOne) SetUpdatedAt(v time.Time) *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetAttributesUpsertOne) UpdateUpdatedAt() *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAssetType sets the "asset_type" field.
func (u *AssetAttributesUpsertOne) SetAssetType(v uint8) *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.SetAssetType(v)
	})
}

// AddAssetType adds v to the "asset_type" field.
func (u *AssetAttributesUpsertOne) AddAssetType(v uint8) *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.AddAssetType(v)
	})
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *AssetAttributesUpsertOne) UpdateAssetType() *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.UpdateAssetType()
	})
}

// ClearAssetType clears the value of the "asset_type" field.
func (u *AssetAttributesUpsertOne) ClearAssetType() *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.ClearAssetType()
	})
}

// SetName sets the "name" field.
func (u *AssetAttributesUpsertOne) SetName(v string) *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetAttributesUpsertOne) UpdateName() *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AssetAttributesUpsertOne) ClearName() *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.ClearName()
	})
}

// SetKey sets the "key" field.
func (u *AssetAttributesUpsertOne) SetKey(v string) *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AssetAttributesUpsertOne) UpdateKey() *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *AssetAttributesUpsertOne) ClearKey() *AssetAttributesUpsertOne {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.ClearKey()
	})
}

// Exec executes the query.
func (u *AssetAttributesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetAttributesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetAttributesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetAttributesUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetAttributesUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetAttributesCreateBulk is the builder for creating many AssetAttributes entities in bulk.
type AssetAttributesCreateBulk struct {
	config
	err      error
	builders []*AssetAttributesCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetAttributes entities in the database.
func (aacb *AssetAttributesCreateBulk) Save(ctx context.Context) ([]*AssetAttributes, error) {
	if aacb.err != nil {
		return nil, aacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*AssetAttributes, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetAttributesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *AssetAttributesCreateBulk) SaveX(ctx context.Context) []*AssetAttributes {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *AssetAttributesCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *AssetAttributesCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetAttributes.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetAttributesUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aacb *AssetAttributesCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetAttributesUpsertBulk {
	aacb.conflict = opts
	return &AssetAttributesUpsertBulk{
		create: aacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetAttributes.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aacb *AssetAttributesCreateBulk) OnConflictColumns(columns ...string) *AssetAttributesUpsertBulk {
	aacb.conflict = append(aacb.conflict, sql.ConflictColumns(columns...))
	return &AssetAttributesUpsertBulk{
		create: aacb,
	}
}

// AssetAttributesUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetAttributes nodes.
type AssetAttributesUpsertBulk struct {
	create *AssetAttributesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetAttributes.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetAttributesUpsertBulk) UpdateNewValues() *AssetAttributesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetattributes.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetAttributes.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetAttributesUpsertBulk) Ignore() *AssetAttributesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetAttributesUpsertBulk) DoNothing() *AssetAttributesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetAttributesCreateBulk.OnConflict
// documentation for more info.
func (u *AssetAttributesUpsertBulk) Update(set func(*AssetAttributesUpsert)) *AssetAttributesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetAttributesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetAttributesUpsertBulk) SetUpdatedAt(v time.Time) *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetAttributesUpsertBulk) UpdateUpdatedAt() *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAssetType sets the "asset_type" field.
func (u *AssetAttributesUpsertBulk) SetAssetType(v uint8) *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.SetAssetType(v)
	})
}

// AddAssetType adds v to the "asset_type" field.
func (u *AssetAttributesUpsertBulk) AddAssetType(v uint8) *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.AddAssetType(v)
	})
}

// UpdateAssetType sets the "asset_type" field to the value that was provided on create.
func (u *AssetAttributesUpsertBulk) UpdateAssetType() *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.UpdateAssetType()
	})
}

// ClearAssetType clears the value of the "asset_type" field.
func (u *AssetAttributesUpsertBulk) ClearAssetType() *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.ClearAssetType()
	})
}

// SetName sets the "name" field.
func (u *AssetAttributesUpsertBulk) SetName(v string) *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetAttributesUpsertBulk) UpdateName() *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AssetAttributesUpsertBulk) ClearName() *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.ClearName()
	})
}

// SetKey sets the "key" field.
func (u *AssetAttributesUpsertBulk) SetKey(v string) *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AssetAttributesUpsertBulk) UpdateKey() *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *AssetAttributesUpsertBulk) ClearKey() *AssetAttributesUpsertBulk {
	return u.Update(func(s *AssetAttributesUpsert) {
		s.ClearKey()
	})
}

// Exec executes the query.
func (u *AssetAttributesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetAttributesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetAttributesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetAttributesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
