// Code generated by ent, DO NOT EDIT.

package purchaseorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldRemark, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldRiderID, v))
}

// GoodsID applies equality check predicate on the "goods_id" field. It's identical to GoodsIDEQ.
func GoodsID(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldGoodsID, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldStoreID, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldSn, v))
}

// ContractURL applies equality check predicate on the "contract_url" field. It's identical to ContractURLEQ.
func ContractURL(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldContractURL, v))
}

// InstallmentStage applies equality check predicate on the "installment_stage" field. It's identical to InstallmentStageEQ.
func InstallmentStage(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldInstallmentStage, v))
}

// InstallmentTotal applies equality check predicate on the "installment_total" field. It's identical to InstallmentTotalEQ.
func InstallmentTotal(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldInstallmentTotal, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldStartDate, v))
}

// NextDate applies equality check predicate on the "next_date" field. It's identical to NextDateEQ.
func NextDate(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldNextDate, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldContainsFold(FieldRemark, v))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldRiderID, vs...))
}

// GoodsIDEQ applies the EQ predicate on the "goods_id" field.
func GoodsIDEQ(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldGoodsID, v))
}

// GoodsIDNEQ applies the NEQ predicate on the "goods_id" field.
func GoodsIDNEQ(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldGoodsID, v))
}

// GoodsIDIn applies the In predicate on the "goods_id" field.
func GoodsIDIn(vs ...uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldGoodsID, vs...))
}

// GoodsIDNotIn applies the NotIn predicate on the "goods_id" field.
func GoodsIDNotIn(vs ...uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldGoodsID, vs...))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIsNull(FieldStoreID))
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotNull(FieldStoreID))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldContainsFold(FieldSn, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldStatus, vs...))
}

// ContractURLEQ applies the EQ predicate on the "contract_url" field.
func ContractURLEQ(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldContractURL, v))
}

// ContractURLNEQ applies the NEQ predicate on the "contract_url" field.
func ContractURLNEQ(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldContractURL, v))
}

// ContractURLIn applies the In predicate on the "contract_url" field.
func ContractURLIn(vs ...string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldContractURL, vs...))
}

// ContractURLNotIn applies the NotIn predicate on the "contract_url" field.
func ContractURLNotIn(vs ...string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldContractURL, vs...))
}

// ContractURLGT applies the GT predicate on the "contract_url" field.
func ContractURLGT(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldContractURL, v))
}

// ContractURLGTE applies the GTE predicate on the "contract_url" field.
func ContractURLGTE(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldContractURL, v))
}

// ContractURLLT applies the LT predicate on the "contract_url" field.
func ContractURLLT(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldContractURL, v))
}

// ContractURLLTE applies the LTE predicate on the "contract_url" field.
func ContractURLLTE(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldContractURL, v))
}

// ContractURLContains applies the Contains predicate on the "contract_url" field.
func ContractURLContains(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldContains(FieldContractURL, v))
}

// ContractURLHasPrefix applies the HasPrefix predicate on the "contract_url" field.
func ContractURLHasPrefix(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldHasPrefix(FieldContractURL, v))
}

// ContractURLHasSuffix applies the HasSuffix predicate on the "contract_url" field.
func ContractURLHasSuffix(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldHasSuffix(FieldContractURL, v))
}

// ContractURLIsNil applies the IsNil predicate on the "contract_url" field.
func ContractURLIsNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIsNull(FieldContractURL))
}

// ContractURLNotNil applies the NotNil predicate on the "contract_url" field.
func ContractURLNotNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotNull(FieldContractURL))
}

// ContractURLEqualFold applies the EqualFold predicate on the "contract_url" field.
func ContractURLEqualFold(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEqualFold(FieldContractURL, v))
}

// ContractURLContainsFold applies the ContainsFold predicate on the "contract_url" field.
func ContractURLContainsFold(v string) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldContainsFold(FieldContractURL, v))
}

// InstallmentStageEQ applies the EQ predicate on the "installment_stage" field.
func InstallmentStageEQ(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldInstallmentStage, v))
}

// InstallmentStageNEQ applies the NEQ predicate on the "installment_stage" field.
func InstallmentStageNEQ(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldInstallmentStage, v))
}

// InstallmentStageIn applies the In predicate on the "installment_stage" field.
func InstallmentStageIn(vs ...int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldInstallmentStage, vs...))
}

// InstallmentStageNotIn applies the NotIn predicate on the "installment_stage" field.
func InstallmentStageNotIn(vs ...int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldInstallmentStage, vs...))
}

// InstallmentStageGT applies the GT predicate on the "installment_stage" field.
func InstallmentStageGT(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldInstallmentStage, v))
}

// InstallmentStageGTE applies the GTE predicate on the "installment_stage" field.
func InstallmentStageGTE(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldInstallmentStage, v))
}

// InstallmentStageLT applies the LT predicate on the "installment_stage" field.
func InstallmentStageLT(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldInstallmentStage, v))
}

// InstallmentStageLTE applies the LTE predicate on the "installment_stage" field.
func InstallmentStageLTE(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldInstallmentStage, v))
}

// InstallmentTotalEQ applies the EQ predicate on the "installment_total" field.
func InstallmentTotalEQ(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldInstallmentTotal, v))
}

// InstallmentTotalNEQ applies the NEQ predicate on the "installment_total" field.
func InstallmentTotalNEQ(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldInstallmentTotal, v))
}

// InstallmentTotalIn applies the In predicate on the "installment_total" field.
func InstallmentTotalIn(vs ...int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldInstallmentTotal, vs...))
}

// InstallmentTotalNotIn applies the NotIn predicate on the "installment_total" field.
func InstallmentTotalNotIn(vs ...int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldInstallmentTotal, vs...))
}

// InstallmentTotalGT applies the GT predicate on the "installment_total" field.
func InstallmentTotalGT(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldInstallmentTotal, v))
}

// InstallmentTotalGTE applies the GTE predicate on the "installment_total" field.
func InstallmentTotalGTE(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldInstallmentTotal, v))
}

// InstallmentTotalLT applies the LT predicate on the "installment_total" field.
func InstallmentTotalLT(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldInstallmentTotal, v))
}

// InstallmentTotalLTE applies the LTE predicate on the "installment_total" field.
func InstallmentTotalLTE(v int) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldInstallmentTotal, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldStartDate, v))
}

// NextDateEQ applies the EQ predicate on the "next_date" field.
func NextDateEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldEQ(FieldNextDate, v))
}

// NextDateNEQ applies the NEQ predicate on the "next_date" field.
func NextDateNEQ(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNEQ(FieldNextDate, v))
}

// NextDateIn applies the In predicate on the "next_date" field.
func NextDateIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIn(FieldNextDate, vs...))
}

// NextDateNotIn applies the NotIn predicate on the "next_date" field.
func NextDateNotIn(vs ...time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotIn(FieldNextDate, vs...))
}

// NextDateGT applies the GT predicate on the "next_date" field.
func NextDateGT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGT(FieldNextDate, v))
}

// NextDateGTE applies the GTE predicate on the "next_date" field.
func NextDateGTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldGTE(FieldNextDate, v))
}

// NextDateLT applies the LT predicate on the "next_date" field.
func NextDateLT(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLT(FieldNextDate, v))
}

// NextDateLTE applies the LTE predicate on the "next_date" field.
func NextDateLTE(v time.Time) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldLTE(FieldNextDate, v))
}

// NextDateIsNil applies the IsNil predicate on the "next_date" field.
func NextDateIsNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIsNull(FieldNextDate))
}

// NextDateNotNil applies the NotNil predicate on the "next_date" field.
func NextDateNotNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotNull(FieldNextDate))
}

// ImagesIsNil applies the IsNil predicate on the "images" field.
func ImagesIsNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldIsNull(FieldImages))
}

// ImagesNotNil applies the NotNil predicate on the "images" field.
func ImagesNotNil() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.FieldNotNull(FieldImages))
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGoods applies the HasEdge predicate on the "goods" edge.
func HasGoods() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GoodsTable, GoodsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoodsWith applies the HasEdge predicate on the "goods" edge with a given conditions (other predicates).
func HasGoodsWith(preds ...predicate.Goods) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(func(s *sql.Selector) {
		step := newGoodsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPayments applies the HasEdge predicate on the "payments" edge.
func HasPayments() predicate.PurchaseOrder {
	return predicate.PurchaseOrder(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentsWith applies the HasEdge predicate on the "payments" edge with a given conditions (other predicates).
func HasPaymentsWith(preds ...predicate.PurchasePayment) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(func(s *sql.Selector) {
		step := newPaymentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PurchaseOrder) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PurchaseOrder) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PurchaseOrder) predicate.PurchaseOrder {
	return predicate.PurchaseOrder(sql.NotPredicates(p))
}
