// Code generated by ent, DO NOT EDIT.

package purchaseorder

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the purchaseorder type in the database.
	Label = "purchase_order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldGoodsID holds the string denoting the goods_id field in the database.
	FieldGoodsID = "goods_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldContractURL holds the string denoting the contract_url field in the database.
	FieldContractURL = "contract_url"
	// FieldDocID holds the string denoting the doc_id field in the database.
	FieldDocID = "doc_id"
	// FieldSigned holds the string denoting the signed field in the database.
	FieldSigned = "signed"
	// FieldInstallmentStage holds the string denoting the installment_stage field in the database.
	FieldInstallmentStage = "installment_stage"
	// FieldInstallmentTotal holds the string denoting the installment_total field in the database.
	FieldInstallmentTotal = "installment_total"
	// FieldInstallmentPlan holds the string denoting the installment_plan field in the database.
	FieldInstallmentPlan = "installment_plan"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldNextDate holds the string denoting the next_date field in the database.
	FieldNextDate = "next_date"
	// FieldImages holds the string denoting the images field in the database.
	FieldImages = "images"
	// FieldActiveName holds the string denoting the active_name field in the database.
	FieldActiveName = "active_name"
	// FieldActivePhone holds the string denoting the active_phone field in the database.
	FieldActivePhone = "active_phone"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeGoods holds the string denoting the goods edge name in mutations.
	EdgeGoods = "goods"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// EdgeFollows holds the string denoting the follows edge name in mutations.
	EdgeFollows = "follows"
	// Table holds the table name of the purchaseorder in the database.
	Table = "purchase_order"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "purchase_order"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// GoodsTable is the table that holds the goods relation/edge.
	GoodsTable = "purchase_order"
	// GoodsInverseTable is the table name for the Goods entity.
	// It exists in this package in order to avoid circular dependency with the "goods" package.
	GoodsInverseTable = "goods"
	// GoodsColumn is the table column denoting the goods relation/edge.
	GoodsColumn = "goods_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "purchase_order"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "purchase_payment"
	// PaymentsInverseTable is the table name for the PurchasePayment entity.
	// It exists in this package in order to avoid circular dependency with the "purchasepayment" package.
	PaymentsInverseTable = "purchase_payment"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "order_id"
	// FollowsTable is the table that holds the follows relation/edge.
	FollowsTable = "purchase_follow"
	// FollowsInverseTable is the table name for the PurchaseFollow entity.
	// It exists in this package in order to avoid circular dependency with the "purchasefollow" package.
	FollowsInverseTable = "purchase_follow"
	// FollowsColumn is the table column denoting the follows relation/edge.
	FollowsColumn = "order_id"
)

// Columns holds all SQL columns for purchaseorder fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldRiderID,
	FieldGoodsID,
	FieldStoreID,
	FieldSn,
	FieldStatus,
	FieldContractURL,
	FieldDocID,
	FieldSigned,
	FieldInstallmentStage,
	FieldInstallmentTotal,
	FieldInstallmentPlan,
	FieldStartDate,
	FieldNextDate,
	FieldImages,
	FieldActiveName,
	FieldActivePhone,
	FieldColor,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSigned holds the default value on creation for the "signed" field.
	DefaultSigned bool
	// DefaultInstallmentStage holds the default value on creation for the "installment_stage" field.
	DefaultInstallmentStage int
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending   Status = "pending"
	StatusStaging   Status = "staging"
	StatusEnded     Status = "ended"
	StatusCancelled Status = "cancelled"
	StatusRefunded  Status = "refunded"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusStaging, StatusEnded, StatusCancelled, StatusRefunded:
		return nil
	default:
		return fmt.Errorf("purchaseorder: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the PurchaseOrder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByGoodsID orders the results by the goods_id field.
func ByGoodsID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodsID, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByContractURL orders the results by the contract_url field.
func ByContractURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractURL, opts...).ToFunc()
}

// ByDocID orders the results by the doc_id field.
func ByDocID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDocID, opts...).ToFunc()
}

// BySigned orders the results by the signed field.
func BySigned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSigned, opts...).ToFunc()
}

// ByInstallmentStage orders the results by the installment_stage field.
func ByInstallmentStage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallmentStage, opts...).ToFunc()
}

// ByInstallmentTotal orders the results by the installment_total field.
func ByInstallmentTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstallmentTotal, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByNextDate orders the results by the next_date field.
func ByNextDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextDate, opts...).ToFunc()
}

// ByActiveName orders the results by the active_name field.
func ByActiveName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActiveName, opts...).ToFunc()
}

// ByActivePhone orders the results by the active_phone field.
func ByActivePhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivePhone, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByGoodsField orders the results by goods field.
func ByGoodsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGoodsStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByPaymentsCount orders the results by payments count.
func ByPaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPaymentsStep(), opts...)
	}
}

// ByPayments orders the results by payments terms.
func ByPayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFollowsCount orders the results by follows count.
func ByFollowsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFollowsStep(), opts...)
	}
}

// ByFollows orders the results by follows terms.
func ByFollows(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFollowsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newGoodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GoodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GoodsTable, GoodsColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
func newPaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PaymentsTable, PaymentsColumn),
	)
}
func newFollowsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FollowsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FollowsTable, FollowsColumn),
	)
}
