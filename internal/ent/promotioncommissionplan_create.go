// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionCommissionPlanCreate is the builder for creating a PromotionCommissionPlan entity.
type PromotionCommissionPlanCreate struct {
	config
	mutation *PromotionCommissionPlanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pcpc *PromotionCommissionPlanCreate) SetCreatedAt(t time.Time) *PromotionCommissionPlanCreate {
	pcpc.mutation.SetCreatedAt(t)
	return pcpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcpc *PromotionCommissionPlanCreate) SetNillableCreatedAt(t *time.Time) *PromotionCommissionPlanCreate {
	if t != nil {
		pcpc.SetCreatedAt(*t)
	}
	return pcpc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcpc *PromotionCommissionPlanCreate) SetUpdatedAt(t time.Time) *PromotionCommissionPlanCreate {
	pcpc.mutation.SetUpdatedAt(t)
	return pcpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcpc *PromotionCommissionPlanCreate) SetNillableUpdatedAt(t *time.Time) *PromotionCommissionPlanCreate {
	if t != nil {
		pcpc.SetUpdatedAt(*t)
	}
	return pcpc
}

// SetDeletedAt sets the "deleted_at" field.
func (pcpc *PromotionCommissionPlanCreate) SetDeletedAt(t time.Time) *PromotionCommissionPlanCreate {
	pcpc.mutation.SetDeletedAt(t)
	return pcpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcpc *PromotionCommissionPlanCreate) SetNillableDeletedAt(t *time.Time) *PromotionCommissionPlanCreate {
	if t != nil {
		pcpc.SetDeletedAt(*t)
	}
	return pcpc
}

// SetMemberID sets the "member_id" field.
func (pcpc *PromotionCommissionPlanCreate) SetMemberID(u uint64) *PromotionCommissionPlanCreate {
	pcpc.mutation.SetMemberID(u)
	return pcpc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pcpc *PromotionCommissionPlanCreate) SetNillableMemberID(u *uint64) *PromotionCommissionPlanCreate {
	if u != nil {
		pcpc.SetMemberID(*u)
	}
	return pcpc
}

// SetCommissionID sets the "commission_id" field.
func (pcpc *PromotionCommissionPlanCreate) SetCommissionID(u uint64) *PromotionCommissionPlanCreate {
	pcpc.mutation.SetCommissionID(u)
	return pcpc
}

// SetNillableCommissionID sets the "commission_id" field if the given value is not nil.
func (pcpc *PromotionCommissionPlanCreate) SetNillableCommissionID(u *uint64) *PromotionCommissionPlanCreate {
	if u != nil {
		pcpc.SetCommissionID(*u)
	}
	return pcpc
}

// SetPlanID sets the "plan_id" field.
func (pcpc *PromotionCommissionPlanCreate) SetPlanID(u uint64) *PromotionCommissionPlanCreate {
	pcpc.mutation.SetPlanID(u)
	return pcpc
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (pcpc *PromotionCommissionPlanCreate) SetNillablePlanID(u *uint64) *PromotionCommissionPlanCreate {
	if u != nil {
		pcpc.SetPlanID(*u)
	}
	return pcpc
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pcpc *PromotionCommissionPlanCreate) SetMember(p *PromotionMember) *PromotionCommissionPlanCreate {
	return pcpc.SetMemberID(p.ID)
}

// SetPromotionCommissionID sets the "promotion_commission" edge to the PromotionCommission entity by ID.
func (pcpc *PromotionCommissionPlanCreate) SetPromotionCommissionID(id uint64) *PromotionCommissionPlanCreate {
	pcpc.mutation.SetPromotionCommissionID(id)
	return pcpc
}

// SetNillablePromotionCommissionID sets the "promotion_commission" edge to the PromotionCommission entity by ID if the given value is not nil.
func (pcpc *PromotionCommissionPlanCreate) SetNillablePromotionCommissionID(id *uint64) *PromotionCommissionPlanCreate {
	if id != nil {
		pcpc = pcpc.SetPromotionCommissionID(*id)
	}
	return pcpc
}

// SetPromotionCommission sets the "promotion_commission" edge to the PromotionCommission entity.
func (pcpc *PromotionCommissionPlanCreate) SetPromotionCommission(p *PromotionCommission) *PromotionCommissionPlanCreate {
	return pcpc.SetPromotionCommissionID(p.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (pcpc *PromotionCommissionPlanCreate) SetPlan(p *Plan) *PromotionCommissionPlanCreate {
	return pcpc.SetPlanID(p.ID)
}

// Mutation returns the PromotionCommissionPlanMutation object of the builder.
func (pcpc *PromotionCommissionPlanCreate) Mutation() *PromotionCommissionPlanMutation {
	return pcpc.mutation
}

// Save creates the PromotionCommissionPlan in the database.
func (pcpc *PromotionCommissionPlanCreate) Save(ctx context.Context) (*PromotionCommissionPlan, error) {
	pcpc.defaults()
	return withHooks(ctx, pcpc.sqlSave, pcpc.mutation, pcpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcpc *PromotionCommissionPlanCreate) SaveX(ctx context.Context) *PromotionCommissionPlan {
	v, err := pcpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcpc *PromotionCommissionPlanCreate) Exec(ctx context.Context) error {
	_, err := pcpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcpc *PromotionCommissionPlanCreate) ExecX(ctx context.Context) {
	if err := pcpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcpc *PromotionCommissionPlanCreate) defaults() {
	if _, ok := pcpc.mutation.CreatedAt(); !ok {
		v := promotioncommissionplan.DefaultCreatedAt()
		pcpc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcpc.mutation.UpdatedAt(); !ok {
		v := promotioncommissionplan.DefaultUpdatedAt()
		pcpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcpc *PromotionCommissionPlanCreate) check() error {
	if _, ok := pcpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionCommissionPlan.created_at"`)}
	}
	if _, ok := pcpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionCommissionPlan.updated_at"`)}
	}
	return nil
}

func (pcpc *PromotionCommissionPlanCreate) sqlSave(ctx context.Context) (*PromotionCommissionPlan, error) {
	if err := pcpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pcpc.mutation.id = &_node.ID
	pcpc.mutation.done = true
	return _node, nil
}

func (pcpc *PromotionCommissionPlanCreate) createSpec() (*PromotionCommissionPlan, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionCommissionPlan{config: pcpc.config}
		_spec = sqlgraph.NewCreateSpec(promotioncommissionplan.Table, sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pcpc.conflict
	if value, ok := pcpc.mutation.CreatedAt(); ok {
		_spec.SetField(promotioncommissionplan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcpc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotioncommissionplan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcpc.mutation.DeletedAt(); ok {
		_spec.SetField(promotioncommissionplan.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := pcpc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotioncommissionplan.MemberTable,
			Columns: []string{promotioncommissionplan.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcpc.mutation.PromotionCommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotioncommissionplan.PromotionCommissionTable,
			Columns: []string{promotioncommissionplan.PromotionCommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcpc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotioncommissionplan.PlanTable,
			Columns: []string{promotioncommissionplan.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionCommissionPlan.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionCommissionPlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcpc *PromotionCommissionPlanCreate) OnConflict(opts ...sql.ConflictOption) *PromotionCommissionPlanUpsertOne {
	pcpc.conflict = opts
	return &PromotionCommissionPlanUpsertOne{
		create: pcpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionCommissionPlan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcpc *PromotionCommissionPlanCreate) OnConflictColumns(columns ...string) *PromotionCommissionPlanUpsertOne {
	pcpc.conflict = append(pcpc.conflict, sql.ConflictColumns(columns...))
	return &PromotionCommissionPlanUpsertOne{
		create: pcpc,
	}
}

type (
	// PromotionCommissionPlanUpsertOne is the builder for "upsert"-ing
	//  one PromotionCommissionPlan node.
	PromotionCommissionPlanUpsertOne struct {
		create *PromotionCommissionPlanCreate
	}

	// PromotionCommissionPlanUpsert is the "OnConflict" setter.
	PromotionCommissionPlanUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionCommissionPlanUpsert) SetUpdatedAt(v time.Time) *PromotionCommissionPlanUpsert {
	u.Set(promotioncommissionplan.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsert) UpdateUpdatedAt() *PromotionCommissionPlanUpsert {
	u.SetExcluded(promotioncommissionplan.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionCommissionPlanUpsert) SetDeletedAt(v time.Time) *PromotionCommissionPlanUpsert {
	u.Set(promotioncommissionplan.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsert) UpdateDeletedAt() *PromotionCommissionPlanUpsert {
	u.SetExcluded(promotioncommissionplan.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionCommissionPlanUpsert) ClearDeletedAt() *PromotionCommissionPlanUpsert {
	u.SetNull(promotioncommissionplan.FieldDeletedAt)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *PromotionCommissionPlanUpsert) SetMemberID(v uint64) *PromotionCommissionPlanUpsert {
	u.Set(promotioncommissionplan.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsert) UpdateMemberID() *PromotionCommissionPlanUpsert {
	u.SetExcluded(promotioncommissionplan.FieldMemberID)
	return u
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionCommissionPlanUpsert) ClearMemberID() *PromotionCommissionPlanUpsert {
	u.SetNull(promotioncommissionplan.FieldMemberID)
	return u
}

// SetCommissionID sets the "commission_id" field.
func (u *PromotionCommissionPlanUpsert) SetCommissionID(v uint64) *PromotionCommissionPlanUpsert {
	u.Set(promotioncommissionplan.FieldCommissionID, v)
	return u
}

// UpdateCommissionID sets the "commission_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsert) UpdateCommissionID() *PromotionCommissionPlanUpsert {
	u.SetExcluded(promotioncommissionplan.FieldCommissionID)
	return u
}

// ClearCommissionID clears the value of the "commission_id" field.
func (u *PromotionCommissionPlanUpsert) ClearCommissionID() *PromotionCommissionPlanUpsert {
	u.SetNull(promotioncommissionplan.FieldCommissionID)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *PromotionCommissionPlanUpsert) SetPlanID(v uint64) *PromotionCommissionPlanUpsert {
	u.Set(promotioncommissionplan.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsert) UpdatePlanID() *PromotionCommissionPlanUpsert {
	u.SetExcluded(promotioncommissionplan.FieldPlanID)
	return u
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *PromotionCommissionPlanUpsert) ClearPlanID() *PromotionCommissionPlanUpsert {
	u.SetNull(promotioncommissionplan.FieldPlanID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionCommissionPlan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionCommissionPlanUpsertOne) UpdateNewValues() *PromotionCommissionPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotioncommissionplan.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionCommissionPlan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionCommissionPlanUpsertOne) Ignore() *PromotionCommissionPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionCommissionPlanUpsertOne) DoNothing() *PromotionCommissionPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionCommissionPlanCreate.OnConflict
// documentation for more info.
func (u *PromotionCommissionPlanUpsertOne) Update(set func(*PromotionCommissionPlanUpsert)) *PromotionCommissionPlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionCommissionPlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionCommissionPlanUpsertOne) SetUpdatedAt(v time.Time) *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertOne) UpdateUpdatedAt() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionCommissionPlanUpsertOne) SetDeletedAt(v time.Time) *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertOne) UpdateDeletedAt() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionCommissionPlanUpsertOne) ClearDeletedAt() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionCommissionPlanUpsertOne) SetMemberID(v uint64) *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertOne) UpdateMemberID() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionCommissionPlanUpsertOne) ClearMemberID() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.ClearMemberID()
	})
}

// SetCommissionID sets the "commission_id" field.
func (u *PromotionCommissionPlanUpsertOne) SetCommissionID(v uint64) *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetCommissionID(v)
	})
}

// UpdateCommissionID sets the "commission_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertOne) UpdateCommissionID() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdateCommissionID()
	})
}

// ClearCommissionID clears the value of the "commission_id" field.
func (u *PromotionCommissionPlanUpsertOne) ClearCommissionID() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.ClearCommissionID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *PromotionCommissionPlanUpsertOne) SetPlanID(v uint64) *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertOne) UpdatePlanID() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *PromotionCommissionPlanUpsertOne) ClearPlanID() *PromotionCommissionPlanUpsertOne {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.ClearPlanID()
	})
}

// Exec executes the query.
func (u *PromotionCommissionPlanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionCommissionPlanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionCommissionPlanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionCommissionPlanUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionCommissionPlanUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionCommissionPlanCreateBulk is the builder for creating many PromotionCommissionPlan entities in bulk.
type PromotionCommissionPlanCreateBulk struct {
	config
	err      error
	builders []*PromotionCommissionPlanCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionCommissionPlan entities in the database.
func (pcpcb *PromotionCommissionPlanCreateBulk) Save(ctx context.Context) ([]*PromotionCommissionPlan, error) {
	if pcpcb.err != nil {
		return nil, pcpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcpcb.builders))
	nodes := make([]*PromotionCommissionPlan, len(pcpcb.builders))
	mutators := make([]Mutator, len(pcpcb.builders))
	for i := range pcpcb.builders {
		func(i int, root context.Context) {
			builder := pcpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionCommissionPlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcpcb *PromotionCommissionPlanCreateBulk) SaveX(ctx context.Context) []*PromotionCommissionPlan {
	v, err := pcpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcpcb *PromotionCommissionPlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcpcb *PromotionCommissionPlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionCommissionPlan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionCommissionPlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcpcb *PromotionCommissionPlanCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionCommissionPlanUpsertBulk {
	pcpcb.conflict = opts
	return &PromotionCommissionPlanUpsertBulk{
		create: pcpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionCommissionPlan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcpcb *PromotionCommissionPlanCreateBulk) OnConflictColumns(columns ...string) *PromotionCommissionPlanUpsertBulk {
	pcpcb.conflict = append(pcpcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionCommissionPlanUpsertBulk{
		create: pcpcb,
	}
}

// PromotionCommissionPlanUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionCommissionPlan nodes.
type PromotionCommissionPlanUpsertBulk struct {
	create *PromotionCommissionPlanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionCommissionPlan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionCommissionPlanUpsertBulk) UpdateNewValues() *PromotionCommissionPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotioncommissionplan.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionCommissionPlan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionCommissionPlanUpsertBulk) Ignore() *PromotionCommissionPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionCommissionPlanUpsertBulk) DoNothing() *PromotionCommissionPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionCommissionPlanCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionCommissionPlanUpsertBulk) Update(set func(*PromotionCommissionPlanUpsert)) *PromotionCommissionPlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionCommissionPlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionCommissionPlanUpsertBulk) SetUpdatedAt(v time.Time) *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertBulk) UpdateUpdatedAt() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionCommissionPlanUpsertBulk) SetDeletedAt(v time.Time) *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertBulk) UpdateDeletedAt() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionCommissionPlanUpsertBulk) ClearDeletedAt() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.ClearDeletedAt()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionCommissionPlanUpsertBulk) SetMemberID(v uint64) *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertBulk) UpdateMemberID() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionCommissionPlanUpsertBulk) ClearMemberID() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.ClearMemberID()
	})
}

// SetCommissionID sets the "commission_id" field.
func (u *PromotionCommissionPlanUpsertBulk) SetCommissionID(v uint64) *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetCommissionID(v)
	})
}

// UpdateCommissionID sets the "commission_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertBulk) UpdateCommissionID() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdateCommissionID()
	})
}

// ClearCommissionID clears the value of the "commission_id" field.
func (u *PromotionCommissionPlanUpsertBulk) ClearCommissionID() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.ClearCommissionID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *PromotionCommissionPlanUpsertBulk) SetPlanID(v uint64) *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PromotionCommissionPlanUpsertBulk) UpdatePlanID() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *PromotionCommissionPlanUpsertBulk) ClearPlanID() *PromotionCommissionPlanUpsertBulk {
	return u.Update(func(s *PromotionCommissionPlanUpsert) {
		s.ClearPlanID()
	})
}

// Exec executes the query.
func (u *PromotionCommissionPlanUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionCommissionPlanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionCommissionPlanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionCommissionPlanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
