// Code generated by entc, DO NOT EDIT.

package assistance

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the assistance type in the database.
	Label = "assistance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOutTradeNo holds the string denoting the out_trade_no field in the database.
	FieldOutTradeNo = "out_trade_no"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldBreakdown holds the string denoting the breakdown field in the database.
	FieldBreakdown = "breakdown"
	// FieldBreakdownDesc holds the string denoting the breakdown_desc field in the database.
	FieldBreakdownDesc = "breakdown_desc"
	// FieldBreakdownPhotos holds the string denoting the breakdown_photos field in the database.
	FieldBreakdownPhotos = "breakdown_photos"
	// FieldCancelReason holds the string denoting the cancel_reason field in the database.
	FieldCancelReason = "cancel_reason"
	// FieldCancelReasonDesc holds the string denoting the cancel_reason_desc field in the database.
	FieldCancelReasonDesc = "cancel_reason_desc"
	// FieldDistance holds the string denoting the distance field in the database.
	FieldDistance = "distance"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldBatteryPhoto holds the string denoting the battery_photo field in the database.
	FieldBatteryPhoto = "battery_photo"
	// FieldJointPhoto holds the string denoting the joint_photo field in the database.
	FieldJointPhoto = "joint_photo"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldRefusedDesc holds the string denoting the refused_desc field in the database.
	FieldRefusedDesc = "refused_desc"
	// FieldPayAt holds the string denoting the pay_at field in the database.
	FieldPayAt = "pay_at"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// Table holds the table name of the assistance in the database.
	Table = "assistance"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "assistance"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "assistance"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "assistance"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "assistance"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "order"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "assistance"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
)

// Columns holds all SQL columns for assistance fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldStoreID,
	FieldRiderID,
	FieldSubscribeID,
	FieldEmployeeID,
	FieldOrderID,
	FieldStatus,
	FieldOutTradeNo,
	FieldLng,
	FieldLat,
	FieldAddress,
	FieldBreakdown,
	FieldBreakdownDesc,
	FieldBreakdownPhotos,
	FieldCancelReason,
	FieldCancelReasonDesc,
	FieldDistance,
	FieldReason,
	FieldBatteryPhoto,
	FieldJointPhoto,
	FieldCost,
	FieldRefusedDesc,
	FieldPayAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
)
