// Code generated by ent, DO NOT EDIT.

package assistance

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the assistance type in the database.
	Label = "assistance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldBreakdown holds the string denoting the breakdown field in the database.
	FieldBreakdown = "breakdown"
	// FieldBreakdownDesc holds the string denoting the breakdown_desc field in the database.
	FieldBreakdownDesc = "breakdown_desc"
	// FieldBreakdownPhotos holds the string denoting the breakdown_photos field in the database.
	FieldBreakdownPhotos = "breakdown_photos"
	// FieldCancelReason holds the string denoting the cancel_reason field in the database.
	FieldCancelReason = "cancel_reason"
	// FieldCancelReasonDesc holds the string denoting the cancel_reason_desc field in the database.
	FieldCancelReasonDesc = "cancel_reason_desc"
	// FieldDistance holds the string denoting the distance field in the database.
	FieldDistance = "distance"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldDetectPhoto holds the string denoting the detect_photo field in the database.
	FieldDetectPhoto = "detect_photo"
	// FieldJointPhoto holds the string denoting the joint_photo field in the database.
	FieldJointPhoto = "joint_photo"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldRefusedDesc holds the string denoting the refused_desc field in the database.
	FieldRefusedDesc = "refused_desc"
	// FieldPayAt holds the string denoting the pay_at field in the database.
	FieldPayAt = "pay_at"
	// FieldAllocateAt holds the string denoting the allocate_at field in the database.
	FieldAllocateAt = "allocate_at"
	// FieldWait holds the string denoting the wait field in the database.
	FieldWait = "wait"
	// FieldFreeReason holds the string denoting the free_reason field in the database.
	FieldFreeReason = "free_reason"
	// FieldFailReason holds the string denoting the fail_reason field in the database.
	FieldFailReason = "fail_reason"
	// FieldProcessAt holds the string denoting the process_at field in the database.
	FieldProcessAt = "process_at"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldNaviDuration holds the string denoting the navi_duration field in the database.
	FieldNaviDuration = "navi_duration"
	// FieldNaviPolylines holds the string denoting the navi_polylines field in the database.
	FieldNaviPolylines = "navi_polylines"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// Table holds the table name of the assistance in the database.
	Table = "assistance"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "assistance"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "assistance"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "assistance"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "assistance"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "assistance"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "order"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "assistance"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
)

// Columns holds all SQL columns for assistance fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldStoreID,
	FieldRiderID,
	FieldSubscribeID,
	FieldCityID,
	FieldEmployeeID,
	FieldOrderID,
	FieldStatus,
	FieldLng,
	FieldLat,
	FieldAddress,
	FieldBreakdown,
	FieldBreakdownDesc,
	FieldBreakdownPhotos,
	FieldCancelReason,
	FieldCancelReasonDesc,
	FieldDistance,
	FieldReason,
	FieldDetectPhoto,
	FieldJointPhoto,
	FieldCost,
	FieldRefusedDesc,
	FieldPayAt,
	FieldAllocateAt,
	FieldWait,
	FieldFreeReason,
	FieldFailReason,
	FieldProcessAt,
	FieldPrice,
	FieldNaviDuration,
	FieldNaviPolylines,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultCost holds the default value on creation for the "cost" field.
	DefaultCost float64
	// DefaultWait holds the default value on creation for the "wait" field.
	DefaultWait int
)

// OrderOption defines the ordering options for the Assistance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// BySubscribeID orders the results by the subscribe_id field.
func BySubscribeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribeID, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLng orders the results by the lng field.
func ByLng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLng, opts...).ToFunc()
}

// ByLat orders the results by the lat field.
func ByLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLat, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByBreakdown orders the results by the breakdown field.
func ByBreakdown(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBreakdown, opts...).ToFunc()
}

// ByBreakdownDesc orders the results by the breakdown_desc field.
func ByBreakdownDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBreakdownDesc, opts...).ToFunc()
}

// ByCancelReason orders the results by the cancel_reason field.
func ByCancelReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelReason, opts...).ToFunc()
}

// ByCancelReasonDesc orders the results by the cancel_reason_desc field.
func ByCancelReasonDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelReasonDesc, opts...).ToFunc()
}

// ByDistance orders the results by the distance field.
func ByDistance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistance, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByDetectPhoto orders the results by the detect_photo field.
func ByDetectPhoto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetectPhoto, opts...).ToFunc()
}

// ByJointPhoto orders the results by the joint_photo field.
func ByJointPhoto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJointPhoto, opts...).ToFunc()
}

// ByCost orders the results by the cost field.
func ByCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCost, opts...).ToFunc()
}

// ByRefusedDesc orders the results by the refused_desc field.
func ByRefusedDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefusedDesc, opts...).ToFunc()
}

// ByPayAt orders the results by the pay_at field.
func ByPayAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayAt, opts...).ToFunc()
}

// ByAllocateAt orders the results by the allocate_at field.
func ByAllocateAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllocateAt, opts...).ToFunc()
}

// ByWait orders the results by the wait field.
func ByWait(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWait, opts...).ToFunc()
}

// ByFreeReason orders the results by the free_reason field.
func ByFreeReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFreeReason, opts...).ToFunc()
}

// ByFailReason orders the results by the fail_reason field.
func ByFailReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailReason, opts...).ToFunc()
}

// ByProcessAt orders the results by the process_at field.
func ByProcessAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessAt, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByNaviDuration orders the results by the navi_duration field.
func ByNaviDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNaviDuration, opts...).ToFunc()
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscribeField orders the results by subscribe field.
func BySubscribeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribeStep(), sql.OrderByField(field, opts...))
	}
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newSubscribeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
	)
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
	)
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
	)
}
