// Code generated by entc, DO NOT EDIT.

package assistance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// SubscribeID applies equality check predicate on the "subscribe_id" field. It's identical to SubscribeIDEQ.
func SubscribeID(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscribeID), v))
	})
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Lng applies equality check predicate on the "lng" field. It's identical to LngEQ.
func Lng(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLng), v))
	})
}

// Lat applies equality check predicate on the "lat" field. It's identical to LatEQ.
func Lat(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLat), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Breakdown applies equality check predicate on the "breakdown" field. It's identical to BreakdownEQ.
func Breakdown(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreakdown), v))
	})
}

// BreakdownDesc applies equality check predicate on the "breakdown_desc" field. It's identical to BreakdownDescEQ.
func BreakdownDesc(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreakdownDesc), v))
	})
}

// CancelReason applies equality check predicate on the "cancel_reason" field. It's identical to CancelReasonEQ.
func CancelReason(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelReason), v))
	})
}

// CancelReasonDesc applies equality check predicate on the "cancel_reason_desc" field. It's identical to CancelReasonDescEQ.
func CancelReasonDesc(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelReasonDesc), v))
	})
}

// Distance applies equality check predicate on the "distance" field. It's identical to DistanceEQ.
func Distance(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistance), v))
	})
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// DetectPhoto applies equality check predicate on the "detect_photo" field. It's identical to DetectPhotoEQ.
func DetectPhoto(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetectPhoto), v))
	})
}

// JointPhoto applies equality check predicate on the "joint_photo" field. It's identical to JointPhotoEQ.
func JointPhoto(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJointPhoto), v))
	})
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// RefusedDesc applies equality check predicate on the "refused_desc" field. It's identical to RefusedDescEQ.
func RefusedDesc(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefusedDesc), v))
	})
}

// PayAt applies equality check predicate on the "pay_at" field. It's identical to PayAtEQ.
func PayAt(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayAt), v))
	})
}

// AllocateAt applies equality check predicate on the "allocate_at" field. It's identical to AllocateAtEQ.
func AllocateAt(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllocateAt), v))
	})
}

// Wait applies equality check predicate on the "wait" field. It's identical to WaitEQ.
func Wait(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWait), v))
	})
}

// FreeReason applies equality check predicate on the "free_reason" field. It's identical to FreeReasonEQ.
func FreeReason(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeReason), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// FailReason applies equality check predicate on the "fail_reason" field. It's identical to FailReasonEQ.
func FailReason(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFailReason), v))
	})
}

// ProcessAt applies equality check predicate on the "process_at" field. It's identical to ProcessAtEQ.
func ProcessAt(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessAt), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreID), v))
	})
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStoreID), v...))
	})
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStoreID), v...))
	})
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreID)))
	})
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreID)))
	})
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRiderID), v))
	})
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRiderID), v...))
	})
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRiderID), v...))
	})
}

// SubscribeIDEQ applies the EQ predicate on the "subscribe_id" field.
func SubscribeIDEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscribeID), v))
	})
}

// SubscribeIDNEQ applies the NEQ predicate on the "subscribe_id" field.
func SubscribeIDNEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubscribeID), v))
	})
}

// SubscribeIDIn applies the In predicate on the "subscribe_id" field.
func SubscribeIDIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubscribeID), v...))
	})
}

// SubscribeIDNotIn applies the NotIn predicate on the "subscribe_id" field.
func SubscribeIDNotIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubscribeID), v...))
	})
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCityID), v))
	})
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCityID), v...))
	})
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCityID), v...))
	})
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDIsNil applies the IsNil predicate on the "employee_id" field.
func EmployeeIDIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmployeeID)))
	})
}

// EmployeeIDNotNil applies the NotNil predicate on the "employee_id" field.
func EmployeeIDNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmployeeID)))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uint64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uint64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrderID)))
	})
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrderID)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// LngEQ applies the EQ predicate on the "lng" field.
func LngEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLng), v))
	})
}

// LngNEQ applies the NEQ predicate on the "lng" field.
func LngNEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLng), v))
	})
}

// LngIn applies the In predicate on the "lng" field.
func LngIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLng), v...))
	})
}

// LngNotIn applies the NotIn predicate on the "lng" field.
func LngNotIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLng), v...))
	})
}

// LngGT applies the GT predicate on the "lng" field.
func LngGT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLng), v))
	})
}

// LngGTE applies the GTE predicate on the "lng" field.
func LngGTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLng), v))
	})
}

// LngLT applies the LT predicate on the "lng" field.
func LngLT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLng), v))
	})
}

// LngLTE applies the LTE predicate on the "lng" field.
func LngLTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLng), v))
	})
}

// LatEQ applies the EQ predicate on the "lat" field.
func LatEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLat), v))
	})
}

// LatNEQ applies the NEQ predicate on the "lat" field.
func LatNEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLat), v))
	})
}

// LatIn applies the In predicate on the "lat" field.
func LatIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLat), v...))
	})
}

// LatNotIn applies the NotIn predicate on the "lat" field.
func LatNotIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLat), v...))
	})
}

// LatGT applies the GT predicate on the "lat" field.
func LatGT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLat), v))
	})
}

// LatGTE applies the GTE predicate on the "lat" field.
func LatGTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLat), v))
	})
}

// LatLT applies the LT predicate on the "lat" field.
func LatLT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLat), v))
	})
}

// LatLTE applies the LTE predicate on the "lat" field.
func LatLTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLat), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// BreakdownEQ applies the EQ predicate on the "breakdown" field.
func BreakdownEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreakdown), v))
	})
}

// BreakdownNEQ applies the NEQ predicate on the "breakdown" field.
func BreakdownNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreakdown), v))
	})
}

// BreakdownIn applies the In predicate on the "breakdown" field.
func BreakdownIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBreakdown), v...))
	})
}

// BreakdownNotIn applies the NotIn predicate on the "breakdown" field.
func BreakdownNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBreakdown), v...))
	})
}

// BreakdownGT applies the GT predicate on the "breakdown" field.
func BreakdownGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreakdown), v))
	})
}

// BreakdownGTE applies the GTE predicate on the "breakdown" field.
func BreakdownGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreakdown), v))
	})
}

// BreakdownLT applies the LT predicate on the "breakdown" field.
func BreakdownLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreakdown), v))
	})
}

// BreakdownLTE applies the LTE predicate on the "breakdown" field.
func BreakdownLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreakdown), v))
	})
}

// BreakdownContains applies the Contains predicate on the "breakdown" field.
func BreakdownContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBreakdown), v))
	})
}

// BreakdownHasPrefix applies the HasPrefix predicate on the "breakdown" field.
func BreakdownHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBreakdown), v))
	})
}

// BreakdownHasSuffix applies the HasSuffix predicate on the "breakdown" field.
func BreakdownHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBreakdown), v))
	})
}

// BreakdownEqualFold applies the EqualFold predicate on the "breakdown" field.
func BreakdownEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBreakdown), v))
	})
}

// BreakdownContainsFold applies the ContainsFold predicate on the "breakdown" field.
func BreakdownContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBreakdown), v))
	})
}

// BreakdownDescEQ applies the EQ predicate on the "breakdown_desc" field.
func BreakdownDescEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescNEQ applies the NEQ predicate on the "breakdown_desc" field.
func BreakdownDescNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescIn applies the In predicate on the "breakdown_desc" field.
func BreakdownDescIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBreakdownDesc), v...))
	})
}

// BreakdownDescNotIn applies the NotIn predicate on the "breakdown_desc" field.
func BreakdownDescNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBreakdownDesc), v...))
	})
}

// BreakdownDescGT applies the GT predicate on the "breakdown_desc" field.
func BreakdownDescGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescGTE applies the GTE predicate on the "breakdown_desc" field.
func BreakdownDescGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescLT applies the LT predicate on the "breakdown_desc" field.
func BreakdownDescLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescLTE applies the LTE predicate on the "breakdown_desc" field.
func BreakdownDescLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescContains applies the Contains predicate on the "breakdown_desc" field.
func BreakdownDescContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescHasPrefix applies the HasPrefix predicate on the "breakdown_desc" field.
func BreakdownDescHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescHasSuffix applies the HasSuffix predicate on the "breakdown_desc" field.
func BreakdownDescHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescIsNil applies the IsNil predicate on the "breakdown_desc" field.
func BreakdownDescIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBreakdownDesc)))
	})
}

// BreakdownDescNotNil applies the NotNil predicate on the "breakdown_desc" field.
func BreakdownDescNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBreakdownDesc)))
	})
}

// BreakdownDescEqualFold applies the EqualFold predicate on the "breakdown_desc" field.
func BreakdownDescEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBreakdownDesc), v))
	})
}

// BreakdownDescContainsFold applies the ContainsFold predicate on the "breakdown_desc" field.
func BreakdownDescContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBreakdownDesc), v))
	})
}

// CancelReasonEQ applies the EQ predicate on the "cancel_reason" field.
func CancelReasonEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelReason), v))
	})
}

// CancelReasonNEQ applies the NEQ predicate on the "cancel_reason" field.
func CancelReasonNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelReason), v))
	})
}

// CancelReasonIn applies the In predicate on the "cancel_reason" field.
func CancelReasonIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCancelReason), v...))
	})
}

// CancelReasonNotIn applies the NotIn predicate on the "cancel_reason" field.
func CancelReasonNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCancelReason), v...))
	})
}

// CancelReasonGT applies the GT predicate on the "cancel_reason" field.
func CancelReasonGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelReason), v))
	})
}

// CancelReasonGTE applies the GTE predicate on the "cancel_reason" field.
func CancelReasonGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelReason), v))
	})
}

// CancelReasonLT applies the LT predicate on the "cancel_reason" field.
func CancelReasonLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelReason), v))
	})
}

// CancelReasonLTE applies the LTE predicate on the "cancel_reason" field.
func CancelReasonLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelReason), v))
	})
}

// CancelReasonContains applies the Contains predicate on the "cancel_reason" field.
func CancelReasonContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCancelReason), v))
	})
}

// CancelReasonHasPrefix applies the HasPrefix predicate on the "cancel_reason" field.
func CancelReasonHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCancelReason), v))
	})
}

// CancelReasonHasSuffix applies the HasSuffix predicate on the "cancel_reason" field.
func CancelReasonHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCancelReason), v))
	})
}

// CancelReasonIsNil applies the IsNil predicate on the "cancel_reason" field.
func CancelReasonIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelReason)))
	})
}

// CancelReasonNotNil applies the NotNil predicate on the "cancel_reason" field.
func CancelReasonNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelReason)))
	})
}

// CancelReasonEqualFold applies the EqualFold predicate on the "cancel_reason" field.
func CancelReasonEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCancelReason), v))
	})
}

// CancelReasonContainsFold applies the ContainsFold predicate on the "cancel_reason" field.
func CancelReasonContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCancelReason), v))
	})
}

// CancelReasonDescEQ applies the EQ predicate on the "cancel_reason_desc" field.
func CancelReasonDescEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescNEQ applies the NEQ predicate on the "cancel_reason_desc" field.
func CancelReasonDescNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescIn applies the In predicate on the "cancel_reason_desc" field.
func CancelReasonDescIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCancelReasonDesc), v...))
	})
}

// CancelReasonDescNotIn applies the NotIn predicate on the "cancel_reason_desc" field.
func CancelReasonDescNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCancelReasonDesc), v...))
	})
}

// CancelReasonDescGT applies the GT predicate on the "cancel_reason_desc" field.
func CancelReasonDescGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescGTE applies the GTE predicate on the "cancel_reason_desc" field.
func CancelReasonDescGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescLT applies the LT predicate on the "cancel_reason_desc" field.
func CancelReasonDescLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescLTE applies the LTE predicate on the "cancel_reason_desc" field.
func CancelReasonDescLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescContains applies the Contains predicate on the "cancel_reason_desc" field.
func CancelReasonDescContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescHasPrefix applies the HasPrefix predicate on the "cancel_reason_desc" field.
func CancelReasonDescHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescHasSuffix applies the HasSuffix predicate on the "cancel_reason_desc" field.
func CancelReasonDescHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescIsNil applies the IsNil predicate on the "cancel_reason_desc" field.
func CancelReasonDescIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCancelReasonDesc)))
	})
}

// CancelReasonDescNotNil applies the NotNil predicate on the "cancel_reason_desc" field.
func CancelReasonDescNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCancelReasonDesc)))
	})
}

// CancelReasonDescEqualFold applies the EqualFold predicate on the "cancel_reason_desc" field.
func CancelReasonDescEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCancelReasonDesc), v))
	})
}

// CancelReasonDescContainsFold applies the ContainsFold predicate on the "cancel_reason_desc" field.
func CancelReasonDescContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCancelReasonDesc), v))
	})
}

// DistanceEQ applies the EQ predicate on the "distance" field.
func DistanceEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistance), v))
	})
}

// DistanceNEQ applies the NEQ predicate on the "distance" field.
func DistanceNEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistance), v))
	})
}

// DistanceIn applies the In predicate on the "distance" field.
func DistanceIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistance), v...))
	})
}

// DistanceNotIn applies the NotIn predicate on the "distance" field.
func DistanceNotIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistance), v...))
	})
}

// DistanceGT applies the GT predicate on the "distance" field.
func DistanceGT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistance), v))
	})
}

// DistanceGTE applies the GTE predicate on the "distance" field.
func DistanceGTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistance), v))
	})
}

// DistanceLT applies the LT predicate on the "distance" field.
func DistanceLT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistance), v))
	})
}

// DistanceLTE applies the LTE predicate on the "distance" field.
func DistanceLTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistance), v))
	})
}

// DistanceIsNil applies the IsNil predicate on the "distance" field.
func DistanceIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDistance)))
	})
}

// DistanceNotNil applies the NotNil predicate on the "distance" field.
func DistanceNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDistance)))
	})
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReason), v))
	})
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReason), v...))
	})
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReason), v...))
	})
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReason), v))
	})
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReason), v))
	})
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReason), v))
	})
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReason), v))
	})
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReason), v))
	})
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReason), v))
	})
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReason), v))
	})
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReason)))
	})
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReason)))
	})
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReason), v))
	})
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReason), v))
	})
}

// DetectPhotoEQ applies the EQ predicate on the "detect_photo" field.
func DetectPhotoEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoNEQ applies the NEQ predicate on the "detect_photo" field.
func DetectPhotoNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoIn applies the In predicate on the "detect_photo" field.
func DetectPhotoIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetectPhoto), v...))
	})
}

// DetectPhotoNotIn applies the NotIn predicate on the "detect_photo" field.
func DetectPhotoNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetectPhoto), v...))
	})
}

// DetectPhotoGT applies the GT predicate on the "detect_photo" field.
func DetectPhotoGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoGTE applies the GTE predicate on the "detect_photo" field.
func DetectPhotoGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoLT applies the LT predicate on the "detect_photo" field.
func DetectPhotoLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoLTE applies the LTE predicate on the "detect_photo" field.
func DetectPhotoLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoContains applies the Contains predicate on the "detect_photo" field.
func DetectPhotoContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoHasPrefix applies the HasPrefix predicate on the "detect_photo" field.
func DetectPhotoHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoHasSuffix applies the HasSuffix predicate on the "detect_photo" field.
func DetectPhotoHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoIsNil applies the IsNil predicate on the "detect_photo" field.
func DetectPhotoIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDetectPhoto)))
	})
}

// DetectPhotoNotNil applies the NotNil predicate on the "detect_photo" field.
func DetectPhotoNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDetectPhoto)))
	})
}

// DetectPhotoEqualFold applies the EqualFold predicate on the "detect_photo" field.
func DetectPhotoEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetectPhoto), v))
	})
}

// DetectPhotoContainsFold applies the ContainsFold predicate on the "detect_photo" field.
func DetectPhotoContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetectPhoto), v))
	})
}

// JointPhotoEQ applies the EQ predicate on the "joint_photo" field.
func JointPhotoEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoNEQ applies the NEQ predicate on the "joint_photo" field.
func JointPhotoNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoIn applies the In predicate on the "joint_photo" field.
func JointPhotoIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJointPhoto), v...))
	})
}

// JointPhotoNotIn applies the NotIn predicate on the "joint_photo" field.
func JointPhotoNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJointPhoto), v...))
	})
}

// JointPhotoGT applies the GT predicate on the "joint_photo" field.
func JointPhotoGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoGTE applies the GTE predicate on the "joint_photo" field.
func JointPhotoGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoLT applies the LT predicate on the "joint_photo" field.
func JointPhotoLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoLTE applies the LTE predicate on the "joint_photo" field.
func JointPhotoLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoContains applies the Contains predicate on the "joint_photo" field.
func JointPhotoContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoHasPrefix applies the HasPrefix predicate on the "joint_photo" field.
func JointPhotoHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoHasSuffix applies the HasSuffix predicate on the "joint_photo" field.
func JointPhotoHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoIsNil applies the IsNil predicate on the "joint_photo" field.
func JointPhotoIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldJointPhoto)))
	})
}

// JointPhotoNotNil applies the NotNil predicate on the "joint_photo" field.
func JointPhotoNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldJointPhoto)))
	})
}

// JointPhotoEqualFold applies the EqualFold predicate on the "joint_photo" field.
func JointPhotoEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJointPhoto), v))
	})
}

// JointPhotoContainsFold applies the ContainsFold predicate on the "joint_photo" field.
func JointPhotoContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJointPhoto), v))
	})
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCost), v))
	})
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCost), v...))
	})
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCost), v...))
	})
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCost), v))
	})
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCost), v))
	})
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCost), v))
	})
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCost), v))
	})
}

// CostIsNil applies the IsNil predicate on the "cost" field.
func CostIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCost)))
	})
}

// CostNotNil applies the NotNil predicate on the "cost" field.
func CostNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCost)))
	})
}

// RefusedDescEQ applies the EQ predicate on the "refused_desc" field.
func RefusedDescEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescNEQ applies the NEQ predicate on the "refused_desc" field.
func RefusedDescNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescIn applies the In predicate on the "refused_desc" field.
func RefusedDescIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefusedDesc), v...))
	})
}

// RefusedDescNotIn applies the NotIn predicate on the "refused_desc" field.
func RefusedDescNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefusedDesc), v...))
	})
}

// RefusedDescGT applies the GT predicate on the "refused_desc" field.
func RefusedDescGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescGTE applies the GTE predicate on the "refused_desc" field.
func RefusedDescGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescLT applies the LT predicate on the "refused_desc" field.
func RefusedDescLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescLTE applies the LTE predicate on the "refused_desc" field.
func RefusedDescLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescContains applies the Contains predicate on the "refused_desc" field.
func RefusedDescContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescHasPrefix applies the HasPrefix predicate on the "refused_desc" field.
func RefusedDescHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescHasSuffix applies the HasSuffix predicate on the "refused_desc" field.
func RefusedDescHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescIsNil applies the IsNil predicate on the "refused_desc" field.
func RefusedDescIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRefusedDesc)))
	})
}

// RefusedDescNotNil applies the NotNil predicate on the "refused_desc" field.
func RefusedDescNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRefusedDesc)))
	})
}

// RefusedDescEqualFold applies the EqualFold predicate on the "refused_desc" field.
func RefusedDescEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefusedDesc), v))
	})
}

// RefusedDescContainsFold applies the ContainsFold predicate on the "refused_desc" field.
func RefusedDescContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefusedDesc), v))
	})
}

// PayAtEQ applies the EQ predicate on the "pay_at" field.
func PayAtEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayAt), v))
	})
}

// PayAtNEQ applies the NEQ predicate on the "pay_at" field.
func PayAtNEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayAt), v))
	})
}

// PayAtIn applies the In predicate on the "pay_at" field.
func PayAtIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayAt), v...))
	})
}

// PayAtNotIn applies the NotIn predicate on the "pay_at" field.
func PayAtNotIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayAt), v...))
	})
}

// PayAtGT applies the GT predicate on the "pay_at" field.
func PayAtGT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayAt), v))
	})
}

// PayAtGTE applies the GTE predicate on the "pay_at" field.
func PayAtGTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayAt), v))
	})
}

// PayAtLT applies the LT predicate on the "pay_at" field.
func PayAtLT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayAt), v))
	})
}

// PayAtLTE applies the LTE predicate on the "pay_at" field.
func PayAtLTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayAt), v))
	})
}

// PayAtIsNil applies the IsNil predicate on the "pay_at" field.
func PayAtIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayAt)))
	})
}

// PayAtNotNil applies the NotNil predicate on the "pay_at" field.
func PayAtNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayAt)))
	})
}

// AllocateAtEQ applies the EQ predicate on the "allocate_at" field.
func AllocateAtEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAllocateAt), v))
	})
}

// AllocateAtNEQ applies the NEQ predicate on the "allocate_at" field.
func AllocateAtNEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAllocateAt), v))
	})
}

// AllocateAtIn applies the In predicate on the "allocate_at" field.
func AllocateAtIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAllocateAt), v...))
	})
}

// AllocateAtNotIn applies the NotIn predicate on the "allocate_at" field.
func AllocateAtNotIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAllocateAt), v...))
	})
}

// AllocateAtGT applies the GT predicate on the "allocate_at" field.
func AllocateAtGT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAllocateAt), v))
	})
}

// AllocateAtGTE applies the GTE predicate on the "allocate_at" field.
func AllocateAtGTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAllocateAt), v))
	})
}

// AllocateAtLT applies the LT predicate on the "allocate_at" field.
func AllocateAtLT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAllocateAt), v))
	})
}

// AllocateAtLTE applies the LTE predicate on the "allocate_at" field.
func AllocateAtLTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAllocateAt), v))
	})
}

// AllocateAtIsNil applies the IsNil predicate on the "allocate_at" field.
func AllocateAtIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAllocateAt)))
	})
}

// AllocateAtNotNil applies the NotNil predicate on the "allocate_at" field.
func AllocateAtNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAllocateAt)))
	})
}

// WaitEQ applies the EQ predicate on the "wait" field.
func WaitEQ(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWait), v))
	})
}

// WaitNEQ applies the NEQ predicate on the "wait" field.
func WaitNEQ(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWait), v))
	})
}

// WaitIn applies the In predicate on the "wait" field.
func WaitIn(vs ...int) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWait), v...))
	})
}

// WaitNotIn applies the NotIn predicate on the "wait" field.
func WaitNotIn(vs ...int) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWait), v...))
	})
}

// WaitGT applies the GT predicate on the "wait" field.
func WaitGT(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWait), v))
	})
}

// WaitGTE applies the GTE predicate on the "wait" field.
func WaitGTE(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWait), v))
	})
}

// WaitLT applies the LT predicate on the "wait" field.
func WaitLT(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWait), v))
	})
}

// WaitLTE applies the LTE predicate on the "wait" field.
func WaitLTE(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWait), v))
	})
}

// FreeReasonEQ applies the EQ predicate on the "free_reason" field.
func FreeReasonEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFreeReason), v))
	})
}

// FreeReasonNEQ applies the NEQ predicate on the "free_reason" field.
func FreeReasonNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFreeReason), v))
	})
}

// FreeReasonIn applies the In predicate on the "free_reason" field.
func FreeReasonIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFreeReason), v...))
	})
}

// FreeReasonNotIn applies the NotIn predicate on the "free_reason" field.
func FreeReasonNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFreeReason), v...))
	})
}

// FreeReasonGT applies the GT predicate on the "free_reason" field.
func FreeReasonGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFreeReason), v))
	})
}

// FreeReasonGTE applies the GTE predicate on the "free_reason" field.
func FreeReasonGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFreeReason), v))
	})
}

// FreeReasonLT applies the LT predicate on the "free_reason" field.
func FreeReasonLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFreeReason), v))
	})
}

// FreeReasonLTE applies the LTE predicate on the "free_reason" field.
func FreeReasonLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFreeReason), v))
	})
}

// FreeReasonContains applies the Contains predicate on the "free_reason" field.
func FreeReasonContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFreeReason), v))
	})
}

// FreeReasonHasPrefix applies the HasPrefix predicate on the "free_reason" field.
func FreeReasonHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFreeReason), v))
	})
}

// FreeReasonHasSuffix applies the HasSuffix predicate on the "free_reason" field.
func FreeReasonHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFreeReason), v))
	})
}

// FreeReasonIsNil applies the IsNil predicate on the "free_reason" field.
func FreeReasonIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFreeReason)))
	})
}

// FreeReasonNotNil applies the NotNil predicate on the "free_reason" field.
func FreeReasonNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFreeReason)))
	})
}

// FreeReasonEqualFold applies the EqualFold predicate on the "free_reason" field.
func FreeReasonEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFreeReason), v))
	})
}

// FreeReasonContainsFold applies the ContainsFold predicate on the "free_reason" field.
func FreeReasonContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFreeReason), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDuration)))
	})
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDuration)))
	})
}

// FailReasonEQ applies the EQ predicate on the "fail_reason" field.
func FailReasonEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFailReason), v))
	})
}

// FailReasonNEQ applies the NEQ predicate on the "fail_reason" field.
func FailReasonNEQ(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFailReason), v))
	})
}

// FailReasonIn applies the In predicate on the "fail_reason" field.
func FailReasonIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFailReason), v...))
	})
}

// FailReasonNotIn applies the NotIn predicate on the "fail_reason" field.
func FailReasonNotIn(vs ...string) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFailReason), v...))
	})
}

// FailReasonGT applies the GT predicate on the "fail_reason" field.
func FailReasonGT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFailReason), v))
	})
}

// FailReasonGTE applies the GTE predicate on the "fail_reason" field.
func FailReasonGTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFailReason), v))
	})
}

// FailReasonLT applies the LT predicate on the "fail_reason" field.
func FailReasonLT(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFailReason), v))
	})
}

// FailReasonLTE applies the LTE predicate on the "fail_reason" field.
func FailReasonLTE(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFailReason), v))
	})
}

// FailReasonContains applies the Contains predicate on the "fail_reason" field.
func FailReasonContains(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFailReason), v))
	})
}

// FailReasonHasPrefix applies the HasPrefix predicate on the "fail_reason" field.
func FailReasonHasPrefix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFailReason), v))
	})
}

// FailReasonHasSuffix applies the HasSuffix predicate on the "fail_reason" field.
func FailReasonHasSuffix(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFailReason), v))
	})
}

// FailReasonIsNil applies the IsNil predicate on the "fail_reason" field.
func FailReasonIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFailReason)))
	})
}

// FailReasonNotNil applies the NotNil predicate on the "fail_reason" field.
func FailReasonNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFailReason)))
	})
}

// FailReasonEqualFold applies the EqualFold predicate on the "fail_reason" field.
func FailReasonEqualFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFailReason), v))
	})
}

// FailReasonContainsFold applies the ContainsFold predicate on the "fail_reason" field.
func FailReasonContainsFold(v string) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFailReason), v))
	})
}

// ProcessAtEQ applies the EQ predicate on the "process_at" field.
func ProcessAtEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessAt), v))
	})
}

// ProcessAtNEQ applies the NEQ predicate on the "process_at" field.
func ProcessAtNEQ(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcessAt), v))
	})
}

// ProcessAtIn applies the In predicate on the "process_at" field.
func ProcessAtIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProcessAt), v...))
	})
}

// ProcessAtNotIn applies the NotIn predicate on the "process_at" field.
func ProcessAtNotIn(vs ...time.Time) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProcessAt), v...))
	})
}

// ProcessAtGT applies the GT predicate on the "process_at" field.
func ProcessAtGT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcessAt), v))
	})
}

// ProcessAtGTE applies the GTE predicate on the "process_at" field.
func ProcessAtGTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcessAt), v))
	})
}

// ProcessAtLT applies the LT predicate on the "process_at" field.
func ProcessAtLT(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcessAt), v))
	})
}

// ProcessAtLTE applies the LTE predicate on the "process_at" field.
func ProcessAtLTE(v time.Time) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcessAt), v))
	})
}

// ProcessAtIsNil applies the IsNil predicate on the "process_at" field.
func ProcessAtIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProcessAt)))
	})
}

// ProcessAtNotNil applies the NotNil predicate on the "process_at" field.
func ProcessAtNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProcessAt)))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Assistance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Assistance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribe applies the HasEdge predicate on the "subscribe" edge.
func HasSubscribe() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribeWith applies the HasEdge predicate on the "subscribe" edge with a given conditions (other predicates).
func HasSubscribeWith(preds ...predicate.Subscribe) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.Order) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Assistance) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Assistance) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Assistance) predicate.Assistance {
	return predicate.Assistance(func(s *sql.Selector) {
		p(s.Not())
	})
}
