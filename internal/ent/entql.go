// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/setting"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 22)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   batterymodel.Table,
			Columns: batterymodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batterymodel.FieldID,
			},
		},
		Type: "BatteryModel",
		Fields: map[string]*sqlgraph.FieldSpec{
			batterymodel.FieldCreatedAt:    {Type: field.TypeTime, Column: batterymodel.FieldCreatedAt},
			batterymodel.FieldUpdatedAt:    {Type: field.TypeTime, Column: batterymodel.FieldUpdatedAt},
			batterymodel.FieldDeletedAt:    {Type: field.TypeTime, Column: batterymodel.FieldDeletedAt},
			batterymodel.FieldCreator:      {Type: field.TypeJSON, Column: batterymodel.FieldCreator},
			batterymodel.FieldLastModifier: {Type: field.TypeJSON, Column: batterymodel.FieldLastModifier},
			batterymodel.FieldRemark:       {Type: field.TypeString, Column: batterymodel.FieldRemark},
			batterymodel.FieldVoltage:      {Type: field.TypeFloat64, Column: batterymodel.FieldVoltage},
			batterymodel.FieldCapacity:     {Type: field.TypeFloat64, Column: batterymodel.FieldCapacity},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   branch.Table,
			Columns: branch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branch.FieldID,
			},
		},
		Type: "Branch",
		Fields: map[string]*sqlgraph.FieldSpec{
			branch.FieldCreatedAt:    {Type: field.TypeTime, Column: branch.FieldCreatedAt},
			branch.FieldUpdatedAt:    {Type: field.TypeTime, Column: branch.FieldUpdatedAt},
			branch.FieldDeletedAt:    {Type: field.TypeTime, Column: branch.FieldDeletedAt},
			branch.FieldCreator:      {Type: field.TypeJSON, Column: branch.FieldCreator},
			branch.FieldLastModifier: {Type: field.TypeJSON, Column: branch.FieldLastModifier},
			branch.FieldRemark:       {Type: field.TypeString, Column: branch.FieldRemark},
			branch.FieldCityID:       {Type: field.TypeUint64, Column: branch.FieldCityID},
			branch.FieldName:         {Type: field.TypeString, Column: branch.FieldName},
			branch.FieldLng:          {Type: field.TypeFloat64, Column: branch.FieldLng},
			branch.FieldLat:          {Type: field.TypeFloat64, Column: branch.FieldLat},
			branch.FieldAddress:      {Type: field.TypeString, Column: branch.FieldAddress},
			branch.FieldPhotos:       {Type: field.TypeJSON, Column: branch.FieldPhotos},
			branch.FieldGeom:         {Type: field.TypeOther, Column: branch.FieldGeom},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   branchcontract.Table,
			Columns: branchcontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branchcontract.FieldID,
			},
		},
		Type: "BranchContract",
		Fields: map[string]*sqlgraph.FieldSpec{
			branchcontract.FieldCreatedAt:         {Type: field.TypeTime, Column: branchcontract.FieldCreatedAt},
			branchcontract.FieldUpdatedAt:         {Type: field.TypeTime, Column: branchcontract.FieldUpdatedAt},
			branchcontract.FieldDeletedAt:         {Type: field.TypeTime, Column: branchcontract.FieldDeletedAt},
			branchcontract.FieldCreator:           {Type: field.TypeJSON, Column: branchcontract.FieldCreator},
			branchcontract.FieldLastModifier:      {Type: field.TypeJSON, Column: branchcontract.FieldLastModifier},
			branchcontract.FieldRemark:            {Type: field.TypeString, Column: branchcontract.FieldRemark},
			branchcontract.FieldBranchID:          {Type: field.TypeUint64, Column: branchcontract.FieldBranchID},
			branchcontract.FieldLandlordName:      {Type: field.TypeString, Column: branchcontract.FieldLandlordName},
			branchcontract.FieldIDCardNumber:      {Type: field.TypeString, Column: branchcontract.FieldIDCardNumber},
			branchcontract.FieldPhone:             {Type: field.TypeString, Column: branchcontract.FieldPhone},
			branchcontract.FieldBankNumber:        {Type: field.TypeString, Column: branchcontract.FieldBankNumber},
			branchcontract.FieldPledge:            {Type: field.TypeFloat64, Column: branchcontract.FieldPledge},
			branchcontract.FieldRent:              {Type: field.TypeFloat64, Column: branchcontract.FieldRent},
			branchcontract.FieldLease:             {Type: field.TypeUint, Column: branchcontract.FieldLease},
			branchcontract.FieldElectricityPledge: {Type: field.TypeFloat64, Column: branchcontract.FieldElectricityPledge},
			branchcontract.FieldElectricity:       {Type: field.TypeFloat64, Column: branchcontract.FieldElectricity},
			branchcontract.FieldArea:              {Type: field.TypeFloat64, Column: branchcontract.FieldArea},
			branchcontract.FieldStartTime:         {Type: field.TypeString, Column: branchcontract.FieldStartTime},
			branchcontract.FieldEndTime:           {Type: field.TypeString, Column: branchcontract.FieldEndTime},
			branchcontract.FieldFile:              {Type: field.TypeString, Column: branchcontract.FieldFile},
			branchcontract.FieldSheets:            {Type: field.TypeJSON, Column: branchcontract.FieldSheets},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinet.Table,
			Columns: cabinet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinet.FieldID,
			},
		},
		Type: "Cabinet",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinet.FieldCreatedAt:      {Type: field.TypeTime, Column: cabinet.FieldCreatedAt},
			cabinet.FieldUpdatedAt:      {Type: field.TypeTime, Column: cabinet.FieldUpdatedAt},
			cabinet.FieldDeletedAt:      {Type: field.TypeTime, Column: cabinet.FieldDeletedAt},
			cabinet.FieldCreator:        {Type: field.TypeJSON, Column: cabinet.FieldCreator},
			cabinet.FieldLastModifier:   {Type: field.TypeJSON, Column: cabinet.FieldLastModifier},
			cabinet.FieldRemark:         {Type: field.TypeString, Column: cabinet.FieldRemark},
			cabinet.FieldBranchID:       {Type: field.TypeUint64, Column: cabinet.FieldBranchID},
			cabinet.FieldSn:             {Type: field.TypeString, Column: cabinet.FieldSn},
			cabinet.FieldBrand:          {Type: field.TypeString, Column: cabinet.FieldBrand},
			cabinet.FieldSerial:         {Type: field.TypeString, Column: cabinet.FieldSerial},
			cabinet.FieldName:           {Type: field.TypeString, Column: cabinet.FieldName},
			cabinet.FieldDoors:          {Type: field.TypeUint, Column: cabinet.FieldDoors},
			cabinet.FieldStatus:         {Type: field.TypeUint8, Column: cabinet.FieldStatus},
			cabinet.FieldModels:         {Type: field.TypeJSON, Column: cabinet.FieldModels},
			cabinet.FieldHealth:         {Type: field.TypeUint8, Column: cabinet.FieldHealth},
			cabinet.FieldBin:            {Type: field.TypeJSON, Column: cabinet.FieldBin},
			cabinet.FieldBatteryNum:     {Type: field.TypeUint, Column: cabinet.FieldBatteryNum},
			cabinet.FieldBatteryFullNum: {Type: field.TypeUint, Column: cabinet.FieldBatteryFullNum},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinetfault.Table,
			Columns: cabinetfault.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetfault.FieldID,
			},
		},
		Type: "CabinetFault",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinetfault.FieldCreatedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldCreatedAt},
			cabinetfault.FieldUpdatedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldUpdatedAt},
			cabinetfault.FieldDeletedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldDeletedAt},
			cabinetfault.FieldCreator:      {Type: field.TypeJSON, Column: cabinetfault.FieldCreator},
			cabinetfault.FieldLastModifier: {Type: field.TypeJSON, Column: cabinetfault.FieldLastModifier},
			cabinetfault.FieldRemark:       {Type: field.TypeString, Column: cabinetfault.FieldRemark},
			cabinetfault.FieldCityID:       {Type: field.TypeUint64, Column: cabinetfault.FieldCityID},
			cabinetfault.FieldStatus:       {Type: field.TypeUint8, Column: cabinetfault.FieldStatus},
			cabinetfault.FieldBranchID:     {Type: field.TypeUint64, Column: cabinetfault.FieldBranchID},
			cabinetfault.FieldCabinetID:    {Type: field.TypeUint64, Column: cabinetfault.FieldCabinetID},
			cabinetfault.FieldRiderID:      {Type: field.TypeUint64, Column: cabinetfault.FieldRiderID},
			cabinetfault.FieldFault:        {Type: field.TypeString, Column: cabinetfault.FieldFault},
			cabinetfault.FieldAttachments:  {Type: field.TypeJSON, Column: cabinetfault.FieldAttachments},
			cabinetfault.FieldDescription:  {Type: field.TypeString, Column: cabinetfault.FieldDescription},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: city.FieldID,
			},
		},
		Type: "City",
		Fields: map[string]*sqlgraph.FieldSpec{
			city.FieldCreatedAt:    {Type: field.TypeTime, Column: city.FieldCreatedAt},
			city.FieldUpdatedAt:    {Type: field.TypeTime, Column: city.FieldUpdatedAt},
			city.FieldDeletedAt:    {Type: field.TypeTime, Column: city.FieldDeletedAt},
			city.FieldCreator:      {Type: field.TypeJSON, Column: city.FieldCreator},
			city.FieldLastModifier: {Type: field.TypeJSON, Column: city.FieldLastModifier},
			city.FieldRemark:       {Type: field.TypeString, Column: city.FieldRemark},
			city.FieldOpen:         {Type: field.TypeBool, Column: city.FieldOpen},
			city.FieldName:         {Type: field.TypeString, Column: city.FieldName},
			city.FieldCode:         {Type: field.TypeString, Column: city.FieldCode},
			city.FieldParentID:     {Type: field.TypeUint64, Column: city.FieldParentID},
			city.FieldLng:          {Type: field.TypeFloat64, Column: city.FieldLng},
			city.FieldLat:          {Type: field.TypeFloat64, Column: city.FieldLat},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commission.Table,
			Columns: commission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: commission.FieldID,
			},
		},
		Type: "Commission",
		Fields: map[string]*sqlgraph.FieldSpec{
			commission.FieldCreatedAt:    {Type: field.TypeTime, Column: commission.FieldCreatedAt},
			commission.FieldUpdatedAt:    {Type: field.TypeTime, Column: commission.FieldUpdatedAt},
			commission.FieldDeletedAt:    {Type: field.TypeTime, Column: commission.FieldDeletedAt},
			commission.FieldCreator:      {Type: field.TypeJSON, Column: commission.FieldCreator},
			commission.FieldLastModifier: {Type: field.TypeJSON, Column: commission.FieldLastModifier},
			commission.FieldRemark:       {Type: field.TypeString, Column: commission.FieldRemark},
			commission.FieldOrderID:      {Type: field.TypeUint64, Column: commission.FieldOrderID},
			commission.FieldAmount:       {Type: field.TypeFloat64, Column: commission.FieldAmount},
			commission.FieldStatus:       {Type: field.TypeUint8, Column: commission.FieldStatus},
			commission.FieldEmployeeID:   {Type: field.TypeUint64, Column: commission.FieldEmployeeID},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: contract.FieldID,
			},
		},
		Type: "Contract",
		Fields: map[string]*sqlgraph.FieldSpec{
			contract.FieldCreatedAt:    {Type: field.TypeTime, Column: contract.FieldCreatedAt},
			contract.FieldUpdatedAt:    {Type: field.TypeTime, Column: contract.FieldUpdatedAt},
			contract.FieldDeletedAt:    {Type: field.TypeTime, Column: contract.FieldDeletedAt},
			contract.FieldCreator:      {Type: field.TypeJSON, Column: contract.FieldCreator},
			contract.FieldLastModifier: {Type: field.TypeJSON, Column: contract.FieldLastModifier},
			contract.FieldRemark:       {Type: field.TypeString, Column: contract.FieldRemark},
			contract.FieldStatus:       {Type: field.TypeUint8, Column: contract.FieldStatus},
			contract.FieldRiderID:      {Type: field.TypeUint64, Column: contract.FieldRiderID},
			contract.FieldFlowID:       {Type: field.TypeString, Column: contract.FieldFlowID},
			contract.FieldSn:           {Type: field.TypeString, Column: contract.FieldSn},
			contract.FieldFiles:        {Type: field.TypeJSON, Column: contract.FieldFiles},
			contract.FieldEffective:    {Type: field.TypeBool, Column: contract.FieldEffective},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: employee.FieldID,
			},
		},
		Type: "Employee",
		Fields: map[string]*sqlgraph.FieldSpec{
			employee.FieldCreatedAt:    {Type: field.TypeTime, Column: employee.FieldCreatedAt},
			employee.FieldUpdatedAt:    {Type: field.TypeTime, Column: employee.FieldUpdatedAt},
			employee.FieldDeletedAt:    {Type: field.TypeTime, Column: employee.FieldDeletedAt},
			employee.FieldCreator:      {Type: field.TypeJSON, Column: employee.FieldCreator},
			employee.FieldLastModifier: {Type: field.TypeJSON, Column: employee.FieldLastModifier},
			employee.FieldRemark:       {Type: field.TypeString, Column: employee.FieldRemark},
			employee.FieldName:         {Type: field.TypeString, Column: employee.FieldName},
			employee.FieldPhone:        {Type: field.TypeString, Column: employee.FieldPhone},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprise.Table,
			Columns: enterprise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprise.FieldID,
			},
		},
		Type: "Enterprise",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprise.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprise.FieldCreatedAt},
			enterprise.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprise.FieldUpdatedAt},
			enterprise.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprise.FieldDeletedAt},
			enterprise.FieldCreator:      {Type: field.TypeJSON, Column: enterprise.FieldCreator},
			enterprise.FieldLastModifier: {Type: field.TypeJSON, Column: enterprise.FieldLastModifier},
			enterprise.FieldRemark:       {Type: field.TypeString, Column: enterprise.FieldRemark},
			enterprise.FieldName:         {Type: field.TypeString, Column: enterprise.FieldName},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exchange.FieldID,
			},
		},
		Type: "Exchange",
		Fields: map[string]*sqlgraph.FieldSpec{
			exchange.FieldCreatedAt:    {Type: field.TypeTime, Column: exchange.FieldCreatedAt},
			exchange.FieldUpdatedAt:    {Type: field.TypeTime, Column: exchange.FieldUpdatedAt},
			exchange.FieldDeletedAt:    {Type: field.TypeTime, Column: exchange.FieldDeletedAt},
			exchange.FieldCreator:      {Type: field.TypeJSON, Column: exchange.FieldCreator},
			exchange.FieldLastModifier: {Type: field.TypeJSON, Column: exchange.FieldLastModifier},
			exchange.FieldRemark:       {Type: field.TypeString, Column: exchange.FieldRemark},
			exchange.FieldCityID:       {Type: field.TypeUint64, Column: exchange.FieldCityID},
			exchange.FieldEmployeeID:   {Type: field.TypeUint64, Column: exchange.FieldEmployeeID},
			exchange.FieldStoreID:      {Type: field.TypeUint64, Column: exchange.FieldStoreID},
			exchange.FieldRiderID:      {Type: field.TypeUint64, Column: exchange.FieldRiderID},
			exchange.FieldUUID:         {Type: field.TypeString, Column: exchange.FieldUUID},
			exchange.FieldCabinetID:    {Type: field.TypeUint64, Column: exchange.FieldCabinetID},
			exchange.FieldSuccess:      {Type: field.TypeBool, Column: exchange.FieldSuccess},
			exchange.FieldDetail:       {Type: field.TypeJSON, Column: exchange.FieldDetail},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   manager.Table,
			Columns: manager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: manager.FieldID,
			},
		},
		Type: "Manager",
		Fields: map[string]*sqlgraph.FieldSpec{
			manager.FieldCreatedAt:    {Type: field.TypeTime, Column: manager.FieldCreatedAt},
			manager.FieldUpdatedAt:    {Type: field.TypeTime, Column: manager.FieldUpdatedAt},
			manager.FieldDeletedAt:    {Type: field.TypeTime, Column: manager.FieldDeletedAt},
			manager.FieldCreator:      {Type: field.TypeJSON, Column: manager.FieldCreator},
			manager.FieldLastModifier: {Type: field.TypeJSON, Column: manager.FieldLastModifier},
			manager.FieldRemark:       {Type: field.TypeString, Column: manager.FieldRemark},
			manager.FieldPhone:        {Type: field.TypeString, Column: manager.FieldPhone},
			manager.FieldName:         {Type: field.TypeString, Column: manager.FieldName},
			manager.FieldPassword:     {Type: field.TypeString, Column: manager.FieldPassword},
			manager.FieldLastSigninAt: {Type: field.TypeTime, Column: manager.FieldLastSigninAt},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldCreatedAt:    {Type: field.TypeTime, Column: order.FieldCreatedAt},
			order.FieldUpdatedAt:    {Type: field.TypeTime, Column: order.FieldUpdatedAt},
			order.FieldDeletedAt:    {Type: field.TypeTime, Column: order.FieldDeletedAt},
			order.FieldCreator:      {Type: field.TypeJSON, Column: order.FieldCreator},
			order.FieldLastModifier: {Type: field.TypeJSON, Column: order.FieldLastModifier},
			order.FieldRemark:       {Type: field.TypeString, Column: order.FieldRemark},
			order.FieldPlanID:       {Type: field.TypeUint64, Column: order.FieldPlanID},
			order.FieldCityID:       {Type: field.TypeUint64, Column: order.FieldCityID},
			order.FieldRiderID:      {Type: field.TypeUint64, Column: order.FieldRiderID},
			order.FieldParentID:     {Type: field.TypeUint64, Column: order.FieldParentID},
			order.FieldSubscribeID:  {Type: field.TypeUint64, Column: order.FieldSubscribeID},
			order.FieldStatus:       {Type: field.TypeUint8, Column: order.FieldStatus},
			order.FieldPayway:       {Type: field.TypeUint8, Column: order.FieldPayway},
			order.FieldType:         {Type: field.TypeUint, Column: order.FieldType},
			order.FieldOutTradeNo:   {Type: field.TypeString, Column: order.FieldOutTradeNo},
			order.FieldTradeNo:      {Type: field.TypeString, Column: order.FieldTradeNo},
			order.FieldAmount:       {Type: field.TypeFloat64, Column: order.FieldAmount},
			order.FieldTotal:        {Type: field.TypeFloat64, Column: order.FieldTotal},
			order.FieldRefundAt:     {Type: field.TypeTime, Column: order.FieldRefundAt},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderrefund.Table,
			Columns: orderrefund.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderrefund.FieldID,
			},
		},
		Type: "OrderRefund",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderrefund.FieldCreatedAt:    {Type: field.TypeTime, Column: orderrefund.FieldCreatedAt},
			orderrefund.FieldUpdatedAt:    {Type: field.TypeTime, Column: orderrefund.FieldUpdatedAt},
			orderrefund.FieldDeletedAt:    {Type: field.TypeTime, Column: orderrefund.FieldDeletedAt},
			orderrefund.FieldCreator:      {Type: field.TypeJSON, Column: orderrefund.FieldCreator},
			orderrefund.FieldLastModifier: {Type: field.TypeJSON, Column: orderrefund.FieldLastModifier},
			orderrefund.FieldRemark:       {Type: field.TypeString, Column: orderrefund.FieldRemark},
			orderrefund.FieldOrderID:      {Type: field.TypeUint64, Column: orderrefund.FieldOrderID},
			orderrefund.FieldStatus:       {Type: field.TypeUint8, Column: orderrefund.FieldStatus},
			orderrefund.FieldAmount:       {Type: field.TypeFloat64, Column: orderrefund.FieldAmount},
			orderrefund.FieldOutRefundNo:  {Type: field.TypeString, Column: orderrefund.FieldOutRefundNo},
			orderrefund.FieldReason:       {Type: field.TypeString, Column: orderrefund.FieldReason},
			orderrefund.FieldRefundAt:     {Type: field.TypeTime, Column: orderrefund.FieldRefundAt},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
		Type: "Person",
		Fields: map[string]*sqlgraph.FieldSpec{
			person.FieldCreatedAt:      {Type: field.TypeTime, Column: person.FieldCreatedAt},
			person.FieldUpdatedAt:      {Type: field.TypeTime, Column: person.FieldUpdatedAt},
			person.FieldDeletedAt:      {Type: field.TypeTime, Column: person.FieldDeletedAt},
			person.FieldCreator:        {Type: field.TypeJSON, Column: person.FieldCreator},
			person.FieldLastModifier:   {Type: field.TypeJSON, Column: person.FieldLastModifier},
			person.FieldRemark:         {Type: field.TypeString, Column: person.FieldRemark},
			person.FieldStatus:         {Type: field.TypeUint8, Column: person.FieldStatus},
			person.FieldBanned:         {Type: field.TypeBool, Column: person.FieldBanned},
			person.FieldName:           {Type: field.TypeString, Column: person.FieldName},
			person.FieldIDCardNumber:   {Type: field.TypeString, Column: person.FieldIDCardNumber},
			person.FieldIDCardType:     {Type: field.TypeUint8, Column: person.FieldIDCardType},
			person.FieldIDCardPortrait: {Type: field.TypeString, Column: person.FieldIDCardPortrait},
			person.FieldIDCardNational: {Type: field.TypeString, Column: person.FieldIDCardNational},
			person.FieldAuthFace:       {Type: field.TypeString, Column: person.FieldAuthFace},
			person.FieldAuthResult:     {Type: field.TypeJSON, Column: person.FieldAuthResult},
			person.FieldAuthAt:         {Type: field.TypeTime, Column: person.FieldAuthAt},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: plan.FieldID,
			},
		},
		Type: "Plan",
		Fields: map[string]*sqlgraph.FieldSpec{
			plan.FieldCreatedAt:    {Type: field.TypeTime, Column: plan.FieldCreatedAt},
			plan.FieldUpdatedAt:    {Type: field.TypeTime, Column: plan.FieldUpdatedAt},
			plan.FieldDeletedAt:    {Type: field.TypeTime, Column: plan.FieldDeletedAt},
			plan.FieldCreator:      {Type: field.TypeJSON, Column: plan.FieldCreator},
			plan.FieldLastModifier: {Type: field.TypeJSON, Column: plan.FieldLastModifier},
			plan.FieldRemark:       {Type: field.TypeString, Column: plan.FieldRemark},
			plan.FieldEnable:       {Type: field.TypeBool, Column: plan.FieldEnable},
			plan.FieldName:         {Type: field.TypeString, Column: plan.FieldName},
			plan.FieldStart:        {Type: field.TypeTime, Column: plan.FieldStart},
			plan.FieldEnd:          {Type: field.TypeTime, Column: plan.FieldEnd},
			plan.FieldPrice:        {Type: field.TypeFloat64, Column: plan.FieldPrice},
			plan.FieldDays:         {Type: field.TypeUint, Column: plan.FieldDays},
			plan.FieldCommission:   {Type: field.TypeFloat64, Column: plan.FieldCommission},
			plan.FieldOriginal:     {Type: field.TypeFloat64, Column: plan.FieldOriginal},
			plan.FieldDesc:         {Type: field.TypeString, Column: plan.FieldDesc},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
		Type: "Rider",
		Fields: map[string]*sqlgraph.FieldSpec{
			rider.FieldCreatedAt:      {Type: field.TypeTime, Column: rider.FieldCreatedAt},
			rider.FieldUpdatedAt:      {Type: field.TypeTime, Column: rider.FieldUpdatedAt},
			rider.FieldDeletedAt:      {Type: field.TypeTime, Column: rider.FieldDeletedAt},
			rider.FieldCreator:        {Type: field.TypeJSON, Column: rider.FieldCreator},
			rider.FieldLastModifier:   {Type: field.TypeJSON, Column: rider.FieldLastModifier},
			rider.FieldRemark:         {Type: field.TypeString, Column: rider.FieldRemark},
			rider.FieldPersonID:       {Type: field.TypeUint64, Column: rider.FieldPersonID},
			rider.FieldEnterpriseID:   {Type: field.TypeUint64, Column: rider.FieldEnterpriseID},
			rider.FieldPhone:          {Type: field.TypeString, Column: rider.FieldPhone},
			rider.FieldContact:        {Type: field.TypeJSON, Column: rider.FieldContact},
			rider.FieldDeviceType:     {Type: field.TypeUint8, Column: rider.FieldDeviceType},
			rider.FieldLastDevice:     {Type: field.TypeString, Column: rider.FieldLastDevice},
			rider.FieldIsNewDevice:    {Type: field.TypeBool, Column: rider.FieldIsNewDevice},
			rider.FieldLastFace:       {Type: field.TypeString, Column: rider.FieldLastFace},
			rider.FieldPushID:         {Type: field.TypeString, Column: rider.FieldPushID},
			rider.FieldLastSigninAt:   {Type: field.TypeTime, Column: rider.FieldLastSigninAt},
			rider.FieldEsignAccountID: {Type: field.TypeString, Column: rider.FieldEsignAccountID},
			rider.FieldPlanAt:         {Type: field.TypeTime, Column: rider.FieldPlanAt},
			rider.FieldBlocked:        {Type: field.TypeBool, Column: rider.FieldBlocked},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   setting.Table,
			Columns: setting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: setting.FieldID,
			},
		},
		Type: "Setting",
		Fields: map[string]*sqlgraph.FieldSpec{
			setting.FieldCreatedAt:    {Type: field.TypeTime, Column: setting.FieldCreatedAt},
			setting.FieldUpdatedAt:    {Type: field.TypeTime, Column: setting.FieldUpdatedAt},
			setting.FieldCreator:      {Type: field.TypeJSON, Column: setting.FieldCreator},
			setting.FieldLastModifier: {Type: field.TypeJSON, Column: setting.FieldLastModifier},
			setting.FieldRemark:       {Type: field.TypeString, Column: setting.FieldRemark},
			setting.FieldKey:          {Type: field.TypeString, Column: setting.FieldKey},
			setting.FieldDesc:         {Type: field.TypeString, Column: setting.FieldDesc},
			setting.FieldContent:      {Type: field.TypeString, Column: setting.FieldContent},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: store.FieldID,
			},
		},
		Type: "Store",
		Fields: map[string]*sqlgraph.FieldSpec{
			store.FieldCreatedAt:    {Type: field.TypeTime, Column: store.FieldCreatedAt},
			store.FieldUpdatedAt:    {Type: field.TypeTime, Column: store.FieldUpdatedAt},
			store.FieldDeletedAt:    {Type: field.TypeTime, Column: store.FieldDeletedAt},
			store.FieldCreator:      {Type: field.TypeJSON, Column: store.FieldCreator},
			store.FieldLastModifier: {Type: field.TypeJSON, Column: store.FieldLastModifier},
			store.FieldRemark:       {Type: field.TypeString, Column: store.FieldRemark},
			store.FieldEmployeeID:   {Type: field.TypeUint64, Column: store.FieldEmployeeID},
			store.FieldBranchID:     {Type: field.TypeUint64, Column: store.FieldBranchID},
			store.FieldSn:           {Type: field.TypeString, Column: store.FieldSn},
			store.FieldName:         {Type: field.TypeString, Column: store.FieldName},
			store.FieldStatus:       {Type: field.TypeUint8, Column: store.FieldStatus},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribe.Table,
			Columns: subscribe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribe.FieldID,
			},
		},
		Type: "Subscribe",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribe.FieldCreatedAt:      {Type: field.TypeTime, Column: subscribe.FieldCreatedAt},
			subscribe.FieldUpdatedAt:      {Type: field.TypeTime, Column: subscribe.FieldUpdatedAt},
			subscribe.FieldDeletedAt:      {Type: field.TypeTime, Column: subscribe.FieldDeletedAt},
			subscribe.FieldCreator:        {Type: field.TypeJSON, Column: subscribe.FieldCreator},
			subscribe.FieldLastModifier:   {Type: field.TypeJSON, Column: subscribe.FieldLastModifier},
			subscribe.FieldRemark:         {Type: field.TypeString, Column: subscribe.FieldRemark},
			subscribe.FieldPlanID:         {Type: field.TypeUint64, Column: subscribe.FieldPlanID},
			subscribe.FieldEmployeeID:     {Type: field.TypeUint64, Column: subscribe.FieldEmployeeID},
			subscribe.FieldCityID:         {Type: field.TypeUint64, Column: subscribe.FieldCityID},
			subscribe.FieldRiderID:        {Type: field.TypeUint64, Column: subscribe.FieldRiderID},
			subscribe.FieldInitialOrderID: {Type: field.TypeUint64, Column: subscribe.FieldInitialOrderID},
			subscribe.FieldStatus:         {Type: field.TypeUint8, Column: subscribe.FieldStatus},
			subscribe.FieldType:           {Type: field.TypeUint, Column: subscribe.FieldType},
			subscribe.FieldVoltage:        {Type: field.TypeFloat64, Column: subscribe.FieldVoltage},
			subscribe.FieldInitialDays:    {Type: field.TypeInt, Column: subscribe.FieldInitialDays},
			subscribe.FieldAlterDays:      {Type: field.TypeInt, Column: subscribe.FieldAlterDays},
			subscribe.FieldPauseDays:      {Type: field.TypeInt, Column: subscribe.FieldPauseDays},
			subscribe.FieldRenewalDays:    {Type: field.TypeInt, Column: subscribe.FieldRenewalDays},
			subscribe.FieldOverdueDays:    {Type: field.TypeInt, Column: subscribe.FieldOverdueDays},
			subscribe.FieldRemaining:      {Type: field.TypeInt, Column: subscribe.FieldRemaining},
			subscribe.FieldPausedAt:       {Type: field.TypeTime, Column: subscribe.FieldPausedAt},
			subscribe.FieldStartAt:        {Type: field.TypeTime, Column: subscribe.FieldStartAt},
			subscribe.FieldEndAt:          {Type: field.TypeTime, Column: subscribe.FieldEndAt},
			subscribe.FieldRefundAt:       {Type: field.TypeTime, Column: subscribe.FieldRefundAt},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribealter.Table,
			Columns: subscribealter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribealter.FieldID,
			},
		},
		Type: "SubscribeAlter",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribealter.FieldCreatedAt:    {Type: field.TypeTime, Column: subscribealter.FieldCreatedAt},
			subscribealter.FieldUpdatedAt:    {Type: field.TypeTime, Column: subscribealter.FieldUpdatedAt},
			subscribealter.FieldDeletedAt:    {Type: field.TypeTime, Column: subscribealter.FieldDeletedAt},
			subscribealter.FieldCreator:      {Type: field.TypeJSON, Column: subscribealter.FieldCreator},
			subscribealter.FieldLastModifier: {Type: field.TypeJSON, Column: subscribealter.FieldLastModifier},
			subscribealter.FieldRemark:       {Type: field.TypeString, Column: subscribealter.FieldRemark},
			subscribealter.FieldRiderID:      {Type: field.TypeUint64, Column: subscribealter.FieldRiderID},
			subscribealter.FieldManagerID:    {Type: field.TypeUint64, Column: subscribealter.FieldManagerID},
			subscribealter.FieldSubscribeID:  {Type: field.TypeUint64, Column: subscribealter.FieldSubscribeID},
			subscribealter.FieldDays:         {Type: field.TypeInt, Column: subscribealter.FieldDays},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribepause.Table,
			Columns: subscribepause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribepause.FieldID,
			},
		},
		Type: "SubscribePause",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribepause.FieldCreatedAt:    {Type: field.TypeTime, Column: subscribepause.FieldCreatedAt},
			subscribepause.FieldUpdatedAt:    {Type: field.TypeTime, Column: subscribepause.FieldUpdatedAt},
			subscribepause.FieldDeletedAt:    {Type: field.TypeTime, Column: subscribepause.FieldDeletedAt},
			subscribepause.FieldCreator:      {Type: field.TypeJSON, Column: subscribepause.FieldCreator},
			subscribepause.FieldLastModifier: {Type: field.TypeJSON, Column: subscribepause.FieldLastModifier},
			subscribepause.FieldRemark:       {Type: field.TypeString, Column: subscribepause.FieldRemark},
			subscribepause.FieldRiderID:      {Type: field.TypeUint64, Column: subscribepause.FieldRiderID},
			subscribepause.FieldEmployeeID:   {Type: field.TypeUint64, Column: subscribepause.FieldEmployeeID},
			subscribepause.FieldSubscribeID:  {Type: field.TypeUint64, Column: subscribepause.FieldSubscribeID},
			subscribepause.FieldStartAt:      {Type: field.TypeTime, Column: subscribepause.FieldStartAt},
			subscribepause.FieldEndAt:        {Type: field.TypeTime, Column: subscribepause.FieldEndAt},
			subscribepause.FieldDays:         {Type: field.TypeInt, Column: subscribepause.FieldDays},
		},
	}
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
		},
		"BatteryModel",
		"Cabinet",
	)
	graph.MustAddE(
		"plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.PlansTable,
			Columns: batterymodel.PlansPrimaryKey,
			Bidi:    false,
		},
		"BatteryModel",
		"Plan",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   branch.CityTable,
			Columns: []string{branch.CityColumn},
			Bidi:    false,
		},
		"Branch",
		"City",
	)
	graph.MustAddE(
		"contracts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
		},
		"Branch",
		"BranchContract",
	)
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
		},
		"Branch",
		"Cabinet",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
		},
		"Branch",
		"CabinetFault",
	)
	graph.MustAddE(
		"stores",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
		},
		"Branch",
		"Store",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
		},
		"BranchContract",
		"Branch",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Branch",
	)
	graph.MustAddE(
		"bms",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.BmsTable,
			Columns: cabinet.BmsPrimaryKey,
			Bidi:    false,
		},
		"Cabinet",
		"BatteryModel",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
		},
		"Cabinet",
		"CabinetFault",
	)
	graph.MustAddE(
		"exchanges",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Exchange",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetfault.CityTable,
			Columns: []string{cabinetfault.CityColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"City",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.BranchTable,
			Columns: []string{cabinetfault.BranchColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Branch",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.CabinetTable,
			Columns: []string{cabinetfault.CabinetColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.RiderTable,
			Columns: []string{cabinetfault.RiderColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Rider",
	)
	graph.MustAddE(
		"plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   city.PlansTable,
			Columns: city.PlansPrimaryKey,
			Bidi:    false,
		},
		"City",
		"Plan",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ParentTable,
			Columns: []string{city.ParentColumn},
			Bidi:    false,
		},
		"City",
		"City",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ChildrenTable,
			Columns: []string{city.ChildrenColumn},
			Bidi:    false,
		},
		"City",
		"City",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commission.OrderTable,
			Columns: []string{commission.OrderColumn},
			Bidi:    false,
		},
		"Commission",
		"Order",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
		},
		"Contract",
		"Rider",
	)
	graph.MustAddE(
		"riders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Rider",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
		},
		"Exchange",
		"City",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
		},
		"Exchange",
		"Employee",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
		},
		"Exchange",
		"Store",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
		},
		"Exchange",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
		},
		"Exchange",
		"Rider",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.PlanTable,
			Columns: []string{order.PlanColumn},
			Bidi:    false,
		},
		"Order",
		"Plan",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CityTable,
			Columns: []string{order.CityColumn},
			Bidi:    false,
		},
		"Order",
		"City",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RiderTable,
			Columns: []string{order.RiderColumn},
			Bidi:    false,
		},
		"Order",
		"Rider",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.SubscribeTable,
			Columns: []string{order.SubscribeColumn},
			Bidi:    false,
		},
		"Order",
		"Subscribe",
	)
	graph.MustAddE(
		"commission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.CommissionTable,
			Columns: []string{order.CommissionColumn},
			Bidi:    false,
		},
		"Order",
		"Commission",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ParentTable,
			Columns: []string{order.ParentColumn},
			Bidi:    false,
		},
		"Order",
		"Order",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
		},
		"Order",
		"Order",
	)
	graph.MustAddE(
		"refunds",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
		},
		"Order",
		"OrderRefund",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
		},
		"OrderRefund",
		"Order",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
		},
		"Person",
		"Rider",
	)
	graph.MustAddE(
		"pms",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PmsTable,
			Columns: plan.PmsPrimaryKey,
			Bidi:    false,
		},
		"Plan",
		"BatteryModel",
	)
	graph.MustAddE(
		"cities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
		},
		"Plan",
		"City",
	)
	graph.MustAddE(
		"person",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
		},
		"Rider",
		"Person",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
		},
		"Rider",
		"Enterprise",
	)
	graph.MustAddE(
		"contract",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractTable,
			Columns: []string{rider.ContractColumn},
			Bidi:    false,
		},
		"Rider",
		"Contract",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
		},
		"Rider",
		"CabinetFault",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
		},
		"Rider",
		"Order",
	)
	graph.MustAddE(
		"exchanges",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
		},
		"Rider",
		"Exchange",
	)
	graph.MustAddE(
		"subscribes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
		},
		"Rider",
		"Subscribe",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
		},
		"Store",
		"Employee",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
		},
		"Store",
		"Branch",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Plan",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Employee",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
		},
		"Subscribe",
		"City",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Rider",
	)
	graph.MustAddE(
		"pauses",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
		},
		"Subscribe",
		"SubscribePause",
	)
	graph.MustAddE(
		"alters",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
		},
		"Subscribe",
		"SubscribeAlter",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Order",
	)
	graph.MustAddE(
		"initial_order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Order",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.RiderTable,
			Columns: []string{subscribealter.RiderColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Rider",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.ManagerTable,
			Columns: []string{subscribealter.ManagerColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Manager",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribealter.SubscribeTable,
			Columns: []string{subscribealter.SubscribeColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Subscribe",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.RiderTable,
			Columns: []string{subscribepause.RiderColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Rider",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EmployeeTable,
			Columns: []string{subscribepause.EmployeeColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Employee",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribepause.SubscribeTable,
			Columns: []string{subscribepause.SubscribeColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Subscribe",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (bmq *BatteryModelQuery) addPredicate(pred func(s *sql.Selector)) {
	bmq.predicates = append(bmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BatteryModelQuery builder.
func (bmq *BatteryModelQuery) Filter() *BatteryModelFilter {
	return &BatteryModelFilter{bmq.config, bmq}
}

// addPredicate implements the predicateAdder interface.
func (m *BatteryModelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BatteryModelMutation builder.
func (m *BatteryModelMutation) Filter() *BatteryModelFilter {
	return &BatteryModelFilter{m.config, m}
}

// BatteryModelFilter provides a generic filtering capability at runtime for BatteryModelQuery.
type BatteryModelFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BatteryModelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BatteryModelFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(batterymodel.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BatteryModelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BatteryModelFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BatteryModelFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BatteryModelFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(batterymodel.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BatteryModelFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(batterymodel.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BatteryModelFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(batterymodel.FieldRemark))
}

// WhereVoltage applies the entql float64 predicate on the voltage field.
func (f *BatteryModelFilter) WhereVoltage(p entql.Float64P) {
	f.Where(p.Field(batterymodel.FieldVoltage))
}

// WhereCapacity applies the entql float64 predicate on the capacity field.
func (f *BatteryModelFilter) WhereCapacity(p entql.Float64P) {
	f.Where(p.Field(batterymodel.FieldCapacity))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *BatteryModelFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *BatteryModelFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlans applies a predicate to check if query has an edge plans.
func (f *BatteryModelFilter) WhereHasPlans() {
	f.Where(entql.HasEdge("plans"))
}

// WhereHasPlansWith applies a predicate to check if query has an edge plans with a given conditions (other predicates).
func (f *BatteryModelFilter) WhereHasPlansWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BranchQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BranchQuery builder.
func (bq *BranchQuery) Filter() *BranchFilter {
	return &BranchFilter{bq.config, bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BranchMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BranchMutation builder.
func (m *BranchMutation) Filter() *BranchFilter {
	return &BranchFilter{m.config, m}
}

// BranchFilter provides a generic filtering capability at runtime for BranchQuery.
type BranchFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BranchFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BranchFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(branch.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BranchFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BranchFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BranchFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BranchFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(branch.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BranchFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(branch.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BranchFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(branch.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *BranchFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(branch.FieldCityID))
}

// WhereName applies the entql string predicate on the name field.
func (f *BranchFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(branch.FieldName))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *BranchFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(branch.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *BranchFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(branch.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *BranchFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(branch.FieldAddress))
}

// WherePhotos applies the entql json.RawMessage predicate on the photos field.
func (f *BranchFilter) WherePhotos(p entql.BytesP) {
	f.Where(p.Field(branch.FieldPhotos))
}

// WhereGeom applies the entql other predicate on the geom field.
func (f *BranchFilter) WhereGeom(p entql.OtherP) {
	f.Where(p.Field(branch.FieldGeom))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *BranchFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *BranchFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContracts applies a predicate to check if query has an edge contracts.
func (f *BranchFilter) WhereHasContracts() {
	f.Where(entql.HasEdge("contracts"))
}

// WhereHasContractsWith applies a predicate to check if query has an edge contracts with a given conditions (other predicates).
func (f *BranchFilter) WhereHasContractsWith(preds ...predicate.BranchContract) {
	f.Where(entql.HasEdgeWith("contracts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *BranchFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *BranchFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *BranchFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *BranchFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStores applies a predicate to check if query has an edge stores.
func (f *BranchFilter) WhereHasStores() {
	f.Where(entql.HasEdge("stores"))
}

// WhereHasStoresWith applies a predicate to check if query has an edge stores with a given conditions (other predicates).
func (f *BranchFilter) WhereHasStoresWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("stores", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bcq *BranchContractQuery) addPredicate(pred func(s *sql.Selector)) {
	bcq.predicates = append(bcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BranchContractQuery builder.
func (bcq *BranchContractQuery) Filter() *BranchContractFilter {
	return &BranchContractFilter{bcq.config, bcq}
}

// addPredicate implements the predicateAdder interface.
func (m *BranchContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BranchContractMutation builder.
func (m *BranchContractMutation) Filter() *BranchContractFilter {
	return &BranchContractFilter{m.config, m}
}

// BranchContractFilter provides a generic filtering capability at runtime for BranchContractQuery.
type BranchContractFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BranchContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BranchContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(branchcontract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BranchContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BranchContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BranchContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BranchContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BranchContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BranchContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldRemark))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *BranchContractFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(branchcontract.FieldBranchID))
}

// WhereLandlordName applies the entql string predicate on the landlord_name field.
func (f *BranchContractFilter) WhereLandlordName(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldLandlordName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *BranchContractFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldIDCardNumber))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *BranchContractFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldPhone))
}

// WhereBankNumber applies the entql string predicate on the bank_number field.
func (f *BranchContractFilter) WhereBankNumber(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldBankNumber))
}

// WherePledge applies the entql float64 predicate on the pledge field.
func (f *BranchContractFilter) WherePledge(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldPledge))
}

// WhereRent applies the entql float64 predicate on the rent field.
func (f *BranchContractFilter) WhereRent(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldRent))
}

// WhereLease applies the entql uint predicate on the lease field.
func (f *BranchContractFilter) WhereLease(p entql.UintP) {
	f.Where(p.Field(branchcontract.FieldLease))
}

// WhereElectricityPledge applies the entql float64 predicate on the electricity_pledge field.
func (f *BranchContractFilter) WhereElectricityPledge(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldElectricityPledge))
}

// WhereElectricity applies the entql float64 predicate on the electricity field.
func (f *BranchContractFilter) WhereElectricity(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldElectricity))
}

// WhereArea applies the entql float64 predicate on the area field.
func (f *BranchContractFilter) WhereArea(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldArea))
}

// WhereStartTime applies the entql string predicate on the start_time field.
func (f *BranchContractFilter) WhereStartTime(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldStartTime))
}

// WhereEndTime applies the entql string predicate on the end_time field.
func (f *BranchContractFilter) WhereEndTime(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldEndTime))
}

// WhereFile applies the entql string predicate on the file field.
func (f *BranchContractFilter) WhereFile(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldFile))
}

// WhereSheets applies the entql json.RawMessage predicate on the sheets field.
func (f *BranchContractFilter) WhereSheets(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldSheets))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *BranchContractFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *BranchContractFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CabinetQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetQuery builder.
func (cq *CabinetQuery) Filter() *CabinetFilter {
	return &CabinetFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetMutation builder.
func (m *CabinetMutation) Filter() *CabinetFilter {
	return &CabinetFilter{m.config, m}
}

// CabinetFilter provides a generic filtering capability at runtime for CabinetQuery.
type CabinetFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CabinetFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CabinetFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CabinetFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CabinetFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CabinetFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldRemark))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *CabinetFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldBranchID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *CabinetFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSn))
}

// WhereBrand applies the entql string predicate on the brand field.
func (f *CabinetFilter) WhereBrand(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldBrand))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *CabinetFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSerial))
}

// WhereName applies the entql string predicate on the name field.
func (f *CabinetFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldName))
}

// WhereDoors applies the entql uint predicate on the doors field.
func (f *CabinetFilter) WhereDoors(p entql.UintP) {
	f.Where(p.Field(cabinet.FieldDoors))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CabinetFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(cabinet.FieldStatus))
}

// WhereModels applies the entql json.RawMessage predicate on the models field.
func (f *CabinetFilter) WhereModels(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldModels))
}

// WhereHealth applies the entql uint8 predicate on the health field.
func (f *CabinetFilter) WhereHealth(p entql.Uint8P) {
	f.Where(p.Field(cabinet.FieldHealth))
}

// WhereBin applies the entql json.RawMessage predicate on the bin field.
func (f *CabinetFilter) WhereBin(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldBin))
}

// WhereBatteryNum applies the entql uint predicate on the battery_num field.
func (f *CabinetFilter) WhereBatteryNum(p entql.UintP) {
	f.Where(p.Field(cabinet.FieldBatteryNum))
}

// WhereBatteryFullNum applies the entql uint predicate on the battery_full_num field.
func (f *CabinetFilter) WhereBatteryFullNum(p entql.UintP) {
	f.Where(p.Field(cabinet.FieldBatteryFullNum))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *CabinetFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBms applies a predicate to check if query has an edge bms.
func (f *CabinetFilter) WhereHasBms() {
	f.Where(entql.HasEdge("bms"))
}

// WhereHasBmsWith applies a predicate to check if query has an edge bms with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBmsWith(preds ...predicate.BatteryModel) {
	f.Where(entql.HasEdgeWith("bms", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *CabinetFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExchanges applies a predicate to check if query has an edge exchanges.
func (f *CabinetFilter) WhereHasExchanges() {
	f.Where(entql.HasEdge("exchanges"))
}

// WhereHasExchangesWith applies a predicate to check if query has an edge exchanges with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasExchangesWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchanges", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cfq *CabinetFaultQuery) addPredicate(pred func(s *sql.Selector)) {
	cfq.predicates = append(cfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetFaultQuery builder.
func (cfq *CabinetFaultQuery) Filter() *CabinetFaultFilter {
	return &CabinetFaultFilter{cfq.config, cfq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetFaultMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetFaultMutation builder.
func (m *CabinetFaultMutation) Filter() *CabinetFaultFilter {
	return &CabinetFaultFilter{m.config, m}
}

// CabinetFaultFilter provides a generic filtering capability at runtime for CabinetFaultQuery.
type CabinetFaultFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CabinetFaultFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetFaultFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetFaultFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetFaultFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CabinetFaultFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CabinetFaultFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CabinetFaultFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CabinetFaultFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *CabinetFaultFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldCityID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CabinetFaultFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(cabinetfault.FieldStatus))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *CabinetFaultFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldBranchID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *CabinetFaultFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldCabinetID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *CabinetFaultFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldRiderID))
}

// WhereFault applies the entql string predicate on the fault field.
func (f *CabinetFaultFilter) WhereFault(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldFault))
}

// WhereAttachments applies the entql json.RawMessage predicate on the attachments field.
func (f *CabinetFaultFilter) WhereAttachments(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldAttachments))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *CabinetFaultFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldDescription))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *CabinetFaultFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *CabinetFaultFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *CabinetFaultFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *CabinetFaultFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CityQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CityQuery builder.
func (cq *CityQuery) Filter() *CityFilter {
	return &CityFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CityMutation builder.
func (m *CityMutation) Filter() *CityFilter {
	return &CityFilter{m.config, m}
}

// CityFilter provides a generic filtering capability at runtime for CityQuery.
type CityFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CityFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(city.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CityFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CityFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(city.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CityFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(city.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CityFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(city.FieldRemark))
}

// WhereOpen applies the entql bool predicate on the open field.
func (f *CityFilter) WhereOpen(p entql.BoolP) {
	f.Where(p.Field(city.FieldOpen))
}

// WhereName applies the entql string predicate on the name field.
func (f *CityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(city.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CityFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(city.FieldCode))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *CityFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(city.FieldParentID))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *CityFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(city.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *CityFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(city.FieldLat))
}

// WhereHasPlans applies a predicate to check if query has an edge plans.
func (f *CityFilter) WhereHasPlans() {
	f.Where(entql.HasEdge("plans"))
}

// WhereHasPlansWith applies a predicate to check if query has an edge plans with a given conditions (other predicates).
func (f *CityFilter) WhereHasPlansWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *CityFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *CityFilter) WhereHasParentWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *CityFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *CityFilter) WhereHasChildrenWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommissionQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommissionQuery builder.
func (cq *CommissionQuery) Filter() *CommissionFilter {
	return &CommissionFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommissionMutation builder.
func (m *CommissionMutation) Filter() *CommissionFilter {
	return &CommissionFilter{m.config, m}
}

// CommissionFilter provides a generic filtering capability at runtime for CommissionQuery.
type CommissionFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CommissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CommissionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CommissionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CommissionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CommissionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CommissionFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(commission.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CommissionFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(commission.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CommissionFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(commission.FieldRemark))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *CommissionFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldOrderID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *CommissionFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(commission.FieldAmount))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CommissionFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(commission.FieldStatus))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *CommissionFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldEmployeeID))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *CommissionFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContractQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContractQuery builder.
func (cq *ContractQuery) Filter() *ContractFilter {
	return &ContractFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContractMutation builder.
func (m *ContractMutation) Filter() *ContractFilter {
	return &ContractFilter{m.config, m}
}

// ContractFilter provides a generic filtering capability at runtime for ContractQuery.
type ContractFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(contract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(contract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(contract.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ContractFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(contract.FieldStatus))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ContractFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldRiderID))
}

// WhereFlowID applies the entql string predicate on the flow_id field.
func (f *ContractFilter) WhereFlowID(p entql.StringP) {
	f.Where(p.Field(contract.FieldFlowID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *ContractFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(contract.FieldSn))
}

// WhereFiles applies the entql json.RawMessage predicate on the files field.
func (f *ContractFilter) WhereFiles(p entql.BytesP) {
	f.Where(p.Field(contract.FieldFiles))
}

// WhereEffective applies the entql bool predicate on the effective field.
func (f *ContractFilter) WhereEffective(p entql.BoolP) {
	f.Where(p.Field(contract.FieldEffective))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ContractFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ContractFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EmployeeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmployeeQuery builder.
func (eq *EmployeeQuery) Filter() *EmployeeFilter {
	return &EmployeeFilter{eq.config, eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmployeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmployeeMutation builder.
func (m *EmployeeMutation) Filter() *EmployeeFilter {
	return &EmployeeFilter{m.config, m}
}

// EmployeeFilter provides a generic filtering capability at runtime for EmployeeQuery.
type EmployeeFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EmployeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EmployeeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(employee.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmployeeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmployeeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmployeeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EmployeeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(employee.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EmployeeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(employee.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EmployeeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(employee.FieldRemark))
}

// WhereName applies the entql string predicate on the name field.
func (f *EmployeeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(employee.FieldName))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *EmployeeFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(employee.FieldPhone))
}

// addPredicate implements the predicateAdder interface.
func (eq *EnterpriseQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseQuery builder.
func (eq *EnterpriseQuery) Filter() *EnterpriseFilter {
	return &EnterpriseFilter{eq.config, eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseMutation builder.
func (m *EnterpriseMutation) Filter() *EnterpriseFilter {
	return &EnterpriseFilter{m.config, m}
}

// EnterpriseFilter provides a generic filtering capability at runtime for EnterpriseQuery.
type EnterpriseFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprise.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprise.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprise.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldRemark))
}

// WhereName applies the entql string predicate on the name field.
func (f *EnterpriseFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldName))
}

// WhereHasRiders applies a predicate to check if query has an edge riders.
func (f *EnterpriseFilter) WhereHasRiders() {
	f.Where(entql.HasEdge("riders"))
}

// WhereHasRidersWith applies a predicate to check if query has an edge riders with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasRidersWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("riders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *ExchangeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExchangeQuery builder.
func (eq *ExchangeQuery) Filter() *ExchangeFilter {
	return &ExchangeFilter{eq.config, eq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExchangeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExchangeMutation builder.
func (m *ExchangeMutation) Filter() *ExchangeFilter {
	return &ExchangeFilter{m.config, m}
}

// ExchangeFilter provides a generic filtering capability at runtime for ExchangeQuery.
type ExchangeFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ExchangeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ExchangeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ExchangeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ExchangeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ExchangeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ExchangeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ExchangeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ExchangeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(exchange.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *ExchangeFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldCityID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *ExchangeFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldEmployeeID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *ExchangeFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldStoreID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ExchangeFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldRiderID))
}

// WhereUUID applies the entql string predicate on the uuid field.
func (f *ExchangeFilter) WhereUUID(p entql.StringP) {
	f.Where(p.Field(exchange.FieldUUID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *ExchangeFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldCabinetID))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *ExchangeFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(exchange.FieldSuccess))
}

// WhereDetail applies the entql json.RawMessage predicate on the detail field.
func (f *ExchangeFilter) WhereDetail(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldDetail))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *ExchangeFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *ExchangeFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *ExchangeFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *ExchangeFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ExchangeFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *ManagerQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ManagerQuery builder.
func (mq *ManagerQuery) Filter() *ManagerFilter {
	return &ManagerFilter{mq.config, mq}
}

// addPredicate implements the predicateAdder interface.
func (m *ManagerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ManagerMutation builder.
func (m *ManagerMutation) Filter() *ManagerFilter {
	return &ManagerFilter{m.config, m}
}

// ManagerFilter provides a generic filtering capability at runtime for ManagerQuery.
type ManagerFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ManagerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ManagerFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(manager.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ManagerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ManagerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ManagerFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ManagerFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(manager.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ManagerFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(manager.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ManagerFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(manager.FieldRemark))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *ManagerFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(manager.FieldPhone))
}

// WhereName applies the entql string predicate on the name field.
func (f *ManagerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(manager.FieldName))
}

// WherePassword applies the entql string predicate on the password field.
func (f *ManagerFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(manager.FieldPassword))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *ManagerFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldLastSigninAt))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{oq.config, oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{m.config, m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OrderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *OrderFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(order.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *OrderFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(order.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *OrderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(order.FieldRemark))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *OrderFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldPlanID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *OrderFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldCityID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *OrderFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldRiderID))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *OrderFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldParentID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *OrderFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldSubscribeID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *OrderFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(order.FieldStatus))
}

// WherePayway applies the entql uint8 predicate on the payway field.
func (f *OrderFilter) WherePayway(p entql.Uint8P) {
	f.Where(p.Field(order.FieldPayway))
}

// WhereType applies the entql uint predicate on the type field.
func (f *OrderFilter) WhereType(p entql.UintP) {
	f.Where(p.Field(order.FieldType))
}

// WhereOutTradeNo applies the entql string predicate on the out_trade_no field.
func (f *OrderFilter) WhereOutTradeNo(p entql.StringP) {
	f.Where(p.Field(order.FieldOutTradeNo))
}

// WhereTradeNo applies the entql string predicate on the trade_no field.
func (f *OrderFilter) WhereTradeNo(p entql.StringP) {
	f.Where(p.Field(order.FieldTradeNo))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *OrderFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(order.FieldAmount))
}

// WhereTotal applies the entql float64 predicate on the total field.
func (f *OrderFilter) WhereTotal(p entql.Float64P) {
	f.Where(p.Field(order.FieldTotal))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *OrderFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldRefundAt))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *OrderFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *OrderFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *OrderFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *OrderFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *OrderFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *OrderFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *OrderFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *OrderFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommission applies a predicate to check if query has an edge commission.
func (f *OrderFilter) WhereHasCommission() {
	f.Where(entql.HasEdge("commission"))
}

// WhereHasCommissionWith applies a predicate to check if query has an edge commission with a given conditions (other predicates).
func (f *OrderFilter) WhereHasCommissionWith(preds ...predicate.Commission) {
	f.Where(entql.HasEdgeWith("commission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *OrderFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *OrderFilter) WhereHasParentWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *OrderFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *OrderFilter) WhereHasChildrenWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRefunds applies a predicate to check if query has an edge refunds.
func (f *OrderFilter) WhereHasRefunds() {
	f.Where(entql.HasEdge("refunds"))
}

// WhereHasRefundsWith applies a predicate to check if query has an edge refunds with a given conditions (other predicates).
func (f *OrderFilter) WhereHasRefundsWith(preds ...predicate.OrderRefund) {
	f.Where(entql.HasEdgeWith("refunds", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (orq *OrderRefundQuery) addPredicate(pred func(s *sql.Selector)) {
	orq.predicates = append(orq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderRefundQuery builder.
func (orq *OrderRefundQuery) Filter() *OrderRefundFilter {
	return &OrderRefundFilter{orq.config, orq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderRefundMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderRefundMutation builder.
func (m *OrderRefundMutation) Filter() *OrderRefundFilter {
	return &OrderRefundFilter{m.config, m}
}

// OrderRefundFilter provides a generic filtering capability at runtime for OrderRefundQuery.
type OrderRefundFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrderRefundFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OrderRefundFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(orderrefund.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderRefundFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderRefundFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderRefundFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *OrderRefundFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(orderrefund.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *OrderRefundFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(orderrefund.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *OrderRefundFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldRemark))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *OrderRefundFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(orderrefund.FieldOrderID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *OrderRefundFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(orderrefund.FieldStatus))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *OrderRefundFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(orderrefund.FieldAmount))
}

// WhereOutRefundNo applies the entql string predicate on the out_refund_no field.
func (f *OrderRefundFilter) WhereOutRefundNo(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldOutRefundNo))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *OrderRefundFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldReason))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *OrderRefundFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldRefundAt))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *OrderRefundFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *OrderRefundFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PersonQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonQuery builder.
func (pq *PersonQuery) Filter() *PersonFilter {
	return &PersonFilter{pq.config, pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonMutation builder.
func (m *PersonMutation) Filter() *PersonFilter {
	return &PersonFilter{m.config, m}
}

// PersonFilter provides a generic filtering capability at runtime for PersonQuery.
type PersonFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PersonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PersonFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(person.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PersonFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PersonFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(person.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PersonFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(person.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PersonFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(person.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *PersonFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(person.FieldStatus))
}

// WhereBanned applies the entql bool predicate on the banned field.
func (f *PersonFilter) WhereBanned(p entql.BoolP) {
	f.Where(p.Field(person.FieldBanned))
}

// WhereName applies the entql string predicate on the name field.
func (f *PersonFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(person.FieldName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *PersonFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNumber))
}

// WhereIDCardType applies the entql uint8 predicate on the id_card_type field.
func (f *PersonFilter) WhereIDCardType(p entql.Uint8P) {
	f.Where(p.Field(person.FieldIDCardType))
}

// WhereIDCardPortrait applies the entql string predicate on the id_card_portrait field.
func (f *PersonFilter) WhereIDCardPortrait(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardPortrait))
}

// WhereIDCardNational applies the entql string predicate on the id_card_national field.
func (f *PersonFilter) WhereIDCardNational(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNational))
}

// WhereAuthFace applies the entql string predicate on the auth_face field.
func (f *PersonFilter) WhereAuthFace(p entql.StringP) {
	f.Where(p.Field(person.FieldAuthFace))
}

// WhereAuthResult applies the entql json.RawMessage predicate on the auth_result field.
func (f *PersonFilter) WhereAuthResult(p entql.BytesP) {
	f.Where(p.Field(person.FieldAuthResult))
}

// WhereAuthAt applies the entql time.Time predicate on the auth_at field.
func (f *PersonFilter) WhereAuthAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldAuthAt))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PersonFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PersonFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlanQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlanQuery builder.
func (pq *PlanQuery) Filter() *PlanFilter {
	return &PlanFilter{pq.config, pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlanMutation builder.
func (m *PlanMutation) Filter() *PlanFilter {
	return &PlanFilter{m.config, m}
}

// PlanFilter provides a generic filtering capability at runtime for PlanQuery.
type PlanFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PlanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PlanFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(plan.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlanFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PlanFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PlanFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(plan.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PlanFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(plan.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PlanFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(plan.FieldRemark))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *PlanFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(plan.FieldEnable))
}

// WhereName applies the entql string predicate on the name field.
func (f *PlanFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(plan.FieldName))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *PlanFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(plan.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *PlanFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(plan.FieldEnd))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *PlanFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(plan.FieldPrice))
}

// WhereDays applies the entql uint predicate on the days field.
func (f *PlanFilter) WhereDays(p entql.UintP) {
	f.Where(p.Field(plan.FieldDays))
}

// WhereCommission applies the entql float64 predicate on the commission field.
func (f *PlanFilter) WhereCommission(p entql.Float64P) {
	f.Where(p.Field(plan.FieldCommission))
}

// WhereOriginal applies the entql float64 predicate on the original field.
func (f *PlanFilter) WhereOriginal(p entql.Float64P) {
	f.Where(p.Field(plan.FieldOriginal))
}

// WhereDesc applies the entql string predicate on the desc field.
func (f *PlanFilter) WhereDesc(p entql.StringP) {
	f.Where(p.Field(plan.FieldDesc))
}

// WhereHasPms applies a predicate to check if query has an edge pms.
func (f *PlanFilter) WhereHasPms() {
	f.Where(entql.HasEdge("pms"))
}

// WhereHasPmsWith applies a predicate to check if query has an edge pms with a given conditions (other predicates).
func (f *PlanFilter) WhereHasPmsWith(preds ...predicate.BatteryModel) {
	f.Where(entql.HasEdgeWith("pms", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCities applies a predicate to check if query has an edge cities.
func (f *PlanFilter) WhereHasCities() {
	f.Where(entql.HasEdge("cities"))
}

// WhereHasCitiesWith applies a predicate to check if query has an edge cities with a given conditions (other predicates).
func (f *PlanFilter) WhereHasCitiesWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("cities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RiderQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiderQuery builder.
func (rq *RiderQuery) Filter() *RiderFilter {
	return &RiderFilter{rq.config, rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiderMutation builder.
func (m *RiderMutation) Filter() *RiderFilter {
	return &RiderFilter{m.config, m}
}

// RiderFilter provides a generic filtering capability at runtime for RiderQuery.
type RiderFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *RiderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RiderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *RiderFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(rider.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *RiderFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(rider.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RiderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(rider.FieldRemark))
}

// WherePersonID applies the entql uint64 predicate on the person_id field.
func (f *RiderFilter) WherePersonID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldPersonID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *RiderFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldEnterpriseID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *RiderFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(rider.FieldPhone))
}

// WhereContact applies the entql json.RawMessage predicate on the contact field.
func (f *RiderFilter) WhereContact(p entql.BytesP) {
	f.Where(p.Field(rider.FieldContact))
}

// WhereDeviceType applies the entql uint8 predicate on the device_type field.
func (f *RiderFilter) WhereDeviceType(p entql.Uint8P) {
	f.Where(p.Field(rider.FieldDeviceType))
}

// WhereLastDevice applies the entql string predicate on the last_device field.
func (f *RiderFilter) WhereLastDevice(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastDevice))
}

// WhereIsNewDevice applies the entql bool predicate on the is_new_device field.
func (f *RiderFilter) WhereIsNewDevice(p entql.BoolP) {
	f.Where(p.Field(rider.FieldIsNewDevice))
}

// WhereLastFace applies the entql string predicate on the last_face field.
func (f *RiderFilter) WhereLastFace(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastFace))
}

// WherePushID applies the entql string predicate on the push_id field.
func (f *RiderFilter) WherePushID(p entql.StringP) {
	f.Where(p.Field(rider.FieldPushID))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *RiderFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldLastSigninAt))
}

// WhereEsignAccountID applies the entql string predicate on the esign_account_id field.
func (f *RiderFilter) WhereEsignAccountID(p entql.StringP) {
	f.Where(p.Field(rider.FieldEsignAccountID))
}

// WherePlanAt applies the entql time.Time predicate on the plan_at field.
func (f *RiderFilter) WherePlanAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldPlanAt))
}

// WhereBlocked applies the entql bool predicate on the blocked field.
func (f *RiderFilter) WhereBlocked(p entql.BoolP) {
	f.Where(p.Field(rider.FieldBlocked))
}

// WhereHasPerson applies a predicate to check if query has an edge person.
func (f *RiderFilter) WhereHasPerson() {
	f.Where(entql.HasEdge("person"))
}

// WhereHasPersonWith applies a predicate to check if query has an edge person with a given conditions (other predicates).
func (f *RiderFilter) WhereHasPersonWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("person", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *RiderFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *RiderFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContract applies a predicate to check if query has an edge contract.
func (f *RiderFilter) WhereHasContract() {
	f.Where(entql.HasEdge("contract"))
}

// WhereHasContractWith applies a predicate to check if query has an edge contract with a given conditions (other predicates).
func (f *RiderFilter) WhereHasContractWith(preds ...predicate.Contract) {
	f.Where(entql.HasEdgeWith("contract", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *RiderFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *RiderFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *RiderFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *RiderFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExchanges applies a predicate to check if query has an edge exchanges.
func (f *RiderFilter) WhereHasExchanges() {
	f.Where(entql.HasEdge("exchanges"))
}

// WhereHasExchangesWith applies a predicate to check if query has an edge exchanges with a given conditions (other predicates).
func (f *RiderFilter) WhereHasExchangesWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchanges", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribes applies a predicate to check if query has an edge subscribes.
func (f *RiderFilter) WhereHasSubscribes() {
	f.Where(entql.HasEdge("subscribes"))
}

// WhereHasSubscribesWith applies a predicate to check if query has an edge subscribes with a given conditions (other predicates).
func (f *RiderFilter) WhereHasSubscribesWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SettingQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SettingQuery builder.
func (sq *SettingQuery) Filter() *SettingFilter {
	return &SettingFilter{sq.config, sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SettingMutation builder.
func (m *SettingMutation) Filter() *SettingFilter {
	return &SettingFilter{m.config, m}
}

// SettingFilter provides a generic filtering capability at runtime for SettingQuery.
type SettingFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SettingFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(setting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SettingFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(setting.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SettingFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(setting.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SettingFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(setting.FieldRemark))
}

// WhereKey applies the entql string predicate on the key field.
func (f *SettingFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(setting.FieldKey))
}

// WhereDesc applies the entql string predicate on the desc field.
func (f *SettingFilter) WhereDesc(p entql.StringP) {
	f.Where(p.Field(setting.FieldDesc))
}

// WhereContent applies the entql string predicate on the content field.
func (f *SettingFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(setting.FieldContent))
}

// addPredicate implements the predicateAdder interface.
func (sq *StoreQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StoreQuery builder.
func (sq *StoreQuery) Filter() *StoreFilter {
	return &StoreFilter{sq.config, sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StoreMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StoreMutation builder.
func (m *StoreMutation) Filter() *StoreFilter {
	return &StoreFilter{m.config, m}
}

// StoreFilter provides a generic filtering capability at runtime for StoreQuery.
type StoreFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *StoreFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *StoreFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StoreFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StoreFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *StoreFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *StoreFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(store.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *StoreFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(store.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *StoreFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(store.FieldRemark))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *StoreFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldEmployeeID))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *StoreFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldBranchID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *StoreFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(store.FieldSn))
}

// WhereName applies the entql string predicate on the name field.
func (f *StoreFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(store.FieldName))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *StoreFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(store.FieldStatus))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *StoreFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *StoreFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *StoreFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *StoreFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SubscribeQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribeQuery builder.
func (sq *SubscribeQuery) Filter() *SubscribeFilter {
	return &SubscribeFilter{sq.config, sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribeMutation builder.
func (m *SubscribeMutation) Filter() *SubscribeFilter {
	return &SubscribeFilter{m.config, m}
}

// SubscribeFilter provides a generic filtering capability at runtime for SubscribeQuery.
type SubscribeFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SubscribeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscribeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribe.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribe.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribe.FieldRemark))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *SubscribeFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldPlanID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *SubscribeFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldEmployeeID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *SubscribeFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldCityID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribeFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldRiderID))
}

// WhereInitialOrderID applies the entql uint64 predicate on the initial_order_id field.
func (f *SubscribeFilter) WhereInitialOrderID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldInitialOrderID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *SubscribeFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(subscribe.FieldStatus))
}

// WhereType applies the entql uint predicate on the type field.
func (f *SubscribeFilter) WhereType(p entql.UintP) {
	f.Where(p.Field(subscribe.FieldType))
}

// WhereVoltage applies the entql float64 predicate on the voltage field.
func (f *SubscribeFilter) WhereVoltage(p entql.Float64P) {
	f.Where(p.Field(subscribe.FieldVoltage))
}

// WhereInitialDays applies the entql int predicate on the initial_days field.
func (f *SubscribeFilter) WhereInitialDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldInitialDays))
}

// WhereAlterDays applies the entql int predicate on the alter_days field.
func (f *SubscribeFilter) WhereAlterDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldAlterDays))
}

// WherePauseDays applies the entql int predicate on the pause_days field.
func (f *SubscribeFilter) WherePauseDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldPauseDays))
}

// WhereRenewalDays applies the entql int predicate on the renewal_days field.
func (f *SubscribeFilter) WhereRenewalDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldRenewalDays))
}

// WhereOverdueDays applies the entql int predicate on the overdue_days field.
func (f *SubscribeFilter) WhereOverdueDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldOverdueDays))
}

// WhereRemaining applies the entql int predicate on the remaining field.
func (f *SubscribeFilter) WhereRemaining(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldRemaining))
}

// WherePausedAt applies the entql time.Time predicate on the paused_at field.
func (f *SubscribeFilter) WherePausedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldPausedAt))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *SubscribeFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *SubscribeFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldEndAt))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *SubscribeFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldRefundAt))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *SubscribeFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *SubscribeFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *SubscribeFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribeFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPauses applies a predicate to check if query has an edge pauses.
func (f *SubscribeFilter) WhereHasPauses() {
	f.Where(entql.HasEdge("pauses"))
}

// WhereHasPausesWith applies a predicate to check if query has an edge pauses with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasPausesWith(preds ...predicate.SubscribePause) {
	f.Where(entql.HasEdgeWith("pauses", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAlters applies a predicate to check if query has an edge alters.
func (f *SubscribeFilter) WhereHasAlters() {
	f.Where(entql.HasEdge("alters"))
}

// WhereHasAltersWith applies a predicate to check if query has an edge alters with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasAltersWith(preds ...predicate.SubscribeAlter) {
	f.Where(entql.HasEdgeWith("alters", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *SubscribeFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInitialOrder applies a predicate to check if query has an edge initial_order.
func (f *SubscribeFilter) WhereHasInitialOrder() {
	f.Where(entql.HasEdge("initial_order"))
}

// WhereHasInitialOrderWith applies a predicate to check if query has an edge initial_order with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasInitialOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("initial_order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (saq *SubscribeAlterQuery) addPredicate(pred func(s *sql.Selector)) {
	saq.predicates = append(saq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribeAlterQuery builder.
func (saq *SubscribeAlterQuery) Filter() *SubscribeAlterFilter {
	return &SubscribeAlterFilter{saq.config, saq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribeAlterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribeAlterMutation builder.
func (m *SubscribeAlterMutation) Filter() *SubscribeAlterFilter {
	return &SubscribeAlterFilter{m.config, m}
}

// SubscribeAlterFilter provides a generic filtering capability at runtime for SubscribeAlterQuery.
type SubscribeAlterFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SubscribeAlterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribeAlterFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribeAlterFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribeAlterFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscribeAlterFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribeAlterFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribealter.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribeAlterFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribealter.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribeAlterFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribealter.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribeAlterFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldRiderID))
}

// WhereManagerID applies the entql uint64 predicate on the manager_id field.
func (f *SubscribeAlterFilter) WhereManagerID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldManagerID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *SubscribeAlterFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldSubscribeID))
}

// WhereDays applies the entql int predicate on the days field.
func (f *SubscribeAlterFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(subscribealter.FieldDays))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribeAlterFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *SubscribeAlterFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasManagerWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *SubscribeAlterFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (spq *SubscribePauseQuery) addPredicate(pred func(s *sql.Selector)) {
	spq.predicates = append(spq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribePauseQuery builder.
func (spq *SubscribePauseQuery) Filter() *SubscribePauseFilter {
	return &SubscribePauseFilter{spq.config, spq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribePauseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribePauseMutation builder.
func (m *SubscribePauseMutation) Filter() *SubscribePauseFilter {
	return &SubscribePauseFilter{m.config, m}
}

// SubscribePauseFilter provides a generic filtering capability at runtime for SubscribePauseQuery.
type SubscribePauseFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SubscribePauseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribePauseFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribePauseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribePauseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscribePauseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribePauseFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribepause.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribePauseFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribepause.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribePauseFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribepause.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribePauseFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldRiderID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *SubscribePauseFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldEmployeeID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *SubscribePauseFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldSubscribeID))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *SubscribePauseFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *SubscribePauseFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldEndAt))
}

// WhereDays applies the entql int predicate on the days field.
func (f *SubscribePauseFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(subscribepause.FieldDays))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribePauseFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *SubscribePauseFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *SubscribePauseFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
