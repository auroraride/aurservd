// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprepayment"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/export"
	"github.com/auroraride/aurservd/internal/ent/feedback"
	"github.com/auroraride/aurservd/internal/ent/inventory"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/planintroduce"
	"github.com/auroraride/aurservd/internal/ent/pointlog"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionachievement"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotionearnings"
	"github.com/auroraride/aurservd/internal/ent/promotiongrowth"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionperson"
	"github.com/auroraride/aurservd/internal/ent/promotionprivilege"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
	"github.com/auroraride/aurservd/internal/ent/promotionsetting"
	"github.com/auroraride/aurservd/internal/ent/promotionwithdrawal"
	"github.com/auroraride/aurservd/internal/ent/reserve"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
	"github.com/auroraride/aurservd/internal/ent/role"
	"github.com/auroraride/aurservd/internal/ent/setting"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/stocksummary"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribereminder"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 67)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   agent.Table,
			Columns: agent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: agent.FieldID,
			},
		},
		Type: "Agent",
		Fields: map[string]*sqlgraph.FieldSpec{
			agent.FieldCreatedAt:    {Type: field.TypeTime, Column: agent.FieldCreatedAt},
			agent.FieldUpdatedAt:    {Type: field.TypeTime, Column: agent.FieldUpdatedAt},
			agent.FieldDeletedAt:    {Type: field.TypeTime, Column: agent.FieldDeletedAt},
			agent.FieldCreator:      {Type: field.TypeJSON, Column: agent.FieldCreator},
			agent.FieldLastModifier: {Type: field.TypeJSON, Column: agent.FieldLastModifier},
			agent.FieldRemark:       {Type: field.TypeString, Column: agent.FieldRemark},
			agent.FieldEnterpriseID: {Type: field.TypeUint64, Column: agent.FieldEnterpriseID},
			agent.FieldName:         {Type: field.TypeString, Column: agent.FieldName},
			agent.FieldPhone:        {Type: field.TypeString, Column: agent.FieldPhone},
			agent.FieldSuper:        {Type: field.TypeBool, Column: agent.FieldSuper},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   allocate.Table,
			Columns: allocate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: allocate.FieldID,
			},
		},
		Type: "Allocate",
		Fields: map[string]*sqlgraph.FieldSpec{
			allocate.FieldCreatedAt:    {Type: field.TypeTime, Column: allocate.FieldCreatedAt},
			allocate.FieldUpdatedAt:    {Type: field.TypeTime, Column: allocate.FieldUpdatedAt},
			allocate.FieldRiderID:      {Type: field.TypeUint64, Column: allocate.FieldRiderID},
			allocate.FieldSubscribeID:  {Type: field.TypeUint64, Column: allocate.FieldSubscribeID},
			allocate.FieldCreator:      {Type: field.TypeJSON, Column: allocate.FieldCreator},
			allocate.FieldLastModifier: {Type: field.TypeJSON, Column: allocate.FieldLastModifier},
			allocate.FieldRemark:       {Type: field.TypeString, Column: allocate.FieldRemark},
			allocate.FieldEmployeeID:   {Type: field.TypeUint64, Column: allocate.FieldEmployeeID},
			allocate.FieldCabinetID:    {Type: field.TypeUint64, Column: allocate.FieldCabinetID},
			allocate.FieldStoreID:      {Type: field.TypeUint64, Column: allocate.FieldStoreID},
			allocate.FieldBrandID:      {Type: field.TypeUint64, Column: allocate.FieldBrandID},
			allocate.FieldBatteryID:    {Type: field.TypeUint64, Column: allocate.FieldBatteryID},
			allocate.FieldStationID:    {Type: field.TypeUint64, Column: allocate.FieldStationID},
			allocate.FieldAgentID:      {Type: field.TypeUint64, Column: allocate.FieldAgentID},
			allocate.FieldType:         {Type: field.TypeEnum, Column: allocate.FieldType},
			allocate.FieldStatus:       {Type: field.TypeUint8, Column: allocate.FieldStatus},
			allocate.FieldTime:         {Type: field.TypeTime, Column: allocate.FieldTime},
			allocate.FieldModel:        {Type: field.TypeString, Column: allocate.FieldModel},
			allocate.FieldEbikeID:      {Type: field.TypeUint64, Column: allocate.FieldEbikeID},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   assistance.Table,
			Columns: assistance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: assistance.FieldID,
			},
		},
		Type: "Assistance",
		Fields: map[string]*sqlgraph.FieldSpec{
			assistance.FieldCreatedAt:        {Type: field.TypeTime, Column: assistance.FieldCreatedAt},
			assistance.FieldUpdatedAt:        {Type: field.TypeTime, Column: assistance.FieldUpdatedAt},
			assistance.FieldDeletedAt:        {Type: field.TypeTime, Column: assistance.FieldDeletedAt},
			assistance.FieldCreator:          {Type: field.TypeJSON, Column: assistance.FieldCreator},
			assistance.FieldLastModifier:     {Type: field.TypeJSON, Column: assistance.FieldLastModifier},
			assistance.FieldRemark:           {Type: field.TypeString, Column: assistance.FieldRemark},
			assistance.FieldStoreID:          {Type: field.TypeUint64, Column: assistance.FieldStoreID},
			assistance.FieldRiderID:          {Type: field.TypeUint64, Column: assistance.FieldRiderID},
			assistance.FieldSubscribeID:      {Type: field.TypeUint64, Column: assistance.FieldSubscribeID},
			assistance.FieldCityID:           {Type: field.TypeUint64, Column: assistance.FieldCityID},
			assistance.FieldEmployeeID:       {Type: field.TypeUint64, Column: assistance.FieldEmployeeID},
			assistance.FieldOrderID:          {Type: field.TypeUint64, Column: assistance.FieldOrderID},
			assistance.FieldStatus:           {Type: field.TypeUint8, Column: assistance.FieldStatus},
			assistance.FieldLng:              {Type: field.TypeFloat64, Column: assistance.FieldLng},
			assistance.FieldLat:              {Type: field.TypeFloat64, Column: assistance.FieldLat},
			assistance.FieldAddress:          {Type: field.TypeString, Column: assistance.FieldAddress},
			assistance.FieldBreakdown:        {Type: field.TypeString, Column: assistance.FieldBreakdown},
			assistance.FieldBreakdownDesc:    {Type: field.TypeString, Column: assistance.FieldBreakdownDesc},
			assistance.FieldBreakdownPhotos:  {Type: field.TypeJSON, Column: assistance.FieldBreakdownPhotos},
			assistance.FieldCancelReason:     {Type: field.TypeString, Column: assistance.FieldCancelReason},
			assistance.FieldCancelReasonDesc: {Type: field.TypeString, Column: assistance.FieldCancelReasonDesc},
			assistance.FieldDistance:         {Type: field.TypeFloat64, Column: assistance.FieldDistance},
			assistance.FieldReason:           {Type: field.TypeString, Column: assistance.FieldReason},
			assistance.FieldDetectPhoto:      {Type: field.TypeString, Column: assistance.FieldDetectPhoto},
			assistance.FieldJointPhoto:       {Type: field.TypeString, Column: assistance.FieldJointPhoto},
			assistance.FieldCost:             {Type: field.TypeFloat64, Column: assistance.FieldCost},
			assistance.FieldRefusedDesc:      {Type: field.TypeString, Column: assistance.FieldRefusedDesc},
			assistance.FieldPayAt:            {Type: field.TypeTime, Column: assistance.FieldPayAt},
			assistance.FieldAllocateAt:       {Type: field.TypeTime, Column: assistance.FieldAllocateAt},
			assistance.FieldWait:             {Type: field.TypeInt, Column: assistance.FieldWait},
			assistance.FieldFreeReason:       {Type: field.TypeString, Column: assistance.FieldFreeReason},
			assistance.FieldFailReason:       {Type: field.TypeString, Column: assistance.FieldFailReason},
			assistance.FieldProcessAt:        {Type: field.TypeTime, Column: assistance.FieldProcessAt},
			assistance.FieldPrice:            {Type: field.TypeFloat64, Column: assistance.FieldPrice},
			assistance.FieldNaviDuration:     {Type: field.TypeInt, Column: assistance.FieldNaviDuration},
			assistance.FieldNaviPolylines:    {Type: field.TypeJSON, Column: assistance.FieldNaviPolylines},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   attendance.Table,
			Columns: attendance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: attendance.FieldID,
			},
		},
		Type: "Attendance",
		Fields: map[string]*sqlgraph.FieldSpec{
			attendance.FieldCreatedAt:    {Type: field.TypeTime, Column: attendance.FieldCreatedAt},
			attendance.FieldUpdatedAt:    {Type: field.TypeTime, Column: attendance.FieldUpdatedAt},
			attendance.FieldDeletedAt:    {Type: field.TypeTime, Column: attendance.FieldDeletedAt},
			attendance.FieldCreator:      {Type: field.TypeJSON, Column: attendance.FieldCreator},
			attendance.FieldLastModifier: {Type: field.TypeJSON, Column: attendance.FieldLastModifier},
			attendance.FieldRemark:       {Type: field.TypeString, Column: attendance.FieldRemark},
			attendance.FieldStoreID:      {Type: field.TypeUint64, Column: attendance.FieldStoreID},
			attendance.FieldEmployeeID:   {Type: field.TypeUint64, Column: attendance.FieldEmployeeID},
			attendance.FieldInventory:    {Type: field.TypeJSON, Column: attendance.FieldInventory},
			attendance.FieldPhoto:        {Type: field.TypeString, Column: attendance.FieldPhoto},
			attendance.FieldDuty:         {Type: field.TypeBool, Column: attendance.FieldDuty},
			attendance.FieldDate:         {Type: field.TypeTime, Column: attendance.FieldDate},
			attendance.FieldLng:          {Type: field.TypeFloat64, Column: attendance.FieldLng},
			attendance.FieldLat:          {Type: field.TypeFloat64, Column: attendance.FieldLat},
			attendance.FieldAddress:      {Type: field.TypeString, Column: attendance.FieldAddress},
			attendance.FieldDistance:     {Type: field.TypeFloat64, Column: attendance.FieldDistance},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   battery.Table,
			Columns: battery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: battery.FieldID,
			},
		},
		Type: "Battery",
		Fields: map[string]*sqlgraph.FieldSpec{
			battery.FieldCreatedAt:    {Type: field.TypeTime, Column: battery.FieldCreatedAt},
			battery.FieldUpdatedAt:    {Type: field.TypeTime, Column: battery.FieldUpdatedAt},
			battery.FieldDeletedAt:    {Type: field.TypeTime, Column: battery.FieldDeletedAt},
			battery.FieldCreator:      {Type: field.TypeJSON, Column: battery.FieldCreator},
			battery.FieldLastModifier: {Type: field.TypeJSON, Column: battery.FieldLastModifier},
			battery.FieldRemark:       {Type: field.TypeString, Column: battery.FieldRemark},
			battery.FieldCityID:       {Type: field.TypeUint64, Column: battery.FieldCityID},
			battery.FieldRiderID:      {Type: field.TypeUint64, Column: battery.FieldRiderID},
			battery.FieldCabinetID:    {Type: field.TypeUint64, Column: battery.FieldCabinetID},
			battery.FieldSubscribeID:  {Type: field.TypeUint64, Column: battery.FieldSubscribeID},
			battery.FieldEnterpriseID: {Type: field.TypeUint64, Column: battery.FieldEnterpriseID},
			battery.FieldStationID:    {Type: field.TypeUint64, Column: battery.FieldStationID},
			battery.FieldSn:           {Type: field.TypeString, Column: battery.FieldSn},
			battery.FieldBrand:        {Type: field.TypeOther, Column: battery.FieldBrand},
			battery.FieldEnable:       {Type: field.TypeBool, Column: battery.FieldEnable},
			battery.FieldModel:        {Type: field.TypeString, Column: battery.FieldModel},
			battery.FieldOrdinal:      {Type: field.TypeInt, Column: battery.FieldOrdinal},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   batteryflow.Table,
			Columns: batteryflow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batteryflow.FieldID,
			},
		},
		Type: "BatteryFlow",
		Fields: map[string]*sqlgraph.FieldSpec{
			batteryflow.FieldCreatedAt:   {Type: field.TypeTime, Column: batteryflow.FieldCreatedAt},
			batteryflow.FieldUpdatedAt:   {Type: field.TypeTime, Column: batteryflow.FieldUpdatedAt},
			batteryflow.FieldSubscribeID: {Type: field.TypeUint64, Column: batteryflow.FieldSubscribeID},
			batteryflow.FieldBatteryID:   {Type: field.TypeUint64, Column: batteryflow.FieldBatteryID},
			batteryflow.FieldSn:          {Type: field.TypeString, Column: batteryflow.FieldSn},
			batteryflow.FieldSoc:         {Type: field.TypeFloat64, Column: batteryflow.FieldSoc},
			batteryflow.FieldRiderID:     {Type: field.TypeUint64, Column: batteryflow.FieldRiderID},
			batteryflow.FieldCabinetID:   {Type: field.TypeUint64, Column: batteryflow.FieldCabinetID},
			batteryflow.FieldSerial:      {Type: field.TypeString, Column: batteryflow.FieldSerial},
			batteryflow.FieldOrdinal:     {Type: field.TypeInt, Column: batteryflow.FieldOrdinal},
			batteryflow.FieldGeom:        {Type: field.TypeOther, Column: batteryflow.FieldGeom},
			batteryflow.FieldRemark:      {Type: field.TypeString, Column: batteryflow.FieldRemark},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   batterymodel.Table,
			Columns: batterymodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batterymodel.FieldID,
			},
		},
		Type: "BatteryModel",
		Fields: map[string]*sqlgraph.FieldSpec{
			batterymodel.FieldModel:     {Type: field.TypeString, Column: batterymodel.FieldModel},
			batterymodel.FieldCreatedAt: {Type: field.TypeTime, Column: batterymodel.FieldCreatedAt},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   branch.Table,
			Columns: branch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branch.FieldID,
			},
		},
		Type: "Branch",
		Fields: map[string]*sqlgraph.FieldSpec{
			branch.FieldCreatedAt:    {Type: field.TypeTime, Column: branch.FieldCreatedAt},
			branch.FieldUpdatedAt:    {Type: field.TypeTime, Column: branch.FieldUpdatedAt},
			branch.FieldDeletedAt:    {Type: field.TypeTime, Column: branch.FieldDeletedAt},
			branch.FieldCreator:      {Type: field.TypeJSON, Column: branch.FieldCreator},
			branch.FieldLastModifier: {Type: field.TypeJSON, Column: branch.FieldLastModifier},
			branch.FieldRemark:       {Type: field.TypeString, Column: branch.FieldRemark},
			branch.FieldCityID:       {Type: field.TypeUint64, Column: branch.FieldCityID},
			branch.FieldName:         {Type: field.TypeString, Column: branch.FieldName},
			branch.FieldLng:          {Type: field.TypeFloat64, Column: branch.FieldLng},
			branch.FieldLat:          {Type: field.TypeFloat64, Column: branch.FieldLat},
			branch.FieldAddress:      {Type: field.TypeString, Column: branch.FieldAddress},
			branch.FieldPhotos:       {Type: field.TypeJSON, Column: branch.FieldPhotos},
			branch.FieldGeom:         {Type: field.TypeOther, Column: branch.FieldGeom},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   branchcontract.Table,
			Columns: branchcontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branchcontract.FieldID,
			},
		},
		Type: "BranchContract",
		Fields: map[string]*sqlgraph.FieldSpec{
			branchcontract.FieldCreatedAt:         {Type: field.TypeTime, Column: branchcontract.FieldCreatedAt},
			branchcontract.FieldUpdatedAt:         {Type: field.TypeTime, Column: branchcontract.FieldUpdatedAt},
			branchcontract.FieldDeletedAt:         {Type: field.TypeTime, Column: branchcontract.FieldDeletedAt},
			branchcontract.FieldCreator:           {Type: field.TypeJSON, Column: branchcontract.FieldCreator},
			branchcontract.FieldLastModifier:      {Type: field.TypeJSON, Column: branchcontract.FieldLastModifier},
			branchcontract.FieldRemark:            {Type: field.TypeString, Column: branchcontract.FieldRemark},
			branchcontract.FieldBranchID:          {Type: field.TypeUint64, Column: branchcontract.FieldBranchID},
			branchcontract.FieldLandlordName:      {Type: field.TypeString, Column: branchcontract.FieldLandlordName},
			branchcontract.FieldIDCardNumber:      {Type: field.TypeString, Column: branchcontract.FieldIDCardNumber},
			branchcontract.FieldPhone:             {Type: field.TypeString, Column: branchcontract.FieldPhone},
			branchcontract.FieldBankNumber:        {Type: field.TypeString, Column: branchcontract.FieldBankNumber},
			branchcontract.FieldPledge:            {Type: field.TypeFloat64, Column: branchcontract.FieldPledge},
			branchcontract.FieldRent:              {Type: field.TypeFloat64, Column: branchcontract.FieldRent},
			branchcontract.FieldLease:             {Type: field.TypeUint, Column: branchcontract.FieldLease},
			branchcontract.FieldElectricityPledge: {Type: field.TypeFloat64, Column: branchcontract.FieldElectricityPledge},
			branchcontract.FieldElectricity:       {Type: field.TypeString, Column: branchcontract.FieldElectricity},
			branchcontract.FieldArea:              {Type: field.TypeFloat64, Column: branchcontract.FieldArea},
			branchcontract.FieldStartTime:         {Type: field.TypeTime, Column: branchcontract.FieldStartTime},
			branchcontract.FieldEndTime:           {Type: field.TypeTime, Column: branchcontract.FieldEndTime},
			branchcontract.FieldFile:              {Type: field.TypeString, Column: branchcontract.FieldFile},
			branchcontract.FieldSheets:            {Type: field.TypeJSON, Column: branchcontract.FieldSheets},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   business.Table,
			Columns: business.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: business.FieldID,
			},
		},
		Type: "Business",
		Fields: map[string]*sqlgraph.FieldSpec{
			business.FieldCreatedAt:    {Type: field.TypeTime, Column: business.FieldCreatedAt},
			business.FieldUpdatedAt:    {Type: field.TypeTime, Column: business.FieldUpdatedAt},
			business.FieldDeletedAt:    {Type: field.TypeTime, Column: business.FieldDeletedAt},
			business.FieldCreator:      {Type: field.TypeJSON, Column: business.FieldCreator},
			business.FieldLastModifier: {Type: field.TypeJSON, Column: business.FieldLastModifier},
			business.FieldRemark:       {Type: field.TypeString, Column: business.FieldRemark},
			business.FieldRiderID:      {Type: field.TypeUint64, Column: business.FieldRiderID},
			business.FieldCityID:       {Type: field.TypeUint64, Column: business.FieldCityID},
			business.FieldSubscribeID:  {Type: field.TypeUint64, Column: business.FieldSubscribeID},
			business.FieldEmployeeID:   {Type: field.TypeUint64, Column: business.FieldEmployeeID},
			business.FieldStoreID:      {Type: field.TypeUint64, Column: business.FieldStoreID},
			business.FieldPlanID:       {Type: field.TypeUint64, Column: business.FieldPlanID},
			business.FieldEnterpriseID: {Type: field.TypeUint64, Column: business.FieldEnterpriseID},
			business.FieldStationID:    {Type: field.TypeUint64, Column: business.FieldStationID},
			business.FieldCabinetID:    {Type: field.TypeUint64, Column: business.FieldCabinetID},
			business.FieldBatteryID:    {Type: field.TypeUint64, Column: business.FieldBatteryID},
			business.FieldType:         {Type: field.TypeEnum, Column: business.FieldType},
			business.FieldBinInfo:      {Type: field.TypeJSON, Column: business.FieldBinInfo},
			business.FieldStockSn:      {Type: field.TypeString, Column: business.FieldStockSn},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinet.Table,
			Columns: cabinet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinet.FieldID,
			},
		},
		Type: "Cabinet",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinet.FieldCreatedAt:          {Type: field.TypeTime, Column: cabinet.FieldCreatedAt},
			cabinet.FieldUpdatedAt:          {Type: field.TypeTime, Column: cabinet.FieldUpdatedAt},
			cabinet.FieldDeletedAt:          {Type: field.TypeTime, Column: cabinet.FieldDeletedAt},
			cabinet.FieldCreator:            {Type: field.TypeJSON, Column: cabinet.FieldCreator},
			cabinet.FieldLastModifier:       {Type: field.TypeJSON, Column: cabinet.FieldLastModifier},
			cabinet.FieldRemark:             {Type: field.TypeString, Column: cabinet.FieldRemark},
			cabinet.FieldCityID:             {Type: field.TypeUint64, Column: cabinet.FieldCityID},
			cabinet.FieldBranchID:           {Type: field.TypeUint64, Column: cabinet.FieldBranchID},
			cabinet.FieldEnterpriseID:       {Type: field.TypeUint64, Column: cabinet.FieldEnterpriseID},
			cabinet.FieldStationID:          {Type: field.TypeUint64, Column: cabinet.FieldStationID},
			cabinet.FieldSn:                 {Type: field.TypeString, Column: cabinet.FieldSn},
			cabinet.FieldBrand:              {Type: field.TypeOther, Column: cabinet.FieldBrand},
			cabinet.FieldSerial:             {Type: field.TypeString, Column: cabinet.FieldSerial},
			cabinet.FieldName:               {Type: field.TypeString, Column: cabinet.FieldName},
			cabinet.FieldDoors:              {Type: field.TypeInt, Column: cabinet.FieldDoors},
			cabinet.FieldStatus:             {Type: field.TypeUint8, Column: cabinet.FieldStatus},
			cabinet.FieldLng:                {Type: field.TypeFloat64, Column: cabinet.FieldLng},
			cabinet.FieldLat:                {Type: field.TypeFloat64, Column: cabinet.FieldLat},
			cabinet.FieldGeom:               {Type: field.TypeOther, Column: cabinet.FieldGeom},
			cabinet.FieldAddress:            {Type: field.TypeString, Column: cabinet.FieldAddress},
			cabinet.FieldSimSn:              {Type: field.TypeString, Column: cabinet.FieldSimSn},
			cabinet.FieldSimDate:            {Type: field.TypeTime, Column: cabinet.FieldSimDate},
			cabinet.FieldTransferred:        {Type: field.TypeBool, Column: cabinet.FieldTransferred},
			cabinet.FieldIntelligent:        {Type: field.TypeBool, Column: cabinet.FieldIntelligent},
			cabinet.FieldHealth:             {Type: field.TypeUint8, Column: cabinet.FieldHealth},
			cabinet.FieldBin:                {Type: field.TypeJSON, Column: cabinet.FieldBin},
			cabinet.FieldBatteryNum:         {Type: field.TypeInt, Column: cabinet.FieldBatteryNum},
			cabinet.FieldBatteryFullNum:     {Type: field.TypeInt, Column: cabinet.FieldBatteryFullNum},
			cabinet.FieldBatteryChargingNum: {Type: field.TypeInt, Column: cabinet.FieldBatteryChargingNum},
			cabinet.FieldEmptyBinNum:        {Type: field.TypeInt, Column: cabinet.FieldEmptyBinNum},
			cabinet.FieldLockedBinNum:       {Type: field.TypeInt, Column: cabinet.FieldLockedBinNum},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinetfault.Table,
			Columns: cabinetfault.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetfault.FieldID,
			},
		},
		Type: "CabinetFault",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinetfault.FieldCreatedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldCreatedAt},
			cabinetfault.FieldUpdatedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldUpdatedAt},
			cabinetfault.FieldDeletedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldDeletedAt},
			cabinetfault.FieldCreator:      {Type: field.TypeJSON, Column: cabinetfault.FieldCreator},
			cabinetfault.FieldLastModifier: {Type: field.TypeJSON, Column: cabinetfault.FieldLastModifier},
			cabinetfault.FieldRemark:       {Type: field.TypeString, Column: cabinetfault.FieldRemark},
			cabinetfault.FieldCityID:       {Type: field.TypeUint64, Column: cabinetfault.FieldCityID},
			cabinetfault.FieldStatus:       {Type: field.TypeUint8, Column: cabinetfault.FieldStatus},
			cabinetfault.FieldBranchID:     {Type: field.TypeUint64, Column: cabinetfault.FieldBranchID},
			cabinetfault.FieldCabinetID:    {Type: field.TypeUint64, Column: cabinetfault.FieldCabinetID},
			cabinetfault.FieldRiderID:      {Type: field.TypeUint64, Column: cabinetfault.FieldRiderID},
			cabinetfault.FieldFault:        {Type: field.TypeString, Column: cabinetfault.FieldFault},
			cabinetfault.FieldAttachments:  {Type: field.TypeJSON, Column: cabinetfault.FieldAttachments},
			cabinetfault.FieldDescription:  {Type: field.TypeString, Column: cabinetfault.FieldDescription},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: city.FieldID,
			},
		},
		Type: "City",
		Fields: map[string]*sqlgraph.FieldSpec{
			city.FieldCreatedAt:    {Type: field.TypeTime, Column: city.FieldCreatedAt},
			city.FieldUpdatedAt:    {Type: field.TypeTime, Column: city.FieldUpdatedAt},
			city.FieldDeletedAt:    {Type: field.TypeTime, Column: city.FieldDeletedAt},
			city.FieldCreator:      {Type: field.TypeJSON, Column: city.FieldCreator},
			city.FieldLastModifier: {Type: field.TypeJSON, Column: city.FieldLastModifier},
			city.FieldRemark:       {Type: field.TypeString, Column: city.FieldRemark},
			city.FieldOpen:         {Type: field.TypeBool, Column: city.FieldOpen},
			city.FieldName:         {Type: field.TypeString, Column: city.FieldName},
			city.FieldCode:         {Type: field.TypeString, Column: city.FieldCode},
			city.FieldParentID:     {Type: field.TypeUint64, Column: city.FieldParentID},
			city.FieldLng:          {Type: field.TypeFloat64, Column: city.FieldLng},
			city.FieldLat:          {Type: field.TypeFloat64, Column: city.FieldLat},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commission.Table,
			Columns: commission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: commission.FieldID,
			},
		},
		Type: "Commission",
		Fields: map[string]*sqlgraph.FieldSpec{
			commission.FieldCreatedAt:    {Type: field.TypeTime, Column: commission.FieldCreatedAt},
			commission.FieldUpdatedAt:    {Type: field.TypeTime, Column: commission.FieldUpdatedAt},
			commission.FieldDeletedAt:    {Type: field.TypeTime, Column: commission.FieldDeletedAt},
			commission.FieldCreator:      {Type: field.TypeJSON, Column: commission.FieldCreator},
			commission.FieldLastModifier: {Type: field.TypeJSON, Column: commission.FieldLastModifier},
			commission.FieldRemark:       {Type: field.TypeString, Column: commission.FieldRemark},
			commission.FieldBusinessID:   {Type: field.TypeUint64, Column: commission.FieldBusinessID},
			commission.FieldSubscribeID:  {Type: field.TypeUint64, Column: commission.FieldSubscribeID},
			commission.FieldPlanID:       {Type: field.TypeUint64, Column: commission.FieldPlanID},
			commission.FieldRiderID:      {Type: field.TypeUint64, Column: commission.FieldRiderID},
			commission.FieldOrderID:      {Type: field.TypeUint64, Column: commission.FieldOrderID},
			commission.FieldAmount:       {Type: field.TypeFloat64, Column: commission.FieldAmount},
			commission.FieldStatus:       {Type: field.TypeUint8, Column: commission.FieldStatus},
			commission.FieldEmployeeID:   {Type: field.TypeUint64, Column: commission.FieldEmployeeID},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: contract.FieldID,
			},
		},
		Type: "Contract",
		Fields: map[string]*sqlgraph.FieldSpec{
			contract.FieldCreatedAt:    {Type: field.TypeTime, Column: contract.FieldCreatedAt},
			contract.FieldUpdatedAt:    {Type: field.TypeTime, Column: contract.FieldUpdatedAt},
			contract.FieldDeletedAt:    {Type: field.TypeTime, Column: contract.FieldDeletedAt},
			contract.FieldCreator:      {Type: field.TypeJSON, Column: contract.FieldCreator},
			contract.FieldLastModifier: {Type: field.TypeJSON, Column: contract.FieldLastModifier},
			contract.FieldRemark:       {Type: field.TypeString, Column: contract.FieldRemark},
			contract.FieldSubscribeID:  {Type: field.TypeUint64, Column: contract.FieldSubscribeID},
			contract.FieldEmployeeID:   {Type: field.TypeUint64, Column: contract.FieldEmployeeID},
			contract.FieldStatus:       {Type: field.TypeUint8, Column: contract.FieldStatus},
			contract.FieldRiderID:      {Type: field.TypeUint64, Column: contract.FieldRiderID},
			contract.FieldFlowID:       {Type: field.TypeString, Column: contract.FieldFlowID},
			contract.FieldSn:           {Type: field.TypeString, Column: contract.FieldSn},
			contract.FieldFiles:        {Type: field.TypeJSON, Column: contract.FieldFiles},
			contract.FieldEffective:    {Type: field.TypeBool, Column: contract.FieldEffective},
			contract.FieldRiderInfo:    {Type: field.TypeJSON, Column: contract.FieldRiderInfo},
			contract.FieldAllocateID:   {Type: field.TypeUint64, Column: contract.FieldAllocateID},
			contract.FieldLink:         {Type: field.TypeString, Column: contract.FieldLink},
			contract.FieldExpiresAt:    {Type: field.TypeTime, Column: contract.FieldExpiresAt},
			contract.FieldSignedAt:     {Type: field.TypeTime, Column: contract.FieldSignedAt},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coupon.Table,
			Columns: coupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupon.FieldID,
			},
		},
		Type: "Coupon",
		Fields: map[string]*sqlgraph.FieldSpec{
			coupon.FieldCreatedAt:    {Type: field.TypeTime, Column: coupon.FieldCreatedAt},
			coupon.FieldUpdatedAt:    {Type: field.TypeTime, Column: coupon.FieldUpdatedAt},
			coupon.FieldCreator:      {Type: field.TypeJSON, Column: coupon.FieldCreator},
			coupon.FieldLastModifier: {Type: field.TypeJSON, Column: coupon.FieldLastModifier},
			coupon.FieldRemark:       {Type: field.TypeString, Column: coupon.FieldRemark},
			coupon.FieldRiderID:      {Type: field.TypeUint64, Column: coupon.FieldRiderID},
			coupon.FieldAssemblyID:   {Type: field.TypeUint64, Column: coupon.FieldAssemblyID},
			coupon.FieldPlanID:       {Type: field.TypeUint64, Column: coupon.FieldPlanID},
			coupon.FieldTemplateID:   {Type: field.TypeUint64, Column: coupon.FieldTemplateID},
			coupon.FieldOrderID:      {Type: field.TypeUint64, Column: coupon.FieldOrderID},
			coupon.FieldName:         {Type: field.TypeString, Column: coupon.FieldName},
			coupon.FieldRule:         {Type: field.TypeUint8, Column: coupon.FieldRule},
			coupon.FieldMultiple:     {Type: field.TypeBool, Column: coupon.FieldMultiple},
			coupon.FieldAmount:       {Type: field.TypeFloat64, Column: coupon.FieldAmount},
			coupon.FieldCode:         {Type: field.TypeString, Column: coupon.FieldCode},
			coupon.FieldExpiresAt:    {Type: field.TypeTime, Column: coupon.FieldExpiresAt},
			coupon.FieldUsedAt:       {Type: field.TypeTime, Column: coupon.FieldUsedAt},
			coupon.FieldDuration:     {Type: field.TypeJSON, Column: coupon.FieldDuration},
			coupon.FieldPlans:        {Type: field.TypeJSON, Column: coupon.FieldPlans},
			coupon.FieldCities:       {Type: field.TypeJSON, Column: coupon.FieldCities},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   couponassembly.Table,
			Columns: couponassembly.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: couponassembly.FieldID,
			},
		},
		Type: "CouponAssembly",
		Fields: map[string]*sqlgraph.FieldSpec{
			couponassembly.FieldCreatedAt:    {Type: field.TypeTime, Column: couponassembly.FieldCreatedAt},
			couponassembly.FieldUpdatedAt:    {Type: field.TypeTime, Column: couponassembly.FieldUpdatedAt},
			couponassembly.FieldCreator:      {Type: field.TypeJSON, Column: couponassembly.FieldCreator},
			couponassembly.FieldLastModifier: {Type: field.TypeJSON, Column: couponassembly.FieldLastModifier},
			couponassembly.FieldRemark:       {Type: field.TypeString, Column: couponassembly.FieldRemark},
			couponassembly.FieldTemplateID:   {Type: field.TypeUint64, Column: couponassembly.FieldTemplateID},
			couponassembly.FieldName:         {Type: field.TypeString, Column: couponassembly.FieldName},
			couponassembly.FieldNumber:       {Type: field.TypeInt, Column: couponassembly.FieldNumber},
			couponassembly.FieldAmount:       {Type: field.TypeFloat64, Column: couponassembly.FieldAmount},
			couponassembly.FieldTarget:       {Type: field.TypeUint8, Column: couponassembly.FieldTarget},
			couponassembly.FieldMeta:         {Type: field.TypeJSON, Column: couponassembly.FieldMeta},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coupontemplate.Table,
			Columns: coupontemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupontemplate.FieldID,
			},
		},
		Type: "CouponTemplate",
		Fields: map[string]*sqlgraph.FieldSpec{
			coupontemplate.FieldCreatedAt:    {Type: field.TypeTime, Column: coupontemplate.FieldCreatedAt},
			coupontemplate.FieldUpdatedAt:    {Type: field.TypeTime, Column: coupontemplate.FieldUpdatedAt},
			coupontemplate.FieldCreator:      {Type: field.TypeJSON, Column: coupontemplate.FieldCreator},
			coupontemplate.FieldLastModifier: {Type: field.TypeJSON, Column: coupontemplate.FieldLastModifier},
			coupontemplate.FieldRemark:       {Type: field.TypeString, Column: coupontemplate.FieldRemark},
			coupontemplate.FieldEnable:       {Type: field.TypeBool, Column: coupontemplate.FieldEnable},
			coupontemplate.FieldName:         {Type: field.TypeString, Column: coupontemplate.FieldName},
			coupontemplate.FieldMeta:         {Type: field.TypeJSON, Column: coupontemplate.FieldMeta},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ebike.Table,
			Columns: ebike.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebike.FieldID,
			},
		},
		Type: "Ebike",
		Fields: map[string]*sqlgraph.FieldSpec{
			ebike.FieldCreatedAt:    {Type: field.TypeTime, Column: ebike.FieldCreatedAt},
			ebike.FieldUpdatedAt:    {Type: field.TypeTime, Column: ebike.FieldUpdatedAt},
			ebike.FieldCreator:      {Type: field.TypeJSON, Column: ebike.FieldCreator},
			ebike.FieldLastModifier: {Type: field.TypeJSON, Column: ebike.FieldLastModifier},
			ebike.FieldRemark:       {Type: field.TypeString, Column: ebike.FieldRemark},
			ebike.FieldBrandID:      {Type: field.TypeUint64, Column: ebike.FieldBrandID},
			ebike.FieldRiderID:      {Type: field.TypeUint64, Column: ebike.FieldRiderID},
			ebike.FieldStoreID:      {Type: field.TypeUint64, Column: ebike.FieldStoreID},
			ebike.FieldEnterpriseID: {Type: field.TypeUint64, Column: ebike.FieldEnterpriseID},
			ebike.FieldStationID:    {Type: field.TypeUint64, Column: ebike.FieldStationID},
			ebike.FieldStatus:       {Type: field.TypeOther, Column: ebike.FieldStatus},
			ebike.FieldEnable:       {Type: field.TypeBool, Column: ebike.FieldEnable},
			ebike.FieldSn:           {Type: field.TypeString, Column: ebike.FieldSn},
			ebike.FieldPlate:        {Type: field.TypeString, Column: ebike.FieldPlate},
			ebike.FieldMachine:      {Type: field.TypeString, Column: ebike.FieldMachine},
			ebike.FieldSim:          {Type: field.TypeString, Column: ebike.FieldSim},
			ebike.FieldColor:        {Type: field.TypeString, Column: ebike.FieldColor},
			ebike.FieldExFactory:    {Type: field.TypeString, Column: ebike.FieldExFactory},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ebikebrand.Table,
			Columns: ebikebrand.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebikebrand.FieldID,
			},
		},
		Type: "EbikeBrand",
		Fields: map[string]*sqlgraph.FieldSpec{
			ebikebrand.FieldCreatedAt:    {Type: field.TypeTime, Column: ebikebrand.FieldCreatedAt},
			ebikebrand.FieldUpdatedAt:    {Type: field.TypeTime, Column: ebikebrand.FieldUpdatedAt},
			ebikebrand.FieldDeletedAt:    {Type: field.TypeTime, Column: ebikebrand.FieldDeletedAt},
			ebikebrand.FieldCreator:      {Type: field.TypeJSON, Column: ebikebrand.FieldCreator},
			ebikebrand.FieldLastModifier: {Type: field.TypeJSON, Column: ebikebrand.FieldLastModifier},
			ebikebrand.FieldRemark:       {Type: field.TypeString, Column: ebikebrand.FieldRemark},
			ebikebrand.FieldName:         {Type: field.TypeString, Column: ebikebrand.FieldName},
			ebikebrand.FieldCover:        {Type: field.TypeString, Column: ebikebrand.FieldCover},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: employee.FieldID,
			},
		},
		Type: "Employee",
		Fields: map[string]*sqlgraph.FieldSpec{
			employee.FieldCreatedAt:    {Type: field.TypeTime, Column: employee.FieldCreatedAt},
			employee.FieldUpdatedAt:    {Type: field.TypeTime, Column: employee.FieldUpdatedAt},
			employee.FieldDeletedAt:    {Type: field.TypeTime, Column: employee.FieldDeletedAt},
			employee.FieldCreator:      {Type: field.TypeJSON, Column: employee.FieldCreator},
			employee.FieldLastModifier: {Type: field.TypeJSON, Column: employee.FieldLastModifier},
			employee.FieldRemark:       {Type: field.TypeString, Column: employee.FieldRemark},
			employee.FieldCityID:       {Type: field.TypeUint64, Column: employee.FieldCityID},
			employee.FieldSn:           {Type: field.TypeUUID, Column: employee.FieldSn},
			employee.FieldName:         {Type: field.TypeString, Column: employee.FieldName},
			employee.FieldPhone:        {Type: field.TypeString, Column: employee.FieldPhone},
			employee.FieldEnable:       {Type: field.TypeBool, Column: employee.FieldEnable},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprise.Table,
			Columns: enterprise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprise.FieldID,
			},
		},
		Type: "Enterprise",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprise.FieldCreatedAt:       {Type: field.TypeTime, Column: enterprise.FieldCreatedAt},
			enterprise.FieldUpdatedAt:       {Type: field.TypeTime, Column: enterprise.FieldUpdatedAt},
			enterprise.FieldDeletedAt:       {Type: field.TypeTime, Column: enterprise.FieldDeletedAt},
			enterprise.FieldCreator:         {Type: field.TypeJSON, Column: enterprise.FieldCreator},
			enterprise.FieldLastModifier:    {Type: field.TypeJSON, Column: enterprise.FieldLastModifier},
			enterprise.FieldRemark:          {Type: field.TypeString, Column: enterprise.FieldRemark},
			enterprise.FieldCityID:          {Type: field.TypeUint64, Column: enterprise.FieldCityID},
			enterprise.FieldName:            {Type: field.TypeString, Column: enterprise.FieldName},
			enterprise.FieldCompanyName:     {Type: field.TypeString, Column: enterprise.FieldCompanyName},
			enterprise.FieldStatus:          {Type: field.TypeUint8, Column: enterprise.FieldStatus},
			enterprise.FieldContactName:     {Type: field.TypeString, Column: enterprise.FieldContactName},
			enterprise.FieldContactPhone:    {Type: field.TypeString, Column: enterprise.FieldContactPhone},
			enterprise.FieldIdcardNumber:    {Type: field.TypeString, Column: enterprise.FieldIdcardNumber},
			enterprise.FieldAddress:         {Type: field.TypeString, Column: enterprise.FieldAddress},
			enterprise.FieldPayment:         {Type: field.TypeUint8, Column: enterprise.FieldPayment},
			enterprise.FieldDeposit:         {Type: field.TypeFloat64, Column: enterprise.FieldDeposit},
			enterprise.FieldBalance:         {Type: field.TypeFloat64, Column: enterprise.FieldBalance},
			enterprise.FieldPrepaymentTotal: {Type: field.TypeFloat64, Column: enterprise.FieldPrepaymentTotal},
			enterprise.FieldSuspensedAt:     {Type: field.TypeTime, Column: enterprise.FieldSuspensedAt},
			enterprise.FieldAgent:           {Type: field.TypeBool, Column: enterprise.FieldAgent},
			enterprise.FieldUseStore:        {Type: field.TypeBool, Column: enterprise.FieldUseStore},
			enterprise.FieldDays:            {Type: field.TypeJSON, Column: enterprise.FieldDays},
			enterprise.FieldDistance:        {Type: field.TypeFloat64, Column: enterprise.FieldDistance},
			enterprise.FieldRechargeAmount:  {Type: field.TypeJSON, Column: enterprise.FieldRechargeAmount},
			enterprise.FieldSignType:        {Type: field.TypeEnum, Column: enterprise.FieldSignType},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisebatteryswap.Table,
			Columns: enterprisebatteryswap.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisebatteryswap.FieldID,
			},
		},
		Type: "EnterpriseBatterySwap",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisebatteryswap.FieldCreatedAt:          {Type: field.TypeTime, Column: enterprisebatteryswap.FieldCreatedAt},
			enterprisebatteryswap.FieldUpdatedAt:          {Type: field.TypeTime, Column: enterprisebatteryswap.FieldUpdatedAt},
			enterprisebatteryswap.FieldExchangeID:         {Type: field.TypeUint64, Column: enterprisebatteryswap.FieldExchangeID},
			enterprisebatteryswap.FieldCabinetID:          {Type: field.TypeUint64, Column: enterprisebatteryswap.FieldCabinetID},
			enterprisebatteryswap.FieldPutinID:            {Type: field.TypeUint64, Column: enterprisebatteryswap.FieldPutinID},
			enterprisebatteryswap.FieldPutinSn:            {Type: field.TypeString, Column: enterprisebatteryswap.FieldPutinSn},
			enterprisebatteryswap.FieldPutinEnterpriseID:  {Type: field.TypeUint64, Column: enterprisebatteryswap.FieldPutinEnterpriseID},
			enterprisebatteryswap.FieldPutinStationID:     {Type: field.TypeUint64, Column: enterprisebatteryswap.FieldPutinStationID},
			enterprisebatteryswap.FieldPutoutID:           {Type: field.TypeUint64, Column: enterprisebatteryswap.FieldPutoutID},
			enterprisebatteryswap.FieldPutoutSn:           {Type: field.TypeString, Column: enterprisebatteryswap.FieldPutoutSn},
			enterprisebatteryswap.FieldPutoutEnterpriseID: {Type: field.TypeUint64, Column: enterprisebatteryswap.FieldPutoutEnterpriseID},
			enterprisebatteryswap.FieldPutoutStationID:    {Type: field.TypeUint64, Column: enterprisebatteryswap.FieldPutoutStationID},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisebill.Table,
			Columns: enterprisebill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisebill.FieldID,
			},
		},
		Type: "EnterpriseBill",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisebill.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprisebill.FieldCreatedAt},
			enterprisebill.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprisebill.FieldUpdatedAt},
			enterprisebill.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprisebill.FieldDeletedAt},
			enterprisebill.FieldCreator:      {Type: field.TypeJSON, Column: enterprisebill.FieldCreator},
			enterprisebill.FieldLastModifier: {Type: field.TypeJSON, Column: enterprisebill.FieldLastModifier},
			enterprisebill.FieldRemark:       {Type: field.TypeString, Column: enterprisebill.FieldRemark},
			enterprisebill.FieldRiderID:      {Type: field.TypeUint64, Column: enterprisebill.FieldRiderID},
			enterprisebill.FieldCityID:       {Type: field.TypeUint64, Column: enterprisebill.FieldCityID},
			enterprisebill.FieldStationID:    {Type: field.TypeUint64, Column: enterprisebill.FieldStationID},
			enterprisebill.FieldSubscribeID:  {Type: field.TypeUint64, Column: enterprisebill.FieldSubscribeID},
			enterprisebill.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterprisebill.FieldEnterpriseID},
			enterprisebill.FieldStatementID:  {Type: field.TypeUint64, Column: enterprisebill.FieldStatementID},
			enterprisebill.FieldStart:        {Type: field.TypeTime, Column: enterprisebill.FieldStart},
			enterprisebill.FieldEnd:          {Type: field.TypeTime, Column: enterprisebill.FieldEnd},
			enterprisebill.FieldDays:         {Type: field.TypeInt, Column: enterprisebill.FieldDays},
			enterprisebill.FieldPrice:        {Type: field.TypeFloat64, Column: enterprisebill.FieldPrice},
			enterprisebill.FieldCost:         {Type: field.TypeFloat64, Column: enterprisebill.FieldCost},
			enterprisebill.FieldModel:        {Type: field.TypeString, Column: enterprisebill.FieldModel},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisecontract.Table,
			Columns: enterprisecontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisecontract.FieldID,
			},
		},
		Type: "EnterpriseContract",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisecontract.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprisecontract.FieldCreatedAt},
			enterprisecontract.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprisecontract.FieldUpdatedAt},
			enterprisecontract.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprisecontract.FieldDeletedAt},
			enterprisecontract.FieldCreator:      {Type: field.TypeJSON, Column: enterprisecontract.FieldCreator},
			enterprisecontract.FieldLastModifier: {Type: field.TypeJSON, Column: enterprisecontract.FieldLastModifier},
			enterprisecontract.FieldRemark:       {Type: field.TypeString, Column: enterprisecontract.FieldRemark},
			enterprisecontract.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterprisecontract.FieldEnterpriseID},
			enterprisecontract.FieldStart:        {Type: field.TypeTime, Column: enterprisecontract.FieldStart},
			enterprisecontract.FieldEnd:          {Type: field.TypeTime, Column: enterprisecontract.FieldEnd},
			enterprisecontract.FieldFile:         {Type: field.TypeString, Column: enterprisecontract.FieldFile},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterpriseprepayment.Table,
			Columns: enterpriseprepayment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseprepayment.FieldID,
			},
		},
		Type: "EnterprisePrepayment",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterpriseprepayment.FieldCreatedAt:    {Type: field.TypeTime, Column: enterpriseprepayment.FieldCreatedAt},
			enterpriseprepayment.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterpriseprepayment.FieldUpdatedAt},
			enterpriseprepayment.FieldCreator:      {Type: field.TypeJSON, Column: enterpriseprepayment.FieldCreator},
			enterpriseprepayment.FieldLastModifier: {Type: field.TypeJSON, Column: enterpriseprepayment.FieldLastModifier},
			enterpriseprepayment.FieldRemark:       {Type: field.TypeString, Column: enterpriseprepayment.FieldRemark},
			enterpriseprepayment.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterpriseprepayment.FieldEnterpriseID},
			enterpriseprepayment.FieldAgentID:      {Type: field.TypeUint64, Column: enterpriseprepayment.FieldAgentID},
			enterpriseprepayment.FieldAmount:       {Type: field.TypeFloat64, Column: enterpriseprepayment.FieldAmount},
			enterpriseprepayment.FieldPayway:       {Type: field.TypeOther, Column: enterpriseprepayment.FieldPayway},
			enterpriseprepayment.FieldTradeNo:      {Type: field.TypeString, Column: enterpriseprepayment.FieldTradeNo},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterpriseprice.Table,
			Columns: enterpriseprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseprice.FieldID,
			},
		},
		Type: "EnterprisePrice",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterpriseprice.FieldCreatedAt:    {Type: field.TypeTime, Column: enterpriseprice.FieldCreatedAt},
			enterpriseprice.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterpriseprice.FieldUpdatedAt},
			enterpriseprice.FieldDeletedAt:    {Type: field.TypeTime, Column: enterpriseprice.FieldDeletedAt},
			enterpriseprice.FieldCreator:      {Type: field.TypeJSON, Column: enterpriseprice.FieldCreator},
			enterpriseprice.FieldLastModifier: {Type: field.TypeJSON, Column: enterpriseprice.FieldLastModifier},
			enterpriseprice.FieldRemark:       {Type: field.TypeString, Column: enterpriseprice.FieldRemark},
			enterpriseprice.FieldCityID:       {Type: field.TypeUint64, Column: enterpriseprice.FieldCityID},
			enterpriseprice.FieldBrandID:      {Type: field.TypeUint64, Column: enterpriseprice.FieldBrandID},
			enterpriseprice.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterpriseprice.FieldEnterpriseID},
			enterpriseprice.FieldPrice:        {Type: field.TypeFloat64, Column: enterpriseprice.FieldPrice},
			enterpriseprice.FieldModel:        {Type: field.TypeString, Column: enterpriseprice.FieldModel},
			enterpriseprice.FieldIntelligent:  {Type: field.TypeBool, Column: enterpriseprice.FieldIntelligent},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisestatement.Table,
			Columns: enterprisestatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestatement.FieldID,
			},
		},
		Type: "EnterpriseStatement",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisestatement.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprisestatement.FieldCreatedAt},
			enterprisestatement.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprisestatement.FieldUpdatedAt},
			enterprisestatement.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprisestatement.FieldDeletedAt},
			enterprisestatement.FieldCreator:      {Type: field.TypeJSON, Column: enterprisestatement.FieldCreator},
			enterprisestatement.FieldLastModifier: {Type: field.TypeJSON, Column: enterprisestatement.FieldLastModifier},
			enterprisestatement.FieldRemark:       {Type: field.TypeString, Column: enterprisestatement.FieldRemark},
			enterprisestatement.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterprisestatement.FieldEnterpriseID},
			enterprisestatement.FieldCost:         {Type: field.TypeFloat64, Column: enterprisestatement.FieldCost},
			enterprisestatement.FieldSettledAt:    {Type: field.TypeTime, Column: enterprisestatement.FieldSettledAt},
			enterprisestatement.FieldDays:         {Type: field.TypeInt, Column: enterprisestatement.FieldDays},
			enterprisestatement.FieldRiderNumber:  {Type: field.TypeInt, Column: enterprisestatement.FieldRiderNumber},
			enterprisestatement.FieldDate:         {Type: field.TypeTime, Column: enterprisestatement.FieldDate},
			enterprisestatement.FieldStart:        {Type: field.TypeTime, Column: enterprisestatement.FieldStart},
			enterprisestatement.FieldEnd:          {Type: field.TypeTime, Column: enterprisestatement.FieldEnd},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisestation.Table,
			Columns: enterprisestation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestation.FieldID,
			},
		},
		Type: "EnterpriseStation",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisestation.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprisestation.FieldCreatedAt},
			enterprisestation.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprisestation.FieldUpdatedAt},
			enterprisestation.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprisestation.FieldDeletedAt},
			enterprisestation.FieldCreator:      {Type: field.TypeJSON, Column: enterprisestation.FieldCreator},
			enterprisestation.FieldLastModifier: {Type: field.TypeJSON, Column: enterprisestation.FieldLastModifier},
			enterprisestation.FieldRemark:       {Type: field.TypeString, Column: enterprisestation.FieldRemark},
			enterprisestation.FieldCityID:       {Type: field.TypeUint64, Column: enterprisestation.FieldCityID},
			enterprisestation.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterprisestation.FieldEnterpriseID},
			enterprisestation.FieldName:         {Type: field.TypeString, Column: enterprisestation.FieldName},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   exception.Table,
			Columns: exception.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exception.FieldID,
			},
		},
		Type: "Exception",
		Fields: map[string]*sqlgraph.FieldSpec{
			exception.FieldCreatedAt:    {Type: field.TypeTime, Column: exception.FieldCreatedAt},
			exception.FieldUpdatedAt:    {Type: field.TypeTime, Column: exception.FieldUpdatedAt},
			exception.FieldDeletedAt:    {Type: field.TypeTime, Column: exception.FieldDeletedAt},
			exception.FieldCreator:      {Type: field.TypeJSON, Column: exception.FieldCreator},
			exception.FieldLastModifier: {Type: field.TypeJSON, Column: exception.FieldLastModifier},
			exception.FieldRemark:       {Type: field.TypeString, Column: exception.FieldRemark},
			exception.FieldCityID:       {Type: field.TypeUint64, Column: exception.FieldCityID},
			exception.FieldEmployeeID:   {Type: field.TypeUint64, Column: exception.FieldEmployeeID},
			exception.FieldStatus:       {Type: field.TypeUint8, Column: exception.FieldStatus},
			exception.FieldStoreID:      {Type: field.TypeUint64, Column: exception.FieldStoreID},
			exception.FieldName:         {Type: field.TypeString, Column: exception.FieldName},
			exception.FieldModel:        {Type: field.TypeString, Column: exception.FieldModel},
			exception.FieldNum:          {Type: field.TypeInt, Column: exception.FieldNum},
			exception.FieldReason:       {Type: field.TypeString, Column: exception.FieldReason},
			exception.FieldDescription:  {Type: field.TypeString, Column: exception.FieldDescription},
			exception.FieldAttachments:  {Type: field.TypeJSON, Column: exception.FieldAttachments},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exchange.FieldID,
			},
		},
		Type: "Exchange",
		Fields: map[string]*sqlgraph.FieldSpec{
			exchange.FieldCreatedAt:     {Type: field.TypeTime, Column: exchange.FieldCreatedAt},
			exchange.FieldUpdatedAt:     {Type: field.TypeTime, Column: exchange.FieldUpdatedAt},
			exchange.FieldDeletedAt:     {Type: field.TypeTime, Column: exchange.FieldDeletedAt},
			exchange.FieldCreator:       {Type: field.TypeJSON, Column: exchange.FieldCreator},
			exchange.FieldLastModifier:  {Type: field.TypeJSON, Column: exchange.FieldLastModifier},
			exchange.FieldRemark:        {Type: field.TypeString, Column: exchange.FieldRemark},
			exchange.FieldSubscribeID:   {Type: field.TypeUint64, Column: exchange.FieldSubscribeID},
			exchange.FieldCityID:        {Type: field.TypeUint64, Column: exchange.FieldCityID},
			exchange.FieldStoreID:       {Type: field.TypeUint64, Column: exchange.FieldStoreID},
			exchange.FieldEnterpriseID:  {Type: field.TypeUint64, Column: exchange.FieldEnterpriseID},
			exchange.FieldStationID:     {Type: field.TypeUint64, Column: exchange.FieldStationID},
			exchange.FieldRiderID:       {Type: field.TypeUint64, Column: exchange.FieldRiderID},
			exchange.FieldEmployeeID:    {Type: field.TypeUint64, Column: exchange.FieldEmployeeID},
			exchange.FieldUUID:          {Type: field.TypeString, Column: exchange.FieldUUID},
			exchange.FieldCabinetID:     {Type: field.TypeUint64, Column: exchange.FieldCabinetID},
			exchange.FieldSuccess:       {Type: field.TypeBool, Column: exchange.FieldSuccess},
			exchange.FieldModel:         {Type: field.TypeString, Column: exchange.FieldModel},
			exchange.FieldAlternative:   {Type: field.TypeBool, Column: exchange.FieldAlternative},
			exchange.FieldStartAt:       {Type: field.TypeTime, Column: exchange.FieldStartAt},
			exchange.FieldFinishAt:      {Type: field.TypeTime, Column: exchange.FieldFinishAt},
			exchange.FieldDuration:      {Type: field.TypeInt, Column: exchange.FieldDuration},
			exchange.FieldRiderBattery:  {Type: field.TypeString, Column: exchange.FieldRiderBattery},
			exchange.FieldPutinBattery:  {Type: field.TypeString, Column: exchange.FieldPutinBattery},
			exchange.FieldPutoutBattery: {Type: field.TypeString, Column: exchange.FieldPutoutBattery},
			exchange.FieldCabinetInfo:   {Type: field.TypeJSON, Column: exchange.FieldCabinetInfo},
			exchange.FieldEmpty:         {Type: field.TypeJSON, Column: exchange.FieldEmpty},
			exchange.FieldFully:         {Type: field.TypeJSON, Column: exchange.FieldFully},
			exchange.FieldSteps:         {Type: field.TypeJSON, Column: exchange.FieldSteps},
			exchange.FieldMessage:       {Type: field.TypeString, Column: exchange.FieldMessage},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   export.Table,
			Columns: export.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: export.FieldID,
			},
		},
		Type: "Export",
		Fields: map[string]*sqlgraph.FieldSpec{
			export.FieldCreatedAt: {Type: field.TypeTime, Column: export.FieldCreatedAt},
			export.FieldUpdatedAt: {Type: field.TypeTime, Column: export.FieldUpdatedAt},
			export.FieldDeletedAt: {Type: field.TypeTime, Column: export.FieldDeletedAt},
			export.FieldManagerID: {Type: field.TypeUint64, Column: export.FieldManagerID},
			export.FieldTaxonomy:  {Type: field.TypeString, Column: export.FieldTaxonomy},
			export.FieldSn:        {Type: field.TypeString, Column: export.FieldSn},
			export.FieldStatus:    {Type: field.TypeUint8, Column: export.FieldStatus},
			export.FieldPath:      {Type: field.TypeString, Column: export.FieldPath},
			export.FieldMessage:   {Type: field.TypeString, Column: export.FieldMessage},
			export.FieldFinishAt:  {Type: field.TypeTime, Column: export.FieldFinishAt},
			export.FieldDuration:  {Type: field.TypeInt64, Column: export.FieldDuration},
			export.FieldCondition: {Type: field.TypeString, Column: export.FieldCondition},
			export.FieldInfo:      {Type: field.TypeJSON, Column: export.FieldInfo},
			export.FieldRemark:    {Type: field.TypeString, Column: export.FieldRemark},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   feedback.Table,
			Columns: feedback.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: feedback.FieldID,
			},
		},
		Type: "Feedback",
		Fields: map[string]*sqlgraph.FieldSpec{
			feedback.FieldCreatedAt:    {Type: field.TypeTime, Column: feedback.FieldCreatedAt},
			feedback.FieldUpdatedAt:    {Type: field.TypeTime, Column: feedback.FieldUpdatedAt},
			feedback.FieldEnterpriseID: {Type: field.TypeUint64, Column: feedback.FieldEnterpriseID},
			feedback.FieldAgentID:      {Type: field.TypeUint64, Column: feedback.FieldAgentID},
			feedback.FieldContent:      {Type: field.TypeString, Column: feedback.FieldContent},
			feedback.FieldType:         {Type: field.TypeUint8, Column: feedback.FieldType},
			feedback.FieldURL:          {Type: field.TypeJSON, Column: feedback.FieldURL},
			feedback.FieldName:         {Type: field.TypeString, Column: feedback.FieldName},
			feedback.FieldPhone:        {Type: field.TypeString, Column: feedback.FieldPhone},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   inventory.Table,
			Columns: inventory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: inventory.FieldID,
			},
		},
		Type: "Inventory",
		Fields: map[string]*sqlgraph.FieldSpec{
			inventory.FieldCreatedAt:    {Type: field.TypeTime, Column: inventory.FieldCreatedAt},
			inventory.FieldUpdatedAt:    {Type: field.TypeTime, Column: inventory.FieldUpdatedAt},
			inventory.FieldDeletedAt:    {Type: field.TypeTime, Column: inventory.FieldDeletedAt},
			inventory.FieldCreator:      {Type: field.TypeJSON, Column: inventory.FieldCreator},
			inventory.FieldLastModifier: {Type: field.TypeJSON, Column: inventory.FieldLastModifier},
			inventory.FieldRemark:       {Type: field.TypeString, Column: inventory.FieldRemark},
			inventory.FieldName:         {Type: field.TypeString, Column: inventory.FieldName},
			inventory.FieldCount:        {Type: field.TypeBool, Column: inventory.FieldCount},
			inventory.FieldTransfer:     {Type: field.TypeBool, Column: inventory.FieldTransfer},
			inventory.FieldPurchase:     {Type: field.TypeBool, Column: inventory.FieldPurchase},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   manager.Table,
			Columns: manager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: manager.FieldID,
			},
		},
		Type: "Manager",
		Fields: map[string]*sqlgraph.FieldSpec{
			manager.FieldCreatedAt:    {Type: field.TypeTime, Column: manager.FieldCreatedAt},
			manager.FieldUpdatedAt:    {Type: field.TypeTime, Column: manager.FieldUpdatedAt},
			manager.FieldDeletedAt:    {Type: field.TypeTime, Column: manager.FieldDeletedAt},
			manager.FieldCreator:      {Type: field.TypeJSON, Column: manager.FieldCreator},
			manager.FieldLastModifier: {Type: field.TypeJSON, Column: manager.FieldLastModifier},
			manager.FieldRemark:       {Type: field.TypeString, Column: manager.FieldRemark},
			manager.FieldRoleID:       {Type: field.TypeUint64, Column: manager.FieldRoleID},
			manager.FieldPhone:        {Type: field.TypeString, Column: manager.FieldPhone},
			manager.FieldName:         {Type: field.TypeString, Column: manager.FieldName},
			manager.FieldPassword:     {Type: field.TypeString, Column: manager.FieldPassword},
			manager.FieldLastSigninAt: {Type: field.TypeTime, Column: manager.FieldLastSigninAt},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldCreatedAt:     {Type: field.TypeTime, Column: order.FieldCreatedAt},
			order.FieldUpdatedAt:     {Type: field.TypeTime, Column: order.FieldUpdatedAt},
			order.FieldDeletedAt:     {Type: field.TypeTime, Column: order.FieldDeletedAt},
			order.FieldCreator:       {Type: field.TypeJSON, Column: order.FieldCreator},
			order.FieldLastModifier:  {Type: field.TypeJSON, Column: order.FieldLastModifier},
			order.FieldRemark:        {Type: field.TypeString, Column: order.FieldRemark},
			order.FieldPlanID:        {Type: field.TypeUint64, Column: order.FieldPlanID},
			order.FieldCityID:        {Type: field.TypeUint64, Column: order.FieldCityID},
			order.FieldBrandID:       {Type: field.TypeUint64, Column: order.FieldBrandID},
			order.FieldEbikeID:       {Type: field.TypeUint64, Column: order.FieldEbikeID},
			order.FieldAgentID:       {Type: field.TypeUint64, Column: order.FieldAgentID},
			order.FieldRiderID:       {Type: field.TypeUint64, Column: order.FieldRiderID},
			order.FieldParentID:      {Type: field.TypeUint64, Column: order.FieldParentID},
			order.FieldSubscribeID:   {Type: field.TypeUint64, Column: order.FieldSubscribeID},
			order.FieldStatus:        {Type: field.TypeUint8, Column: order.FieldStatus},
			order.FieldPayway:        {Type: field.TypeUint8, Column: order.FieldPayway},
			order.FieldType:          {Type: field.TypeUint, Column: order.FieldType},
			order.FieldOutTradeNo:    {Type: field.TypeString, Column: order.FieldOutTradeNo},
			order.FieldTradeNo:       {Type: field.TypeString, Column: order.FieldTradeNo},
			order.FieldAmount:        {Type: field.TypeFloat64, Column: order.FieldAmount},
			order.FieldTotal:         {Type: field.TypeFloat64, Column: order.FieldTotal},
			order.FieldRefundAt:      {Type: field.TypeTime, Column: order.FieldRefundAt},
			order.FieldInitialDays:   {Type: field.TypeInt, Column: order.FieldInitialDays},
			order.FieldPastDays:      {Type: field.TypeInt, Column: order.FieldPastDays},
			order.FieldPoints:        {Type: field.TypeInt64, Column: order.FieldPoints},
			order.FieldPointRatio:    {Type: field.TypeFloat64, Column: order.FieldPointRatio},
			order.FieldCouponAmount:  {Type: field.TypeFloat64, Column: order.FieldCouponAmount},
			order.FieldDiscountNewly: {Type: field.TypeFloat64, Column: order.FieldDiscountNewly},
		},
	}
	graph.Nodes[36] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderrefund.Table,
			Columns: orderrefund.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderrefund.FieldID,
			},
		},
		Type: "OrderRefund",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderrefund.FieldCreatedAt:    {Type: field.TypeTime, Column: orderrefund.FieldCreatedAt},
			orderrefund.FieldUpdatedAt:    {Type: field.TypeTime, Column: orderrefund.FieldUpdatedAt},
			orderrefund.FieldDeletedAt:    {Type: field.TypeTime, Column: orderrefund.FieldDeletedAt},
			orderrefund.FieldCreator:      {Type: field.TypeJSON, Column: orderrefund.FieldCreator},
			orderrefund.FieldLastModifier: {Type: field.TypeJSON, Column: orderrefund.FieldLastModifier},
			orderrefund.FieldRemark:       {Type: field.TypeString, Column: orderrefund.FieldRemark},
			orderrefund.FieldOrderID:      {Type: field.TypeUint64, Column: orderrefund.FieldOrderID},
			orderrefund.FieldStatus:       {Type: field.TypeUint8, Column: orderrefund.FieldStatus},
			orderrefund.FieldAmount:       {Type: field.TypeFloat64, Column: orderrefund.FieldAmount},
			orderrefund.FieldOutRefundNo:  {Type: field.TypeString, Column: orderrefund.FieldOutRefundNo},
			orderrefund.FieldReason:       {Type: field.TypeString, Column: orderrefund.FieldReason},
			orderrefund.FieldRefundAt:     {Type: field.TypeTime, Column: orderrefund.FieldRefundAt},
		},
	}
	graph.Nodes[37] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
		Type: "Person",
		Fields: map[string]*sqlgraph.FieldSpec{
			person.FieldCreatedAt:        {Type: field.TypeTime, Column: person.FieldCreatedAt},
			person.FieldUpdatedAt:        {Type: field.TypeTime, Column: person.FieldUpdatedAt},
			person.FieldDeletedAt:        {Type: field.TypeTime, Column: person.FieldDeletedAt},
			person.FieldCreator:          {Type: field.TypeJSON, Column: person.FieldCreator},
			person.FieldLastModifier:     {Type: field.TypeJSON, Column: person.FieldLastModifier},
			person.FieldRemark:           {Type: field.TypeString, Column: person.FieldRemark},
			person.FieldStatus:           {Type: field.TypeUint8, Column: person.FieldStatus},
			person.FieldBanned:           {Type: field.TypeBool, Column: person.FieldBanned},
			person.FieldName:             {Type: field.TypeString, Column: person.FieldName},
			person.FieldIDCardNumber:     {Type: field.TypeString, Column: person.FieldIDCardNumber},
			person.FieldIDCardType:       {Type: field.TypeUint8, Column: person.FieldIDCardType},
			person.FieldIDCardPortrait:   {Type: field.TypeString, Column: person.FieldIDCardPortrait},
			person.FieldIDCardNational:   {Type: field.TypeString, Column: person.FieldIDCardNational},
			person.FieldAuthFace:         {Type: field.TypeString, Column: person.FieldAuthFace},
			person.FieldAuthResult:       {Type: field.TypeJSON, Column: person.FieldAuthResult},
			person.FieldAuthAt:           {Type: field.TypeTime, Column: person.FieldAuthAt},
			person.FieldEsignAccountID:   {Type: field.TypeString, Column: person.FieldEsignAccountID},
			person.FieldBaiduVerifyToken: {Type: field.TypeString, Column: person.FieldBaiduVerifyToken},
			person.FieldBaiduLogID:       {Type: field.TypeString, Column: person.FieldBaiduLogID},
		},
	}
	graph.Nodes[38] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: plan.FieldID,
			},
		},
		Type: "Plan",
		Fields: map[string]*sqlgraph.FieldSpec{
			plan.FieldCreatedAt:      {Type: field.TypeTime, Column: plan.FieldCreatedAt},
			plan.FieldUpdatedAt:      {Type: field.TypeTime, Column: plan.FieldUpdatedAt},
			plan.FieldDeletedAt:      {Type: field.TypeTime, Column: plan.FieldDeletedAt},
			plan.FieldCreator:        {Type: field.TypeJSON, Column: plan.FieldCreator},
			plan.FieldLastModifier:   {Type: field.TypeJSON, Column: plan.FieldLastModifier},
			plan.FieldRemark:         {Type: field.TypeString, Column: plan.FieldRemark},
			plan.FieldBrandID:        {Type: field.TypeUint64, Column: plan.FieldBrandID},
			plan.FieldModel:          {Type: field.TypeString, Column: plan.FieldModel},
			plan.FieldEnable:         {Type: field.TypeBool, Column: plan.FieldEnable},
			plan.FieldType:           {Type: field.TypeUint8, Column: plan.FieldType},
			plan.FieldName:           {Type: field.TypeString, Column: plan.FieldName},
			plan.FieldStart:          {Type: field.TypeTime, Column: plan.FieldStart},
			plan.FieldEnd:            {Type: field.TypeTime, Column: plan.FieldEnd},
			plan.FieldPrice:          {Type: field.TypeFloat64, Column: plan.FieldPrice},
			plan.FieldDays:           {Type: field.TypeUint, Column: plan.FieldDays},
			plan.FieldCommission:     {Type: field.TypeFloat64, Column: plan.FieldCommission},
			plan.FieldCommissionBase: {Type: field.TypeFloat64, Column: plan.FieldCommissionBase},
			plan.FieldOriginal:       {Type: field.TypeFloat64, Column: plan.FieldOriginal},
			plan.FieldDesc:           {Type: field.TypeString, Column: plan.FieldDesc},
			plan.FieldParentID:       {Type: field.TypeUint64, Column: plan.FieldParentID},
			plan.FieldDiscountNewly:  {Type: field.TypeFloat64, Column: plan.FieldDiscountNewly},
			plan.FieldNotes:          {Type: field.TypeJSON, Column: plan.FieldNotes},
			plan.FieldIntelligent:    {Type: field.TypeBool, Column: plan.FieldIntelligent},
		},
	}
	graph.Nodes[39] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   planintroduce.Table,
			Columns: planintroduce.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: planintroduce.FieldID,
			},
		},
		Type: "PlanIntroduce",
		Fields: map[string]*sqlgraph.FieldSpec{
			planintroduce.FieldCreatedAt: {Type: field.TypeTime, Column: planintroduce.FieldCreatedAt},
			planintroduce.FieldUpdatedAt: {Type: field.TypeTime, Column: planintroduce.FieldUpdatedAt},
			planintroduce.FieldBrandID:   {Type: field.TypeUint64, Column: planintroduce.FieldBrandID},
			planintroduce.FieldModel:     {Type: field.TypeString, Column: planintroduce.FieldModel},
			planintroduce.FieldImage:     {Type: field.TypeString, Column: planintroduce.FieldImage},
		},
	}
	graph.Nodes[40] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   pointlog.Table,
			Columns: pointlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: pointlog.FieldID,
			},
		},
		Type: "PointLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			pointlog.FieldCreatedAt:    {Type: field.TypeTime, Column: pointlog.FieldCreatedAt},
			pointlog.FieldUpdatedAt:    {Type: field.TypeTime, Column: pointlog.FieldUpdatedAt},
			pointlog.FieldRiderID:      {Type: field.TypeUint64, Column: pointlog.FieldRiderID},
			pointlog.FieldOrderID:      {Type: field.TypeUint64, Column: pointlog.FieldOrderID},
			pointlog.FieldModifier:     {Type: field.TypeJSON, Column: pointlog.FieldModifier},
			pointlog.FieldEmployeeInfo: {Type: field.TypeJSON, Column: pointlog.FieldEmployeeInfo},
			pointlog.FieldType:         {Type: field.TypeUint8, Column: pointlog.FieldType},
			pointlog.FieldPoints:       {Type: field.TypeInt64, Column: pointlog.FieldPoints},
			pointlog.FieldAfter:        {Type: field.TypeInt64, Column: pointlog.FieldAfter},
			pointlog.FieldReason:       {Type: field.TypeString, Column: pointlog.FieldReason},
			pointlog.FieldAttach:       {Type: field.TypeJSON, Column: pointlog.FieldAttach},
		},
	}
	graph.Nodes[41] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionachievement.Table,
			Columns: promotionachievement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionachievement.FieldID,
			},
		},
		Type: "PromotionAchievement",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionachievement.FieldCreatedAt:    {Type: field.TypeTime, Column: promotionachievement.FieldCreatedAt},
			promotionachievement.FieldUpdatedAt:    {Type: field.TypeTime, Column: promotionachievement.FieldUpdatedAt},
			promotionachievement.FieldDeletedAt:    {Type: field.TypeTime, Column: promotionachievement.FieldDeletedAt},
			promotionachievement.FieldCreator:      {Type: field.TypeJSON, Column: promotionachievement.FieldCreator},
			promotionachievement.FieldLastModifier: {Type: field.TypeJSON, Column: promotionachievement.FieldLastModifier},
			promotionachievement.FieldRemark:       {Type: field.TypeString, Column: promotionachievement.FieldRemark},
			promotionachievement.FieldName:         {Type: field.TypeString, Column: promotionachievement.FieldName},
			promotionachievement.FieldType:         {Type: field.TypeUint8, Column: promotionachievement.FieldType},
			promotionachievement.FieldIcon:         {Type: field.TypeString, Column: promotionachievement.FieldIcon},
			promotionachievement.FieldCondition:    {Type: field.TypeUint64, Column: promotionachievement.FieldCondition},
		},
	}
	graph.Nodes[42] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionbankcard.Table,
			Columns: promotionbankcard.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionbankcard.FieldID,
			},
		},
		Type: "PromotionBankCard",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionbankcard.FieldCreatedAt:    {Type: field.TypeTime, Column: promotionbankcard.FieldCreatedAt},
			promotionbankcard.FieldUpdatedAt:    {Type: field.TypeTime, Column: promotionbankcard.FieldUpdatedAt},
			promotionbankcard.FieldDeletedAt:    {Type: field.TypeTime, Column: promotionbankcard.FieldDeletedAt},
			promotionbankcard.FieldCreator:      {Type: field.TypeJSON, Column: promotionbankcard.FieldCreator},
			promotionbankcard.FieldLastModifier: {Type: field.TypeJSON, Column: promotionbankcard.FieldLastModifier},
			promotionbankcard.FieldRemark:       {Type: field.TypeString, Column: promotionbankcard.FieldRemark},
			promotionbankcard.FieldMemberID:     {Type: field.TypeUint64, Column: promotionbankcard.FieldMemberID},
			promotionbankcard.FieldCardNo:       {Type: field.TypeString, Column: promotionbankcard.FieldCardNo},
			promotionbankcard.FieldBank:         {Type: field.TypeString, Column: promotionbankcard.FieldBank},
			promotionbankcard.FieldIsDefault:    {Type: field.TypeBool, Column: promotionbankcard.FieldIsDefault},
			promotionbankcard.FieldBankLogoURL:  {Type: field.TypeString, Column: promotionbankcard.FieldBankLogoURL},
			promotionbankcard.FieldProvince:     {Type: field.TypeString, Column: promotionbankcard.FieldProvince},
			promotionbankcard.FieldCity:         {Type: field.TypeString, Column: promotionbankcard.FieldCity},
		},
	}
	graph.Nodes[43] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotioncommission.Table,
			Columns: promotioncommission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotioncommission.FieldID,
			},
		},
		Type: "PromotionCommission",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotioncommission.FieldCreatedAt:    {Type: field.TypeTime, Column: promotioncommission.FieldCreatedAt},
			promotioncommission.FieldUpdatedAt:    {Type: field.TypeTime, Column: promotioncommission.FieldUpdatedAt},
			promotioncommission.FieldDeletedAt:    {Type: field.TypeTime, Column: promotioncommission.FieldDeletedAt},
			promotioncommission.FieldCreator:      {Type: field.TypeJSON, Column: promotioncommission.FieldCreator},
			promotioncommission.FieldLastModifier: {Type: field.TypeJSON, Column: promotioncommission.FieldLastModifier},
			promotioncommission.FieldRemark:       {Type: field.TypeString, Column: promotioncommission.FieldRemark},
			promotioncommission.FieldMemberID:     {Type: field.TypeUint64, Column: promotioncommission.FieldMemberID},
			promotioncommission.FieldType:         {Type: field.TypeUint8, Column: promotioncommission.FieldType},
			promotioncommission.FieldName:         {Type: field.TypeString, Column: promotioncommission.FieldName},
			promotioncommission.FieldRule:         {Type: field.TypeJSON, Column: promotioncommission.FieldRule},
			promotioncommission.FieldEnable:       {Type: field.TypeBool, Column: promotioncommission.FieldEnable},
			promotioncommission.FieldAmountSum:    {Type: field.TypeFloat64, Column: promotioncommission.FieldAmountSum},
			promotioncommission.FieldDesc:         {Type: field.TypeString, Column: promotioncommission.FieldDesc},
			promotioncommission.FieldHistoryID:    {Type: field.TypeJSON, Column: promotioncommission.FieldHistoryID},
			promotioncommission.FieldStartAt:      {Type: field.TypeTime, Column: promotioncommission.FieldStartAt},
			promotioncommission.FieldEndAt:        {Type: field.TypeTime, Column: promotioncommission.FieldEndAt},
		},
	}
	graph.Nodes[44] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionearnings.Table,
			Columns: promotionearnings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionearnings.FieldID,
			},
		},
		Type: "PromotionEarnings",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionearnings.FieldCreatedAt:         {Type: field.TypeTime, Column: promotionearnings.FieldCreatedAt},
			promotionearnings.FieldUpdatedAt:         {Type: field.TypeTime, Column: promotionearnings.FieldUpdatedAt},
			promotionearnings.FieldDeletedAt:         {Type: field.TypeTime, Column: promotionearnings.FieldDeletedAt},
			promotionearnings.FieldCreator:           {Type: field.TypeJSON, Column: promotionearnings.FieldCreator},
			promotionearnings.FieldLastModifier:      {Type: field.TypeJSON, Column: promotionearnings.FieldLastModifier},
			promotionearnings.FieldRemark:            {Type: field.TypeString, Column: promotionearnings.FieldRemark},
			promotionearnings.FieldCommissionID:      {Type: field.TypeUint64, Column: promotionearnings.FieldCommissionID},
			promotionearnings.FieldMemberID:          {Type: field.TypeUint64, Column: promotionearnings.FieldMemberID},
			promotionearnings.FieldRiderID:           {Type: field.TypeUint64, Column: promotionearnings.FieldRiderID},
			promotionearnings.FieldStatus:            {Type: field.TypeUint8, Column: promotionearnings.FieldStatus},
			promotionearnings.FieldAmount:            {Type: field.TypeFloat64, Column: promotionearnings.FieldAmount},
			promotionearnings.FieldCommissionRuleKey: {Type: field.TypeString, Column: promotionearnings.FieldCommissionRuleKey},
		},
	}
	graph.Nodes[45] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotiongrowth.Table,
			Columns: promotiongrowth.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotiongrowth.FieldID,
			},
		},
		Type: "PromotionGrowth",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotiongrowth.FieldCreatedAt:   {Type: field.TypeTime, Column: promotiongrowth.FieldCreatedAt},
			promotiongrowth.FieldUpdatedAt:   {Type: field.TypeTime, Column: promotiongrowth.FieldUpdatedAt},
			promotiongrowth.FieldDeletedAt:   {Type: field.TypeTime, Column: promotiongrowth.FieldDeletedAt},
			promotiongrowth.FieldMemberID:    {Type: field.TypeUint64, Column: promotiongrowth.FieldMemberID},
			promotiongrowth.FieldTaskID:      {Type: field.TypeUint64, Column: promotiongrowth.FieldTaskID},
			promotiongrowth.FieldRiderID:     {Type: field.TypeUint64, Column: promotiongrowth.FieldRiderID},
			promotiongrowth.FieldGrowthValue: {Type: field.TypeUint64, Column: promotiongrowth.FieldGrowthValue},
		},
	}
	graph.Nodes[46] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionlevel.Table,
			Columns: promotionlevel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionlevel.FieldID,
			},
		},
		Type: "PromotionLevel",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionlevel.FieldCreatedAt:       {Type: field.TypeTime, Column: promotionlevel.FieldCreatedAt},
			promotionlevel.FieldUpdatedAt:       {Type: field.TypeTime, Column: promotionlevel.FieldUpdatedAt},
			promotionlevel.FieldDeletedAt:       {Type: field.TypeTime, Column: promotionlevel.FieldDeletedAt},
			promotionlevel.FieldCreator:         {Type: field.TypeJSON, Column: promotionlevel.FieldCreator},
			promotionlevel.FieldLastModifier:    {Type: field.TypeJSON, Column: promotionlevel.FieldLastModifier},
			promotionlevel.FieldRemark:          {Type: field.TypeString, Column: promotionlevel.FieldRemark},
			promotionlevel.FieldLevel:           {Type: field.TypeUint64, Column: promotionlevel.FieldLevel},
			promotionlevel.FieldGrowthValue:     {Type: field.TypeUint64, Column: promotionlevel.FieldGrowthValue},
			promotionlevel.FieldCommissionRatio: {Type: field.TypeFloat64, Column: promotionlevel.FieldCommissionRatio},
		},
	}
	graph.Nodes[47] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionleveltask.Table,
			Columns: promotionleveltask.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionleveltask.FieldID,
			},
		},
		Type: "PromotionLevelTask",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionleveltask.FieldCreatedAt:    {Type: field.TypeTime, Column: promotionleveltask.FieldCreatedAt},
			promotionleveltask.FieldUpdatedAt:    {Type: field.TypeTime, Column: promotionleveltask.FieldUpdatedAt},
			promotionleveltask.FieldDeletedAt:    {Type: field.TypeTime, Column: promotionleveltask.FieldDeletedAt},
			promotionleveltask.FieldCreator:      {Type: field.TypeJSON, Column: promotionleveltask.FieldCreator},
			promotionleveltask.FieldLastModifier: {Type: field.TypeJSON, Column: promotionleveltask.FieldLastModifier},
			promotionleveltask.FieldRemark:       {Type: field.TypeString, Column: promotionleveltask.FieldRemark},
			promotionleveltask.FieldName:         {Type: field.TypeString, Column: promotionleveltask.FieldName},
			promotionleveltask.FieldDescription:  {Type: field.TypeString, Column: promotionleveltask.FieldDescription},
			promotionleveltask.FieldType:         {Type: field.TypeUint8, Column: promotionleveltask.FieldType},
			promotionleveltask.FieldGrowthValue:  {Type: field.TypeUint64, Column: promotionleveltask.FieldGrowthValue},
			promotionleveltask.FieldKey:          {Type: field.TypeString, Column: promotionleveltask.FieldKey},
		},
	}
	graph.Nodes[48] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionmember.Table,
			Columns: promotionmember.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionmember.FieldID,
			},
		},
		Type: "PromotionMember",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionmember.FieldCreatedAt:          {Type: field.TypeTime, Column: promotionmember.FieldCreatedAt},
			promotionmember.FieldUpdatedAt:          {Type: field.TypeTime, Column: promotionmember.FieldUpdatedAt},
			promotionmember.FieldDeletedAt:          {Type: field.TypeTime, Column: promotionmember.FieldDeletedAt},
			promotionmember.FieldCreator:            {Type: field.TypeJSON, Column: promotionmember.FieldCreator},
			promotionmember.FieldLastModifier:       {Type: field.TypeJSON, Column: promotionmember.FieldLastModifier},
			promotionmember.FieldRemark:             {Type: field.TypeString, Column: promotionmember.FieldRemark},
			promotionmember.FieldRiderID:            {Type: field.TypeUint64, Column: promotionmember.FieldRiderID},
			promotionmember.FieldLevelID:            {Type: field.TypeUint64, Column: promotionmember.FieldLevelID},
			promotionmember.FieldCommissionID:       {Type: field.TypeUint64, Column: promotionmember.FieldCommissionID},
			promotionmember.FieldPhone:              {Type: field.TypeString, Column: promotionmember.FieldPhone},
			promotionmember.FieldName:               {Type: field.TypeString, Column: promotionmember.FieldName},
			promotionmember.FieldBalance:            {Type: field.TypeFloat64, Column: promotionmember.FieldBalance},
			promotionmember.FieldFrozen:             {Type: field.TypeFloat64, Column: promotionmember.FieldFrozen},
			promotionmember.FieldTotalGrowthValue:   {Type: field.TypeUint64, Column: promotionmember.FieldTotalGrowthValue},
			promotionmember.FieldCurrentGrowthValue: {Type: field.TypeUint64, Column: promotionmember.FieldCurrentGrowthValue},
			promotionmember.FieldEnable:             {Type: field.TypeBool, Column: promotionmember.FieldEnable},
			promotionmember.FieldPersonID:           {Type: field.TypeUint64, Column: promotionmember.FieldPersonID},
			promotionmember.FieldAvatarURL:          {Type: field.TypeString, Column: promotionmember.FieldAvatarURL},
		},
	}
	graph.Nodes[49] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionperson.Table,
			Columns: promotionperson.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionperson.FieldID,
			},
		},
		Type: "PromotionPerson",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionperson.FieldCreatedAt:    {Type: field.TypeTime, Column: promotionperson.FieldCreatedAt},
			promotionperson.FieldUpdatedAt:    {Type: field.TypeTime, Column: promotionperson.FieldUpdatedAt},
			promotionperson.FieldDeletedAt:    {Type: field.TypeTime, Column: promotionperson.FieldDeletedAt},
			promotionperson.FieldCreator:      {Type: field.TypeJSON, Column: promotionperson.FieldCreator},
			promotionperson.FieldLastModifier: {Type: field.TypeJSON, Column: promotionperson.FieldLastModifier},
			promotionperson.FieldRemark:       {Type: field.TypeString, Column: promotionperson.FieldRemark},
			promotionperson.FieldStatus:       {Type: field.TypeUint8, Column: promotionperson.FieldStatus},
			promotionperson.FieldName:         {Type: field.TypeString, Column: promotionperson.FieldName},
			promotionperson.FieldIDCardNumber: {Type: field.TypeString, Column: promotionperson.FieldIDCardNumber},
			promotionperson.FieldAddress:      {Type: field.TypeString, Column: promotionperson.FieldAddress},
		},
	}
	graph.Nodes[50] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionprivilege.Table,
			Columns: promotionprivilege.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionprivilege.FieldID,
			},
		},
		Type: "PromotionPrivilege",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionprivilege.FieldCreatedAt:    {Type: field.TypeTime, Column: promotionprivilege.FieldCreatedAt},
			promotionprivilege.FieldUpdatedAt:    {Type: field.TypeTime, Column: promotionprivilege.FieldUpdatedAt},
			promotionprivilege.FieldDeletedAt:    {Type: field.TypeTime, Column: promotionprivilege.FieldDeletedAt},
			promotionprivilege.FieldCreator:      {Type: field.TypeJSON, Column: promotionprivilege.FieldCreator},
			promotionprivilege.FieldLastModifier: {Type: field.TypeJSON, Column: promotionprivilege.FieldLastModifier},
			promotionprivilege.FieldRemark:       {Type: field.TypeString, Column: promotionprivilege.FieldRemark},
			promotionprivilege.FieldType:         {Type: field.TypeUint8, Column: promotionprivilege.FieldType},
			promotionprivilege.FieldName:         {Type: field.TypeString, Column: promotionprivilege.FieldName},
			promotionprivilege.FieldDescription:  {Type: field.TypeString, Column: promotionprivilege.FieldDescription},
			promotionprivilege.FieldValue:        {Type: field.TypeUint64, Column: promotionprivilege.FieldValue},
		},
	}
	graph.Nodes[51] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionreferrals.Table,
			Columns: promotionreferrals.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionreferrals.FieldID,
			},
		},
		Type: "PromotionReferrals",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionreferrals.FieldCreatedAt:         {Type: field.TypeTime, Column: promotionreferrals.FieldCreatedAt},
			promotionreferrals.FieldUpdatedAt:         {Type: field.TypeTime, Column: promotionreferrals.FieldUpdatedAt},
			promotionreferrals.FieldDeletedAt:         {Type: field.TypeTime, Column: promotionreferrals.FieldDeletedAt},
			promotionreferrals.FieldCreator:           {Type: field.TypeJSON, Column: promotionreferrals.FieldCreator},
			promotionreferrals.FieldLastModifier:      {Type: field.TypeJSON, Column: promotionreferrals.FieldLastModifier},
			promotionreferrals.FieldRemark:            {Type: field.TypeString, Column: promotionreferrals.FieldRemark},
			promotionreferrals.FieldReferringMemberID: {Type: field.TypeUint64, Column: promotionreferrals.FieldReferringMemberID},
			promotionreferrals.FieldReferredMemberID:  {Type: field.TypeUint64, Column: promotionreferrals.FieldReferredMemberID},
			promotionreferrals.FieldRiderID:           {Type: field.TypeUint64, Column: promotionreferrals.FieldRiderID},
			promotionreferrals.FieldParentID:          {Type: field.TypeUint64, Column: promotionreferrals.FieldParentID},
		},
	}
	graph.Nodes[52] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionsetting.Table,
			Columns: promotionsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionsetting.FieldID,
			},
		},
		Type: "PromotionSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionsetting.FieldCreatedAt:    {Type: field.TypeTime, Column: promotionsetting.FieldCreatedAt},
			promotionsetting.FieldUpdatedAt:    {Type: field.TypeTime, Column: promotionsetting.FieldUpdatedAt},
			promotionsetting.FieldDeletedAt:    {Type: field.TypeTime, Column: promotionsetting.FieldDeletedAt},
			promotionsetting.FieldCreator:      {Type: field.TypeJSON, Column: promotionsetting.FieldCreator},
			promotionsetting.FieldLastModifier: {Type: field.TypeJSON, Column: promotionsetting.FieldLastModifier},
			promotionsetting.FieldRemark:       {Type: field.TypeString, Column: promotionsetting.FieldRemark},
			promotionsetting.FieldTitle:        {Type: field.TypeString, Column: promotionsetting.FieldTitle},
			promotionsetting.FieldContent:      {Type: field.TypeString, Column: promotionsetting.FieldContent},
			promotionsetting.FieldKey:          {Type: field.TypeString, Column: promotionsetting.FieldKey},
		},
	}
	graph.Nodes[53] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   promotionwithdrawal.Table,
			Columns: promotionwithdrawal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: promotionwithdrawal.FieldID,
			},
		},
		Type: "PromotionWithdrawal",
		Fields: map[string]*sqlgraph.FieldSpec{
			promotionwithdrawal.FieldCreatedAt:    {Type: field.TypeTime, Column: promotionwithdrawal.FieldCreatedAt},
			promotionwithdrawal.FieldUpdatedAt:    {Type: field.TypeTime, Column: promotionwithdrawal.FieldUpdatedAt},
			promotionwithdrawal.FieldDeletedAt:    {Type: field.TypeTime, Column: promotionwithdrawal.FieldDeletedAt},
			promotionwithdrawal.FieldCreator:      {Type: field.TypeJSON, Column: promotionwithdrawal.FieldCreator},
			promotionwithdrawal.FieldLastModifier: {Type: field.TypeJSON, Column: promotionwithdrawal.FieldLastModifier},
			promotionwithdrawal.FieldRemark:       {Type: field.TypeString, Column: promotionwithdrawal.FieldRemark},
			promotionwithdrawal.FieldMemberID:     {Type: field.TypeUint64, Column: promotionwithdrawal.FieldMemberID},
			promotionwithdrawal.FieldStatus:       {Type: field.TypeUint8, Column: promotionwithdrawal.FieldStatus},
			promotionwithdrawal.FieldApplyAmount:  {Type: field.TypeFloat64, Column: promotionwithdrawal.FieldApplyAmount},
			promotionwithdrawal.FieldAmount:       {Type: field.TypeFloat64, Column: promotionwithdrawal.FieldAmount},
			promotionwithdrawal.FieldFee:          {Type: field.TypeFloat64, Column: promotionwithdrawal.FieldFee},
			promotionwithdrawal.FieldMethod:       {Type: field.TypeUint8, Column: promotionwithdrawal.FieldMethod},
			promotionwithdrawal.FieldAccountID:    {Type: field.TypeUint64, Column: promotionwithdrawal.FieldAccountID},
			promotionwithdrawal.FieldApplyTime:    {Type: field.TypeTime, Column: promotionwithdrawal.FieldApplyTime},
			promotionwithdrawal.FieldReviewTime:   {Type: field.TypeTime, Column: promotionwithdrawal.FieldReviewTime},
		},
	}
	graph.Nodes[54] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   reserve.Table,
			Columns: reserve.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: reserve.FieldID,
			},
		},
		Type: "Reserve",
		Fields: map[string]*sqlgraph.FieldSpec{
			reserve.FieldCreatedAt:    {Type: field.TypeTime, Column: reserve.FieldCreatedAt},
			reserve.FieldUpdatedAt:    {Type: field.TypeTime, Column: reserve.FieldUpdatedAt},
			reserve.FieldDeletedAt:    {Type: field.TypeTime, Column: reserve.FieldDeletedAt},
			reserve.FieldCreator:      {Type: field.TypeJSON, Column: reserve.FieldCreator},
			reserve.FieldLastModifier: {Type: field.TypeJSON, Column: reserve.FieldLastModifier},
			reserve.FieldRemark:       {Type: field.TypeString, Column: reserve.FieldRemark},
			reserve.FieldCabinetID:    {Type: field.TypeUint64, Column: reserve.FieldCabinetID},
			reserve.FieldRiderID:      {Type: field.TypeUint64, Column: reserve.FieldRiderID},
			reserve.FieldCityID:       {Type: field.TypeUint64, Column: reserve.FieldCityID},
			reserve.FieldBusinessID:   {Type: field.TypeUint64, Column: reserve.FieldBusinessID},
			reserve.FieldStatus:       {Type: field.TypeUint8, Column: reserve.FieldStatus},
			reserve.FieldType:         {Type: field.TypeString, Column: reserve.FieldType},
		},
	}
	graph.Nodes[55] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
		Type: "Rider",
		Fields: map[string]*sqlgraph.FieldSpec{
			rider.FieldCreatedAt:         {Type: field.TypeTime, Column: rider.FieldCreatedAt},
			rider.FieldUpdatedAt:         {Type: field.TypeTime, Column: rider.FieldUpdatedAt},
			rider.FieldDeletedAt:         {Type: field.TypeTime, Column: rider.FieldDeletedAt},
			rider.FieldCreator:           {Type: field.TypeJSON, Column: rider.FieldCreator},
			rider.FieldLastModifier:      {Type: field.TypeJSON, Column: rider.FieldLastModifier},
			rider.FieldRemark:            {Type: field.TypeString, Column: rider.FieldRemark},
			rider.FieldStationID:         {Type: field.TypeUint64, Column: rider.FieldStationID},
			rider.FieldPersonID:          {Type: field.TypeUint64, Column: rider.FieldPersonID},
			rider.FieldName:              {Type: field.TypeString, Column: rider.FieldName},
			rider.FieldIDCardNumber:      {Type: field.TypeString, Column: rider.FieldIDCardNumber},
			rider.FieldEnterpriseID:      {Type: field.TypeUint64, Column: rider.FieldEnterpriseID},
			rider.FieldPhone:             {Type: field.TypeString, Column: rider.FieldPhone},
			rider.FieldContact:           {Type: field.TypeJSON, Column: rider.FieldContact},
			rider.FieldDeviceType:        {Type: field.TypeUint8, Column: rider.FieldDeviceType},
			rider.FieldLastDevice:        {Type: field.TypeString, Column: rider.FieldLastDevice},
			rider.FieldIsNewDevice:       {Type: field.TypeBool, Column: rider.FieldIsNewDevice},
			rider.FieldLastFace:          {Type: field.TypeString, Column: rider.FieldLastFace},
			rider.FieldPushID:            {Type: field.TypeString, Column: rider.FieldPushID},
			rider.FieldLastSigninAt:      {Type: field.TypeTime, Column: rider.FieldLastSigninAt},
			rider.FieldBlocked:           {Type: field.TypeBool, Column: rider.FieldBlocked},
			rider.FieldPoints:            {Type: field.TypeInt64, Column: rider.FieldPoints},
			rider.FieldExchangeLimit:     {Type: field.TypeJSON, Column: rider.FieldExchangeLimit},
			rider.FieldExchangeFrequency: {Type: field.TypeJSON, Column: rider.FieldExchangeFrequency},
			rider.FieldJoinEnterpriseAt:  {Type: field.TypeTime, Column: rider.FieldJoinEnterpriseAt},
		},
	}
	graph.Nodes[56] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   riderfollowup.Table,
			Columns: riderfollowup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: riderfollowup.FieldID,
			},
		},
		Type: "RiderFollowUp",
		Fields: map[string]*sqlgraph.FieldSpec{
			riderfollowup.FieldCreatedAt:    {Type: field.TypeTime, Column: riderfollowup.FieldCreatedAt},
			riderfollowup.FieldUpdatedAt:    {Type: field.TypeTime, Column: riderfollowup.FieldUpdatedAt},
			riderfollowup.FieldDeletedAt:    {Type: field.TypeTime, Column: riderfollowup.FieldDeletedAt},
			riderfollowup.FieldCreator:      {Type: field.TypeJSON, Column: riderfollowup.FieldCreator},
			riderfollowup.FieldLastModifier: {Type: field.TypeJSON, Column: riderfollowup.FieldLastModifier},
			riderfollowup.FieldRemark:       {Type: field.TypeString, Column: riderfollowup.FieldRemark},
			riderfollowup.FieldManagerID:    {Type: field.TypeUint64, Column: riderfollowup.FieldManagerID},
			riderfollowup.FieldRiderID:      {Type: field.TypeUint64, Column: riderfollowup.FieldRiderID},
		},
	}
	graph.Nodes[57] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldName:        {Type: field.TypeString, Column: role.FieldName},
			role.FieldPermissions: {Type: field.TypeJSON, Column: role.FieldPermissions},
			role.FieldBuildin:     {Type: field.TypeBool, Column: role.FieldBuildin},
			role.FieldSuper:       {Type: field.TypeBool, Column: role.FieldSuper},
			role.FieldCreatedAt:   {Type: field.TypeTime, Column: role.FieldCreatedAt},
		},
	}
	graph.Nodes[58] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   setting.Table,
			Columns: setting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: setting.FieldID,
			},
		},
		Type: "Setting",
		Fields: map[string]*sqlgraph.FieldSpec{
			setting.FieldCreatedAt:    {Type: field.TypeTime, Column: setting.FieldCreatedAt},
			setting.FieldUpdatedAt:    {Type: field.TypeTime, Column: setting.FieldUpdatedAt},
			setting.FieldCreator:      {Type: field.TypeJSON, Column: setting.FieldCreator},
			setting.FieldLastModifier: {Type: field.TypeJSON, Column: setting.FieldLastModifier},
			setting.FieldRemark:       {Type: field.TypeString, Column: setting.FieldRemark},
			setting.FieldKey:          {Type: field.TypeString, Column: setting.FieldKey},
			setting.FieldDesc:         {Type: field.TypeString, Column: setting.FieldDesc},
			setting.FieldContent:      {Type: field.TypeString, Column: setting.FieldContent},
		},
	}
	graph.Nodes[59] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stock.FieldID,
			},
		},
		Type: "Stock",
		Fields: map[string]*sqlgraph.FieldSpec{
			stock.FieldCreatedAt:    {Type: field.TypeTime, Column: stock.FieldCreatedAt},
			stock.FieldUpdatedAt:    {Type: field.TypeTime, Column: stock.FieldUpdatedAt},
			stock.FieldCreator:      {Type: field.TypeJSON, Column: stock.FieldCreator},
			stock.FieldLastModifier: {Type: field.TypeJSON, Column: stock.FieldLastModifier},
			stock.FieldRemark:       {Type: field.TypeString, Column: stock.FieldRemark},
			stock.FieldCityID:       {Type: field.TypeUint64, Column: stock.FieldCityID},
			stock.FieldSubscribeID:  {Type: field.TypeUint64, Column: stock.FieldSubscribeID},
			stock.FieldEbikeID:      {Type: field.TypeUint64, Column: stock.FieldEbikeID},
			stock.FieldBrandID:      {Type: field.TypeUint64, Column: stock.FieldBrandID},
			stock.FieldBatteryID:    {Type: field.TypeUint64, Column: stock.FieldBatteryID},
			stock.FieldAgentID:      {Type: field.TypeUint64, Column: stock.FieldAgentID},
			stock.FieldParentID:     {Type: field.TypeUint64, Column: stock.FieldParentID},
			stock.FieldSn:           {Type: field.TypeString, Column: stock.FieldSn},
			stock.FieldType:         {Type: field.TypeUint8, Column: stock.FieldType},
			stock.FieldStoreID:      {Type: field.TypeUint64, Column: stock.FieldStoreID},
			stock.FieldCabinetID:    {Type: field.TypeUint64, Column: stock.FieldCabinetID},
			stock.FieldRiderID:      {Type: field.TypeUint64, Column: stock.FieldRiderID},
			stock.FieldEmployeeID:   {Type: field.TypeUint64, Column: stock.FieldEmployeeID},
			stock.FieldEnterpriseID: {Type: field.TypeUint64, Column: stock.FieldEnterpriseID},
			stock.FieldStationID:    {Type: field.TypeUint64, Column: stock.FieldStationID},
			stock.FieldName:         {Type: field.TypeString, Column: stock.FieldName},
			stock.FieldModel:        {Type: field.TypeString, Column: stock.FieldModel},
			stock.FieldNum:          {Type: field.TypeInt, Column: stock.FieldNum},
			stock.FieldMaterial:     {Type: field.TypeEnum, Column: stock.FieldMaterial},
		},
	}
	graph.Nodes[60] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stocksummary.Table,
			Columns: stocksummary.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stocksummary.FieldID,
			},
		},
		Type: "StockSummary",
		Fields: map[string]*sqlgraph.FieldSpec{
			stocksummary.FieldEnterpriseID: {Type: field.TypeUint64, Column: stocksummary.FieldEnterpriseID},
			stocksummary.FieldStationID:    {Type: field.TypeUint64, Column: stocksummary.FieldStationID},
			stocksummary.FieldStoreID:      {Type: field.TypeUint64, Column: stocksummary.FieldStoreID},
			stocksummary.FieldRiderID:      {Type: field.TypeUint64, Column: stocksummary.FieldRiderID},
			stocksummary.FieldCabinetID:    {Type: field.TypeUint64, Column: stocksummary.FieldCabinetID},
			stocksummary.FieldDate:         {Type: field.TypeString, Column: stocksummary.FieldDate},
			stocksummary.FieldModel:        {Type: field.TypeString, Column: stocksummary.FieldModel},
			stocksummary.FieldNum:          {Type: field.TypeInt, Column: stocksummary.FieldNum},
			stocksummary.FieldTodayNum:     {Type: field.TypeInt, Column: stocksummary.FieldTodayNum},
			stocksummary.FieldOutboundNum:  {Type: field.TypeInt, Column: stocksummary.FieldOutboundNum},
			stocksummary.FieldInboundNum:   {Type: field.TypeInt, Column: stocksummary.FieldInboundNum},
			stocksummary.FieldInRiderNum:   {Type: field.TypeInt, Column: stocksummary.FieldInRiderNum},
			stocksummary.FieldMaterial:     {Type: field.TypeEnum, Column: stocksummary.FieldMaterial},
		},
	}
	graph.Nodes[61] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: store.FieldID,
			},
		},
		Type: "Store",
		Fields: map[string]*sqlgraph.FieldSpec{
			store.FieldCreatedAt:    {Type: field.TypeTime, Column: store.FieldCreatedAt},
			store.FieldUpdatedAt:    {Type: field.TypeTime, Column: store.FieldUpdatedAt},
			store.FieldDeletedAt:    {Type: field.TypeTime, Column: store.FieldDeletedAt},
			store.FieldCreator:      {Type: field.TypeJSON, Column: store.FieldCreator},
			store.FieldLastModifier: {Type: field.TypeJSON, Column: store.FieldLastModifier},
			store.FieldRemark:       {Type: field.TypeString, Column: store.FieldRemark},
			store.FieldCityID:       {Type: field.TypeUint64, Column: store.FieldCityID},
			store.FieldEmployeeID:   {Type: field.TypeUint64, Column: store.FieldEmployeeID},
			store.FieldBranchID:     {Type: field.TypeUint64, Column: store.FieldBranchID},
			store.FieldSn:           {Type: field.TypeString, Column: store.FieldSn},
			store.FieldName:         {Type: field.TypeString, Column: store.FieldName},
			store.FieldStatus:       {Type: field.TypeUint8, Column: store.FieldStatus},
			store.FieldLng:          {Type: field.TypeFloat64, Column: store.FieldLng},
			store.FieldLat:          {Type: field.TypeFloat64, Column: store.FieldLat},
			store.FieldAddress:      {Type: field.TypeString, Column: store.FieldAddress},
			store.FieldEbikeObtain:  {Type: field.TypeBool, Column: store.FieldEbikeObtain},
			store.FieldEbikeRepair:  {Type: field.TypeBool, Column: store.FieldEbikeRepair},
		},
	}
	graph.Nodes[62] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribe.Table,
			Columns: subscribe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribe.FieldID,
			},
		},
		Type: "Subscribe",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribe.FieldCreatedAt:         {Type: field.TypeTime, Column: subscribe.FieldCreatedAt},
			subscribe.FieldUpdatedAt:         {Type: field.TypeTime, Column: subscribe.FieldUpdatedAt},
			subscribe.FieldDeletedAt:         {Type: field.TypeTime, Column: subscribe.FieldDeletedAt},
			subscribe.FieldCreator:           {Type: field.TypeJSON, Column: subscribe.FieldCreator},
			subscribe.FieldLastModifier:      {Type: field.TypeJSON, Column: subscribe.FieldLastModifier},
			subscribe.FieldRemark:            {Type: field.TypeString, Column: subscribe.FieldRemark},
			subscribe.FieldPlanID:            {Type: field.TypeUint64, Column: subscribe.FieldPlanID},
			subscribe.FieldEmployeeID:        {Type: field.TypeUint64, Column: subscribe.FieldEmployeeID},
			subscribe.FieldCityID:            {Type: field.TypeUint64, Column: subscribe.FieldCityID},
			subscribe.FieldStationID:         {Type: field.TypeUint64, Column: subscribe.FieldStationID},
			subscribe.FieldStoreID:           {Type: field.TypeUint64, Column: subscribe.FieldStoreID},
			subscribe.FieldCabinetID:         {Type: field.TypeUint64, Column: subscribe.FieldCabinetID},
			subscribe.FieldBrandID:           {Type: field.TypeUint64, Column: subscribe.FieldBrandID},
			subscribe.FieldEbikeID:           {Type: field.TypeUint64, Column: subscribe.FieldEbikeID},
			subscribe.FieldRiderID:           {Type: field.TypeUint64, Column: subscribe.FieldRiderID},
			subscribe.FieldInitialOrderID:    {Type: field.TypeUint64, Column: subscribe.FieldInitialOrderID},
			subscribe.FieldEnterpriseID:      {Type: field.TypeUint64, Column: subscribe.FieldEnterpriseID},
			subscribe.FieldStatus:            {Type: field.TypeUint8, Column: subscribe.FieldStatus},
			subscribe.FieldType:              {Type: field.TypeUint, Column: subscribe.FieldType},
			subscribe.FieldModel:             {Type: field.TypeString, Column: subscribe.FieldModel},
			subscribe.FieldInitialDays:       {Type: field.TypeInt, Column: subscribe.FieldInitialDays},
			subscribe.FieldAlterDays:         {Type: field.TypeInt, Column: subscribe.FieldAlterDays},
			subscribe.FieldPauseDays:         {Type: field.TypeInt, Column: subscribe.FieldPauseDays},
			subscribe.FieldSuspendDays:       {Type: field.TypeInt, Column: subscribe.FieldSuspendDays},
			subscribe.FieldRenewalDays:       {Type: field.TypeInt, Column: subscribe.FieldRenewalDays},
			subscribe.FieldOverdueDays:       {Type: field.TypeInt, Column: subscribe.FieldOverdueDays},
			subscribe.FieldRemaining:         {Type: field.TypeInt, Column: subscribe.FieldRemaining},
			subscribe.FieldPausedAt:          {Type: field.TypeTime, Column: subscribe.FieldPausedAt},
			subscribe.FieldSuspendAt:         {Type: field.TypeTime, Column: subscribe.FieldSuspendAt},
			subscribe.FieldStartAt:           {Type: field.TypeTime, Column: subscribe.FieldStartAt},
			subscribe.FieldEndAt:             {Type: field.TypeTime, Column: subscribe.FieldEndAt},
			subscribe.FieldRefundAt:          {Type: field.TypeTime, Column: subscribe.FieldRefundAt},
			subscribe.FieldUnsubscribeReason: {Type: field.TypeString, Column: subscribe.FieldUnsubscribeReason},
			subscribe.FieldLastBillDate:      {Type: field.TypeTime, Column: subscribe.FieldLastBillDate},
			subscribe.FieldPauseOverdue:      {Type: field.TypeBool, Column: subscribe.FieldPauseOverdue},
			subscribe.FieldAgentEndAt:        {Type: field.TypeTime, Column: subscribe.FieldAgentEndAt},
			subscribe.FieldFormula:           {Type: field.TypeString, Column: subscribe.FieldFormula},
			subscribe.FieldNeedContract:      {Type: field.TypeBool, Column: subscribe.FieldNeedContract},
			subscribe.FieldIntelligent:       {Type: field.TypeBool, Column: subscribe.FieldIntelligent},
		},
	}
	graph.Nodes[63] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribealter.Table,
			Columns: subscribealter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribealter.FieldID,
			},
		},
		Type: "SubscribeAlter",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribealter.FieldCreatedAt:      {Type: field.TypeTime, Column: subscribealter.FieldCreatedAt},
			subscribealter.FieldUpdatedAt:      {Type: field.TypeTime, Column: subscribealter.FieldUpdatedAt},
			subscribealter.FieldCreator:        {Type: field.TypeJSON, Column: subscribealter.FieldCreator},
			subscribealter.FieldLastModifier:   {Type: field.TypeJSON, Column: subscribealter.FieldLastModifier},
			subscribealter.FieldRemark:         {Type: field.TypeString, Column: subscribealter.FieldRemark},
			subscribealter.FieldRiderID:        {Type: field.TypeUint64, Column: subscribealter.FieldRiderID},
			subscribealter.FieldManagerID:      {Type: field.TypeUint64, Column: subscribealter.FieldManagerID},
			subscribealter.FieldEnterpriseID:   {Type: field.TypeUint64, Column: subscribealter.FieldEnterpriseID},
			subscribealter.FieldAgentID:        {Type: field.TypeUint64, Column: subscribealter.FieldAgentID},
			subscribealter.FieldSubscribeID:    {Type: field.TypeUint64, Column: subscribealter.FieldSubscribeID},
			subscribealter.FieldDays:           {Type: field.TypeInt, Column: subscribealter.FieldDays},
			subscribealter.FieldStatus:         {Type: field.TypeInt, Column: subscribealter.FieldStatus},
			subscribealter.FieldReviewTime:     {Type: field.TypeTime, Column: subscribealter.FieldReviewTime},
			subscribealter.FieldSubscribeEndAt: {Type: field.TypeTime, Column: subscribealter.FieldSubscribeEndAt},
		},
	}
	graph.Nodes[64] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribepause.Table,
			Columns: subscribepause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribepause.FieldID,
			},
		},
		Type: "SubscribePause",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribepause.FieldCreatedAt:     {Type: field.TypeTime, Column: subscribepause.FieldCreatedAt},
			subscribepause.FieldUpdatedAt:     {Type: field.TypeTime, Column: subscribepause.FieldUpdatedAt},
			subscribepause.FieldDeletedAt:     {Type: field.TypeTime, Column: subscribepause.FieldDeletedAt},
			subscribepause.FieldCreator:       {Type: field.TypeJSON, Column: subscribepause.FieldCreator},
			subscribepause.FieldLastModifier:  {Type: field.TypeJSON, Column: subscribepause.FieldLastModifier},
			subscribepause.FieldRemark:        {Type: field.TypeString, Column: subscribepause.FieldRemark},
			subscribepause.FieldRiderID:       {Type: field.TypeUint64, Column: subscribepause.FieldRiderID},
			subscribepause.FieldEmployeeID:    {Type: field.TypeUint64, Column: subscribepause.FieldEmployeeID},
			subscribepause.FieldCityID:        {Type: field.TypeUint64, Column: subscribepause.FieldCityID},
			subscribepause.FieldStoreID:       {Type: field.TypeUint64, Column: subscribepause.FieldStoreID},
			subscribepause.FieldEndStoreID:    {Type: field.TypeUint64, Column: subscribepause.FieldEndStoreID},
			subscribepause.FieldCabinetID:     {Type: field.TypeUint64, Column: subscribepause.FieldCabinetID},
			subscribepause.FieldEndCabinetID:  {Type: field.TypeUint64, Column: subscribepause.FieldEndCabinetID},
			subscribepause.FieldSubscribeID:   {Type: field.TypeUint64, Column: subscribepause.FieldSubscribeID},
			subscribepause.FieldStartAt:       {Type: field.TypeTime, Column: subscribepause.FieldStartAt},
			subscribepause.FieldEndAt:         {Type: field.TypeTime, Column: subscribepause.FieldEndAt},
			subscribepause.FieldDays:          {Type: field.TypeInt, Column: subscribepause.FieldDays},
			subscribepause.FieldEndEmployeeID: {Type: field.TypeUint64, Column: subscribepause.FieldEndEmployeeID},
			subscribepause.FieldOverdueDays:   {Type: field.TypeInt, Column: subscribepause.FieldOverdueDays},
			subscribepause.FieldEndModifier:   {Type: field.TypeJSON, Column: subscribepause.FieldEndModifier},
			subscribepause.FieldPauseOverdue:  {Type: field.TypeBool, Column: subscribepause.FieldPauseOverdue},
			subscribepause.FieldSuspendDays:   {Type: field.TypeInt, Column: subscribepause.FieldSuspendDays},
		},
	}
	graph.Nodes[65] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribereminder.Table,
			Columns: subscribereminder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribereminder.FieldID,
			},
		},
		Type: "SubscribeReminder",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribereminder.FieldCreatedAt:   {Type: field.TypeTime, Column: subscribereminder.FieldCreatedAt},
			subscribereminder.FieldUpdatedAt:   {Type: field.TypeTime, Column: subscribereminder.FieldUpdatedAt},
			subscribereminder.FieldSubscribeID: {Type: field.TypeUint64, Column: subscribereminder.FieldSubscribeID},
			subscribereminder.FieldPlanID:      {Type: field.TypeUint64, Column: subscribereminder.FieldPlanID},
			subscribereminder.FieldRiderID:     {Type: field.TypeUint64, Column: subscribereminder.FieldRiderID},
			subscribereminder.FieldType:        {Type: field.TypeEnum, Column: subscribereminder.FieldType},
			subscribereminder.FieldPhone:       {Type: field.TypeString, Column: subscribereminder.FieldPhone},
			subscribereminder.FieldName:        {Type: field.TypeString, Column: subscribereminder.FieldName},
			subscribereminder.FieldSuccess:     {Type: field.TypeBool, Column: subscribereminder.FieldSuccess},
			subscribereminder.FieldDays:        {Type: field.TypeInt, Column: subscribereminder.FieldDays},
			subscribereminder.FieldPlanName:    {Type: field.TypeString, Column: subscribereminder.FieldPlanName},
			subscribereminder.FieldDate:        {Type: field.TypeString, Column: subscribereminder.FieldDate},
			subscribereminder.FieldFee:         {Type: field.TypeFloat64, Column: subscribereminder.FieldFee},
			subscribereminder.FieldFeeFormula:  {Type: field.TypeString, Column: subscribereminder.FieldFeeFormula},
		},
	}
	graph.Nodes[66] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribesuspend.Table,
			Columns: subscribesuspend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribesuspend.FieldID,
			},
		},
		Type: "SubscribeSuspend",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribesuspend.FieldCreator:      {Type: field.TypeJSON, Column: subscribesuspend.FieldCreator},
			subscribesuspend.FieldLastModifier: {Type: field.TypeJSON, Column: subscribesuspend.FieldLastModifier},
			subscribesuspend.FieldRemark:       {Type: field.TypeString, Column: subscribesuspend.FieldRemark},
			subscribesuspend.FieldCityID:       {Type: field.TypeUint64, Column: subscribesuspend.FieldCityID},
			subscribesuspend.FieldRiderID:      {Type: field.TypeUint64, Column: subscribesuspend.FieldRiderID},
			subscribesuspend.FieldSubscribeID:  {Type: field.TypeUint64, Column: subscribesuspend.FieldSubscribeID},
			subscribesuspend.FieldPauseID:      {Type: field.TypeUint64, Column: subscribesuspend.FieldPauseID},
			subscribesuspend.FieldDays:         {Type: field.TypeInt, Column: subscribesuspend.FieldDays},
			subscribesuspend.FieldStartAt:      {Type: field.TypeTime, Column: subscribesuspend.FieldStartAt},
			subscribesuspend.FieldEndAt:        {Type: field.TypeTime, Column: subscribesuspend.FieldEndAt},
			subscribesuspend.FieldEndReason:    {Type: field.TypeString, Column: subscribesuspend.FieldEndReason},
			subscribesuspend.FieldEndModifier:  {Type: field.TypeJSON, Column: subscribesuspend.FieldEndModifier},
		},
	}
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agent.EnterpriseTable,
			Columns: []string{agent.EnterpriseColumn},
			Bidi:    false,
		},
		"Agent",
		"Enterprise",
	)
	graph.MustAddE(
		"stations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.StationsTable,
			Columns: agent.StationsPrimaryKey,
			Bidi:    false,
		},
		"Agent",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.RiderTable,
			Columns: []string{allocate.RiderColumn},
			Bidi:    false,
		},
		"Allocate",
		"Rider",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.SubscribeTable,
			Columns: []string{allocate.SubscribeColumn},
			Bidi:    false,
		},
		"Allocate",
		"Subscribe",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EmployeeTable,
			Columns: []string{allocate.EmployeeColumn},
			Bidi:    false,
		},
		"Allocate",
		"Employee",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.CabinetTable,
			Columns: []string{allocate.CabinetColumn},
			Bidi:    false,
		},
		"Allocate",
		"Cabinet",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.StoreTable,
			Columns: []string{allocate.StoreColumn},
			Bidi:    false,
		},
		"Allocate",
		"Store",
	)
	graph.MustAddE(
		"brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.BrandTable,
			Columns: []string{allocate.BrandColumn},
			Bidi:    false,
		},
		"Allocate",
		"EbikeBrand",
	)
	graph.MustAddE(
		"battery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.BatteryTable,
			Columns: []string{allocate.BatteryColumn},
			Bidi:    false,
		},
		"Allocate",
		"Battery",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.StationTable,
			Columns: []string{allocate.StationColumn},
			Bidi:    false,
		},
		"Allocate",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"agent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.AgentTable,
			Columns: []string{allocate.AgentColumn},
			Bidi:    false,
		},
		"Allocate",
		"Agent",
	)
	graph.MustAddE(
		"contract",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   allocate.ContractTable,
			Columns: []string{allocate.ContractColumn},
			Bidi:    false,
		},
		"Allocate",
		"Contract",
	)
	graph.MustAddE(
		"ebike",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   allocate.EbikeTable,
			Columns: []string{allocate.EbikeColumn},
			Bidi:    false,
		},
		"Allocate",
		"Ebike",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.StoreTable,
			Columns: []string{assistance.StoreColumn},
			Bidi:    false,
		},
		"Assistance",
		"Store",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.RiderTable,
			Columns: []string{assistance.RiderColumn},
			Bidi:    false,
		},
		"Assistance",
		"Rider",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.SubscribeTable,
			Columns: []string{assistance.SubscribeColumn},
			Bidi:    false,
		},
		"Assistance",
		"Subscribe",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.CityTable,
			Columns: []string{assistance.CityColumn},
			Bidi:    false,
		},
		"Assistance",
		"City",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   assistance.OrderTable,
			Columns: []string{assistance.OrderColumn},
			Bidi:    false,
		},
		"Assistance",
		"Order",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assistance.EmployeeTable,
			Columns: []string{assistance.EmployeeColumn},
			Bidi:    false,
		},
		"Assistance",
		"Employee",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StoreTable,
			Columns: []string{attendance.StoreColumn},
			Bidi:    false,
		},
		"Attendance",
		"Store",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.EmployeeTable,
			Columns: []string{attendance.EmployeeColumn},
			Bidi:    false,
		},
		"Attendance",
		"Employee",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CityTable,
			Columns: []string{battery.CityColumn},
			Bidi:    false,
		},
		"Battery",
		"City",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   battery.RiderTable,
			Columns: []string{battery.RiderColumn},
			Bidi:    false,
		},
		"Battery",
		"Rider",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battery.CabinetTable,
			Columns: []string{battery.CabinetColumn},
			Bidi:    false,
		},
		"Battery",
		"Cabinet",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   battery.SubscribeTable,
			Columns: []string{battery.SubscribeColumn},
			Bidi:    false,
		},
		"Battery",
		"Subscribe",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battery.EnterpriseTable,
			Columns: []string{battery.EnterpriseColumn},
			Bidi:    false,
		},
		"Battery",
		"Enterprise",
	)
	graph.MustAddE(
		"flows",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   battery.FlowsTable,
			Columns: []string{battery.FlowsColumn},
			Bidi:    false,
		},
		"Battery",
		"BatteryFlow",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   battery.StationTable,
			Columns: []string{battery.StationColumn},
			Bidi:    false,
		},
		"Battery",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batteryflow.SubscribeTable,
			Columns: []string{batteryflow.SubscribeColumn},
			Bidi:    false,
		},
		"BatteryFlow",
		"Subscribe",
	)
	graph.MustAddE(
		"battery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.BatteryTable,
			Columns: []string{batteryflow.BatteryColumn},
			Bidi:    false,
		},
		"BatteryFlow",
		"Battery",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.CabinetTable,
			Columns: []string{batteryflow.CabinetColumn},
			Bidi:    false,
		},
		"BatteryFlow",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.RiderTable,
			Columns: []string{batteryflow.RiderColumn},
			Bidi:    false,
		},
		"BatteryFlow",
		"Rider",
	)
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
		},
		"BatteryModel",
		"Cabinet",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   branch.CityTable,
			Columns: []string{branch.CityColumn},
			Bidi:    false,
		},
		"Branch",
		"City",
	)
	graph.MustAddE(
		"contracts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
		},
		"Branch",
		"BranchContract",
	)
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
		},
		"Branch",
		"Cabinet",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
		},
		"Branch",
		"CabinetFault",
	)
	graph.MustAddE(
		"stores",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
		},
		"Branch",
		"Store",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
		},
		"BranchContract",
		"Branch",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RiderTable,
			Columns: []string{business.RiderColumn},
			Bidi:    false,
		},
		"Business",
		"Rider",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CityTable,
			Columns: []string{business.CityColumn},
			Bidi:    false,
		},
		"Business",
		"City",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.SubscribeTable,
			Columns: []string{business.SubscribeColumn},
			Bidi:    false,
		},
		"Business",
		"Subscribe",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EmployeeTable,
			Columns: []string{business.EmployeeColumn},
			Bidi:    false,
		},
		"Business",
		"Employee",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StoreTable,
			Columns: []string{business.StoreColumn},
			Bidi:    false,
		},
		"Business",
		"Store",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.PlanTable,
			Columns: []string{business.PlanColumn},
			Bidi:    false,
		},
		"Business",
		"Plan",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EnterpriseTable,
			Columns: []string{business.EnterpriseColumn},
			Bidi:    false,
		},
		"Business",
		"Enterprise",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StationTable,
			Columns: []string{business.StationColumn},
			Bidi:    false,
		},
		"Business",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CabinetTable,
			Columns: []string{business.CabinetColumn},
			Bidi:    false,
		},
		"Business",
		"Cabinet",
	)
	graph.MustAddE(
		"battery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.BatteryTable,
			Columns: []string{business.BatteryColumn},
			Bidi:    false,
		},
		"Business",
		"Battery",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.CityTable,
			Columns: []string{cabinet.CityColumn},
			Bidi:    false,
		},
		"Cabinet",
		"City",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Branch",
	)
	graph.MustAddE(
		"models",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.ModelsTable,
			Columns: cabinet.ModelsPrimaryKey,
			Bidi:    false,
		},
		"Cabinet",
		"BatteryModel",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
		},
		"Cabinet",
		"CabinetFault",
	)
	graph.MustAddE(
		"exchanges",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Exchange",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.StocksTable,
			Columns: []string{cabinet.StocksColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Stock",
	)
	graph.MustAddE(
		"batteries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteriesTable,
			Columns: []string{cabinet.BatteriesColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Battery",
	)
	graph.MustAddE(
		"battery_flows",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteryFlowsTable,
			Columns: []string{cabinet.BatteryFlowsColumn},
			Bidi:    false,
		},
		"Cabinet",
		"BatteryFlow",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.StationTable,
			Columns: []string{cabinet.StationColumn},
			Bidi:    false,
		},
		"Cabinet",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.EnterpriseTable,
			Columns: []string{cabinet.EnterpriseColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Enterprise",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetfault.CityTable,
			Columns: []string{cabinetfault.CityColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"City",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.BranchTable,
			Columns: []string{cabinetfault.BranchColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Branch",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.CabinetTable,
			Columns: []string{cabinetfault.CabinetColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.RiderTable,
			Columns: []string{cabinetfault.RiderColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Rider",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ParentTable,
			Columns: []string{city.ParentColumn},
			Bidi:    false,
		},
		"City",
		"City",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ChildrenTable,
			Columns: []string{city.ChildrenColumn},
			Bidi:    false,
		},
		"City",
		"City",
	)
	graph.MustAddE(
		"plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   city.PlansTable,
			Columns: city.PlansPrimaryKey,
			Bidi:    false,
		},
		"City",
		"Plan",
	)
	graph.MustAddE(
		"business",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.BusinessTable,
			Columns: []string{commission.BusinessColumn},
			Bidi:    false,
		},
		"Commission",
		"Business",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.SubscribeTable,
			Columns: []string{commission.SubscribeColumn},
			Bidi:    false,
		},
		"Commission",
		"Subscribe",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.PlanTable,
			Columns: []string{commission.PlanColumn},
			Bidi:    false,
		},
		"Commission",
		"Plan",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.RiderTable,
			Columns: []string{commission.RiderColumn},
			Bidi:    false,
		},
		"Commission",
		"Rider",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commission.OrderTable,
			Columns: []string{commission.OrderColumn},
			Bidi:    false,
		},
		"Commission",
		"Order",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commission.EmployeeTable,
			Columns: []string{commission.EmployeeColumn},
			Bidi:    false,
		},
		"Commission",
		"Employee",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.SubscribeTable,
			Columns: []string{contract.SubscribeColumn},
			Bidi:    false,
		},
		"Contract",
		"Subscribe",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.EmployeeTable,
			Columns: []string{contract.EmployeeColumn},
			Bidi:    false,
		},
		"Contract",
		"Employee",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
		},
		"Contract",
		"Rider",
	)
	graph.MustAddE(
		"allocate",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contract.AllocateTable,
			Columns: []string{contract.AllocateColumn},
			Bidi:    false,
		},
		"Contract",
		"Allocate",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.RiderTable,
			Columns: []string{coupon.RiderColumn},
			Bidi:    false,
		},
		"Coupon",
		"Rider",
	)
	graph.MustAddE(
		"assembly",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.AssemblyTable,
			Columns: []string{coupon.AssemblyColumn},
			Bidi:    false,
		},
		"Coupon",
		"CouponAssembly",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.PlanTable,
			Columns: []string{coupon.PlanColumn},
			Bidi:    false,
		},
		"Coupon",
		"Plan",
	)
	graph.MustAddE(
		"template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.TemplateTable,
			Columns: []string{coupon.TemplateColumn},
			Bidi:    false,
		},
		"Coupon",
		"CouponTemplate",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OrderTable,
			Columns: []string{coupon.OrderColumn},
			Bidi:    false,
		},
		"Coupon",
		"Order",
	)
	graph.MustAddE(
		"template",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   couponassembly.TemplateTable,
			Columns: []string{couponassembly.TemplateColumn},
			Bidi:    false,
		},
		"CouponAssembly",
		"CouponTemplate",
	)
	graph.MustAddE(
		"coupons",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupontemplate.CouponsTable,
			Columns: []string{coupontemplate.CouponsColumn},
			Bidi:    false,
		},
		"CouponTemplate",
		"Coupon",
	)
	graph.MustAddE(
		"brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.BrandTable,
			Columns: []string{ebike.BrandColumn},
			Bidi:    false,
		},
		"Ebike",
		"EbikeBrand",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.RiderTable,
			Columns: []string{ebike.RiderColumn},
			Bidi:    false,
		},
		"Ebike",
		"Rider",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.StoreTable,
			Columns: []string{ebike.StoreColumn},
			Bidi:    false,
		},
		"Ebike",
		"Store",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.EnterpriseTable,
			Columns: []string{ebike.EnterpriseColumn},
			Bidi:    false,
		},
		"Ebike",
		"Enterprise",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.StationTable,
			Columns: []string{ebike.StationColumn},
			Bidi:    false,
		},
		"Ebike",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"allocates",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ebike.AllocatesTable,
			Columns: []string{ebike.AllocatesColumn},
			Bidi:    false,
		},
		"Ebike",
		"Allocate",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CityTable,
			Columns: []string{employee.CityColumn},
			Bidi:    false,
		},
		"Employee",
		"City",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.StoreTable,
			Columns: []string{employee.StoreColumn},
			Bidi:    false,
		},
		"Employee",
		"Store",
	)
	graph.MustAddE(
		"attendances",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
		},
		"Employee",
		"Attendance",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
		},
		"Employee",
		"Stock",
	)
	graph.MustAddE(
		"exchanges",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
		},
		"Employee",
		"Exchange",
	)
	graph.MustAddE(
		"commissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
		},
		"Employee",
		"Commission",
	)
	graph.MustAddE(
		"assistances",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
		},
		"Employee",
		"Assistance",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprise.CityTable,
			Columns: []string{enterprise.CityColumn},
			Bidi:    false,
		},
		"Enterprise",
		"City",
	)
	graph.MustAddE(
		"riders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Rider",
	)
	graph.MustAddE(
		"contracts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.ContractsTable,
			Columns: []string{enterprise.ContractsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseContract",
	)
	graph.MustAddE(
		"prices",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.PricesTable,
			Columns: []string{enterprise.PricesColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterprisePrice",
	)
	graph.MustAddE(
		"subscribes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SubscribesTable,
			Columns: []string{enterprise.SubscribesColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Subscribe",
	)
	graph.MustAddE(
		"statements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StatementsTable,
			Columns: []string{enterprise.StatementsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseStatement",
	)
	graph.MustAddE(
		"stations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StationsTable,
			Columns: []string{enterprise.StationsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"bills",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BillsTable,
			Columns: []string{enterprise.BillsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseBill",
	)
	graph.MustAddE(
		"batteries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BatteriesTable,
			Columns: []string{enterprise.BatteriesColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Battery",
	)
	graph.MustAddE(
		"agents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.AgentsTable,
			Columns: []string{enterprise.AgentsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Agent",
	)
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.CabinetsTable,
			Columns: []string{enterprise.CabinetsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Cabinet",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StocksTable,
			Columns: []string{enterprise.StocksColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Stock",
	)
	graph.MustAddE(
		"swap_putin_batteries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SwapPutinBatteriesTable,
			Columns: []string{enterprise.SwapPutinBatteriesColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseBatterySwap",
	)
	graph.MustAddE(
		"swap_putout_batteries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SwapPutoutBatteriesTable,
			Columns: []string{enterprise.SwapPutoutBatteriesColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseBatterySwap",
	)
	graph.MustAddE(
		"exchange",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.ExchangeTable,
			Columns: []string{enterprisebatteryswap.ExchangeColumn},
			Bidi:    false,
		},
		"EnterpriseBatterySwap",
		"Exchange",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.CabinetTable,
			Columns: []string{enterprisebatteryswap.CabinetColumn},
			Bidi:    false,
		},
		"EnterpriseBatterySwap",
		"Cabinet",
	)
	graph.MustAddE(
		"putin",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutinTable,
			Columns: []string{enterprisebatteryswap.PutinColumn},
			Bidi:    false,
		},
		"EnterpriseBatterySwap",
		"Battery",
	)
	graph.MustAddE(
		"putin_enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutinEnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseBatterySwap",
		"Enterprise",
	)
	graph.MustAddE(
		"putin_station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinStationTable,
			Columns: []string{enterprisebatteryswap.PutinStationColumn},
			Bidi:    false,
		},
		"EnterpriseBatterySwap",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"putout",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutoutTable,
			Columns: []string{enterprisebatteryswap.PutoutColumn},
			Bidi:    false,
		},
		"EnterpriseBatterySwap",
		"Battery",
	)
	graph.MustAddE(
		"putout_enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutoutEnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseBatterySwap",
		"Enterprise",
	)
	graph.MustAddE(
		"putout_station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutStationTable,
			Columns: []string{enterprisebatteryswap.PutoutStationColumn},
			Bidi:    false,
		},
		"EnterpriseBatterySwap",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.RiderTable,
			Columns: []string{enterprisebill.RiderColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"Rider",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.CityTable,
			Columns: []string{enterprisebill.CityColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"City",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.StationTable,
			Columns: []string{enterprisebill.StationColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.EnterpriseTable,
			Columns: []string{enterprisebill.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"Enterprise",
	)
	graph.MustAddE(
		"statement",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.StatementTable,
			Columns: []string{enterprisebill.StatementColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"EnterpriseStatement",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.SubscribeTable,
			Columns: []string{enterprisebill.SubscribeColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"Subscribe",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisecontract.EnterpriseTable,
			Columns: []string{enterprisecontract.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseContract",
		"Enterprise",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.EnterpriseTable,
			Columns: []string{enterpriseprepayment.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterprisePrepayment",
		"Enterprise",
	)
	graph.MustAddE(
		"agent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.AgentTable,
			Columns: []string{enterpriseprepayment.AgentColumn},
			Bidi:    false,
		},
		"EnterprisePrepayment",
		"Agent",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.CityTable,
			Columns: []string{enterpriseprice.CityColumn},
			Bidi:    false,
		},
		"EnterprisePrice",
		"City",
	)
	graph.MustAddE(
		"brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.BrandTable,
			Columns: []string{enterpriseprice.BrandColumn},
			Bidi:    false,
		},
		"EnterprisePrice",
		"EbikeBrand",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseprice.EnterpriseTable,
			Columns: []string{enterpriseprice.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterprisePrice",
		"Enterprise",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestatement.EnterpriseTable,
			Columns: []string{enterprisestatement.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseStatement",
		"Enterprise",
	)
	graph.MustAddE(
		"bills",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.BillsTable,
			Columns: []string{enterprisestatement.BillsColumn},
			Bidi:    false,
		},
		"EnterpriseStatement",
		"EnterpriseBill",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisestation.CityTable,
			Columns: []string{enterprisestation.CityColumn},
			Bidi:    false,
		},
		"EnterpriseStation",
		"City",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestation.EnterpriseTable,
			Columns: []string{enterprisestation.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseStation",
		"Enterprise",
	)
	graph.MustAddE(
		"agents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   enterprisestation.AgentsTable,
			Columns: enterprisestation.AgentsPrimaryKey,
			Bidi:    false,
		},
		"EnterpriseStation",
		"Agent",
	)
	graph.MustAddE(
		"swap_putin_batteries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestation.SwapPutinBatteriesTable,
			Columns: []string{enterprisestation.SwapPutinBatteriesColumn},
			Bidi:    false,
		},
		"EnterpriseStation",
		"EnterpriseBatterySwap",
	)
	graph.MustAddE(
		"swap_putout_batteries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestation.SwapPutoutBatteriesTable,
			Columns: []string{enterprisestation.SwapPutoutBatteriesColumn},
			Bidi:    false,
		},
		"EnterpriseStation",
		"EnterpriseBatterySwap",
	)
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestation.CabinetsTable,
			Columns: []string{enterprisestation.CabinetsColumn},
			Bidi:    false,
		},
		"EnterpriseStation",
		"Cabinet",
	)
	graph.MustAddE(
		"batteries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestation.BatteriesTable,
			Columns: []string{enterprisestation.BatteriesColumn},
			Bidi:    false,
		},
		"EnterpriseStation",
		"Battery",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestation.StocksTable,
			Columns: []string{enterprisestation.StocksColumn},
			Bidi:    false,
		},
		"EnterpriseStation",
		"Stock",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exception.CityTable,
			Columns: []string{exception.CityColumn},
			Bidi:    false,
		},
		"Exception",
		"City",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exception.EmployeeTable,
			Columns: []string{exception.EmployeeColumn},
			Bidi:    false,
		},
		"Exception",
		"Employee",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exception.StoreTable,
			Columns: []string{exception.StoreColumn},
			Bidi:    false,
		},
		"Exception",
		"Store",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.SubscribeTable,
			Columns: []string{exchange.SubscribeColumn},
			Bidi:    false,
		},
		"Exchange",
		"Subscribe",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
		},
		"Exchange",
		"City",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
		},
		"Exchange",
		"Store",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EnterpriseTable,
			Columns: []string{exchange.EnterpriseColumn},
			Bidi:    false,
		},
		"Exchange",
		"Enterprise",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StationTable,
			Columns: []string{exchange.StationColumn},
			Bidi:    false,
		},
		"Exchange",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
		},
		"Exchange",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
		},
		"Exchange",
		"Rider",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
		},
		"Exchange",
		"Employee",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   export.ManagerTable,
			Columns: []string{export.ManagerColumn},
			Bidi:    false,
		},
		"Export",
		"Manager",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.EnterpriseTable,
			Columns: []string{feedback.EnterpriseColumn},
			Bidi:    false,
		},
		"Feedback",
		"Enterprise",
	)
	graph.MustAddE(
		"agent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.AgentTable,
			Columns: []string{feedback.AgentColumn},
			Bidi:    false,
		},
		"Feedback",
		"Agent",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manager.RoleTable,
			Columns: []string{manager.RoleColumn},
			Bidi:    false,
		},
		"Manager",
		"Role",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.PlanTable,
			Columns: []string{order.PlanColumn},
			Bidi:    false,
		},
		"Order",
		"Plan",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CityTable,
			Columns: []string{order.CityColumn},
			Bidi:    false,
		},
		"Order",
		"City",
	)
	graph.MustAddE(
		"brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.BrandTable,
			Columns: []string{order.BrandColumn},
			Bidi:    false,
		},
		"Order",
		"EbikeBrand",
	)
	graph.MustAddE(
		"ebike",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.EbikeTable,
			Columns: []string{order.EbikeColumn},
			Bidi:    false,
		},
		"Order",
		"Ebike",
	)
	graph.MustAddE(
		"agent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.AgentTable,
			Columns: []string{order.AgentColumn},
			Bidi:    false,
		},
		"Order",
		"Agent",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RiderTable,
			Columns: []string{order.RiderColumn},
			Bidi:    false,
		},
		"Order",
		"Rider",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.SubscribeTable,
			Columns: []string{order.SubscribeColumn},
			Bidi:    false,
		},
		"Order",
		"Subscribe",
	)
	graph.MustAddE(
		"commission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.CommissionTable,
			Columns: []string{order.CommissionColumn},
			Bidi:    false,
		},
		"Order",
		"Commission",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ParentTable,
			Columns: []string{order.ParentColumn},
			Bidi:    false,
		},
		"Order",
		"Order",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
		},
		"Order",
		"Order",
	)
	graph.MustAddE(
		"refund",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
		},
		"Order",
		"OrderRefund",
	)
	graph.MustAddE(
		"assistance",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.AssistanceTable,
			Columns: []string{order.AssistanceColumn},
			Bidi:    false,
		},
		"Order",
		"Assistance",
	)
	graph.MustAddE(
		"coupons",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.CouponsTable,
			Columns: []string{order.CouponsColumn},
			Bidi:    false,
		},
		"Order",
		"Coupon",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
		},
		"OrderRefund",
		"Order",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
		},
		"Person",
		"Rider",
	)
	graph.MustAddE(
		"brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BrandTable,
			Columns: []string{plan.BrandColumn},
			Bidi:    false,
		},
		"Plan",
		"EbikeBrand",
	)
	graph.MustAddE(
		"cities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
		},
		"Plan",
		"City",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
		},
		"Plan",
		"Plan",
	)
	graph.MustAddE(
		"complexes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
		},
		"Plan",
		"Plan",
	)
	graph.MustAddE(
		"brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planintroduce.BrandTable,
			Columns: []string{planintroduce.BrandColumn},
			Bidi:    false,
		},
		"PlanIntroduce",
		"EbikeBrand",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointlog.RiderTable,
			Columns: []string{pointlog.RiderColumn},
			Bidi:    false,
		},
		"PointLog",
		"Rider",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointlog.OrderTable,
			Columns: []string{pointlog.OrderColumn},
			Bidi:    false,
		},
		"PointLog",
		"Order",
	)
	graph.MustAddE(
		"member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionbankcard.MemberTable,
			Columns: []string{promotionbankcard.MemberColumn},
			Bidi:    false,
		},
		"PromotionBankCard",
		"PromotionMember",
	)
	graph.MustAddE(
		"withdrawals",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionbankcard.WithdrawalsTable,
			Columns: []string{promotionbankcard.WithdrawalsColumn},
			Bidi:    false,
		},
		"PromotionBankCard",
		"PromotionWithdrawal",
	)
	graph.MustAddE(
		"member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotioncommission.MemberTable,
			Columns: []string{promotioncommission.MemberColumn},
			Bidi:    false,
		},
		"PromotionCommission",
		"PromotionMember",
	)
	graph.MustAddE(
		"commission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.CommissionTable,
			Columns: []string{promotionearnings.CommissionColumn},
			Bidi:    false,
		},
		"PromotionEarnings",
		"PromotionCommission",
	)
	graph.MustAddE(
		"member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.MemberTable,
			Columns: []string{promotionearnings.MemberColumn},
			Bidi:    false,
		},
		"PromotionEarnings",
		"PromotionMember",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.RiderTable,
			Columns: []string{promotionearnings.RiderColumn},
			Bidi:    false,
		},
		"PromotionEarnings",
		"Rider",
	)
	graph.MustAddE(
		"member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.MemberTable,
			Columns: []string{promotiongrowth.MemberColumn},
			Bidi:    false,
		},
		"PromotionGrowth",
		"PromotionMember",
	)
	graph.MustAddE(
		"task",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.TaskTable,
			Columns: []string{promotiongrowth.TaskColumn},
			Bidi:    false,
		},
		"PromotionGrowth",
		"PromotionLevelTask",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.RiderTable,
			Columns: []string{promotiongrowth.RiderColumn},
			Bidi:    false,
		},
		"PromotionGrowth",
		"Rider",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.RiderTable,
			Columns: []string{promotionmember.RiderColumn},
			Bidi:    false,
		},
		"PromotionMember",
		"Rider",
	)
	graph.MustAddE(
		"level",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.LevelTable,
			Columns: []string{promotionmember.LevelColumn},
			Bidi:    false,
		},
		"PromotionMember",
		"PromotionLevel",
	)
	graph.MustAddE(
		"commission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.CommissionTable,
			Columns: []string{promotionmember.CommissionColumn},
			Bidi:    false,
		},
		"PromotionMember",
		"PromotionCommission",
	)
	graph.MustAddE(
		"referring",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.ReferringTable,
			Columns: []string{promotionmember.ReferringColumn},
			Bidi:    false,
		},
		"PromotionMember",
		"PromotionReferrals",
	)
	graph.MustAddE(
		"referred",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promotionmember.ReferredTable,
			Columns: []string{promotionmember.ReferredColumn},
			Bidi:    false,
		},
		"PromotionMember",
		"PromotionReferrals",
	)
	graph.MustAddE(
		"person",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmember.PersonTable,
			Columns: []string{promotionmember.PersonColumn},
			Bidi:    false,
		},
		"PromotionMember",
		"PromotionPerson",
	)
	graph.MustAddE(
		"cards",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CardsTable,
			Columns: []string{promotionmember.CardsColumn},
			Bidi:    false,
		},
		"PromotionMember",
		"PromotionBankCard",
	)
	graph.MustAddE(
		"member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionperson.MemberTable,
			Columns: []string{promotionperson.MemberColumn},
			Bidi:    false,
		},
		"PromotionPerson",
		"PromotionMember",
	)
	graph.MustAddE(
		"referring_member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ReferringMemberTable,
			Columns: []string{promotionreferrals.ReferringMemberColumn},
			Bidi:    false,
		},
		"PromotionReferrals",
		"PromotionMember",
	)
	graph.MustAddE(
		"referred_member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   promotionreferrals.ReferredMemberTable,
			Columns: []string{promotionreferrals.ReferredMemberColumn},
			Bidi:    false,
		},
		"PromotionReferrals",
		"PromotionMember",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ParentTable,
			Columns: []string{promotionreferrals.ParentColumn},
			Bidi:    false,
		},
		"PromotionReferrals",
		"PromotionReferrals",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionreferrals.ChildrenTable,
			Columns: []string{promotionreferrals.ChildrenColumn},
			Bidi:    false,
		},
		"PromotionReferrals",
		"PromotionReferrals",
	)
	graph.MustAddE(
		"member",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionwithdrawal.MemberTable,
			Columns: []string{promotionwithdrawal.MemberColumn},
			Bidi:    false,
		},
		"PromotionWithdrawal",
		"PromotionMember",
	)
	graph.MustAddE(
		"cards",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionwithdrawal.CardsTable,
			Columns: []string{promotionwithdrawal.CardsColumn},
			Bidi:    false,
		},
		"PromotionWithdrawal",
		"PromotionBankCard",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CabinetTable,
			Columns: []string{reserve.CabinetColumn},
			Bidi:    false,
		},
		"Reserve",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.RiderTable,
			Columns: []string{reserve.RiderColumn},
			Bidi:    false,
		},
		"Reserve",
		"Rider",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CityTable,
			Columns: []string{reserve.CityColumn},
			Bidi:    false,
		},
		"Reserve",
		"City",
	)
	graph.MustAddE(
		"business",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.BusinessTable,
			Columns: []string{reserve.BusinessColumn},
			Bidi:    false,
		},
		"Reserve",
		"Business",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rider.StationTable,
			Columns: []string{rider.StationColumn},
			Bidi:    false,
		},
		"Rider",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"person",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
		},
		"Rider",
		"Person",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
		},
		"Rider",
		"Enterprise",
	)
	graph.MustAddE(
		"contracts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
		},
		"Rider",
		"Contract",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
		},
		"Rider",
		"CabinetFault",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
		},
		"Rider",
		"Order",
	)
	graph.MustAddE(
		"exchanges",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
		},
		"Rider",
		"Exchange",
	)
	graph.MustAddE(
		"subscribes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
		},
		"Rider",
		"Subscribe",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.StocksTable,
			Columns: []string{rider.StocksColumn},
			Bidi:    false,
		},
		"Rider",
		"Stock",
	)
	graph.MustAddE(
		"followups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FollowupsTable,
			Columns: []string{rider.FollowupsColumn},
			Bidi:    false,
		},
		"Rider",
		"RiderFollowUp",
	)
	graph.MustAddE(
		"battery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rider.BatteryTable,
			Columns: []string{rider.BatteryColumn},
			Bidi:    false,
		},
		"Rider",
		"Battery",
	)
	graph.MustAddE(
		"battery_flows",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.BatteryFlowsTable,
			Columns: []string{rider.BatteryFlowsColumn},
			Bidi:    false,
		},
		"Rider",
		"BatteryFlow",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   riderfollowup.ManagerTable,
			Columns: []string{riderfollowup.ManagerColumn},
			Bidi:    false,
		},
		"RiderFollowUp",
		"Manager",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riderfollowup.RiderTable,
			Columns: []string{riderfollowup.RiderColumn},
			Bidi:    false,
		},
		"RiderFollowUp",
		"Rider",
	)
	graph.MustAddE(
		"managers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ManagersTable,
			Columns: []string{role.ManagersColumn},
			Bidi:    false,
		},
		"Role",
		"Manager",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.CityTable,
			Columns: []string{stock.CityColumn},
			Bidi:    false,
		},
		"Stock",
		"City",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.SubscribeTable,
			Columns: []string{stock.SubscribeColumn},
			Bidi:    false,
		},
		"Stock",
		"Subscribe",
	)
	graph.MustAddE(
		"ebike",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.EbikeTable,
			Columns: []string{stock.EbikeColumn},
			Bidi:    false,
		},
		"Stock",
		"Ebike",
	)
	graph.MustAddE(
		"brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BrandTable,
			Columns: []string{stock.BrandColumn},
			Bidi:    false,
		},
		"Stock",
		"EbikeBrand",
	)
	graph.MustAddE(
		"battery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BatteryTable,
			Columns: []string{stock.BatteryColumn},
			Bidi:    false,
		},
		"Stock",
		"Battery",
	)
	graph.MustAddE(
		"agent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.AgentTable,
			Columns: []string{stock.AgentColumn},
			Bidi:    false,
		},
		"Stock",
		"Agent",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StoreTable,
			Columns: []string{stock.StoreColumn},
			Bidi:    false,
		},
		"Stock",
		"Store",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.CabinetTable,
			Columns: []string{stock.CabinetColumn},
			Bidi:    false,
		},
		"Stock",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.RiderTable,
			Columns: []string{stock.RiderColumn},
			Bidi:    false,
		},
		"Stock",
		"Rider",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
		},
		"Stock",
		"Employee",
	)
	graph.MustAddE(
		"spouse",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stock.SpouseTable,
			Columns: []string{stock.SpouseColumn},
			Bidi:    true,
		},
		"Stock",
		"Stock",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ParentTable,
			Columns: []string{stock.ParentColumn},
			Bidi:    false,
		},
		"Stock",
		"Stock",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.ChildrenTable,
			Columns: []string{stock.ChildrenColumn},
			Bidi:    false,
		},
		"Stock",
		"Stock",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EnterpriseTable,
			Columns: []string{stock.EnterpriseColumn},
			Bidi:    false,
		},
		"Stock",
		"Enterprise",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StationTable,
			Columns: []string{stock.StationColumn},
			Bidi:    false,
		},
		"Stock",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.EnterpriseTable,
			Columns: []string{stocksummary.EnterpriseColumn},
			Bidi:    false,
		},
		"StockSummary",
		"Enterprise",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StationTable,
			Columns: []string{stocksummary.StationColumn},
			Bidi:    false,
		},
		"StockSummary",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StoreTable,
			Columns: []string{stocksummary.StoreColumn},
			Bidi:    false,
		},
		"StockSummary",
		"Store",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.RiderTable,
			Columns: []string{stocksummary.RiderColumn},
			Bidi:    false,
		},
		"StockSummary",
		"Rider",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.CabinetTable,
			Columns: []string{stocksummary.CabinetColumn},
			Bidi:    false,
		},
		"StockSummary",
		"Cabinet",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
		},
		"Store",
		"City",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
		},
		"Store",
		"Branch",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
		},
		"Store",
		"Employee",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
		},
		"Store",
		"Stock",
	)
	graph.MustAddE(
		"attendances",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
		},
		"Store",
		"Attendance",
	)
	graph.MustAddE(
		"exceptions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
		},
		"Store",
		"Exception",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Plan",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Employee",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
		},
		"Subscribe",
		"City",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StationTable,
			Columns: []string{subscribe.StationColumn},
			Bidi:    false,
		},
		"Subscribe",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StoreTable,
			Columns: []string{subscribe.StoreColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Store",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CabinetTable,
			Columns: []string{subscribe.CabinetColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Cabinet",
	)
	graph.MustAddE(
		"brand",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.BrandTable,
			Columns: []string{subscribe.BrandColumn},
			Bidi:    false,
		},
		"Subscribe",
		"EbikeBrand",
	)
	graph.MustAddE(
		"ebike",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EbikeTable,
			Columns: []string{subscribe.EbikeColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Ebike",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Rider",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.EnterpriseTable,
			Columns: []string{subscribe.EnterpriseColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Enterprise",
	)
	graph.MustAddE(
		"pauses",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
		},
		"Subscribe",
		"SubscribePause",
	)
	graph.MustAddE(
		"suspends",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.SuspendsTable,
			Columns: []string{subscribe.SuspendsColumn},
			Bidi:    false,
		},
		"Subscribe",
		"SubscribeSuspend",
	)
	graph.MustAddE(
		"alters",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
		},
		"Subscribe",
		"SubscribeAlter",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Order",
	)
	graph.MustAddE(
		"initial_order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Order",
	)
	graph.MustAddE(
		"bills",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.BillsTable,
			Columns: []string{subscribe.BillsColumn},
			Bidi:    false,
		},
		"Subscribe",
		"EnterpriseBill",
	)
	graph.MustAddE(
		"battery",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscribe.BatteryTable,
			Columns: []string{subscribe.BatteryColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Battery",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.RiderTable,
			Columns: []string{subscribealter.RiderColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Rider",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.ManagerTable,
			Columns: []string{subscribealter.ManagerColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Manager",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.EnterpriseTable,
			Columns: []string{subscribealter.EnterpriseColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Enterprise",
	)
	graph.MustAddE(
		"agent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.AgentTable,
			Columns: []string{subscribealter.AgentColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Agent",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribealter.SubscribeTable,
			Columns: []string{subscribealter.SubscribeColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Subscribe",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.RiderTable,
			Columns: []string{subscribepause.RiderColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Rider",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EmployeeTable,
			Columns: []string{subscribepause.EmployeeColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Employee",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CityTable,
			Columns: []string{subscribepause.CityColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"City",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.StoreTable,
			Columns: []string{subscribepause.StoreColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Store",
	)
	graph.MustAddE(
		"endStore",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndStoreTable,
			Columns: []string{subscribepause.EndStoreColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Store",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CabinetTable,
			Columns: []string{subscribepause.CabinetColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Cabinet",
	)
	graph.MustAddE(
		"endCabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndCabinetTable,
			Columns: []string{subscribepause.EndCabinetColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Cabinet",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribepause.SubscribeTable,
			Columns: []string{subscribepause.SubscribeColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Subscribe",
	)
	graph.MustAddE(
		"end_employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndEmployeeTable,
			Columns: []string{subscribepause.EndEmployeeColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Employee",
	)
	graph.MustAddE(
		"suspends",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribepause.SuspendsTable,
			Columns: []string{subscribepause.SuspendsColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"SubscribeSuspend",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
		},
		"SubscribeReminder",
		"Subscribe",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.PlanTable,
			Columns: []string{subscribereminder.PlanColumn},
			Bidi:    false,
		},
		"SubscribeReminder",
		"Plan",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.RiderTable,
			Columns: []string{subscribereminder.RiderColumn},
			Bidi:    false,
		},
		"SubscribeReminder",
		"Rider",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.CityTable,
			Columns: []string{subscribesuspend.CityColumn},
			Bidi:    false,
		},
		"SubscribeSuspend",
		"City",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.RiderTable,
			Columns: []string{subscribesuspend.RiderColumn},
			Bidi:    false,
		},
		"SubscribeSuspend",
		"Rider",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribesuspend.SubscribeTable,
			Columns: []string{subscribesuspend.SubscribeColumn},
			Bidi:    false,
		},
		"SubscribeSuspend",
		"Subscribe",
	)
	graph.MustAddE(
		"pause",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribesuspend.PauseTable,
			Columns: []string{subscribesuspend.PauseColumn},
			Bidi:    false,
		},
		"SubscribeSuspend",
		"SubscribePause",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AgentQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AgentQuery builder.
func (aq *AgentQuery) Filter() *AgentFilter {
	return &AgentFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AgentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AgentMutation builder.
func (m *AgentMutation) Filter() *AgentFilter {
	return &AgentFilter{config: m.config, predicateAdder: m}
}

// AgentFilter provides a generic filtering capability at runtime for AgentQuery.
type AgentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AgentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AgentFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(agent.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AgentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(agent.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AgentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(agent.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AgentFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(agent.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *AgentFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(agent.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *AgentFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(agent.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *AgentFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(agent.FieldRemark))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *AgentFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(agent.FieldEnterpriseID))
}

// WhereName applies the entql string predicate on the name field.
func (f *AgentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(agent.FieldName))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *AgentFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(agent.FieldPhone))
}

// WhereSuper applies the entql bool predicate on the super field.
func (f *AgentFilter) WhereSuper(p entql.BoolP) {
	f.Where(p.Field(agent.FieldSuper))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *AgentFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *AgentFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStations applies a predicate to check if query has an edge stations.
func (f *AgentFilter) WhereHasStations() {
	f.Where(entql.HasEdge("stations"))
}

// WhereHasStationsWith applies a predicate to check if query has an edge stations with a given conditions (other predicates).
func (f *AgentFilter) WhereHasStationsWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("stations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AllocateQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AllocateQuery builder.
func (aq *AllocateQuery) Filter() *AllocateFilter {
	return &AllocateFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AllocateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AllocateMutation builder.
func (m *AllocateMutation) Filter() *AllocateFilter {
	return &AllocateFilter{config: m.config, predicateAdder: m}
}

// AllocateFilter provides a generic filtering capability at runtime for AllocateQuery.
type AllocateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AllocateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AllocateFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AllocateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(allocate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AllocateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(allocate.FieldUpdatedAt))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *AllocateFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldRiderID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *AllocateFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldSubscribeID))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *AllocateFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(allocate.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *AllocateFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(allocate.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *AllocateFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(allocate.FieldRemark))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *AllocateFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldEmployeeID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *AllocateFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldCabinetID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *AllocateFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldStoreID))
}

// WhereBrandID applies the entql uint64 predicate on the brand_id field.
func (f *AllocateFilter) WhereBrandID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldBrandID))
}

// WhereBatteryID applies the entql uint64 predicate on the battery_id field.
func (f *AllocateFilter) WhereBatteryID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldBatteryID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *AllocateFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldStationID))
}

// WhereAgentID applies the entql uint64 predicate on the agent_id field.
func (f *AllocateFilter) WhereAgentID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldAgentID))
}

// WhereType applies the entql string predicate on the type field.
func (f *AllocateFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(allocate.FieldType))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *AllocateFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(allocate.FieldStatus))
}

// WhereTime applies the entql time.Time predicate on the time field.
func (f *AllocateFilter) WhereTime(p entql.TimeP) {
	f.Where(p.Field(allocate.FieldTime))
}

// WhereModel applies the entql string predicate on the model field.
func (f *AllocateFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(allocate.FieldModel))
}

// WhereEbikeID applies the entql uint64 predicate on the ebike_id field.
func (f *AllocateFilter) WhereEbikeID(p entql.Uint64P) {
	f.Where(p.Field(allocate.FieldEbikeID))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *AllocateFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *AllocateFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *AllocateFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *AllocateFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *AllocateFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBrand applies a predicate to check if query has an edge brand.
func (f *AllocateFilter) WhereHasBrand() {
	f.Where(entql.HasEdge("brand"))
}

// WhereHasBrandWith applies a predicate to check if query has an edge brand with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasBrandWith(preds ...predicate.EbikeBrand) {
	f.Where(entql.HasEdgeWith("brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBattery applies a predicate to check if query has an edge battery.
func (f *AllocateFilter) WhereHasBattery() {
	f.Where(entql.HasEdge("battery"))
}

// WhereHasBatteryWith applies a predicate to check if query has an edge battery with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasBatteryWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("battery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *AllocateFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgent applies a predicate to check if query has an edge agent.
func (f *AllocateFilter) WhereHasAgent() {
	f.Where(entql.HasEdge("agent"))
}

// WhereHasAgentWith applies a predicate to check if query has an edge agent with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasAgentWith(preds ...predicate.Agent) {
	f.Where(entql.HasEdgeWith("agent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContract applies a predicate to check if query has an edge contract.
func (f *AllocateFilter) WhereHasContract() {
	f.Where(entql.HasEdge("contract"))
}

// WhereHasContractWith applies a predicate to check if query has an edge contract with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasContractWith(preds ...predicate.Contract) {
	f.Where(entql.HasEdgeWith("contract", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEbike applies a predicate to check if query has an edge ebike.
func (f *AllocateFilter) WhereHasEbike() {
	f.Where(entql.HasEdge("ebike"))
}

// WhereHasEbikeWith applies a predicate to check if query has an edge ebike with a given conditions (other predicates).
func (f *AllocateFilter) WhereHasEbikeWith(preds ...predicate.Ebike) {
	f.Where(entql.HasEdgeWith("ebike", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AssistanceQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AssistanceQuery builder.
func (aq *AssistanceQuery) Filter() *AssistanceFilter {
	return &AssistanceFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AssistanceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AssistanceMutation builder.
func (m *AssistanceMutation) Filter() *AssistanceFilter {
	return &AssistanceFilter{config: m.config, predicateAdder: m}
}

// AssistanceFilter provides a generic filtering capability at runtime for AssistanceQuery.
type AssistanceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AssistanceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AssistanceFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AssistanceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AssistanceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AssistanceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *AssistanceFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(assistance.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *AssistanceFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(assistance.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *AssistanceFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(assistance.FieldRemark))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *AssistanceFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldStoreID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *AssistanceFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldRiderID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *AssistanceFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldSubscribeID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *AssistanceFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldCityID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *AssistanceFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldEmployeeID))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *AssistanceFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldOrderID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *AssistanceFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(assistance.FieldStatus))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *AssistanceFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *AssistanceFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *AssistanceFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(assistance.FieldAddress))
}

// WhereBreakdown applies the entql string predicate on the breakdown field.
func (f *AssistanceFilter) WhereBreakdown(p entql.StringP) {
	f.Where(p.Field(assistance.FieldBreakdown))
}

// WhereBreakdownDesc applies the entql string predicate on the breakdown_desc field.
func (f *AssistanceFilter) WhereBreakdownDesc(p entql.StringP) {
	f.Where(p.Field(assistance.FieldBreakdownDesc))
}

// WhereBreakdownPhotos applies the entql json.RawMessage predicate on the breakdown_photos field.
func (f *AssistanceFilter) WhereBreakdownPhotos(p entql.BytesP) {
	f.Where(p.Field(assistance.FieldBreakdownPhotos))
}

// WhereCancelReason applies the entql string predicate on the cancel_reason field.
func (f *AssistanceFilter) WhereCancelReason(p entql.StringP) {
	f.Where(p.Field(assistance.FieldCancelReason))
}

// WhereCancelReasonDesc applies the entql string predicate on the cancel_reason_desc field.
func (f *AssistanceFilter) WhereCancelReasonDesc(p entql.StringP) {
	f.Where(p.Field(assistance.FieldCancelReasonDesc))
}

// WhereDistance applies the entql float64 predicate on the distance field.
func (f *AssistanceFilter) WhereDistance(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldDistance))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *AssistanceFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(assistance.FieldReason))
}

// WhereDetectPhoto applies the entql string predicate on the detect_photo field.
func (f *AssistanceFilter) WhereDetectPhoto(p entql.StringP) {
	f.Where(p.Field(assistance.FieldDetectPhoto))
}

// WhereJointPhoto applies the entql string predicate on the joint_photo field.
func (f *AssistanceFilter) WhereJointPhoto(p entql.StringP) {
	f.Where(p.Field(assistance.FieldJointPhoto))
}

// WhereCost applies the entql float64 predicate on the cost field.
func (f *AssistanceFilter) WhereCost(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldCost))
}

// WhereRefusedDesc applies the entql string predicate on the refused_desc field.
func (f *AssistanceFilter) WhereRefusedDesc(p entql.StringP) {
	f.Where(p.Field(assistance.FieldRefusedDesc))
}

// WherePayAt applies the entql time.Time predicate on the pay_at field.
func (f *AssistanceFilter) WherePayAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldPayAt))
}

// WhereAllocateAt applies the entql time.Time predicate on the allocate_at field.
func (f *AssistanceFilter) WhereAllocateAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldAllocateAt))
}

// WhereWait applies the entql int predicate on the wait field.
func (f *AssistanceFilter) WhereWait(p entql.IntP) {
	f.Where(p.Field(assistance.FieldWait))
}

// WhereFreeReason applies the entql string predicate on the free_reason field.
func (f *AssistanceFilter) WhereFreeReason(p entql.StringP) {
	f.Where(p.Field(assistance.FieldFreeReason))
}

// WhereFailReason applies the entql string predicate on the fail_reason field.
func (f *AssistanceFilter) WhereFailReason(p entql.StringP) {
	f.Where(p.Field(assistance.FieldFailReason))
}

// WhereProcessAt applies the entql time.Time predicate on the process_at field.
func (f *AssistanceFilter) WhereProcessAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldProcessAt))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *AssistanceFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldPrice))
}

// WhereNaviDuration applies the entql int predicate on the navi_duration field.
func (f *AssistanceFilter) WhereNaviDuration(p entql.IntP) {
	f.Where(p.Field(assistance.FieldNaviDuration))
}

// WhereNaviPolylines applies the entql json.RawMessage predicate on the navi_polylines field.
func (f *AssistanceFilter) WhereNaviPolylines(p entql.BytesP) {
	f.Where(p.Field(assistance.FieldNaviPolylines))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *AssistanceFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *AssistanceFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *AssistanceFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *AssistanceFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *AssistanceFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *AssistanceFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AttendanceQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AttendanceQuery builder.
func (aq *AttendanceQuery) Filter() *AttendanceFilter {
	return &AttendanceFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AttendanceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AttendanceMutation builder.
func (m *AttendanceMutation) Filter() *AttendanceFilter {
	return &AttendanceFilter{config: m.config, predicateAdder: m}
}

// AttendanceFilter provides a generic filtering capability at runtime for AttendanceQuery.
type AttendanceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AttendanceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AttendanceFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(attendance.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AttendanceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(attendance.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AttendanceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(attendance.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AttendanceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(attendance.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *AttendanceFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(attendance.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *AttendanceFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(attendance.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *AttendanceFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(attendance.FieldRemark))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *AttendanceFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(attendance.FieldStoreID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *AttendanceFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(attendance.FieldEmployeeID))
}

// WhereInventory applies the entql json.RawMessage predicate on the inventory field.
func (f *AttendanceFilter) WhereInventory(p entql.BytesP) {
	f.Where(p.Field(attendance.FieldInventory))
}

// WherePhoto applies the entql string predicate on the photo field.
func (f *AttendanceFilter) WherePhoto(p entql.StringP) {
	f.Where(p.Field(attendance.FieldPhoto))
}

// WhereDuty applies the entql bool predicate on the duty field.
func (f *AttendanceFilter) WhereDuty(p entql.BoolP) {
	f.Where(p.Field(attendance.FieldDuty))
}

// WhereDate applies the entql time.Time predicate on the date field.
func (f *AttendanceFilter) WhereDate(p entql.TimeP) {
	f.Where(p.Field(attendance.FieldDate))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *AttendanceFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(attendance.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *AttendanceFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(attendance.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *AttendanceFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(attendance.FieldAddress))
}

// WhereDistance applies the entql float64 predicate on the distance field.
func (f *AttendanceFilter) WhereDistance(p entql.Float64P) {
	f.Where(p.Field(attendance.FieldDistance))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *AttendanceFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *AttendanceFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *AttendanceFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *AttendanceFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BatteryQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BatteryQuery builder.
func (bq *BatteryQuery) Filter() *BatteryFilter {
	return &BatteryFilter{config: bq.config, predicateAdder: bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BatteryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BatteryMutation builder.
func (m *BatteryMutation) Filter() *BatteryFilter {
	return &BatteryFilter{config: m.config, predicateAdder: m}
}

// BatteryFilter provides a generic filtering capability at runtime for BatteryQuery.
type BatteryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BatteryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BatteryFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(battery.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BatteryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(battery.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BatteryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(battery.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BatteryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(battery.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BatteryFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(battery.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BatteryFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(battery.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BatteryFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(battery.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *BatteryFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(battery.FieldCityID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *BatteryFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(battery.FieldRiderID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *BatteryFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(battery.FieldCabinetID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *BatteryFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(battery.FieldSubscribeID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *BatteryFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(battery.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *BatteryFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(battery.FieldStationID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *BatteryFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(battery.FieldSn))
}

// WhereBrand applies the entql other predicate on the brand field.
func (f *BatteryFilter) WhereBrand(p entql.OtherP) {
	f.Where(p.Field(battery.FieldBrand))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *BatteryFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(battery.FieldEnable))
}

// WhereModel applies the entql string predicate on the model field.
func (f *BatteryFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(battery.FieldModel))
}

// WhereOrdinal applies the entql int predicate on the ordinal field.
func (f *BatteryFilter) WhereOrdinal(p entql.IntP) {
	f.Where(p.Field(battery.FieldOrdinal))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *BatteryFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *BatteryFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *BatteryFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *BatteryFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *BatteryFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *BatteryFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *BatteryFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *BatteryFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *BatteryFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *BatteryFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFlows applies a predicate to check if query has an edge flows.
func (f *BatteryFilter) WhereHasFlows() {
	f.Where(entql.HasEdge("flows"))
}

// WhereHasFlowsWith applies a predicate to check if query has an edge flows with a given conditions (other predicates).
func (f *BatteryFilter) WhereHasFlowsWith(preds ...predicate.BatteryFlow) {
	f.Where(entql.HasEdgeWith("flows", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *BatteryFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *BatteryFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bfq *BatteryFlowQuery) addPredicate(pred func(s *sql.Selector)) {
	bfq.predicates = append(bfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BatteryFlowQuery builder.
func (bfq *BatteryFlowQuery) Filter() *BatteryFlowFilter {
	return &BatteryFlowFilter{config: bfq.config, predicateAdder: bfq}
}

// addPredicate implements the predicateAdder interface.
func (m *BatteryFlowMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BatteryFlowMutation builder.
func (m *BatteryFlowMutation) Filter() *BatteryFlowFilter {
	return &BatteryFlowFilter{config: m.config, predicateAdder: m}
}

// BatteryFlowFilter provides a generic filtering capability at runtime for BatteryFlowQuery.
type BatteryFlowFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BatteryFlowFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BatteryFlowFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(batteryflow.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BatteryFlowFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(batteryflow.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BatteryFlowFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(batteryflow.FieldUpdatedAt))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *BatteryFlowFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(batteryflow.FieldSubscribeID))
}

// WhereBatteryID applies the entql uint64 predicate on the battery_id field.
func (f *BatteryFlowFilter) WhereBatteryID(p entql.Uint64P) {
	f.Where(p.Field(batteryflow.FieldBatteryID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *BatteryFlowFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(batteryflow.FieldSn))
}

// WhereSoc applies the entql float64 predicate on the soc field.
func (f *BatteryFlowFilter) WhereSoc(p entql.Float64P) {
	f.Where(p.Field(batteryflow.FieldSoc))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *BatteryFlowFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(batteryflow.FieldRiderID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *BatteryFlowFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(batteryflow.FieldCabinetID))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *BatteryFlowFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(batteryflow.FieldSerial))
}

// WhereOrdinal applies the entql int predicate on the ordinal field.
func (f *BatteryFlowFilter) WhereOrdinal(p entql.IntP) {
	f.Where(p.Field(batteryflow.FieldOrdinal))
}

// WhereGeom applies the entql other predicate on the geom field.
func (f *BatteryFlowFilter) WhereGeom(p entql.OtherP) {
	f.Where(p.Field(batteryflow.FieldGeom))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BatteryFlowFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(batteryflow.FieldRemark))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *BatteryFlowFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *BatteryFlowFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBattery applies a predicate to check if query has an edge battery.
func (f *BatteryFlowFilter) WhereHasBattery() {
	f.Where(entql.HasEdge("battery"))
}

// WhereHasBatteryWith applies a predicate to check if query has an edge battery with a given conditions (other predicates).
func (f *BatteryFlowFilter) WhereHasBatteryWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("battery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *BatteryFlowFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *BatteryFlowFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *BatteryFlowFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *BatteryFlowFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bmq *BatteryModelQuery) addPredicate(pred func(s *sql.Selector)) {
	bmq.predicates = append(bmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BatteryModelQuery builder.
func (bmq *BatteryModelQuery) Filter() *BatteryModelFilter {
	return &BatteryModelFilter{config: bmq.config, predicateAdder: bmq}
}

// addPredicate implements the predicateAdder interface.
func (m *BatteryModelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BatteryModelMutation builder.
func (m *BatteryModelMutation) Filter() *BatteryModelFilter {
	return &BatteryModelFilter{config: m.config, predicateAdder: m}
}

// BatteryModelFilter provides a generic filtering capability at runtime for BatteryModelQuery.
type BatteryModelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BatteryModelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BatteryModelFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(batterymodel.FieldID))
}

// WhereModel applies the entql string predicate on the model field.
func (f *BatteryModelFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(batterymodel.FieldModel))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BatteryModelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldCreatedAt))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *BatteryModelFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *BatteryModelFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BranchQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BranchQuery builder.
func (bq *BranchQuery) Filter() *BranchFilter {
	return &BranchFilter{config: bq.config, predicateAdder: bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BranchMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BranchMutation builder.
func (m *BranchMutation) Filter() *BranchFilter {
	return &BranchFilter{config: m.config, predicateAdder: m}
}

// BranchFilter provides a generic filtering capability at runtime for BranchQuery.
type BranchFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BranchFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BranchFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(branch.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BranchFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BranchFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BranchFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BranchFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(branch.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BranchFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(branch.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BranchFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(branch.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *BranchFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(branch.FieldCityID))
}

// WhereName applies the entql string predicate on the name field.
func (f *BranchFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(branch.FieldName))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *BranchFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(branch.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *BranchFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(branch.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *BranchFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(branch.FieldAddress))
}

// WherePhotos applies the entql json.RawMessage predicate on the photos field.
func (f *BranchFilter) WherePhotos(p entql.BytesP) {
	f.Where(p.Field(branch.FieldPhotos))
}

// WhereGeom applies the entql other predicate on the geom field.
func (f *BranchFilter) WhereGeom(p entql.OtherP) {
	f.Where(p.Field(branch.FieldGeom))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *BranchFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *BranchFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContracts applies a predicate to check if query has an edge contracts.
func (f *BranchFilter) WhereHasContracts() {
	f.Where(entql.HasEdge("contracts"))
}

// WhereHasContractsWith applies a predicate to check if query has an edge contracts with a given conditions (other predicates).
func (f *BranchFilter) WhereHasContractsWith(preds ...predicate.BranchContract) {
	f.Where(entql.HasEdgeWith("contracts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *BranchFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *BranchFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *BranchFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *BranchFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStores applies a predicate to check if query has an edge stores.
func (f *BranchFilter) WhereHasStores() {
	f.Where(entql.HasEdge("stores"))
}

// WhereHasStoresWith applies a predicate to check if query has an edge stores with a given conditions (other predicates).
func (f *BranchFilter) WhereHasStoresWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("stores", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bcq *BranchContractQuery) addPredicate(pred func(s *sql.Selector)) {
	bcq.predicates = append(bcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BranchContractQuery builder.
func (bcq *BranchContractQuery) Filter() *BranchContractFilter {
	return &BranchContractFilter{config: bcq.config, predicateAdder: bcq}
}

// addPredicate implements the predicateAdder interface.
func (m *BranchContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BranchContractMutation builder.
func (m *BranchContractMutation) Filter() *BranchContractFilter {
	return &BranchContractFilter{config: m.config, predicateAdder: m}
}

// BranchContractFilter provides a generic filtering capability at runtime for BranchContractQuery.
type BranchContractFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BranchContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BranchContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(branchcontract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BranchContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BranchContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BranchContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BranchContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BranchContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BranchContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldRemark))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *BranchContractFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(branchcontract.FieldBranchID))
}

// WhereLandlordName applies the entql string predicate on the landlord_name field.
func (f *BranchContractFilter) WhereLandlordName(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldLandlordName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *BranchContractFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldIDCardNumber))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *BranchContractFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldPhone))
}

// WhereBankNumber applies the entql string predicate on the bank_number field.
func (f *BranchContractFilter) WhereBankNumber(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldBankNumber))
}

// WherePledge applies the entql float64 predicate on the pledge field.
func (f *BranchContractFilter) WherePledge(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldPledge))
}

// WhereRent applies the entql float64 predicate on the rent field.
func (f *BranchContractFilter) WhereRent(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldRent))
}

// WhereLease applies the entql uint predicate on the lease field.
func (f *BranchContractFilter) WhereLease(p entql.UintP) {
	f.Where(p.Field(branchcontract.FieldLease))
}

// WhereElectricityPledge applies the entql float64 predicate on the electricity_pledge field.
func (f *BranchContractFilter) WhereElectricityPledge(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldElectricityPledge))
}

// WhereElectricity applies the entql string predicate on the electricity field.
func (f *BranchContractFilter) WhereElectricity(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldElectricity))
}

// WhereArea applies the entql float64 predicate on the area field.
func (f *BranchContractFilter) WhereArea(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldArea))
}

// WhereStartTime applies the entql time.Time predicate on the start_time field.
func (f *BranchContractFilter) WhereStartTime(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldStartTime))
}

// WhereEndTime applies the entql time.Time predicate on the end_time field.
func (f *BranchContractFilter) WhereEndTime(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldEndTime))
}

// WhereFile applies the entql string predicate on the file field.
func (f *BranchContractFilter) WhereFile(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldFile))
}

// WhereSheets applies the entql json.RawMessage predicate on the sheets field.
func (f *BranchContractFilter) WhereSheets(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldSheets))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *BranchContractFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *BranchContractFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BusinessQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BusinessQuery builder.
func (bq *BusinessQuery) Filter() *BusinessFilter {
	return &BusinessFilter{config: bq.config, predicateAdder: bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BusinessMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BusinessMutation builder.
func (m *BusinessMutation) Filter() *BusinessFilter {
	return &BusinessFilter{config: m.config, predicateAdder: m}
}

// BusinessFilter provides a generic filtering capability at runtime for BusinessQuery.
type BusinessFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BusinessFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BusinessFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BusinessFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(business.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BusinessFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(business.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BusinessFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(business.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BusinessFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(business.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BusinessFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(business.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BusinessFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(business.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *BusinessFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldRiderID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *BusinessFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldCityID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *BusinessFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldSubscribeID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *BusinessFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldEmployeeID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *BusinessFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldStoreID))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *BusinessFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldPlanID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *BusinessFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *BusinessFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldStationID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *BusinessFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldCabinetID))
}

// WhereBatteryID applies the entql uint64 predicate on the battery_id field.
func (f *BusinessFilter) WhereBatteryID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldBatteryID))
}

// WhereType applies the entql string predicate on the type field.
func (f *BusinessFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(business.FieldType))
}

// WhereBinInfo applies the entql json.RawMessage predicate on the bin_info field.
func (f *BusinessFilter) WhereBinInfo(p entql.BytesP) {
	f.Where(p.Field(business.FieldBinInfo))
}

// WhereStockSn applies the entql string predicate on the stock_sn field.
func (f *BusinessFilter) WhereStockSn(p entql.StringP) {
	f.Where(p.Field(business.FieldStockSn))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *BusinessFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *BusinessFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *BusinessFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *BusinessFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *BusinessFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *BusinessFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *BusinessFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *BusinessFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *BusinessFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBattery applies a predicate to check if query has an edge battery.
func (f *BusinessFilter) WhereHasBattery() {
	f.Where(entql.HasEdge("battery"))
}

// WhereHasBatteryWith applies a predicate to check if query has an edge battery with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasBatteryWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("battery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CabinetQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetQuery builder.
func (cq *CabinetQuery) Filter() *CabinetFilter {
	return &CabinetFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetMutation builder.
func (m *CabinetMutation) Filter() *CabinetFilter {
	return &CabinetFilter{config: m.config, predicateAdder: m}
}

// CabinetFilter provides a generic filtering capability at runtime for CabinetQuery.
type CabinetFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CabinetFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CabinetFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CabinetFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CabinetFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CabinetFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *CabinetFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldCityID))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *CabinetFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldBranchID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *CabinetFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *CabinetFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldStationID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *CabinetFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSn))
}

// WhereBrand applies the entql other predicate on the brand field.
func (f *CabinetFilter) WhereBrand(p entql.OtherP) {
	f.Where(p.Field(cabinet.FieldBrand))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *CabinetFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSerial))
}

// WhereName applies the entql string predicate on the name field.
func (f *CabinetFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldName))
}

// WhereDoors applies the entql int predicate on the doors field.
func (f *CabinetFilter) WhereDoors(p entql.IntP) {
	f.Where(p.Field(cabinet.FieldDoors))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CabinetFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(cabinet.FieldStatus))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *CabinetFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *CabinetFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldLat))
}

// WhereGeom applies the entql other predicate on the geom field.
func (f *CabinetFilter) WhereGeom(p entql.OtherP) {
	f.Where(p.Field(cabinet.FieldGeom))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *CabinetFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldAddress))
}

// WhereSimSn applies the entql string predicate on the sim_sn field.
func (f *CabinetFilter) WhereSimSn(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSimSn))
}

// WhereSimDate applies the entql time.Time predicate on the sim_date field.
func (f *CabinetFilter) WhereSimDate(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldSimDate))
}

// WhereTransferred applies the entql bool predicate on the transferred field.
func (f *CabinetFilter) WhereTransferred(p entql.BoolP) {
	f.Where(p.Field(cabinet.FieldTransferred))
}

// WhereIntelligent applies the entql bool predicate on the intelligent field.
func (f *CabinetFilter) WhereIntelligent(p entql.BoolP) {
	f.Where(p.Field(cabinet.FieldIntelligent))
}

// WhereHealth applies the entql uint8 predicate on the health field.
func (f *CabinetFilter) WhereHealth(p entql.Uint8P) {
	f.Where(p.Field(cabinet.FieldHealth))
}

// WhereBin applies the entql json.RawMessage predicate on the bin field.
func (f *CabinetFilter) WhereBin(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldBin))
}

// WhereBatteryNum applies the entql int predicate on the battery_num field.
func (f *CabinetFilter) WhereBatteryNum(p entql.IntP) {
	f.Where(p.Field(cabinet.FieldBatteryNum))
}

// WhereBatteryFullNum applies the entql int predicate on the battery_full_num field.
func (f *CabinetFilter) WhereBatteryFullNum(p entql.IntP) {
	f.Where(p.Field(cabinet.FieldBatteryFullNum))
}

// WhereBatteryChargingNum applies the entql int predicate on the battery_charging_num field.
func (f *CabinetFilter) WhereBatteryChargingNum(p entql.IntP) {
	f.Where(p.Field(cabinet.FieldBatteryChargingNum))
}

// WhereEmptyBinNum applies the entql int predicate on the empty_bin_num field.
func (f *CabinetFilter) WhereEmptyBinNum(p entql.IntP) {
	f.Where(p.Field(cabinet.FieldEmptyBinNum))
}

// WhereLockedBinNum applies the entql int predicate on the locked_bin_num field.
func (f *CabinetFilter) WhereLockedBinNum(p entql.IntP) {
	f.Where(p.Field(cabinet.FieldLockedBinNum))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *CabinetFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *CabinetFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasModels applies a predicate to check if query has an edge models.
func (f *CabinetFilter) WhereHasModels() {
	f.Where(entql.HasEdge("models"))
}

// WhereHasModelsWith applies a predicate to check if query has an edge models with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasModelsWith(preds ...predicate.BatteryModel) {
	f.Where(entql.HasEdgeWith("models", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *CabinetFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExchanges applies a predicate to check if query has an edge exchanges.
func (f *CabinetFilter) WhereHasExchanges() {
	f.Where(entql.HasEdge("exchanges"))
}

// WhereHasExchangesWith applies a predicate to check if query has an edge exchanges with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasExchangesWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchanges", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *CabinetFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBatteries applies a predicate to check if query has an edge batteries.
func (f *CabinetFilter) WhereHasBatteries() {
	f.Where(entql.HasEdge("batteries"))
}

// WhereHasBatteriesWith applies a predicate to check if query has an edge batteries with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBatteriesWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("batteries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBatteryFlows applies a predicate to check if query has an edge battery_flows.
func (f *CabinetFilter) WhereHasBatteryFlows() {
	f.Where(entql.HasEdge("battery_flows"))
}

// WhereHasBatteryFlowsWith applies a predicate to check if query has an edge battery_flows with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBatteryFlowsWith(preds ...predicate.BatteryFlow) {
	f.Where(entql.HasEdgeWith("battery_flows", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *CabinetFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *CabinetFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cfq *CabinetFaultQuery) addPredicate(pred func(s *sql.Selector)) {
	cfq.predicates = append(cfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetFaultQuery builder.
func (cfq *CabinetFaultQuery) Filter() *CabinetFaultFilter {
	return &CabinetFaultFilter{config: cfq.config, predicateAdder: cfq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetFaultMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetFaultMutation builder.
func (m *CabinetFaultMutation) Filter() *CabinetFaultFilter {
	return &CabinetFaultFilter{config: m.config, predicateAdder: m}
}

// CabinetFaultFilter provides a generic filtering capability at runtime for CabinetFaultQuery.
type CabinetFaultFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CabinetFaultFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetFaultFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetFaultFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetFaultFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CabinetFaultFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CabinetFaultFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CabinetFaultFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CabinetFaultFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *CabinetFaultFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldCityID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CabinetFaultFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(cabinetfault.FieldStatus))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *CabinetFaultFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldBranchID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *CabinetFaultFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldCabinetID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *CabinetFaultFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldRiderID))
}

// WhereFault applies the entql string predicate on the fault field.
func (f *CabinetFaultFilter) WhereFault(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldFault))
}

// WhereAttachments applies the entql json.RawMessage predicate on the attachments field.
func (f *CabinetFaultFilter) WhereAttachments(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldAttachments))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *CabinetFaultFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldDescription))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *CabinetFaultFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *CabinetFaultFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *CabinetFaultFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *CabinetFaultFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CityQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CityQuery builder.
func (cq *CityQuery) Filter() *CityFilter {
	return &CityFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CityMutation builder.
func (m *CityMutation) Filter() *CityFilter {
	return &CityFilter{config: m.config, predicateAdder: m}
}

// CityFilter provides a generic filtering capability at runtime for CityQuery.
type CityFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CityFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(city.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CityFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CityFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(city.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CityFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(city.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CityFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(city.FieldRemark))
}

// WhereOpen applies the entql bool predicate on the open field.
func (f *CityFilter) WhereOpen(p entql.BoolP) {
	f.Where(p.Field(city.FieldOpen))
}

// WhereName applies the entql string predicate on the name field.
func (f *CityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(city.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CityFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(city.FieldCode))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *CityFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(city.FieldParentID))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *CityFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(city.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *CityFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(city.FieldLat))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *CityFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *CityFilter) WhereHasParentWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *CityFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *CityFilter) WhereHasChildrenWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlans applies a predicate to check if query has an edge plans.
func (f *CityFilter) WhereHasPlans() {
	f.Where(entql.HasEdge("plans"))
}

// WhereHasPlansWith applies a predicate to check if query has an edge plans with a given conditions (other predicates).
func (f *CityFilter) WhereHasPlansWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommissionQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommissionQuery builder.
func (cq *CommissionQuery) Filter() *CommissionFilter {
	return &CommissionFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommissionMutation builder.
func (m *CommissionMutation) Filter() *CommissionFilter {
	return &CommissionFilter{config: m.config, predicateAdder: m}
}

// CommissionFilter provides a generic filtering capability at runtime for CommissionQuery.
type CommissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CommissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CommissionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CommissionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CommissionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CommissionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CommissionFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(commission.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CommissionFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(commission.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CommissionFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(commission.FieldRemark))
}

// WhereBusinessID applies the entql uint64 predicate on the business_id field.
func (f *CommissionFilter) WhereBusinessID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldBusinessID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *CommissionFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldSubscribeID))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *CommissionFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldPlanID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *CommissionFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldRiderID))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *CommissionFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldOrderID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *CommissionFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(commission.FieldAmount))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CommissionFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(commission.FieldStatus))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *CommissionFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldEmployeeID))
}

// WhereHasBusiness applies a predicate to check if query has an edge business.
func (f *CommissionFilter) WhereHasBusiness() {
	f.Where(entql.HasEdge("business"))
}

// WhereHasBusinessWith applies a predicate to check if query has an edge business with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasBusinessWith(preds ...predicate.Business) {
	f.Where(entql.HasEdgeWith("business", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *CommissionFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *CommissionFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *CommissionFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *CommissionFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *CommissionFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContractQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContractQuery builder.
func (cq *ContractQuery) Filter() *ContractFilter {
	return &ContractFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContractMutation builder.
func (m *ContractMutation) Filter() *ContractFilter {
	return &ContractFilter{config: m.config, predicateAdder: m}
}

// ContractFilter provides a generic filtering capability at runtime for ContractQuery.
type ContractFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(contract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(contract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(contract.FieldRemark))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *ContractFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldSubscribeID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *ContractFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldEmployeeID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ContractFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(contract.FieldStatus))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ContractFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldRiderID))
}

// WhereFlowID applies the entql string predicate on the flow_id field.
func (f *ContractFilter) WhereFlowID(p entql.StringP) {
	f.Where(p.Field(contract.FieldFlowID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *ContractFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(contract.FieldSn))
}

// WhereFiles applies the entql json.RawMessage predicate on the files field.
func (f *ContractFilter) WhereFiles(p entql.BytesP) {
	f.Where(p.Field(contract.FieldFiles))
}

// WhereEffective applies the entql bool predicate on the effective field.
func (f *ContractFilter) WhereEffective(p entql.BoolP) {
	f.Where(p.Field(contract.FieldEffective))
}

// WhereRiderInfo applies the entql json.RawMessage predicate on the rider_info field.
func (f *ContractFilter) WhereRiderInfo(p entql.BytesP) {
	f.Where(p.Field(contract.FieldRiderInfo))
}

// WhereAllocateID applies the entql uint64 predicate on the allocate_id field.
func (f *ContractFilter) WhereAllocateID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldAllocateID))
}

// WhereLink applies the entql string predicate on the link field.
func (f *ContractFilter) WhereLink(p entql.StringP) {
	f.Where(p.Field(contract.FieldLink))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *ContractFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldExpiresAt))
}

// WhereSignedAt applies the entql time.Time predicate on the signed_at field.
func (f *ContractFilter) WhereSignedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldSignedAt))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *ContractFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *ContractFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *ContractFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *ContractFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ContractFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ContractFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAllocate applies a predicate to check if query has an edge allocate.
func (f *ContractFilter) WhereHasAllocate() {
	f.Where(entql.HasEdge("allocate"))
}

// WhereHasAllocateWith applies a predicate to check if query has an edge allocate with a given conditions (other predicates).
func (f *ContractFilter) WhereHasAllocateWith(preds ...predicate.Allocate) {
	f.Where(entql.HasEdgeWith("allocate", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CouponQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponQuery builder.
func (cq *CouponQuery) Filter() *CouponFilter {
	return &CouponFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponMutation builder.
func (m *CouponMutation) Filter() *CouponFilter {
	return &CouponFilter{config: m.config, predicateAdder: m}
}

// CouponFilter provides a generic filtering capability at runtime for CouponQuery.
type CouponFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CouponFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(coupon.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CouponFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(coupon.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CouponFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(coupon.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CouponFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(coupon.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CouponFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(coupon.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CouponFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(coupon.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *CouponFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(coupon.FieldRiderID))
}

// WhereAssemblyID applies the entql uint64 predicate on the assembly_id field.
func (f *CouponFilter) WhereAssemblyID(p entql.Uint64P) {
	f.Where(p.Field(coupon.FieldAssemblyID))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *CouponFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(coupon.FieldPlanID))
}

// WhereTemplateID applies the entql uint64 predicate on the template_id field.
func (f *CouponFilter) WhereTemplateID(p entql.Uint64P) {
	f.Where(p.Field(coupon.FieldTemplateID))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *CouponFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(coupon.FieldOrderID))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(coupon.FieldName))
}

// WhereRule applies the entql uint8 predicate on the rule field.
func (f *CouponFilter) WhereRule(p entql.Uint8P) {
	f.Where(p.Field(coupon.FieldRule))
}

// WhereMultiple applies the entql bool predicate on the multiple field.
func (f *CouponFilter) WhereMultiple(p entql.BoolP) {
	f.Where(p.Field(coupon.FieldMultiple))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *CouponFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(coupon.FieldAmount))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CouponFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(coupon.FieldCode))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *CouponFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(coupon.FieldExpiresAt))
}

// WhereUsedAt applies the entql time.Time predicate on the used_at field.
func (f *CouponFilter) WhereUsedAt(p entql.TimeP) {
	f.Where(p.Field(coupon.FieldUsedAt))
}

// WhereDuration applies the entql json.RawMessage predicate on the duration field.
func (f *CouponFilter) WhereDuration(p entql.BytesP) {
	f.Where(p.Field(coupon.FieldDuration))
}

// WherePlans applies the entql json.RawMessage predicate on the plans field.
func (f *CouponFilter) WherePlans(p entql.BytesP) {
	f.Where(p.Field(coupon.FieldPlans))
}

// WhereCities applies the entql json.RawMessage predicate on the cities field.
func (f *CouponFilter) WhereCities(p entql.BytesP) {
	f.Where(p.Field(coupon.FieldCities))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *CouponFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *CouponFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssembly applies a predicate to check if query has an edge assembly.
func (f *CouponFilter) WhereHasAssembly() {
	f.Where(entql.HasEdge("assembly"))
}

// WhereHasAssemblyWith applies a predicate to check if query has an edge assembly with a given conditions (other predicates).
func (f *CouponFilter) WhereHasAssemblyWith(preds ...predicate.CouponAssembly) {
	f.Where(entql.HasEdgeWith("assembly", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *CouponFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *CouponFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTemplate applies a predicate to check if query has an edge template.
func (f *CouponFilter) WhereHasTemplate() {
	f.Where(entql.HasEdge("template"))
}

// WhereHasTemplateWith applies a predicate to check if query has an edge template with a given conditions (other predicates).
func (f *CouponFilter) WhereHasTemplateWith(preds ...predicate.CouponTemplate) {
	f.Where(entql.HasEdgeWith("template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *CouponFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *CouponFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (caq *CouponAssemblyQuery) addPredicate(pred func(s *sql.Selector)) {
	caq.predicates = append(caq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponAssemblyQuery builder.
func (caq *CouponAssemblyQuery) Filter() *CouponAssemblyFilter {
	return &CouponAssemblyFilter{config: caq.config, predicateAdder: caq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponAssemblyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponAssemblyMutation builder.
func (m *CouponAssemblyMutation) Filter() *CouponAssemblyFilter {
	return &CouponAssemblyFilter{config: m.config, predicateAdder: m}
}

// CouponAssemblyFilter provides a generic filtering capability at runtime for CouponAssemblyQuery.
type CouponAssemblyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponAssemblyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CouponAssemblyFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(couponassembly.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CouponAssemblyFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(couponassembly.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CouponAssemblyFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(couponassembly.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CouponAssemblyFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(couponassembly.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CouponAssemblyFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(couponassembly.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CouponAssemblyFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(couponassembly.FieldRemark))
}

// WhereTemplateID applies the entql uint64 predicate on the template_id field.
func (f *CouponAssemblyFilter) WhereTemplateID(p entql.Uint64P) {
	f.Where(p.Field(couponassembly.FieldTemplateID))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponAssemblyFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(couponassembly.FieldName))
}

// WhereNumber applies the entql int predicate on the number field.
func (f *CouponAssemblyFilter) WhereNumber(p entql.IntP) {
	f.Where(p.Field(couponassembly.FieldNumber))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *CouponAssemblyFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(couponassembly.FieldAmount))
}

// WhereTarget applies the entql uint8 predicate on the target field.
func (f *CouponAssemblyFilter) WhereTarget(p entql.Uint8P) {
	f.Where(p.Field(couponassembly.FieldTarget))
}

// WhereMeta applies the entql json.RawMessage predicate on the meta field.
func (f *CouponAssemblyFilter) WhereMeta(p entql.BytesP) {
	f.Where(p.Field(couponassembly.FieldMeta))
}

// WhereHasTemplate applies a predicate to check if query has an edge template.
func (f *CouponAssemblyFilter) WhereHasTemplate() {
	f.Where(entql.HasEdge("template"))
}

// WhereHasTemplateWith applies a predicate to check if query has an edge template with a given conditions (other predicates).
func (f *CouponAssemblyFilter) WhereHasTemplateWith(preds ...predicate.CouponTemplate) {
	f.Where(entql.HasEdgeWith("template", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ctq *CouponTemplateQuery) addPredicate(pred func(s *sql.Selector)) {
	ctq.predicates = append(ctq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CouponTemplateQuery builder.
func (ctq *CouponTemplateQuery) Filter() *CouponTemplateFilter {
	return &CouponTemplateFilter{config: ctq.config, predicateAdder: ctq}
}

// addPredicate implements the predicateAdder interface.
func (m *CouponTemplateMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CouponTemplateMutation builder.
func (m *CouponTemplateMutation) Filter() *CouponTemplateFilter {
	return &CouponTemplateFilter{config: m.config, predicateAdder: m}
}

// CouponTemplateFilter provides a generic filtering capability at runtime for CouponTemplateQuery.
type CouponTemplateFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CouponTemplateFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CouponTemplateFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(coupontemplate.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CouponTemplateFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(coupontemplate.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CouponTemplateFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(coupontemplate.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CouponTemplateFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(coupontemplate.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CouponTemplateFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(coupontemplate.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CouponTemplateFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(coupontemplate.FieldRemark))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *CouponTemplateFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(coupontemplate.FieldEnable))
}

// WhereName applies the entql string predicate on the name field.
func (f *CouponTemplateFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(coupontemplate.FieldName))
}

// WhereMeta applies the entql json.RawMessage predicate on the meta field.
func (f *CouponTemplateFilter) WhereMeta(p entql.BytesP) {
	f.Where(p.Field(coupontemplate.FieldMeta))
}

// WhereHasCoupons applies a predicate to check if query has an edge coupons.
func (f *CouponTemplateFilter) WhereHasCoupons() {
	f.Where(entql.HasEdge("coupons"))
}

// WhereHasCouponsWith applies a predicate to check if query has an edge coupons with a given conditions (other predicates).
func (f *CouponTemplateFilter) WhereHasCouponsWith(preds ...predicate.Coupon) {
	f.Where(entql.HasEdgeWith("coupons", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EbikeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EbikeQuery builder.
func (eq *EbikeQuery) Filter() *EbikeFilter {
	return &EbikeFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EbikeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EbikeMutation builder.
func (m *EbikeMutation) Filter() *EbikeFilter {
	return &EbikeFilter{config: m.config, predicateAdder: m}
}

// EbikeFilter provides a generic filtering capability at runtime for EbikeQuery.
type EbikeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EbikeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EbikeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(ebike.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EbikeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(ebike.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EbikeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(ebike.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EbikeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(ebike.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EbikeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(ebike.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EbikeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(ebike.FieldRemark))
}

// WhereBrandID applies the entql uint64 predicate on the brand_id field.
func (f *EbikeFilter) WhereBrandID(p entql.Uint64P) {
	f.Where(p.Field(ebike.FieldBrandID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *EbikeFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(ebike.FieldRiderID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *EbikeFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(ebike.FieldStoreID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EbikeFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(ebike.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *EbikeFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(ebike.FieldStationID))
}

// WhereStatus applies the entql other predicate on the status field.
func (f *EbikeFilter) WhereStatus(p entql.OtherP) {
	f.Where(p.Field(ebike.FieldStatus))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *EbikeFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(ebike.FieldEnable))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *EbikeFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(ebike.FieldSn))
}

// WherePlate applies the entql string predicate on the plate field.
func (f *EbikeFilter) WherePlate(p entql.StringP) {
	f.Where(p.Field(ebike.FieldPlate))
}

// WhereMachine applies the entql string predicate on the machine field.
func (f *EbikeFilter) WhereMachine(p entql.StringP) {
	f.Where(p.Field(ebike.FieldMachine))
}

// WhereSim applies the entql string predicate on the sim field.
func (f *EbikeFilter) WhereSim(p entql.StringP) {
	f.Where(p.Field(ebike.FieldSim))
}

// WhereColor applies the entql string predicate on the color field.
func (f *EbikeFilter) WhereColor(p entql.StringP) {
	f.Where(p.Field(ebike.FieldColor))
}

// WhereExFactory applies the entql string predicate on the ex_factory field.
func (f *EbikeFilter) WhereExFactory(p entql.StringP) {
	f.Where(p.Field(ebike.FieldExFactory))
}

// WhereHasBrand applies a predicate to check if query has an edge brand.
func (f *EbikeFilter) WhereHasBrand() {
	f.Where(entql.HasEdge("brand"))
}

// WhereHasBrandWith applies a predicate to check if query has an edge brand with a given conditions (other predicates).
func (f *EbikeFilter) WhereHasBrandWith(preds ...predicate.EbikeBrand) {
	f.Where(entql.HasEdgeWith("brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *EbikeFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *EbikeFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *EbikeFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *EbikeFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EbikeFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EbikeFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *EbikeFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *EbikeFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAllocates applies a predicate to check if query has an edge allocates.
func (f *EbikeFilter) WhereHasAllocates() {
	f.Where(entql.HasEdge("allocates"))
}

// WhereHasAllocatesWith applies a predicate to check if query has an edge allocates with a given conditions (other predicates).
func (f *EbikeFilter) WhereHasAllocatesWith(preds ...predicate.Allocate) {
	f.Where(entql.HasEdgeWith("allocates", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ebq *EbikeBrandQuery) addPredicate(pred func(s *sql.Selector)) {
	ebq.predicates = append(ebq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EbikeBrandQuery builder.
func (ebq *EbikeBrandQuery) Filter() *EbikeBrandFilter {
	return &EbikeBrandFilter{config: ebq.config, predicateAdder: ebq}
}

// addPredicate implements the predicateAdder interface.
func (m *EbikeBrandMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EbikeBrandMutation builder.
func (m *EbikeBrandMutation) Filter() *EbikeBrandFilter {
	return &EbikeBrandFilter{config: m.config, predicateAdder: m}
}

// EbikeBrandFilter provides a generic filtering capability at runtime for EbikeBrandQuery.
type EbikeBrandFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EbikeBrandFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EbikeBrandFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(ebikebrand.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EbikeBrandFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(ebikebrand.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EbikeBrandFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(ebikebrand.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EbikeBrandFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(ebikebrand.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EbikeBrandFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(ebikebrand.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EbikeBrandFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(ebikebrand.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EbikeBrandFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(ebikebrand.FieldRemark))
}

// WhereName applies the entql string predicate on the name field.
func (f *EbikeBrandFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(ebikebrand.FieldName))
}

// WhereCover applies the entql string predicate on the cover field.
func (f *EbikeBrandFilter) WhereCover(p entql.StringP) {
	f.Where(p.Field(ebikebrand.FieldCover))
}

// addPredicate implements the predicateAdder interface.
func (eq *EmployeeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmployeeQuery builder.
func (eq *EmployeeQuery) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmployeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmployeeMutation builder.
func (m *EmployeeMutation) Filter() *EmployeeFilter {
	return &EmployeeFilter{config: m.config, predicateAdder: m}
}

// EmployeeFilter provides a generic filtering capability at runtime for EmployeeQuery.
type EmployeeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmployeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EmployeeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(employee.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmployeeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmployeeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmployeeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EmployeeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(employee.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EmployeeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(employee.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EmployeeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(employee.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EmployeeFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(employee.FieldCityID))
}

// WhereSn applies the entql [16]byte predicate on the sn field.
func (f *EmployeeFilter) WhereSn(p entql.ValueP) {
	f.Where(p.Field(employee.FieldSn))
}

// WhereName applies the entql string predicate on the name field.
func (f *EmployeeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(employee.FieldName))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *EmployeeFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(employee.FieldPhone))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *EmployeeFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(employee.FieldEnable))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EmployeeFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *EmployeeFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAttendances applies a predicate to check if query has an edge attendances.
func (f *EmployeeFilter) WhereHasAttendances() {
	f.Where(entql.HasEdge("attendances"))
}

// WhereHasAttendancesWith applies a predicate to check if query has an edge attendances with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasAttendancesWith(preds ...predicate.Attendance) {
	f.Where(entql.HasEdgeWith("attendances", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *EmployeeFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExchanges applies a predicate to check if query has an edge exchanges.
func (f *EmployeeFilter) WhereHasExchanges() {
	f.Where(entql.HasEdge("exchanges"))
}

// WhereHasExchangesWith applies a predicate to check if query has an edge exchanges with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasExchangesWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchanges", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommissions applies a predicate to check if query has an edge commissions.
func (f *EmployeeFilter) WhereHasCommissions() {
	f.Where(entql.HasEdge("commissions"))
}

// WhereHasCommissionsWith applies a predicate to check if query has an edge commissions with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasCommissionsWith(preds ...predicate.Commission) {
	f.Where(entql.HasEdgeWith("commissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssistances applies a predicate to check if query has an edge assistances.
func (f *EmployeeFilter) WhereHasAssistances() {
	f.Where(entql.HasEdge("assistances"))
}

// WhereHasAssistancesWith applies a predicate to check if query has an edge assistances with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasAssistancesWith(preds ...predicate.Assistance) {
	f.Where(entql.HasEdgeWith("assistances", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EnterpriseQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseQuery builder.
func (eq *EnterpriseQuery) Filter() *EnterpriseFilter {
	return &EnterpriseFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseMutation builder.
func (m *EnterpriseMutation) Filter() *EnterpriseFilter {
	return &EnterpriseFilter{config: m.config, predicateAdder: m}
}

// EnterpriseFilter provides a generic filtering capability at runtime for EnterpriseQuery.
type EnterpriseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprise.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprise.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprise.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EnterpriseFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(enterprise.FieldCityID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EnterpriseFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldName))
}

// WhereCompanyName applies the entql string predicate on the company_name field.
func (f *EnterpriseFilter) WhereCompanyName(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldCompanyName))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *EnterpriseFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(enterprise.FieldStatus))
}

// WhereContactName applies the entql string predicate on the contact_name field.
func (f *EnterpriseFilter) WhereContactName(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldContactName))
}

// WhereContactPhone applies the entql string predicate on the contact_phone field.
func (f *EnterpriseFilter) WhereContactPhone(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldContactPhone))
}

// WhereIdcardNumber applies the entql string predicate on the idcard_number field.
func (f *EnterpriseFilter) WhereIdcardNumber(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldIdcardNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *EnterpriseFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldAddress))
}

// WherePayment applies the entql uint8 predicate on the payment field.
func (f *EnterpriseFilter) WherePayment(p entql.Uint8P) {
	f.Where(p.Field(enterprise.FieldPayment))
}

// WhereDeposit applies the entql float64 predicate on the deposit field.
func (f *EnterpriseFilter) WhereDeposit(p entql.Float64P) {
	f.Where(p.Field(enterprise.FieldDeposit))
}

// WhereBalance applies the entql float64 predicate on the balance field.
func (f *EnterpriseFilter) WhereBalance(p entql.Float64P) {
	f.Where(p.Field(enterprise.FieldBalance))
}

// WherePrepaymentTotal applies the entql float64 predicate on the prepayment_total field.
func (f *EnterpriseFilter) WherePrepaymentTotal(p entql.Float64P) {
	f.Where(p.Field(enterprise.FieldPrepaymentTotal))
}

// WhereSuspensedAt applies the entql time.Time predicate on the suspensed_at field.
func (f *EnterpriseFilter) WhereSuspensedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldSuspensedAt))
}

// WhereAgent applies the entql bool predicate on the agent field.
func (f *EnterpriseFilter) WhereAgent(p entql.BoolP) {
	f.Where(p.Field(enterprise.FieldAgent))
}

// WhereUseStore applies the entql bool predicate on the use_store field.
func (f *EnterpriseFilter) WhereUseStore(p entql.BoolP) {
	f.Where(p.Field(enterprise.FieldUseStore))
}

// WhereDays applies the entql json.RawMessage predicate on the days field.
func (f *EnterpriseFilter) WhereDays(p entql.BytesP) {
	f.Where(p.Field(enterprise.FieldDays))
}

// WhereDistance applies the entql float64 predicate on the distance field.
func (f *EnterpriseFilter) WhereDistance(p entql.Float64P) {
	f.Where(p.Field(enterprise.FieldDistance))
}

// WhereRechargeAmount applies the entql json.RawMessage predicate on the recharge_amount field.
func (f *EnterpriseFilter) WhereRechargeAmount(p entql.BytesP) {
	f.Where(p.Field(enterprise.FieldRechargeAmount))
}

// WhereSignType applies the entql string predicate on the sign_type field.
func (f *EnterpriseFilter) WhereSignType(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldSignType))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EnterpriseFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiders applies a predicate to check if query has an edge riders.
func (f *EnterpriseFilter) WhereHasRiders() {
	f.Where(entql.HasEdge("riders"))
}

// WhereHasRidersWith applies a predicate to check if query has an edge riders with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasRidersWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("riders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContracts applies a predicate to check if query has an edge contracts.
func (f *EnterpriseFilter) WhereHasContracts() {
	f.Where(entql.HasEdge("contracts"))
}

// WhereHasContractsWith applies a predicate to check if query has an edge contracts with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasContractsWith(preds ...predicate.EnterpriseContract) {
	f.Where(entql.HasEdgeWith("contracts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrices applies a predicate to check if query has an edge prices.
func (f *EnterpriseFilter) WhereHasPrices() {
	f.Where(entql.HasEdge("prices"))
}

// WhereHasPricesWith applies a predicate to check if query has an edge prices with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasPricesWith(preds ...predicate.EnterprisePrice) {
	f.Where(entql.HasEdgeWith("prices", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribes applies a predicate to check if query has an edge subscribes.
func (f *EnterpriseFilter) WhereHasSubscribes() {
	f.Where(entql.HasEdge("subscribes"))
}

// WhereHasSubscribesWith applies a predicate to check if query has an edge subscribes with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasSubscribesWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStatements applies a predicate to check if query has an edge statements.
func (f *EnterpriseFilter) WhereHasStatements() {
	f.Where(entql.HasEdge("statements"))
}

// WhereHasStatementsWith applies a predicate to check if query has an edge statements with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasStatementsWith(preds ...predicate.EnterpriseStatement) {
	f.Where(entql.HasEdgeWith("statements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStations applies a predicate to check if query has an edge stations.
func (f *EnterpriseFilter) WhereHasStations() {
	f.Where(entql.HasEdge("stations"))
}

// WhereHasStationsWith applies a predicate to check if query has an edge stations with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasStationsWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("stations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBills applies a predicate to check if query has an edge bills.
func (f *EnterpriseFilter) WhereHasBills() {
	f.Where(entql.HasEdge("bills"))
}

// WhereHasBillsWith applies a predicate to check if query has an edge bills with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasBillsWith(preds ...predicate.EnterpriseBill) {
	f.Where(entql.HasEdgeWith("bills", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBatteries applies a predicate to check if query has an edge batteries.
func (f *EnterpriseFilter) WhereHasBatteries() {
	f.Where(entql.HasEdge("batteries"))
}

// WhereHasBatteriesWith applies a predicate to check if query has an edge batteries with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasBatteriesWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("batteries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgents applies a predicate to check if query has an edge agents.
func (f *EnterpriseFilter) WhereHasAgents() {
	f.Where(entql.HasEdge("agents"))
}

// WhereHasAgentsWith applies a predicate to check if query has an edge agents with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasAgentsWith(preds ...predicate.Agent) {
	f.Where(entql.HasEdgeWith("agents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *EnterpriseFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *EnterpriseFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSwapPutinBatteries applies a predicate to check if query has an edge swap_putin_batteries.
func (f *EnterpriseFilter) WhereHasSwapPutinBatteries() {
	f.Where(entql.HasEdge("swap_putin_batteries"))
}

// WhereHasSwapPutinBatteriesWith applies a predicate to check if query has an edge swap_putin_batteries with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasSwapPutinBatteriesWith(preds ...predicate.EnterpriseBatterySwap) {
	f.Where(entql.HasEdgeWith("swap_putin_batteries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSwapPutoutBatteries applies a predicate to check if query has an edge swap_putout_batteries.
func (f *EnterpriseFilter) WhereHasSwapPutoutBatteries() {
	f.Where(entql.HasEdge("swap_putout_batteries"))
}

// WhereHasSwapPutoutBatteriesWith applies a predicate to check if query has an edge swap_putout_batteries with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasSwapPutoutBatteriesWith(preds ...predicate.EnterpriseBatterySwap) {
	f.Where(entql.HasEdgeWith("swap_putout_batteries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ebsq *EnterpriseBatterySwapQuery) addPredicate(pred func(s *sql.Selector)) {
	ebsq.predicates = append(ebsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseBatterySwapQuery builder.
func (ebsq *EnterpriseBatterySwapQuery) Filter() *EnterpriseBatterySwapFilter {
	return &EnterpriseBatterySwapFilter{config: ebsq.config, predicateAdder: ebsq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseBatterySwapMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseBatterySwapMutation builder.
func (m *EnterpriseBatterySwapMutation) Filter() *EnterpriseBatterySwapFilter {
	return &EnterpriseBatterySwapFilter{config: m.config, predicateAdder: m}
}

// EnterpriseBatterySwapFilter provides a generic filtering capability at runtime for EnterpriseBatterySwapQuery.
type EnterpriseBatterySwapFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseBatterySwapFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseBatterySwapFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseBatterySwapFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisebatteryswap.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseBatterySwapFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisebatteryswap.FieldUpdatedAt))
}

// WhereExchangeID applies the entql uint64 predicate on the exchange_id field.
func (f *EnterpriseBatterySwapFilter) WhereExchangeID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldExchangeID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *EnterpriseBatterySwapFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldCabinetID))
}

// WherePutinID applies the entql uint64 predicate on the putin_id field.
func (f *EnterpriseBatterySwapFilter) WherePutinID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldPutinID))
}

// WherePutinSn applies the entql string predicate on the putin_sn field.
func (f *EnterpriseBatterySwapFilter) WherePutinSn(p entql.StringP) {
	f.Where(p.Field(enterprisebatteryswap.FieldPutinSn))
}

// WherePutinEnterpriseID applies the entql uint64 predicate on the putin_enterprise_id field.
func (f *EnterpriseBatterySwapFilter) WherePutinEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldPutinEnterpriseID))
}

// WherePutinStationID applies the entql uint64 predicate on the putin_station_id field.
func (f *EnterpriseBatterySwapFilter) WherePutinStationID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldPutinStationID))
}

// WherePutoutID applies the entql uint64 predicate on the putout_id field.
func (f *EnterpriseBatterySwapFilter) WherePutoutID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldPutoutID))
}

// WherePutoutSn applies the entql string predicate on the putout_sn field.
func (f *EnterpriseBatterySwapFilter) WherePutoutSn(p entql.StringP) {
	f.Where(p.Field(enterprisebatteryswap.FieldPutoutSn))
}

// WherePutoutEnterpriseID applies the entql uint64 predicate on the putout_enterprise_id field.
func (f *EnterpriseBatterySwapFilter) WherePutoutEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldPutoutEnterpriseID))
}

// WherePutoutStationID applies the entql uint64 predicate on the putout_station_id field.
func (f *EnterpriseBatterySwapFilter) WherePutoutStationID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebatteryswap.FieldPutoutStationID))
}

// WhereHasExchange applies a predicate to check if query has an edge exchange.
func (f *EnterpriseBatterySwapFilter) WhereHasExchange() {
	f.Where(entql.HasEdge("exchange"))
}

// WhereHasExchangeWith applies a predicate to check if query has an edge exchange with a given conditions (other predicates).
func (f *EnterpriseBatterySwapFilter) WhereHasExchangeWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchange", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *EnterpriseBatterySwapFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *EnterpriseBatterySwapFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPutin applies a predicate to check if query has an edge putin.
func (f *EnterpriseBatterySwapFilter) WhereHasPutin() {
	f.Where(entql.HasEdge("putin"))
}

// WhereHasPutinWith applies a predicate to check if query has an edge putin with a given conditions (other predicates).
func (f *EnterpriseBatterySwapFilter) WhereHasPutinWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("putin", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPutinEnterprise applies a predicate to check if query has an edge putin_enterprise.
func (f *EnterpriseBatterySwapFilter) WhereHasPutinEnterprise() {
	f.Where(entql.HasEdge("putin_enterprise"))
}

// WhereHasPutinEnterpriseWith applies a predicate to check if query has an edge putin_enterprise with a given conditions (other predicates).
func (f *EnterpriseBatterySwapFilter) WhereHasPutinEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("putin_enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPutinStation applies a predicate to check if query has an edge putin_station.
func (f *EnterpriseBatterySwapFilter) WhereHasPutinStation() {
	f.Where(entql.HasEdge("putin_station"))
}

// WhereHasPutinStationWith applies a predicate to check if query has an edge putin_station with a given conditions (other predicates).
func (f *EnterpriseBatterySwapFilter) WhereHasPutinStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("putin_station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPutout applies a predicate to check if query has an edge putout.
func (f *EnterpriseBatterySwapFilter) WhereHasPutout() {
	f.Where(entql.HasEdge("putout"))
}

// WhereHasPutoutWith applies a predicate to check if query has an edge putout with a given conditions (other predicates).
func (f *EnterpriseBatterySwapFilter) WhereHasPutoutWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("putout", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPutoutEnterprise applies a predicate to check if query has an edge putout_enterprise.
func (f *EnterpriseBatterySwapFilter) WhereHasPutoutEnterprise() {
	f.Where(entql.HasEdge("putout_enterprise"))
}

// WhereHasPutoutEnterpriseWith applies a predicate to check if query has an edge putout_enterprise with a given conditions (other predicates).
func (f *EnterpriseBatterySwapFilter) WhereHasPutoutEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("putout_enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPutoutStation applies a predicate to check if query has an edge putout_station.
func (f *EnterpriseBatterySwapFilter) WhereHasPutoutStation() {
	f.Where(entql.HasEdge("putout_station"))
}

// WhereHasPutoutStationWith applies a predicate to check if query has an edge putout_station with a given conditions (other predicates).
func (f *EnterpriseBatterySwapFilter) WhereHasPutoutStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("putout_station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ebq *EnterpriseBillQuery) addPredicate(pred func(s *sql.Selector)) {
	ebq.predicates = append(ebq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseBillQuery builder.
func (ebq *EnterpriseBillQuery) Filter() *EnterpriseBillFilter {
	return &EnterpriseBillFilter{config: ebq.config, predicateAdder: ebq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseBillMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseBillMutation builder.
func (m *EnterpriseBillMutation) Filter() *EnterpriseBillFilter {
	return &EnterpriseBillFilter{config: m.config, predicateAdder: m}
}

// EnterpriseBillFilter provides a generic filtering capability at runtime for EnterpriseBillQuery.
type EnterpriseBillFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseBillFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseBillFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseBillFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseBillFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseBillFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseBillFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprisebill.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseBillFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprisebill.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseBillFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprisebill.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *EnterpriseBillFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldRiderID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EnterpriseBillFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldCityID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *EnterpriseBillFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldStationID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *EnterpriseBillFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldSubscribeID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterpriseBillFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldEnterpriseID))
}

// WhereStatementID applies the entql uint64 predicate on the statement_id field.
func (f *EnterpriseBillFilter) WhereStatementID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldStatementID))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *EnterpriseBillFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *EnterpriseBillFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldEnd))
}

// WhereDays applies the entql int predicate on the days field.
func (f *EnterpriseBillFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(enterprisebill.FieldDays))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *EnterpriseBillFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(enterprisebill.FieldPrice))
}

// WhereCost applies the entql float64 predicate on the cost field.
func (f *EnterpriseBillFilter) WhereCost(p entql.Float64P) {
	f.Where(p.Field(enterprisebill.FieldCost))
}

// WhereModel applies the entql string predicate on the model field.
func (f *EnterpriseBillFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(enterprisebill.FieldModel))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *EnterpriseBillFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EnterpriseBillFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *EnterpriseBillFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterpriseBillFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStatement applies a predicate to check if query has an edge statement.
func (f *EnterpriseBillFilter) WhereHasStatement() {
	f.Where(entql.HasEdge("statement"))
}

// WhereHasStatementWith applies a predicate to check if query has an edge statement with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasStatementWith(preds ...predicate.EnterpriseStatement) {
	f.Where(entql.HasEdgeWith("statement", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *EnterpriseBillFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ecq *EnterpriseContractQuery) addPredicate(pred func(s *sql.Selector)) {
	ecq.predicates = append(ecq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseContractQuery builder.
func (ecq *EnterpriseContractQuery) Filter() *EnterpriseContractFilter {
	return &EnterpriseContractFilter{config: ecq.config, predicateAdder: ecq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseContractMutation builder.
func (m *EnterpriseContractMutation) Filter() *EnterpriseContractFilter {
	return &EnterpriseContractFilter{config: m.config, predicateAdder: m}
}

// EnterpriseContractFilter provides a generic filtering capability at runtime for EnterpriseContractQuery.
type EnterpriseContractFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisecontract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprisecontract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprisecontract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprisecontract.FieldRemark))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterpriseContractFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisecontract.FieldEnterpriseID))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *EnterpriseContractFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *EnterpriseContractFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldEnd))
}

// WhereFile applies the entql string predicate on the file field.
func (f *EnterpriseContractFilter) WhereFile(p entql.StringP) {
	f.Where(p.Field(enterprisecontract.FieldFile))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterpriseContractFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterpriseContractFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (epq *EnterprisePrepaymentQuery) addPredicate(pred func(s *sql.Selector)) {
	epq.predicates = append(epq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterprisePrepaymentQuery builder.
func (epq *EnterprisePrepaymentQuery) Filter() *EnterprisePrepaymentFilter {
	return &EnterprisePrepaymentFilter{config: epq.config, predicateAdder: epq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterprisePrepaymentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterprisePrepaymentMutation builder.
func (m *EnterprisePrepaymentMutation) Filter() *EnterprisePrepaymentFilter {
	return &EnterprisePrepaymentFilter{config: m.config, predicateAdder: m}
}

// EnterprisePrepaymentFilter provides a generic filtering capability at runtime for EnterprisePrepaymentQuery.
type EnterprisePrepaymentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnterprisePrepaymentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterprisePrepaymentFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprepayment.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterprisePrepaymentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprepayment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterprisePrepaymentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprepayment.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterprisePrepaymentFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterpriseprepayment.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterprisePrepaymentFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterpriseprepayment.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterprisePrepaymentFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterpriseprepayment.FieldRemark))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterprisePrepaymentFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprepayment.FieldEnterpriseID))
}

// WhereAgentID applies the entql uint64 predicate on the agent_id field.
func (f *EnterprisePrepaymentFilter) WhereAgentID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprepayment.FieldAgentID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *EnterprisePrepaymentFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(enterpriseprepayment.FieldAmount))
}

// WherePayway applies the entql other predicate on the payway field.
func (f *EnterprisePrepaymentFilter) WherePayway(p entql.OtherP) {
	f.Where(p.Field(enterpriseprepayment.FieldPayway))
}

// WhereTradeNo applies the entql string predicate on the trade_no field.
func (f *EnterprisePrepaymentFilter) WhereTradeNo(p entql.StringP) {
	f.Where(p.Field(enterpriseprepayment.FieldTradeNo))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterprisePrepaymentFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterprisePrepaymentFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgent applies a predicate to check if query has an edge agent.
func (f *EnterprisePrepaymentFilter) WhereHasAgent() {
	f.Where(entql.HasEdge("agent"))
}

// WhereHasAgentWith applies a predicate to check if query has an edge agent with a given conditions (other predicates).
func (f *EnterprisePrepaymentFilter) WhereHasAgentWith(preds ...predicate.Agent) {
	f.Where(entql.HasEdgeWith("agent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (epq *EnterprisePriceQuery) addPredicate(pred func(s *sql.Selector)) {
	epq.predicates = append(epq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterprisePriceQuery builder.
func (epq *EnterprisePriceQuery) Filter() *EnterprisePriceFilter {
	return &EnterprisePriceFilter{config: epq.config, predicateAdder: epq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterprisePriceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterprisePriceMutation builder.
func (m *EnterprisePriceMutation) Filter() *EnterprisePriceFilter {
	return &EnterprisePriceFilter{config: m.config, predicateAdder: m}
}

// EnterprisePriceFilter provides a generic filtering capability at runtime for EnterprisePriceQuery.
type EnterprisePriceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnterprisePriceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterprisePriceFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprice.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterprisePriceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprice.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterprisePriceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprice.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterprisePriceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprice.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterprisePriceFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterpriseprice.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterprisePriceFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterpriseprice.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterprisePriceFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterpriseprice.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EnterprisePriceFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprice.FieldCityID))
}

// WhereBrandID applies the entql uint64 predicate on the brand_id field.
func (f *EnterprisePriceFilter) WhereBrandID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprice.FieldBrandID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterprisePriceFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprice.FieldEnterpriseID))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *EnterprisePriceFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(enterpriseprice.FieldPrice))
}

// WhereModel applies the entql string predicate on the model field.
func (f *EnterprisePriceFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(enterpriseprice.FieldModel))
}

// WhereIntelligent applies the entql bool predicate on the intelligent field.
func (f *EnterprisePriceFilter) WhereIntelligent(p entql.BoolP) {
	f.Where(p.Field(enterpriseprice.FieldIntelligent))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EnterprisePriceFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EnterprisePriceFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBrand applies a predicate to check if query has an edge brand.
func (f *EnterprisePriceFilter) WhereHasBrand() {
	f.Where(entql.HasEdge("brand"))
}

// WhereHasBrandWith applies a predicate to check if query has an edge brand with a given conditions (other predicates).
func (f *EnterprisePriceFilter) WhereHasBrandWith(preds ...predicate.EbikeBrand) {
	f.Where(entql.HasEdgeWith("brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterprisePriceFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterprisePriceFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (esq *EnterpriseStatementQuery) addPredicate(pred func(s *sql.Selector)) {
	esq.predicates = append(esq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseStatementQuery builder.
func (esq *EnterpriseStatementQuery) Filter() *EnterpriseStatementFilter {
	return &EnterpriseStatementFilter{config: esq.config, predicateAdder: esq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseStatementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseStatementMutation builder.
func (m *EnterpriseStatementMutation) Filter() *EnterpriseStatementFilter {
	return &EnterpriseStatementFilter{config: m.config, predicateAdder: m}
}

// EnterpriseStatementFilter provides a generic filtering capability at runtime for EnterpriseStatementQuery.
type EnterpriseStatementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseStatementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseStatementFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestatement.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseStatementFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseStatementFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseStatementFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseStatementFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprisestatement.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseStatementFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprisestatement.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseStatementFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprisestatement.FieldRemark))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterpriseStatementFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestatement.FieldEnterpriseID))
}

// WhereCost applies the entql float64 predicate on the cost field.
func (f *EnterpriseStatementFilter) WhereCost(p entql.Float64P) {
	f.Where(p.Field(enterprisestatement.FieldCost))
}

// WhereSettledAt applies the entql time.Time predicate on the settled_at field.
func (f *EnterpriseStatementFilter) WhereSettledAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldSettledAt))
}

// WhereDays applies the entql int predicate on the days field.
func (f *EnterpriseStatementFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(enterprisestatement.FieldDays))
}

// WhereRiderNumber applies the entql int predicate on the rider_number field.
func (f *EnterpriseStatementFilter) WhereRiderNumber(p entql.IntP) {
	f.Where(p.Field(enterprisestatement.FieldRiderNumber))
}

// WhereDate applies the entql time.Time predicate on the date field.
func (f *EnterpriseStatementFilter) WhereDate(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldDate))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *EnterpriseStatementFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *EnterpriseStatementFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldEnd))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterpriseStatementFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterpriseStatementFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBills applies a predicate to check if query has an edge bills.
func (f *EnterpriseStatementFilter) WhereHasBills() {
	f.Where(entql.HasEdge("bills"))
}

// WhereHasBillsWith applies a predicate to check if query has an edge bills with a given conditions (other predicates).
func (f *EnterpriseStatementFilter) WhereHasBillsWith(preds ...predicate.EnterpriseBill) {
	f.Where(entql.HasEdgeWith("bills", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (esq *EnterpriseStationQuery) addPredicate(pred func(s *sql.Selector)) {
	esq.predicates = append(esq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseStationQuery builder.
func (esq *EnterpriseStationQuery) Filter() *EnterpriseStationFilter {
	return &EnterpriseStationFilter{config: esq.config, predicateAdder: esq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseStationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseStationMutation builder.
func (m *EnterpriseStationMutation) Filter() *EnterpriseStationFilter {
	return &EnterpriseStationFilter{config: m.config, predicateAdder: m}
}

// EnterpriseStationFilter provides a generic filtering capability at runtime for EnterpriseStationQuery.
type EnterpriseStationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseStationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseStationFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseStationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseStationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestation.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseStationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestation.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseStationFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprisestation.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseStationFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprisestation.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseStationFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprisestation.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EnterpriseStationFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestation.FieldCityID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterpriseStationFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestation.FieldEnterpriseID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EnterpriseStationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(enterprisestation.FieldName))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EnterpriseStationFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterpriseStationFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgents applies a predicate to check if query has an edge agents.
func (f *EnterpriseStationFilter) WhereHasAgents() {
	f.Where(entql.HasEdge("agents"))
}

// WhereHasAgentsWith applies a predicate to check if query has an edge agents with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasAgentsWith(preds ...predicate.Agent) {
	f.Where(entql.HasEdgeWith("agents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSwapPutinBatteries applies a predicate to check if query has an edge swap_putin_batteries.
func (f *EnterpriseStationFilter) WhereHasSwapPutinBatteries() {
	f.Where(entql.HasEdge("swap_putin_batteries"))
}

// WhereHasSwapPutinBatteriesWith applies a predicate to check if query has an edge swap_putin_batteries with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasSwapPutinBatteriesWith(preds ...predicate.EnterpriseBatterySwap) {
	f.Where(entql.HasEdgeWith("swap_putin_batteries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSwapPutoutBatteries applies a predicate to check if query has an edge swap_putout_batteries.
func (f *EnterpriseStationFilter) WhereHasSwapPutoutBatteries() {
	f.Where(entql.HasEdge("swap_putout_batteries"))
}

// WhereHasSwapPutoutBatteriesWith applies a predicate to check if query has an edge swap_putout_batteries with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasSwapPutoutBatteriesWith(preds ...predicate.EnterpriseBatterySwap) {
	f.Where(entql.HasEdgeWith("swap_putout_batteries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *EnterpriseStationFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBatteries applies a predicate to check if query has an edge batteries.
func (f *EnterpriseStationFilter) WhereHasBatteries() {
	f.Where(entql.HasEdge("batteries"))
}

// WhereHasBatteriesWith applies a predicate to check if query has an edge batteries with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasBatteriesWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("batteries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *EnterpriseStationFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *ExceptionQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExceptionQuery builder.
func (eq *ExceptionQuery) Filter() *ExceptionFilter {
	return &ExceptionFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExceptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExceptionMutation builder.
func (m *ExceptionMutation) Filter() *ExceptionFilter {
	return &ExceptionFilter{config: m.config, predicateAdder: m}
}

// ExceptionFilter provides a generic filtering capability at runtime for ExceptionQuery.
type ExceptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ExceptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ExceptionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(exception.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ExceptionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(exception.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ExceptionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(exception.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ExceptionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(exception.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ExceptionFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(exception.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ExceptionFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(exception.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ExceptionFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(exception.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *ExceptionFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(exception.FieldCityID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *ExceptionFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(exception.FieldEmployeeID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ExceptionFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(exception.FieldStatus))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *ExceptionFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(exception.FieldStoreID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ExceptionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(exception.FieldName))
}

// WhereModel applies the entql string predicate on the model field.
func (f *ExceptionFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(exception.FieldModel))
}

// WhereNum applies the entql int predicate on the num field.
func (f *ExceptionFilter) WhereNum(p entql.IntP) {
	f.Where(p.Field(exception.FieldNum))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *ExceptionFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(exception.FieldReason))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ExceptionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(exception.FieldDescription))
}

// WhereAttachments applies the entql json.RawMessage predicate on the attachments field.
func (f *ExceptionFilter) WhereAttachments(p entql.BytesP) {
	f.Where(p.Field(exception.FieldAttachments))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *ExceptionFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *ExceptionFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *ExceptionFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *ExceptionFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *ExceptionFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *ExceptionFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *ExchangeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExchangeQuery builder.
func (eq *ExchangeQuery) Filter() *ExchangeFilter {
	return &ExchangeFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExchangeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExchangeMutation builder.
func (m *ExchangeMutation) Filter() *ExchangeFilter {
	return &ExchangeFilter{config: m.config, predicateAdder: m}
}

// ExchangeFilter provides a generic filtering capability at runtime for ExchangeQuery.
type ExchangeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ExchangeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ExchangeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ExchangeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ExchangeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ExchangeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ExchangeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ExchangeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ExchangeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(exchange.FieldRemark))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *ExchangeFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldSubscribeID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *ExchangeFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldCityID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *ExchangeFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldStoreID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *ExchangeFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *ExchangeFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldStationID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ExchangeFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldRiderID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *ExchangeFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldEmployeeID))
}

// WhereUUID applies the entql string predicate on the uuid field.
func (f *ExchangeFilter) WhereUUID(p entql.StringP) {
	f.Where(p.Field(exchange.FieldUUID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *ExchangeFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldCabinetID))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *ExchangeFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(exchange.FieldSuccess))
}

// WhereModel applies the entql string predicate on the model field.
func (f *ExchangeFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(exchange.FieldModel))
}

// WhereAlternative applies the entql bool predicate on the alternative field.
func (f *ExchangeFilter) WhereAlternative(p entql.BoolP) {
	f.Where(p.Field(exchange.FieldAlternative))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *ExchangeFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldStartAt))
}

// WhereFinishAt applies the entql time.Time predicate on the finish_at field.
func (f *ExchangeFilter) WhereFinishAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldFinishAt))
}

// WhereDuration applies the entql int predicate on the duration field.
func (f *ExchangeFilter) WhereDuration(p entql.IntP) {
	f.Where(p.Field(exchange.FieldDuration))
}

// WhereRiderBattery applies the entql string predicate on the rider_battery field.
func (f *ExchangeFilter) WhereRiderBattery(p entql.StringP) {
	f.Where(p.Field(exchange.FieldRiderBattery))
}

// WherePutinBattery applies the entql string predicate on the putin_battery field.
func (f *ExchangeFilter) WherePutinBattery(p entql.StringP) {
	f.Where(p.Field(exchange.FieldPutinBattery))
}

// WherePutoutBattery applies the entql string predicate on the putout_battery field.
func (f *ExchangeFilter) WherePutoutBattery(p entql.StringP) {
	f.Where(p.Field(exchange.FieldPutoutBattery))
}

// WhereCabinetInfo applies the entql json.RawMessage predicate on the cabinet_info field.
func (f *ExchangeFilter) WhereCabinetInfo(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldCabinetInfo))
}

// WhereEmpty applies the entql json.RawMessage predicate on the empty field.
func (f *ExchangeFilter) WhereEmpty(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldEmpty))
}

// WhereFully applies the entql json.RawMessage predicate on the fully field.
func (f *ExchangeFilter) WhereFully(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldFully))
}

// WhereSteps applies the entql json.RawMessage predicate on the steps field.
func (f *ExchangeFilter) WhereSteps(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldSteps))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *ExchangeFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(exchange.FieldMessage))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *ExchangeFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *ExchangeFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *ExchangeFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *ExchangeFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *ExchangeFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *ExchangeFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ExchangeFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *ExchangeFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *ExportQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExportQuery builder.
func (eq *ExportQuery) Filter() *ExportFilter {
	return &ExportFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExportMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExportMutation builder.
func (m *ExportMutation) Filter() *ExportFilter {
	return &ExportFilter{config: m.config, predicateAdder: m}
}

// ExportFilter provides a generic filtering capability at runtime for ExportQuery.
type ExportFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ExportFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ExportFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(export.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ExportFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(export.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ExportFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(export.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ExportFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(export.FieldDeletedAt))
}

// WhereManagerID applies the entql uint64 predicate on the manager_id field.
func (f *ExportFilter) WhereManagerID(p entql.Uint64P) {
	f.Where(p.Field(export.FieldManagerID))
}

// WhereTaxonomy applies the entql string predicate on the taxonomy field.
func (f *ExportFilter) WhereTaxonomy(p entql.StringP) {
	f.Where(p.Field(export.FieldTaxonomy))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *ExportFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(export.FieldSn))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ExportFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(export.FieldStatus))
}

// WherePath applies the entql string predicate on the path field.
func (f *ExportFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(export.FieldPath))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *ExportFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(export.FieldMessage))
}

// WhereFinishAt applies the entql time.Time predicate on the finish_at field.
func (f *ExportFilter) WhereFinishAt(p entql.TimeP) {
	f.Where(p.Field(export.FieldFinishAt))
}

// WhereDuration applies the entql int64 predicate on the duration field.
func (f *ExportFilter) WhereDuration(p entql.Int64P) {
	f.Where(p.Field(export.FieldDuration))
}

// WhereCondition applies the entql string predicate on the condition field.
func (f *ExportFilter) WhereCondition(p entql.StringP) {
	f.Where(p.Field(export.FieldCondition))
}

// WhereInfo applies the entql json.RawMessage predicate on the info field.
func (f *ExportFilter) WhereInfo(p entql.BytesP) {
	f.Where(p.Field(export.FieldInfo))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ExportFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(export.FieldRemark))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *ExportFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *ExportFilter) WhereHasManagerWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fq *FeedbackQuery) addPredicate(pred func(s *sql.Selector)) {
	fq.predicates = append(fq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FeedbackQuery builder.
func (fq *FeedbackQuery) Filter() *FeedbackFilter {
	return &FeedbackFilter{config: fq.config, predicateAdder: fq}
}

// addPredicate implements the predicateAdder interface.
func (m *FeedbackMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FeedbackMutation builder.
func (m *FeedbackMutation) Filter() *FeedbackFilter {
	return &FeedbackFilter{config: m.config, predicateAdder: m}
}

// FeedbackFilter provides a generic filtering capability at runtime for FeedbackQuery.
type FeedbackFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FeedbackFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *FeedbackFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(feedback.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *FeedbackFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(feedback.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *FeedbackFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(feedback.FieldUpdatedAt))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *FeedbackFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(feedback.FieldEnterpriseID))
}

// WhereAgentID applies the entql uint64 predicate on the agent_id field.
func (f *FeedbackFilter) WhereAgentID(p entql.Uint64P) {
	f.Where(p.Field(feedback.FieldAgentID))
}

// WhereContent applies the entql string predicate on the content field.
func (f *FeedbackFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(feedback.FieldContent))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *FeedbackFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(feedback.FieldType))
}

// WhereURL applies the entql json.RawMessage predicate on the url field.
func (f *FeedbackFilter) WhereURL(p entql.BytesP) {
	f.Where(p.Field(feedback.FieldURL))
}

// WhereName applies the entql string predicate on the name field.
func (f *FeedbackFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(feedback.FieldName))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *FeedbackFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(feedback.FieldPhone))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *FeedbackFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *FeedbackFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgent applies a predicate to check if query has an edge agent.
func (f *FeedbackFilter) WhereHasAgent() {
	f.Where(entql.HasEdge("agent"))
}

// WhereHasAgentWith applies a predicate to check if query has an edge agent with a given conditions (other predicates).
func (f *FeedbackFilter) WhereHasAgentWith(preds ...predicate.Agent) {
	f.Where(entql.HasEdgeWith("agent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *InventoryQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InventoryQuery builder.
func (iq *InventoryQuery) Filter() *InventoryFilter {
	return &InventoryFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *InventoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InventoryMutation builder.
func (m *InventoryMutation) Filter() *InventoryFilter {
	return &InventoryFilter{config: m.config, predicateAdder: m}
}

// InventoryFilter provides a generic filtering capability at runtime for InventoryQuery.
type InventoryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InventoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *InventoryFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(inventory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InventoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InventoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InventoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *InventoryFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(inventory.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *InventoryFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(inventory.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *InventoryFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(inventory.FieldRemark))
}

// WhereName applies the entql string predicate on the name field.
func (f *InventoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(inventory.FieldName))
}

// WhereCount applies the entql bool predicate on the count field.
func (f *InventoryFilter) WhereCount(p entql.BoolP) {
	f.Where(p.Field(inventory.FieldCount))
}

// WhereTransfer applies the entql bool predicate on the transfer field.
func (f *InventoryFilter) WhereTransfer(p entql.BoolP) {
	f.Where(p.Field(inventory.FieldTransfer))
}

// WherePurchase applies the entql bool predicate on the purchase field.
func (f *InventoryFilter) WherePurchase(p entql.BoolP) {
	f.Where(p.Field(inventory.FieldPurchase))
}

// addPredicate implements the predicateAdder interface.
func (mq *ManagerQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ManagerQuery builder.
func (mq *ManagerQuery) Filter() *ManagerFilter {
	return &ManagerFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *ManagerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ManagerMutation builder.
func (m *ManagerMutation) Filter() *ManagerFilter {
	return &ManagerFilter{config: m.config, predicateAdder: m}
}

// ManagerFilter provides a generic filtering capability at runtime for ManagerQuery.
type ManagerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ManagerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ManagerFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(manager.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ManagerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ManagerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ManagerFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ManagerFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(manager.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ManagerFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(manager.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ManagerFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(manager.FieldRemark))
}

// WhereRoleID applies the entql uint64 predicate on the role_id field.
func (f *ManagerFilter) WhereRoleID(p entql.Uint64P) {
	f.Where(p.Field(manager.FieldRoleID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *ManagerFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(manager.FieldPhone))
}

// WhereName applies the entql string predicate on the name field.
func (f *ManagerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(manager.FieldName))
}

// WherePassword applies the entql string predicate on the password field.
func (f *ManagerFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(manager.FieldPassword))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *ManagerFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldLastSigninAt))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *ManagerFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *ManagerFilter) WhereHasRoleWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{config: m.config, predicateAdder: m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OrderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *OrderFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(order.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *OrderFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(order.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *OrderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(order.FieldRemark))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *OrderFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldPlanID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *OrderFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldCityID))
}

// WhereBrandID applies the entql uint64 predicate on the brand_id field.
func (f *OrderFilter) WhereBrandID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldBrandID))
}

// WhereEbikeID applies the entql uint64 predicate on the ebike_id field.
func (f *OrderFilter) WhereEbikeID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldEbikeID))
}

// WhereAgentID applies the entql uint64 predicate on the agent_id field.
func (f *OrderFilter) WhereAgentID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldAgentID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *OrderFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldRiderID))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *OrderFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldParentID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *OrderFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldSubscribeID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *OrderFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(order.FieldStatus))
}

// WherePayway applies the entql uint8 predicate on the payway field.
func (f *OrderFilter) WherePayway(p entql.Uint8P) {
	f.Where(p.Field(order.FieldPayway))
}

// WhereType applies the entql uint predicate on the type field.
func (f *OrderFilter) WhereType(p entql.UintP) {
	f.Where(p.Field(order.FieldType))
}

// WhereOutTradeNo applies the entql string predicate on the out_trade_no field.
func (f *OrderFilter) WhereOutTradeNo(p entql.StringP) {
	f.Where(p.Field(order.FieldOutTradeNo))
}

// WhereTradeNo applies the entql string predicate on the trade_no field.
func (f *OrderFilter) WhereTradeNo(p entql.StringP) {
	f.Where(p.Field(order.FieldTradeNo))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *OrderFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(order.FieldAmount))
}

// WhereTotal applies the entql float64 predicate on the total field.
func (f *OrderFilter) WhereTotal(p entql.Float64P) {
	f.Where(p.Field(order.FieldTotal))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *OrderFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldRefundAt))
}

// WhereInitialDays applies the entql int predicate on the initial_days field.
func (f *OrderFilter) WhereInitialDays(p entql.IntP) {
	f.Where(p.Field(order.FieldInitialDays))
}

// WherePastDays applies the entql int predicate on the past_days field.
func (f *OrderFilter) WherePastDays(p entql.IntP) {
	f.Where(p.Field(order.FieldPastDays))
}

// WherePoints applies the entql int64 predicate on the points field.
func (f *OrderFilter) WherePoints(p entql.Int64P) {
	f.Where(p.Field(order.FieldPoints))
}

// WherePointRatio applies the entql float64 predicate on the point_ratio field.
func (f *OrderFilter) WherePointRatio(p entql.Float64P) {
	f.Where(p.Field(order.FieldPointRatio))
}

// WhereCouponAmount applies the entql float64 predicate on the coupon_amount field.
func (f *OrderFilter) WhereCouponAmount(p entql.Float64P) {
	f.Where(p.Field(order.FieldCouponAmount))
}

// WhereDiscountNewly applies the entql float64 predicate on the discount_newly field.
func (f *OrderFilter) WhereDiscountNewly(p entql.Float64P) {
	f.Where(p.Field(order.FieldDiscountNewly))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *OrderFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *OrderFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *OrderFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *OrderFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBrand applies a predicate to check if query has an edge brand.
func (f *OrderFilter) WhereHasBrand() {
	f.Where(entql.HasEdge("brand"))
}

// WhereHasBrandWith applies a predicate to check if query has an edge brand with a given conditions (other predicates).
func (f *OrderFilter) WhereHasBrandWith(preds ...predicate.EbikeBrand) {
	f.Where(entql.HasEdgeWith("brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEbike applies a predicate to check if query has an edge ebike.
func (f *OrderFilter) WhereHasEbike() {
	f.Where(entql.HasEdge("ebike"))
}

// WhereHasEbikeWith applies a predicate to check if query has an edge ebike with a given conditions (other predicates).
func (f *OrderFilter) WhereHasEbikeWith(preds ...predicate.Ebike) {
	f.Where(entql.HasEdgeWith("ebike", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgent applies a predicate to check if query has an edge agent.
func (f *OrderFilter) WhereHasAgent() {
	f.Where(entql.HasEdge("agent"))
}

// WhereHasAgentWith applies a predicate to check if query has an edge agent with a given conditions (other predicates).
func (f *OrderFilter) WhereHasAgentWith(preds ...predicate.Agent) {
	f.Where(entql.HasEdgeWith("agent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *OrderFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *OrderFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *OrderFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *OrderFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommission applies a predicate to check if query has an edge commission.
func (f *OrderFilter) WhereHasCommission() {
	f.Where(entql.HasEdge("commission"))
}

// WhereHasCommissionWith applies a predicate to check if query has an edge commission with a given conditions (other predicates).
func (f *OrderFilter) WhereHasCommissionWith(preds ...predicate.Commission) {
	f.Where(entql.HasEdgeWith("commission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *OrderFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *OrderFilter) WhereHasParentWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *OrderFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *OrderFilter) WhereHasChildrenWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRefund applies a predicate to check if query has an edge refund.
func (f *OrderFilter) WhereHasRefund() {
	f.Where(entql.HasEdge("refund"))
}

// WhereHasRefundWith applies a predicate to check if query has an edge refund with a given conditions (other predicates).
func (f *OrderFilter) WhereHasRefundWith(preds ...predicate.OrderRefund) {
	f.Where(entql.HasEdgeWith("refund", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssistance applies a predicate to check if query has an edge assistance.
func (f *OrderFilter) WhereHasAssistance() {
	f.Where(entql.HasEdge("assistance"))
}

// WhereHasAssistanceWith applies a predicate to check if query has an edge assistance with a given conditions (other predicates).
func (f *OrderFilter) WhereHasAssistanceWith(preds ...predicate.Assistance) {
	f.Where(entql.HasEdgeWith("assistance", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCoupons applies a predicate to check if query has an edge coupons.
func (f *OrderFilter) WhereHasCoupons() {
	f.Where(entql.HasEdge("coupons"))
}

// WhereHasCouponsWith applies a predicate to check if query has an edge coupons with a given conditions (other predicates).
func (f *OrderFilter) WhereHasCouponsWith(preds ...predicate.Coupon) {
	f.Where(entql.HasEdgeWith("coupons", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (orq *OrderRefundQuery) addPredicate(pred func(s *sql.Selector)) {
	orq.predicates = append(orq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderRefundQuery builder.
func (orq *OrderRefundQuery) Filter() *OrderRefundFilter {
	return &OrderRefundFilter{config: orq.config, predicateAdder: orq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderRefundMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderRefundMutation builder.
func (m *OrderRefundMutation) Filter() *OrderRefundFilter {
	return &OrderRefundFilter{config: m.config, predicateAdder: m}
}

// OrderRefundFilter provides a generic filtering capability at runtime for OrderRefundQuery.
type OrderRefundFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderRefundFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[36].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OrderRefundFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(orderrefund.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderRefundFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderRefundFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderRefundFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *OrderRefundFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(orderrefund.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *OrderRefundFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(orderrefund.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *OrderRefundFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldRemark))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *OrderRefundFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(orderrefund.FieldOrderID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *OrderRefundFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(orderrefund.FieldStatus))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *OrderRefundFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(orderrefund.FieldAmount))
}

// WhereOutRefundNo applies the entql string predicate on the out_refund_no field.
func (f *OrderRefundFilter) WhereOutRefundNo(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldOutRefundNo))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *OrderRefundFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldReason))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *OrderRefundFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldRefundAt))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *OrderRefundFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *OrderRefundFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PersonQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonQuery builder.
func (pq *PersonQuery) Filter() *PersonFilter {
	return &PersonFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonMutation builder.
func (m *PersonMutation) Filter() *PersonFilter {
	return &PersonFilter{config: m.config, predicateAdder: m}
}

// PersonFilter provides a generic filtering capability at runtime for PersonQuery.
type PersonFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PersonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[37].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PersonFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(person.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PersonFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PersonFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(person.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PersonFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(person.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PersonFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(person.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *PersonFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(person.FieldStatus))
}

// WhereBanned applies the entql bool predicate on the banned field.
func (f *PersonFilter) WhereBanned(p entql.BoolP) {
	f.Where(p.Field(person.FieldBanned))
}

// WhereName applies the entql string predicate on the name field.
func (f *PersonFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(person.FieldName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *PersonFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNumber))
}

// WhereIDCardType applies the entql uint8 predicate on the id_card_type field.
func (f *PersonFilter) WhereIDCardType(p entql.Uint8P) {
	f.Where(p.Field(person.FieldIDCardType))
}

// WhereIDCardPortrait applies the entql string predicate on the id_card_portrait field.
func (f *PersonFilter) WhereIDCardPortrait(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardPortrait))
}

// WhereIDCardNational applies the entql string predicate on the id_card_national field.
func (f *PersonFilter) WhereIDCardNational(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNational))
}

// WhereAuthFace applies the entql string predicate on the auth_face field.
func (f *PersonFilter) WhereAuthFace(p entql.StringP) {
	f.Where(p.Field(person.FieldAuthFace))
}

// WhereAuthResult applies the entql json.RawMessage predicate on the auth_result field.
func (f *PersonFilter) WhereAuthResult(p entql.BytesP) {
	f.Where(p.Field(person.FieldAuthResult))
}

// WhereAuthAt applies the entql time.Time predicate on the auth_at field.
func (f *PersonFilter) WhereAuthAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldAuthAt))
}

// WhereEsignAccountID applies the entql string predicate on the esign_account_id field.
func (f *PersonFilter) WhereEsignAccountID(p entql.StringP) {
	f.Where(p.Field(person.FieldEsignAccountID))
}

// WhereBaiduVerifyToken applies the entql string predicate on the baidu_verify_token field.
func (f *PersonFilter) WhereBaiduVerifyToken(p entql.StringP) {
	f.Where(p.Field(person.FieldBaiduVerifyToken))
}

// WhereBaiduLogID applies the entql string predicate on the baidu_log_id field.
func (f *PersonFilter) WhereBaiduLogID(p entql.StringP) {
	f.Where(p.Field(person.FieldBaiduLogID))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PersonFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PersonFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlanQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlanQuery builder.
func (pq *PlanQuery) Filter() *PlanFilter {
	return &PlanFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlanMutation builder.
func (m *PlanMutation) Filter() *PlanFilter {
	return &PlanFilter{config: m.config, predicateAdder: m}
}

// PlanFilter provides a generic filtering capability at runtime for PlanQuery.
type PlanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[38].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PlanFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(plan.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlanFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PlanFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PlanFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(plan.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PlanFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(plan.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PlanFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(plan.FieldRemark))
}

// WhereBrandID applies the entql uint64 predicate on the brand_id field.
func (f *PlanFilter) WhereBrandID(p entql.Uint64P) {
	f.Where(p.Field(plan.FieldBrandID))
}

// WhereModel applies the entql string predicate on the model field.
func (f *PlanFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(plan.FieldModel))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *PlanFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(plan.FieldEnable))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *PlanFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(plan.FieldType))
}

// WhereName applies the entql string predicate on the name field.
func (f *PlanFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(plan.FieldName))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *PlanFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(plan.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *PlanFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(plan.FieldEnd))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *PlanFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(plan.FieldPrice))
}

// WhereDays applies the entql uint predicate on the days field.
func (f *PlanFilter) WhereDays(p entql.UintP) {
	f.Where(p.Field(plan.FieldDays))
}

// WhereCommission applies the entql float64 predicate on the commission field.
func (f *PlanFilter) WhereCommission(p entql.Float64P) {
	f.Where(p.Field(plan.FieldCommission))
}

// WhereCommissionBase applies the entql float64 predicate on the commission_base field.
func (f *PlanFilter) WhereCommissionBase(p entql.Float64P) {
	f.Where(p.Field(plan.FieldCommissionBase))
}

// WhereOriginal applies the entql float64 predicate on the original field.
func (f *PlanFilter) WhereOriginal(p entql.Float64P) {
	f.Where(p.Field(plan.FieldOriginal))
}

// WhereDesc applies the entql string predicate on the desc field.
func (f *PlanFilter) WhereDesc(p entql.StringP) {
	f.Where(p.Field(plan.FieldDesc))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *PlanFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(plan.FieldParentID))
}

// WhereDiscountNewly applies the entql float64 predicate on the discount_newly field.
func (f *PlanFilter) WhereDiscountNewly(p entql.Float64P) {
	f.Where(p.Field(plan.FieldDiscountNewly))
}

// WhereNotes applies the entql json.RawMessage predicate on the notes field.
func (f *PlanFilter) WhereNotes(p entql.BytesP) {
	f.Where(p.Field(plan.FieldNotes))
}

// WhereIntelligent applies the entql bool predicate on the intelligent field.
func (f *PlanFilter) WhereIntelligent(p entql.BoolP) {
	f.Where(p.Field(plan.FieldIntelligent))
}

// WhereHasBrand applies a predicate to check if query has an edge brand.
func (f *PlanFilter) WhereHasBrand() {
	f.Where(entql.HasEdge("brand"))
}

// WhereHasBrandWith applies a predicate to check if query has an edge brand with a given conditions (other predicates).
func (f *PlanFilter) WhereHasBrandWith(preds ...predicate.EbikeBrand) {
	f.Where(entql.HasEdgeWith("brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCities applies a predicate to check if query has an edge cities.
func (f *PlanFilter) WhereHasCities() {
	f.Where(entql.HasEdge("cities"))
}

// WhereHasCitiesWith applies a predicate to check if query has an edge cities with a given conditions (other predicates).
func (f *PlanFilter) WhereHasCitiesWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("cities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *PlanFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *PlanFilter) WhereHasParentWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComplexes applies a predicate to check if query has an edge complexes.
func (f *PlanFilter) WhereHasComplexes() {
	f.Where(entql.HasEdge("complexes"))
}

// WhereHasComplexesWith applies a predicate to check if query has an edge complexes with a given conditions (other predicates).
func (f *PlanFilter) WhereHasComplexesWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("complexes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (piq *PlanIntroduceQuery) addPredicate(pred func(s *sql.Selector)) {
	piq.predicates = append(piq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlanIntroduceQuery builder.
func (piq *PlanIntroduceQuery) Filter() *PlanIntroduceFilter {
	return &PlanIntroduceFilter{config: piq.config, predicateAdder: piq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlanIntroduceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlanIntroduceMutation builder.
func (m *PlanIntroduceMutation) Filter() *PlanIntroduceFilter {
	return &PlanIntroduceFilter{config: m.config, predicateAdder: m}
}

// PlanIntroduceFilter provides a generic filtering capability at runtime for PlanIntroduceQuery.
type PlanIntroduceFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlanIntroduceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[39].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PlanIntroduceFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(planintroduce.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlanIntroduceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(planintroduce.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlanIntroduceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(planintroduce.FieldUpdatedAt))
}

// WhereBrandID applies the entql uint64 predicate on the brand_id field.
func (f *PlanIntroduceFilter) WhereBrandID(p entql.Uint64P) {
	f.Where(p.Field(planintroduce.FieldBrandID))
}

// WhereModel applies the entql string predicate on the model field.
func (f *PlanIntroduceFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(planintroduce.FieldModel))
}

// WhereImage applies the entql string predicate on the image field.
func (f *PlanIntroduceFilter) WhereImage(p entql.StringP) {
	f.Where(p.Field(planintroduce.FieldImage))
}

// WhereHasBrand applies a predicate to check if query has an edge brand.
func (f *PlanIntroduceFilter) WhereHasBrand() {
	f.Where(entql.HasEdge("brand"))
}

// WhereHasBrandWith applies a predicate to check if query has an edge brand with a given conditions (other predicates).
func (f *PlanIntroduceFilter) WhereHasBrandWith(preds ...predicate.EbikeBrand) {
	f.Where(entql.HasEdgeWith("brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (plq *PointLogQuery) addPredicate(pred func(s *sql.Selector)) {
	plq.predicates = append(plq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PointLogQuery builder.
func (plq *PointLogQuery) Filter() *PointLogFilter {
	return &PointLogFilter{config: plq.config, predicateAdder: plq}
}

// addPredicate implements the predicateAdder interface.
func (m *PointLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PointLogMutation builder.
func (m *PointLogMutation) Filter() *PointLogFilter {
	return &PointLogFilter{config: m.config, predicateAdder: m}
}

// PointLogFilter provides a generic filtering capability at runtime for PointLogQuery.
type PointLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PointLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[40].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PointLogFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(pointlog.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PointLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(pointlog.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PointLogFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(pointlog.FieldUpdatedAt))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *PointLogFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(pointlog.FieldRiderID))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *PointLogFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(pointlog.FieldOrderID))
}

// WhereModifier applies the entql json.RawMessage predicate on the modifier field.
func (f *PointLogFilter) WhereModifier(p entql.BytesP) {
	f.Where(p.Field(pointlog.FieldModifier))
}

// WhereEmployeeInfo applies the entql json.RawMessage predicate on the employee_info field.
func (f *PointLogFilter) WhereEmployeeInfo(p entql.BytesP) {
	f.Where(p.Field(pointlog.FieldEmployeeInfo))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *PointLogFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(pointlog.FieldType))
}

// WherePoints applies the entql int64 predicate on the points field.
func (f *PointLogFilter) WherePoints(p entql.Int64P) {
	f.Where(p.Field(pointlog.FieldPoints))
}

// WhereAfter applies the entql int64 predicate on the after field.
func (f *PointLogFilter) WhereAfter(p entql.Int64P) {
	f.Where(p.Field(pointlog.FieldAfter))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *PointLogFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(pointlog.FieldReason))
}

// WhereAttach applies the entql json.RawMessage predicate on the attach field.
func (f *PointLogFilter) WhereAttach(p entql.BytesP) {
	f.Where(p.Field(pointlog.FieldAttach))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PointLogFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PointLogFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *PointLogFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *PointLogFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (paq *PromotionAchievementQuery) addPredicate(pred func(s *sql.Selector)) {
	paq.predicates = append(paq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionAchievementQuery builder.
func (paq *PromotionAchievementQuery) Filter() *PromotionAchievementFilter {
	return &PromotionAchievementFilter{config: paq.config, predicateAdder: paq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionAchievementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionAchievementMutation builder.
func (m *PromotionAchievementMutation) Filter() *PromotionAchievementFilter {
	return &PromotionAchievementFilter{config: m.config, predicateAdder: m}
}

// PromotionAchievementFilter provides a generic filtering capability at runtime for PromotionAchievementQuery.
type PromotionAchievementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionAchievementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[41].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionAchievementFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionachievement.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionAchievementFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionachievement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionAchievementFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionachievement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionAchievementFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionachievement.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionAchievementFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionachievement.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionAchievementFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionachievement.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionAchievementFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionachievement.FieldRemark))
}

// WhereName applies the entql string predicate on the name field.
func (f *PromotionAchievementFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(promotionachievement.FieldName))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *PromotionAchievementFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(promotionachievement.FieldType))
}

// WhereIcon applies the entql string predicate on the icon field.
func (f *PromotionAchievementFilter) WhereIcon(p entql.StringP) {
	f.Where(p.Field(promotionachievement.FieldIcon))
}

// WhereCondition applies the entql uint64 predicate on the condition field.
func (f *PromotionAchievementFilter) WhereCondition(p entql.Uint64P) {
	f.Where(p.Field(promotionachievement.FieldCondition))
}

// addPredicate implements the predicateAdder interface.
func (pbcq *PromotionBankCardQuery) addPredicate(pred func(s *sql.Selector)) {
	pbcq.predicates = append(pbcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionBankCardQuery builder.
func (pbcq *PromotionBankCardQuery) Filter() *PromotionBankCardFilter {
	return &PromotionBankCardFilter{config: pbcq.config, predicateAdder: pbcq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionBankCardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionBankCardMutation builder.
func (m *PromotionBankCardMutation) Filter() *PromotionBankCardFilter {
	return &PromotionBankCardFilter{config: m.config, predicateAdder: m}
}

// PromotionBankCardFilter provides a generic filtering capability at runtime for PromotionBankCardQuery.
type PromotionBankCardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionBankCardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[42].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionBankCardFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionbankcard.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionBankCardFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionbankcard.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionBankCardFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionbankcard.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionBankCardFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionbankcard.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionBankCardFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionbankcard.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionBankCardFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionbankcard.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionBankCardFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionbankcard.FieldRemark))
}

// WhereMemberID applies the entql uint64 predicate on the member_id field.
func (f *PromotionBankCardFilter) WhereMemberID(p entql.Uint64P) {
	f.Where(p.Field(promotionbankcard.FieldMemberID))
}

// WhereCardNo applies the entql string predicate on the card_no field.
func (f *PromotionBankCardFilter) WhereCardNo(p entql.StringP) {
	f.Where(p.Field(promotionbankcard.FieldCardNo))
}

// WhereBank applies the entql string predicate on the bank field.
func (f *PromotionBankCardFilter) WhereBank(p entql.StringP) {
	f.Where(p.Field(promotionbankcard.FieldBank))
}

// WhereIsDefault applies the entql bool predicate on the is_default field.
func (f *PromotionBankCardFilter) WhereIsDefault(p entql.BoolP) {
	f.Where(p.Field(promotionbankcard.FieldIsDefault))
}

// WhereBankLogoURL applies the entql string predicate on the bank_logo_url field.
func (f *PromotionBankCardFilter) WhereBankLogoURL(p entql.StringP) {
	f.Where(p.Field(promotionbankcard.FieldBankLogoURL))
}

// WhereProvince applies the entql string predicate on the province field.
func (f *PromotionBankCardFilter) WhereProvince(p entql.StringP) {
	f.Where(p.Field(promotionbankcard.FieldProvince))
}

// WhereCity applies the entql string predicate on the city field.
func (f *PromotionBankCardFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(promotionbankcard.FieldCity))
}

// WhereHasMember applies a predicate to check if query has an edge member.
func (f *PromotionBankCardFilter) WhereHasMember() {
	f.Where(entql.HasEdge("member"))
}

// WhereHasMemberWith applies a predicate to check if query has an edge member with a given conditions (other predicates).
func (f *PromotionBankCardFilter) WhereHasMemberWith(preds ...predicate.PromotionMember) {
	f.Where(entql.HasEdgeWith("member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWithdrawals applies a predicate to check if query has an edge withdrawals.
func (f *PromotionBankCardFilter) WhereHasWithdrawals() {
	f.Where(entql.HasEdge("withdrawals"))
}

// WhereHasWithdrawalsWith applies a predicate to check if query has an edge withdrawals with a given conditions (other predicates).
func (f *PromotionBankCardFilter) WhereHasWithdrawalsWith(preds ...predicate.PromotionWithdrawal) {
	f.Where(entql.HasEdgeWith("withdrawals", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pcq *PromotionCommissionQuery) addPredicate(pred func(s *sql.Selector)) {
	pcq.predicates = append(pcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionCommissionQuery builder.
func (pcq *PromotionCommissionQuery) Filter() *PromotionCommissionFilter {
	return &PromotionCommissionFilter{config: pcq.config, predicateAdder: pcq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionCommissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionCommissionMutation builder.
func (m *PromotionCommissionMutation) Filter() *PromotionCommissionFilter {
	return &PromotionCommissionFilter{config: m.config, predicateAdder: m}
}

// PromotionCommissionFilter provides a generic filtering capability at runtime for PromotionCommissionQuery.
type PromotionCommissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionCommissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[43].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionCommissionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotioncommission.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionCommissionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotioncommission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionCommissionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotioncommission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionCommissionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotioncommission.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionCommissionFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotioncommission.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionCommissionFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotioncommission.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionCommissionFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotioncommission.FieldRemark))
}

// WhereMemberID applies the entql uint64 predicate on the member_id field.
func (f *PromotionCommissionFilter) WhereMemberID(p entql.Uint64P) {
	f.Where(p.Field(promotioncommission.FieldMemberID))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *PromotionCommissionFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(promotioncommission.FieldType))
}

// WhereName applies the entql string predicate on the name field.
func (f *PromotionCommissionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(promotioncommission.FieldName))
}

// WhereRule applies the entql json.RawMessage predicate on the rule field.
func (f *PromotionCommissionFilter) WhereRule(p entql.BytesP) {
	f.Where(p.Field(promotioncommission.FieldRule))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *PromotionCommissionFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(promotioncommission.FieldEnable))
}

// WhereAmountSum applies the entql float64 predicate on the amount_sum field.
func (f *PromotionCommissionFilter) WhereAmountSum(p entql.Float64P) {
	f.Where(p.Field(promotioncommission.FieldAmountSum))
}

// WhereDesc applies the entql string predicate on the desc field.
func (f *PromotionCommissionFilter) WhereDesc(p entql.StringP) {
	f.Where(p.Field(promotioncommission.FieldDesc))
}

// WhereHistoryID applies the entql json.RawMessage predicate on the history_id field.
func (f *PromotionCommissionFilter) WhereHistoryID(p entql.BytesP) {
	f.Where(p.Field(promotioncommission.FieldHistoryID))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *PromotionCommissionFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(promotioncommission.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *PromotionCommissionFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(promotioncommission.FieldEndAt))
}

// WhereHasMember applies a predicate to check if query has an edge member.
func (f *PromotionCommissionFilter) WhereHasMember() {
	f.Where(entql.HasEdge("member"))
}

// WhereHasMemberWith applies a predicate to check if query has an edge member with a given conditions (other predicates).
func (f *PromotionCommissionFilter) WhereHasMemberWith(preds ...predicate.PromotionMember) {
	f.Where(entql.HasEdgeWith("member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (peq *PromotionEarningsQuery) addPredicate(pred func(s *sql.Selector)) {
	peq.predicates = append(peq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionEarningsQuery builder.
func (peq *PromotionEarningsQuery) Filter() *PromotionEarningsFilter {
	return &PromotionEarningsFilter{config: peq.config, predicateAdder: peq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionEarningsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionEarningsMutation builder.
func (m *PromotionEarningsMutation) Filter() *PromotionEarningsFilter {
	return &PromotionEarningsFilter{config: m.config, predicateAdder: m}
}

// PromotionEarningsFilter provides a generic filtering capability at runtime for PromotionEarningsQuery.
type PromotionEarningsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionEarningsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[44].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionEarningsFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionearnings.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionEarningsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionearnings.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionEarningsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionearnings.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionEarningsFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionearnings.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionEarningsFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionearnings.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionEarningsFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionearnings.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionEarningsFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionearnings.FieldRemark))
}

// WhereCommissionID applies the entql uint64 predicate on the commission_id field.
func (f *PromotionEarningsFilter) WhereCommissionID(p entql.Uint64P) {
	f.Where(p.Field(promotionearnings.FieldCommissionID))
}

// WhereMemberID applies the entql uint64 predicate on the member_id field.
func (f *PromotionEarningsFilter) WhereMemberID(p entql.Uint64P) {
	f.Where(p.Field(promotionearnings.FieldMemberID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *PromotionEarningsFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(promotionearnings.FieldRiderID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *PromotionEarningsFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(promotionearnings.FieldStatus))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *PromotionEarningsFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(promotionearnings.FieldAmount))
}

// WhereCommissionRuleKey applies the entql string predicate on the commission_rule_key field.
func (f *PromotionEarningsFilter) WhereCommissionRuleKey(p entql.StringP) {
	f.Where(p.Field(promotionearnings.FieldCommissionRuleKey))
}

// WhereHasCommission applies a predicate to check if query has an edge commission.
func (f *PromotionEarningsFilter) WhereHasCommission() {
	f.Where(entql.HasEdge("commission"))
}

// WhereHasCommissionWith applies a predicate to check if query has an edge commission with a given conditions (other predicates).
func (f *PromotionEarningsFilter) WhereHasCommissionWith(preds ...predicate.PromotionCommission) {
	f.Where(entql.HasEdgeWith("commission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMember applies a predicate to check if query has an edge member.
func (f *PromotionEarningsFilter) WhereHasMember() {
	f.Where(entql.HasEdge("member"))
}

// WhereHasMemberWith applies a predicate to check if query has an edge member with a given conditions (other predicates).
func (f *PromotionEarningsFilter) WhereHasMemberWith(preds ...predicate.PromotionMember) {
	f.Where(entql.HasEdgeWith("member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PromotionEarningsFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PromotionEarningsFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pgq *PromotionGrowthQuery) addPredicate(pred func(s *sql.Selector)) {
	pgq.predicates = append(pgq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionGrowthQuery builder.
func (pgq *PromotionGrowthQuery) Filter() *PromotionGrowthFilter {
	return &PromotionGrowthFilter{config: pgq.config, predicateAdder: pgq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionGrowthMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionGrowthMutation builder.
func (m *PromotionGrowthMutation) Filter() *PromotionGrowthFilter {
	return &PromotionGrowthFilter{config: m.config, predicateAdder: m}
}

// PromotionGrowthFilter provides a generic filtering capability at runtime for PromotionGrowthQuery.
type PromotionGrowthFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionGrowthFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[45].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionGrowthFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotiongrowth.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionGrowthFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotiongrowth.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionGrowthFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotiongrowth.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionGrowthFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotiongrowth.FieldDeletedAt))
}

// WhereMemberID applies the entql uint64 predicate on the member_id field.
func (f *PromotionGrowthFilter) WhereMemberID(p entql.Uint64P) {
	f.Where(p.Field(promotiongrowth.FieldMemberID))
}

// WhereTaskID applies the entql uint64 predicate on the task_id field.
func (f *PromotionGrowthFilter) WhereTaskID(p entql.Uint64P) {
	f.Where(p.Field(promotiongrowth.FieldTaskID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *PromotionGrowthFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(promotiongrowth.FieldRiderID))
}

// WhereGrowthValue applies the entql uint64 predicate on the growth_value field.
func (f *PromotionGrowthFilter) WhereGrowthValue(p entql.Uint64P) {
	f.Where(p.Field(promotiongrowth.FieldGrowthValue))
}

// WhereHasMember applies a predicate to check if query has an edge member.
func (f *PromotionGrowthFilter) WhereHasMember() {
	f.Where(entql.HasEdge("member"))
}

// WhereHasMemberWith applies a predicate to check if query has an edge member with a given conditions (other predicates).
func (f *PromotionGrowthFilter) WhereHasMemberWith(preds ...predicate.PromotionMember) {
	f.Where(entql.HasEdgeWith("member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTask applies a predicate to check if query has an edge task.
func (f *PromotionGrowthFilter) WhereHasTask() {
	f.Where(entql.HasEdge("task"))
}

// WhereHasTaskWith applies a predicate to check if query has an edge task with a given conditions (other predicates).
func (f *PromotionGrowthFilter) WhereHasTaskWith(preds ...predicate.PromotionLevelTask) {
	f.Where(entql.HasEdgeWith("task", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PromotionGrowthFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PromotionGrowthFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (plq *PromotionLevelQuery) addPredicate(pred func(s *sql.Selector)) {
	plq.predicates = append(plq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionLevelQuery builder.
func (plq *PromotionLevelQuery) Filter() *PromotionLevelFilter {
	return &PromotionLevelFilter{config: plq.config, predicateAdder: plq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionLevelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionLevelMutation builder.
func (m *PromotionLevelMutation) Filter() *PromotionLevelFilter {
	return &PromotionLevelFilter{config: m.config, predicateAdder: m}
}

// PromotionLevelFilter provides a generic filtering capability at runtime for PromotionLevelQuery.
type PromotionLevelFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionLevelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[46].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionLevelFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionlevel.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionLevelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionlevel.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionLevelFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionlevel.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionLevelFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionlevel.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionLevelFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionlevel.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionLevelFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionlevel.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionLevelFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionlevel.FieldRemark))
}

// WhereLevel applies the entql uint64 predicate on the level field.
func (f *PromotionLevelFilter) WhereLevel(p entql.Uint64P) {
	f.Where(p.Field(promotionlevel.FieldLevel))
}

// WhereGrowthValue applies the entql uint64 predicate on the growth_value field.
func (f *PromotionLevelFilter) WhereGrowthValue(p entql.Uint64P) {
	f.Where(p.Field(promotionlevel.FieldGrowthValue))
}

// WhereCommissionRatio applies the entql float64 predicate on the commission_ratio field.
func (f *PromotionLevelFilter) WhereCommissionRatio(p entql.Float64P) {
	f.Where(p.Field(promotionlevel.FieldCommissionRatio))
}

// addPredicate implements the predicateAdder interface.
func (pltq *PromotionLevelTaskQuery) addPredicate(pred func(s *sql.Selector)) {
	pltq.predicates = append(pltq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionLevelTaskQuery builder.
func (pltq *PromotionLevelTaskQuery) Filter() *PromotionLevelTaskFilter {
	return &PromotionLevelTaskFilter{config: pltq.config, predicateAdder: pltq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionLevelTaskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionLevelTaskMutation builder.
func (m *PromotionLevelTaskMutation) Filter() *PromotionLevelTaskFilter {
	return &PromotionLevelTaskFilter{config: m.config, predicateAdder: m}
}

// PromotionLevelTaskFilter provides a generic filtering capability at runtime for PromotionLevelTaskQuery.
type PromotionLevelTaskFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionLevelTaskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[47].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionLevelTaskFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionleveltask.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionLevelTaskFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionleveltask.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionLevelTaskFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionleveltask.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionLevelTaskFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionleveltask.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionLevelTaskFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionleveltask.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionLevelTaskFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionleveltask.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionLevelTaskFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionleveltask.FieldRemark))
}

// WhereName applies the entql string predicate on the name field.
func (f *PromotionLevelTaskFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(promotionleveltask.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PromotionLevelTaskFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(promotionleveltask.FieldDescription))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *PromotionLevelTaskFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(promotionleveltask.FieldType))
}

// WhereGrowthValue applies the entql uint64 predicate on the growth_value field.
func (f *PromotionLevelTaskFilter) WhereGrowthValue(p entql.Uint64P) {
	f.Where(p.Field(promotionleveltask.FieldGrowthValue))
}

// WhereKey applies the entql string predicate on the key field.
func (f *PromotionLevelTaskFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(promotionleveltask.FieldKey))
}

// addPredicate implements the predicateAdder interface.
func (pmq *PromotionMemberQuery) addPredicate(pred func(s *sql.Selector)) {
	pmq.predicates = append(pmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionMemberQuery builder.
func (pmq *PromotionMemberQuery) Filter() *PromotionMemberFilter {
	return &PromotionMemberFilter{config: pmq.config, predicateAdder: pmq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionMemberMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionMemberMutation builder.
func (m *PromotionMemberMutation) Filter() *PromotionMemberFilter {
	return &PromotionMemberFilter{config: m.config, predicateAdder: m}
}

// PromotionMemberFilter provides a generic filtering capability at runtime for PromotionMemberQuery.
type PromotionMemberFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionMemberFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[48].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionMemberFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionmember.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionMemberFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionmember.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionMemberFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionmember.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionMemberFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionmember.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionMemberFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionmember.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionMemberFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionmember.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionMemberFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionmember.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *PromotionMemberFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(promotionmember.FieldRiderID))
}

// WhereLevelID applies the entql uint64 predicate on the level_id field.
func (f *PromotionMemberFilter) WhereLevelID(p entql.Uint64P) {
	f.Where(p.Field(promotionmember.FieldLevelID))
}

// WhereCommissionID applies the entql uint64 predicate on the commission_id field.
func (f *PromotionMemberFilter) WhereCommissionID(p entql.Uint64P) {
	f.Where(p.Field(promotionmember.FieldCommissionID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *PromotionMemberFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(promotionmember.FieldPhone))
}

// WhereName applies the entql string predicate on the name field.
func (f *PromotionMemberFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(promotionmember.FieldName))
}

// WhereBalance applies the entql float64 predicate on the balance field.
func (f *PromotionMemberFilter) WhereBalance(p entql.Float64P) {
	f.Where(p.Field(promotionmember.FieldBalance))
}

// WhereFrozen applies the entql float64 predicate on the frozen field.
func (f *PromotionMemberFilter) WhereFrozen(p entql.Float64P) {
	f.Where(p.Field(promotionmember.FieldFrozen))
}

// WhereTotalGrowthValue applies the entql uint64 predicate on the total_growth_value field.
func (f *PromotionMemberFilter) WhereTotalGrowthValue(p entql.Uint64P) {
	f.Where(p.Field(promotionmember.FieldTotalGrowthValue))
}

// WhereCurrentGrowthValue applies the entql uint64 predicate on the current_growth_value field.
func (f *PromotionMemberFilter) WhereCurrentGrowthValue(p entql.Uint64P) {
	f.Where(p.Field(promotionmember.FieldCurrentGrowthValue))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *PromotionMemberFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(promotionmember.FieldEnable))
}

// WherePersonID applies the entql uint64 predicate on the person_id field.
func (f *PromotionMemberFilter) WherePersonID(p entql.Uint64P) {
	f.Where(p.Field(promotionmember.FieldPersonID))
}

// WhereAvatarURL applies the entql string predicate on the avatar_url field.
func (f *PromotionMemberFilter) WhereAvatarURL(p entql.StringP) {
	f.Where(p.Field(promotionmember.FieldAvatarURL))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PromotionMemberFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PromotionMemberFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLevel applies a predicate to check if query has an edge level.
func (f *PromotionMemberFilter) WhereHasLevel() {
	f.Where(entql.HasEdge("level"))
}

// WhereHasLevelWith applies a predicate to check if query has an edge level with a given conditions (other predicates).
func (f *PromotionMemberFilter) WhereHasLevelWith(preds ...predicate.PromotionLevel) {
	f.Where(entql.HasEdgeWith("level", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommission applies a predicate to check if query has an edge commission.
func (f *PromotionMemberFilter) WhereHasCommission() {
	f.Where(entql.HasEdge("commission"))
}

// WhereHasCommissionWith applies a predicate to check if query has an edge commission with a given conditions (other predicates).
func (f *PromotionMemberFilter) WhereHasCommissionWith(preds ...predicate.PromotionCommission) {
	f.Where(entql.HasEdgeWith("commission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReferring applies a predicate to check if query has an edge referring.
func (f *PromotionMemberFilter) WhereHasReferring() {
	f.Where(entql.HasEdge("referring"))
}

// WhereHasReferringWith applies a predicate to check if query has an edge referring with a given conditions (other predicates).
func (f *PromotionMemberFilter) WhereHasReferringWith(preds ...predicate.PromotionReferrals) {
	f.Where(entql.HasEdgeWith("referring", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReferred applies a predicate to check if query has an edge referred.
func (f *PromotionMemberFilter) WhereHasReferred() {
	f.Where(entql.HasEdge("referred"))
}

// WhereHasReferredWith applies a predicate to check if query has an edge referred with a given conditions (other predicates).
func (f *PromotionMemberFilter) WhereHasReferredWith(preds ...predicate.PromotionReferrals) {
	f.Where(entql.HasEdgeWith("referred", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPerson applies a predicate to check if query has an edge person.
func (f *PromotionMemberFilter) WhereHasPerson() {
	f.Where(entql.HasEdge("person"))
}

// WhereHasPersonWith applies a predicate to check if query has an edge person with a given conditions (other predicates).
func (f *PromotionMemberFilter) WhereHasPersonWith(preds ...predicate.PromotionPerson) {
	f.Where(entql.HasEdgeWith("person", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCards applies a predicate to check if query has an edge cards.
func (f *PromotionMemberFilter) WhereHasCards() {
	f.Where(entql.HasEdge("cards"))
}

// WhereHasCardsWith applies a predicate to check if query has an edge cards with a given conditions (other predicates).
func (f *PromotionMemberFilter) WhereHasCardsWith(preds ...predicate.PromotionBankCard) {
	f.Where(entql.HasEdgeWith("cards", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ppq *PromotionPersonQuery) addPredicate(pred func(s *sql.Selector)) {
	ppq.predicates = append(ppq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionPersonQuery builder.
func (ppq *PromotionPersonQuery) Filter() *PromotionPersonFilter {
	return &PromotionPersonFilter{config: ppq.config, predicateAdder: ppq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionPersonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionPersonMutation builder.
func (m *PromotionPersonMutation) Filter() *PromotionPersonFilter {
	return &PromotionPersonFilter{config: m.config, predicateAdder: m}
}

// PromotionPersonFilter provides a generic filtering capability at runtime for PromotionPersonQuery.
type PromotionPersonFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionPersonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[49].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionPersonFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionperson.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionPersonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionperson.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionPersonFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionperson.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionPersonFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionperson.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionPersonFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionperson.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionPersonFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionperson.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionPersonFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionperson.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *PromotionPersonFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(promotionperson.FieldStatus))
}

// WhereName applies the entql string predicate on the name field.
func (f *PromotionPersonFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(promotionperson.FieldName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *PromotionPersonFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(promotionperson.FieldIDCardNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *PromotionPersonFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(promotionperson.FieldAddress))
}

// WhereHasMember applies a predicate to check if query has an edge member.
func (f *PromotionPersonFilter) WhereHasMember() {
	f.Where(entql.HasEdge("member"))
}

// WhereHasMemberWith applies a predicate to check if query has an edge member with a given conditions (other predicates).
func (f *PromotionPersonFilter) WhereHasMemberWith(preds ...predicate.PromotionMember) {
	f.Where(entql.HasEdgeWith("member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ppq *PromotionPrivilegeQuery) addPredicate(pred func(s *sql.Selector)) {
	ppq.predicates = append(ppq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionPrivilegeQuery builder.
func (ppq *PromotionPrivilegeQuery) Filter() *PromotionPrivilegeFilter {
	return &PromotionPrivilegeFilter{config: ppq.config, predicateAdder: ppq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionPrivilegeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionPrivilegeMutation builder.
func (m *PromotionPrivilegeMutation) Filter() *PromotionPrivilegeFilter {
	return &PromotionPrivilegeFilter{config: m.config, predicateAdder: m}
}

// PromotionPrivilegeFilter provides a generic filtering capability at runtime for PromotionPrivilegeQuery.
type PromotionPrivilegeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionPrivilegeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[50].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionPrivilegeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionprivilege.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionPrivilegeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionprivilege.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionPrivilegeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionprivilege.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionPrivilegeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionprivilege.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionPrivilegeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionprivilege.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionPrivilegeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionprivilege.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionPrivilegeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionprivilege.FieldRemark))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *PromotionPrivilegeFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(promotionprivilege.FieldType))
}

// WhereName applies the entql string predicate on the name field.
func (f *PromotionPrivilegeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(promotionprivilege.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PromotionPrivilegeFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(promotionprivilege.FieldDescription))
}

// WhereValue applies the entql uint64 predicate on the value field.
func (f *PromotionPrivilegeFilter) WhereValue(p entql.Uint64P) {
	f.Where(p.Field(promotionprivilege.FieldValue))
}

// addPredicate implements the predicateAdder interface.
func (prq *PromotionReferralsQuery) addPredicate(pred func(s *sql.Selector)) {
	prq.predicates = append(prq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionReferralsQuery builder.
func (prq *PromotionReferralsQuery) Filter() *PromotionReferralsFilter {
	return &PromotionReferralsFilter{config: prq.config, predicateAdder: prq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionReferralsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionReferralsMutation builder.
func (m *PromotionReferralsMutation) Filter() *PromotionReferralsFilter {
	return &PromotionReferralsFilter{config: m.config, predicateAdder: m}
}

// PromotionReferralsFilter provides a generic filtering capability at runtime for PromotionReferralsQuery.
type PromotionReferralsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionReferralsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[51].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionReferralsFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionreferrals.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionReferralsFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionreferrals.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionReferralsFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionreferrals.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionReferralsFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionreferrals.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionReferralsFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionreferrals.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionReferralsFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionreferrals.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionReferralsFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionreferrals.FieldRemark))
}

// WhereReferringMemberID applies the entql uint64 predicate on the referring_member_id field.
func (f *PromotionReferralsFilter) WhereReferringMemberID(p entql.Uint64P) {
	f.Where(p.Field(promotionreferrals.FieldReferringMemberID))
}

// WhereReferredMemberID applies the entql uint64 predicate on the referred_member_id field.
func (f *PromotionReferralsFilter) WhereReferredMemberID(p entql.Uint64P) {
	f.Where(p.Field(promotionreferrals.FieldReferredMemberID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *PromotionReferralsFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(promotionreferrals.FieldRiderID))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *PromotionReferralsFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(promotionreferrals.FieldParentID))
}

// WhereHasReferringMember applies a predicate to check if query has an edge referring_member.
func (f *PromotionReferralsFilter) WhereHasReferringMember() {
	f.Where(entql.HasEdge("referring_member"))
}

// WhereHasReferringMemberWith applies a predicate to check if query has an edge referring_member with a given conditions (other predicates).
func (f *PromotionReferralsFilter) WhereHasReferringMemberWith(preds ...predicate.PromotionMember) {
	f.Where(entql.HasEdgeWith("referring_member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasReferredMember applies a predicate to check if query has an edge referred_member.
func (f *PromotionReferralsFilter) WhereHasReferredMember() {
	f.Where(entql.HasEdge("referred_member"))
}

// WhereHasReferredMemberWith applies a predicate to check if query has an edge referred_member with a given conditions (other predicates).
func (f *PromotionReferralsFilter) WhereHasReferredMemberWith(preds ...predicate.PromotionMember) {
	f.Where(entql.HasEdgeWith("referred_member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *PromotionReferralsFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *PromotionReferralsFilter) WhereHasParentWith(preds ...predicate.PromotionReferrals) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *PromotionReferralsFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *PromotionReferralsFilter) WhereHasChildrenWith(preds ...predicate.PromotionReferrals) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (psq *PromotionSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	psq.predicates = append(psq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionSettingQuery builder.
func (psq *PromotionSettingQuery) Filter() *PromotionSettingFilter {
	return &PromotionSettingFilter{config: psq.config, predicateAdder: psq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionSettingMutation builder.
func (m *PromotionSettingMutation) Filter() *PromotionSettingFilter {
	return &PromotionSettingFilter{config: m.config, predicateAdder: m}
}

// PromotionSettingFilter provides a generic filtering capability at runtime for PromotionSettingQuery.
type PromotionSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[52].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionSettingFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionsetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionsetting.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionsetting.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionSettingFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionsetting.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionSettingFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionsetting.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionSettingFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionsetting.FieldRemark))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *PromotionSettingFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(promotionsetting.FieldTitle))
}

// WhereContent applies the entql string predicate on the content field.
func (f *PromotionSettingFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(promotionsetting.FieldContent))
}

// WhereKey applies the entql string predicate on the key field.
func (f *PromotionSettingFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(promotionsetting.FieldKey))
}

// addPredicate implements the predicateAdder interface.
func (pwq *PromotionWithdrawalQuery) addPredicate(pred func(s *sql.Selector)) {
	pwq.predicates = append(pwq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PromotionWithdrawalQuery builder.
func (pwq *PromotionWithdrawalQuery) Filter() *PromotionWithdrawalFilter {
	return &PromotionWithdrawalFilter{config: pwq.config, predicateAdder: pwq}
}

// addPredicate implements the predicateAdder interface.
func (m *PromotionWithdrawalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PromotionWithdrawalMutation builder.
func (m *PromotionWithdrawalMutation) Filter() *PromotionWithdrawalFilter {
	return &PromotionWithdrawalFilter{config: m.config, predicateAdder: m}
}

// PromotionWithdrawalFilter provides a generic filtering capability at runtime for PromotionWithdrawalQuery.
type PromotionWithdrawalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PromotionWithdrawalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[53].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PromotionWithdrawalFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(promotionwithdrawal.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PromotionWithdrawalFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionwithdrawal.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PromotionWithdrawalFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(promotionwithdrawal.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PromotionWithdrawalFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(promotionwithdrawal.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PromotionWithdrawalFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(promotionwithdrawal.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PromotionWithdrawalFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(promotionwithdrawal.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PromotionWithdrawalFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(promotionwithdrawal.FieldRemark))
}

// WhereMemberID applies the entql uint64 predicate on the member_id field.
func (f *PromotionWithdrawalFilter) WhereMemberID(p entql.Uint64P) {
	f.Where(p.Field(promotionwithdrawal.FieldMemberID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *PromotionWithdrawalFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(promotionwithdrawal.FieldStatus))
}

// WhereApplyAmount applies the entql float64 predicate on the apply_amount field.
func (f *PromotionWithdrawalFilter) WhereApplyAmount(p entql.Float64P) {
	f.Where(p.Field(promotionwithdrawal.FieldApplyAmount))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *PromotionWithdrawalFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(promotionwithdrawal.FieldAmount))
}

// WhereFee applies the entql float64 predicate on the fee field.
func (f *PromotionWithdrawalFilter) WhereFee(p entql.Float64P) {
	f.Where(p.Field(promotionwithdrawal.FieldFee))
}

// WhereMethod applies the entql uint8 predicate on the method field.
func (f *PromotionWithdrawalFilter) WhereMethod(p entql.Uint8P) {
	f.Where(p.Field(promotionwithdrawal.FieldMethod))
}

// WhereAccountID applies the entql uint64 predicate on the account_id field.
func (f *PromotionWithdrawalFilter) WhereAccountID(p entql.Uint64P) {
	f.Where(p.Field(promotionwithdrawal.FieldAccountID))
}

// WhereApplyTime applies the entql time.Time predicate on the apply_time field.
func (f *PromotionWithdrawalFilter) WhereApplyTime(p entql.TimeP) {
	f.Where(p.Field(promotionwithdrawal.FieldApplyTime))
}

// WhereReviewTime applies the entql time.Time predicate on the review_time field.
func (f *PromotionWithdrawalFilter) WhereReviewTime(p entql.TimeP) {
	f.Where(p.Field(promotionwithdrawal.FieldReviewTime))
}

// WhereHasMember applies a predicate to check if query has an edge member.
func (f *PromotionWithdrawalFilter) WhereHasMember() {
	f.Where(entql.HasEdge("member"))
}

// WhereHasMemberWith applies a predicate to check if query has an edge member with a given conditions (other predicates).
func (f *PromotionWithdrawalFilter) WhereHasMemberWith(preds ...predicate.PromotionMember) {
	f.Where(entql.HasEdgeWith("member", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCards applies a predicate to check if query has an edge cards.
func (f *PromotionWithdrawalFilter) WhereHasCards() {
	f.Where(entql.HasEdge("cards"))
}

// WhereHasCardsWith applies a predicate to check if query has an edge cards with a given conditions (other predicates).
func (f *PromotionWithdrawalFilter) WhereHasCardsWith(preds ...predicate.PromotionBankCard) {
	f.Where(entql.HasEdgeWith("cards", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *ReserveQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ReserveQuery builder.
func (rq *ReserveQuery) Filter() *ReserveFilter {
	return &ReserveFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *ReserveMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ReserveMutation builder.
func (m *ReserveMutation) Filter() *ReserveFilter {
	return &ReserveFilter{config: m.config, predicateAdder: m}
}

// ReserveFilter provides a generic filtering capability at runtime for ReserveQuery.
type ReserveFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ReserveFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[54].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ReserveFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(reserve.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ReserveFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(reserve.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ReserveFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(reserve.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ReserveFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(reserve.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ReserveFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(reserve.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ReserveFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(reserve.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ReserveFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(reserve.FieldRemark))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *ReserveFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(reserve.FieldCabinetID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ReserveFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(reserve.FieldRiderID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *ReserveFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(reserve.FieldCityID))
}

// WhereBusinessID applies the entql uint64 predicate on the business_id field.
func (f *ReserveFilter) WhereBusinessID(p entql.Uint64P) {
	f.Where(p.Field(reserve.FieldBusinessID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ReserveFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(reserve.FieldStatus))
}

// WhereType applies the entql string predicate on the type field.
func (f *ReserveFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(reserve.FieldType))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *ReserveFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *ReserveFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ReserveFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ReserveFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *ReserveFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *ReserveFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBusiness applies a predicate to check if query has an edge business.
func (f *ReserveFilter) WhereHasBusiness() {
	f.Where(entql.HasEdge("business"))
}

// WhereHasBusinessWith applies a predicate to check if query has an edge business with a given conditions (other predicates).
func (f *ReserveFilter) WhereHasBusinessWith(preds ...predicate.Business) {
	f.Where(entql.HasEdgeWith("business", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RiderQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiderQuery builder.
func (rq *RiderQuery) Filter() *RiderFilter {
	return &RiderFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiderMutation builder.
func (m *RiderMutation) Filter() *RiderFilter {
	return &RiderFilter{config: m.config, predicateAdder: m}
}

// RiderFilter provides a generic filtering capability at runtime for RiderQuery.
type RiderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[55].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RiderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *RiderFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(rider.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *RiderFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(rider.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RiderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(rider.FieldRemark))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *RiderFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldStationID))
}

// WherePersonID applies the entql uint64 predicate on the person_id field.
func (f *RiderFilter) WherePersonID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldPersonID))
}

// WhereName applies the entql string predicate on the name field.
func (f *RiderFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(rider.FieldName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *RiderFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(rider.FieldIDCardNumber))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *RiderFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldEnterpriseID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *RiderFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(rider.FieldPhone))
}

// WhereContact applies the entql json.RawMessage predicate on the contact field.
func (f *RiderFilter) WhereContact(p entql.BytesP) {
	f.Where(p.Field(rider.FieldContact))
}

// WhereDeviceType applies the entql uint8 predicate on the device_type field.
func (f *RiderFilter) WhereDeviceType(p entql.Uint8P) {
	f.Where(p.Field(rider.FieldDeviceType))
}

// WhereLastDevice applies the entql string predicate on the last_device field.
func (f *RiderFilter) WhereLastDevice(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastDevice))
}

// WhereIsNewDevice applies the entql bool predicate on the is_new_device field.
func (f *RiderFilter) WhereIsNewDevice(p entql.BoolP) {
	f.Where(p.Field(rider.FieldIsNewDevice))
}

// WhereLastFace applies the entql string predicate on the last_face field.
func (f *RiderFilter) WhereLastFace(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastFace))
}

// WherePushID applies the entql string predicate on the push_id field.
func (f *RiderFilter) WherePushID(p entql.StringP) {
	f.Where(p.Field(rider.FieldPushID))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *RiderFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldLastSigninAt))
}

// WhereBlocked applies the entql bool predicate on the blocked field.
func (f *RiderFilter) WhereBlocked(p entql.BoolP) {
	f.Where(p.Field(rider.FieldBlocked))
}

// WherePoints applies the entql int64 predicate on the points field.
func (f *RiderFilter) WherePoints(p entql.Int64P) {
	f.Where(p.Field(rider.FieldPoints))
}

// WhereExchangeLimit applies the entql json.RawMessage predicate on the exchange_limit field.
func (f *RiderFilter) WhereExchangeLimit(p entql.BytesP) {
	f.Where(p.Field(rider.FieldExchangeLimit))
}

// WhereExchangeFrequency applies the entql json.RawMessage predicate on the exchange_frequency field.
func (f *RiderFilter) WhereExchangeFrequency(p entql.BytesP) {
	f.Where(p.Field(rider.FieldExchangeFrequency))
}

// WhereJoinEnterpriseAt applies the entql time.Time predicate on the join_enterprise_at field.
func (f *RiderFilter) WhereJoinEnterpriseAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldJoinEnterpriseAt))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *RiderFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *RiderFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPerson applies a predicate to check if query has an edge person.
func (f *RiderFilter) WhereHasPerson() {
	f.Where(entql.HasEdge("person"))
}

// WhereHasPersonWith applies a predicate to check if query has an edge person with a given conditions (other predicates).
func (f *RiderFilter) WhereHasPersonWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("person", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *RiderFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *RiderFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContracts applies a predicate to check if query has an edge contracts.
func (f *RiderFilter) WhereHasContracts() {
	f.Where(entql.HasEdge("contracts"))
}

// WhereHasContractsWith applies a predicate to check if query has an edge contracts with a given conditions (other predicates).
func (f *RiderFilter) WhereHasContractsWith(preds ...predicate.Contract) {
	f.Where(entql.HasEdgeWith("contracts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *RiderFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *RiderFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *RiderFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *RiderFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExchanges applies a predicate to check if query has an edge exchanges.
func (f *RiderFilter) WhereHasExchanges() {
	f.Where(entql.HasEdge("exchanges"))
}

// WhereHasExchangesWith applies a predicate to check if query has an edge exchanges with a given conditions (other predicates).
func (f *RiderFilter) WhereHasExchangesWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchanges", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribes applies a predicate to check if query has an edge subscribes.
func (f *RiderFilter) WhereHasSubscribes() {
	f.Where(entql.HasEdge("subscribes"))
}

// WhereHasSubscribesWith applies a predicate to check if query has an edge subscribes with a given conditions (other predicates).
func (f *RiderFilter) WhereHasSubscribesWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *RiderFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *RiderFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowups applies a predicate to check if query has an edge followups.
func (f *RiderFilter) WhereHasFollowups() {
	f.Where(entql.HasEdge("followups"))
}

// WhereHasFollowupsWith applies a predicate to check if query has an edge followups with a given conditions (other predicates).
func (f *RiderFilter) WhereHasFollowupsWith(preds ...predicate.RiderFollowUp) {
	f.Where(entql.HasEdgeWith("followups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBattery applies a predicate to check if query has an edge battery.
func (f *RiderFilter) WhereHasBattery() {
	f.Where(entql.HasEdge("battery"))
}

// WhereHasBatteryWith applies a predicate to check if query has an edge battery with a given conditions (other predicates).
func (f *RiderFilter) WhereHasBatteryWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("battery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBatteryFlows applies a predicate to check if query has an edge battery_flows.
func (f *RiderFilter) WhereHasBatteryFlows() {
	f.Where(entql.HasEdge("battery_flows"))
}

// WhereHasBatteryFlowsWith applies a predicate to check if query has an edge battery_flows with a given conditions (other predicates).
func (f *RiderFilter) WhereHasBatteryFlowsWith(preds ...predicate.BatteryFlow) {
	f.Where(entql.HasEdgeWith("battery_flows", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rfuq *RiderFollowUpQuery) addPredicate(pred func(s *sql.Selector)) {
	rfuq.predicates = append(rfuq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiderFollowUpQuery builder.
func (rfuq *RiderFollowUpQuery) Filter() *RiderFollowUpFilter {
	return &RiderFollowUpFilter{config: rfuq.config, predicateAdder: rfuq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiderFollowUpMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiderFollowUpMutation builder.
func (m *RiderFollowUpMutation) Filter() *RiderFollowUpFilter {
	return &RiderFollowUpFilter{config: m.config, predicateAdder: m}
}

// RiderFollowUpFilter provides a generic filtering capability at runtime for RiderFollowUpQuery.
type RiderFollowUpFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RiderFollowUpFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[56].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RiderFollowUpFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(riderfollowup.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiderFollowUpFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(riderfollowup.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiderFollowUpFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(riderfollowup.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiderFollowUpFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(riderfollowup.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *RiderFollowUpFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(riderfollowup.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *RiderFollowUpFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(riderfollowup.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RiderFollowUpFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(riderfollowup.FieldRemark))
}

// WhereManagerID applies the entql uint64 predicate on the manager_id field.
func (f *RiderFollowUpFilter) WhereManagerID(p entql.Uint64P) {
	f.Where(p.Field(riderfollowup.FieldManagerID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *RiderFollowUpFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(riderfollowup.FieldRiderID))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *RiderFollowUpFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *RiderFollowUpFilter) WhereHasManagerWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *RiderFollowUpFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *RiderFollowUpFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (rq *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{config: m.config, predicateAdder: m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[57].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RoleFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(role.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WherePermissions applies the entql json.RawMessage predicate on the permissions field.
func (f *RoleFilter) WherePermissions(p entql.BytesP) {
	f.Where(p.Field(role.FieldPermissions))
}

// WhereBuildin applies the entql bool predicate on the buildin field.
func (f *RoleFilter) WhereBuildin(p entql.BoolP) {
	f.Where(p.Field(role.FieldBuildin))
}

// WhereSuper applies the entql bool predicate on the super field.
func (f *RoleFilter) WhereSuper(p entql.BoolP) {
	f.Where(p.Field(role.FieldSuper))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreatedAt))
}

// WhereHasManagers applies a predicate to check if query has an edge managers.
func (f *RoleFilter) WhereHasManagers() {
	f.Where(entql.HasEdge("managers"))
}

// WhereHasManagersWith applies a predicate to check if query has an edge managers with a given conditions (other predicates).
func (f *RoleFilter) WhereHasManagersWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("managers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SettingQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SettingQuery builder.
func (sq *SettingQuery) Filter() *SettingFilter {
	return &SettingFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SettingMutation builder.
func (m *SettingMutation) Filter() *SettingFilter {
	return &SettingFilter{config: m.config, predicateAdder: m}
}

// SettingFilter provides a generic filtering capability at runtime for SettingQuery.
type SettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[58].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SettingFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(setting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SettingFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(setting.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SettingFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(setting.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SettingFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(setting.FieldRemark))
}

// WhereKey applies the entql string predicate on the key field.
func (f *SettingFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(setting.FieldKey))
}

// WhereDesc applies the entql string predicate on the desc field.
func (f *SettingFilter) WhereDesc(p entql.StringP) {
	f.Where(p.Field(setting.FieldDesc))
}

// WhereContent applies the entql string predicate on the content field.
func (f *SettingFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(setting.FieldContent))
}

// addPredicate implements the predicateAdder interface.
func (sq *StockQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StockQuery builder.
func (sq *StockQuery) Filter() *StockFilter {
	return &StockFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StockMutation builder.
func (m *StockMutation) Filter() *StockFilter {
	return &StockFilter{config: m.config, predicateAdder: m}
}

// StockFilter provides a generic filtering capability at runtime for StockQuery.
type StockFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[59].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *StockFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StockFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(stock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StockFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(stock.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *StockFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(stock.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *StockFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(stock.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *StockFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(stock.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *StockFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldCityID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *StockFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldSubscribeID))
}

// WhereEbikeID applies the entql uint64 predicate on the ebike_id field.
func (f *StockFilter) WhereEbikeID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldEbikeID))
}

// WhereBrandID applies the entql uint64 predicate on the brand_id field.
func (f *StockFilter) WhereBrandID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldBrandID))
}

// WhereBatteryID applies the entql uint64 predicate on the battery_id field.
func (f *StockFilter) WhereBatteryID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldBatteryID))
}

// WhereAgentID applies the entql uint64 predicate on the agent_id field.
func (f *StockFilter) WhereAgentID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldAgentID))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *StockFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldParentID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *StockFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(stock.FieldSn))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *StockFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(stock.FieldType))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *StockFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldStoreID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *StockFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldCabinetID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *StockFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldRiderID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *StockFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldEmployeeID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *StockFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *StockFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldStationID))
}

// WhereName applies the entql string predicate on the name field.
func (f *StockFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(stock.FieldName))
}

// WhereModel applies the entql string predicate on the model field.
func (f *StockFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(stock.FieldModel))
}

// WhereNum applies the entql int predicate on the num field.
func (f *StockFilter) WhereNum(p entql.IntP) {
	f.Where(p.Field(stock.FieldNum))
}

// WhereMaterial applies the entql string predicate on the material field.
func (f *StockFilter) WhereMaterial(p entql.StringP) {
	f.Where(p.Field(stock.FieldMaterial))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *StockFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *StockFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *StockFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *StockFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEbike applies a predicate to check if query has an edge ebike.
func (f *StockFilter) WhereHasEbike() {
	f.Where(entql.HasEdge("ebike"))
}

// WhereHasEbikeWith applies a predicate to check if query has an edge ebike with a given conditions (other predicates).
func (f *StockFilter) WhereHasEbikeWith(preds ...predicate.Ebike) {
	f.Where(entql.HasEdgeWith("ebike", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBrand applies a predicate to check if query has an edge brand.
func (f *StockFilter) WhereHasBrand() {
	f.Where(entql.HasEdge("brand"))
}

// WhereHasBrandWith applies a predicate to check if query has an edge brand with a given conditions (other predicates).
func (f *StockFilter) WhereHasBrandWith(preds ...predicate.EbikeBrand) {
	f.Where(entql.HasEdgeWith("brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBattery applies a predicate to check if query has an edge battery.
func (f *StockFilter) WhereHasBattery() {
	f.Where(entql.HasEdge("battery"))
}

// WhereHasBatteryWith applies a predicate to check if query has an edge battery with a given conditions (other predicates).
func (f *StockFilter) WhereHasBatteryWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("battery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgent applies a predicate to check if query has an edge agent.
func (f *StockFilter) WhereHasAgent() {
	f.Where(entql.HasEdge("agent"))
}

// WhereHasAgentWith applies a predicate to check if query has an edge agent with a given conditions (other predicates).
func (f *StockFilter) WhereHasAgentWith(preds ...predicate.Agent) {
	f.Where(entql.HasEdgeWith("agent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *StockFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *StockFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *StockFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *StockFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *StockFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *StockFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *StockFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *StockFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSpouse applies a predicate to check if query has an edge spouse.
func (f *StockFilter) WhereHasSpouse() {
	f.Where(entql.HasEdge("spouse"))
}

// WhereHasSpouseWith applies a predicate to check if query has an edge spouse with a given conditions (other predicates).
func (f *StockFilter) WhereHasSpouseWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("spouse", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *StockFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *StockFilter) WhereHasParentWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *StockFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *StockFilter) WhereHasChildrenWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *StockFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *StockFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *StockFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *StockFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ssq *StockSummaryQuery) addPredicate(pred func(s *sql.Selector)) {
	ssq.predicates = append(ssq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StockSummaryQuery builder.
func (ssq *StockSummaryQuery) Filter() *StockSummaryFilter {
	return &StockSummaryFilter{config: ssq.config, predicateAdder: ssq}
}

// addPredicate implements the predicateAdder interface.
func (m *StockSummaryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StockSummaryMutation builder.
func (m *StockSummaryMutation) Filter() *StockSummaryFilter {
	return &StockSummaryFilter{config: m.config, predicateAdder: m}
}

// StockSummaryFilter provides a generic filtering capability at runtime for StockSummaryQuery.
type StockSummaryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StockSummaryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[60].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *StockSummaryFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(stocksummary.FieldID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *StockSummaryFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(stocksummary.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *StockSummaryFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(stocksummary.FieldStationID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *StockSummaryFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(stocksummary.FieldStoreID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *StockSummaryFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(stocksummary.FieldRiderID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *StockSummaryFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(stocksummary.FieldCabinetID))
}

// WhereDate applies the entql string predicate on the date field.
func (f *StockSummaryFilter) WhereDate(p entql.StringP) {
	f.Where(p.Field(stocksummary.FieldDate))
}

// WhereModel applies the entql string predicate on the model field.
func (f *StockSummaryFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(stocksummary.FieldModel))
}

// WhereNum applies the entql int predicate on the num field.
func (f *StockSummaryFilter) WhereNum(p entql.IntP) {
	f.Where(p.Field(stocksummary.FieldNum))
}

// WhereTodayNum applies the entql int predicate on the today_num field.
func (f *StockSummaryFilter) WhereTodayNum(p entql.IntP) {
	f.Where(p.Field(stocksummary.FieldTodayNum))
}

// WhereOutboundNum applies the entql int predicate on the outbound_num field.
func (f *StockSummaryFilter) WhereOutboundNum(p entql.IntP) {
	f.Where(p.Field(stocksummary.FieldOutboundNum))
}

// WhereInboundNum applies the entql int predicate on the inbound_num field.
func (f *StockSummaryFilter) WhereInboundNum(p entql.IntP) {
	f.Where(p.Field(stocksummary.FieldInboundNum))
}

// WhereInRiderNum applies the entql int predicate on the in_rider_num field.
func (f *StockSummaryFilter) WhereInRiderNum(p entql.IntP) {
	f.Where(p.Field(stocksummary.FieldInRiderNum))
}

// WhereMaterial applies the entql string predicate on the material field.
func (f *StockSummaryFilter) WhereMaterial(p entql.StringP) {
	f.Where(p.Field(stocksummary.FieldMaterial))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *StockSummaryFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *StockSummaryFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *StockSummaryFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *StockSummaryFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *StockSummaryFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *StockSummaryFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *StockSummaryFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *StockSummaryFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *StockSummaryFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *StockSummaryFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *StoreQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StoreQuery builder.
func (sq *StoreQuery) Filter() *StoreFilter {
	return &StoreFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StoreMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StoreMutation builder.
func (m *StoreMutation) Filter() *StoreFilter {
	return &StoreFilter{config: m.config, predicateAdder: m}
}

// StoreFilter provides a generic filtering capability at runtime for StoreQuery.
type StoreFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *StoreFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[61].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *StoreFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StoreFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StoreFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *StoreFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *StoreFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(store.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *StoreFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(store.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *StoreFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(store.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *StoreFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldCityID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *StoreFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldEmployeeID))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *StoreFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldBranchID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *StoreFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(store.FieldSn))
}

// WhereName applies the entql string predicate on the name field.
func (f *StoreFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(store.FieldName))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *StoreFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(store.FieldStatus))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *StoreFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(store.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *StoreFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(store.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *StoreFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(store.FieldAddress))
}

// WhereEbikeObtain applies the entql bool predicate on the ebike_obtain field.
func (f *StoreFilter) WhereEbikeObtain(p entql.BoolP) {
	f.Where(p.Field(store.FieldEbikeObtain))
}

// WhereEbikeRepair applies the entql bool predicate on the ebike_repair field.
func (f *StoreFilter) WhereEbikeRepair(p entql.BoolP) {
	f.Where(p.Field(store.FieldEbikeRepair))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *StoreFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *StoreFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *StoreFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *StoreFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *StoreFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *StoreFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *StoreFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *StoreFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAttendances applies a predicate to check if query has an edge attendances.
func (f *StoreFilter) WhereHasAttendances() {
	f.Where(entql.HasEdge("attendances"))
}

// WhereHasAttendancesWith applies a predicate to check if query has an edge attendances with a given conditions (other predicates).
func (f *StoreFilter) WhereHasAttendancesWith(preds ...predicate.Attendance) {
	f.Where(entql.HasEdgeWith("attendances", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExceptions applies a predicate to check if query has an edge exceptions.
func (f *StoreFilter) WhereHasExceptions() {
	f.Where(entql.HasEdge("exceptions"))
}

// WhereHasExceptionsWith applies a predicate to check if query has an edge exceptions with a given conditions (other predicates).
func (f *StoreFilter) WhereHasExceptionsWith(preds ...predicate.Exception) {
	f.Where(entql.HasEdgeWith("exceptions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SubscribeQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribeQuery builder.
func (sq *SubscribeQuery) Filter() *SubscribeFilter {
	return &SubscribeFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribeMutation builder.
func (m *SubscribeMutation) Filter() *SubscribeFilter {
	return &SubscribeFilter{config: m.config, predicateAdder: m}
}

// SubscribeFilter provides a generic filtering capability at runtime for SubscribeQuery.
type SubscribeFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscribeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[62].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscribeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribe.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribe.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribe.FieldRemark))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *SubscribeFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldPlanID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *SubscribeFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldEmployeeID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *SubscribeFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldCityID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *SubscribeFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldStationID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *SubscribeFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldStoreID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *SubscribeFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldCabinetID))
}

// WhereBrandID applies the entql uint64 predicate on the brand_id field.
func (f *SubscribeFilter) WhereBrandID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldBrandID))
}

// WhereEbikeID applies the entql uint64 predicate on the ebike_id field.
func (f *SubscribeFilter) WhereEbikeID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldEbikeID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribeFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldRiderID))
}

// WhereInitialOrderID applies the entql uint64 predicate on the initial_order_id field.
func (f *SubscribeFilter) WhereInitialOrderID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldInitialOrderID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *SubscribeFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldEnterpriseID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *SubscribeFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(subscribe.FieldStatus))
}

// WhereType applies the entql uint predicate on the type field.
func (f *SubscribeFilter) WhereType(p entql.UintP) {
	f.Where(p.Field(subscribe.FieldType))
}

// WhereModel applies the entql string predicate on the model field.
func (f *SubscribeFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(subscribe.FieldModel))
}

// WhereInitialDays applies the entql int predicate on the initial_days field.
func (f *SubscribeFilter) WhereInitialDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldInitialDays))
}

// WhereAlterDays applies the entql int predicate on the alter_days field.
func (f *SubscribeFilter) WhereAlterDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldAlterDays))
}

// WherePauseDays applies the entql int predicate on the pause_days field.
func (f *SubscribeFilter) WherePauseDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldPauseDays))
}

// WhereSuspendDays applies the entql int predicate on the suspend_days field.
func (f *SubscribeFilter) WhereSuspendDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldSuspendDays))
}

// WhereRenewalDays applies the entql int predicate on the renewal_days field.
func (f *SubscribeFilter) WhereRenewalDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldRenewalDays))
}

// WhereOverdueDays applies the entql int predicate on the overdue_days field.
func (f *SubscribeFilter) WhereOverdueDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldOverdueDays))
}

// WhereRemaining applies the entql int predicate on the remaining field.
func (f *SubscribeFilter) WhereRemaining(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldRemaining))
}

// WherePausedAt applies the entql time.Time predicate on the paused_at field.
func (f *SubscribeFilter) WherePausedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldPausedAt))
}

// WhereSuspendAt applies the entql time.Time predicate on the suspend_at field.
func (f *SubscribeFilter) WhereSuspendAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldSuspendAt))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *SubscribeFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *SubscribeFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldEndAt))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *SubscribeFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldRefundAt))
}

// WhereUnsubscribeReason applies the entql string predicate on the unsubscribe_reason field.
func (f *SubscribeFilter) WhereUnsubscribeReason(p entql.StringP) {
	f.Where(p.Field(subscribe.FieldUnsubscribeReason))
}

// WhereLastBillDate applies the entql time.Time predicate on the last_bill_date field.
func (f *SubscribeFilter) WhereLastBillDate(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldLastBillDate))
}

// WherePauseOverdue applies the entql bool predicate on the pause_overdue field.
func (f *SubscribeFilter) WherePauseOverdue(p entql.BoolP) {
	f.Where(p.Field(subscribe.FieldPauseOverdue))
}

// WhereAgentEndAt applies the entql time.Time predicate on the agent_end_at field.
func (f *SubscribeFilter) WhereAgentEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldAgentEndAt))
}

// WhereFormula applies the entql string predicate on the formula field.
func (f *SubscribeFilter) WhereFormula(p entql.StringP) {
	f.Where(p.Field(subscribe.FieldFormula))
}

// WhereNeedContract applies the entql bool predicate on the need_contract field.
func (f *SubscribeFilter) WhereNeedContract(p entql.BoolP) {
	f.Where(p.Field(subscribe.FieldNeedContract))
}

// WhereIntelligent applies the entql bool predicate on the intelligent field.
func (f *SubscribeFilter) WhereIntelligent(p entql.BoolP) {
	f.Where(p.Field(subscribe.FieldIntelligent))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *SubscribeFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *SubscribeFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *SubscribeFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *SubscribeFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *SubscribeFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *SubscribeFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBrand applies a predicate to check if query has an edge brand.
func (f *SubscribeFilter) WhereHasBrand() {
	f.Where(entql.HasEdge("brand"))
}

// WhereHasBrandWith applies a predicate to check if query has an edge brand with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasBrandWith(preds ...predicate.EbikeBrand) {
	f.Where(entql.HasEdgeWith("brand", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEbike applies a predicate to check if query has an edge ebike.
func (f *SubscribeFilter) WhereHasEbike() {
	f.Where(entql.HasEdge("ebike"))
}

// WhereHasEbikeWith applies a predicate to check if query has an edge ebike with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasEbikeWith(preds ...predicate.Ebike) {
	f.Where(entql.HasEdgeWith("ebike", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribeFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *SubscribeFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPauses applies a predicate to check if query has an edge pauses.
func (f *SubscribeFilter) WhereHasPauses() {
	f.Where(entql.HasEdge("pauses"))
}

// WhereHasPausesWith applies a predicate to check if query has an edge pauses with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasPausesWith(preds ...predicate.SubscribePause) {
	f.Where(entql.HasEdgeWith("pauses", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSuspends applies a predicate to check if query has an edge suspends.
func (f *SubscribeFilter) WhereHasSuspends() {
	f.Where(entql.HasEdge("suspends"))
}

// WhereHasSuspendsWith applies a predicate to check if query has an edge suspends with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasSuspendsWith(preds ...predicate.SubscribeSuspend) {
	f.Where(entql.HasEdgeWith("suspends", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAlters applies a predicate to check if query has an edge alters.
func (f *SubscribeFilter) WhereHasAlters() {
	f.Where(entql.HasEdge("alters"))
}

// WhereHasAltersWith applies a predicate to check if query has an edge alters with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasAltersWith(preds ...predicate.SubscribeAlter) {
	f.Where(entql.HasEdgeWith("alters", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *SubscribeFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInitialOrder applies a predicate to check if query has an edge initial_order.
func (f *SubscribeFilter) WhereHasInitialOrder() {
	f.Where(entql.HasEdge("initial_order"))
}

// WhereHasInitialOrderWith applies a predicate to check if query has an edge initial_order with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasInitialOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("initial_order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBills applies a predicate to check if query has an edge bills.
func (f *SubscribeFilter) WhereHasBills() {
	f.Where(entql.HasEdge("bills"))
}

// WhereHasBillsWith applies a predicate to check if query has an edge bills with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasBillsWith(preds ...predicate.EnterpriseBill) {
	f.Where(entql.HasEdgeWith("bills", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBattery applies a predicate to check if query has an edge battery.
func (f *SubscribeFilter) WhereHasBattery() {
	f.Where(entql.HasEdge("battery"))
}

// WhereHasBatteryWith applies a predicate to check if query has an edge battery with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasBatteryWith(preds ...predicate.Battery) {
	f.Where(entql.HasEdgeWith("battery", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (saq *SubscribeAlterQuery) addPredicate(pred func(s *sql.Selector)) {
	saq.predicates = append(saq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribeAlterQuery builder.
func (saq *SubscribeAlterQuery) Filter() *SubscribeAlterFilter {
	return &SubscribeAlterFilter{config: saq.config, predicateAdder: saq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribeAlterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribeAlterMutation builder.
func (m *SubscribeAlterMutation) Filter() *SubscribeAlterFilter {
	return &SubscribeAlterFilter{config: m.config, predicateAdder: m}
}

// SubscribeAlterFilter provides a generic filtering capability at runtime for SubscribeAlterQuery.
type SubscribeAlterFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscribeAlterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[63].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribeAlterFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribeAlterFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribeAlterFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribeAlterFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribealter.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribeAlterFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribealter.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribeAlterFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribealter.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribeAlterFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldRiderID))
}

// WhereManagerID applies the entql uint64 predicate on the manager_id field.
func (f *SubscribeAlterFilter) WhereManagerID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldManagerID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *SubscribeAlterFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldEnterpriseID))
}

// WhereAgentID applies the entql uint64 predicate on the agent_id field.
func (f *SubscribeAlterFilter) WhereAgentID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldAgentID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *SubscribeAlterFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldSubscribeID))
}

// WhereDays applies the entql int predicate on the days field.
func (f *SubscribeAlterFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(subscribealter.FieldDays))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *SubscribeAlterFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(subscribealter.FieldStatus))
}

// WhereReviewTime applies the entql time.Time predicate on the review_time field.
func (f *SubscribeAlterFilter) WhereReviewTime(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldReviewTime))
}

// WhereSubscribeEndAt applies the entql time.Time predicate on the subscribe_end_at field.
func (f *SubscribeAlterFilter) WhereSubscribeEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldSubscribeEndAt))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribeAlterFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *SubscribeAlterFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasManagerWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *SubscribeAlterFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAgent applies a predicate to check if query has an edge agent.
func (f *SubscribeAlterFilter) WhereHasAgent() {
	f.Where(entql.HasEdge("agent"))
}

// WhereHasAgentWith applies a predicate to check if query has an edge agent with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasAgentWith(preds ...predicate.Agent) {
	f.Where(entql.HasEdgeWith("agent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *SubscribeAlterFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (spq *SubscribePauseQuery) addPredicate(pred func(s *sql.Selector)) {
	spq.predicates = append(spq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribePauseQuery builder.
func (spq *SubscribePauseQuery) Filter() *SubscribePauseFilter {
	return &SubscribePauseFilter{config: spq.config, predicateAdder: spq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribePauseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribePauseMutation builder.
func (m *SubscribePauseMutation) Filter() *SubscribePauseFilter {
	return &SubscribePauseFilter{config: m.config, predicateAdder: m}
}

// SubscribePauseFilter provides a generic filtering capability at runtime for SubscribePauseQuery.
type SubscribePauseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscribePauseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[64].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribePauseFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribePauseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribePauseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscribePauseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribePauseFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribepause.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribePauseFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribepause.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribePauseFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribepause.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribePauseFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldRiderID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *SubscribePauseFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldEmployeeID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *SubscribePauseFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldCityID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *SubscribePauseFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldStoreID))
}

// WhereEndStoreID applies the entql uint64 predicate on the end_store_id field.
func (f *SubscribePauseFilter) WhereEndStoreID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldEndStoreID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *SubscribePauseFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldCabinetID))
}

// WhereEndCabinetID applies the entql uint64 predicate on the end_cabinet_id field.
func (f *SubscribePauseFilter) WhereEndCabinetID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldEndCabinetID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *SubscribePauseFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldSubscribeID))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *SubscribePauseFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *SubscribePauseFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldEndAt))
}

// WhereDays applies the entql int predicate on the days field.
func (f *SubscribePauseFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(subscribepause.FieldDays))
}

// WhereEndEmployeeID applies the entql uint64 predicate on the end_employee_id field.
func (f *SubscribePauseFilter) WhereEndEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldEndEmployeeID))
}

// WhereOverdueDays applies the entql int predicate on the overdue_days field.
func (f *SubscribePauseFilter) WhereOverdueDays(p entql.IntP) {
	f.Where(p.Field(subscribepause.FieldOverdueDays))
}

// WhereEndModifier applies the entql json.RawMessage predicate on the end_modifier field.
func (f *SubscribePauseFilter) WhereEndModifier(p entql.BytesP) {
	f.Where(p.Field(subscribepause.FieldEndModifier))
}

// WherePauseOverdue applies the entql bool predicate on the pause_overdue field.
func (f *SubscribePauseFilter) WherePauseOverdue(p entql.BoolP) {
	f.Where(p.Field(subscribepause.FieldPauseOverdue))
}

// WhereSuspendDays applies the entql int predicate on the suspend_days field.
func (f *SubscribePauseFilter) WhereSuspendDays(p entql.IntP) {
	f.Where(p.Field(subscribepause.FieldSuspendDays))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribePauseFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *SubscribePauseFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *SubscribePauseFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *SubscribePauseFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEndStore applies a predicate to check if query has an edge endStore.
func (f *SubscribePauseFilter) WhereHasEndStore() {
	f.Where(entql.HasEdge("endStore"))
}

// WhereHasEndStoreWith applies a predicate to check if query has an edge endStore with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasEndStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("endStore", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *SubscribePauseFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEndCabinet applies a predicate to check if query has an edge endCabinet.
func (f *SubscribePauseFilter) WhereHasEndCabinet() {
	f.Where(entql.HasEdge("endCabinet"))
}

// WhereHasEndCabinetWith applies a predicate to check if query has an edge endCabinet with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasEndCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("endCabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *SubscribePauseFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEndEmployee applies a predicate to check if query has an edge end_employee.
func (f *SubscribePauseFilter) WhereHasEndEmployee() {
	f.Where(entql.HasEdge("end_employee"))
}

// WhereHasEndEmployeeWith applies a predicate to check if query has an edge end_employee with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasEndEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("end_employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSuspends applies a predicate to check if query has an edge suspends.
func (f *SubscribePauseFilter) WhereHasSuspends() {
	f.Where(entql.HasEdge("suspends"))
}

// WhereHasSuspendsWith applies a predicate to check if query has an edge suspends with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasSuspendsWith(preds ...predicate.SubscribeSuspend) {
	f.Where(entql.HasEdgeWith("suspends", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (srq *SubscribeReminderQuery) addPredicate(pred func(s *sql.Selector)) {
	srq.predicates = append(srq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribeReminderQuery builder.
func (srq *SubscribeReminderQuery) Filter() *SubscribeReminderFilter {
	return &SubscribeReminderFilter{config: srq.config, predicateAdder: srq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribeReminderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribeReminderMutation builder.
func (m *SubscribeReminderMutation) Filter() *SubscribeReminderFilter {
	return &SubscribeReminderFilter{config: m.config, predicateAdder: m}
}

// SubscribeReminderFilter provides a generic filtering capability at runtime for SubscribeReminderQuery.
type SubscribeReminderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscribeReminderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[65].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribeReminderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribereminder.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribeReminderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribereminder.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribeReminderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribereminder.FieldUpdatedAt))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *SubscribeReminderFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(subscribereminder.FieldSubscribeID))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *SubscribeReminderFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(subscribereminder.FieldPlanID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribeReminderFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribereminder.FieldRiderID))
}

// WhereType applies the entql string predicate on the type field.
func (f *SubscribeReminderFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(subscribereminder.FieldType))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *SubscribeReminderFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(subscribereminder.FieldPhone))
}

// WhereName applies the entql string predicate on the name field.
func (f *SubscribeReminderFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(subscribereminder.FieldName))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *SubscribeReminderFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(subscribereminder.FieldSuccess))
}

// WhereDays applies the entql int predicate on the days field.
func (f *SubscribeReminderFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(subscribereminder.FieldDays))
}

// WherePlanName applies the entql string predicate on the plan_name field.
func (f *SubscribeReminderFilter) WherePlanName(p entql.StringP) {
	f.Where(p.Field(subscribereminder.FieldPlanName))
}

// WhereDate applies the entql string predicate on the date field.
func (f *SubscribeReminderFilter) WhereDate(p entql.StringP) {
	f.Where(p.Field(subscribereminder.FieldDate))
}

// WhereFee applies the entql float64 predicate on the fee field.
func (f *SubscribeReminderFilter) WhereFee(p entql.Float64P) {
	f.Where(p.Field(subscribereminder.FieldFee))
}

// WhereFeeFormula applies the entql string predicate on the fee_formula field.
func (f *SubscribeReminderFilter) WhereFeeFormula(p entql.StringP) {
	f.Where(p.Field(subscribereminder.FieldFeeFormula))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *SubscribeReminderFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *SubscribeReminderFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *SubscribeReminderFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *SubscribeReminderFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribeReminderFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribeReminderFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ssq *SubscribeSuspendQuery) addPredicate(pred func(s *sql.Selector)) {
	ssq.predicates = append(ssq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribeSuspendQuery builder.
func (ssq *SubscribeSuspendQuery) Filter() *SubscribeSuspendFilter {
	return &SubscribeSuspendFilter{config: ssq.config, predicateAdder: ssq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribeSuspendMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribeSuspendMutation builder.
func (m *SubscribeSuspendMutation) Filter() *SubscribeSuspendFilter {
	return &SubscribeSuspendFilter{config: m.config, predicateAdder: m}
}

// SubscribeSuspendFilter provides a generic filtering capability at runtime for SubscribeSuspendQuery.
type SubscribeSuspendFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscribeSuspendFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[66].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribeSuspendFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribesuspend.FieldID))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribeSuspendFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribesuspend.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribeSuspendFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribesuspend.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribeSuspendFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribesuspend.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *SubscribeSuspendFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(subscribesuspend.FieldCityID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribeSuspendFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribesuspend.FieldRiderID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *SubscribeSuspendFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(subscribesuspend.FieldSubscribeID))
}

// WherePauseID applies the entql uint64 predicate on the pause_id field.
func (f *SubscribeSuspendFilter) WherePauseID(p entql.Uint64P) {
	f.Where(p.Field(subscribesuspend.FieldPauseID))
}

// WhereDays applies the entql int predicate on the days field.
func (f *SubscribeSuspendFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(subscribesuspend.FieldDays))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *SubscribeSuspendFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(subscribesuspend.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *SubscribeSuspendFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribesuspend.FieldEndAt))
}

// WhereEndReason applies the entql string predicate on the end_reason field.
func (f *SubscribeSuspendFilter) WhereEndReason(p entql.StringP) {
	f.Where(p.Field(subscribesuspend.FieldEndReason))
}

// WhereEndModifier applies the entql json.RawMessage predicate on the end_modifier field.
func (f *SubscribeSuspendFilter) WhereEndModifier(p entql.BytesP) {
	f.Where(p.Field(subscribesuspend.FieldEndModifier))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *SubscribeSuspendFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *SubscribeSuspendFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribeSuspendFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribeSuspendFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *SubscribeSuspendFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *SubscribeSuspendFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPause applies a predicate to check if query has an edge pause.
func (f *SubscribeSuspendFilter) WhereHasPause() {
	f.Where(entql.HasEdge("pause"))
}

// WhereHasPauseWith applies a predicate to check if query has an edge pause with a given conditions (other predicates).
func (f *SubscribeSuspendFilter) WhereHasPauseWith(preds ...predicate.SubscribePause) {
	f.Where(entql.HasEdgeWith("pause", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
