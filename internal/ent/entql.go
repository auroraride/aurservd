// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/setting"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: contract.FieldID,
			},
		},
		Type: "Contract",
		Fields: map[string]*sqlgraph.FieldSpec{
			contract.FieldCreatedAt:  {Type: field.TypeTime, Column: contract.FieldCreatedAt},
			contract.FieldUpdatedAt:  {Type: field.TypeTime, Column: contract.FieldUpdatedAt},
			contract.FieldDeletedAt:  {Type: field.TypeTime, Column: contract.FieldDeletedAt},
			contract.FieldLastModify: {Type: field.TypeTime, Column: contract.FieldLastModify},
			contract.FieldRemark:     {Type: field.TypeString, Column: contract.FieldRemark},
			contract.FieldStatus:     {Type: field.TypeUint8, Column: contract.FieldStatus},
			contract.FieldRiderID:    {Type: field.TypeUint64, Column: contract.FieldRiderID},
			contract.FieldFlowID:     {Type: field.TypeString, Column: contract.FieldFlowID},
			contract.FieldSn:         {Type: field.TypeString, Column: contract.FieldSn},
			contract.FieldFiles:      {Type: field.TypeJSON, Column: contract.FieldFiles},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   manager.Table,
			Columns: manager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: manager.FieldID,
			},
		},
		Type: "Manager",
		Fields: map[string]*sqlgraph.FieldSpec{
			manager.FieldCreatedAt:  {Type: field.TypeTime, Column: manager.FieldCreatedAt},
			manager.FieldUpdatedAt:  {Type: field.TypeTime, Column: manager.FieldUpdatedAt},
			manager.FieldDeletedAt:  {Type: field.TypeTime, Column: manager.FieldDeletedAt},
			manager.FieldLastModify: {Type: field.TypeTime, Column: manager.FieldLastModify},
			manager.FieldRemark:     {Type: field.TypeString, Column: manager.FieldRemark},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
		Type: "Person",
		Fields: map[string]*sqlgraph.FieldSpec{
			person.FieldCreatedAt:      {Type: field.TypeTime, Column: person.FieldCreatedAt},
			person.FieldUpdatedAt:      {Type: field.TypeTime, Column: person.FieldUpdatedAt},
			person.FieldDeletedAt:      {Type: field.TypeTime, Column: person.FieldDeletedAt},
			person.FieldLastModify:     {Type: field.TypeTime, Column: person.FieldLastModify},
			person.FieldRemark:         {Type: field.TypeString, Column: person.FieldRemark},
			person.FieldStatus:         {Type: field.TypeUint8, Column: person.FieldStatus},
			person.FieldBlock:          {Type: field.TypeBool, Column: person.FieldBlock},
			person.FieldName:           {Type: field.TypeString, Column: person.FieldName},
			person.FieldIDCardNumber:   {Type: field.TypeString, Column: person.FieldIDCardNumber},
			person.FieldIDCardType:     {Type: field.TypeUint8, Column: person.FieldIDCardType},
			person.FieldIDCardPortrait: {Type: field.TypeString, Column: person.FieldIDCardPortrait},
			person.FieldIDCardNational: {Type: field.TypeString, Column: person.FieldIDCardNational},
			person.FieldAuthFace:       {Type: field.TypeString, Column: person.FieldAuthFace},
			person.FieldAuthResult:     {Type: field.TypeJSON, Column: person.FieldAuthResult},
			person.FieldAuthAt:         {Type: field.TypeTime, Column: person.FieldAuthAt},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
		Type: "Rider",
		Fields: map[string]*sqlgraph.FieldSpec{
			rider.FieldCreatedAt:      {Type: field.TypeTime, Column: rider.FieldCreatedAt},
			rider.FieldUpdatedAt:      {Type: field.TypeTime, Column: rider.FieldUpdatedAt},
			rider.FieldDeletedAt:      {Type: field.TypeTime, Column: rider.FieldDeletedAt},
			rider.FieldLastModify:     {Type: field.TypeTime, Column: rider.FieldLastModify},
			rider.FieldRemark:         {Type: field.TypeString, Column: rider.FieldRemark},
			rider.FieldPersonID:       {Type: field.TypeUint64, Column: rider.FieldPersonID},
			rider.FieldGroupID:        {Type: field.TypeUint64, Column: rider.FieldGroupID},
			rider.FieldPhone:          {Type: field.TypeString, Column: rider.FieldPhone},
			rider.FieldContact:        {Type: field.TypeJSON, Column: rider.FieldContact},
			rider.FieldDeviceType:     {Type: field.TypeUint8, Column: rider.FieldDeviceType},
			rider.FieldLastDevice:     {Type: field.TypeString, Column: rider.FieldLastDevice},
			rider.FieldIsNewDevice:    {Type: field.TypeBool, Column: rider.FieldIsNewDevice},
			rider.FieldLastFace:       {Type: field.TypeString, Column: rider.FieldLastFace},
			rider.FieldPushID:         {Type: field.TypeString, Column: rider.FieldPushID},
			rider.FieldLastSigninAt:   {Type: field.TypeTime, Column: rider.FieldLastSigninAt},
			rider.FieldEsignAccountID: {Type: field.TypeString, Column: rider.FieldEsignAccountID},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   setting.Table,
			Columns: setting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: setting.FieldID,
			},
		},
		Type: "Setting",
		Fields: map[string]*sqlgraph.FieldSpec{
			setting.FieldCreatedAt: {Type: field.TypeTime, Column: setting.FieldCreatedAt},
			setting.FieldUpdatedAt: {Type: field.TypeTime, Column: setting.FieldUpdatedAt},
			setting.FieldKey:       {Type: field.TypeString, Column: setting.FieldKey},
			setting.FieldVal:       {Type: field.TypeJSON, Column: setting.FieldVal},
		},
	}
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
		},
		"Contract",
		"Rider",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
		},
		"Person",
		"Rider",
	)
	graph.MustAddE(
		"person",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
		},
		"Rider",
		"Person",
	)
	graph.MustAddE(
		"contract",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractTable,
			Columns: []string{rider.ContractColumn},
			Bidi:    false,
		},
		"Rider",
		"Contract",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContractQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContractQuery builder.
func (cq *ContractQuery) Filter() *ContractFilter {
	return &ContractFilter{cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContractMutation builder.
func (m *ContractMutation) Filter() *ContractFilter {
	return &ContractFilter{m}
}

// ContractFilter provides a generic filtering capability at runtime for ContractQuery.
type ContractFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldDeletedAt))
}

// WhereLastModify applies the entql time.Time predicate on the last_modify field.
func (f *ContractFilter) WhereLastModify(p entql.TimeP) {
	f.Where(p.Field(contract.FieldLastModify))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(contract.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ContractFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(contract.FieldStatus))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ContractFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldRiderID))
}

// WhereFlowID applies the entql string predicate on the flow_id field.
func (f *ContractFilter) WhereFlowID(p entql.StringP) {
	f.Where(p.Field(contract.FieldFlowID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *ContractFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(contract.FieldSn))
}

// WhereFiles applies the entql json.RawMessage predicate on the files field.
func (f *ContractFilter) WhereFiles(p entql.BytesP) {
	f.Where(p.Field(contract.FieldFiles))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ContractFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ContractFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *ManagerQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ManagerQuery builder.
func (mq *ManagerQuery) Filter() *ManagerFilter {
	return &ManagerFilter{mq}
}

// addPredicate implements the predicateAdder interface.
func (m *ManagerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ManagerMutation builder.
func (m *ManagerMutation) Filter() *ManagerFilter {
	return &ManagerFilter{m}
}

// ManagerFilter provides a generic filtering capability at runtime for ManagerQuery.
type ManagerFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ManagerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ManagerFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(manager.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ManagerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ManagerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ManagerFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldDeletedAt))
}

// WhereLastModify applies the entql time.Time predicate on the last_modify field.
func (f *ManagerFilter) WhereLastModify(p entql.TimeP) {
	f.Where(p.Field(manager.FieldLastModify))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ManagerFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(manager.FieldRemark))
}

// addPredicate implements the predicateAdder interface.
func (pq *PersonQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonQuery builder.
func (pq *PersonQuery) Filter() *PersonFilter {
	return &PersonFilter{pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonMutation builder.
func (m *PersonMutation) Filter() *PersonFilter {
	return &PersonFilter{m}
}

// PersonFilter provides a generic filtering capability at runtime for PersonQuery.
type PersonFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PersonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PersonFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(person.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PersonFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldDeletedAt))
}

// WhereLastModify applies the entql time.Time predicate on the last_modify field.
func (f *PersonFilter) WhereLastModify(p entql.TimeP) {
	f.Where(p.Field(person.FieldLastModify))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PersonFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(person.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *PersonFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(person.FieldStatus))
}

// WhereBlock applies the entql bool predicate on the block field.
func (f *PersonFilter) WhereBlock(p entql.BoolP) {
	f.Where(p.Field(person.FieldBlock))
}

// WhereName applies the entql string predicate on the name field.
func (f *PersonFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(person.FieldName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *PersonFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNumber))
}

// WhereIDCardType applies the entql uint8 predicate on the id_card_type field.
func (f *PersonFilter) WhereIDCardType(p entql.Uint8P) {
	f.Where(p.Field(person.FieldIDCardType))
}

// WhereIDCardPortrait applies the entql string predicate on the id_card_portrait field.
func (f *PersonFilter) WhereIDCardPortrait(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardPortrait))
}

// WhereIDCardNational applies the entql string predicate on the id_card_national field.
func (f *PersonFilter) WhereIDCardNational(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNational))
}

// WhereAuthFace applies the entql string predicate on the auth_face field.
func (f *PersonFilter) WhereAuthFace(p entql.StringP) {
	f.Where(p.Field(person.FieldAuthFace))
}

// WhereAuthResult applies the entql json.RawMessage predicate on the auth_result field.
func (f *PersonFilter) WhereAuthResult(p entql.BytesP) {
	f.Where(p.Field(person.FieldAuthResult))
}

// WhereAuthAt applies the entql time.Time predicate on the auth_at field.
func (f *PersonFilter) WhereAuthAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldAuthAt))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PersonFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PersonFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RiderQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiderQuery builder.
func (rq *RiderQuery) Filter() *RiderFilter {
	return &RiderFilter{rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiderMutation builder.
func (m *RiderMutation) Filter() *RiderFilter {
	return &RiderFilter{m}
}

// RiderFilter provides a generic filtering capability at runtime for RiderQuery.
type RiderFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *RiderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RiderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldDeletedAt))
}

// WhereLastModify applies the entql time.Time predicate on the last_modify field.
func (f *RiderFilter) WhereLastModify(p entql.TimeP) {
	f.Where(p.Field(rider.FieldLastModify))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RiderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(rider.FieldRemark))
}

// WherePersonID applies the entql uint64 predicate on the person_id field.
func (f *RiderFilter) WherePersonID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldPersonID))
}

// WhereGroupID applies the entql uint64 predicate on the group_id field.
func (f *RiderFilter) WhereGroupID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldGroupID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *RiderFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(rider.FieldPhone))
}

// WhereContact applies the entql json.RawMessage predicate on the contact field.
func (f *RiderFilter) WhereContact(p entql.BytesP) {
	f.Where(p.Field(rider.FieldContact))
}

// WhereDeviceType applies the entql uint8 predicate on the device_type field.
func (f *RiderFilter) WhereDeviceType(p entql.Uint8P) {
	f.Where(p.Field(rider.FieldDeviceType))
}

// WhereLastDevice applies the entql string predicate on the last_device field.
func (f *RiderFilter) WhereLastDevice(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastDevice))
}

// WhereIsNewDevice applies the entql bool predicate on the is_new_device field.
func (f *RiderFilter) WhereIsNewDevice(p entql.BoolP) {
	f.Where(p.Field(rider.FieldIsNewDevice))
}

// WhereLastFace applies the entql string predicate on the last_face field.
func (f *RiderFilter) WhereLastFace(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastFace))
}

// WherePushID applies the entql string predicate on the push_id field.
func (f *RiderFilter) WherePushID(p entql.StringP) {
	f.Where(p.Field(rider.FieldPushID))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *RiderFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldLastSigninAt))
}

// WhereEsignAccountID applies the entql string predicate on the esign_account_id field.
func (f *RiderFilter) WhereEsignAccountID(p entql.StringP) {
	f.Where(p.Field(rider.FieldEsignAccountID))
}

// WhereHasPerson applies a predicate to check if query has an edge person.
func (f *RiderFilter) WhereHasPerson() {
	f.Where(entql.HasEdge("person"))
}

// WhereHasPersonWith applies a predicate to check if query has an edge person with a given conditions (other predicates).
func (f *RiderFilter) WhereHasPersonWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("person", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContract applies a predicate to check if query has an edge contract.
func (f *RiderFilter) WhereHasContract() {
	f.Where(entql.HasEdge("contract"))
}

// WhereHasContractWith applies a predicate to check if query has an edge contract with a given conditions (other predicates).
func (f *RiderFilter) WhereHasContractWith(preds ...predicate.Contract) {
	f.Where(entql.HasEdgeWith("contract", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SettingQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SettingQuery builder.
func (sq *SettingQuery) Filter() *SettingFilter {
	return &SettingFilter{sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SettingMutation builder.
func (m *SettingMutation) Filter() *SettingFilter {
	return &SettingFilter{m}
}

// SettingFilter provides a generic filtering capability at runtime for SettingQuery.
type SettingFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SettingFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(setting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldUpdatedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *SettingFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(setting.FieldKey))
}

// WhereVal applies the entql json.RawMessage predicate on the val field.
func (f *SettingFilter) WhereVal(p entql.BytesP) {
	f.Where(p.Field(setting.FieldVal))
}
