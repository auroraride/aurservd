// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprepayment"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/inventory"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
	"github.com/auroraride/aurservd/internal/ent/role"
	"github.com/auroraride/aurservd/internal/ent/setting"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 36)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   assistance.Table,
			Columns: assistance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: assistance.FieldID,
			},
		},
		Type: "Assistance",
		Fields: map[string]*sqlgraph.FieldSpec{
			assistance.FieldCreatedAt:        {Type: field.TypeTime, Column: assistance.FieldCreatedAt},
			assistance.FieldUpdatedAt:        {Type: field.TypeTime, Column: assistance.FieldUpdatedAt},
			assistance.FieldDeletedAt:        {Type: field.TypeTime, Column: assistance.FieldDeletedAt},
			assistance.FieldCreator:          {Type: field.TypeJSON, Column: assistance.FieldCreator},
			assistance.FieldLastModifier:     {Type: field.TypeJSON, Column: assistance.FieldLastModifier},
			assistance.FieldRemark:           {Type: field.TypeString, Column: assistance.FieldRemark},
			assistance.FieldStoreID:          {Type: field.TypeUint64, Column: assistance.FieldStoreID},
			assistance.FieldRiderID:          {Type: field.TypeUint64, Column: assistance.FieldRiderID},
			assistance.FieldSubscribeID:      {Type: field.TypeUint64, Column: assistance.FieldSubscribeID},
			assistance.FieldCityID:           {Type: field.TypeUint64, Column: assistance.FieldCityID},
			assistance.FieldEmployeeID:       {Type: field.TypeUint64, Column: assistance.FieldEmployeeID},
			assistance.FieldOrderID:          {Type: field.TypeUint64, Column: assistance.FieldOrderID},
			assistance.FieldStatus:           {Type: field.TypeUint8, Column: assistance.FieldStatus},
			assistance.FieldLng:              {Type: field.TypeFloat64, Column: assistance.FieldLng},
			assistance.FieldLat:              {Type: field.TypeFloat64, Column: assistance.FieldLat},
			assistance.FieldAddress:          {Type: field.TypeString, Column: assistance.FieldAddress},
			assistance.FieldBreakdown:        {Type: field.TypeString, Column: assistance.FieldBreakdown},
			assistance.FieldBreakdownDesc:    {Type: field.TypeString, Column: assistance.FieldBreakdownDesc},
			assistance.FieldBreakdownPhotos:  {Type: field.TypeJSON, Column: assistance.FieldBreakdownPhotos},
			assistance.FieldCancelReason:     {Type: field.TypeString, Column: assistance.FieldCancelReason},
			assistance.FieldCancelReasonDesc: {Type: field.TypeString, Column: assistance.FieldCancelReasonDesc},
			assistance.FieldDistance:         {Type: field.TypeFloat64, Column: assistance.FieldDistance},
			assistance.FieldReason:           {Type: field.TypeString, Column: assistance.FieldReason},
			assistance.FieldDetectPhoto:      {Type: field.TypeString, Column: assistance.FieldDetectPhoto},
			assistance.FieldJointPhoto:       {Type: field.TypeString, Column: assistance.FieldJointPhoto},
			assistance.FieldCost:             {Type: field.TypeFloat64, Column: assistance.FieldCost},
			assistance.FieldRefusedDesc:      {Type: field.TypeString, Column: assistance.FieldRefusedDesc},
			assistance.FieldPayAt:            {Type: field.TypeTime, Column: assistance.FieldPayAt},
			assistance.FieldAllocateAt:       {Type: field.TypeTime, Column: assistance.FieldAllocateAt},
			assistance.FieldWait:             {Type: field.TypeInt, Column: assistance.FieldWait},
			assistance.FieldFreeReason:       {Type: field.TypeString, Column: assistance.FieldFreeReason},
			assistance.FieldFailReason:       {Type: field.TypeString, Column: assistance.FieldFailReason},
			assistance.FieldProcessAt:        {Type: field.TypeTime, Column: assistance.FieldProcessAt},
			assistance.FieldPrice:            {Type: field.TypeFloat64, Column: assistance.FieldPrice},
			assistance.FieldNaviDuration:     {Type: field.TypeInt, Column: assistance.FieldNaviDuration},
			assistance.FieldNaviPolylines:    {Type: field.TypeJSON, Column: assistance.FieldNaviPolylines},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   attendance.Table,
			Columns: attendance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: attendance.FieldID,
			},
		},
		Type: "Attendance",
		Fields: map[string]*sqlgraph.FieldSpec{
			attendance.FieldCreatedAt:    {Type: field.TypeTime, Column: attendance.FieldCreatedAt},
			attendance.FieldUpdatedAt:    {Type: field.TypeTime, Column: attendance.FieldUpdatedAt},
			attendance.FieldDeletedAt:    {Type: field.TypeTime, Column: attendance.FieldDeletedAt},
			attendance.FieldCreator:      {Type: field.TypeJSON, Column: attendance.FieldCreator},
			attendance.FieldLastModifier: {Type: field.TypeJSON, Column: attendance.FieldLastModifier},
			attendance.FieldRemark:       {Type: field.TypeString, Column: attendance.FieldRemark},
			attendance.FieldStoreID:      {Type: field.TypeUint64, Column: attendance.FieldStoreID},
			attendance.FieldEmployeeID:   {Type: field.TypeUint64, Column: attendance.FieldEmployeeID},
			attendance.FieldInventory:    {Type: field.TypeJSON, Column: attendance.FieldInventory},
			attendance.FieldPhoto:        {Type: field.TypeString, Column: attendance.FieldPhoto},
			attendance.FieldDuty:         {Type: field.TypeBool, Column: attendance.FieldDuty},
			attendance.FieldDate:         {Type: field.TypeTime, Column: attendance.FieldDate},
			attendance.FieldLng:          {Type: field.TypeFloat64, Column: attendance.FieldLng},
			attendance.FieldLat:          {Type: field.TypeFloat64, Column: attendance.FieldLat},
			attendance.FieldAddress:      {Type: field.TypeString, Column: attendance.FieldAddress},
			attendance.FieldDistance:     {Type: field.TypeFloat64, Column: attendance.FieldDistance},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   batterymodel.Table,
			Columns: batterymodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batterymodel.FieldID,
			},
		},
		Type: "BatteryModel",
		Fields: map[string]*sqlgraph.FieldSpec{
			batterymodel.FieldCreatedAt:    {Type: field.TypeTime, Column: batterymodel.FieldCreatedAt},
			batterymodel.FieldUpdatedAt:    {Type: field.TypeTime, Column: batterymodel.FieldUpdatedAt},
			batterymodel.FieldDeletedAt:    {Type: field.TypeTime, Column: batterymodel.FieldDeletedAt},
			batterymodel.FieldCreator:      {Type: field.TypeJSON, Column: batterymodel.FieldCreator},
			batterymodel.FieldLastModifier: {Type: field.TypeJSON, Column: batterymodel.FieldLastModifier},
			batterymodel.FieldRemark:       {Type: field.TypeString, Column: batterymodel.FieldRemark},
			batterymodel.FieldModel:        {Type: field.TypeString, Column: batterymodel.FieldModel},
			batterymodel.FieldEnable:       {Type: field.TypeBool, Column: batterymodel.FieldEnable},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   branch.Table,
			Columns: branch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branch.FieldID,
			},
		},
		Type: "Branch",
		Fields: map[string]*sqlgraph.FieldSpec{
			branch.FieldCreatedAt:    {Type: field.TypeTime, Column: branch.FieldCreatedAt},
			branch.FieldUpdatedAt:    {Type: field.TypeTime, Column: branch.FieldUpdatedAt},
			branch.FieldDeletedAt:    {Type: field.TypeTime, Column: branch.FieldDeletedAt},
			branch.FieldCreator:      {Type: field.TypeJSON, Column: branch.FieldCreator},
			branch.FieldLastModifier: {Type: field.TypeJSON, Column: branch.FieldLastModifier},
			branch.FieldRemark:       {Type: field.TypeString, Column: branch.FieldRemark},
			branch.FieldCityID:       {Type: field.TypeUint64, Column: branch.FieldCityID},
			branch.FieldName:         {Type: field.TypeString, Column: branch.FieldName},
			branch.FieldLng:          {Type: field.TypeFloat64, Column: branch.FieldLng},
			branch.FieldLat:          {Type: field.TypeFloat64, Column: branch.FieldLat},
			branch.FieldAddress:      {Type: field.TypeString, Column: branch.FieldAddress},
			branch.FieldPhotos:       {Type: field.TypeJSON, Column: branch.FieldPhotos},
			branch.FieldGeom:         {Type: field.TypeOther, Column: branch.FieldGeom},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   branchcontract.Table,
			Columns: branchcontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branchcontract.FieldID,
			},
		},
		Type: "BranchContract",
		Fields: map[string]*sqlgraph.FieldSpec{
			branchcontract.FieldCreatedAt:         {Type: field.TypeTime, Column: branchcontract.FieldCreatedAt},
			branchcontract.FieldUpdatedAt:         {Type: field.TypeTime, Column: branchcontract.FieldUpdatedAt},
			branchcontract.FieldDeletedAt:         {Type: field.TypeTime, Column: branchcontract.FieldDeletedAt},
			branchcontract.FieldCreator:           {Type: field.TypeJSON, Column: branchcontract.FieldCreator},
			branchcontract.FieldLastModifier:      {Type: field.TypeJSON, Column: branchcontract.FieldLastModifier},
			branchcontract.FieldRemark:            {Type: field.TypeString, Column: branchcontract.FieldRemark},
			branchcontract.FieldBranchID:          {Type: field.TypeUint64, Column: branchcontract.FieldBranchID},
			branchcontract.FieldLandlordName:      {Type: field.TypeString, Column: branchcontract.FieldLandlordName},
			branchcontract.FieldIDCardNumber:      {Type: field.TypeString, Column: branchcontract.FieldIDCardNumber},
			branchcontract.FieldPhone:             {Type: field.TypeString, Column: branchcontract.FieldPhone},
			branchcontract.FieldBankNumber:        {Type: field.TypeString, Column: branchcontract.FieldBankNumber},
			branchcontract.FieldPledge:            {Type: field.TypeFloat64, Column: branchcontract.FieldPledge},
			branchcontract.FieldRent:              {Type: field.TypeFloat64, Column: branchcontract.FieldRent},
			branchcontract.FieldLease:             {Type: field.TypeUint, Column: branchcontract.FieldLease},
			branchcontract.FieldElectricityPledge: {Type: field.TypeFloat64, Column: branchcontract.FieldElectricityPledge},
			branchcontract.FieldElectricity:       {Type: field.TypeFloat64, Column: branchcontract.FieldElectricity},
			branchcontract.FieldArea:              {Type: field.TypeFloat64, Column: branchcontract.FieldArea},
			branchcontract.FieldStartTime:         {Type: field.TypeString, Column: branchcontract.FieldStartTime},
			branchcontract.FieldEndTime:           {Type: field.TypeString, Column: branchcontract.FieldEndTime},
			branchcontract.FieldFile:              {Type: field.TypeString, Column: branchcontract.FieldFile},
			branchcontract.FieldSheets:            {Type: field.TypeJSON, Column: branchcontract.FieldSheets},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   business.Table,
			Columns: business.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: business.FieldID,
			},
		},
		Type: "Business",
		Fields: map[string]*sqlgraph.FieldSpec{
			business.FieldCreatedAt:    {Type: field.TypeTime, Column: business.FieldCreatedAt},
			business.FieldUpdatedAt:    {Type: field.TypeTime, Column: business.FieldUpdatedAt},
			business.FieldDeletedAt:    {Type: field.TypeTime, Column: business.FieldDeletedAt},
			business.FieldCreator:      {Type: field.TypeJSON, Column: business.FieldCreator},
			business.FieldLastModifier: {Type: field.TypeJSON, Column: business.FieldLastModifier},
			business.FieldRemark:       {Type: field.TypeString, Column: business.FieldRemark},
			business.FieldRiderID:      {Type: field.TypeUint64, Column: business.FieldRiderID},
			business.FieldCityID:       {Type: field.TypeUint64, Column: business.FieldCityID},
			business.FieldSubscribeID:  {Type: field.TypeUint64, Column: business.FieldSubscribeID},
			business.FieldEmployeeID:   {Type: field.TypeUint64, Column: business.FieldEmployeeID},
			business.FieldStoreID:      {Type: field.TypeUint64, Column: business.FieldStoreID},
			business.FieldPlanID:       {Type: field.TypeUint64, Column: business.FieldPlanID},
			business.FieldEnterpriseID: {Type: field.TypeUint64, Column: business.FieldEnterpriseID},
			business.FieldStationID:    {Type: field.TypeUint64, Column: business.FieldStationID},
			business.FieldType:         {Type: field.TypeEnum, Column: business.FieldType},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinet.Table,
			Columns: cabinet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinet.FieldID,
			},
		},
		Type: "Cabinet",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinet.FieldCreatedAt:      {Type: field.TypeTime, Column: cabinet.FieldCreatedAt},
			cabinet.FieldUpdatedAt:      {Type: field.TypeTime, Column: cabinet.FieldUpdatedAt},
			cabinet.FieldDeletedAt:      {Type: field.TypeTime, Column: cabinet.FieldDeletedAt},
			cabinet.FieldCreator:        {Type: field.TypeJSON, Column: cabinet.FieldCreator},
			cabinet.FieldLastModifier:   {Type: field.TypeJSON, Column: cabinet.FieldLastModifier},
			cabinet.FieldRemark:         {Type: field.TypeString, Column: cabinet.FieldRemark},
			cabinet.FieldCityID:         {Type: field.TypeUint64, Column: cabinet.FieldCityID},
			cabinet.FieldBranchID:       {Type: field.TypeUint64, Column: cabinet.FieldBranchID},
			cabinet.FieldSn:             {Type: field.TypeString, Column: cabinet.FieldSn},
			cabinet.FieldBrand:          {Type: field.TypeString, Column: cabinet.FieldBrand},
			cabinet.FieldSerial:         {Type: field.TypeString, Column: cabinet.FieldSerial},
			cabinet.FieldName:           {Type: field.TypeString, Column: cabinet.FieldName},
			cabinet.FieldDoors:          {Type: field.TypeUint, Column: cabinet.FieldDoors},
			cabinet.FieldStatus:         {Type: field.TypeUint8, Column: cabinet.FieldStatus},
			cabinet.FieldHealth:         {Type: field.TypeUint8, Column: cabinet.FieldHealth},
			cabinet.FieldBin:            {Type: field.TypeJSON, Column: cabinet.FieldBin},
			cabinet.FieldBatteryNum:     {Type: field.TypeUint, Column: cabinet.FieldBatteryNum},
			cabinet.FieldBatteryFullNum: {Type: field.TypeUint, Column: cabinet.FieldBatteryFullNum},
			cabinet.FieldLng:            {Type: field.TypeFloat64, Column: cabinet.FieldLng},
			cabinet.FieldLat:            {Type: field.TypeFloat64, Column: cabinet.FieldLat},
			cabinet.FieldAddress:        {Type: field.TypeString, Column: cabinet.FieldAddress},
			cabinet.FieldSimSn:          {Type: field.TypeString, Column: cabinet.FieldSimSn},
			cabinet.FieldSimDate:        {Type: field.TypeTime, Column: cabinet.FieldSimDate},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinetfault.Table,
			Columns: cabinetfault.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetfault.FieldID,
			},
		},
		Type: "CabinetFault",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinetfault.FieldCreatedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldCreatedAt},
			cabinetfault.FieldUpdatedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldUpdatedAt},
			cabinetfault.FieldDeletedAt:    {Type: field.TypeTime, Column: cabinetfault.FieldDeletedAt},
			cabinetfault.FieldCreator:      {Type: field.TypeJSON, Column: cabinetfault.FieldCreator},
			cabinetfault.FieldLastModifier: {Type: field.TypeJSON, Column: cabinetfault.FieldLastModifier},
			cabinetfault.FieldRemark:       {Type: field.TypeString, Column: cabinetfault.FieldRemark},
			cabinetfault.FieldCityID:       {Type: field.TypeUint64, Column: cabinetfault.FieldCityID},
			cabinetfault.FieldStatus:       {Type: field.TypeUint8, Column: cabinetfault.FieldStatus},
			cabinetfault.FieldBranchID:     {Type: field.TypeUint64, Column: cabinetfault.FieldBranchID},
			cabinetfault.FieldCabinetID:    {Type: field.TypeUint64, Column: cabinetfault.FieldCabinetID},
			cabinetfault.FieldRiderID:      {Type: field.TypeUint64, Column: cabinetfault.FieldRiderID},
			cabinetfault.FieldFault:        {Type: field.TypeString, Column: cabinetfault.FieldFault},
			cabinetfault.FieldAttachments:  {Type: field.TypeJSON, Column: cabinetfault.FieldAttachments},
			cabinetfault.FieldDescription:  {Type: field.TypeString, Column: cabinetfault.FieldDescription},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: city.FieldID,
			},
		},
		Type: "City",
		Fields: map[string]*sqlgraph.FieldSpec{
			city.FieldCreatedAt:    {Type: field.TypeTime, Column: city.FieldCreatedAt},
			city.FieldUpdatedAt:    {Type: field.TypeTime, Column: city.FieldUpdatedAt},
			city.FieldDeletedAt:    {Type: field.TypeTime, Column: city.FieldDeletedAt},
			city.FieldCreator:      {Type: field.TypeJSON, Column: city.FieldCreator},
			city.FieldLastModifier: {Type: field.TypeJSON, Column: city.FieldLastModifier},
			city.FieldRemark:       {Type: field.TypeString, Column: city.FieldRemark},
			city.FieldOpen:         {Type: field.TypeBool, Column: city.FieldOpen},
			city.FieldName:         {Type: field.TypeString, Column: city.FieldName},
			city.FieldCode:         {Type: field.TypeString, Column: city.FieldCode},
			city.FieldParentID:     {Type: field.TypeUint64, Column: city.FieldParentID},
			city.FieldLng:          {Type: field.TypeFloat64, Column: city.FieldLng},
			city.FieldLat:          {Type: field.TypeFloat64, Column: city.FieldLat},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   commission.Table,
			Columns: commission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: commission.FieldID,
			},
		},
		Type: "Commission",
		Fields: map[string]*sqlgraph.FieldSpec{
			commission.FieldCreatedAt:    {Type: field.TypeTime, Column: commission.FieldCreatedAt},
			commission.FieldUpdatedAt:    {Type: field.TypeTime, Column: commission.FieldUpdatedAt},
			commission.FieldDeletedAt:    {Type: field.TypeTime, Column: commission.FieldDeletedAt},
			commission.FieldCreator:      {Type: field.TypeJSON, Column: commission.FieldCreator},
			commission.FieldLastModifier: {Type: field.TypeJSON, Column: commission.FieldLastModifier},
			commission.FieldRemark:       {Type: field.TypeString, Column: commission.FieldRemark},
			commission.FieldOrderID:      {Type: field.TypeUint64, Column: commission.FieldOrderID},
			commission.FieldAmount:       {Type: field.TypeFloat64, Column: commission.FieldAmount},
			commission.FieldStatus:       {Type: field.TypeUint8, Column: commission.FieldStatus},
			commission.FieldEmployeeID:   {Type: field.TypeUint64, Column: commission.FieldEmployeeID},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: contract.FieldID,
			},
		},
		Type: "Contract",
		Fields: map[string]*sqlgraph.FieldSpec{
			contract.FieldCreatedAt:    {Type: field.TypeTime, Column: contract.FieldCreatedAt},
			contract.FieldUpdatedAt:    {Type: field.TypeTime, Column: contract.FieldUpdatedAt},
			contract.FieldDeletedAt:    {Type: field.TypeTime, Column: contract.FieldDeletedAt},
			contract.FieldCreator:      {Type: field.TypeJSON, Column: contract.FieldCreator},
			contract.FieldLastModifier: {Type: field.TypeJSON, Column: contract.FieldLastModifier},
			contract.FieldRemark:       {Type: field.TypeString, Column: contract.FieldRemark},
			contract.FieldStatus:       {Type: field.TypeUint8, Column: contract.FieldStatus},
			contract.FieldRiderID:      {Type: field.TypeUint64, Column: contract.FieldRiderID},
			contract.FieldFlowID:       {Type: field.TypeString, Column: contract.FieldFlowID},
			contract.FieldSn:           {Type: field.TypeString, Column: contract.FieldSn},
			contract.FieldFiles:        {Type: field.TypeJSON, Column: contract.FieldFiles},
			contract.FieldEffective:    {Type: field.TypeBool, Column: contract.FieldEffective},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   employee.Table,
			Columns: employee.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: employee.FieldID,
			},
		},
		Type: "Employee",
		Fields: map[string]*sqlgraph.FieldSpec{
			employee.FieldCreatedAt:    {Type: field.TypeTime, Column: employee.FieldCreatedAt},
			employee.FieldUpdatedAt:    {Type: field.TypeTime, Column: employee.FieldUpdatedAt},
			employee.FieldDeletedAt:    {Type: field.TypeTime, Column: employee.FieldDeletedAt},
			employee.FieldCreator:      {Type: field.TypeJSON, Column: employee.FieldCreator},
			employee.FieldLastModifier: {Type: field.TypeJSON, Column: employee.FieldLastModifier},
			employee.FieldRemark:       {Type: field.TypeString, Column: employee.FieldRemark},
			employee.FieldCityID:       {Type: field.TypeUint64, Column: employee.FieldCityID},
			employee.FieldSn:           {Type: field.TypeUUID, Column: employee.FieldSn},
			employee.FieldName:         {Type: field.TypeString, Column: employee.FieldName},
			employee.FieldPhone:        {Type: field.TypeString, Column: employee.FieldPhone},
			employee.FieldEnable:       {Type: field.TypeBool, Column: employee.FieldEnable},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprise.Table,
			Columns: enterprise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprise.FieldID,
			},
		},
		Type: "Enterprise",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprise.FieldCreatedAt:       {Type: field.TypeTime, Column: enterprise.FieldCreatedAt},
			enterprise.FieldUpdatedAt:       {Type: field.TypeTime, Column: enterprise.FieldUpdatedAt},
			enterprise.FieldDeletedAt:       {Type: field.TypeTime, Column: enterprise.FieldDeletedAt},
			enterprise.FieldCreator:         {Type: field.TypeJSON, Column: enterprise.FieldCreator},
			enterprise.FieldLastModifier:    {Type: field.TypeJSON, Column: enterprise.FieldLastModifier},
			enterprise.FieldRemark:          {Type: field.TypeString, Column: enterprise.FieldRemark},
			enterprise.FieldCityID:          {Type: field.TypeUint64, Column: enterprise.FieldCityID},
			enterprise.FieldName:            {Type: field.TypeString, Column: enterprise.FieldName},
			enterprise.FieldStatus:          {Type: field.TypeUint8, Column: enterprise.FieldStatus},
			enterprise.FieldContactName:     {Type: field.TypeString, Column: enterprise.FieldContactName},
			enterprise.FieldContactPhone:    {Type: field.TypeString, Column: enterprise.FieldContactPhone},
			enterprise.FieldIdcardNumber:    {Type: field.TypeString, Column: enterprise.FieldIdcardNumber},
			enterprise.FieldAddress:         {Type: field.TypeString, Column: enterprise.FieldAddress},
			enterprise.FieldPayment:         {Type: field.TypeUint8, Column: enterprise.FieldPayment},
			enterprise.FieldDeposit:         {Type: field.TypeFloat64, Column: enterprise.FieldDeposit},
			enterprise.FieldBalance:         {Type: field.TypeFloat64, Column: enterprise.FieldBalance},
			enterprise.FieldPrepaymentTotal: {Type: field.TypeFloat64, Column: enterprise.FieldPrepaymentTotal},
			enterprise.FieldSuspensedAt:     {Type: field.TypeTime, Column: enterprise.FieldSuspensedAt},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisebill.Table,
			Columns: enterprisebill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisebill.FieldID,
			},
		},
		Type: "EnterpriseBill",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisebill.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprisebill.FieldCreatedAt},
			enterprisebill.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprisebill.FieldUpdatedAt},
			enterprisebill.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprisebill.FieldDeletedAt},
			enterprisebill.FieldCreator:      {Type: field.TypeJSON, Column: enterprisebill.FieldCreator},
			enterprisebill.FieldLastModifier: {Type: field.TypeJSON, Column: enterprisebill.FieldLastModifier},
			enterprisebill.FieldRemark:       {Type: field.TypeString, Column: enterprisebill.FieldRemark},
			enterprisebill.FieldRiderID:      {Type: field.TypeUint64, Column: enterprisebill.FieldRiderID},
			enterprisebill.FieldCityID:       {Type: field.TypeUint64, Column: enterprisebill.FieldCityID},
			enterprisebill.FieldStationID:    {Type: field.TypeUint64, Column: enterprisebill.FieldStationID},
			enterprisebill.FieldSubscribeID:  {Type: field.TypeUint64, Column: enterprisebill.FieldSubscribeID},
			enterprisebill.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterprisebill.FieldEnterpriseID},
			enterprisebill.FieldStatementID:  {Type: field.TypeUint64, Column: enterprisebill.FieldStatementID},
			enterprisebill.FieldStart:        {Type: field.TypeTime, Column: enterprisebill.FieldStart},
			enterprisebill.FieldEnd:          {Type: field.TypeTime, Column: enterprisebill.FieldEnd},
			enterprisebill.FieldDays:         {Type: field.TypeInt, Column: enterprisebill.FieldDays},
			enterprisebill.FieldPrice:        {Type: field.TypeFloat64, Column: enterprisebill.FieldPrice},
			enterprisebill.FieldCost:         {Type: field.TypeFloat64, Column: enterprisebill.FieldCost},
			enterprisebill.FieldModel:        {Type: field.TypeString, Column: enterprisebill.FieldModel},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisecontract.Table,
			Columns: enterprisecontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisecontract.FieldID,
			},
		},
		Type: "EnterpriseContract",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisecontract.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprisecontract.FieldCreatedAt},
			enterprisecontract.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprisecontract.FieldUpdatedAt},
			enterprisecontract.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprisecontract.FieldDeletedAt},
			enterprisecontract.FieldCreator:      {Type: field.TypeJSON, Column: enterprisecontract.FieldCreator},
			enterprisecontract.FieldLastModifier: {Type: field.TypeJSON, Column: enterprisecontract.FieldLastModifier},
			enterprisecontract.FieldRemark:       {Type: field.TypeString, Column: enterprisecontract.FieldRemark},
			enterprisecontract.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterprisecontract.FieldEnterpriseID},
			enterprisecontract.FieldStart:        {Type: field.TypeTime, Column: enterprisecontract.FieldStart},
			enterprisecontract.FieldEnd:          {Type: field.TypeTime, Column: enterprisecontract.FieldEnd},
			enterprisecontract.FieldFile:         {Type: field.TypeString, Column: enterprisecontract.FieldFile},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterpriseprepayment.Table,
			Columns: enterpriseprepayment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseprepayment.FieldID,
			},
		},
		Type: "EnterprisePrepayment",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterpriseprepayment.FieldCreatedAt:    {Type: field.TypeTime, Column: enterpriseprepayment.FieldCreatedAt},
			enterpriseprepayment.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterpriseprepayment.FieldUpdatedAt},
			enterpriseprepayment.FieldDeletedAt:    {Type: field.TypeTime, Column: enterpriseprepayment.FieldDeletedAt},
			enterpriseprepayment.FieldCreator:      {Type: field.TypeJSON, Column: enterpriseprepayment.FieldCreator},
			enterpriseprepayment.FieldLastModifier: {Type: field.TypeJSON, Column: enterpriseprepayment.FieldLastModifier},
			enterpriseprepayment.FieldRemark:       {Type: field.TypeString, Column: enterpriseprepayment.FieldRemark},
			enterpriseprepayment.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterpriseprepayment.FieldEnterpriseID},
			enterpriseprepayment.FieldAmount:       {Type: field.TypeFloat64, Column: enterpriseprepayment.FieldAmount},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterpriseprice.Table,
			Columns: enterpriseprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseprice.FieldID,
			},
		},
		Type: "EnterprisePrice",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterpriseprice.FieldCreatedAt:    {Type: field.TypeTime, Column: enterpriseprice.FieldCreatedAt},
			enterpriseprice.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterpriseprice.FieldUpdatedAt},
			enterpriseprice.FieldDeletedAt:    {Type: field.TypeTime, Column: enterpriseprice.FieldDeletedAt},
			enterpriseprice.FieldCreator:      {Type: field.TypeJSON, Column: enterpriseprice.FieldCreator},
			enterpriseprice.FieldLastModifier: {Type: field.TypeJSON, Column: enterpriseprice.FieldLastModifier},
			enterpriseprice.FieldRemark:       {Type: field.TypeString, Column: enterpriseprice.FieldRemark},
			enterpriseprice.FieldCityID:       {Type: field.TypeUint64, Column: enterpriseprice.FieldCityID},
			enterpriseprice.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterpriseprice.FieldEnterpriseID},
			enterpriseprice.FieldPrice:        {Type: field.TypeFloat64, Column: enterpriseprice.FieldPrice},
			enterpriseprice.FieldModel:        {Type: field.TypeString, Column: enterpriseprice.FieldModel},
		},
	}
	graph.Nodes[17] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisestatement.Table,
			Columns: enterprisestatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestatement.FieldID,
			},
		},
		Type: "EnterpriseStatement",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisestatement.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprisestatement.FieldCreatedAt},
			enterprisestatement.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprisestatement.FieldUpdatedAt},
			enterprisestatement.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprisestatement.FieldDeletedAt},
			enterprisestatement.FieldCreator:      {Type: field.TypeJSON, Column: enterprisestatement.FieldCreator},
			enterprisestatement.FieldLastModifier: {Type: field.TypeJSON, Column: enterprisestatement.FieldLastModifier},
			enterprisestatement.FieldRemark:       {Type: field.TypeString, Column: enterprisestatement.FieldRemark},
			enterprisestatement.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterprisestatement.FieldEnterpriseID},
			enterprisestatement.FieldCost:         {Type: field.TypeFloat64, Column: enterprisestatement.FieldCost},
			enterprisestatement.FieldSettledAt:    {Type: field.TypeTime, Column: enterprisestatement.FieldSettledAt},
			enterprisestatement.FieldDays:         {Type: field.TypeInt, Column: enterprisestatement.FieldDays},
			enterprisestatement.FieldRiderNumber:  {Type: field.TypeInt, Column: enterprisestatement.FieldRiderNumber},
			enterprisestatement.FieldDate:         {Type: field.TypeTime, Column: enterprisestatement.FieldDate},
			enterprisestatement.FieldStart:        {Type: field.TypeTime, Column: enterprisestatement.FieldStart},
			enterprisestatement.FieldEnd:          {Type: field.TypeTime, Column: enterprisestatement.FieldEnd},
		},
	}
	graph.Nodes[18] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   enterprisestation.Table,
			Columns: enterprisestation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestation.FieldID,
			},
		},
		Type: "EnterpriseStation",
		Fields: map[string]*sqlgraph.FieldSpec{
			enterprisestation.FieldCreatedAt:    {Type: field.TypeTime, Column: enterprisestation.FieldCreatedAt},
			enterprisestation.FieldUpdatedAt:    {Type: field.TypeTime, Column: enterprisestation.FieldUpdatedAt},
			enterprisestation.FieldDeletedAt:    {Type: field.TypeTime, Column: enterprisestation.FieldDeletedAt},
			enterprisestation.FieldCreator:      {Type: field.TypeJSON, Column: enterprisestation.FieldCreator},
			enterprisestation.FieldLastModifier: {Type: field.TypeJSON, Column: enterprisestation.FieldLastModifier},
			enterprisestation.FieldRemark:       {Type: field.TypeString, Column: enterprisestation.FieldRemark},
			enterprisestation.FieldEnterpriseID: {Type: field.TypeUint64, Column: enterprisestation.FieldEnterpriseID},
			enterprisestation.FieldName:         {Type: field.TypeString, Column: enterprisestation.FieldName},
		},
	}
	graph.Nodes[19] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   exception.Table,
			Columns: exception.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exception.FieldID,
			},
		},
		Type: "Exception",
		Fields: map[string]*sqlgraph.FieldSpec{
			exception.FieldCreatedAt:    {Type: field.TypeTime, Column: exception.FieldCreatedAt},
			exception.FieldUpdatedAt:    {Type: field.TypeTime, Column: exception.FieldUpdatedAt},
			exception.FieldDeletedAt:    {Type: field.TypeTime, Column: exception.FieldDeletedAt},
			exception.FieldCreator:      {Type: field.TypeJSON, Column: exception.FieldCreator},
			exception.FieldLastModifier: {Type: field.TypeJSON, Column: exception.FieldLastModifier},
			exception.FieldRemark:       {Type: field.TypeString, Column: exception.FieldRemark},
			exception.FieldCityID:       {Type: field.TypeUint64, Column: exception.FieldCityID},
			exception.FieldEmployeeID:   {Type: field.TypeUint64, Column: exception.FieldEmployeeID},
			exception.FieldStatus:       {Type: field.TypeUint8, Column: exception.FieldStatus},
			exception.FieldStoreID:      {Type: field.TypeUint64, Column: exception.FieldStoreID},
			exception.FieldName:         {Type: field.TypeString, Column: exception.FieldName},
			exception.FieldModel:        {Type: field.TypeString, Column: exception.FieldModel},
			exception.FieldNum:          {Type: field.TypeInt, Column: exception.FieldNum},
			exception.FieldReason:       {Type: field.TypeString, Column: exception.FieldReason},
			exception.FieldDescription:  {Type: field.TypeString, Column: exception.FieldDescription},
			exception.FieldAttachments:  {Type: field.TypeJSON, Column: exception.FieldAttachments},
		},
	}
	graph.Nodes[20] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exchange.FieldID,
			},
		},
		Type: "Exchange",
		Fields: map[string]*sqlgraph.FieldSpec{
			exchange.FieldCreatedAt:    {Type: field.TypeTime, Column: exchange.FieldCreatedAt},
			exchange.FieldUpdatedAt:    {Type: field.TypeTime, Column: exchange.FieldUpdatedAt},
			exchange.FieldDeletedAt:    {Type: field.TypeTime, Column: exchange.FieldDeletedAt},
			exchange.FieldCreator:      {Type: field.TypeJSON, Column: exchange.FieldCreator},
			exchange.FieldLastModifier: {Type: field.TypeJSON, Column: exchange.FieldLastModifier},
			exchange.FieldRemark:       {Type: field.TypeString, Column: exchange.FieldRemark},
			exchange.FieldSubscribeID:  {Type: field.TypeUint64, Column: exchange.FieldSubscribeID},
			exchange.FieldCityID:       {Type: field.TypeUint64, Column: exchange.FieldCityID},
			exchange.FieldStoreID:      {Type: field.TypeUint64, Column: exchange.FieldStoreID},
			exchange.FieldEnterpriseID: {Type: field.TypeUint64, Column: exchange.FieldEnterpriseID},
			exchange.FieldStationID:    {Type: field.TypeUint64, Column: exchange.FieldStationID},
			exchange.FieldRiderID:      {Type: field.TypeUint64, Column: exchange.FieldRiderID},
			exchange.FieldEmployeeID:   {Type: field.TypeUint64, Column: exchange.FieldEmployeeID},
			exchange.FieldUUID:         {Type: field.TypeString, Column: exchange.FieldUUID},
			exchange.FieldCabinetID:    {Type: field.TypeUint64, Column: exchange.FieldCabinetID},
			exchange.FieldSuccess:      {Type: field.TypeBool, Column: exchange.FieldSuccess},
			exchange.FieldDetail:       {Type: field.TypeJSON, Column: exchange.FieldDetail},
			exchange.FieldModel:        {Type: field.TypeString, Column: exchange.FieldModel},
			exchange.FieldAlternative:  {Type: field.TypeBool, Column: exchange.FieldAlternative},
		},
	}
	graph.Nodes[21] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   inventory.Table,
			Columns: inventory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: inventory.FieldID,
			},
		},
		Type: "Inventory",
		Fields: map[string]*sqlgraph.FieldSpec{
			inventory.FieldCreatedAt:    {Type: field.TypeTime, Column: inventory.FieldCreatedAt},
			inventory.FieldUpdatedAt:    {Type: field.TypeTime, Column: inventory.FieldUpdatedAt},
			inventory.FieldDeletedAt:    {Type: field.TypeTime, Column: inventory.FieldDeletedAt},
			inventory.FieldCreator:      {Type: field.TypeJSON, Column: inventory.FieldCreator},
			inventory.FieldLastModifier: {Type: field.TypeJSON, Column: inventory.FieldLastModifier},
			inventory.FieldRemark:       {Type: field.TypeString, Column: inventory.FieldRemark},
			inventory.FieldName:         {Type: field.TypeString, Column: inventory.FieldName},
			inventory.FieldCount:        {Type: field.TypeBool, Column: inventory.FieldCount},
			inventory.FieldTransfer:     {Type: field.TypeBool, Column: inventory.FieldTransfer},
			inventory.FieldPurchase:     {Type: field.TypeBool, Column: inventory.FieldPurchase},
		},
	}
	graph.Nodes[22] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   manager.Table,
			Columns: manager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: manager.FieldID,
			},
		},
		Type: "Manager",
		Fields: map[string]*sqlgraph.FieldSpec{
			manager.FieldCreatedAt:    {Type: field.TypeTime, Column: manager.FieldCreatedAt},
			manager.FieldUpdatedAt:    {Type: field.TypeTime, Column: manager.FieldUpdatedAt},
			manager.FieldDeletedAt:    {Type: field.TypeTime, Column: manager.FieldDeletedAt},
			manager.FieldCreator:      {Type: field.TypeJSON, Column: manager.FieldCreator},
			manager.FieldLastModifier: {Type: field.TypeJSON, Column: manager.FieldLastModifier},
			manager.FieldRemark:       {Type: field.TypeString, Column: manager.FieldRemark},
			manager.FieldRoleID:       {Type: field.TypeUint64, Column: manager.FieldRoleID},
			manager.FieldPhone:        {Type: field.TypeString, Column: manager.FieldPhone},
			manager.FieldName:         {Type: field.TypeString, Column: manager.FieldName},
			manager.FieldPassword:     {Type: field.TypeString, Column: manager.FieldPassword},
			manager.FieldLastSigninAt: {Type: field.TypeTime, Column: manager.FieldLastSigninAt},
		},
	}
	graph.Nodes[23] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: order.FieldID,
			},
		},
		Type: "Order",
		Fields: map[string]*sqlgraph.FieldSpec{
			order.FieldCreatedAt:    {Type: field.TypeTime, Column: order.FieldCreatedAt},
			order.FieldUpdatedAt:    {Type: field.TypeTime, Column: order.FieldUpdatedAt},
			order.FieldDeletedAt:    {Type: field.TypeTime, Column: order.FieldDeletedAt},
			order.FieldCreator:      {Type: field.TypeJSON, Column: order.FieldCreator},
			order.FieldLastModifier: {Type: field.TypeJSON, Column: order.FieldLastModifier},
			order.FieldRemark:       {Type: field.TypeString, Column: order.FieldRemark},
			order.FieldPlanID:       {Type: field.TypeUint64, Column: order.FieldPlanID},
			order.FieldCityID:       {Type: field.TypeUint64, Column: order.FieldCityID},
			order.FieldRiderID:      {Type: field.TypeUint64, Column: order.FieldRiderID},
			order.FieldParentID:     {Type: field.TypeUint64, Column: order.FieldParentID},
			order.FieldSubscribeID:  {Type: field.TypeUint64, Column: order.FieldSubscribeID},
			order.FieldStatus:       {Type: field.TypeUint8, Column: order.FieldStatus},
			order.FieldPayway:       {Type: field.TypeUint8, Column: order.FieldPayway},
			order.FieldType:         {Type: field.TypeUint, Column: order.FieldType},
			order.FieldOutTradeNo:   {Type: field.TypeString, Column: order.FieldOutTradeNo},
			order.FieldTradeNo:      {Type: field.TypeString, Column: order.FieldTradeNo},
			order.FieldAmount:       {Type: field.TypeFloat64, Column: order.FieldAmount},
			order.FieldTotal:        {Type: field.TypeFloat64, Column: order.FieldTotal},
			order.FieldRefundAt:     {Type: field.TypeTime, Column: order.FieldRefundAt},
			order.FieldInitialDays:  {Type: field.TypeInt, Column: order.FieldInitialDays},
			order.FieldPastDays:     {Type: field.TypeInt, Column: order.FieldPastDays},
		},
	}
	graph.Nodes[24] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderrefund.Table,
			Columns: orderrefund.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderrefund.FieldID,
			},
		},
		Type: "OrderRefund",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderrefund.FieldCreatedAt:    {Type: field.TypeTime, Column: orderrefund.FieldCreatedAt},
			orderrefund.FieldUpdatedAt:    {Type: field.TypeTime, Column: orderrefund.FieldUpdatedAt},
			orderrefund.FieldDeletedAt:    {Type: field.TypeTime, Column: orderrefund.FieldDeletedAt},
			orderrefund.FieldCreator:      {Type: field.TypeJSON, Column: orderrefund.FieldCreator},
			orderrefund.FieldLastModifier: {Type: field.TypeJSON, Column: orderrefund.FieldLastModifier},
			orderrefund.FieldRemark:       {Type: field.TypeString, Column: orderrefund.FieldRemark},
			orderrefund.FieldOrderID:      {Type: field.TypeUint64, Column: orderrefund.FieldOrderID},
			orderrefund.FieldStatus:       {Type: field.TypeUint8, Column: orderrefund.FieldStatus},
			orderrefund.FieldAmount:       {Type: field.TypeFloat64, Column: orderrefund.FieldAmount},
			orderrefund.FieldOutRefundNo:  {Type: field.TypeString, Column: orderrefund.FieldOutRefundNo},
			orderrefund.FieldReason:       {Type: field.TypeString, Column: orderrefund.FieldReason},
			orderrefund.FieldRefundAt:     {Type: field.TypeTime, Column: orderrefund.FieldRefundAt},
		},
	}
	graph.Nodes[25] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
		Type: "Person",
		Fields: map[string]*sqlgraph.FieldSpec{
			person.FieldCreatedAt:      {Type: field.TypeTime, Column: person.FieldCreatedAt},
			person.FieldUpdatedAt:      {Type: field.TypeTime, Column: person.FieldUpdatedAt},
			person.FieldDeletedAt:      {Type: field.TypeTime, Column: person.FieldDeletedAt},
			person.FieldCreator:        {Type: field.TypeJSON, Column: person.FieldCreator},
			person.FieldLastModifier:   {Type: field.TypeJSON, Column: person.FieldLastModifier},
			person.FieldRemark:         {Type: field.TypeString, Column: person.FieldRemark},
			person.FieldStatus:         {Type: field.TypeUint8, Column: person.FieldStatus},
			person.FieldBanned:         {Type: field.TypeBool, Column: person.FieldBanned},
			person.FieldName:           {Type: field.TypeString, Column: person.FieldName},
			person.FieldIDCardNumber:   {Type: field.TypeString, Column: person.FieldIDCardNumber},
			person.FieldIDCardType:     {Type: field.TypeUint8, Column: person.FieldIDCardType},
			person.FieldIDCardPortrait: {Type: field.TypeString, Column: person.FieldIDCardPortrait},
			person.FieldIDCardNational: {Type: field.TypeString, Column: person.FieldIDCardNational},
			person.FieldAuthFace:       {Type: field.TypeString, Column: person.FieldAuthFace},
			person.FieldAuthResult:     {Type: field.TypeJSON, Column: person.FieldAuthResult},
			person.FieldAuthAt:         {Type: field.TypeTime, Column: person.FieldAuthAt},
			person.FieldEsignAccountID: {Type: field.TypeString, Column: person.FieldEsignAccountID},
		},
	}
	graph.Nodes[26] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: plan.FieldID,
			},
		},
		Type: "Plan",
		Fields: map[string]*sqlgraph.FieldSpec{
			plan.FieldCreatedAt:    {Type: field.TypeTime, Column: plan.FieldCreatedAt},
			plan.FieldUpdatedAt:    {Type: field.TypeTime, Column: plan.FieldUpdatedAt},
			plan.FieldDeletedAt:    {Type: field.TypeTime, Column: plan.FieldDeletedAt},
			plan.FieldCreator:      {Type: field.TypeJSON, Column: plan.FieldCreator},
			plan.FieldLastModifier: {Type: field.TypeJSON, Column: plan.FieldLastModifier},
			plan.FieldRemark:       {Type: field.TypeString, Column: plan.FieldRemark},
			plan.FieldEnable:       {Type: field.TypeBool, Column: plan.FieldEnable},
			plan.FieldName:         {Type: field.TypeString, Column: plan.FieldName},
			plan.FieldStart:        {Type: field.TypeTime, Column: plan.FieldStart},
			plan.FieldEnd:          {Type: field.TypeTime, Column: plan.FieldEnd},
			plan.FieldPrice:        {Type: field.TypeFloat64, Column: plan.FieldPrice},
			plan.FieldDays:         {Type: field.TypeUint, Column: plan.FieldDays},
			plan.FieldCommission:   {Type: field.TypeFloat64, Column: plan.FieldCommission},
			plan.FieldOriginal:     {Type: field.TypeFloat64, Column: plan.FieldOriginal},
			plan.FieldDesc:         {Type: field.TypeString, Column: plan.FieldDesc},
			plan.FieldParentID:     {Type: field.TypeUint64, Column: plan.FieldParentID},
		},
	}
	graph.Nodes[27] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
		Type: "Rider",
		Fields: map[string]*sqlgraph.FieldSpec{
			rider.FieldCreatedAt:    {Type: field.TypeTime, Column: rider.FieldCreatedAt},
			rider.FieldUpdatedAt:    {Type: field.TypeTime, Column: rider.FieldUpdatedAt},
			rider.FieldDeletedAt:    {Type: field.TypeTime, Column: rider.FieldDeletedAt},
			rider.FieldCreator:      {Type: field.TypeJSON, Column: rider.FieldCreator},
			rider.FieldLastModifier: {Type: field.TypeJSON, Column: rider.FieldLastModifier},
			rider.FieldRemark:       {Type: field.TypeString, Column: rider.FieldRemark},
			rider.FieldStationID:    {Type: field.TypeUint64, Column: rider.FieldStationID},
			rider.FieldPersonID:     {Type: field.TypeUint64, Column: rider.FieldPersonID},
			rider.FieldEnterpriseID: {Type: field.TypeUint64, Column: rider.FieldEnterpriseID},
			rider.FieldPhone:        {Type: field.TypeString, Column: rider.FieldPhone},
			rider.FieldContact:      {Type: field.TypeJSON, Column: rider.FieldContact},
			rider.FieldDeviceType:   {Type: field.TypeUint8, Column: rider.FieldDeviceType},
			rider.FieldLastDevice:   {Type: field.TypeString, Column: rider.FieldLastDevice},
			rider.FieldIsNewDevice:  {Type: field.TypeBool, Column: rider.FieldIsNewDevice},
			rider.FieldLastFace:     {Type: field.TypeString, Column: rider.FieldLastFace},
			rider.FieldPushID:       {Type: field.TypeString, Column: rider.FieldPushID},
			rider.FieldLastSigninAt: {Type: field.TypeTime, Column: rider.FieldLastSigninAt},
			rider.FieldBlocked:      {Type: field.TypeBool, Column: rider.FieldBlocked},
			rider.FieldContractual:  {Type: field.TypeBool, Column: rider.FieldContractual},
		},
	}
	graph.Nodes[28] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   riderfollowup.Table,
			Columns: riderfollowup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: riderfollowup.FieldID,
			},
		},
		Type: "RiderFollowUp",
		Fields: map[string]*sqlgraph.FieldSpec{
			riderfollowup.FieldCreatedAt:    {Type: field.TypeTime, Column: riderfollowup.FieldCreatedAt},
			riderfollowup.FieldUpdatedAt:    {Type: field.TypeTime, Column: riderfollowup.FieldUpdatedAt},
			riderfollowup.FieldDeletedAt:    {Type: field.TypeTime, Column: riderfollowup.FieldDeletedAt},
			riderfollowup.FieldCreator:      {Type: field.TypeJSON, Column: riderfollowup.FieldCreator},
			riderfollowup.FieldLastModifier: {Type: field.TypeJSON, Column: riderfollowup.FieldLastModifier},
			riderfollowup.FieldRemark:       {Type: field.TypeString, Column: riderfollowup.FieldRemark},
			riderfollowup.FieldManagerID:    {Type: field.TypeUint64, Column: riderfollowup.FieldManagerID},
			riderfollowup.FieldRiderID:      {Type: field.TypeUint64, Column: riderfollowup.FieldRiderID},
		},
	}
	graph.Nodes[29] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldName:        {Type: field.TypeString, Column: role.FieldName},
			role.FieldPermissions: {Type: field.TypeJSON, Column: role.FieldPermissions},
			role.FieldBuildin:     {Type: field.TypeBool, Column: role.FieldBuildin},
			role.FieldSuper:       {Type: field.TypeBool, Column: role.FieldSuper},
			role.FieldCreatedAt:   {Type: field.TypeTime, Column: role.FieldCreatedAt},
		},
	}
	graph.Nodes[30] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   setting.Table,
			Columns: setting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: setting.FieldID,
			},
		},
		Type: "Setting",
		Fields: map[string]*sqlgraph.FieldSpec{
			setting.FieldCreatedAt:    {Type: field.TypeTime, Column: setting.FieldCreatedAt},
			setting.FieldUpdatedAt:    {Type: field.TypeTime, Column: setting.FieldUpdatedAt},
			setting.FieldCreator:      {Type: field.TypeJSON, Column: setting.FieldCreator},
			setting.FieldLastModifier: {Type: field.TypeJSON, Column: setting.FieldLastModifier},
			setting.FieldRemark:       {Type: field.TypeString, Column: setting.FieldRemark},
			setting.FieldKey:          {Type: field.TypeString, Column: setting.FieldKey},
			setting.FieldDesc:         {Type: field.TypeString, Column: setting.FieldDesc},
			setting.FieldContent:      {Type: field.TypeString, Column: setting.FieldContent},
		},
	}
	graph.Nodes[31] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stock.FieldID,
			},
		},
		Type: "Stock",
		Fields: map[string]*sqlgraph.FieldSpec{
			stock.FieldCreatedAt:    {Type: field.TypeTime, Column: stock.FieldCreatedAt},
			stock.FieldUpdatedAt:    {Type: field.TypeTime, Column: stock.FieldUpdatedAt},
			stock.FieldDeletedAt:    {Type: field.TypeTime, Column: stock.FieldDeletedAt},
			stock.FieldCreator:      {Type: field.TypeJSON, Column: stock.FieldCreator},
			stock.FieldLastModifier: {Type: field.TypeJSON, Column: stock.FieldLastModifier},
			stock.FieldRemark:       {Type: field.TypeString, Column: stock.FieldRemark},
			stock.FieldManagerID:    {Type: field.TypeUint64, Column: stock.FieldManagerID},
			stock.FieldSn:           {Type: field.TypeString, Column: stock.FieldSn},
			stock.FieldType:         {Type: field.TypeUint8, Column: stock.FieldType},
			stock.FieldStoreID:      {Type: field.TypeUint64, Column: stock.FieldStoreID},
			stock.FieldRiderID:      {Type: field.TypeUint64, Column: stock.FieldRiderID},
			stock.FieldEmployeeID:   {Type: field.TypeUint64, Column: stock.FieldEmployeeID},
			stock.FieldName:         {Type: field.TypeString, Column: stock.FieldName},
			stock.FieldModel:        {Type: field.TypeString, Column: stock.FieldModel},
			stock.FieldNum:          {Type: field.TypeInt, Column: stock.FieldNum},
		},
	}
	graph.Nodes[32] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: store.FieldID,
			},
		},
		Type: "Store",
		Fields: map[string]*sqlgraph.FieldSpec{
			store.FieldCreatedAt:    {Type: field.TypeTime, Column: store.FieldCreatedAt},
			store.FieldUpdatedAt:    {Type: field.TypeTime, Column: store.FieldUpdatedAt},
			store.FieldDeletedAt:    {Type: field.TypeTime, Column: store.FieldDeletedAt},
			store.FieldCreator:      {Type: field.TypeJSON, Column: store.FieldCreator},
			store.FieldLastModifier: {Type: field.TypeJSON, Column: store.FieldLastModifier},
			store.FieldRemark:       {Type: field.TypeString, Column: store.FieldRemark},
			store.FieldCityID:       {Type: field.TypeUint64, Column: store.FieldCityID},
			store.FieldEmployeeID:   {Type: field.TypeUint64, Column: store.FieldEmployeeID},
			store.FieldBranchID:     {Type: field.TypeUint64, Column: store.FieldBranchID},
			store.FieldSn:           {Type: field.TypeString, Column: store.FieldSn},
			store.FieldName:         {Type: field.TypeString, Column: store.FieldName},
			store.FieldStatus:       {Type: field.TypeUint8, Column: store.FieldStatus},
			store.FieldLng:          {Type: field.TypeFloat64, Column: store.FieldLng},
			store.FieldLat:          {Type: field.TypeFloat64, Column: store.FieldLat},
			store.FieldAddress:      {Type: field.TypeString, Column: store.FieldAddress},
		},
	}
	graph.Nodes[33] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribe.Table,
			Columns: subscribe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribe.FieldID,
			},
		},
		Type: "Subscribe",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribe.FieldCreatedAt:         {Type: field.TypeTime, Column: subscribe.FieldCreatedAt},
			subscribe.FieldUpdatedAt:         {Type: field.TypeTime, Column: subscribe.FieldUpdatedAt},
			subscribe.FieldDeletedAt:         {Type: field.TypeTime, Column: subscribe.FieldDeletedAt},
			subscribe.FieldCreator:           {Type: field.TypeJSON, Column: subscribe.FieldCreator},
			subscribe.FieldLastModifier:      {Type: field.TypeJSON, Column: subscribe.FieldLastModifier},
			subscribe.FieldRemark:            {Type: field.TypeString, Column: subscribe.FieldRemark},
			subscribe.FieldPlanID:            {Type: field.TypeUint64, Column: subscribe.FieldPlanID},
			subscribe.FieldEmployeeID:        {Type: field.TypeUint64, Column: subscribe.FieldEmployeeID},
			subscribe.FieldCityID:            {Type: field.TypeUint64, Column: subscribe.FieldCityID},
			subscribe.FieldStationID:         {Type: field.TypeUint64, Column: subscribe.FieldStationID},
			subscribe.FieldStoreID:           {Type: field.TypeUint64, Column: subscribe.FieldStoreID},
			subscribe.FieldRiderID:           {Type: field.TypeUint64, Column: subscribe.FieldRiderID},
			subscribe.FieldInitialOrderID:    {Type: field.TypeUint64, Column: subscribe.FieldInitialOrderID},
			subscribe.FieldEnterpriseID:      {Type: field.TypeUint64, Column: subscribe.FieldEnterpriseID},
			subscribe.FieldStatus:            {Type: field.TypeUint8, Column: subscribe.FieldStatus},
			subscribe.FieldType:              {Type: field.TypeUint, Column: subscribe.FieldType},
			subscribe.FieldModel:             {Type: field.TypeString, Column: subscribe.FieldModel},
			subscribe.FieldInitialDays:       {Type: field.TypeInt, Column: subscribe.FieldInitialDays},
			subscribe.FieldAlterDays:         {Type: field.TypeInt, Column: subscribe.FieldAlterDays},
			subscribe.FieldPauseDays:         {Type: field.TypeInt, Column: subscribe.FieldPauseDays},
			subscribe.FieldRenewalDays:       {Type: field.TypeInt, Column: subscribe.FieldRenewalDays},
			subscribe.FieldOverdueDays:       {Type: field.TypeInt, Column: subscribe.FieldOverdueDays},
			subscribe.FieldRemaining:         {Type: field.TypeInt, Column: subscribe.FieldRemaining},
			subscribe.FieldPausedAt:          {Type: field.TypeTime, Column: subscribe.FieldPausedAt},
			subscribe.FieldStartAt:           {Type: field.TypeTime, Column: subscribe.FieldStartAt},
			subscribe.FieldEndAt:             {Type: field.TypeTime, Column: subscribe.FieldEndAt},
			subscribe.FieldRefundAt:          {Type: field.TypeTime, Column: subscribe.FieldRefundAt},
			subscribe.FieldUnsubscribeReason: {Type: field.TypeString, Column: subscribe.FieldUnsubscribeReason},
			subscribe.FieldLastBillDate:      {Type: field.TypeTime, Column: subscribe.FieldLastBillDate},
		},
	}
	graph.Nodes[34] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribealter.Table,
			Columns: subscribealter.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribealter.FieldID,
			},
		},
		Type: "SubscribeAlter",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribealter.FieldCreatedAt:    {Type: field.TypeTime, Column: subscribealter.FieldCreatedAt},
			subscribealter.FieldUpdatedAt:    {Type: field.TypeTime, Column: subscribealter.FieldUpdatedAt},
			subscribealter.FieldDeletedAt:    {Type: field.TypeTime, Column: subscribealter.FieldDeletedAt},
			subscribealter.FieldCreator:      {Type: field.TypeJSON, Column: subscribealter.FieldCreator},
			subscribealter.FieldLastModifier: {Type: field.TypeJSON, Column: subscribealter.FieldLastModifier},
			subscribealter.FieldRemark:       {Type: field.TypeString, Column: subscribealter.FieldRemark},
			subscribealter.FieldRiderID:      {Type: field.TypeUint64, Column: subscribealter.FieldRiderID},
			subscribealter.FieldManagerID:    {Type: field.TypeUint64, Column: subscribealter.FieldManagerID},
			subscribealter.FieldSubscribeID:  {Type: field.TypeUint64, Column: subscribealter.FieldSubscribeID},
			subscribealter.FieldDays:         {Type: field.TypeInt, Column: subscribealter.FieldDays},
		},
	}
	graph.Nodes[35] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscribepause.Table,
			Columns: subscribepause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribepause.FieldID,
			},
		},
		Type: "SubscribePause",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscribepause.FieldCreatedAt:          {Type: field.TypeTime, Column: subscribepause.FieldCreatedAt},
			subscribepause.FieldUpdatedAt:          {Type: field.TypeTime, Column: subscribepause.FieldUpdatedAt},
			subscribepause.FieldDeletedAt:          {Type: field.TypeTime, Column: subscribepause.FieldDeletedAt},
			subscribepause.FieldCreator:            {Type: field.TypeJSON, Column: subscribepause.FieldCreator},
			subscribepause.FieldLastModifier:       {Type: field.TypeJSON, Column: subscribepause.FieldLastModifier},
			subscribepause.FieldRemark:             {Type: field.TypeString, Column: subscribepause.FieldRemark},
			subscribepause.FieldRiderID:            {Type: field.TypeUint64, Column: subscribepause.FieldRiderID},
			subscribepause.FieldEmployeeID:         {Type: field.TypeUint64, Column: subscribepause.FieldEmployeeID},
			subscribepause.FieldSubscribeID:        {Type: field.TypeUint64, Column: subscribepause.FieldSubscribeID},
			subscribepause.FieldStartAt:            {Type: field.TypeTime, Column: subscribepause.FieldStartAt},
			subscribepause.FieldEndAt:              {Type: field.TypeTime, Column: subscribepause.FieldEndAt},
			subscribepause.FieldDays:               {Type: field.TypeInt, Column: subscribepause.FieldDays},
			subscribepause.FieldContinueEmployeeID: {Type: field.TypeUint64, Column: subscribepause.FieldContinueEmployeeID},
		},
	}
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.StoreTable,
			Columns: []string{assistance.StoreColumn},
			Bidi:    false,
		},
		"Assistance",
		"Store",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.RiderTable,
			Columns: []string{assistance.RiderColumn},
			Bidi:    false,
		},
		"Assistance",
		"Rider",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.SubscribeTable,
			Columns: []string{assistance.SubscribeColumn},
			Bidi:    false,
		},
		"Assistance",
		"Subscribe",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.CityTable,
			Columns: []string{assistance.CityColumn},
			Bidi:    false,
		},
		"Assistance",
		"City",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   assistance.OrderTable,
			Columns: []string{assistance.OrderColumn},
			Bidi:    false,
		},
		"Assistance",
		"Order",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assistance.EmployeeTable,
			Columns: []string{assistance.EmployeeColumn},
			Bidi:    false,
		},
		"Assistance",
		"Employee",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StoreTable,
			Columns: []string{attendance.StoreColumn},
			Bidi:    false,
		},
		"Attendance",
		"Store",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.EmployeeTable,
			Columns: []string{attendance.EmployeeColumn},
			Bidi:    false,
		},
		"Attendance",
		"Employee",
	)
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
		},
		"BatteryModel",
		"Cabinet",
	)
	graph.MustAddE(
		"plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.PlansTable,
			Columns: batterymodel.PlansPrimaryKey,
			Bidi:    false,
		},
		"BatteryModel",
		"Plan",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   branch.CityTable,
			Columns: []string{branch.CityColumn},
			Bidi:    false,
		},
		"Branch",
		"City",
	)
	graph.MustAddE(
		"contracts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
		},
		"Branch",
		"BranchContract",
	)
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
		},
		"Branch",
		"Cabinet",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
		},
		"Branch",
		"CabinetFault",
	)
	graph.MustAddE(
		"stores",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
		},
		"Branch",
		"Store",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
		},
		"BranchContract",
		"Branch",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RiderTable,
			Columns: []string{business.RiderColumn},
			Bidi:    false,
		},
		"Business",
		"Rider",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CityTable,
			Columns: []string{business.CityColumn},
			Bidi:    false,
		},
		"Business",
		"City",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.SubscribeTable,
			Columns: []string{business.SubscribeColumn},
			Bidi:    false,
		},
		"Business",
		"Subscribe",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EmployeeTable,
			Columns: []string{business.EmployeeColumn},
			Bidi:    false,
		},
		"Business",
		"Employee",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StoreTable,
			Columns: []string{business.StoreColumn},
			Bidi:    false,
		},
		"Business",
		"Store",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.PlanTable,
			Columns: []string{business.PlanColumn},
			Bidi:    false,
		},
		"Business",
		"Plan",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EnterpriseTable,
			Columns: []string{business.EnterpriseColumn},
			Bidi:    false,
		},
		"Business",
		"Enterprise",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StationTable,
			Columns: []string{business.StationColumn},
			Bidi:    false,
		},
		"Business",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.CityTable,
			Columns: []string{cabinet.CityColumn},
			Bidi:    false,
		},
		"Cabinet",
		"City",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Branch",
	)
	graph.MustAddE(
		"bms",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.BmsTable,
			Columns: cabinet.BmsPrimaryKey,
			Bidi:    false,
		},
		"Cabinet",
		"BatteryModel",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
		},
		"Cabinet",
		"CabinetFault",
	)
	graph.MustAddE(
		"exchanges",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Exchange",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetfault.CityTable,
			Columns: []string{cabinetfault.CityColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"City",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.BranchTable,
			Columns: []string{cabinetfault.BranchColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Branch",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.CabinetTable,
			Columns: []string{cabinetfault.CabinetColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.RiderTable,
			Columns: []string{cabinetfault.RiderColumn},
			Bidi:    false,
		},
		"CabinetFault",
		"Rider",
	)
	graph.MustAddE(
		"plans",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   city.PlansTable,
			Columns: city.PlansPrimaryKey,
			Bidi:    false,
		},
		"City",
		"Plan",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ParentTable,
			Columns: []string{city.ParentColumn},
			Bidi:    false,
		},
		"City",
		"City",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ChildrenTable,
			Columns: []string{city.ChildrenColumn},
			Bidi:    false,
		},
		"City",
		"City",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commission.OrderTable,
			Columns: []string{commission.OrderColumn},
			Bidi:    false,
		},
		"Commission",
		"Order",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commission.EmployeeTable,
			Columns: []string{commission.EmployeeColumn},
			Bidi:    false,
		},
		"Commission",
		"Employee",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
		},
		"Contract",
		"Rider",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CityTable,
			Columns: []string{employee.CityColumn},
			Bidi:    false,
		},
		"Employee",
		"City",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.StoreTable,
			Columns: []string{employee.StoreColumn},
			Bidi:    false,
		},
		"Employee",
		"Store",
	)
	graph.MustAddE(
		"attendances",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
		},
		"Employee",
		"Attendance",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
		},
		"Employee",
		"Stock",
	)
	graph.MustAddE(
		"exchanges",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
		},
		"Employee",
		"Exchange",
	)
	graph.MustAddE(
		"commissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
		},
		"Employee",
		"Commission",
	)
	graph.MustAddE(
		"assistances",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
		},
		"Employee",
		"Assistance",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprise.CityTable,
			Columns: []string{enterprise.CityColumn},
			Bidi:    false,
		},
		"Enterprise",
		"City",
	)
	graph.MustAddE(
		"riders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Rider",
	)
	graph.MustAddE(
		"contracts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.ContractsTable,
			Columns: []string{enterprise.ContractsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseContract",
	)
	graph.MustAddE(
		"prices",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.PricesTable,
			Columns: []string{enterprise.PricesColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterprisePrice",
	)
	graph.MustAddE(
		"subscribes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SubscribesTable,
			Columns: []string{enterprise.SubscribesColumn},
			Bidi:    false,
		},
		"Enterprise",
		"Subscribe",
	)
	graph.MustAddE(
		"statements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StatementsTable,
			Columns: []string{enterprise.StatementsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseStatement",
	)
	graph.MustAddE(
		"stations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StationsTable,
			Columns: []string{enterprise.StationsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"bills",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BillsTable,
			Columns: []string{enterprise.BillsColumn},
			Bidi:    false,
		},
		"Enterprise",
		"EnterpriseBill",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.RiderTable,
			Columns: []string{enterprisebill.RiderColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"Rider",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.CityTable,
			Columns: []string{enterprisebill.CityColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"City",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.StationTable,
			Columns: []string{enterprisebill.StationColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.EnterpriseTable,
			Columns: []string{enterprisebill.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"Enterprise",
	)
	graph.MustAddE(
		"statement",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.StatementTable,
			Columns: []string{enterprisebill.StatementColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"EnterpriseStatement",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.SubscribeTable,
			Columns: []string{enterprisebill.SubscribeColumn},
			Bidi:    false,
		},
		"EnterpriseBill",
		"Subscribe",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisecontract.EnterpriseTable,
			Columns: []string{enterprisecontract.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseContract",
		"Enterprise",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.EnterpriseTable,
			Columns: []string{enterpriseprepayment.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterprisePrepayment",
		"Enterprise",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.CityTable,
			Columns: []string{enterpriseprice.CityColumn},
			Bidi:    false,
		},
		"EnterprisePrice",
		"City",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseprice.EnterpriseTable,
			Columns: []string{enterpriseprice.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterprisePrice",
		"Enterprise",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestatement.EnterpriseTable,
			Columns: []string{enterprisestatement.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseStatement",
		"Enterprise",
	)
	graph.MustAddE(
		"bills",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.BillsTable,
			Columns: []string{enterprisestatement.BillsColumn},
			Bidi:    false,
		},
		"EnterpriseStatement",
		"EnterpriseBill",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestation.EnterpriseTable,
			Columns: []string{enterprisestation.EnterpriseColumn},
			Bidi:    false,
		},
		"EnterpriseStation",
		"Enterprise",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exception.CityTable,
			Columns: []string{exception.CityColumn},
			Bidi:    false,
		},
		"Exception",
		"City",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exception.EmployeeTable,
			Columns: []string{exception.EmployeeColumn},
			Bidi:    false,
		},
		"Exception",
		"Employee",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exception.StoreTable,
			Columns: []string{exception.StoreColumn},
			Bidi:    false,
		},
		"Exception",
		"Store",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.SubscribeTable,
			Columns: []string{exchange.SubscribeColumn},
			Bidi:    false,
		},
		"Exchange",
		"Subscribe",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
		},
		"Exchange",
		"City",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
		},
		"Exchange",
		"Store",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EnterpriseTable,
			Columns: []string{exchange.EnterpriseColumn},
			Bidi:    false,
		},
		"Exchange",
		"Enterprise",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StationTable,
			Columns: []string{exchange.StationColumn},
			Bidi:    false,
		},
		"Exchange",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
		},
		"Exchange",
		"Cabinet",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
		},
		"Exchange",
		"Rider",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
		},
		"Exchange",
		"Employee",
	)
	graph.MustAddE(
		"role",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manager.RoleTable,
			Columns: []string{manager.RoleColumn},
			Bidi:    false,
		},
		"Manager",
		"Role",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.PlanTable,
			Columns: []string{order.PlanColumn},
			Bidi:    false,
		},
		"Order",
		"Plan",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CityTable,
			Columns: []string{order.CityColumn},
			Bidi:    false,
		},
		"Order",
		"City",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RiderTable,
			Columns: []string{order.RiderColumn},
			Bidi:    false,
		},
		"Order",
		"Rider",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.SubscribeTable,
			Columns: []string{order.SubscribeColumn},
			Bidi:    false,
		},
		"Order",
		"Subscribe",
	)
	graph.MustAddE(
		"commission",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.CommissionTable,
			Columns: []string{order.CommissionColumn},
			Bidi:    false,
		},
		"Order",
		"Commission",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ParentTable,
			Columns: []string{order.ParentColumn},
			Bidi:    false,
		},
		"Order",
		"Order",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
		},
		"Order",
		"Order",
	)
	graph.MustAddE(
		"refund",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.RefundTable,
			Columns: []string{order.RefundColumn},
			Bidi:    false,
		},
		"Order",
		"OrderRefund",
	)
	graph.MustAddE(
		"assistance",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.AssistanceTable,
			Columns: []string{order.AssistanceColumn},
			Bidi:    false,
		},
		"Order",
		"Assistance",
	)
	graph.MustAddE(
		"order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
		},
		"OrderRefund",
		"Order",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
		},
		"Person",
		"Rider",
	)
	graph.MustAddE(
		"pms",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.PmsTable,
			Columns: plan.PmsPrimaryKey,
			Bidi:    false,
		},
		"Plan",
		"BatteryModel",
	)
	graph.MustAddE(
		"cities",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
		},
		"Plan",
		"City",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
		},
		"Plan",
		"Plan",
	)
	graph.MustAddE(
		"complexes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
		},
		"Plan",
		"Plan",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rider.StationTable,
			Columns: []string{rider.StationColumn},
			Bidi:    false,
		},
		"Rider",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"person",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
		},
		"Rider",
		"Person",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
		},
		"Rider",
		"Enterprise",
	)
	graph.MustAddE(
		"contracts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
		},
		"Rider",
		"Contract",
	)
	graph.MustAddE(
		"faults",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
		},
		"Rider",
		"CabinetFault",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
		},
		"Rider",
		"Order",
	)
	graph.MustAddE(
		"exchanges",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
		},
		"Rider",
		"Exchange",
	)
	graph.MustAddE(
		"subscribes",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
		},
		"Rider",
		"Subscribe",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.StocksTable,
			Columns: []string{rider.StocksColumn},
			Bidi:    false,
		},
		"Rider",
		"Stock",
	)
	graph.MustAddE(
		"followups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FollowupsTable,
			Columns: []string{rider.FollowupsColumn},
			Bidi:    false,
		},
		"Rider",
		"RiderFollowUp",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   riderfollowup.ManagerTable,
			Columns: []string{riderfollowup.ManagerColumn},
			Bidi:    false,
		},
		"RiderFollowUp",
		"Manager",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riderfollowup.RiderTable,
			Columns: []string{riderfollowup.RiderColumn},
			Bidi:    false,
		},
		"RiderFollowUp",
		"Rider",
	)
	graph.MustAddE(
		"managers",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   role.ManagersTable,
			Columns: []string{role.ManagersColumn},
			Bidi:    false,
		},
		"Role",
		"Manager",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.ManagerTable,
			Columns: []string{stock.ManagerColumn},
			Bidi:    false,
		},
		"Stock",
		"Manager",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StoreTable,
			Columns: []string{stock.StoreColumn},
			Bidi:    false,
		},
		"Stock",
		"Store",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.RiderTable,
			Columns: []string{stock.RiderColumn},
			Bidi:    false,
		},
		"Stock",
		"Rider",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
		},
		"Stock",
		"Employee",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
		},
		"Store",
		"City",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
		},
		"Store",
		"Branch",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
		},
		"Store",
		"Employee",
	)
	graph.MustAddE(
		"stocks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
		},
		"Store",
		"Stock",
	)
	graph.MustAddE(
		"attendances",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
		},
		"Store",
		"Attendance",
	)
	graph.MustAddE(
		"exceptions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
		},
		"Store",
		"Exception",
	)
	graph.MustAddE(
		"plan",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Plan",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Employee",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
		},
		"Subscribe",
		"City",
	)
	graph.MustAddE(
		"station",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StationTable,
			Columns: []string{subscribe.StationColumn},
			Bidi:    false,
		},
		"Subscribe",
		"EnterpriseStation",
	)
	graph.MustAddE(
		"store",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StoreTable,
			Columns: []string{subscribe.StoreColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Store",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Rider",
	)
	graph.MustAddE(
		"enterprise",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.EnterpriseTable,
			Columns: []string{subscribe.EnterpriseColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Enterprise",
	)
	graph.MustAddE(
		"pauses",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
		},
		"Subscribe",
		"SubscribePause",
	)
	graph.MustAddE(
		"alters",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
		},
		"Subscribe",
		"SubscribeAlter",
	)
	graph.MustAddE(
		"orders",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Order",
	)
	graph.MustAddE(
		"initial_order",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
		},
		"Subscribe",
		"Order",
	)
	graph.MustAddE(
		"bills",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.BillsTable,
			Columns: []string{subscribe.BillsColumn},
			Bidi:    false,
		},
		"Subscribe",
		"EnterpriseBill",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.RiderTable,
			Columns: []string{subscribealter.RiderColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Rider",
	)
	graph.MustAddE(
		"manager",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.ManagerTable,
			Columns: []string{subscribealter.ManagerColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Manager",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribealter.SubscribeTable,
			Columns: []string{subscribealter.SubscribeColumn},
			Bidi:    false,
		},
		"SubscribeAlter",
		"Subscribe",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.RiderTable,
			Columns: []string{subscribepause.RiderColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Rider",
	)
	graph.MustAddE(
		"employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EmployeeTable,
			Columns: []string{subscribepause.EmployeeColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Employee",
	)
	graph.MustAddE(
		"subscribe",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribepause.SubscribeTable,
			Columns: []string{subscribepause.SubscribeColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Subscribe",
	)
	graph.MustAddE(
		"continue_employee",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.ContinueEmployeeTable,
			Columns: []string{subscribepause.ContinueEmployeeColumn},
			Bidi:    false,
		},
		"SubscribePause",
		"Employee",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AssistanceQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AssistanceQuery builder.
func (aq *AssistanceQuery) Filter() *AssistanceFilter {
	return &AssistanceFilter{aq.config, aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AssistanceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AssistanceMutation builder.
func (m *AssistanceMutation) Filter() *AssistanceFilter {
	return &AssistanceFilter{m.config, m}
}

// AssistanceFilter provides a generic filtering capability at runtime for AssistanceQuery.
type AssistanceFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AssistanceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AssistanceFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AssistanceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AssistanceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AssistanceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *AssistanceFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(assistance.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *AssistanceFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(assistance.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *AssistanceFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(assistance.FieldRemark))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *AssistanceFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldStoreID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *AssistanceFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldRiderID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *AssistanceFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldSubscribeID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *AssistanceFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldCityID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *AssistanceFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldEmployeeID))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *AssistanceFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(assistance.FieldOrderID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *AssistanceFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(assistance.FieldStatus))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *AssistanceFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *AssistanceFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *AssistanceFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(assistance.FieldAddress))
}

// WhereBreakdown applies the entql string predicate on the breakdown field.
func (f *AssistanceFilter) WhereBreakdown(p entql.StringP) {
	f.Where(p.Field(assistance.FieldBreakdown))
}

// WhereBreakdownDesc applies the entql string predicate on the breakdown_desc field.
func (f *AssistanceFilter) WhereBreakdownDesc(p entql.StringP) {
	f.Where(p.Field(assistance.FieldBreakdownDesc))
}

// WhereBreakdownPhotos applies the entql json.RawMessage predicate on the breakdown_photos field.
func (f *AssistanceFilter) WhereBreakdownPhotos(p entql.BytesP) {
	f.Where(p.Field(assistance.FieldBreakdownPhotos))
}

// WhereCancelReason applies the entql string predicate on the cancel_reason field.
func (f *AssistanceFilter) WhereCancelReason(p entql.StringP) {
	f.Where(p.Field(assistance.FieldCancelReason))
}

// WhereCancelReasonDesc applies the entql string predicate on the cancel_reason_desc field.
func (f *AssistanceFilter) WhereCancelReasonDesc(p entql.StringP) {
	f.Where(p.Field(assistance.FieldCancelReasonDesc))
}

// WhereDistance applies the entql float64 predicate on the distance field.
func (f *AssistanceFilter) WhereDistance(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldDistance))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *AssistanceFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(assistance.FieldReason))
}

// WhereDetectPhoto applies the entql string predicate on the detect_photo field.
func (f *AssistanceFilter) WhereDetectPhoto(p entql.StringP) {
	f.Where(p.Field(assistance.FieldDetectPhoto))
}

// WhereJointPhoto applies the entql string predicate on the joint_photo field.
func (f *AssistanceFilter) WhereJointPhoto(p entql.StringP) {
	f.Where(p.Field(assistance.FieldJointPhoto))
}

// WhereCost applies the entql float64 predicate on the cost field.
func (f *AssistanceFilter) WhereCost(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldCost))
}

// WhereRefusedDesc applies the entql string predicate on the refused_desc field.
func (f *AssistanceFilter) WhereRefusedDesc(p entql.StringP) {
	f.Where(p.Field(assistance.FieldRefusedDesc))
}

// WherePayAt applies the entql time.Time predicate on the pay_at field.
func (f *AssistanceFilter) WherePayAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldPayAt))
}

// WhereAllocateAt applies the entql time.Time predicate on the allocate_at field.
func (f *AssistanceFilter) WhereAllocateAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldAllocateAt))
}

// WhereWait applies the entql int predicate on the wait field.
func (f *AssistanceFilter) WhereWait(p entql.IntP) {
	f.Where(p.Field(assistance.FieldWait))
}

// WhereFreeReason applies the entql string predicate on the free_reason field.
func (f *AssistanceFilter) WhereFreeReason(p entql.StringP) {
	f.Where(p.Field(assistance.FieldFreeReason))
}

// WhereFailReason applies the entql string predicate on the fail_reason field.
func (f *AssistanceFilter) WhereFailReason(p entql.StringP) {
	f.Where(p.Field(assistance.FieldFailReason))
}

// WhereProcessAt applies the entql time.Time predicate on the process_at field.
func (f *AssistanceFilter) WhereProcessAt(p entql.TimeP) {
	f.Where(p.Field(assistance.FieldProcessAt))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *AssistanceFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(assistance.FieldPrice))
}

// WhereNaviDuration applies the entql int predicate on the navi_duration field.
func (f *AssistanceFilter) WhereNaviDuration(p entql.IntP) {
	f.Where(p.Field(assistance.FieldNaviDuration))
}

// WhereNaviPolylines applies the entql json.RawMessage predicate on the navi_polylines field.
func (f *AssistanceFilter) WhereNaviPolylines(p entql.BytesP) {
	f.Where(p.Field(assistance.FieldNaviPolylines))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *AssistanceFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *AssistanceFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *AssistanceFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *AssistanceFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *AssistanceFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *AssistanceFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *AssistanceFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (aq *AttendanceQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AttendanceQuery builder.
func (aq *AttendanceQuery) Filter() *AttendanceFilter {
	return &AttendanceFilter{aq.config, aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AttendanceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AttendanceMutation builder.
func (m *AttendanceMutation) Filter() *AttendanceFilter {
	return &AttendanceFilter{m.config, m}
}

// AttendanceFilter provides a generic filtering capability at runtime for AttendanceQuery.
type AttendanceFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *AttendanceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *AttendanceFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(attendance.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *AttendanceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(attendance.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *AttendanceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(attendance.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *AttendanceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(attendance.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *AttendanceFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(attendance.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *AttendanceFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(attendance.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *AttendanceFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(attendance.FieldRemark))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *AttendanceFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(attendance.FieldStoreID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *AttendanceFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(attendance.FieldEmployeeID))
}

// WhereInventory applies the entql json.RawMessage predicate on the inventory field.
func (f *AttendanceFilter) WhereInventory(p entql.BytesP) {
	f.Where(p.Field(attendance.FieldInventory))
}

// WherePhoto applies the entql string predicate on the photo field.
func (f *AttendanceFilter) WherePhoto(p entql.StringP) {
	f.Where(p.Field(attendance.FieldPhoto))
}

// WhereDuty applies the entql bool predicate on the duty field.
func (f *AttendanceFilter) WhereDuty(p entql.BoolP) {
	f.Where(p.Field(attendance.FieldDuty))
}

// WhereDate applies the entql time.Time predicate on the date field.
func (f *AttendanceFilter) WhereDate(p entql.TimeP) {
	f.Where(p.Field(attendance.FieldDate))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *AttendanceFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(attendance.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *AttendanceFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(attendance.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *AttendanceFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(attendance.FieldAddress))
}

// WhereDistance applies the entql float64 predicate on the distance field.
func (f *AttendanceFilter) WhereDistance(p entql.Float64P) {
	f.Where(p.Field(attendance.FieldDistance))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *AttendanceFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *AttendanceFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *AttendanceFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *AttendanceFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bmq *BatteryModelQuery) addPredicate(pred func(s *sql.Selector)) {
	bmq.predicates = append(bmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BatteryModelQuery builder.
func (bmq *BatteryModelQuery) Filter() *BatteryModelFilter {
	return &BatteryModelFilter{bmq.config, bmq}
}

// addPredicate implements the predicateAdder interface.
func (m *BatteryModelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BatteryModelMutation builder.
func (m *BatteryModelMutation) Filter() *BatteryModelFilter {
	return &BatteryModelFilter{m.config, m}
}

// BatteryModelFilter provides a generic filtering capability at runtime for BatteryModelQuery.
type BatteryModelFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BatteryModelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BatteryModelFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(batterymodel.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BatteryModelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BatteryModelFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BatteryModelFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BatteryModelFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(batterymodel.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BatteryModelFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(batterymodel.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BatteryModelFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(batterymodel.FieldRemark))
}

// WhereModel applies the entql string predicate on the model field.
func (f *BatteryModelFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(batterymodel.FieldModel))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *BatteryModelFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(batterymodel.FieldEnable))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *BatteryModelFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *BatteryModelFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlans applies a predicate to check if query has an edge plans.
func (f *BatteryModelFilter) WhereHasPlans() {
	f.Where(entql.HasEdge("plans"))
}

// WhereHasPlansWith applies a predicate to check if query has an edge plans with a given conditions (other predicates).
func (f *BatteryModelFilter) WhereHasPlansWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BranchQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BranchQuery builder.
func (bq *BranchQuery) Filter() *BranchFilter {
	return &BranchFilter{bq.config, bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BranchMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BranchMutation builder.
func (m *BranchMutation) Filter() *BranchFilter {
	return &BranchFilter{m.config, m}
}

// BranchFilter provides a generic filtering capability at runtime for BranchQuery.
type BranchFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BranchFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BranchFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(branch.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BranchFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BranchFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BranchFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BranchFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(branch.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BranchFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(branch.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BranchFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(branch.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *BranchFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(branch.FieldCityID))
}

// WhereName applies the entql string predicate on the name field.
func (f *BranchFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(branch.FieldName))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *BranchFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(branch.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *BranchFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(branch.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *BranchFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(branch.FieldAddress))
}

// WherePhotos applies the entql json.RawMessage predicate on the photos field.
func (f *BranchFilter) WherePhotos(p entql.BytesP) {
	f.Where(p.Field(branch.FieldPhotos))
}

// WhereGeom applies the entql other predicate on the geom field.
func (f *BranchFilter) WhereGeom(p entql.OtherP) {
	f.Where(p.Field(branch.FieldGeom))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *BranchFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *BranchFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContracts applies a predicate to check if query has an edge contracts.
func (f *BranchFilter) WhereHasContracts() {
	f.Where(entql.HasEdge("contracts"))
}

// WhereHasContractsWith applies a predicate to check if query has an edge contracts with a given conditions (other predicates).
func (f *BranchFilter) WhereHasContractsWith(preds ...predicate.BranchContract) {
	f.Where(entql.HasEdgeWith("contracts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *BranchFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *BranchFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *BranchFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *BranchFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStores applies a predicate to check if query has an edge stores.
func (f *BranchFilter) WhereHasStores() {
	f.Where(entql.HasEdge("stores"))
}

// WhereHasStoresWith applies a predicate to check if query has an edge stores with a given conditions (other predicates).
func (f *BranchFilter) WhereHasStoresWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("stores", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bcq *BranchContractQuery) addPredicate(pred func(s *sql.Selector)) {
	bcq.predicates = append(bcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BranchContractQuery builder.
func (bcq *BranchContractQuery) Filter() *BranchContractFilter {
	return &BranchContractFilter{bcq.config, bcq}
}

// addPredicate implements the predicateAdder interface.
func (m *BranchContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BranchContractMutation builder.
func (m *BranchContractMutation) Filter() *BranchContractFilter {
	return &BranchContractFilter{m.config, m}
}

// BranchContractFilter provides a generic filtering capability at runtime for BranchContractQuery.
type BranchContractFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BranchContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BranchContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(branchcontract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BranchContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BranchContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BranchContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BranchContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BranchContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BranchContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldRemark))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *BranchContractFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(branchcontract.FieldBranchID))
}

// WhereLandlordName applies the entql string predicate on the landlord_name field.
func (f *BranchContractFilter) WhereLandlordName(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldLandlordName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *BranchContractFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldIDCardNumber))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *BranchContractFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldPhone))
}

// WhereBankNumber applies the entql string predicate on the bank_number field.
func (f *BranchContractFilter) WhereBankNumber(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldBankNumber))
}

// WherePledge applies the entql float64 predicate on the pledge field.
func (f *BranchContractFilter) WherePledge(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldPledge))
}

// WhereRent applies the entql float64 predicate on the rent field.
func (f *BranchContractFilter) WhereRent(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldRent))
}

// WhereLease applies the entql uint predicate on the lease field.
func (f *BranchContractFilter) WhereLease(p entql.UintP) {
	f.Where(p.Field(branchcontract.FieldLease))
}

// WhereElectricityPledge applies the entql float64 predicate on the electricity_pledge field.
func (f *BranchContractFilter) WhereElectricityPledge(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldElectricityPledge))
}

// WhereElectricity applies the entql float64 predicate on the electricity field.
func (f *BranchContractFilter) WhereElectricity(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldElectricity))
}

// WhereArea applies the entql float64 predicate on the area field.
func (f *BranchContractFilter) WhereArea(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldArea))
}

// WhereStartTime applies the entql string predicate on the start_time field.
func (f *BranchContractFilter) WhereStartTime(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldStartTime))
}

// WhereEndTime applies the entql string predicate on the end_time field.
func (f *BranchContractFilter) WhereEndTime(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldEndTime))
}

// WhereFile applies the entql string predicate on the file field.
func (f *BranchContractFilter) WhereFile(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldFile))
}

// WhereSheets applies the entql json.RawMessage predicate on the sheets field.
func (f *BranchContractFilter) WhereSheets(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldSheets))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *BranchContractFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *BranchContractFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BusinessQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BusinessQuery builder.
func (bq *BusinessQuery) Filter() *BusinessFilter {
	return &BusinessFilter{bq.config, bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BusinessMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BusinessMutation builder.
func (m *BusinessMutation) Filter() *BusinessFilter {
	return &BusinessFilter{m.config, m}
}

// BusinessFilter provides a generic filtering capability at runtime for BusinessQuery.
type BusinessFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BusinessFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BusinessFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BusinessFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(business.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BusinessFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(business.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BusinessFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(business.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BusinessFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(business.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BusinessFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(business.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BusinessFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(business.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *BusinessFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldRiderID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *BusinessFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldCityID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *BusinessFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldSubscribeID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *BusinessFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldEmployeeID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *BusinessFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldStoreID))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *BusinessFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldPlanID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *BusinessFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *BusinessFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(business.FieldStationID))
}

// WhereType applies the entql string predicate on the type field.
func (f *BusinessFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(business.FieldType))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *BusinessFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *BusinessFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *BusinessFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *BusinessFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *BusinessFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *BusinessFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *BusinessFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *BusinessFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *BusinessFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CabinetQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetQuery builder.
func (cq *CabinetQuery) Filter() *CabinetFilter {
	return &CabinetFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetMutation builder.
func (m *CabinetMutation) Filter() *CabinetFilter {
	return &CabinetFilter{m.config, m}
}

// CabinetFilter provides a generic filtering capability at runtime for CabinetQuery.
type CabinetFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CabinetFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CabinetFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CabinetFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CabinetFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CabinetFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *CabinetFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldCityID))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *CabinetFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldBranchID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *CabinetFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSn))
}

// WhereBrand applies the entql string predicate on the brand field.
func (f *CabinetFilter) WhereBrand(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldBrand))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *CabinetFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSerial))
}

// WhereName applies the entql string predicate on the name field.
func (f *CabinetFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldName))
}

// WhereDoors applies the entql uint predicate on the doors field.
func (f *CabinetFilter) WhereDoors(p entql.UintP) {
	f.Where(p.Field(cabinet.FieldDoors))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CabinetFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(cabinet.FieldStatus))
}

// WhereHealth applies the entql uint8 predicate on the health field.
func (f *CabinetFilter) WhereHealth(p entql.Uint8P) {
	f.Where(p.Field(cabinet.FieldHealth))
}

// WhereBin applies the entql json.RawMessage predicate on the bin field.
func (f *CabinetFilter) WhereBin(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldBin))
}

// WhereBatteryNum applies the entql uint predicate on the battery_num field.
func (f *CabinetFilter) WhereBatteryNum(p entql.UintP) {
	f.Where(p.Field(cabinet.FieldBatteryNum))
}

// WhereBatteryFullNum applies the entql uint predicate on the battery_full_num field.
func (f *CabinetFilter) WhereBatteryFullNum(p entql.UintP) {
	f.Where(p.Field(cabinet.FieldBatteryFullNum))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *CabinetFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *CabinetFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *CabinetFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldAddress))
}

// WhereSimSn applies the entql string predicate on the sim_sn field.
func (f *CabinetFilter) WhereSimSn(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSimSn))
}

// WhereSimDate applies the entql time.Time predicate on the sim_date field.
func (f *CabinetFilter) WhereSimDate(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldSimDate))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *CabinetFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *CabinetFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBms applies a predicate to check if query has an edge bms.
func (f *CabinetFilter) WhereHasBms() {
	f.Where(entql.HasEdge("bms"))
}

// WhereHasBmsWith applies a predicate to check if query has an edge bms with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBmsWith(preds ...predicate.BatteryModel) {
	f.Where(entql.HasEdgeWith("bms", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *CabinetFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExchanges applies a predicate to check if query has an edge exchanges.
func (f *CabinetFilter) WhereHasExchanges() {
	f.Where(entql.HasEdge("exchanges"))
}

// WhereHasExchangesWith applies a predicate to check if query has an edge exchanges with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasExchangesWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchanges", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cfq *CabinetFaultQuery) addPredicate(pred func(s *sql.Selector)) {
	cfq.predicates = append(cfq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetFaultQuery builder.
func (cfq *CabinetFaultQuery) Filter() *CabinetFaultFilter {
	return &CabinetFaultFilter{cfq.config, cfq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetFaultMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetFaultMutation builder.
func (m *CabinetFaultMutation) Filter() *CabinetFaultFilter {
	return &CabinetFaultFilter{m.config, m}
}

// CabinetFaultFilter provides a generic filtering capability at runtime for CabinetFaultQuery.
type CabinetFaultFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CabinetFaultFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetFaultFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetFaultFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetFaultFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CabinetFaultFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetfault.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CabinetFaultFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CabinetFaultFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CabinetFaultFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *CabinetFaultFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldCityID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CabinetFaultFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(cabinetfault.FieldStatus))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *CabinetFaultFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldBranchID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *CabinetFaultFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldCabinetID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *CabinetFaultFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(cabinetfault.FieldRiderID))
}

// WhereFault applies the entql string predicate on the fault field.
func (f *CabinetFaultFilter) WhereFault(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldFault))
}

// WhereAttachments applies the entql json.RawMessage predicate on the attachments field.
func (f *CabinetFaultFilter) WhereAttachments(p entql.BytesP) {
	f.Where(p.Field(cabinetfault.FieldAttachments))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *CabinetFaultFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(cabinetfault.FieldDescription))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *CabinetFaultFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *CabinetFaultFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *CabinetFaultFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *CabinetFaultFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *CabinetFaultFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CityQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CityQuery builder.
func (cq *CityQuery) Filter() *CityFilter {
	return &CityFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CityMutation builder.
func (m *CityMutation) Filter() *CityFilter {
	return &CityFilter{m.config, m}
}

// CityFilter provides a generic filtering capability at runtime for CityQuery.
type CityFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CityFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(city.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CityFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CityFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(city.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CityFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(city.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CityFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(city.FieldRemark))
}

// WhereOpen applies the entql bool predicate on the open field.
func (f *CityFilter) WhereOpen(p entql.BoolP) {
	f.Where(p.Field(city.FieldOpen))
}

// WhereName applies the entql string predicate on the name field.
func (f *CityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(city.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CityFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(city.FieldCode))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *CityFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(city.FieldParentID))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *CityFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(city.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *CityFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(city.FieldLat))
}

// WhereHasPlans applies a predicate to check if query has an edge plans.
func (f *CityFilter) WhereHasPlans() {
	f.Where(entql.HasEdge("plans"))
}

// WhereHasPlansWith applies a predicate to check if query has an edge plans with a given conditions (other predicates).
func (f *CityFilter) WhereHasPlansWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plans", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *CityFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *CityFilter) WhereHasParentWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *CityFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *CityFilter) WhereHasChildrenWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CommissionQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CommissionQuery builder.
func (cq *CommissionQuery) Filter() *CommissionFilter {
	return &CommissionFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CommissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CommissionMutation builder.
func (m *CommissionMutation) Filter() *CommissionFilter {
	return &CommissionFilter{m.config, m}
}

// CommissionFilter provides a generic filtering capability at runtime for CommissionQuery.
type CommissionFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CommissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CommissionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CommissionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CommissionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CommissionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(commission.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CommissionFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(commission.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CommissionFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(commission.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CommissionFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(commission.FieldRemark))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *CommissionFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldOrderID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *CommissionFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(commission.FieldAmount))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *CommissionFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(commission.FieldStatus))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *CommissionFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(commission.FieldEmployeeID))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *CommissionFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *CommissionFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *CommissionFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContractQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContractQuery builder.
func (cq *ContractQuery) Filter() *ContractFilter {
	return &ContractFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContractMutation builder.
func (m *ContractMutation) Filter() *ContractFilter {
	return &ContractFilter{m.config, m}
}

// ContractFilter provides a generic filtering capability at runtime for ContractQuery.
type ContractFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(contract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(contract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(contract.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ContractFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(contract.FieldStatus))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ContractFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldRiderID))
}

// WhereFlowID applies the entql string predicate on the flow_id field.
func (f *ContractFilter) WhereFlowID(p entql.StringP) {
	f.Where(p.Field(contract.FieldFlowID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *ContractFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(contract.FieldSn))
}

// WhereFiles applies the entql json.RawMessage predicate on the files field.
func (f *ContractFilter) WhereFiles(p entql.BytesP) {
	f.Where(p.Field(contract.FieldFiles))
}

// WhereEffective applies the entql bool predicate on the effective field.
func (f *ContractFilter) WhereEffective(p entql.BoolP) {
	f.Where(p.Field(contract.FieldEffective))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ContractFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ContractFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EmployeeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmployeeQuery builder.
func (eq *EmployeeQuery) Filter() *EmployeeFilter {
	return &EmployeeFilter{eq.config, eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmployeeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmployeeMutation builder.
func (m *EmployeeMutation) Filter() *EmployeeFilter {
	return &EmployeeFilter{m.config, m}
}

// EmployeeFilter provides a generic filtering capability at runtime for EmployeeQuery.
type EmployeeFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EmployeeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EmployeeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(employee.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmployeeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmployeeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmployeeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(employee.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EmployeeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(employee.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EmployeeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(employee.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EmployeeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(employee.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EmployeeFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(employee.FieldCityID))
}

// WhereSn applies the entql [16]byte predicate on the sn field.
func (f *EmployeeFilter) WhereSn(p entql.ValueP) {
	f.Where(p.Field(employee.FieldSn))
}

// WhereName applies the entql string predicate on the name field.
func (f *EmployeeFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(employee.FieldName))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *EmployeeFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(employee.FieldPhone))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *EmployeeFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(employee.FieldEnable))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EmployeeFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *EmployeeFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAttendances applies a predicate to check if query has an edge attendances.
func (f *EmployeeFilter) WhereHasAttendances() {
	f.Where(entql.HasEdge("attendances"))
}

// WhereHasAttendancesWith applies a predicate to check if query has an edge attendances with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasAttendancesWith(preds ...predicate.Attendance) {
	f.Where(entql.HasEdgeWith("attendances", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *EmployeeFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExchanges applies a predicate to check if query has an edge exchanges.
func (f *EmployeeFilter) WhereHasExchanges() {
	f.Where(entql.HasEdge("exchanges"))
}

// WhereHasExchangesWith applies a predicate to check if query has an edge exchanges with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasExchangesWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchanges", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommissions applies a predicate to check if query has an edge commissions.
func (f *EmployeeFilter) WhereHasCommissions() {
	f.Where(entql.HasEdge("commissions"))
}

// WhereHasCommissionsWith applies a predicate to check if query has an edge commissions with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasCommissionsWith(preds ...predicate.Commission) {
	f.Where(entql.HasEdgeWith("commissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssistances applies a predicate to check if query has an edge assistances.
func (f *EmployeeFilter) WhereHasAssistances() {
	f.Where(entql.HasEdge("assistances"))
}

// WhereHasAssistancesWith applies a predicate to check if query has an edge assistances with a given conditions (other predicates).
func (f *EmployeeFilter) WhereHasAssistancesWith(preds ...predicate.Assistance) {
	f.Where(entql.HasEdgeWith("assistances", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EnterpriseQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseQuery builder.
func (eq *EnterpriseQuery) Filter() *EnterpriseFilter {
	return &EnterpriseFilter{eq.config, eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseMutation builder.
func (m *EnterpriseMutation) Filter() *EnterpriseFilter {
	return &EnterpriseFilter{m.config, m}
}

// EnterpriseFilter provides a generic filtering capability at runtime for EnterpriseQuery.
type EnterpriseFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprise.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprise.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprise.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EnterpriseFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(enterprise.FieldCityID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EnterpriseFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldName))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *EnterpriseFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(enterprise.FieldStatus))
}

// WhereContactName applies the entql string predicate on the contact_name field.
func (f *EnterpriseFilter) WhereContactName(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldContactName))
}

// WhereContactPhone applies the entql string predicate on the contact_phone field.
func (f *EnterpriseFilter) WhereContactPhone(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldContactPhone))
}

// WhereIdcardNumber applies the entql string predicate on the idcard_number field.
func (f *EnterpriseFilter) WhereIdcardNumber(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldIdcardNumber))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *EnterpriseFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(enterprise.FieldAddress))
}

// WherePayment applies the entql uint8 predicate on the payment field.
func (f *EnterpriseFilter) WherePayment(p entql.Uint8P) {
	f.Where(p.Field(enterprise.FieldPayment))
}

// WhereDeposit applies the entql float64 predicate on the deposit field.
func (f *EnterpriseFilter) WhereDeposit(p entql.Float64P) {
	f.Where(p.Field(enterprise.FieldDeposit))
}

// WhereBalance applies the entql float64 predicate on the balance field.
func (f *EnterpriseFilter) WhereBalance(p entql.Float64P) {
	f.Where(p.Field(enterprise.FieldBalance))
}

// WherePrepaymentTotal applies the entql float64 predicate on the prepayment_total field.
func (f *EnterpriseFilter) WherePrepaymentTotal(p entql.Float64P) {
	f.Where(p.Field(enterprise.FieldPrepaymentTotal))
}

// WhereSuspensedAt applies the entql time.Time predicate on the suspensed_at field.
func (f *EnterpriseFilter) WhereSuspensedAt(p entql.TimeP) {
	f.Where(p.Field(enterprise.FieldSuspensedAt))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EnterpriseFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRiders applies a predicate to check if query has an edge riders.
func (f *EnterpriseFilter) WhereHasRiders() {
	f.Where(entql.HasEdge("riders"))
}

// WhereHasRidersWith applies a predicate to check if query has an edge riders with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasRidersWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("riders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContracts applies a predicate to check if query has an edge contracts.
func (f *EnterpriseFilter) WhereHasContracts() {
	f.Where(entql.HasEdge("contracts"))
}

// WhereHasContractsWith applies a predicate to check if query has an edge contracts with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasContractsWith(preds ...predicate.EnterpriseContract) {
	f.Where(entql.HasEdgeWith("contracts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPrices applies a predicate to check if query has an edge prices.
func (f *EnterpriseFilter) WhereHasPrices() {
	f.Where(entql.HasEdge("prices"))
}

// WhereHasPricesWith applies a predicate to check if query has an edge prices with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasPricesWith(preds ...predicate.EnterprisePrice) {
	f.Where(entql.HasEdgeWith("prices", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribes applies a predicate to check if query has an edge subscribes.
func (f *EnterpriseFilter) WhereHasSubscribes() {
	f.Where(entql.HasEdge("subscribes"))
}

// WhereHasSubscribesWith applies a predicate to check if query has an edge subscribes with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasSubscribesWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStatements applies a predicate to check if query has an edge statements.
func (f *EnterpriseFilter) WhereHasStatements() {
	f.Where(entql.HasEdge("statements"))
}

// WhereHasStatementsWith applies a predicate to check if query has an edge statements with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasStatementsWith(preds ...predicate.EnterpriseStatement) {
	f.Where(entql.HasEdgeWith("statements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStations applies a predicate to check if query has an edge stations.
func (f *EnterpriseFilter) WhereHasStations() {
	f.Where(entql.HasEdge("stations"))
}

// WhereHasStationsWith applies a predicate to check if query has an edge stations with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasStationsWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("stations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBills applies a predicate to check if query has an edge bills.
func (f *EnterpriseFilter) WhereHasBills() {
	f.Where(entql.HasEdge("bills"))
}

// WhereHasBillsWith applies a predicate to check if query has an edge bills with a given conditions (other predicates).
func (f *EnterpriseFilter) WhereHasBillsWith(preds ...predicate.EnterpriseBill) {
	f.Where(entql.HasEdgeWith("bills", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ebq *EnterpriseBillQuery) addPredicate(pred func(s *sql.Selector)) {
	ebq.predicates = append(ebq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseBillQuery builder.
func (ebq *EnterpriseBillQuery) Filter() *EnterpriseBillFilter {
	return &EnterpriseBillFilter{ebq.config, ebq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseBillMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseBillMutation builder.
func (m *EnterpriseBillMutation) Filter() *EnterpriseBillFilter {
	return &EnterpriseBillFilter{m.config, m}
}

// EnterpriseBillFilter provides a generic filtering capability at runtime for EnterpriseBillQuery.
type EnterpriseBillFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseBillFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseBillFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseBillFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseBillFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseBillFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseBillFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprisebill.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseBillFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprisebill.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseBillFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprisebill.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *EnterpriseBillFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldRiderID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EnterpriseBillFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldCityID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *EnterpriseBillFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldStationID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *EnterpriseBillFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldSubscribeID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterpriseBillFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldEnterpriseID))
}

// WhereStatementID applies the entql uint64 predicate on the statement_id field.
func (f *EnterpriseBillFilter) WhereStatementID(p entql.Uint64P) {
	f.Where(p.Field(enterprisebill.FieldStatementID))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *EnterpriseBillFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *EnterpriseBillFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(enterprisebill.FieldEnd))
}

// WhereDays applies the entql int predicate on the days field.
func (f *EnterpriseBillFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(enterprisebill.FieldDays))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *EnterpriseBillFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(enterprisebill.FieldPrice))
}

// WhereCost applies the entql float64 predicate on the cost field.
func (f *EnterpriseBillFilter) WhereCost(p entql.Float64P) {
	f.Where(p.Field(enterprisebill.FieldCost))
}

// WhereModel applies the entql string predicate on the model field.
func (f *EnterpriseBillFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(enterprisebill.FieldModel))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *EnterpriseBillFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EnterpriseBillFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *EnterpriseBillFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterpriseBillFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStatement applies a predicate to check if query has an edge statement.
func (f *EnterpriseBillFilter) WhereHasStatement() {
	f.Where(entql.HasEdge("statement"))
}

// WhereHasStatementWith applies a predicate to check if query has an edge statement with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasStatementWith(preds ...predicate.EnterpriseStatement) {
	f.Where(entql.HasEdgeWith("statement", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *EnterpriseBillFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *EnterpriseBillFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ecq *EnterpriseContractQuery) addPredicate(pred func(s *sql.Selector)) {
	ecq.predicates = append(ecq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseContractQuery builder.
func (ecq *EnterpriseContractQuery) Filter() *EnterpriseContractFilter {
	return &EnterpriseContractFilter{ecq.config, ecq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseContractMutation builder.
func (m *EnterpriseContractMutation) Filter() *EnterpriseContractFilter {
	return &EnterpriseContractFilter{m.config, m}
}

// EnterpriseContractFilter provides a generic filtering capability at runtime for EnterpriseContractQuery.
type EnterpriseContractFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisecontract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprisecontract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprisecontract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprisecontract.FieldRemark))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterpriseContractFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisecontract.FieldEnterpriseID))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *EnterpriseContractFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *EnterpriseContractFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(enterprisecontract.FieldEnd))
}

// WhereFile applies the entql string predicate on the file field.
func (f *EnterpriseContractFilter) WhereFile(p entql.StringP) {
	f.Where(p.Field(enterprisecontract.FieldFile))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterpriseContractFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterpriseContractFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (epq *EnterprisePrepaymentQuery) addPredicate(pred func(s *sql.Selector)) {
	epq.predicates = append(epq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterprisePrepaymentQuery builder.
func (epq *EnterprisePrepaymentQuery) Filter() *EnterprisePrepaymentFilter {
	return &EnterprisePrepaymentFilter{epq.config, epq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterprisePrepaymentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterprisePrepaymentMutation builder.
func (m *EnterprisePrepaymentMutation) Filter() *EnterprisePrepaymentFilter {
	return &EnterprisePrepaymentFilter{m.config, m}
}

// EnterprisePrepaymentFilter provides a generic filtering capability at runtime for EnterprisePrepaymentQuery.
type EnterprisePrepaymentFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EnterprisePrepaymentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterprisePrepaymentFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprepayment.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterprisePrepaymentFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprepayment.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterprisePrepaymentFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprepayment.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterprisePrepaymentFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprepayment.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterprisePrepaymentFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterpriseprepayment.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterprisePrepaymentFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterpriseprepayment.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterprisePrepaymentFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterpriseprepayment.FieldRemark))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterprisePrepaymentFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprepayment.FieldEnterpriseID))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *EnterprisePrepaymentFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(enterpriseprepayment.FieldAmount))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterprisePrepaymentFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterprisePrepaymentFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (epq *EnterprisePriceQuery) addPredicate(pred func(s *sql.Selector)) {
	epq.predicates = append(epq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterprisePriceQuery builder.
func (epq *EnterprisePriceQuery) Filter() *EnterprisePriceFilter {
	return &EnterprisePriceFilter{epq.config, epq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterprisePriceMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterprisePriceMutation builder.
func (m *EnterprisePriceMutation) Filter() *EnterprisePriceFilter {
	return &EnterprisePriceFilter{m.config, m}
}

// EnterprisePriceFilter provides a generic filtering capability at runtime for EnterprisePriceQuery.
type EnterprisePriceFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EnterprisePriceFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterprisePriceFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprice.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterprisePriceFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprice.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterprisePriceFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprice.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterprisePriceFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterpriseprice.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterprisePriceFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterpriseprice.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterprisePriceFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterpriseprice.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterprisePriceFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterpriseprice.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *EnterprisePriceFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprice.FieldCityID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterprisePriceFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterpriseprice.FieldEnterpriseID))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *EnterprisePriceFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(enterpriseprice.FieldPrice))
}

// WhereModel applies the entql string predicate on the model field.
func (f *EnterprisePriceFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(enterpriseprice.FieldModel))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *EnterprisePriceFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *EnterprisePriceFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterprisePriceFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterprisePriceFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (esq *EnterpriseStatementQuery) addPredicate(pred func(s *sql.Selector)) {
	esq.predicates = append(esq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseStatementQuery builder.
func (esq *EnterpriseStatementQuery) Filter() *EnterpriseStatementFilter {
	return &EnterpriseStatementFilter{esq.config, esq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseStatementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseStatementMutation builder.
func (m *EnterpriseStatementMutation) Filter() *EnterpriseStatementFilter {
	return &EnterpriseStatementFilter{m.config, m}
}

// EnterpriseStatementFilter provides a generic filtering capability at runtime for EnterpriseStatementQuery.
type EnterpriseStatementFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseStatementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[17].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseStatementFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestatement.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseStatementFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseStatementFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseStatementFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseStatementFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprisestatement.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseStatementFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprisestatement.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseStatementFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprisestatement.FieldRemark))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterpriseStatementFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestatement.FieldEnterpriseID))
}

// WhereCost applies the entql float64 predicate on the cost field.
func (f *EnterpriseStatementFilter) WhereCost(p entql.Float64P) {
	f.Where(p.Field(enterprisestatement.FieldCost))
}

// WhereSettledAt applies the entql time.Time predicate on the settled_at field.
func (f *EnterpriseStatementFilter) WhereSettledAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldSettledAt))
}

// WhereDays applies the entql int predicate on the days field.
func (f *EnterpriseStatementFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(enterprisestatement.FieldDays))
}

// WhereRiderNumber applies the entql int predicate on the rider_number field.
func (f *EnterpriseStatementFilter) WhereRiderNumber(p entql.IntP) {
	f.Where(p.Field(enterprisestatement.FieldRiderNumber))
}

// WhereDate applies the entql time.Time predicate on the date field.
func (f *EnterpriseStatementFilter) WhereDate(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldDate))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *EnterpriseStatementFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *EnterpriseStatementFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(enterprisestatement.FieldEnd))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterpriseStatementFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterpriseStatementFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBills applies a predicate to check if query has an edge bills.
func (f *EnterpriseStatementFilter) WhereHasBills() {
	f.Where(entql.HasEdge("bills"))
}

// WhereHasBillsWith applies a predicate to check if query has an edge bills with a given conditions (other predicates).
func (f *EnterpriseStatementFilter) WhereHasBillsWith(preds ...predicate.EnterpriseBill) {
	f.Where(entql.HasEdgeWith("bills", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (esq *EnterpriseStationQuery) addPredicate(pred func(s *sql.Selector)) {
	esq.predicates = append(esq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EnterpriseStationQuery builder.
func (esq *EnterpriseStationQuery) Filter() *EnterpriseStationFilter {
	return &EnterpriseStationFilter{esq.config, esq}
}

// addPredicate implements the predicateAdder interface.
func (m *EnterpriseStationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EnterpriseStationMutation builder.
func (m *EnterpriseStationMutation) Filter() *EnterpriseStationFilter {
	return &EnterpriseStationFilter{m.config, m}
}

// EnterpriseStationFilter provides a generic filtering capability at runtime for EnterpriseStationQuery.
type EnterpriseStationFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *EnterpriseStationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[18].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *EnterpriseStationFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestation.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EnterpriseStationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestation.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EnterpriseStationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestation.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EnterpriseStationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(enterprisestation.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *EnterpriseStationFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(enterprisestation.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *EnterpriseStationFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(enterprisestation.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EnterpriseStationFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(enterprisestation.FieldRemark))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *EnterpriseStationFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(enterprisestation.FieldEnterpriseID))
}

// WhereName applies the entql string predicate on the name field.
func (f *EnterpriseStationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(enterprisestation.FieldName))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *EnterpriseStationFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *EnterpriseStationFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *ExceptionQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExceptionQuery builder.
func (eq *ExceptionQuery) Filter() *ExceptionFilter {
	return &ExceptionFilter{eq.config, eq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExceptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExceptionMutation builder.
func (m *ExceptionMutation) Filter() *ExceptionFilter {
	return &ExceptionFilter{m.config, m}
}

// ExceptionFilter provides a generic filtering capability at runtime for ExceptionQuery.
type ExceptionFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ExceptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[19].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ExceptionFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(exception.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ExceptionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(exception.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ExceptionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(exception.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ExceptionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(exception.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ExceptionFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(exception.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ExceptionFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(exception.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ExceptionFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(exception.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *ExceptionFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(exception.FieldCityID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *ExceptionFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(exception.FieldEmployeeID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ExceptionFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(exception.FieldStatus))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *ExceptionFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(exception.FieldStoreID))
}

// WhereName applies the entql string predicate on the name field.
func (f *ExceptionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(exception.FieldName))
}

// WhereModel applies the entql string predicate on the model field.
func (f *ExceptionFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(exception.FieldModel))
}

// WhereNum applies the entql int predicate on the num field.
func (f *ExceptionFilter) WhereNum(p entql.IntP) {
	f.Where(p.Field(exception.FieldNum))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *ExceptionFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(exception.FieldReason))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *ExceptionFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(exception.FieldDescription))
}

// WhereAttachments applies the entql json.RawMessage predicate on the attachments field.
func (f *ExceptionFilter) WhereAttachments(p entql.BytesP) {
	f.Where(p.Field(exception.FieldAttachments))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *ExceptionFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *ExceptionFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *ExceptionFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *ExceptionFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *ExceptionFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *ExceptionFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *ExchangeQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ExchangeQuery builder.
func (eq *ExchangeQuery) Filter() *ExchangeFilter {
	return &ExchangeFilter{eq.config, eq}
}

// addPredicate implements the predicateAdder interface.
func (m *ExchangeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ExchangeMutation builder.
func (m *ExchangeMutation) Filter() *ExchangeFilter {
	return &ExchangeFilter{m.config, m}
}

// ExchangeFilter provides a generic filtering capability at runtime for ExchangeQuery.
type ExchangeFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ExchangeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[20].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ExchangeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ExchangeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ExchangeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ExchangeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(exchange.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ExchangeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ExchangeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ExchangeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(exchange.FieldRemark))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *ExchangeFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldSubscribeID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *ExchangeFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldCityID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *ExchangeFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldStoreID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *ExchangeFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldEnterpriseID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *ExchangeFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldStationID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ExchangeFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldRiderID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *ExchangeFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldEmployeeID))
}

// WhereUUID applies the entql string predicate on the uuid field.
func (f *ExchangeFilter) WhereUUID(p entql.StringP) {
	f.Where(p.Field(exchange.FieldUUID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *ExchangeFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(exchange.FieldCabinetID))
}

// WhereSuccess applies the entql bool predicate on the success field.
func (f *ExchangeFilter) WhereSuccess(p entql.BoolP) {
	f.Where(p.Field(exchange.FieldSuccess))
}

// WhereDetail applies the entql json.RawMessage predicate on the detail field.
func (f *ExchangeFilter) WhereDetail(p entql.BytesP) {
	f.Where(p.Field(exchange.FieldDetail))
}

// WhereModel applies the entql string predicate on the model field.
func (f *ExchangeFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(exchange.FieldModel))
}

// WhereAlternative applies the entql bool predicate on the alternative field.
func (f *ExchangeFilter) WhereAlternative(p entql.BoolP) {
	f.Where(p.Field(exchange.FieldAlternative))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *ExchangeFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *ExchangeFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *ExchangeFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *ExchangeFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *ExchangeFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *ExchangeFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ExchangeFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *ExchangeFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *ExchangeFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *InventoryQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InventoryQuery builder.
func (iq *InventoryQuery) Filter() *InventoryFilter {
	return &InventoryFilter{iq.config, iq}
}

// addPredicate implements the predicateAdder interface.
func (m *InventoryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InventoryMutation builder.
func (m *InventoryMutation) Filter() *InventoryFilter {
	return &InventoryFilter{m.config, m}
}

// InventoryFilter provides a generic filtering capability at runtime for InventoryQuery.
type InventoryFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *InventoryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[21].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *InventoryFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(inventory.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InventoryFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InventoryFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InventoryFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(inventory.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *InventoryFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(inventory.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *InventoryFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(inventory.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *InventoryFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(inventory.FieldRemark))
}

// WhereName applies the entql string predicate on the name field.
func (f *InventoryFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(inventory.FieldName))
}

// WhereCount applies the entql bool predicate on the count field.
func (f *InventoryFilter) WhereCount(p entql.BoolP) {
	f.Where(p.Field(inventory.FieldCount))
}

// WhereTransfer applies the entql bool predicate on the transfer field.
func (f *InventoryFilter) WhereTransfer(p entql.BoolP) {
	f.Where(p.Field(inventory.FieldTransfer))
}

// WherePurchase applies the entql bool predicate on the purchase field.
func (f *InventoryFilter) WherePurchase(p entql.BoolP) {
	f.Where(p.Field(inventory.FieldPurchase))
}

// addPredicate implements the predicateAdder interface.
func (mq *ManagerQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ManagerQuery builder.
func (mq *ManagerQuery) Filter() *ManagerFilter {
	return &ManagerFilter{mq.config, mq}
}

// addPredicate implements the predicateAdder interface.
func (m *ManagerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ManagerMutation builder.
func (m *ManagerMutation) Filter() *ManagerFilter {
	return &ManagerFilter{m.config, m}
}

// ManagerFilter provides a generic filtering capability at runtime for ManagerQuery.
type ManagerFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ManagerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[22].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ManagerFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(manager.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ManagerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ManagerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ManagerFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *ManagerFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(manager.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ManagerFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(manager.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ManagerFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(manager.FieldRemark))
}

// WhereRoleID applies the entql uint64 predicate on the role_id field.
func (f *ManagerFilter) WhereRoleID(p entql.Uint64P) {
	f.Where(p.Field(manager.FieldRoleID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *ManagerFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(manager.FieldPhone))
}

// WhereName applies the entql string predicate on the name field.
func (f *ManagerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(manager.FieldName))
}

// WherePassword applies the entql string predicate on the password field.
func (f *ManagerFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(manager.FieldPassword))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *ManagerFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldLastSigninAt))
}

// WhereHasRole applies a predicate to check if query has an edge role.
func (f *ManagerFilter) WhereHasRole() {
	f.Where(entql.HasEdge("role"))
}

// WhereHasRoleWith applies a predicate to check if query has an edge role with a given conditions (other predicates).
func (f *ManagerFilter) WhereHasRoleWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("role", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrderQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderQuery builder.
func (oq *OrderQuery) Filter() *OrderFilter {
	return &OrderFilter{oq.config, oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderMutation builder.
func (m *OrderMutation) Filter() *OrderFilter {
	return &OrderFilter{m.config, m}
}

// OrderFilter provides a generic filtering capability at runtime for OrderQuery.
type OrderFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[23].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OrderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *OrderFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(order.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *OrderFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(order.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *OrderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(order.FieldRemark))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *OrderFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldPlanID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *OrderFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldCityID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *OrderFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldRiderID))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *OrderFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldParentID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *OrderFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(order.FieldSubscribeID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *OrderFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(order.FieldStatus))
}

// WherePayway applies the entql uint8 predicate on the payway field.
func (f *OrderFilter) WherePayway(p entql.Uint8P) {
	f.Where(p.Field(order.FieldPayway))
}

// WhereType applies the entql uint predicate on the type field.
func (f *OrderFilter) WhereType(p entql.UintP) {
	f.Where(p.Field(order.FieldType))
}

// WhereOutTradeNo applies the entql string predicate on the out_trade_no field.
func (f *OrderFilter) WhereOutTradeNo(p entql.StringP) {
	f.Where(p.Field(order.FieldOutTradeNo))
}

// WhereTradeNo applies the entql string predicate on the trade_no field.
func (f *OrderFilter) WhereTradeNo(p entql.StringP) {
	f.Where(p.Field(order.FieldTradeNo))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *OrderFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(order.FieldAmount))
}

// WhereTotal applies the entql float64 predicate on the total field.
func (f *OrderFilter) WhereTotal(p entql.Float64P) {
	f.Where(p.Field(order.FieldTotal))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *OrderFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(order.FieldRefundAt))
}

// WhereInitialDays applies the entql int predicate on the initial_days field.
func (f *OrderFilter) WhereInitialDays(p entql.IntP) {
	f.Where(p.Field(order.FieldInitialDays))
}

// WherePastDays applies the entql int predicate on the past_days field.
func (f *OrderFilter) WherePastDays(p entql.IntP) {
	f.Where(p.Field(order.FieldPastDays))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *OrderFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *OrderFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *OrderFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *OrderFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *OrderFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *OrderFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *OrderFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *OrderFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCommission applies a predicate to check if query has an edge commission.
func (f *OrderFilter) WhereHasCommission() {
	f.Where(entql.HasEdge("commission"))
}

// WhereHasCommissionWith applies a predicate to check if query has an edge commission with a given conditions (other predicates).
func (f *OrderFilter) WhereHasCommissionWith(preds ...predicate.Commission) {
	f.Where(entql.HasEdgeWith("commission", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *OrderFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *OrderFilter) WhereHasParentWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *OrderFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *OrderFilter) WhereHasChildrenWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRefund applies a predicate to check if query has an edge refund.
func (f *OrderFilter) WhereHasRefund() {
	f.Where(entql.HasEdge("refund"))
}

// WhereHasRefundWith applies a predicate to check if query has an edge refund with a given conditions (other predicates).
func (f *OrderFilter) WhereHasRefundWith(preds ...predicate.OrderRefund) {
	f.Where(entql.HasEdgeWith("refund", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAssistance applies a predicate to check if query has an edge assistance.
func (f *OrderFilter) WhereHasAssistance() {
	f.Where(entql.HasEdge("assistance"))
}

// WhereHasAssistanceWith applies a predicate to check if query has an edge assistance with a given conditions (other predicates).
func (f *OrderFilter) WhereHasAssistanceWith(preds ...predicate.Assistance) {
	f.Where(entql.HasEdgeWith("assistance", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (orq *OrderRefundQuery) addPredicate(pred func(s *sql.Selector)) {
	orq.predicates = append(orq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderRefundQuery builder.
func (orq *OrderRefundQuery) Filter() *OrderRefundFilter {
	return &OrderRefundFilter{orq.config, orq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderRefundMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderRefundMutation builder.
func (m *OrderRefundMutation) Filter() *OrderRefundFilter {
	return &OrderRefundFilter{m.config, m}
}

// OrderRefundFilter provides a generic filtering capability at runtime for OrderRefundQuery.
type OrderRefundFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *OrderRefundFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[24].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *OrderRefundFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(orderrefund.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrderRefundFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrderRefundFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrderRefundFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *OrderRefundFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(orderrefund.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *OrderRefundFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(orderrefund.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *OrderRefundFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldRemark))
}

// WhereOrderID applies the entql uint64 predicate on the order_id field.
func (f *OrderRefundFilter) WhereOrderID(p entql.Uint64P) {
	f.Where(p.Field(orderrefund.FieldOrderID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *OrderRefundFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(orderrefund.FieldStatus))
}

// WhereAmount applies the entql float64 predicate on the amount field.
func (f *OrderRefundFilter) WhereAmount(p entql.Float64P) {
	f.Where(p.Field(orderrefund.FieldAmount))
}

// WhereOutRefundNo applies the entql string predicate on the out_refund_no field.
func (f *OrderRefundFilter) WhereOutRefundNo(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldOutRefundNo))
}

// WhereReason applies the entql string predicate on the reason field.
func (f *OrderRefundFilter) WhereReason(p entql.StringP) {
	f.Where(p.Field(orderrefund.FieldReason))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *OrderRefundFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(orderrefund.FieldRefundAt))
}

// WhereHasOrder applies a predicate to check if query has an edge order.
func (f *OrderRefundFilter) WhereHasOrder() {
	f.Where(entql.HasEdge("order"))
}

// WhereHasOrderWith applies a predicate to check if query has an edge order with a given conditions (other predicates).
func (f *OrderRefundFilter) WhereHasOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PersonQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonQuery builder.
func (pq *PersonQuery) Filter() *PersonFilter {
	return &PersonFilter{pq.config, pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonMutation builder.
func (m *PersonMutation) Filter() *PersonFilter {
	return &PersonFilter{m.config, m}
}

// PersonFilter provides a generic filtering capability at runtime for PersonQuery.
type PersonFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PersonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[25].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PersonFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(person.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PersonFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PersonFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(person.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PersonFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(person.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PersonFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(person.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *PersonFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(person.FieldStatus))
}

// WhereBanned applies the entql bool predicate on the banned field.
func (f *PersonFilter) WhereBanned(p entql.BoolP) {
	f.Where(p.Field(person.FieldBanned))
}

// WhereName applies the entql string predicate on the name field.
func (f *PersonFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(person.FieldName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *PersonFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNumber))
}

// WhereIDCardType applies the entql uint8 predicate on the id_card_type field.
func (f *PersonFilter) WhereIDCardType(p entql.Uint8P) {
	f.Where(p.Field(person.FieldIDCardType))
}

// WhereIDCardPortrait applies the entql string predicate on the id_card_portrait field.
func (f *PersonFilter) WhereIDCardPortrait(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardPortrait))
}

// WhereIDCardNational applies the entql string predicate on the id_card_national field.
func (f *PersonFilter) WhereIDCardNational(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNational))
}

// WhereAuthFace applies the entql string predicate on the auth_face field.
func (f *PersonFilter) WhereAuthFace(p entql.StringP) {
	f.Where(p.Field(person.FieldAuthFace))
}

// WhereAuthResult applies the entql json.RawMessage predicate on the auth_result field.
func (f *PersonFilter) WhereAuthResult(p entql.BytesP) {
	f.Where(p.Field(person.FieldAuthResult))
}

// WhereAuthAt applies the entql time.Time predicate on the auth_at field.
func (f *PersonFilter) WhereAuthAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldAuthAt))
}

// WhereEsignAccountID applies the entql string predicate on the esign_account_id field.
func (f *PersonFilter) WhereEsignAccountID(p entql.StringP) {
	f.Where(p.Field(person.FieldEsignAccountID))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PersonFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PersonFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlanQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlanQuery builder.
func (pq *PlanQuery) Filter() *PlanFilter {
	return &PlanFilter{pq.config, pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlanMutation builder.
func (m *PlanMutation) Filter() *PlanFilter {
	return &PlanFilter{m.config, m}
}

// PlanFilter provides a generic filtering capability at runtime for PlanQuery.
type PlanFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PlanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[26].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PlanFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(plan.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlanFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PlanFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(plan.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *PlanFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(plan.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PlanFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(plan.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PlanFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(plan.FieldRemark))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *PlanFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(plan.FieldEnable))
}

// WhereName applies the entql string predicate on the name field.
func (f *PlanFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(plan.FieldName))
}

// WhereStart applies the entql time.Time predicate on the start field.
func (f *PlanFilter) WhereStart(p entql.TimeP) {
	f.Where(p.Field(plan.FieldStart))
}

// WhereEnd applies the entql time.Time predicate on the end field.
func (f *PlanFilter) WhereEnd(p entql.TimeP) {
	f.Where(p.Field(plan.FieldEnd))
}

// WherePrice applies the entql float64 predicate on the price field.
func (f *PlanFilter) WherePrice(p entql.Float64P) {
	f.Where(p.Field(plan.FieldPrice))
}

// WhereDays applies the entql uint predicate on the days field.
func (f *PlanFilter) WhereDays(p entql.UintP) {
	f.Where(p.Field(plan.FieldDays))
}

// WhereCommission applies the entql float64 predicate on the commission field.
func (f *PlanFilter) WhereCommission(p entql.Float64P) {
	f.Where(p.Field(plan.FieldCommission))
}

// WhereOriginal applies the entql float64 predicate on the original field.
func (f *PlanFilter) WhereOriginal(p entql.Float64P) {
	f.Where(p.Field(plan.FieldOriginal))
}

// WhereDesc applies the entql string predicate on the desc field.
func (f *PlanFilter) WhereDesc(p entql.StringP) {
	f.Where(p.Field(plan.FieldDesc))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *PlanFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(plan.FieldParentID))
}

// WhereHasPms applies a predicate to check if query has an edge pms.
func (f *PlanFilter) WhereHasPms() {
	f.Where(entql.HasEdge("pms"))
}

// WhereHasPmsWith applies a predicate to check if query has an edge pms with a given conditions (other predicates).
func (f *PlanFilter) WhereHasPmsWith(preds ...predicate.BatteryModel) {
	f.Where(entql.HasEdgeWith("pms", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCities applies a predicate to check if query has an edge cities.
func (f *PlanFilter) WhereHasCities() {
	f.Where(entql.HasEdge("cities"))
}

// WhereHasCitiesWith applies a predicate to check if query has an edge cities with a given conditions (other predicates).
func (f *PlanFilter) WhereHasCitiesWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("cities", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *PlanFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *PlanFilter) WhereHasParentWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasComplexes applies a predicate to check if query has an edge complexes.
func (f *PlanFilter) WhereHasComplexes() {
	f.Where(entql.HasEdge("complexes"))
}

// WhereHasComplexesWith applies a predicate to check if query has an edge complexes with a given conditions (other predicates).
func (f *PlanFilter) WhereHasComplexesWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("complexes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RiderQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiderQuery builder.
func (rq *RiderQuery) Filter() *RiderFilter {
	return &RiderFilter{rq.config, rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiderMutation builder.
func (m *RiderMutation) Filter() *RiderFilter {
	return &RiderFilter{m.config, m}
}

// RiderFilter provides a generic filtering capability at runtime for RiderQuery.
type RiderFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *RiderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[27].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RiderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *RiderFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(rider.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *RiderFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(rider.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RiderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(rider.FieldRemark))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *RiderFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldStationID))
}

// WherePersonID applies the entql uint64 predicate on the person_id field.
func (f *RiderFilter) WherePersonID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldPersonID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *RiderFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldEnterpriseID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *RiderFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(rider.FieldPhone))
}

// WhereContact applies the entql json.RawMessage predicate on the contact field.
func (f *RiderFilter) WhereContact(p entql.BytesP) {
	f.Where(p.Field(rider.FieldContact))
}

// WhereDeviceType applies the entql uint8 predicate on the device_type field.
func (f *RiderFilter) WhereDeviceType(p entql.Uint8P) {
	f.Where(p.Field(rider.FieldDeviceType))
}

// WhereLastDevice applies the entql string predicate on the last_device field.
func (f *RiderFilter) WhereLastDevice(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastDevice))
}

// WhereIsNewDevice applies the entql bool predicate on the is_new_device field.
func (f *RiderFilter) WhereIsNewDevice(p entql.BoolP) {
	f.Where(p.Field(rider.FieldIsNewDevice))
}

// WhereLastFace applies the entql string predicate on the last_face field.
func (f *RiderFilter) WhereLastFace(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastFace))
}

// WherePushID applies the entql string predicate on the push_id field.
func (f *RiderFilter) WherePushID(p entql.StringP) {
	f.Where(p.Field(rider.FieldPushID))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *RiderFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldLastSigninAt))
}

// WhereBlocked applies the entql bool predicate on the blocked field.
func (f *RiderFilter) WhereBlocked(p entql.BoolP) {
	f.Where(p.Field(rider.FieldBlocked))
}

// WhereContractual applies the entql bool predicate on the contractual field.
func (f *RiderFilter) WhereContractual(p entql.BoolP) {
	f.Where(p.Field(rider.FieldContractual))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *RiderFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *RiderFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPerson applies a predicate to check if query has an edge person.
func (f *RiderFilter) WhereHasPerson() {
	f.Where(entql.HasEdge("person"))
}

// WhereHasPersonWith applies a predicate to check if query has an edge person with a given conditions (other predicates).
func (f *RiderFilter) WhereHasPersonWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("person", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *RiderFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *RiderFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContracts applies a predicate to check if query has an edge contracts.
func (f *RiderFilter) WhereHasContracts() {
	f.Where(entql.HasEdge("contracts"))
}

// WhereHasContractsWith applies a predicate to check if query has an edge contracts with a given conditions (other predicates).
func (f *RiderFilter) WhereHasContractsWith(preds ...predicate.Contract) {
	f.Where(entql.HasEdgeWith("contracts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFaults applies a predicate to check if query has an edge faults.
func (f *RiderFilter) WhereHasFaults() {
	f.Where(entql.HasEdge("faults"))
}

// WhereHasFaultsWith applies a predicate to check if query has an edge faults with a given conditions (other predicates).
func (f *RiderFilter) WhereHasFaultsWith(preds ...predicate.CabinetFault) {
	f.Where(entql.HasEdgeWith("faults", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *RiderFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *RiderFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExchanges applies a predicate to check if query has an edge exchanges.
func (f *RiderFilter) WhereHasExchanges() {
	f.Where(entql.HasEdge("exchanges"))
}

// WhereHasExchangesWith applies a predicate to check if query has an edge exchanges with a given conditions (other predicates).
func (f *RiderFilter) WhereHasExchangesWith(preds ...predicate.Exchange) {
	f.Where(entql.HasEdgeWith("exchanges", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribes applies a predicate to check if query has an edge subscribes.
func (f *RiderFilter) WhereHasSubscribes() {
	f.Where(entql.HasEdge("subscribes"))
}

// WhereHasSubscribesWith applies a predicate to check if query has an edge subscribes with a given conditions (other predicates).
func (f *RiderFilter) WhereHasSubscribesWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribes", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *RiderFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *RiderFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFollowups applies a predicate to check if query has an edge followups.
func (f *RiderFilter) WhereHasFollowups() {
	f.Where(entql.HasEdge("followups"))
}

// WhereHasFollowupsWith applies a predicate to check if query has an edge followups with a given conditions (other predicates).
func (f *RiderFilter) WhereHasFollowupsWith(preds ...predicate.RiderFollowUp) {
	f.Where(entql.HasEdgeWith("followups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rfuq *RiderFollowUpQuery) addPredicate(pred func(s *sql.Selector)) {
	rfuq.predicates = append(rfuq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiderFollowUpQuery builder.
func (rfuq *RiderFollowUpQuery) Filter() *RiderFollowUpFilter {
	return &RiderFollowUpFilter{rfuq.config, rfuq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiderFollowUpMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiderFollowUpMutation builder.
func (m *RiderFollowUpMutation) Filter() *RiderFollowUpFilter {
	return &RiderFollowUpFilter{m.config, m}
}

// RiderFollowUpFilter provides a generic filtering capability at runtime for RiderFollowUpQuery.
type RiderFollowUpFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *RiderFollowUpFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[28].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RiderFollowUpFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(riderfollowup.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiderFollowUpFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(riderfollowup.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiderFollowUpFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(riderfollowup.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiderFollowUpFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(riderfollowup.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *RiderFollowUpFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(riderfollowup.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *RiderFollowUpFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(riderfollowup.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RiderFollowUpFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(riderfollowup.FieldRemark))
}

// WhereManagerID applies the entql uint64 predicate on the manager_id field.
func (f *RiderFollowUpFilter) WhereManagerID(p entql.Uint64P) {
	f.Where(p.Field(riderfollowup.FieldManagerID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *RiderFollowUpFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(riderfollowup.FieldRiderID))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *RiderFollowUpFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *RiderFollowUpFilter) WhereHasManagerWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *RiderFollowUpFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *RiderFollowUpFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (rq *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{rq.config, rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{m.config, m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[29].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RoleFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(role.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WherePermissions applies the entql json.RawMessage predicate on the permissions field.
func (f *RoleFilter) WherePermissions(p entql.BytesP) {
	f.Where(p.Field(role.FieldPermissions))
}

// WhereBuildin applies the entql bool predicate on the buildin field.
func (f *RoleFilter) WhereBuildin(p entql.BoolP) {
	f.Where(p.Field(role.FieldBuildin))
}

// WhereSuper applies the entql bool predicate on the super field.
func (f *RoleFilter) WhereSuper(p entql.BoolP) {
	f.Where(p.Field(role.FieldSuper))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreatedAt))
}

// WhereHasManagers applies a predicate to check if query has an edge managers.
func (f *RoleFilter) WhereHasManagers() {
	f.Where(entql.HasEdge("managers"))
}

// WhereHasManagersWith applies a predicate to check if query has an edge managers with a given conditions (other predicates).
func (f *RoleFilter) WhereHasManagersWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("managers", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SettingQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SettingQuery builder.
func (sq *SettingQuery) Filter() *SettingFilter {
	return &SettingFilter{sq.config, sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SettingMutation builder.
func (m *SettingMutation) Filter() *SettingFilter {
	return &SettingFilter{m.config, m}
}

// SettingFilter provides a generic filtering capability at runtime for SettingQuery.
type SettingFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[30].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SettingFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(setting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldUpdatedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SettingFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(setting.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SettingFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(setting.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SettingFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(setting.FieldRemark))
}

// WhereKey applies the entql string predicate on the key field.
func (f *SettingFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(setting.FieldKey))
}

// WhereDesc applies the entql string predicate on the desc field.
func (f *SettingFilter) WhereDesc(p entql.StringP) {
	f.Where(p.Field(setting.FieldDesc))
}

// WhereContent applies the entql string predicate on the content field.
func (f *SettingFilter) WhereContent(p entql.StringP) {
	f.Where(p.Field(setting.FieldContent))
}

// addPredicate implements the predicateAdder interface.
func (sq *StockQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StockQuery builder.
func (sq *StockQuery) Filter() *StockFilter {
	return &StockFilter{sq.config, sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StockMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StockMutation builder.
func (m *StockMutation) Filter() *StockFilter {
	return &StockFilter{m.config, m}
}

// StockFilter provides a generic filtering capability at runtime for StockQuery.
type StockFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *StockFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[31].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *StockFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StockFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(stock.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StockFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(stock.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *StockFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(stock.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *StockFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(stock.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *StockFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(stock.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *StockFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(stock.FieldRemark))
}

// WhereManagerID applies the entql uint64 predicate on the manager_id field.
func (f *StockFilter) WhereManagerID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldManagerID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *StockFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(stock.FieldSn))
}

// WhereType applies the entql uint8 predicate on the type field.
func (f *StockFilter) WhereType(p entql.Uint8P) {
	f.Where(p.Field(stock.FieldType))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *StockFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldStoreID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *StockFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldRiderID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *StockFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(stock.FieldEmployeeID))
}

// WhereName applies the entql string predicate on the name field.
func (f *StockFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(stock.FieldName))
}

// WhereModel applies the entql string predicate on the model field.
func (f *StockFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(stock.FieldModel))
}

// WhereNum applies the entql int predicate on the num field.
func (f *StockFilter) WhereNum(p entql.IntP) {
	f.Where(p.Field(stock.FieldNum))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *StockFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *StockFilter) WhereHasManagerWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *StockFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *StockFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *StockFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *StockFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *StockFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *StockFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *StoreQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the StoreQuery builder.
func (sq *StoreQuery) Filter() *StoreFilter {
	return &StoreFilter{sq.config, sq}
}

// addPredicate implements the predicateAdder interface.
func (m *StoreMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the StoreMutation builder.
func (m *StoreMutation) Filter() *StoreFilter {
	return &StoreFilter{m.config, m}
}

// StoreFilter provides a generic filtering capability at runtime for StoreQuery.
type StoreFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *StoreFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[32].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *StoreFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *StoreFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *StoreFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *StoreFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(store.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *StoreFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(store.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *StoreFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(store.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *StoreFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(store.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *StoreFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldCityID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *StoreFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldEmployeeID))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *StoreFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(store.FieldBranchID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *StoreFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(store.FieldSn))
}

// WhereName applies the entql string predicate on the name field.
func (f *StoreFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(store.FieldName))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *StoreFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(store.FieldStatus))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *StoreFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(store.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *StoreFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(store.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *StoreFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(store.FieldAddress))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *StoreFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *StoreFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *StoreFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *StoreFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *StoreFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *StoreFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStocks applies a predicate to check if query has an edge stocks.
func (f *StoreFilter) WhereHasStocks() {
	f.Where(entql.HasEdge("stocks"))
}

// WhereHasStocksWith applies a predicate to check if query has an edge stocks with a given conditions (other predicates).
func (f *StoreFilter) WhereHasStocksWith(preds ...predicate.Stock) {
	f.Where(entql.HasEdgeWith("stocks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAttendances applies a predicate to check if query has an edge attendances.
func (f *StoreFilter) WhereHasAttendances() {
	f.Where(entql.HasEdge("attendances"))
}

// WhereHasAttendancesWith applies a predicate to check if query has an edge attendances with a given conditions (other predicates).
func (f *StoreFilter) WhereHasAttendancesWith(preds ...predicate.Attendance) {
	f.Where(entql.HasEdgeWith("attendances", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasExceptions applies a predicate to check if query has an edge exceptions.
func (f *StoreFilter) WhereHasExceptions() {
	f.Where(entql.HasEdge("exceptions"))
}

// WhereHasExceptionsWith applies a predicate to check if query has an edge exceptions with a given conditions (other predicates).
func (f *StoreFilter) WhereHasExceptionsWith(preds ...predicate.Exception) {
	f.Where(entql.HasEdgeWith("exceptions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SubscribeQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribeQuery builder.
func (sq *SubscribeQuery) Filter() *SubscribeFilter {
	return &SubscribeFilter{sq.config, sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribeMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribeMutation builder.
func (m *SubscribeMutation) Filter() *SubscribeFilter {
	return &SubscribeFilter{m.config, m}
}

// SubscribeFilter provides a generic filtering capability at runtime for SubscribeQuery.
type SubscribeFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SubscribeFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[33].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribeFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribeFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribeFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscribeFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribeFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribe.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribeFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribe.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribeFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribe.FieldRemark))
}

// WherePlanID applies the entql uint64 predicate on the plan_id field.
func (f *SubscribeFilter) WherePlanID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldPlanID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *SubscribeFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldEmployeeID))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *SubscribeFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldCityID))
}

// WhereStationID applies the entql uint64 predicate on the station_id field.
func (f *SubscribeFilter) WhereStationID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldStationID))
}

// WhereStoreID applies the entql uint64 predicate on the store_id field.
func (f *SubscribeFilter) WhereStoreID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldStoreID))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribeFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldRiderID))
}

// WhereInitialOrderID applies the entql uint64 predicate on the initial_order_id field.
func (f *SubscribeFilter) WhereInitialOrderID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldInitialOrderID))
}

// WhereEnterpriseID applies the entql uint64 predicate on the enterprise_id field.
func (f *SubscribeFilter) WhereEnterpriseID(p entql.Uint64P) {
	f.Where(p.Field(subscribe.FieldEnterpriseID))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *SubscribeFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(subscribe.FieldStatus))
}

// WhereType applies the entql uint predicate on the type field.
func (f *SubscribeFilter) WhereType(p entql.UintP) {
	f.Where(p.Field(subscribe.FieldType))
}

// WhereModel applies the entql string predicate on the model field.
func (f *SubscribeFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(subscribe.FieldModel))
}

// WhereInitialDays applies the entql int predicate on the initial_days field.
func (f *SubscribeFilter) WhereInitialDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldInitialDays))
}

// WhereAlterDays applies the entql int predicate on the alter_days field.
func (f *SubscribeFilter) WhereAlterDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldAlterDays))
}

// WherePauseDays applies the entql int predicate on the pause_days field.
func (f *SubscribeFilter) WherePauseDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldPauseDays))
}

// WhereRenewalDays applies the entql int predicate on the renewal_days field.
func (f *SubscribeFilter) WhereRenewalDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldRenewalDays))
}

// WhereOverdueDays applies the entql int predicate on the overdue_days field.
func (f *SubscribeFilter) WhereOverdueDays(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldOverdueDays))
}

// WhereRemaining applies the entql int predicate on the remaining field.
func (f *SubscribeFilter) WhereRemaining(p entql.IntP) {
	f.Where(p.Field(subscribe.FieldRemaining))
}

// WherePausedAt applies the entql time.Time predicate on the paused_at field.
func (f *SubscribeFilter) WherePausedAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldPausedAt))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *SubscribeFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *SubscribeFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldEndAt))
}

// WhereRefundAt applies the entql time.Time predicate on the refund_at field.
func (f *SubscribeFilter) WhereRefundAt(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldRefundAt))
}

// WhereUnsubscribeReason applies the entql string predicate on the unsubscribe_reason field.
func (f *SubscribeFilter) WhereUnsubscribeReason(p entql.StringP) {
	f.Where(p.Field(subscribe.FieldUnsubscribeReason))
}

// WhereLastBillDate applies the entql time.Time predicate on the last_bill_date field.
func (f *SubscribeFilter) WhereLastBillDate(p entql.TimeP) {
	f.Where(p.Field(subscribe.FieldLastBillDate))
}

// WhereHasPlan applies a predicate to check if query has an edge plan.
func (f *SubscribeFilter) WhereHasPlan() {
	f.Where(entql.HasEdge("plan"))
}

// WhereHasPlanWith applies a predicate to check if query has an edge plan with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasPlanWith(preds ...predicate.Plan) {
	f.Where(entql.HasEdgeWith("plan", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *SubscribeFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *SubscribeFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStation applies a predicate to check if query has an edge station.
func (f *SubscribeFilter) WhereHasStation() {
	f.Where(entql.HasEdge("station"))
}

// WhereHasStationWith applies a predicate to check if query has an edge station with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasStationWith(preds ...predicate.EnterpriseStation) {
	f.Where(entql.HasEdgeWith("station", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasStore applies a predicate to check if query has an edge store.
func (f *SubscribeFilter) WhereHasStore() {
	f.Where(entql.HasEdge("store"))
}

// WhereHasStoreWith applies a predicate to check if query has an edge store with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasStoreWith(preds ...predicate.Store) {
	f.Where(entql.HasEdgeWith("store", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribeFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEnterprise applies a predicate to check if query has an edge enterprise.
func (f *SubscribeFilter) WhereHasEnterprise() {
	f.Where(entql.HasEdge("enterprise"))
}

// WhereHasEnterpriseWith applies a predicate to check if query has an edge enterprise with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasEnterpriseWith(preds ...predicate.Enterprise) {
	f.Where(entql.HasEdgeWith("enterprise", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPauses applies a predicate to check if query has an edge pauses.
func (f *SubscribeFilter) WhereHasPauses() {
	f.Where(entql.HasEdge("pauses"))
}

// WhereHasPausesWith applies a predicate to check if query has an edge pauses with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasPausesWith(preds ...predicate.SubscribePause) {
	f.Where(entql.HasEdgeWith("pauses", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasAlters applies a predicate to check if query has an edge alters.
func (f *SubscribeFilter) WhereHasAlters() {
	f.Where(entql.HasEdge("alters"))
}

// WhereHasAltersWith applies a predicate to check if query has an edge alters with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasAltersWith(preds ...predicate.SubscribeAlter) {
	f.Where(entql.HasEdgeWith("alters", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrders applies a predicate to check if query has an edge orders.
func (f *SubscribeFilter) WhereHasOrders() {
	f.Where(entql.HasEdge("orders"))
}

// WhereHasOrdersWith applies a predicate to check if query has an edge orders with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasOrdersWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("orders", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInitialOrder applies a predicate to check if query has an edge initial_order.
func (f *SubscribeFilter) WhereHasInitialOrder() {
	f.Where(entql.HasEdge("initial_order"))
}

// WhereHasInitialOrderWith applies a predicate to check if query has an edge initial_order with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasInitialOrderWith(preds ...predicate.Order) {
	f.Where(entql.HasEdgeWith("initial_order", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBills applies a predicate to check if query has an edge bills.
func (f *SubscribeFilter) WhereHasBills() {
	f.Where(entql.HasEdge("bills"))
}

// WhereHasBillsWith applies a predicate to check if query has an edge bills with a given conditions (other predicates).
func (f *SubscribeFilter) WhereHasBillsWith(preds ...predicate.EnterpriseBill) {
	f.Where(entql.HasEdgeWith("bills", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (saq *SubscribeAlterQuery) addPredicate(pred func(s *sql.Selector)) {
	saq.predicates = append(saq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribeAlterQuery builder.
func (saq *SubscribeAlterQuery) Filter() *SubscribeAlterFilter {
	return &SubscribeAlterFilter{saq.config, saq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribeAlterMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribeAlterMutation builder.
func (m *SubscribeAlterMutation) Filter() *SubscribeAlterFilter {
	return &SubscribeAlterFilter{m.config, m}
}

// SubscribeAlterFilter provides a generic filtering capability at runtime for SubscribeAlterQuery.
type SubscribeAlterFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SubscribeAlterFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[34].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribeAlterFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribeAlterFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribeAlterFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscribeAlterFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscribealter.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribeAlterFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribealter.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribeAlterFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribealter.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribeAlterFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribealter.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribeAlterFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldRiderID))
}

// WhereManagerID applies the entql uint64 predicate on the manager_id field.
func (f *SubscribeAlterFilter) WhereManagerID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldManagerID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *SubscribeAlterFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(subscribealter.FieldSubscribeID))
}

// WhereDays applies the entql int predicate on the days field.
func (f *SubscribeAlterFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(subscribealter.FieldDays))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribeAlterFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasManager applies a predicate to check if query has an edge manager.
func (f *SubscribeAlterFilter) WhereHasManager() {
	f.Where(entql.HasEdge("manager"))
}

// WhereHasManagerWith applies a predicate to check if query has an edge manager with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasManagerWith(preds ...predicate.Manager) {
	f.Where(entql.HasEdgeWith("manager", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *SubscribeAlterFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *SubscribeAlterFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (spq *SubscribePauseQuery) addPredicate(pred func(s *sql.Selector)) {
	spq.predicates = append(spq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscribePauseQuery builder.
func (spq *SubscribePauseQuery) Filter() *SubscribePauseFilter {
	return &SubscribePauseFilter{spq.config, spq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscribePauseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscribePauseMutation builder.
func (m *SubscribePauseMutation) Filter() *SubscribePauseFilter {
	return &SubscribePauseFilter{m.config, m}
}

// SubscribePauseFilter provides a generic filtering capability at runtime for SubscribePauseQuery.
type SubscribePauseFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SubscribePauseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[35].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SubscribePauseFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SubscribePauseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SubscribePauseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *SubscribePauseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *SubscribePauseFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(subscribepause.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *SubscribePauseFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(subscribepause.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *SubscribePauseFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(subscribepause.FieldRemark))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *SubscribePauseFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldRiderID))
}

// WhereEmployeeID applies the entql uint64 predicate on the employee_id field.
func (f *SubscribePauseFilter) WhereEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldEmployeeID))
}

// WhereSubscribeID applies the entql uint64 predicate on the subscribe_id field.
func (f *SubscribePauseFilter) WhereSubscribeID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldSubscribeID))
}

// WhereStartAt applies the entql time.Time predicate on the start_at field.
func (f *SubscribePauseFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldStartAt))
}

// WhereEndAt applies the entql time.Time predicate on the end_at field.
func (f *SubscribePauseFilter) WhereEndAt(p entql.TimeP) {
	f.Where(p.Field(subscribepause.FieldEndAt))
}

// WhereDays applies the entql int predicate on the days field.
func (f *SubscribePauseFilter) WhereDays(p entql.IntP) {
	f.Where(p.Field(subscribepause.FieldDays))
}

// WhereContinueEmployeeID applies the entql uint64 predicate on the continue_employee_id field.
func (f *SubscribePauseFilter) WhereContinueEmployeeID(p entql.Uint64P) {
	f.Where(p.Field(subscribepause.FieldContinueEmployeeID))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *SubscribePauseFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmployee applies a predicate to check if query has an edge employee.
func (f *SubscribePauseFilter) WhereHasEmployee() {
	f.Where(entql.HasEdge("employee"))
}

// WhereHasEmployeeWith applies a predicate to check if query has an edge employee with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscribe applies a predicate to check if query has an edge subscribe.
func (f *SubscribePauseFilter) WhereHasSubscribe() {
	f.Where(entql.HasEdge("subscribe"))
}

// WhereHasSubscribeWith applies a predicate to check if query has an edge subscribe with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasSubscribeWith(preds ...predicate.Subscribe) {
	f.Where(entql.HasEdgeWith("subscribe", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContinueEmployee applies a predicate to check if query has an edge continue_employee.
func (f *SubscribePauseFilter) WhereHasContinueEmployee() {
	f.Where(entql.HasEdge("continue_employee"))
}

// WhereHasContinueEmployeeWith applies a predicate to check if query has an edge continue_employee with a given conditions (other predicates).
func (f *SubscribePauseFilter) WhereHasContinueEmployeeWith(preds ...predicate.Employee) {
	f.Where(entql.HasEdgeWith("continue_employee", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
