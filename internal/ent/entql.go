// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/setting"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 10)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   batterymodel.Table,
			Columns: batterymodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batterymodel.FieldID,
			},
		},
		Type: "BatteryModel",
		Fields: map[string]*sqlgraph.FieldSpec{
			batterymodel.FieldCreatedAt:    {Type: field.TypeTime, Column: batterymodel.FieldCreatedAt},
			batterymodel.FieldUpdatedAt:    {Type: field.TypeTime, Column: batterymodel.FieldUpdatedAt},
			batterymodel.FieldDeletedAt:    {Type: field.TypeTime, Column: batterymodel.FieldDeletedAt},
			batterymodel.FieldCreator:      {Type: field.TypeJSON, Column: batterymodel.FieldCreator},
			batterymodel.FieldLastModifier: {Type: field.TypeJSON, Column: batterymodel.FieldLastModifier},
			batterymodel.FieldRemark:       {Type: field.TypeString, Column: batterymodel.FieldRemark},
			batterymodel.FieldVoltage:      {Type: field.TypeString, Column: batterymodel.FieldVoltage},
			batterymodel.FieldCapacity:     {Type: field.TypeString, Column: batterymodel.FieldCapacity},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   branch.Table,
			Columns: branch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branch.FieldID,
			},
		},
		Type: "Branch",
		Fields: map[string]*sqlgraph.FieldSpec{
			branch.FieldCreatedAt:    {Type: field.TypeTime, Column: branch.FieldCreatedAt},
			branch.FieldUpdatedAt:    {Type: field.TypeTime, Column: branch.FieldUpdatedAt},
			branch.FieldDeletedAt:    {Type: field.TypeTime, Column: branch.FieldDeletedAt},
			branch.FieldCreator:      {Type: field.TypeJSON, Column: branch.FieldCreator},
			branch.FieldLastModifier: {Type: field.TypeJSON, Column: branch.FieldLastModifier},
			branch.FieldRemark:       {Type: field.TypeString, Column: branch.FieldRemark},
			branch.FieldCityID:       {Type: field.TypeUint64, Column: branch.FieldCityID},
			branch.FieldName:         {Type: field.TypeString, Column: branch.FieldName},
			branch.FieldLng:          {Type: field.TypeFloat64, Column: branch.FieldLng},
			branch.FieldLat:          {Type: field.TypeFloat64, Column: branch.FieldLat},
			branch.FieldAddress:      {Type: field.TypeString, Column: branch.FieldAddress},
			branch.FieldPhotos:       {Type: field.TypeJSON, Column: branch.FieldPhotos},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   branchcontract.Table,
			Columns: branchcontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branchcontract.FieldID,
			},
		},
		Type: "BranchContract",
		Fields: map[string]*sqlgraph.FieldSpec{
			branchcontract.FieldCreatedAt:         {Type: field.TypeTime, Column: branchcontract.FieldCreatedAt},
			branchcontract.FieldUpdatedAt:         {Type: field.TypeTime, Column: branchcontract.FieldUpdatedAt},
			branchcontract.FieldDeletedAt:         {Type: field.TypeTime, Column: branchcontract.FieldDeletedAt},
			branchcontract.FieldCreator:           {Type: field.TypeJSON, Column: branchcontract.FieldCreator},
			branchcontract.FieldLastModifier:      {Type: field.TypeJSON, Column: branchcontract.FieldLastModifier},
			branchcontract.FieldRemark:            {Type: field.TypeString, Column: branchcontract.FieldRemark},
			branchcontract.FieldBranchID:          {Type: field.TypeUint64, Column: branchcontract.FieldBranchID},
			branchcontract.FieldLandlordName:      {Type: field.TypeString, Column: branchcontract.FieldLandlordName},
			branchcontract.FieldIDCardNumber:      {Type: field.TypeString, Column: branchcontract.FieldIDCardNumber},
			branchcontract.FieldPhone:             {Type: field.TypeString, Column: branchcontract.FieldPhone},
			branchcontract.FieldBankNumber:        {Type: field.TypeString, Column: branchcontract.FieldBankNumber},
			branchcontract.FieldPledge:            {Type: field.TypeFloat64, Column: branchcontract.FieldPledge},
			branchcontract.FieldRent:              {Type: field.TypeFloat64, Column: branchcontract.FieldRent},
			branchcontract.FieldLease:             {Type: field.TypeUint, Column: branchcontract.FieldLease},
			branchcontract.FieldElectricityPledge: {Type: field.TypeFloat64, Column: branchcontract.FieldElectricityPledge},
			branchcontract.FieldElectricity:       {Type: field.TypeFloat64, Column: branchcontract.FieldElectricity},
			branchcontract.FieldArea:              {Type: field.TypeFloat64, Column: branchcontract.FieldArea},
			branchcontract.FieldStartTime:         {Type: field.TypeString, Column: branchcontract.FieldStartTime},
			branchcontract.FieldEndTime:           {Type: field.TypeString, Column: branchcontract.FieldEndTime},
			branchcontract.FieldFile:              {Type: field.TypeString, Column: branchcontract.FieldFile},
			branchcontract.FieldSheets:            {Type: field.TypeJSON, Column: branchcontract.FieldSheets},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinet.Table,
			Columns: cabinet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinet.FieldID,
			},
		},
		Type: "Cabinet",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinet.FieldCreatedAt:    {Type: field.TypeTime, Column: cabinet.FieldCreatedAt},
			cabinet.FieldUpdatedAt:    {Type: field.TypeTime, Column: cabinet.FieldUpdatedAt},
			cabinet.FieldDeletedAt:    {Type: field.TypeTime, Column: cabinet.FieldDeletedAt},
			cabinet.FieldCreator:      {Type: field.TypeJSON, Column: cabinet.FieldCreator},
			cabinet.FieldLastModifier: {Type: field.TypeJSON, Column: cabinet.FieldLastModifier},
			cabinet.FieldRemark:       {Type: field.TypeString, Column: cabinet.FieldRemark},
			cabinet.FieldBranchID:     {Type: field.TypeUint64, Column: cabinet.FieldBranchID},
			cabinet.FieldSn:           {Type: field.TypeString, Column: cabinet.FieldSn},
			cabinet.FieldBrand:        {Type: field.TypeString, Column: cabinet.FieldBrand},
			cabinet.FieldSerial:       {Type: field.TypeString, Column: cabinet.FieldSerial},
			cabinet.FieldName:         {Type: field.TypeString, Column: cabinet.FieldName},
			cabinet.FieldDoors:        {Type: field.TypeUint, Column: cabinet.FieldDoors},
			cabinet.FieldStatus:       {Type: field.TypeUint, Column: cabinet.FieldStatus},
			cabinet.FieldModels:       {Type: field.TypeJSON, Column: cabinet.FieldModels},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   city.Table,
			Columns: city.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: city.FieldID,
			},
		},
		Type: "City",
		Fields: map[string]*sqlgraph.FieldSpec{
			city.FieldCreatedAt:    {Type: field.TypeTime, Column: city.FieldCreatedAt},
			city.FieldUpdatedAt:    {Type: field.TypeTime, Column: city.FieldUpdatedAt},
			city.FieldDeletedAt:    {Type: field.TypeTime, Column: city.FieldDeletedAt},
			city.FieldLastModifier: {Type: field.TypeJSON, Column: city.FieldLastModifier},
			city.FieldRemark:       {Type: field.TypeString, Column: city.FieldRemark},
			city.FieldOpen:         {Type: field.TypeBool, Column: city.FieldOpen},
			city.FieldName:         {Type: field.TypeString, Column: city.FieldName},
			city.FieldCode:         {Type: field.TypeString, Column: city.FieldCode},
			city.FieldParentID:     {Type: field.TypeUint64, Column: city.FieldParentID},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: contract.FieldID,
			},
		},
		Type: "Contract",
		Fields: map[string]*sqlgraph.FieldSpec{
			contract.FieldCreatedAt:    {Type: field.TypeTime, Column: contract.FieldCreatedAt},
			contract.FieldUpdatedAt:    {Type: field.TypeTime, Column: contract.FieldUpdatedAt},
			contract.FieldDeletedAt:    {Type: field.TypeTime, Column: contract.FieldDeletedAt},
			contract.FieldLastModifier: {Type: field.TypeJSON, Column: contract.FieldLastModifier},
			contract.FieldRemark:       {Type: field.TypeString, Column: contract.FieldRemark},
			contract.FieldStatus:       {Type: field.TypeUint8, Column: contract.FieldStatus},
			contract.FieldRiderID:      {Type: field.TypeUint64, Column: contract.FieldRiderID},
			contract.FieldFlowID:       {Type: field.TypeString, Column: contract.FieldFlowID},
			contract.FieldSn:           {Type: field.TypeString, Column: contract.FieldSn},
			contract.FieldFiles:        {Type: field.TypeJSON, Column: contract.FieldFiles},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   manager.Table,
			Columns: manager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: manager.FieldID,
			},
		},
		Type: "Manager",
		Fields: map[string]*sqlgraph.FieldSpec{
			manager.FieldCreatedAt:    {Type: field.TypeTime, Column: manager.FieldCreatedAt},
			manager.FieldUpdatedAt:    {Type: field.TypeTime, Column: manager.FieldUpdatedAt},
			manager.FieldDeletedAt:    {Type: field.TypeTime, Column: manager.FieldDeletedAt},
			manager.FieldLastModifier: {Type: field.TypeJSON, Column: manager.FieldLastModifier},
			manager.FieldRemark:       {Type: field.TypeString, Column: manager.FieldRemark},
			manager.FieldPhone:        {Type: field.TypeString, Column: manager.FieldPhone},
			manager.FieldName:         {Type: field.TypeString, Column: manager.FieldName},
			manager.FieldPassword:     {Type: field.TypeString, Column: manager.FieldPassword},
			manager.FieldLastSigninAt: {Type: field.TypeTime, Column: manager.FieldLastSigninAt},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
		Type: "Person",
		Fields: map[string]*sqlgraph.FieldSpec{
			person.FieldCreatedAt:      {Type: field.TypeTime, Column: person.FieldCreatedAt},
			person.FieldUpdatedAt:      {Type: field.TypeTime, Column: person.FieldUpdatedAt},
			person.FieldDeletedAt:      {Type: field.TypeTime, Column: person.FieldDeletedAt},
			person.FieldLastModifier:   {Type: field.TypeJSON, Column: person.FieldLastModifier},
			person.FieldRemark:         {Type: field.TypeString, Column: person.FieldRemark},
			person.FieldStatus:         {Type: field.TypeUint8, Column: person.FieldStatus},
			person.FieldBlock:          {Type: field.TypeBool, Column: person.FieldBlock},
			person.FieldName:           {Type: field.TypeString, Column: person.FieldName},
			person.FieldIDCardNumber:   {Type: field.TypeString, Column: person.FieldIDCardNumber},
			person.FieldIDCardType:     {Type: field.TypeUint8, Column: person.FieldIDCardType},
			person.FieldIDCardPortrait: {Type: field.TypeString, Column: person.FieldIDCardPortrait},
			person.FieldIDCardNational: {Type: field.TypeString, Column: person.FieldIDCardNational},
			person.FieldAuthFace:       {Type: field.TypeString, Column: person.FieldAuthFace},
			person.FieldAuthResult:     {Type: field.TypeJSON, Column: person.FieldAuthResult},
			person.FieldAuthAt:         {Type: field.TypeTime, Column: person.FieldAuthAt},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
		Type: "Rider",
		Fields: map[string]*sqlgraph.FieldSpec{
			rider.FieldCreatedAt:      {Type: field.TypeTime, Column: rider.FieldCreatedAt},
			rider.FieldUpdatedAt:      {Type: field.TypeTime, Column: rider.FieldUpdatedAt},
			rider.FieldDeletedAt:      {Type: field.TypeTime, Column: rider.FieldDeletedAt},
			rider.FieldLastModifier:   {Type: field.TypeJSON, Column: rider.FieldLastModifier},
			rider.FieldRemark:         {Type: field.TypeString, Column: rider.FieldRemark},
			rider.FieldPersonID:       {Type: field.TypeUint64, Column: rider.FieldPersonID},
			rider.FieldGroupID:        {Type: field.TypeUint64, Column: rider.FieldGroupID},
			rider.FieldPhone:          {Type: field.TypeString, Column: rider.FieldPhone},
			rider.FieldContact:        {Type: field.TypeJSON, Column: rider.FieldContact},
			rider.FieldDeviceType:     {Type: field.TypeUint8, Column: rider.FieldDeviceType},
			rider.FieldLastDevice:     {Type: field.TypeString, Column: rider.FieldLastDevice},
			rider.FieldIsNewDevice:    {Type: field.TypeBool, Column: rider.FieldIsNewDevice},
			rider.FieldLastFace:       {Type: field.TypeString, Column: rider.FieldLastFace},
			rider.FieldPushID:         {Type: field.TypeString, Column: rider.FieldPushID},
			rider.FieldLastSigninAt:   {Type: field.TypeTime, Column: rider.FieldLastSigninAt},
			rider.FieldEsignAccountID: {Type: field.TypeString, Column: rider.FieldEsignAccountID},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   setting.Table,
			Columns: setting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: setting.FieldID,
			},
		},
		Type: "Setting",
		Fields: map[string]*sqlgraph.FieldSpec{
			setting.FieldCreatedAt: {Type: field.TypeTime, Column: setting.FieldCreatedAt},
			setting.FieldUpdatedAt: {Type: field.TypeTime, Column: setting.FieldUpdatedAt},
			setting.FieldKey:       {Type: field.TypeString, Column: setting.FieldKey},
			setting.FieldVal:       {Type: field.TypeJSON, Column: setting.FieldVal},
		},
	}
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
		},
		"BatteryModel",
		"Cabinet",
	)
	graph.MustAddE(
		"contracts",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
		},
		"Branch",
		"BranchContract",
	)
	graph.MustAddE(
		"cabinets",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
		},
		"Branch",
		"Cabinet",
	)
	graph.MustAddE(
		"city",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.CityTable,
			Columns: []string{branch.CityColumn},
			Bidi:    false,
		},
		"Branch",
		"City",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
		},
		"BranchContract",
		"Branch",
	)
	graph.MustAddE(
		"branch",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Branch",
	)
	graph.MustAddE(
		"bms",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.BmsTable,
			Columns: cabinet.BmsPrimaryKey,
			Bidi:    false,
		},
		"Cabinet",
		"BatteryModel",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ParentTable,
			Columns: []string{city.ParentColumn},
			Bidi:    false,
		},
		"City",
		"City",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ChildrenTable,
			Columns: []string{city.ChildrenColumn},
			Bidi:    false,
		},
		"City",
		"City",
	)
	graph.MustAddE(
		"branches",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.BranchesTable,
			Columns: []string{city.BranchesColumn},
			Bidi:    false,
		},
		"City",
		"Branch",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
		},
		"Contract",
		"Rider",
	)
	graph.MustAddE(
		"rider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
		},
		"Person",
		"Rider",
	)
	graph.MustAddE(
		"person",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
		},
		"Rider",
		"Person",
	)
	graph.MustAddE(
		"contract",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractTable,
			Columns: []string{rider.ContractColumn},
			Bidi:    false,
		},
		"Rider",
		"Contract",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (bmq *BatteryModelQuery) addPredicate(pred func(s *sql.Selector)) {
	bmq.predicates = append(bmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BatteryModelQuery builder.
func (bmq *BatteryModelQuery) Filter() *BatteryModelFilter {
	return &BatteryModelFilter{bmq.config, bmq}
}

// addPredicate implements the predicateAdder interface.
func (m *BatteryModelMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BatteryModelMutation builder.
func (m *BatteryModelMutation) Filter() *BatteryModelFilter {
	return &BatteryModelFilter{m.config, m}
}

// BatteryModelFilter provides a generic filtering capability at runtime for BatteryModelQuery.
type BatteryModelFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BatteryModelFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BatteryModelFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(batterymodel.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BatteryModelFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BatteryModelFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BatteryModelFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(batterymodel.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BatteryModelFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(batterymodel.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BatteryModelFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(batterymodel.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BatteryModelFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(batterymodel.FieldRemark))
}

// WhereVoltage applies the entql string predicate on the voltage field.
func (f *BatteryModelFilter) WhereVoltage(p entql.StringP) {
	f.Where(p.Field(batterymodel.FieldVoltage))
}

// WhereCapacity applies the entql string predicate on the capacity field.
func (f *BatteryModelFilter) WhereCapacity(p entql.StringP) {
	f.Where(p.Field(batterymodel.FieldCapacity))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *BatteryModelFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *BatteryModelFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bq *BranchQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BranchQuery builder.
func (bq *BranchQuery) Filter() *BranchFilter {
	return &BranchFilter{bq.config, bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BranchMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BranchMutation builder.
func (m *BranchMutation) Filter() *BranchFilter {
	return &BranchFilter{m.config, m}
}

// BranchFilter provides a generic filtering capability at runtime for BranchQuery.
type BranchFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BranchFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BranchFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(branch.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BranchFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BranchFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BranchFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(branch.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BranchFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(branch.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BranchFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(branch.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BranchFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(branch.FieldRemark))
}

// WhereCityID applies the entql uint64 predicate on the city_id field.
func (f *BranchFilter) WhereCityID(p entql.Uint64P) {
	f.Where(p.Field(branch.FieldCityID))
}

// WhereName applies the entql string predicate on the name field.
func (f *BranchFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(branch.FieldName))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *BranchFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(branch.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *BranchFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(branch.FieldLat))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *BranchFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(branch.FieldAddress))
}

// WherePhotos applies the entql json.RawMessage predicate on the photos field.
func (f *BranchFilter) WherePhotos(p entql.BytesP) {
	f.Where(p.Field(branch.FieldPhotos))
}

// WhereHasContracts applies a predicate to check if query has an edge contracts.
func (f *BranchFilter) WhereHasContracts() {
	f.Where(entql.HasEdge("contracts"))
}

// WhereHasContractsWith applies a predicate to check if query has an edge contracts with a given conditions (other predicates).
func (f *BranchFilter) WhereHasContractsWith(preds ...predicate.BranchContract) {
	f.Where(entql.HasEdgeWith("contracts", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCabinets applies a predicate to check if query has an edge cabinets.
func (f *BranchFilter) WhereHasCabinets() {
	f.Where(entql.HasEdge("cabinets"))
}

// WhereHasCabinetsWith applies a predicate to check if query has an edge cabinets with a given conditions (other predicates).
func (f *BranchFilter) WhereHasCabinetsWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinets", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCity applies a predicate to check if query has an edge city.
func (f *BranchFilter) WhereHasCity() {
	f.Where(entql.HasEdge("city"))
}

// WhereHasCityWith applies a predicate to check if query has an edge city with a given conditions (other predicates).
func (f *BranchFilter) WhereHasCityWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("city", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (bcq *BranchContractQuery) addPredicate(pred func(s *sql.Selector)) {
	bcq.predicates = append(bcq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BranchContractQuery builder.
func (bcq *BranchContractQuery) Filter() *BranchContractFilter {
	return &BranchContractFilter{bcq.config, bcq}
}

// addPredicate implements the predicateAdder interface.
func (m *BranchContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BranchContractMutation builder.
func (m *BranchContractMutation) Filter() *BranchContractFilter {
	return &BranchContractFilter{m.config, m}
}

// BranchContractFilter provides a generic filtering capability at runtime for BranchContractQuery.
type BranchContractFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *BranchContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BranchContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(branchcontract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BranchContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BranchContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *BranchContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(branchcontract.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *BranchContractFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *BranchContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BranchContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldRemark))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *BranchContractFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(branchcontract.FieldBranchID))
}

// WhereLandlordName applies the entql string predicate on the landlord_name field.
func (f *BranchContractFilter) WhereLandlordName(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldLandlordName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *BranchContractFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldIDCardNumber))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *BranchContractFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldPhone))
}

// WhereBankNumber applies the entql string predicate on the bank_number field.
func (f *BranchContractFilter) WhereBankNumber(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldBankNumber))
}

// WherePledge applies the entql float64 predicate on the pledge field.
func (f *BranchContractFilter) WherePledge(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldPledge))
}

// WhereRent applies the entql float64 predicate on the rent field.
func (f *BranchContractFilter) WhereRent(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldRent))
}

// WhereLease applies the entql uint predicate on the lease field.
func (f *BranchContractFilter) WhereLease(p entql.UintP) {
	f.Where(p.Field(branchcontract.FieldLease))
}

// WhereElectricityPledge applies the entql float64 predicate on the electricity_pledge field.
func (f *BranchContractFilter) WhereElectricityPledge(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldElectricityPledge))
}

// WhereElectricity applies the entql float64 predicate on the electricity field.
func (f *BranchContractFilter) WhereElectricity(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldElectricity))
}

// WhereArea applies the entql float64 predicate on the area field.
func (f *BranchContractFilter) WhereArea(p entql.Float64P) {
	f.Where(p.Field(branchcontract.FieldArea))
}

// WhereStartTime applies the entql string predicate on the start_time field.
func (f *BranchContractFilter) WhereStartTime(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldStartTime))
}

// WhereEndTime applies the entql string predicate on the end_time field.
func (f *BranchContractFilter) WhereEndTime(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldEndTime))
}

// WhereFile applies the entql string predicate on the file field.
func (f *BranchContractFilter) WhereFile(p entql.StringP) {
	f.Where(p.Field(branchcontract.FieldFile))
}

// WhereSheets applies the entql json.RawMessage predicate on the sheets field.
func (f *BranchContractFilter) WhereSheets(p entql.BytesP) {
	f.Where(p.Field(branchcontract.FieldSheets))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *BranchContractFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *BranchContractFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CabinetQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetQuery builder.
func (cq *CabinetQuery) Filter() *CabinetFilter {
	return &CabinetFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetMutation builder.
func (m *CabinetMutation) Filter() *CabinetFilter {
	return &CabinetFilter{m.config, m}
}

// CabinetFilter provides a generic filtering capability at runtime for CabinetQuery.
type CabinetFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CabinetFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CabinetFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldDeletedAt))
}

// WhereCreator applies the entql json.RawMessage predicate on the creator field.
func (f *CabinetFilter) WhereCreator(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldCreator))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CabinetFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CabinetFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldRemark))
}

// WhereBranchID applies the entql uint64 predicate on the branch_id field.
func (f *CabinetFilter) WhereBranchID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldBranchID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *CabinetFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSn))
}

// WhereBrand applies the entql string predicate on the brand field.
func (f *CabinetFilter) WhereBrand(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldBrand))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *CabinetFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSerial))
}

// WhereName applies the entql string predicate on the name field.
func (f *CabinetFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldName))
}

// WhereDoors applies the entql uint predicate on the doors field.
func (f *CabinetFilter) WhereDoors(p entql.UintP) {
	f.Where(p.Field(cabinet.FieldDoors))
}

// WhereStatus applies the entql uint predicate on the status field.
func (f *CabinetFilter) WhereStatus(p entql.UintP) {
	f.Where(p.Field(cabinet.FieldStatus))
}

// WhereModels applies the entql json.RawMessage predicate on the models field.
func (f *CabinetFilter) WhereModels(p entql.BytesP) {
	f.Where(p.Field(cabinet.FieldModels))
}

// WhereHasBranch applies a predicate to check if query has an edge branch.
func (f *CabinetFilter) WhereHasBranch() {
	f.Where(entql.HasEdge("branch"))
}

// WhereHasBranchWith applies a predicate to check if query has an edge branch with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBranchWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branch", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBms applies a predicate to check if query has an edge bms.
func (f *CabinetFilter) WhereHasBms() {
	f.Where(entql.HasEdge("bms"))
}

// WhereHasBmsWith applies a predicate to check if query has an edge bms with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBmsWith(preds ...predicate.BatteryModel) {
	f.Where(entql.HasEdgeWith("bms", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CityQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CityQuery builder.
func (cq *CityQuery) Filter() *CityFilter {
	return &CityFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CityMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CityMutation builder.
func (m *CityMutation) Filter() *CityFilter {
	return &CityFilter{m.config, m}
}

// CityFilter provides a generic filtering capability at runtime for CityQuery.
type CityFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CityFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CityFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(city.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CityFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CityFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *CityFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(city.FieldDeletedAt))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *CityFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(city.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CityFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(city.FieldRemark))
}

// WhereOpen applies the entql bool predicate on the open field.
func (f *CityFilter) WhereOpen(p entql.BoolP) {
	f.Where(p.Field(city.FieldOpen))
}

// WhereName applies the entql string predicate on the name field.
func (f *CityFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(city.FieldName))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CityFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(city.FieldCode))
}

// WhereParentID applies the entql uint64 predicate on the parent_id field.
func (f *CityFilter) WhereParentID(p entql.Uint64P) {
	f.Where(p.Field(city.FieldParentID))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *CityFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *CityFilter) WhereHasParentWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *CityFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *CityFilter) WhereHasChildrenWith(preds ...predicate.City) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBranches applies a predicate to check if query has an edge branches.
func (f *CityFilter) WhereHasBranches() {
	f.Where(entql.HasEdge("branches"))
}

// WhereHasBranchesWith applies a predicate to check if query has an edge branches with a given conditions (other predicates).
func (f *CityFilter) WhereHasBranchesWith(preds ...predicate.Branch) {
	f.Where(entql.HasEdgeWith("branches", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContractQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContractQuery builder.
func (cq *ContractQuery) Filter() *ContractFilter {
	return &ContractFilter{cq.config, cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContractMutation builder.
func (m *ContractMutation) Filter() *ContractFilter {
	return &ContractFilter{m.config, m}
}

// ContractFilter provides a generic filtering capability at runtime for ContractQuery.
type ContractFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ContractFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ContractFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ContractFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ContractFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(contract.FieldDeletedAt))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ContractFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(contract.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(contract.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *ContractFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(contract.FieldStatus))
}

// WhereRiderID applies the entql uint64 predicate on the rider_id field.
func (f *ContractFilter) WhereRiderID(p entql.Uint64P) {
	f.Where(p.Field(contract.FieldRiderID))
}

// WhereFlowID applies the entql string predicate on the flow_id field.
func (f *ContractFilter) WhereFlowID(p entql.StringP) {
	f.Where(p.Field(contract.FieldFlowID))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *ContractFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(contract.FieldSn))
}

// WhereFiles applies the entql json.RawMessage predicate on the files field.
func (f *ContractFilter) WhereFiles(p entql.BytesP) {
	f.Where(p.Field(contract.FieldFiles))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *ContractFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *ContractFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *ManagerQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ManagerQuery builder.
func (mq *ManagerQuery) Filter() *ManagerFilter {
	return &ManagerFilter{mq.config, mq}
}

// addPredicate implements the predicateAdder interface.
func (m *ManagerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ManagerMutation builder.
func (m *ManagerMutation) Filter() *ManagerFilter {
	return &ManagerFilter{m.config, m}
}

// ManagerFilter provides a generic filtering capability at runtime for ManagerQuery.
type ManagerFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *ManagerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ManagerFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(manager.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ManagerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ManagerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *ManagerFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldDeletedAt))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *ManagerFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(manager.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ManagerFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(manager.FieldRemark))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *ManagerFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(manager.FieldPhone))
}

// WhereName applies the entql string predicate on the name field.
func (f *ManagerFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(manager.FieldName))
}

// WherePassword applies the entql string predicate on the password field.
func (f *ManagerFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(manager.FieldPassword))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *ManagerFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(manager.FieldLastSigninAt))
}

// addPredicate implements the predicateAdder interface.
func (pq *PersonQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonQuery builder.
func (pq *PersonQuery) Filter() *PersonFilter {
	return &PersonFilter{pq.config, pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonMutation builder.
func (m *PersonMutation) Filter() *PersonFilter {
	return &PersonFilter{m.config, m}
}

// PersonFilter provides a generic filtering capability at runtime for PersonQuery.
type PersonFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *PersonFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *PersonFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(person.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PersonFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldDeletedAt))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *PersonFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(person.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *PersonFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(person.FieldRemark))
}

// WhereStatus applies the entql uint8 predicate on the status field.
func (f *PersonFilter) WhereStatus(p entql.Uint8P) {
	f.Where(p.Field(person.FieldStatus))
}

// WhereBlock applies the entql bool predicate on the block field.
func (f *PersonFilter) WhereBlock(p entql.BoolP) {
	f.Where(p.Field(person.FieldBlock))
}

// WhereName applies the entql string predicate on the name field.
func (f *PersonFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(person.FieldName))
}

// WhereIDCardNumber applies the entql string predicate on the id_card_number field.
func (f *PersonFilter) WhereIDCardNumber(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNumber))
}

// WhereIDCardType applies the entql uint8 predicate on the id_card_type field.
func (f *PersonFilter) WhereIDCardType(p entql.Uint8P) {
	f.Where(p.Field(person.FieldIDCardType))
}

// WhereIDCardPortrait applies the entql string predicate on the id_card_portrait field.
func (f *PersonFilter) WhereIDCardPortrait(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardPortrait))
}

// WhereIDCardNational applies the entql string predicate on the id_card_national field.
func (f *PersonFilter) WhereIDCardNational(p entql.StringP) {
	f.Where(p.Field(person.FieldIDCardNational))
}

// WhereAuthFace applies the entql string predicate on the auth_face field.
func (f *PersonFilter) WhereAuthFace(p entql.StringP) {
	f.Where(p.Field(person.FieldAuthFace))
}

// WhereAuthResult applies the entql json.RawMessage predicate on the auth_result field.
func (f *PersonFilter) WhereAuthResult(p entql.BytesP) {
	f.Where(p.Field(person.FieldAuthResult))
}

// WhereAuthAt applies the entql time.Time predicate on the auth_at field.
func (f *PersonFilter) WhereAuthAt(p entql.TimeP) {
	f.Where(p.Field(person.FieldAuthAt))
}

// WhereHasRider applies a predicate to check if query has an edge rider.
func (f *PersonFilter) WhereHasRider() {
	f.Where(entql.HasEdge("rider"))
}

// WhereHasRiderWith applies a predicate to check if query has an edge rider with a given conditions (other predicates).
func (f *PersonFilter) WhereHasRiderWith(preds ...predicate.Rider) {
	f.Where(entql.HasEdgeWith("rider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RiderQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RiderQuery builder.
func (rq *RiderQuery) Filter() *RiderFilter {
	return &RiderFilter{rq.config, rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RiderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RiderMutation builder.
func (m *RiderMutation) Filter() *RiderFilter {
	return &RiderFilter{m.config, m}
}

// RiderFilter provides a generic filtering capability at runtime for RiderQuery.
type RiderFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *RiderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *RiderFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RiderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RiderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *RiderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldDeletedAt))
}

// WhereLastModifier applies the entql json.RawMessage predicate on the last_modifier field.
func (f *RiderFilter) WhereLastModifier(p entql.BytesP) {
	f.Where(p.Field(rider.FieldLastModifier))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RiderFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(rider.FieldRemark))
}

// WherePersonID applies the entql uint64 predicate on the person_id field.
func (f *RiderFilter) WherePersonID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldPersonID))
}

// WhereGroupID applies the entql uint64 predicate on the group_id field.
func (f *RiderFilter) WhereGroupID(p entql.Uint64P) {
	f.Where(p.Field(rider.FieldGroupID))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *RiderFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(rider.FieldPhone))
}

// WhereContact applies the entql json.RawMessage predicate on the contact field.
func (f *RiderFilter) WhereContact(p entql.BytesP) {
	f.Where(p.Field(rider.FieldContact))
}

// WhereDeviceType applies the entql uint8 predicate on the device_type field.
func (f *RiderFilter) WhereDeviceType(p entql.Uint8P) {
	f.Where(p.Field(rider.FieldDeviceType))
}

// WhereLastDevice applies the entql string predicate on the last_device field.
func (f *RiderFilter) WhereLastDevice(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastDevice))
}

// WhereIsNewDevice applies the entql bool predicate on the is_new_device field.
func (f *RiderFilter) WhereIsNewDevice(p entql.BoolP) {
	f.Where(p.Field(rider.FieldIsNewDevice))
}

// WhereLastFace applies the entql string predicate on the last_face field.
func (f *RiderFilter) WhereLastFace(p entql.StringP) {
	f.Where(p.Field(rider.FieldLastFace))
}

// WherePushID applies the entql string predicate on the push_id field.
func (f *RiderFilter) WherePushID(p entql.StringP) {
	f.Where(p.Field(rider.FieldPushID))
}

// WhereLastSigninAt applies the entql time.Time predicate on the last_signin_at field.
func (f *RiderFilter) WhereLastSigninAt(p entql.TimeP) {
	f.Where(p.Field(rider.FieldLastSigninAt))
}

// WhereEsignAccountID applies the entql string predicate on the esign_account_id field.
func (f *RiderFilter) WhereEsignAccountID(p entql.StringP) {
	f.Where(p.Field(rider.FieldEsignAccountID))
}

// WhereHasPerson applies a predicate to check if query has an edge person.
func (f *RiderFilter) WhereHasPerson() {
	f.Where(entql.HasEdge("person"))
}

// WhereHasPersonWith applies a predicate to check if query has an edge person with a given conditions (other predicates).
func (f *RiderFilter) WhereHasPersonWith(preds ...predicate.Person) {
	f.Where(entql.HasEdgeWith("person", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasContract applies a predicate to check if query has an edge contract.
func (f *RiderFilter) WhereHasContract() {
	f.Where(entql.HasEdge("contract"))
}

// WhereHasContractWith applies a predicate to check if query has an edge contract with a given conditions (other predicates).
func (f *RiderFilter) WhereHasContractWith(preds ...predicate.Contract) {
	f.Where(entql.HasEdgeWith("contract", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SettingQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SettingQuery builder.
func (sq *SettingQuery) Filter() *SettingFilter {
	return &SettingFilter{sq.config, sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SettingMutation builder.
func (m *SettingMutation) Filter() *SettingFilter {
	return &SettingFilter{m.config, m}
}

// SettingFilter provides a generic filtering capability at runtime for SettingQuery.
type SettingFilter struct {
	config
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *SettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *SettingFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(setting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(setting.FieldUpdatedAt))
}

// WhereKey applies the entql string predicate on the key field.
func (f *SettingFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(setting.FieldKey))
}

// WhereVal applies the entql json.RawMessage predicate on the val field.
func (f *SettingFilter) WhereVal(p entql.BytesP) {
	f.Where(p.Field(setting.FieldVal))
}
