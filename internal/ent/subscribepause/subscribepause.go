// Code generated by ent, DO NOT EDIT.

package subscribepause

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscribepause type in the database.
	Label = "subscribe_pause"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldEndStoreID holds the string denoting the end_store_id field in the database.
	FieldEndStoreID = "end_store_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldEndCabinetID holds the string denoting the end_cabinet_id field in the database.
	FieldEndCabinetID = "end_cabinet_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldDays holds the string denoting the days field in the database.
	FieldDays = "days"
	// FieldEndEmployeeID holds the string denoting the end_employee_id field in the database.
	FieldEndEmployeeID = "end_employee_id"
	// FieldOverdueDays holds the string denoting the overdue_days field in the database.
	FieldOverdueDays = "overdue_days"
	// FieldEndModifier holds the string denoting the end_modifier field in the database.
	FieldEndModifier = "end_modifier"
	// FieldPauseOverdue holds the string denoting the pause_overdue field in the database.
	FieldPauseOverdue = "pause_overdue"
	// FieldSuspendDays holds the string denoting the suspend_days field in the database.
	FieldSuspendDays = "suspend_days"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeEndStore holds the string denoting the endstore edge name in mutations.
	EdgeEndStore = "endStore"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// EdgeEndCabinet holds the string denoting the endcabinet edge name in mutations.
	EdgeEndCabinet = "endCabinet"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeEndEmployee holds the string denoting the end_employee edge name in mutations.
	EdgeEndEmployee = "end_employee"
	// EdgeSuspends holds the string denoting the suspends edge name in mutations.
	EdgeSuspends = "suspends"
	// Table holds the table name of the subscribepause in the database.
	Table = "subscribe_pause"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "subscribe_pause"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "subscribe_pause"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "subscribe_pause"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "subscribe_pause"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// EndStoreTable is the table that holds the endStore relation/edge.
	EndStoreTable = "subscribe_pause"
	// EndStoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	EndStoreInverseTable = "store"
	// EndStoreColumn is the table column denoting the endStore relation/edge.
	EndStoreColumn = "end_store_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "subscribe_pause"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
	// EndCabinetTable is the table that holds the endCabinet relation/edge.
	EndCabinetTable = "subscribe_pause"
	// EndCabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	EndCabinetInverseTable = "cabinet"
	// EndCabinetColumn is the table column denoting the endCabinet relation/edge.
	EndCabinetColumn = "end_cabinet_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "subscribe_pause"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// EndEmployeeTable is the table that holds the end_employee relation/edge.
	EndEmployeeTable = "subscribe_pause"
	// EndEmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EndEmployeeInverseTable = "employee"
	// EndEmployeeColumn is the table column denoting the end_employee relation/edge.
	EndEmployeeColumn = "end_employee_id"
	// SuspendsTable is the table that holds the suspends relation/edge.
	SuspendsTable = "subscribe_suspend"
	// SuspendsInverseTable is the table name for the SubscribeSuspend entity.
	// It exists in this package in order to avoid circular dependency with the "subscribesuspend" package.
	SuspendsInverseTable = "subscribe_suspend"
	// SuspendsColumn is the table column denoting the suspends relation/edge.
	SuspendsColumn = "pause_id"
)

// Columns holds all SQL columns for subscribepause fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldRiderID,
	FieldEmployeeID,
	FieldCityID,
	FieldStoreID,
	FieldEndStoreID,
	FieldCabinetID,
	FieldEndCabinetID,
	FieldSubscribeID,
	FieldStartAt,
	FieldEndAt,
	FieldDays,
	FieldEndEmployeeID,
	FieldOverdueDays,
	FieldEndModifier,
	FieldPauseOverdue,
	FieldSuspendDays,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultOverdueDays holds the default value on creation for the "overdue_days" field.
	DefaultOverdueDays int
	// DefaultPauseOverdue holds the default value on creation for the "pause_overdue" field.
	DefaultPauseOverdue bool
	// DefaultSuspendDays holds the default value on creation for the "suspend_days" field.
	DefaultSuspendDays int
)

// OrderOption defines the ordering options for the SubscribePause queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByEndStoreID orders the results by the end_store_id field.
func ByEndStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndStoreID, opts...).ToFunc()
}

// ByCabinetID orders the results by the cabinet_id field.
func ByCabinetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCabinetID, opts...).ToFunc()
}

// ByEndCabinetID orders the results by the end_cabinet_id field.
func ByEndCabinetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndCabinetID, opts...).ToFunc()
}

// BySubscribeID orders the results by the subscribe_id field.
func BySubscribeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribeID, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByDays orders the results by the days field.
func ByDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDays, opts...).ToFunc()
}

// ByEndEmployeeID orders the results by the end_employee_id field.
func ByEndEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndEmployeeID, opts...).ToFunc()
}

// ByOverdueDays orders the results by the overdue_days field.
func ByOverdueDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverdueDays, opts...).ToFunc()
}

// ByPauseOverdue orders the results by the pause_overdue field.
func ByPauseOverdue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseOverdue, opts...).ToFunc()
}

// BySuspendDays orders the results by the suspend_days field.
func BySuspendDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspendDays, opts...).ToFunc()
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByEndStoreField orders the results by endStore field.
func ByEndStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEndStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByCabinetField orders the results by cabinet field.
func ByCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetStep(), sql.OrderByField(field, opts...))
	}
}

// ByEndCabinetField orders the results by endCabinet field.
func ByEndCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEndCabinetStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscribeField orders the results by subscribe field.
func BySubscribeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribeStep(), sql.OrderByField(field, opts...))
	}
}

// ByEndEmployeeField orders the results by end_employee field.
func ByEndEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEndEmployeeStep(), sql.OrderByField(field, opts...))
	}
}

// BySuspendsCount orders the results by suspends count.
func BySuspendsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSuspendsStep(), opts...)
	}
}

// BySuspends orders the results by suspends terms.
func BySuspends(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuspendsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
	)
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
func newEndStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EndStoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EndStoreTable, EndStoreColumn),
	)
}
func newCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
	)
}
func newEndCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EndCabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EndCabinetTable, EndCabinetColumn),
	)
}
func newSubscribeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscribeTable, SubscribeColumn),
	)
}
func newEndEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EndEmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EndEmployeeTable, EndEmployeeColumn),
	)
}
func newSuspendsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuspendsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SuspendsTable, SuspendsColumn),
	)
}
