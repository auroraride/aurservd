// Code generated by entc, DO NOT EDIT.

package subscribepause

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the subscribepause type in the database.
	Label = "subscribe_pause"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldEndStoreID holds the string denoting the end_store_id field in the database.
	FieldEndStoreID = "end_store_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldEndCabinetID holds the string denoting the end_cabinet_id field in the database.
	FieldEndCabinetID = "end_cabinet_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldDays holds the string denoting the days field in the database.
	FieldDays = "days"
	// FieldEndEmployeeID holds the string denoting the end_employee_id field in the database.
	FieldEndEmployeeID = "end_employee_id"
	// FieldOverdue holds the string denoting the overdue field in the database.
	FieldOverdue = "overdue"
	// FieldEndModifier holds the string denoting the end_modifier field in the database.
	FieldEndModifier = "end_modifier"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeEndStore holds the string denoting the endstore edge name in mutations.
	EdgeEndStore = "endStore"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// EdgeEndCabinet holds the string denoting the endcabinet edge name in mutations.
	EdgeEndCabinet = "endCabinet"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeEndEmployee holds the string denoting the end_employee edge name in mutations.
	EdgeEndEmployee = "end_employee"
	// Table holds the table name of the subscribepause in the database.
	Table = "subscribe_pause"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "subscribe_pause"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "subscribe_pause"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "subscribe_pause"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "subscribe_pause"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// EndStoreTable is the table that holds the endStore relation/edge.
	EndStoreTable = "subscribe_pause"
	// EndStoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	EndStoreInverseTable = "store"
	// EndStoreColumn is the table column denoting the endStore relation/edge.
	EndStoreColumn = "end_store_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "subscribe_pause"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
	// EndCabinetTable is the table that holds the endCabinet relation/edge.
	EndCabinetTable = "subscribe_pause"
	// EndCabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	EndCabinetInverseTable = "cabinet"
	// EndCabinetColumn is the table column denoting the endCabinet relation/edge.
	EndCabinetColumn = "end_cabinet_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "subscribe_pause"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// EndEmployeeTable is the table that holds the end_employee relation/edge.
	EndEmployeeTable = "subscribe_pause"
	// EndEmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EndEmployeeInverseTable = "employee"
	// EndEmployeeColumn is the table column denoting the end_employee relation/edge.
	EndEmployeeColumn = "end_employee_id"
)

// Columns holds all SQL columns for subscribepause fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldRiderID,
	FieldEmployeeID,
	FieldCityID,
	FieldStoreID,
	FieldEndStoreID,
	FieldCabinetID,
	FieldEndCabinetID,
	FieldSubscribeID,
	FieldStartAt,
	FieldEndAt,
	FieldDays,
	FieldEndEmployeeID,
	FieldOverdue,
	FieldEndModifier,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultOverdue holds the default value on creation for the "overdue" field.
	DefaultOverdue bool
)
