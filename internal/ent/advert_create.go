// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/advert"
)

// AdvertCreate is the builder for creating a Advert entity.
type AdvertCreate struct {
	config
	mutation *AdvertMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AdvertCreate) SetCreatedAt(t time.Time) *AdvertCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AdvertCreate) SetNillableCreatedAt(t *time.Time) *AdvertCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AdvertCreate) SetUpdatedAt(t time.Time) *AdvertCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AdvertCreate) SetNillableUpdatedAt(t *time.Time) *AdvertCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AdvertCreate) SetDeletedAt(t time.Time) *AdvertCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AdvertCreate) SetNillableDeletedAt(t *time.Time) *AdvertCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreator sets the "creator" field.
func (ac *AdvertCreate) SetCreator(m *model.Modifier) *AdvertCreate {
	ac.mutation.SetCreator(m)
	return ac
}

// SetLastModifier sets the "last_modifier" field.
func (ac *AdvertCreate) SetLastModifier(m *model.Modifier) *AdvertCreate {
	ac.mutation.SetLastModifier(m)
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AdvertCreate) SetRemark(s string) *AdvertCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AdvertCreate) SetNillableRemark(s *string) *AdvertCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AdvertCreate) SetName(s string) *AdvertCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetImage sets the "image" field.
func (ac *AdvertCreate) SetImage(s string) *AdvertCreate {
	ac.mutation.SetImage(s)
	return ac
}

// SetLink sets the "link" field.
func (ac *AdvertCreate) SetLink(s string) *AdvertCreate {
	ac.mutation.SetLink(s)
	return ac
}

// SetSort sets the "sort" field.
func (ac *AdvertCreate) SetSort(i int) *AdvertCreate {
	ac.mutation.SetSort(i)
	return ac
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ac *AdvertCreate) SetNillableSort(i *int) *AdvertCreate {
	if i != nil {
		ac.SetSort(*i)
	}
	return ac
}

// Mutation returns the AdvertMutation object of the builder.
func (ac *AdvertCreate) Mutation() *AdvertMutation {
	return ac.mutation
}

// Save creates the Advert in the database.
func (ac *AdvertCreate) Save(ctx context.Context) (*Advert, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AdvertCreate) SaveX(ctx context.Context) *Advert {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AdvertCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AdvertCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AdvertCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if advert.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized advert.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := advert.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if advert.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized advert.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := advert.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Sort(); !ok {
		v := advert.DefaultSort
		ac.mutation.SetSort(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AdvertCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Advert.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Advert.updated_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Advert.name"`)}
	}
	if _, ok := ac.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Advert.image"`)}
	}
	if _, ok := ac.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "Advert.link"`)}
	}
	if _, ok := ac.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Advert.sort"`)}
	}
	return nil
}

func (ac *AdvertCreate) sqlSave(ctx context.Context) (*Advert, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AdvertCreate) createSpec() (*Advert, *sqlgraph.CreateSpec) {
	var (
		_node = &Advert{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(advert.Table, sqlgraph.NewFieldSpec(advert.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(advert.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(advert.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(advert.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Creator(); ok {
		_spec.SetField(advert.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ac.mutation.LastModifier(); ok {
		_spec.SetField(advert.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.SetField(advert.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(advert.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Image(); ok {
		_spec.SetField(advert.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := ac.mutation.Link(); ok {
		_spec.SetField(advert.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := ac.mutation.Sort(); ok {
		_spec.SetField(advert.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Advert.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdvertUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AdvertCreate) OnConflict(opts ...sql.ConflictOption) *AdvertUpsertOne {
	ac.conflict = opts
	return &AdvertUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Advert.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AdvertCreate) OnConflictColumns(columns ...string) *AdvertUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AdvertUpsertOne{
		create: ac,
	}
}

type (
	// AdvertUpsertOne is the builder for "upsert"-ing
	//  one Advert node.
	AdvertUpsertOne struct {
		create *AdvertCreate
	}

	// AdvertUpsert is the "OnConflict" setter.
	AdvertUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AdvertUpsert) SetUpdatedAt(v time.Time) *AdvertUpsert {
	u.Set(advert.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AdvertUpsert) UpdateUpdatedAt() *AdvertUpsert {
	u.SetExcluded(advert.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AdvertUpsert) SetDeletedAt(v time.Time) *AdvertUpsert {
	u.Set(advert.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AdvertUpsert) UpdateDeletedAt() *AdvertUpsert {
	u.SetExcluded(advert.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AdvertUpsert) ClearDeletedAt() *AdvertUpsert {
	u.SetNull(advert.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AdvertUpsert) SetLastModifier(v *model.Modifier) *AdvertUpsert {
	u.Set(advert.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AdvertUpsert) UpdateLastModifier() *AdvertUpsert {
	u.SetExcluded(advert.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AdvertUpsert) ClearLastModifier() *AdvertUpsert {
	u.SetNull(advert.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AdvertUpsert) SetRemark(v string) *AdvertUpsert {
	u.Set(advert.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AdvertUpsert) UpdateRemark() *AdvertUpsert {
	u.SetExcluded(advert.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AdvertUpsert) ClearRemark() *AdvertUpsert {
	u.SetNull(advert.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *AdvertUpsert) SetName(v string) *AdvertUpsert {
	u.Set(advert.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AdvertUpsert) UpdateName() *AdvertUpsert {
	u.SetExcluded(advert.FieldName)
	return u
}

// SetImage sets the "image" field.
func (u *AdvertUpsert) SetImage(v string) *AdvertUpsert {
	u.Set(advert.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AdvertUpsert) UpdateImage() *AdvertUpsert {
	u.SetExcluded(advert.FieldImage)
	return u
}

// SetLink sets the "link" field.
func (u *AdvertUpsert) SetLink(v string) *AdvertUpsert {
	u.Set(advert.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AdvertUpsert) UpdateLink() *AdvertUpsert {
	u.SetExcluded(advert.FieldLink)
	return u
}

// SetSort sets the "sort" field.
func (u *AdvertUpsert) SetSort(v int) *AdvertUpsert {
	u.Set(advert.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *AdvertUpsert) UpdateSort() *AdvertUpsert {
	u.SetExcluded(advert.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *AdvertUpsert) AddSort(v int) *AdvertUpsert {
	u.Add(advert.FieldSort, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Advert.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AdvertUpsertOne) UpdateNewValues() *AdvertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(advert.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(advert.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Advert.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AdvertUpsertOne) Ignore() *AdvertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdvertUpsertOne) DoNothing() *AdvertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdvertCreate.OnConflict
// documentation for more info.
func (u *AdvertUpsertOne) Update(set func(*AdvertUpsert)) *AdvertUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdvertUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AdvertUpsertOne) SetUpdatedAt(v time.Time) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AdvertUpsertOne) UpdateUpdatedAt() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AdvertUpsertOne) SetDeletedAt(v time.Time) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AdvertUpsertOne) UpdateDeletedAt() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AdvertUpsertOne) ClearDeletedAt() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AdvertUpsertOne) SetLastModifier(v *model.Modifier) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AdvertUpsertOne) UpdateLastModifier() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AdvertUpsertOne) ClearLastModifier() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AdvertUpsertOne) SetRemark(v string) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AdvertUpsertOne) UpdateRemark() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AdvertUpsertOne) ClearRemark() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *AdvertUpsertOne) SetName(v string) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AdvertUpsertOne) UpdateName() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *AdvertUpsertOne) SetImage(v string) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AdvertUpsertOne) UpdateImage() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateImage()
	})
}

// SetLink sets the "link" field.
func (u *AdvertUpsertOne) SetLink(v string) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AdvertUpsertOne) UpdateLink() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateLink()
	})
}

// SetSort sets the "sort" field.
func (u *AdvertUpsertOne) SetSort(v int) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *AdvertUpsertOne) AddSort(v int) *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *AdvertUpsertOne) UpdateSort() *AdvertUpsertOne {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateSort()
	})
}

// Exec executes the query.
func (u *AdvertUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdvertCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdvertUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AdvertUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AdvertUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AdvertCreateBulk is the builder for creating many Advert entities in bulk.
type AdvertCreateBulk struct {
	config
	err      error
	builders []*AdvertCreate
	conflict []sql.ConflictOption
}

// Save creates the Advert entities in the database.
func (acb *AdvertCreateBulk) Save(ctx context.Context) ([]*Advert, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Advert, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdvertMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AdvertCreateBulk) SaveX(ctx context.Context) []*Advert {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AdvertCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AdvertCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Advert.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdvertUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AdvertCreateBulk) OnConflict(opts ...sql.ConflictOption) *AdvertUpsertBulk {
	acb.conflict = opts
	return &AdvertUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Advert.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AdvertCreateBulk) OnConflictColumns(columns ...string) *AdvertUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AdvertUpsertBulk{
		create: acb,
	}
}

// AdvertUpsertBulk is the builder for "upsert"-ing
// a bulk of Advert nodes.
type AdvertUpsertBulk struct {
	create *AdvertCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Advert.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AdvertUpsertBulk) UpdateNewValues() *AdvertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(advert.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(advert.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Advert.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AdvertUpsertBulk) Ignore() *AdvertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdvertUpsertBulk) DoNothing() *AdvertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdvertCreateBulk.OnConflict
// documentation for more info.
func (u *AdvertUpsertBulk) Update(set func(*AdvertUpsert)) *AdvertUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdvertUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AdvertUpsertBulk) SetUpdatedAt(v time.Time) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AdvertUpsertBulk) UpdateUpdatedAt() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AdvertUpsertBulk) SetDeletedAt(v time.Time) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AdvertUpsertBulk) UpdateDeletedAt() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AdvertUpsertBulk) ClearDeletedAt() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AdvertUpsertBulk) SetLastModifier(v *model.Modifier) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AdvertUpsertBulk) UpdateLastModifier() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AdvertUpsertBulk) ClearLastModifier() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AdvertUpsertBulk) SetRemark(v string) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AdvertUpsertBulk) UpdateRemark() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AdvertUpsertBulk) ClearRemark() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *AdvertUpsertBulk) SetName(v string) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AdvertUpsertBulk) UpdateName() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *AdvertUpsertBulk) SetImage(v string) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *AdvertUpsertBulk) UpdateImage() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateImage()
	})
}

// SetLink sets the "link" field.
func (u *AdvertUpsertBulk) SetLink(v string) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AdvertUpsertBulk) UpdateLink() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateLink()
	})
}

// SetSort sets the "sort" field.
func (u *AdvertUpsertBulk) SetSort(v int) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *AdvertUpsertBulk) AddSort(v int) *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *AdvertUpsertBulk) UpdateSort() *AdvertUpsertBulk {
	return u.Update(func(s *AdvertUpsert) {
		s.UpdateSort()
	})
}

// Exec executes the query.
func (u *AdvertUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AdvertCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdvertCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdvertUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
