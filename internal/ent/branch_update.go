// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// BranchUpdate is the builder for updating Branch entities.
type BranchUpdate struct {
	config
	hooks    []Hook
	mutation *BranchMutation
}

// Where appends a list predicates to the BranchUpdate builder.
func (bu *BranchUpdate) Where(ps ...predicate.Branch) *BranchUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BranchUpdate) SetUpdatedAt(t time.Time) *BranchUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BranchUpdate) SetDeletedAt(t time.Time) *BranchUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableDeletedAt(t *time.Time) *BranchUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BranchUpdate) ClearDeletedAt() *BranchUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetLastModifier sets the "last_modifier" field.
func (bu *BranchUpdate) SetLastModifier(m *model.Modifier) *BranchUpdate {
	bu.mutation.SetLastModifier(m)
	return bu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bu *BranchUpdate) ClearLastModifier() *BranchUpdate {
	bu.mutation.ClearLastModifier()
	return bu
}

// SetRemark sets the "remark" field.
func (bu *BranchUpdate) SetRemark(s string) *BranchUpdate {
	bu.mutation.SetRemark(s)
	return bu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bu *BranchUpdate) SetNillableRemark(s *string) *BranchUpdate {
	if s != nil {
		bu.SetRemark(*s)
	}
	return bu
}

// ClearRemark clears the value of the "remark" field.
func (bu *BranchUpdate) ClearRemark() *BranchUpdate {
	bu.mutation.ClearRemark()
	return bu
}

// SetCityID sets the "city_id" field.
func (bu *BranchUpdate) SetCityID(u uint64) *BranchUpdate {
	bu.mutation.SetCityID(u)
	return bu
}

// SetName sets the "name" field.
func (bu *BranchUpdate) SetName(s string) *BranchUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetLng sets the "lng" field.
func (bu *BranchUpdate) SetLng(f float64) *BranchUpdate {
	bu.mutation.ResetLng()
	bu.mutation.SetLng(f)
	return bu
}

// AddLng adds f to the "lng" field.
func (bu *BranchUpdate) AddLng(f float64) *BranchUpdate {
	bu.mutation.AddLng(f)
	return bu
}

// SetLat sets the "lat" field.
func (bu *BranchUpdate) SetLat(f float64) *BranchUpdate {
	bu.mutation.ResetLat()
	bu.mutation.SetLat(f)
	return bu
}

// AddLat adds f to the "lat" field.
func (bu *BranchUpdate) AddLat(f float64) *BranchUpdate {
	bu.mutation.AddLat(f)
	return bu
}

// SetAddress sets the "address" field.
func (bu *BranchUpdate) SetAddress(s string) *BranchUpdate {
	bu.mutation.SetAddress(s)
	return bu
}

// SetPhotos sets the "photos" field.
func (bu *BranchUpdate) SetPhotos(s []string) *BranchUpdate {
	bu.mutation.SetPhotos(s)
	return bu
}

// SetGeom sets the "geom" field.
func (bu *BranchUpdate) SetGeom(m *model.Geometry) *BranchUpdate {
	bu.mutation.SetGeom(m)
	return bu
}

// AddContractIDs adds the "contracts" edge to the BranchContract entity by IDs.
func (bu *BranchUpdate) AddContractIDs(ids ...uint64) *BranchUpdate {
	bu.mutation.AddContractIDs(ids...)
	return bu
}

// AddContracts adds the "contracts" edges to the BranchContract entity.
func (bu *BranchUpdate) AddContracts(b ...*BranchContract) *BranchUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddContractIDs(ids...)
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (bu *BranchUpdate) AddCabinetIDs(ids ...uint64) *BranchUpdate {
	bu.mutation.AddCabinetIDs(ids...)
	return bu
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (bu *BranchUpdate) AddCabinets(c ...*Cabinet) *BranchUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCabinetIDs(ids...)
}

// SetCity sets the "city" edge to the City entity.
func (bu *BranchUpdate) SetCity(c *City) *BranchUpdate {
	return bu.SetCityID(c.ID)
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by IDs.
func (bu *BranchUpdate) AddFaultIDs(ids ...uint64) *BranchUpdate {
	bu.mutation.AddFaultIDs(ids...)
	return bu
}

// AddFaults adds the "faults" edges to the CabinetFault entity.
func (bu *BranchUpdate) AddFaults(c ...*CabinetFault) *BranchUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddFaultIDs(ids...)
}

// AddStoreIDs adds the "stores" edge to the Store entity by IDs.
func (bu *BranchUpdate) AddStoreIDs(ids ...uint64) *BranchUpdate {
	bu.mutation.AddStoreIDs(ids...)
	return bu
}

// AddStores adds the "stores" edges to the Store entity.
func (bu *BranchUpdate) AddStores(s ...*Store) *BranchUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.AddStoreIDs(ids...)
}

// Mutation returns the BranchMutation object of the builder.
func (bu *BranchUpdate) Mutation() *BranchMutation {
	return bu.mutation
}

// ClearContracts clears all "contracts" edges to the BranchContract entity.
func (bu *BranchUpdate) ClearContracts() *BranchUpdate {
	bu.mutation.ClearContracts()
	return bu
}

// RemoveContractIDs removes the "contracts" edge to BranchContract entities by IDs.
func (bu *BranchUpdate) RemoveContractIDs(ids ...uint64) *BranchUpdate {
	bu.mutation.RemoveContractIDs(ids...)
	return bu
}

// RemoveContracts removes "contracts" edges to BranchContract entities.
func (bu *BranchUpdate) RemoveContracts(b ...*BranchContract) *BranchUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveContractIDs(ids...)
}

// ClearCabinets clears all "cabinets" edges to the Cabinet entity.
func (bu *BranchUpdate) ClearCabinets() *BranchUpdate {
	bu.mutation.ClearCabinets()
	return bu
}

// RemoveCabinetIDs removes the "cabinets" edge to Cabinet entities by IDs.
func (bu *BranchUpdate) RemoveCabinetIDs(ids ...uint64) *BranchUpdate {
	bu.mutation.RemoveCabinetIDs(ids...)
	return bu
}

// RemoveCabinets removes "cabinets" edges to Cabinet entities.
func (bu *BranchUpdate) RemoveCabinets(c ...*Cabinet) *BranchUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCabinetIDs(ids...)
}

// ClearCity clears the "city" edge to the City entity.
func (bu *BranchUpdate) ClearCity() *BranchUpdate {
	bu.mutation.ClearCity()
	return bu
}

// ClearFaults clears all "faults" edges to the CabinetFault entity.
func (bu *BranchUpdate) ClearFaults() *BranchUpdate {
	bu.mutation.ClearFaults()
	return bu
}

// RemoveFaultIDs removes the "faults" edge to CabinetFault entities by IDs.
func (bu *BranchUpdate) RemoveFaultIDs(ids ...uint64) *BranchUpdate {
	bu.mutation.RemoveFaultIDs(ids...)
	return bu
}

// RemoveFaults removes "faults" edges to CabinetFault entities.
func (bu *BranchUpdate) RemoveFaults(c ...*CabinetFault) *BranchUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveFaultIDs(ids...)
}

// ClearStores clears all "stores" edges to the Store entity.
func (bu *BranchUpdate) ClearStores() *BranchUpdate {
	bu.mutation.ClearStores()
	return bu
}

// RemoveStoreIDs removes the "stores" edge to Store entities by IDs.
func (bu *BranchUpdate) RemoveStoreIDs(ids ...uint64) *BranchUpdate {
	bu.mutation.RemoveStoreIDs(ids...)
	return bu
}

// RemoveStores removes "stores" edges to Store entities.
func (bu *BranchUpdate) RemoveStores(s ...*Store) *BranchUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return bu.RemoveStoreIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BranchUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	bu.defaults()
	if len(bu.hooks) == 0 {
		if err = bu.check(); err != nil {
			return 0, err
		}
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BranchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bu.check(); err != nil {
				return 0, err
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BranchUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BranchUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BranchUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BranchUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := branch.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BranchUpdate) check() error {
	if _, ok := bu.mutation.CityID(); bu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Branch.city"`)
	}
	return nil
}

func (bu *BranchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   branch.Table,
			Columns: branch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branch.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: branch.FieldUpdatedAt,
		})
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: branch.FieldDeletedAt,
		})
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: branch.FieldDeletedAt,
		})
	}
	if bu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: branch.FieldCreator,
		})
	}
	if value, ok := bu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: branch.FieldLastModifier,
		})
	}
	if bu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: branch.FieldLastModifier,
		})
	}
	if value, ok := bu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldRemark,
		})
	}
	if bu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: branch.FieldRemark,
		})
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldName,
		})
	}
	if value, ok := bu.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: branch.FieldLng,
		})
	}
	if value, ok := bu.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: branch.FieldLng,
		})
	}
	if value, ok := bu.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: branch.FieldLat,
		})
	}
	if value, ok := bu.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: branch.FieldLat,
		})
	}
	if value, ok := bu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldAddress,
		})
	}
	if value, ok := bu.mutation.Photos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: branch.FieldPhotos,
		})
	}
	if value, ok := bu.mutation.Geom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: branch.FieldGeom,
		})
	}
	if bu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branchcontract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedContractsIDs(); len(nodes) > 0 && !bu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branchcontract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branchcontract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCabinetsIDs(); len(nodes) > 0 && !bu.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.CityTable,
			Columns: []string{branch.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.CityTable,
			Columns: []string{branch.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedFaultsIDs(); len(nodes) > 0 && !bu.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.FaultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedStoresIDs(); len(nodes) > 0 && !bu.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BranchUpdateOne is the builder for updating a single Branch entity.
type BranchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BranchMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BranchUpdateOne) SetUpdatedAt(t time.Time) *BranchUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BranchUpdateOne) SetDeletedAt(t time.Time) *BranchUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableDeletedAt(t *time.Time) *BranchUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BranchUpdateOne) ClearDeletedAt() *BranchUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetLastModifier sets the "last_modifier" field.
func (buo *BranchUpdateOne) SetLastModifier(m *model.Modifier) *BranchUpdateOne {
	buo.mutation.SetLastModifier(m)
	return buo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (buo *BranchUpdateOne) ClearLastModifier() *BranchUpdateOne {
	buo.mutation.ClearLastModifier()
	return buo
}

// SetRemark sets the "remark" field.
func (buo *BranchUpdateOne) SetRemark(s string) *BranchUpdateOne {
	buo.mutation.SetRemark(s)
	return buo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (buo *BranchUpdateOne) SetNillableRemark(s *string) *BranchUpdateOne {
	if s != nil {
		buo.SetRemark(*s)
	}
	return buo
}

// ClearRemark clears the value of the "remark" field.
func (buo *BranchUpdateOne) ClearRemark() *BranchUpdateOne {
	buo.mutation.ClearRemark()
	return buo
}

// SetCityID sets the "city_id" field.
func (buo *BranchUpdateOne) SetCityID(u uint64) *BranchUpdateOne {
	buo.mutation.SetCityID(u)
	return buo
}

// SetName sets the "name" field.
func (buo *BranchUpdateOne) SetName(s string) *BranchUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetLng sets the "lng" field.
func (buo *BranchUpdateOne) SetLng(f float64) *BranchUpdateOne {
	buo.mutation.ResetLng()
	buo.mutation.SetLng(f)
	return buo
}

// AddLng adds f to the "lng" field.
func (buo *BranchUpdateOne) AddLng(f float64) *BranchUpdateOne {
	buo.mutation.AddLng(f)
	return buo
}

// SetLat sets the "lat" field.
func (buo *BranchUpdateOne) SetLat(f float64) *BranchUpdateOne {
	buo.mutation.ResetLat()
	buo.mutation.SetLat(f)
	return buo
}

// AddLat adds f to the "lat" field.
func (buo *BranchUpdateOne) AddLat(f float64) *BranchUpdateOne {
	buo.mutation.AddLat(f)
	return buo
}

// SetAddress sets the "address" field.
func (buo *BranchUpdateOne) SetAddress(s string) *BranchUpdateOne {
	buo.mutation.SetAddress(s)
	return buo
}

// SetPhotos sets the "photos" field.
func (buo *BranchUpdateOne) SetPhotos(s []string) *BranchUpdateOne {
	buo.mutation.SetPhotos(s)
	return buo
}

// SetGeom sets the "geom" field.
func (buo *BranchUpdateOne) SetGeom(m *model.Geometry) *BranchUpdateOne {
	buo.mutation.SetGeom(m)
	return buo
}

// AddContractIDs adds the "contracts" edge to the BranchContract entity by IDs.
func (buo *BranchUpdateOne) AddContractIDs(ids ...uint64) *BranchUpdateOne {
	buo.mutation.AddContractIDs(ids...)
	return buo
}

// AddContracts adds the "contracts" edges to the BranchContract entity.
func (buo *BranchUpdateOne) AddContracts(b ...*BranchContract) *BranchUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddContractIDs(ids...)
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (buo *BranchUpdateOne) AddCabinetIDs(ids ...uint64) *BranchUpdateOne {
	buo.mutation.AddCabinetIDs(ids...)
	return buo
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (buo *BranchUpdateOne) AddCabinets(c ...*Cabinet) *BranchUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCabinetIDs(ids...)
}

// SetCity sets the "city" edge to the City entity.
func (buo *BranchUpdateOne) SetCity(c *City) *BranchUpdateOne {
	return buo.SetCityID(c.ID)
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by IDs.
func (buo *BranchUpdateOne) AddFaultIDs(ids ...uint64) *BranchUpdateOne {
	buo.mutation.AddFaultIDs(ids...)
	return buo
}

// AddFaults adds the "faults" edges to the CabinetFault entity.
func (buo *BranchUpdateOne) AddFaults(c ...*CabinetFault) *BranchUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddFaultIDs(ids...)
}

// AddStoreIDs adds the "stores" edge to the Store entity by IDs.
func (buo *BranchUpdateOne) AddStoreIDs(ids ...uint64) *BranchUpdateOne {
	buo.mutation.AddStoreIDs(ids...)
	return buo
}

// AddStores adds the "stores" edges to the Store entity.
func (buo *BranchUpdateOne) AddStores(s ...*Store) *BranchUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.AddStoreIDs(ids...)
}

// Mutation returns the BranchMutation object of the builder.
func (buo *BranchUpdateOne) Mutation() *BranchMutation {
	return buo.mutation
}

// ClearContracts clears all "contracts" edges to the BranchContract entity.
func (buo *BranchUpdateOne) ClearContracts() *BranchUpdateOne {
	buo.mutation.ClearContracts()
	return buo
}

// RemoveContractIDs removes the "contracts" edge to BranchContract entities by IDs.
func (buo *BranchUpdateOne) RemoveContractIDs(ids ...uint64) *BranchUpdateOne {
	buo.mutation.RemoveContractIDs(ids...)
	return buo
}

// RemoveContracts removes "contracts" edges to BranchContract entities.
func (buo *BranchUpdateOne) RemoveContracts(b ...*BranchContract) *BranchUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveContractIDs(ids...)
}

// ClearCabinets clears all "cabinets" edges to the Cabinet entity.
func (buo *BranchUpdateOne) ClearCabinets() *BranchUpdateOne {
	buo.mutation.ClearCabinets()
	return buo
}

// RemoveCabinetIDs removes the "cabinets" edge to Cabinet entities by IDs.
func (buo *BranchUpdateOne) RemoveCabinetIDs(ids ...uint64) *BranchUpdateOne {
	buo.mutation.RemoveCabinetIDs(ids...)
	return buo
}

// RemoveCabinets removes "cabinets" edges to Cabinet entities.
func (buo *BranchUpdateOne) RemoveCabinets(c ...*Cabinet) *BranchUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCabinetIDs(ids...)
}

// ClearCity clears the "city" edge to the City entity.
func (buo *BranchUpdateOne) ClearCity() *BranchUpdateOne {
	buo.mutation.ClearCity()
	return buo
}

// ClearFaults clears all "faults" edges to the CabinetFault entity.
func (buo *BranchUpdateOne) ClearFaults() *BranchUpdateOne {
	buo.mutation.ClearFaults()
	return buo
}

// RemoveFaultIDs removes the "faults" edge to CabinetFault entities by IDs.
func (buo *BranchUpdateOne) RemoveFaultIDs(ids ...uint64) *BranchUpdateOne {
	buo.mutation.RemoveFaultIDs(ids...)
	return buo
}

// RemoveFaults removes "faults" edges to CabinetFault entities.
func (buo *BranchUpdateOne) RemoveFaults(c ...*CabinetFault) *BranchUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveFaultIDs(ids...)
}

// ClearStores clears all "stores" edges to the Store entity.
func (buo *BranchUpdateOne) ClearStores() *BranchUpdateOne {
	buo.mutation.ClearStores()
	return buo
}

// RemoveStoreIDs removes the "stores" edge to Store entities by IDs.
func (buo *BranchUpdateOne) RemoveStoreIDs(ids ...uint64) *BranchUpdateOne {
	buo.mutation.RemoveStoreIDs(ids...)
	return buo
}

// RemoveStores removes "stores" edges to Store entities.
func (buo *BranchUpdateOne) RemoveStores(s ...*Store) *BranchUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return buo.RemoveStoreIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BranchUpdateOne) Select(field string, fields ...string) *BranchUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Branch entity.
func (buo *BranchUpdateOne) Save(ctx context.Context) (*Branch, error) {
	var (
		err  error
		node *Branch
	)
	buo.defaults()
	if len(buo.hooks) == 0 {
		if err = buo.check(); err != nil {
			return nil, err
		}
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BranchMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = buo.check(); err != nil {
				return nil, err
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, buo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Branch)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BranchMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BranchUpdateOne) SaveX(ctx context.Context) *Branch {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BranchUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BranchUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BranchUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := branch.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BranchUpdateOne) check() error {
	if _, ok := buo.mutation.CityID(); buo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Branch.city"`)
	}
	return nil
}

func (buo *BranchUpdateOne) sqlSave(ctx context.Context) (_node *Branch, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   branch.Table,
			Columns: branch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branch.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Branch.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, branch.FieldID)
		for _, f := range fields {
			if !branch.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != branch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: branch.FieldUpdatedAt,
		})
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: branch.FieldDeletedAt,
		})
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: branch.FieldDeletedAt,
		})
	}
	if buo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: branch.FieldCreator,
		})
	}
	if value, ok := buo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: branch.FieldLastModifier,
		})
	}
	if buo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: branch.FieldLastModifier,
		})
	}
	if value, ok := buo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldRemark,
		})
	}
	if buo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: branch.FieldRemark,
		})
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldName,
		})
	}
	if value, ok := buo.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: branch.FieldLng,
		})
	}
	if value, ok := buo.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: branch.FieldLng,
		})
	}
	if value, ok := buo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: branch.FieldLat,
		})
	}
	if value, ok := buo.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: branch.FieldLat,
		})
	}
	if value, ok := buo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: branch.FieldAddress,
		})
	}
	if value, ok := buo.mutation.Photos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: branch.FieldPhotos,
		})
	}
	if value, ok := buo.mutation.Geom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: branch.FieldGeom,
		})
	}
	if buo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branchcontract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedContractsIDs(); len(nodes) > 0 && !buo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branchcontract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.ContractsTable,
			Columns: []string{branch.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branchcontract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCabinetsIDs(); len(nodes) > 0 && !buo.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.CabinetsTable,
			Columns: []string{branch.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.CityTable,
			Columns: []string{branch.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.CityTable,
			Columns: []string{branch.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedFaultsIDs(); len(nodes) > 0 && !buo.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.FaultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.FaultsTable,
			Columns: []string{branch.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedStoresIDs(); len(nodes) > 0 && !buo.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   branch.StoresTable,
			Columns: []string{branch.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Branch{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branch.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
