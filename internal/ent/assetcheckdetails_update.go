// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetcheck"
	"github.com/auroraride/aurservd/internal/ent/assetcheckdetails"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetCheckDetailsUpdate is the builder for updating AssetCheckDetails entities.
type AssetCheckDetailsUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetCheckDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetCheckDetailsUpdate builder.
func (acdu *AssetCheckDetailsUpdate) Where(ps ...predicate.AssetCheckDetails) *AssetCheckDetailsUpdate {
	acdu.mutation.Where(ps...)
	return acdu
}

// SetUpdatedAt sets the "updated_at" field.
func (acdu *AssetCheckDetailsUpdate) SetUpdatedAt(t time.Time) *AssetCheckDetailsUpdate {
	acdu.mutation.SetUpdatedAt(t)
	return acdu
}

// SetDeletedAt sets the "deleted_at" field.
func (acdu *AssetCheckDetailsUpdate) SetDeletedAt(t time.Time) *AssetCheckDetailsUpdate {
	acdu.mutation.SetDeletedAt(t)
	return acdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acdu *AssetCheckDetailsUpdate) SetNillableDeletedAt(t *time.Time) *AssetCheckDetailsUpdate {
	if t != nil {
		acdu.SetDeletedAt(*t)
	}
	return acdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acdu *AssetCheckDetailsUpdate) ClearDeletedAt() *AssetCheckDetailsUpdate {
	acdu.mutation.ClearDeletedAt()
	return acdu
}

// SetLastModifier sets the "last_modifier" field.
func (acdu *AssetCheckDetailsUpdate) SetLastModifier(m *model.Modifier) *AssetCheckDetailsUpdate {
	acdu.mutation.SetLastModifier(m)
	return acdu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (acdu *AssetCheckDetailsUpdate) ClearLastModifier() *AssetCheckDetailsUpdate {
	acdu.mutation.ClearLastModifier()
	return acdu
}

// SetRemark sets the "remark" field.
func (acdu *AssetCheckDetailsUpdate) SetRemark(s string) *AssetCheckDetailsUpdate {
	acdu.mutation.SetRemark(s)
	return acdu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (acdu *AssetCheckDetailsUpdate) SetNillableRemark(s *string) *AssetCheckDetailsUpdate {
	if s != nil {
		acdu.SetRemark(*s)
	}
	return acdu
}

// ClearRemark clears the value of the "remark" field.
func (acdu *AssetCheckDetailsUpdate) ClearRemark() *AssetCheckDetailsUpdate {
	acdu.mutation.ClearRemark()
	return acdu
}

// SetAssetID sets the "asset_id" field.
func (acdu *AssetCheckDetailsUpdate) SetAssetID(u uint64) *AssetCheckDetailsUpdate {
	acdu.mutation.SetAssetID(u)
	return acdu
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (acdu *AssetCheckDetailsUpdate) SetNillableAssetID(u *uint64) *AssetCheckDetailsUpdate {
	if u != nil {
		acdu.SetAssetID(*u)
	}
	return acdu
}

// ClearAssetID clears the value of the "asset_id" field.
func (acdu *AssetCheckDetailsUpdate) ClearAssetID() *AssetCheckDetailsUpdate {
	acdu.mutation.ClearAssetID()
	return acdu
}

// SetCheckID sets the "check_id" field.
func (acdu *AssetCheckDetailsUpdate) SetCheckID(u uint64) *AssetCheckDetailsUpdate {
	acdu.mutation.SetCheckID(u)
	return acdu
}

// SetNillableCheckID sets the "check_id" field if the given value is not nil.
func (acdu *AssetCheckDetailsUpdate) SetNillableCheckID(u *uint64) *AssetCheckDetailsUpdate {
	if u != nil {
		acdu.SetCheckID(*u)
	}
	return acdu
}

// ClearCheckID clears the value of the "check_id" field.
func (acdu *AssetCheckDetailsUpdate) ClearCheckID() *AssetCheckDetailsUpdate {
	acdu.mutation.ClearCheckID()
	return acdu
}

// SetAsset sets the "asset" edge to the Asset entity.
func (acdu *AssetCheckDetailsUpdate) SetAsset(a *Asset) *AssetCheckDetailsUpdate {
	return acdu.SetAssetID(a.ID)
}

// SetCheck sets the "check" edge to the AssetCheck entity.
func (acdu *AssetCheckDetailsUpdate) SetCheck(a *AssetCheck) *AssetCheckDetailsUpdate {
	return acdu.SetCheckID(a.ID)
}

// Mutation returns the AssetCheckDetailsMutation object of the builder.
func (acdu *AssetCheckDetailsUpdate) Mutation() *AssetCheckDetailsMutation {
	return acdu.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (acdu *AssetCheckDetailsUpdate) ClearAsset() *AssetCheckDetailsUpdate {
	acdu.mutation.ClearAsset()
	return acdu
}

// ClearCheck clears the "check" edge to the AssetCheck entity.
func (acdu *AssetCheckDetailsUpdate) ClearCheck() *AssetCheckDetailsUpdate {
	acdu.mutation.ClearCheck()
	return acdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acdu *AssetCheckDetailsUpdate) Save(ctx context.Context) (int, error) {
	if err := acdu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, acdu.sqlSave, acdu.mutation, acdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acdu *AssetCheckDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := acdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acdu *AssetCheckDetailsUpdate) Exec(ctx context.Context) error {
	_, err := acdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acdu *AssetCheckDetailsUpdate) ExecX(ctx context.Context) {
	if err := acdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acdu *AssetCheckDetailsUpdate) defaults() error {
	if _, ok := acdu.mutation.UpdatedAt(); !ok {
		if assetcheckdetails.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetcheckdetails.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetcheckdetails.UpdateDefaultUpdatedAt()
		acdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acdu *AssetCheckDetailsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetCheckDetailsUpdate {
	acdu.modifiers = append(acdu.modifiers, modifiers...)
	return acdu
}

func (acdu *AssetCheckDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetcheckdetails.Table, assetcheckdetails.Columns, sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64))
	if ps := acdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acdu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetcheckdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acdu.mutation.DeletedAt(); ok {
		_spec.SetField(assetcheckdetails.FieldDeletedAt, field.TypeTime, value)
	}
	if acdu.mutation.DeletedAtCleared() {
		_spec.ClearField(assetcheckdetails.FieldDeletedAt, field.TypeTime)
	}
	if acdu.mutation.CreatorCleared() {
		_spec.ClearField(assetcheckdetails.FieldCreator, field.TypeJSON)
	}
	if value, ok := acdu.mutation.LastModifier(); ok {
		_spec.SetField(assetcheckdetails.FieldLastModifier, field.TypeJSON, value)
	}
	if acdu.mutation.LastModifierCleared() {
		_spec.ClearField(assetcheckdetails.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := acdu.mutation.Remark(); ok {
		_spec.SetField(assetcheckdetails.FieldRemark, field.TypeString, value)
	}
	if acdu.mutation.RemarkCleared() {
		_spec.ClearField(assetcheckdetails.FieldRemark, field.TypeString)
	}
	if acdu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.AssetTable,
			Columns: []string{assetcheckdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acdu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.AssetTable,
			Columns: []string{assetcheckdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acdu.mutation.CheckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.CheckTable,
			Columns: []string{assetcheckdetails.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheck.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acdu.mutation.CheckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.CheckTable,
			Columns: []string{assetcheckdetails.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheck.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(acdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetcheckdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acdu.mutation.done = true
	return n, nil
}

// AssetCheckDetailsUpdateOne is the builder for updating a single AssetCheckDetails entity.
type AssetCheckDetailsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetCheckDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (acduo *AssetCheckDetailsUpdateOne) SetUpdatedAt(t time.Time) *AssetCheckDetailsUpdateOne {
	acduo.mutation.SetUpdatedAt(t)
	return acduo
}

// SetDeletedAt sets the "deleted_at" field.
func (acduo *AssetCheckDetailsUpdateOne) SetDeletedAt(t time.Time) *AssetCheckDetailsUpdateOne {
	acduo.mutation.SetDeletedAt(t)
	return acduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acduo *AssetCheckDetailsUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetCheckDetailsUpdateOne {
	if t != nil {
		acduo.SetDeletedAt(*t)
	}
	return acduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acduo *AssetCheckDetailsUpdateOne) ClearDeletedAt() *AssetCheckDetailsUpdateOne {
	acduo.mutation.ClearDeletedAt()
	return acduo
}

// SetLastModifier sets the "last_modifier" field.
func (acduo *AssetCheckDetailsUpdateOne) SetLastModifier(m *model.Modifier) *AssetCheckDetailsUpdateOne {
	acduo.mutation.SetLastModifier(m)
	return acduo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (acduo *AssetCheckDetailsUpdateOne) ClearLastModifier() *AssetCheckDetailsUpdateOne {
	acduo.mutation.ClearLastModifier()
	return acduo
}

// SetRemark sets the "remark" field.
func (acduo *AssetCheckDetailsUpdateOne) SetRemark(s string) *AssetCheckDetailsUpdateOne {
	acduo.mutation.SetRemark(s)
	return acduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (acduo *AssetCheckDetailsUpdateOne) SetNillableRemark(s *string) *AssetCheckDetailsUpdateOne {
	if s != nil {
		acduo.SetRemark(*s)
	}
	return acduo
}

// ClearRemark clears the value of the "remark" field.
func (acduo *AssetCheckDetailsUpdateOne) ClearRemark() *AssetCheckDetailsUpdateOne {
	acduo.mutation.ClearRemark()
	return acduo
}

// SetAssetID sets the "asset_id" field.
func (acduo *AssetCheckDetailsUpdateOne) SetAssetID(u uint64) *AssetCheckDetailsUpdateOne {
	acduo.mutation.SetAssetID(u)
	return acduo
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (acduo *AssetCheckDetailsUpdateOne) SetNillableAssetID(u *uint64) *AssetCheckDetailsUpdateOne {
	if u != nil {
		acduo.SetAssetID(*u)
	}
	return acduo
}

// ClearAssetID clears the value of the "asset_id" field.
func (acduo *AssetCheckDetailsUpdateOne) ClearAssetID() *AssetCheckDetailsUpdateOne {
	acduo.mutation.ClearAssetID()
	return acduo
}

// SetCheckID sets the "check_id" field.
func (acduo *AssetCheckDetailsUpdateOne) SetCheckID(u uint64) *AssetCheckDetailsUpdateOne {
	acduo.mutation.SetCheckID(u)
	return acduo
}

// SetNillableCheckID sets the "check_id" field if the given value is not nil.
func (acduo *AssetCheckDetailsUpdateOne) SetNillableCheckID(u *uint64) *AssetCheckDetailsUpdateOne {
	if u != nil {
		acduo.SetCheckID(*u)
	}
	return acduo
}

// ClearCheckID clears the value of the "check_id" field.
func (acduo *AssetCheckDetailsUpdateOne) ClearCheckID() *AssetCheckDetailsUpdateOne {
	acduo.mutation.ClearCheckID()
	return acduo
}

// SetAsset sets the "asset" edge to the Asset entity.
func (acduo *AssetCheckDetailsUpdateOne) SetAsset(a *Asset) *AssetCheckDetailsUpdateOne {
	return acduo.SetAssetID(a.ID)
}

// SetCheck sets the "check" edge to the AssetCheck entity.
func (acduo *AssetCheckDetailsUpdateOne) SetCheck(a *AssetCheck) *AssetCheckDetailsUpdateOne {
	return acduo.SetCheckID(a.ID)
}

// Mutation returns the AssetCheckDetailsMutation object of the builder.
func (acduo *AssetCheckDetailsUpdateOne) Mutation() *AssetCheckDetailsMutation {
	return acduo.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (acduo *AssetCheckDetailsUpdateOne) ClearAsset() *AssetCheckDetailsUpdateOne {
	acduo.mutation.ClearAsset()
	return acduo
}

// ClearCheck clears the "check" edge to the AssetCheck entity.
func (acduo *AssetCheckDetailsUpdateOne) ClearCheck() *AssetCheckDetailsUpdateOne {
	acduo.mutation.ClearCheck()
	return acduo
}

// Where appends a list predicates to the AssetCheckDetailsUpdate builder.
func (acduo *AssetCheckDetailsUpdateOne) Where(ps ...predicate.AssetCheckDetails) *AssetCheckDetailsUpdateOne {
	acduo.mutation.Where(ps...)
	return acduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acduo *AssetCheckDetailsUpdateOne) Select(field string, fields ...string) *AssetCheckDetailsUpdateOne {
	acduo.fields = append([]string{field}, fields...)
	return acduo
}

// Save executes the query and returns the updated AssetCheckDetails entity.
func (acduo *AssetCheckDetailsUpdateOne) Save(ctx context.Context) (*AssetCheckDetails, error) {
	if err := acduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, acduo.sqlSave, acduo.mutation, acduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acduo *AssetCheckDetailsUpdateOne) SaveX(ctx context.Context) *AssetCheckDetails {
	node, err := acduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acduo *AssetCheckDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := acduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acduo *AssetCheckDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := acduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acduo *AssetCheckDetailsUpdateOne) defaults() error {
	if _, ok := acduo.mutation.UpdatedAt(); !ok {
		if assetcheckdetails.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetcheckdetails.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetcheckdetails.UpdateDefaultUpdatedAt()
		acduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acduo *AssetCheckDetailsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetCheckDetailsUpdateOne {
	acduo.modifiers = append(acduo.modifiers, modifiers...)
	return acduo
}

func (acduo *AssetCheckDetailsUpdateOne) sqlSave(ctx context.Context) (_node *AssetCheckDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetcheckdetails.Table, assetcheckdetails.Columns, sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64))
	id, ok := acduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetCheckDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetcheckdetails.FieldID)
		for _, f := range fields {
			if !assetcheckdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetcheckdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acduo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetcheckdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acduo.mutation.DeletedAt(); ok {
		_spec.SetField(assetcheckdetails.FieldDeletedAt, field.TypeTime, value)
	}
	if acduo.mutation.DeletedAtCleared() {
		_spec.ClearField(assetcheckdetails.FieldDeletedAt, field.TypeTime)
	}
	if acduo.mutation.CreatorCleared() {
		_spec.ClearField(assetcheckdetails.FieldCreator, field.TypeJSON)
	}
	if value, ok := acduo.mutation.LastModifier(); ok {
		_spec.SetField(assetcheckdetails.FieldLastModifier, field.TypeJSON, value)
	}
	if acduo.mutation.LastModifierCleared() {
		_spec.ClearField(assetcheckdetails.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := acduo.mutation.Remark(); ok {
		_spec.SetField(assetcheckdetails.FieldRemark, field.TypeString, value)
	}
	if acduo.mutation.RemarkCleared() {
		_spec.ClearField(assetcheckdetails.FieldRemark, field.TypeString)
	}
	if acduo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.AssetTable,
			Columns: []string{assetcheckdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acduo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.AssetTable,
			Columns: []string{assetcheckdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acduo.mutation.CheckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.CheckTable,
			Columns: []string{assetcheckdetails.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheck.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acduo.mutation.CheckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.CheckTable,
			Columns: []string{assetcheckdetails.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheck.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(acduo.modifiers...)
	_node = &AssetCheckDetails{config: acduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetcheckdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acduo.mutation.done = true
	return _node, nil
}
