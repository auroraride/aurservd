// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/stocksummary"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// StockSummary is the model entity for the StockSummary schema.
type StockSummary struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 企业ID
	EnterpriseID *uint64 `json:"enterprise_id,omitempty"`
	// 站点ID
	StationID *uint64 `json:"station_id,omitempty"`
	// 门店ID
	StoreID *uint64 `json:"store_id,omitempty"`
	// 骑手ID
	RiderID *uint64 `json:"rider_id,omitempty"`
	// 电柜ID
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// 日期
	Date string `json:"date,omitempty"`
	// 型号
	Model string `json:"model,omitempty"`
	// 总数
	Num int `json:"num,omitempty"`
	// 今日总数
	TodayNum int `json:"today_num,omitempty"`
	// 出库总数
	OutboundNum int `json:"outbound_num,omitempty"`
	// 入库总数
	InboundNum int `json:"inbound_num,omitempty"`
	// 电池在骑手总数
	InRiderNum int `json:"in_rider_num,omitempty"`
	// 物资种类
	Material stocksummary.Material `json:"material,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StockSummaryQuery when eager-loading is set.
	Edges        StockSummaryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StockSummaryEdges holds the relations/edges for other nodes in the graph.
type StockSummaryEdges struct {
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Station holds the value of the station edge.
	Station *EnterpriseStation `json:"station,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockSummaryEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[0] {
		if e.Enterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockSummaryEdges) StationOrErr() (*EnterpriseStation, error) {
	if e.loadedTypes[1] {
		if e.Station == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprisestation.Label}
		}
		return e.Station, nil
	}
	return nil, &NotLoadedError{edge: "station"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockSummaryEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[2] {
		if e.Store == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockSummaryEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[3] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockSummaryEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[4] {
		if e.Cabinet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StockSummary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stocksummary.FieldID, stocksummary.FieldEnterpriseID, stocksummary.FieldStationID, stocksummary.FieldStoreID, stocksummary.FieldRiderID, stocksummary.FieldCabinetID, stocksummary.FieldNum, stocksummary.FieldTodayNum, stocksummary.FieldOutboundNum, stocksummary.FieldInboundNum, stocksummary.FieldInRiderNum:
			values[i] = new(sql.NullInt64)
		case stocksummary.FieldDate, stocksummary.FieldModel, stocksummary.FieldMaterial:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StockSummary fields.
func (ss *StockSummary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stocksummary.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = uint64(value.Int64)
		case stocksummary.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				ss.EnterpriseID = new(uint64)
				*ss.EnterpriseID = uint64(value.Int64)
			}
		case stocksummary.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				ss.StationID = new(uint64)
				*ss.StationID = uint64(value.Int64)
			}
		case stocksummary.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				ss.StoreID = new(uint64)
				*ss.StoreID = uint64(value.Int64)
			}
		case stocksummary.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				ss.RiderID = new(uint64)
				*ss.RiderID = uint64(value.Int64)
			}
		case stocksummary.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				ss.CabinetID = new(uint64)
				*ss.CabinetID = uint64(value.Int64)
			}
		case stocksummary.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ss.Date = value.String
			}
		case stocksummary.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				ss.Model = value.String
			}
		case stocksummary.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				ss.Num = int(value.Int64)
			}
		case stocksummary.FieldTodayNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field today_num", values[i])
			} else if value.Valid {
				ss.TodayNum = int(value.Int64)
			}
		case stocksummary.FieldOutboundNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field outbound_num", values[i])
			} else if value.Valid {
				ss.OutboundNum = int(value.Int64)
			}
		case stocksummary.FieldInboundNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field inbound_num", values[i])
			} else if value.Valid {
				ss.InboundNum = int(value.Int64)
			}
		case stocksummary.FieldInRiderNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field in_rider_num", values[i])
			} else if value.Valid {
				ss.InRiderNum = int(value.Int64)
			}
		case stocksummary.FieldMaterial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material", values[i])
			} else if value.Valid {
				ss.Material = stocksummary.Material(value.String)
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StockSummary.
// This includes values selected through modifiers, order, etc.
func (ss *StockSummary) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QueryEnterprise queries the "enterprise" edge of the StockSummary entity.
func (ss *StockSummary) QueryEnterprise() *EnterpriseQuery {
	return NewStockSummaryClient(ss.config).QueryEnterprise(ss)
}

// QueryStation queries the "station" edge of the StockSummary entity.
func (ss *StockSummary) QueryStation() *EnterpriseStationQuery {
	return NewStockSummaryClient(ss.config).QueryStation(ss)
}

// QueryStore queries the "store" edge of the StockSummary entity.
func (ss *StockSummary) QueryStore() *StoreQuery {
	return NewStockSummaryClient(ss.config).QueryStore(ss)
}

// QueryRider queries the "rider" edge of the StockSummary entity.
func (ss *StockSummary) QueryRider() *RiderQuery {
	return NewStockSummaryClient(ss.config).QueryRider(ss)
}

// QueryCabinet queries the "cabinet" edge of the StockSummary entity.
func (ss *StockSummary) QueryCabinet() *CabinetQuery {
	return NewStockSummaryClient(ss.config).QueryCabinet(ss)
}

// Update returns a builder for updating this StockSummary.
// Note that you need to call StockSummary.Unwrap() before calling this method if this StockSummary
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *StockSummary) Update() *StockSummaryUpdateOne {
	return NewStockSummaryClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the StockSummary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *StockSummary) Unwrap() *StockSummary {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: StockSummary is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *StockSummary) String() string {
	var builder strings.Builder
	builder.WriteString("StockSummary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	if v := ss.EnterpriseID; v != nil {
		builder.WriteString("enterprise_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ss.StationID; v != nil {
		builder.WriteString("station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ss.StoreID; v != nil {
		builder.WriteString("store_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ss.RiderID; v != nil {
		builder.WriteString("rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ss.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(ss.Date)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(ss.Model)
	builder.WriteString(", ")
	builder.WriteString("num=")
	builder.WriteString(fmt.Sprintf("%v", ss.Num))
	builder.WriteString(", ")
	builder.WriteString("today_num=")
	builder.WriteString(fmt.Sprintf("%v", ss.TodayNum))
	builder.WriteString(", ")
	builder.WriteString("outbound_num=")
	builder.WriteString(fmt.Sprintf("%v", ss.OutboundNum))
	builder.WriteString(", ")
	builder.WriteString("inbound_num=")
	builder.WriteString(fmt.Sprintf("%v", ss.InboundNum))
	builder.WriteString(", ")
	builder.WriteString("in_rider_num=")
	builder.WriteString(fmt.Sprintf("%v", ss.InRiderNum))
	builder.WriteString(", ")
	builder.WriteString("material=")
	builder.WriteString(fmt.Sprintf("%v", ss.Material))
	builder.WriteByte(')')
	return builder.String()
}

// StockSummaries is a parsable slice of StockSummary.
type StockSummaries []*StockSummary
