// Code generated by ent, DO NOT EDIT.

package promotionmember

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotionmember type in the database.
	Label = "promotion_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldLevelID holds the string denoting the level_id field in the database.
	FieldLevelID = "level_id"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldFrozen holds the string denoting the frozen field in the database.
	FieldFrozen = "frozen"
	// FieldTotalGrowthValue holds the string denoting the total_growth_value field in the database.
	FieldTotalGrowthValue = "total_growth_value"
	// FieldCurrentGrowthValue holds the string denoting the current_growth_value field in the database.
	FieldCurrentGrowthValue = "current_growth_value"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldPersonID holds the string denoting the person_id field in the database.
	FieldPersonID = "person_id"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldNewSignCount holds the string denoting the new_sign_count field in the database.
	FieldNewSignCount = "new_sign_count"
	// FieldRenewCount holds the string denoting the renew_count field in the database.
	FieldRenewCount = "renew_count"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeLevel holds the string denoting the level edge name in mutations.
	EdgeLevel = "level"
	// EdgeReferring holds the string denoting the referring edge name in mutations.
	EdgeReferring = "referring"
	// EdgeReferred holds the string denoting the referred edge name in mutations.
	EdgeReferred = "referred"
	// EdgePerson holds the string denoting the person edge name in mutations.
	EdgePerson = "person"
	// EdgeCards holds the string denoting the cards edge name in mutations.
	EdgeCards = "cards"
	// EdgeCommissions holds the string denoting the commissions edge name in mutations.
	EdgeCommissions = "commissions"
	// Table holds the table name of the promotionmember in the database.
	Table = "promotion_member"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "promotion_member"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// LevelTable is the table that holds the level relation/edge.
	LevelTable = "promotion_member"
	// LevelInverseTable is the table name for the PromotionLevel entity.
	// It exists in this package in order to avoid circular dependency with the "promotionlevel" package.
	LevelInverseTable = "promotion_level"
	// LevelColumn is the table column denoting the level relation/edge.
	LevelColumn = "level_id"
	// ReferringTable is the table that holds the referring relation/edge.
	ReferringTable = "promotion_referrals"
	// ReferringInverseTable is the table name for the PromotionReferrals entity.
	// It exists in this package in order to avoid circular dependency with the "promotionreferrals" package.
	ReferringInverseTable = "promotion_referrals"
	// ReferringColumn is the table column denoting the referring relation/edge.
	ReferringColumn = "referring_member_id"
	// ReferredTable is the table that holds the referred relation/edge.
	ReferredTable = "promotion_referrals"
	// ReferredInverseTable is the table name for the PromotionReferrals entity.
	// It exists in this package in order to avoid circular dependency with the "promotionreferrals" package.
	ReferredInverseTable = "promotion_referrals"
	// ReferredColumn is the table column denoting the referred relation/edge.
	ReferredColumn = "referred_member_id"
	// PersonTable is the table that holds the person relation/edge.
	PersonTable = "promotion_member"
	// PersonInverseTable is the table name for the PromotionPerson entity.
	// It exists in this package in order to avoid circular dependency with the "promotionperson" package.
	PersonInverseTable = "promotion_person"
	// PersonColumn is the table column denoting the person relation/edge.
	PersonColumn = "person_id"
	// CardsTable is the table that holds the cards relation/edge.
	CardsTable = "promotion_bank_card"
	// CardsInverseTable is the table name for the PromotionBankCard entity.
	// It exists in this package in order to avoid circular dependency with the "promotionbankcard" package.
	CardsInverseTable = "promotion_bank_card"
	// CardsColumn is the table column denoting the cards relation/edge.
	CardsColumn = "member_id"
	// CommissionsTable is the table that holds the commissions relation/edge.
	CommissionsTable = "promotion_member_commission"
	// CommissionsInverseTable is the table name for the PromotionMemberCommission entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmembercommission" package.
	CommissionsInverseTable = "promotion_member_commission"
	// CommissionsColumn is the table column denoting the commissions relation/edge.
	CommissionsColumn = "member_id"
)

// Columns holds all SQL columns for promotionmember fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldRiderID,
	FieldLevelID,
	FieldPhone,
	FieldName,
	FieldBalance,
	FieldFrozen,
	FieldTotalGrowthValue,
	FieldCurrentGrowthValue,
	FieldEnable,
	FieldPersonID,
	FieldAvatarURL,
	FieldNewSignCount,
	FieldRenewCount,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance float64
	// DefaultFrozen holds the default value on creation for the "frozen" field.
	DefaultFrozen float64
	// DefaultTotalGrowthValue holds the default value on creation for the "total_growth_value" field.
	DefaultTotalGrowthValue uint64
	// DefaultCurrentGrowthValue holds the default value on creation for the "current_growth_value" field.
	DefaultCurrentGrowthValue uint64
	// DefaultEnable holds the default value on creation for the "enable" field.
	DefaultEnable bool
	// DefaultNewSignCount holds the default value on creation for the "new_sign_count" field.
	DefaultNewSignCount uint64
	// DefaultRenewCount holds the default value on creation for the "renew_count" field.
	DefaultRenewCount uint64
)

// OrderOption defines the ordering options for the PromotionMember queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByLevelID orders the results by the level_id field.
func ByLevelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelID, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByFrozen orders the results by the frozen field.
func ByFrozen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrozen, opts...).ToFunc()
}

// ByTotalGrowthValue orders the results by the total_growth_value field.
func ByTotalGrowthValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalGrowthValue, opts...).ToFunc()
}

// ByCurrentGrowthValue orders the results by the current_growth_value field.
func ByCurrentGrowthValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentGrowthValue, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByPersonID orders the results by the person_id field.
func ByPersonID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonID, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByNewSignCount orders the results by the new_sign_count field.
func ByNewSignCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewSignCount, opts...).ToFunc()
}

// ByRenewCount orders the results by the renew_count field.
func ByRenewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenewCount, opts...).ToFunc()
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByLevelField orders the results by level field.
func ByLevelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLevelStep(), sql.OrderByField(field, opts...))
	}
}

// ByReferringCount orders the results by referring count.
func ByReferringCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReferringStep(), opts...)
	}
}

// ByReferring orders the results by referring terms.
func ByReferring(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferringStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReferredField orders the results by referred field.
func ByReferredField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferredStep(), sql.OrderByField(field, opts...))
	}
}

// ByPersonField orders the results by person field.
func ByPersonField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonStep(), sql.OrderByField(field, opts...))
	}
}

// ByCardsCount orders the results by cards count.
func ByCardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCardsStep(), opts...)
	}
}

// ByCards orders the results by cards terms.
func ByCards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommissionsCount orders the results by commissions count.
func ByCommissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommissionsStep(), opts...)
	}
}

// ByCommissions orders the results by commissions terms.
func ByCommissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newLevelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LevelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LevelTable, LevelColumn),
	)
}
func newReferringStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferringInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReferringTable, ReferringColumn),
	)
}
func newReferredStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferredInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ReferredTable, ReferredColumn),
	)
}
func newPersonStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
	)
}
func newCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CardsTable, CardsColumn),
	)
}
func newCommissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommissionsTable, CommissionsColumn),
	)
}
