// Code generated by ent, DO NOT EDIT.

package promotionmember

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldRemark, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldRiderID, v))
}

// LevelID applies equality check predicate on the "level_id" field. It's identical to LevelIDEQ.
func LevelID(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldLevelID, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldPhone, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldName, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldBalance, v))
}

// Frozen applies equality check predicate on the "frozen" field. It's identical to FrozenEQ.
func Frozen(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldFrozen, v))
}

// TotalGrowthValue applies equality check predicate on the "total_growth_value" field. It's identical to TotalGrowthValueEQ.
func TotalGrowthValue(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldTotalGrowthValue, v))
}

// CurrentGrowthValue applies equality check predicate on the "current_growth_value" field. It's identical to CurrentGrowthValueEQ.
func CurrentGrowthValue(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldCurrentGrowthValue, v))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldEnable, v))
}

// PersonID applies equality check predicate on the "person_id" field. It's identical to PersonIDEQ.
func PersonID(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldPersonID, v))
}

// AvatarURL applies equality check predicate on the "avatar_url" field. It's identical to AvatarURLEQ.
func AvatarURL(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldAvatarURL, v))
}

// NewSignCount applies equality check predicate on the "new_sign_count" field. It's identical to NewSignCountEQ.
func NewSignCount(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldNewSignCount, v))
}

// RenewCount applies equality check predicate on the "renew_count" field. It's identical to RenewCountEQ.
func RenewCount(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldRenewCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldContainsFold(FieldRemark, v))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldRiderID))
}

// LevelIDEQ applies the EQ predicate on the "level_id" field.
func LevelIDEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldLevelID, v))
}

// LevelIDNEQ applies the NEQ predicate on the "level_id" field.
func LevelIDNEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldLevelID, v))
}

// LevelIDIn applies the In predicate on the "level_id" field.
func LevelIDIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldLevelID, vs...))
}

// LevelIDNotIn applies the NotIn predicate on the "level_id" field.
func LevelIDNotIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldLevelID, vs...))
}

// LevelIDIsNil applies the IsNil predicate on the "level_id" field.
func LevelIDIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldLevelID))
}

// LevelIDNotNil applies the NotNil predicate on the "level_id" field.
func LevelIDNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldLevelID))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldContainsFold(FieldPhone, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldContainsFold(FieldName, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldBalance, v))
}

// FrozenEQ applies the EQ predicate on the "frozen" field.
func FrozenEQ(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldFrozen, v))
}

// FrozenNEQ applies the NEQ predicate on the "frozen" field.
func FrozenNEQ(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldFrozen, v))
}

// FrozenIn applies the In predicate on the "frozen" field.
func FrozenIn(vs ...float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldFrozen, vs...))
}

// FrozenNotIn applies the NotIn predicate on the "frozen" field.
func FrozenNotIn(vs ...float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldFrozen, vs...))
}

// FrozenGT applies the GT predicate on the "frozen" field.
func FrozenGT(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldFrozen, v))
}

// FrozenGTE applies the GTE predicate on the "frozen" field.
func FrozenGTE(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldFrozen, v))
}

// FrozenLT applies the LT predicate on the "frozen" field.
func FrozenLT(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldFrozen, v))
}

// FrozenLTE applies the LTE predicate on the "frozen" field.
func FrozenLTE(v float64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldFrozen, v))
}

// TotalGrowthValueEQ applies the EQ predicate on the "total_growth_value" field.
func TotalGrowthValueEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldTotalGrowthValue, v))
}

// TotalGrowthValueNEQ applies the NEQ predicate on the "total_growth_value" field.
func TotalGrowthValueNEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldTotalGrowthValue, v))
}

// TotalGrowthValueIn applies the In predicate on the "total_growth_value" field.
func TotalGrowthValueIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldTotalGrowthValue, vs...))
}

// TotalGrowthValueNotIn applies the NotIn predicate on the "total_growth_value" field.
func TotalGrowthValueNotIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldTotalGrowthValue, vs...))
}

// TotalGrowthValueGT applies the GT predicate on the "total_growth_value" field.
func TotalGrowthValueGT(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldTotalGrowthValue, v))
}

// TotalGrowthValueGTE applies the GTE predicate on the "total_growth_value" field.
func TotalGrowthValueGTE(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldTotalGrowthValue, v))
}

// TotalGrowthValueLT applies the LT predicate on the "total_growth_value" field.
func TotalGrowthValueLT(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldTotalGrowthValue, v))
}

// TotalGrowthValueLTE applies the LTE predicate on the "total_growth_value" field.
func TotalGrowthValueLTE(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldTotalGrowthValue, v))
}

// CurrentGrowthValueEQ applies the EQ predicate on the "current_growth_value" field.
func CurrentGrowthValueEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldCurrentGrowthValue, v))
}

// CurrentGrowthValueNEQ applies the NEQ predicate on the "current_growth_value" field.
func CurrentGrowthValueNEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldCurrentGrowthValue, v))
}

// CurrentGrowthValueIn applies the In predicate on the "current_growth_value" field.
func CurrentGrowthValueIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldCurrentGrowthValue, vs...))
}

// CurrentGrowthValueNotIn applies the NotIn predicate on the "current_growth_value" field.
func CurrentGrowthValueNotIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldCurrentGrowthValue, vs...))
}

// CurrentGrowthValueGT applies the GT predicate on the "current_growth_value" field.
func CurrentGrowthValueGT(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldCurrentGrowthValue, v))
}

// CurrentGrowthValueGTE applies the GTE predicate on the "current_growth_value" field.
func CurrentGrowthValueGTE(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldCurrentGrowthValue, v))
}

// CurrentGrowthValueLT applies the LT predicate on the "current_growth_value" field.
func CurrentGrowthValueLT(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldCurrentGrowthValue, v))
}

// CurrentGrowthValueLTE applies the LTE predicate on the "current_growth_value" field.
func CurrentGrowthValueLTE(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldCurrentGrowthValue, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldEnable, v))
}

// PersonIDEQ applies the EQ predicate on the "person_id" field.
func PersonIDEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldPersonID, v))
}

// PersonIDNEQ applies the NEQ predicate on the "person_id" field.
func PersonIDNEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldPersonID, v))
}

// PersonIDIn applies the In predicate on the "person_id" field.
func PersonIDIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldPersonID, vs...))
}

// PersonIDNotIn applies the NotIn predicate on the "person_id" field.
func PersonIDNotIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldPersonID, vs...))
}

// PersonIDIsNil applies the IsNil predicate on the "person_id" field.
func PersonIDIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldPersonID))
}

// PersonIDNotNil applies the NotNil predicate on the "person_id" field.
func PersonIDNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldPersonID))
}

// AvatarURLEQ applies the EQ predicate on the "avatar_url" field.
func AvatarURLEQ(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldAvatarURL, v))
}

// AvatarURLNEQ applies the NEQ predicate on the "avatar_url" field.
func AvatarURLNEQ(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldAvatarURL, v))
}

// AvatarURLIn applies the In predicate on the "avatar_url" field.
func AvatarURLIn(vs ...string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldAvatarURL, vs...))
}

// AvatarURLNotIn applies the NotIn predicate on the "avatar_url" field.
func AvatarURLNotIn(vs ...string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldAvatarURL, vs...))
}

// AvatarURLGT applies the GT predicate on the "avatar_url" field.
func AvatarURLGT(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldAvatarURL, v))
}

// AvatarURLGTE applies the GTE predicate on the "avatar_url" field.
func AvatarURLGTE(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldAvatarURL, v))
}

// AvatarURLLT applies the LT predicate on the "avatar_url" field.
func AvatarURLLT(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldAvatarURL, v))
}

// AvatarURLLTE applies the LTE predicate on the "avatar_url" field.
func AvatarURLLTE(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldAvatarURL, v))
}

// AvatarURLContains applies the Contains predicate on the "avatar_url" field.
func AvatarURLContains(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldContains(FieldAvatarURL, v))
}

// AvatarURLHasPrefix applies the HasPrefix predicate on the "avatar_url" field.
func AvatarURLHasPrefix(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldHasPrefix(FieldAvatarURL, v))
}

// AvatarURLHasSuffix applies the HasSuffix predicate on the "avatar_url" field.
func AvatarURLHasSuffix(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldHasSuffix(FieldAvatarURL, v))
}

// AvatarURLIsNil applies the IsNil predicate on the "avatar_url" field.
func AvatarURLIsNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIsNull(FieldAvatarURL))
}

// AvatarURLNotNil applies the NotNil predicate on the "avatar_url" field.
func AvatarURLNotNil() predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotNull(FieldAvatarURL))
}

// AvatarURLEqualFold applies the EqualFold predicate on the "avatar_url" field.
func AvatarURLEqualFold(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEqualFold(FieldAvatarURL, v))
}

// AvatarURLContainsFold applies the ContainsFold predicate on the "avatar_url" field.
func AvatarURLContainsFold(v string) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldContainsFold(FieldAvatarURL, v))
}

// NewSignCountEQ applies the EQ predicate on the "new_sign_count" field.
func NewSignCountEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldNewSignCount, v))
}

// NewSignCountNEQ applies the NEQ predicate on the "new_sign_count" field.
func NewSignCountNEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldNewSignCount, v))
}

// NewSignCountIn applies the In predicate on the "new_sign_count" field.
func NewSignCountIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldNewSignCount, vs...))
}

// NewSignCountNotIn applies the NotIn predicate on the "new_sign_count" field.
func NewSignCountNotIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldNewSignCount, vs...))
}

// NewSignCountGT applies the GT predicate on the "new_sign_count" field.
func NewSignCountGT(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldNewSignCount, v))
}

// NewSignCountGTE applies the GTE predicate on the "new_sign_count" field.
func NewSignCountGTE(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldNewSignCount, v))
}

// NewSignCountLT applies the LT predicate on the "new_sign_count" field.
func NewSignCountLT(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldNewSignCount, v))
}

// NewSignCountLTE applies the LTE predicate on the "new_sign_count" field.
func NewSignCountLTE(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldNewSignCount, v))
}

// RenewCountEQ applies the EQ predicate on the "renew_count" field.
func RenewCountEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldEQ(FieldRenewCount, v))
}

// RenewCountNEQ applies the NEQ predicate on the "renew_count" field.
func RenewCountNEQ(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNEQ(FieldRenewCount, v))
}

// RenewCountIn applies the In predicate on the "renew_count" field.
func RenewCountIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldIn(FieldRenewCount, vs...))
}

// RenewCountNotIn applies the NotIn predicate on the "renew_count" field.
func RenewCountNotIn(vs ...uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldNotIn(FieldRenewCount, vs...))
}

// RenewCountGT applies the GT predicate on the "renew_count" field.
func RenewCountGT(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGT(FieldRenewCount, v))
}

// RenewCountGTE applies the GTE predicate on the "renew_count" field.
func RenewCountGTE(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldGTE(FieldRenewCount, v))
}

// RenewCountLT applies the LT predicate on the "renew_count" field.
func RenewCountLT(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLT(FieldRenewCount, v))
}

// RenewCountLTE applies the LTE predicate on the "renew_count" field.
func RenewCountLTE(v uint64) predicate.PromotionMember {
	return predicate.PromotionMember(sql.FieldLTE(FieldRenewCount, v))
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLevel applies the HasEdge predicate on the "level" edge.
func HasLevel() predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LevelTable, LevelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLevelWith applies the HasEdge predicate on the "level" edge with a given conditions (other predicates).
func HasLevelWith(preds ...predicate.PromotionLevel) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := newLevelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReferring applies the HasEdge predicate on the "referring" edge.
func HasReferring() predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReferringTable, ReferringColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferringWith applies the HasEdge predicate on the "referring" edge with a given conditions (other predicates).
func HasReferringWith(preds ...predicate.PromotionReferrals) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := newReferringStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReferred applies the HasEdge predicate on the "referred" edge.
func HasReferred() predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ReferredTable, ReferredColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferredWith applies the HasEdge predicate on the "referred" edge with a given conditions (other predicates).
func HasReferredWith(preds ...predicate.PromotionReferrals) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := newReferredStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPerson applies the HasEdge predicate on the "person" edge.
func HasPerson() predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PersonTable, PersonColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonWith applies the HasEdge predicate on the "person" edge with a given conditions (other predicates).
func HasPersonWith(preds ...predicate.PromotionPerson) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := newPersonStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCards applies the HasEdge predicate on the "cards" edge.
func HasCards() predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CardsTable, CardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardsWith applies the HasEdge predicate on the "cards" edge with a given conditions (other predicates).
func HasCardsWith(preds ...predicate.PromotionBankCard) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := newCardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommissions applies the HasEdge predicate on the "commissions" edge.
func HasCommissions() predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommissionsTable, CommissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommissionsWith applies the HasEdge predicate on the "commissions" edge with a given conditions (other predicates).
func HasCommissionsWith(preds ...predicate.PromotionMemberCommission) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		step := newCommissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PromotionMember) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PromotionMember) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PromotionMember) predicate.PromotionMember {
	return predicate.PromotionMember(func(s *sql.Selector) {
		p(s.Not())
	})
}
