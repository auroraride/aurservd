// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
)

// StoreGroupUpdate is the builder for updating StoreGroup entities.
type StoreGroupUpdate struct {
	config
	hooks     []Hook
	mutation  *StoreGroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StoreGroupUpdate builder.
func (sgu *StoreGroupUpdate) Where(ps ...predicate.StoreGroup) *StoreGroupUpdate {
	sgu.mutation.Where(ps...)
	return sgu
}

// SetUpdatedAt sets the "updated_at" field.
func (sgu *StoreGroupUpdate) SetUpdatedAt(t time.Time) *StoreGroupUpdate {
	sgu.mutation.SetUpdatedAt(t)
	return sgu
}

// SetDeletedAt sets the "deleted_at" field.
func (sgu *StoreGroupUpdate) SetDeletedAt(t time.Time) *StoreGroupUpdate {
	sgu.mutation.SetDeletedAt(t)
	return sgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sgu *StoreGroupUpdate) SetNillableDeletedAt(t *time.Time) *StoreGroupUpdate {
	if t != nil {
		sgu.SetDeletedAt(*t)
	}
	return sgu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sgu *StoreGroupUpdate) ClearDeletedAt() *StoreGroupUpdate {
	sgu.mutation.ClearDeletedAt()
	return sgu
}

// SetLastModifier sets the "last_modifier" field.
func (sgu *StoreGroupUpdate) SetLastModifier(m *model.Modifier) *StoreGroupUpdate {
	sgu.mutation.SetLastModifier(m)
	return sgu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (sgu *StoreGroupUpdate) ClearLastModifier() *StoreGroupUpdate {
	sgu.mutation.ClearLastModifier()
	return sgu
}

// SetRemark sets the "remark" field.
func (sgu *StoreGroupUpdate) SetRemark(s string) *StoreGroupUpdate {
	sgu.mutation.SetRemark(s)
	return sgu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sgu *StoreGroupUpdate) SetNillableRemark(s *string) *StoreGroupUpdate {
	if s != nil {
		sgu.SetRemark(*s)
	}
	return sgu
}

// ClearRemark clears the value of the "remark" field.
func (sgu *StoreGroupUpdate) ClearRemark() *StoreGroupUpdate {
	sgu.mutation.ClearRemark()
	return sgu
}

// SetName sets the "name" field.
func (sgu *StoreGroupUpdate) SetName(s string) *StoreGroupUpdate {
	sgu.mutation.SetName(s)
	return sgu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sgu *StoreGroupUpdate) SetNillableName(s *string) *StoreGroupUpdate {
	if s != nil {
		sgu.SetName(*s)
	}
	return sgu
}

// Mutation returns the StoreGroupMutation object of the builder.
func (sgu *StoreGroupUpdate) Mutation() *StoreGroupMutation {
	return sgu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgu *StoreGroupUpdate) Save(ctx context.Context) (int, error) {
	if err := sgu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sgu.sqlSave, sgu.mutation, sgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sgu *StoreGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := sgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgu *StoreGroupUpdate) Exec(ctx context.Context) error {
	_, err := sgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgu *StoreGroupUpdate) ExecX(ctx context.Context) {
	if err := sgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgu *StoreGroupUpdate) defaults() error {
	if _, ok := sgu.mutation.UpdatedAt(); !ok {
		if storegroup.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized storegroup.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := storegroup.UpdateDefaultUpdatedAt()
		sgu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sgu *StoreGroupUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoreGroupUpdate {
	sgu.modifiers = append(sgu.modifiers, modifiers...)
	return sgu
}

func (sgu *StoreGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(storegroup.Table, storegroup.Columns, sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64))
	if ps := sgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgu.mutation.UpdatedAt(); ok {
		_spec.SetField(storegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sgu.mutation.DeletedAt(); ok {
		_spec.SetField(storegroup.FieldDeletedAt, field.TypeTime, value)
	}
	if sgu.mutation.DeletedAtCleared() {
		_spec.ClearField(storegroup.FieldDeletedAt, field.TypeTime)
	}
	if sgu.mutation.CreatorCleared() {
		_spec.ClearField(storegroup.FieldCreator, field.TypeJSON)
	}
	if value, ok := sgu.mutation.LastModifier(); ok {
		_spec.SetField(storegroup.FieldLastModifier, field.TypeJSON, value)
	}
	if sgu.mutation.LastModifierCleared() {
		_spec.ClearField(storegroup.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := sgu.mutation.Remark(); ok {
		_spec.SetField(storegroup.FieldRemark, field.TypeString, value)
	}
	if sgu.mutation.RemarkCleared() {
		_spec.ClearField(storegroup.FieldRemark, field.TypeString)
	}
	if value, ok := sgu.mutation.Name(); ok {
		_spec.SetField(storegroup.FieldName, field.TypeString, value)
	}
	_spec.AddModifiers(sgu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sgu.mutation.done = true
	return n, nil
}

// StoreGroupUpdateOne is the builder for updating a single StoreGroup entity.
type StoreGroupUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StoreGroupMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sguo *StoreGroupUpdateOne) SetUpdatedAt(t time.Time) *StoreGroupUpdateOne {
	sguo.mutation.SetUpdatedAt(t)
	return sguo
}

// SetDeletedAt sets the "deleted_at" field.
func (sguo *StoreGroupUpdateOne) SetDeletedAt(t time.Time) *StoreGroupUpdateOne {
	sguo.mutation.SetDeletedAt(t)
	return sguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sguo *StoreGroupUpdateOne) SetNillableDeletedAt(t *time.Time) *StoreGroupUpdateOne {
	if t != nil {
		sguo.SetDeletedAt(*t)
	}
	return sguo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sguo *StoreGroupUpdateOne) ClearDeletedAt() *StoreGroupUpdateOne {
	sguo.mutation.ClearDeletedAt()
	return sguo
}

// SetLastModifier sets the "last_modifier" field.
func (sguo *StoreGroupUpdateOne) SetLastModifier(m *model.Modifier) *StoreGroupUpdateOne {
	sguo.mutation.SetLastModifier(m)
	return sguo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (sguo *StoreGroupUpdateOne) ClearLastModifier() *StoreGroupUpdateOne {
	sguo.mutation.ClearLastModifier()
	return sguo
}

// SetRemark sets the "remark" field.
func (sguo *StoreGroupUpdateOne) SetRemark(s string) *StoreGroupUpdateOne {
	sguo.mutation.SetRemark(s)
	return sguo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sguo *StoreGroupUpdateOne) SetNillableRemark(s *string) *StoreGroupUpdateOne {
	if s != nil {
		sguo.SetRemark(*s)
	}
	return sguo
}

// ClearRemark clears the value of the "remark" field.
func (sguo *StoreGroupUpdateOne) ClearRemark() *StoreGroupUpdateOne {
	sguo.mutation.ClearRemark()
	return sguo
}

// SetName sets the "name" field.
func (sguo *StoreGroupUpdateOne) SetName(s string) *StoreGroupUpdateOne {
	sguo.mutation.SetName(s)
	return sguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sguo *StoreGroupUpdateOne) SetNillableName(s *string) *StoreGroupUpdateOne {
	if s != nil {
		sguo.SetName(*s)
	}
	return sguo
}

// Mutation returns the StoreGroupMutation object of the builder.
func (sguo *StoreGroupUpdateOne) Mutation() *StoreGroupMutation {
	return sguo.mutation
}

// Where appends a list predicates to the StoreGroupUpdate builder.
func (sguo *StoreGroupUpdateOne) Where(ps ...predicate.StoreGroup) *StoreGroupUpdateOne {
	sguo.mutation.Where(ps...)
	return sguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguo *StoreGroupUpdateOne) Select(field string, fields ...string) *StoreGroupUpdateOne {
	sguo.fields = append([]string{field}, fields...)
	return sguo
}

// Save executes the query and returns the updated StoreGroup entity.
func (sguo *StoreGroupUpdateOne) Save(ctx context.Context) (*StoreGroup, error) {
	if err := sguo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sguo.sqlSave, sguo.mutation, sguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sguo *StoreGroupUpdateOne) SaveX(ctx context.Context) *StoreGroup {
	node, err := sguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguo *StoreGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := sguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguo *StoreGroupUpdateOne) ExecX(ctx context.Context) {
	if err := sguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sguo *StoreGroupUpdateOne) defaults() error {
	if _, ok := sguo.mutation.UpdatedAt(); !ok {
		if storegroup.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized storegroup.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := storegroup.UpdateDefaultUpdatedAt()
		sguo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sguo *StoreGroupUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoreGroupUpdateOne {
	sguo.modifiers = append(sguo.modifiers, modifiers...)
	return sguo
}

func (sguo *StoreGroupUpdateOne) sqlSave(ctx context.Context) (_node *StoreGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(storegroup.Table, storegroup.Columns, sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64))
	id, ok := sguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StoreGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storegroup.FieldID)
		for _, f := range fields {
			if !storegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguo.mutation.UpdatedAt(); ok {
		_spec.SetField(storegroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sguo.mutation.DeletedAt(); ok {
		_spec.SetField(storegroup.FieldDeletedAt, field.TypeTime, value)
	}
	if sguo.mutation.DeletedAtCleared() {
		_spec.ClearField(storegroup.FieldDeletedAt, field.TypeTime)
	}
	if sguo.mutation.CreatorCleared() {
		_spec.ClearField(storegroup.FieldCreator, field.TypeJSON)
	}
	if value, ok := sguo.mutation.LastModifier(); ok {
		_spec.SetField(storegroup.FieldLastModifier, field.TypeJSON, value)
	}
	if sguo.mutation.LastModifierCleared() {
		_spec.ClearField(storegroup.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := sguo.mutation.Remark(); ok {
		_spec.SetField(storegroup.FieldRemark, field.TypeString, value)
	}
	if sguo.mutation.RemarkCleared() {
		_spec.ClearField(storegroup.FieldRemark, field.TypeString)
	}
	if value, ok := sguo.mutation.Name(); ok {
		_spec.SetField(storegroup.FieldName, field.TypeString, value)
	}
	_spec.AddModifiers(sguo.modifiers...)
	_node = &StoreGroup{config: sguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sguo.mutation.done = true
	return _node, nil
}
