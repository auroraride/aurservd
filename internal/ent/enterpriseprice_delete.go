// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterprisePriceDelete is the builder for deleting a EnterprisePrice entity.
type EnterprisePriceDelete struct {
	config
	hooks    []Hook
	mutation *EnterprisePriceMutation
}

// Where appends a list predicates to the EnterprisePriceDelete builder.
func (epd *EnterprisePriceDelete) Where(ps ...predicate.EnterprisePrice) *EnterprisePriceDelete {
	epd.mutation.Where(ps...)
	return epd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (epd *EnterprisePriceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, EnterprisePriceMutation](ctx, epd.sqlExec, epd.mutation, epd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (epd *EnterprisePriceDelete) ExecX(ctx context.Context) int {
	n, err := epd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (epd *EnterprisePriceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: enterpriseprice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseprice.FieldID,
			},
		},
	}
	if ps := epd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, epd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	epd.mutation.done = true
	return affected, err
}

// EnterprisePriceDeleteOne is the builder for deleting a single EnterprisePrice entity.
type EnterprisePriceDeleteOne struct {
	epd *EnterprisePriceDelete
}

// Exec executes the deletion query.
func (epdo *EnterprisePriceDeleteOne) Exec(ctx context.Context) error {
	n, err := epdo.epd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{enterpriseprice.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (epdo *EnterprisePriceDeleteOne) ExecX(ctx context.Context) {
	epdo.epd.ExecX(ctx)
}
