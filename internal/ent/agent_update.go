// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks     []Hook
	mutation  *AgentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AgentUpdate) SetUpdatedAt(t time.Time) *AgentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AgentUpdate) SetDeletedAt(t time.Time) *AgentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDeletedAt(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AgentUpdate) ClearDeletedAt() *AgentUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetLastModifier sets the "last_modifier" field.
func (au *AgentUpdate) SetLastModifier(m *model.Modifier) *AgentUpdate {
	au.mutation.SetLastModifier(m)
	return au
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (au *AgentUpdate) ClearLastModifier() *AgentUpdate {
	au.mutation.ClearLastModifier()
	return au
}

// SetRemark sets the "remark" field.
func (au *AgentUpdate) SetRemark(s string) *AgentUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AgentUpdate) SetNillableRemark(s *string) *AgentUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// ClearRemark clears the value of the "remark" field.
func (au *AgentUpdate) ClearRemark() *AgentUpdate {
	au.mutation.ClearRemark()
	return au
}

// SetEnterpriseID sets the "enterprise_id" field.
func (au *AgentUpdate) SetEnterpriseID(u uint64) *AgentUpdate {
	au.mutation.SetEnterpriseID(u)
	return au
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (au *AgentUpdate) SetNillableEnterpriseID(u *uint64) *AgentUpdate {
	if u != nil {
		au.SetEnterpriseID(*u)
	}
	return au
}

// SetName sets the "name" field.
func (au *AgentUpdate) SetName(s string) *AgentUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AgentUpdate) SetNillableName(s *string) *AgentUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetPhone sets the "phone" field.
func (au *AgentUpdate) SetPhone(s string) *AgentUpdate {
	au.mutation.SetPhone(s)
	return au
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (au *AgentUpdate) SetNillablePhone(s *string) *AgentUpdate {
	if s != nil {
		au.SetPhone(*s)
	}
	return au
}

// SetSuper sets the "super" field.
func (au *AgentUpdate) SetSuper(b bool) *AgentUpdate {
	au.mutation.SetSuper(b)
	return au
}

// SetNillableSuper sets the "super" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSuper(b *bool) *AgentUpdate {
	if b != nil {
		au.SetSuper(*b)
	}
	return au
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (au *AgentUpdate) SetEnterprise(e *Enterprise) *AgentUpdate {
	return au.SetEnterpriseID(e.ID)
}

// AddStationIDs adds the "stations" edge to the EnterpriseStation entity by IDs.
func (au *AgentUpdate) AddStationIDs(ids ...uint64) *AgentUpdate {
	au.mutation.AddStationIDs(ids...)
	return au
}

// AddStations adds the "stations" edges to the EnterpriseStation entity.
func (au *AgentUpdate) AddStations(e ...*EnterpriseStation) *AgentUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddStationIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (au *AgentUpdate) ClearEnterprise() *AgentUpdate {
	au.mutation.ClearEnterprise()
	return au
}

// ClearStations clears all "stations" edges to the EnterpriseStation entity.
func (au *AgentUpdate) ClearStations() *AgentUpdate {
	au.mutation.ClearStations()
	return au
}

// RemoveStationIDs removes the "stations" edge to EnterpriseStation entities by IDs.
func (au *AgentUpdate) RemoveStationIDs(ids ...uint64) *AgentUpdate {
	au.mutation.RemoveStationIDs(ids...)
	return au
}

// RemoveStations removes "stations" edges to EnterpriseStation entities.
func (au *AgentUpdate) RemoveStations(e ...*EnterpriseStation) *AgentUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveStationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AgentUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if agent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agent.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AgentUpdate) check() error {
	if _, ok := au.mutation.EnterpriseID(); au.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Agent.enterprise"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AgentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AgentUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(agent.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(agent.FieldDeletedAt, field.TypeTime)
	}
	if au.mutation.CreatorCleared() {
		_spec.ClearField(agent.FieldCreator, field.TypeJSON)
	}
	if value, ok := au.mutation.LastModifier(); ok {
		_spec.SetField(agent.FieldLastModifier, field.TypeJSON, value)
	}
	if au.mutation.LastModifierCleared() {
		_spec.ClearField(agent.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.SetField(agent.FieldRemark, field.TypeString, value)
	}
	if au.mutation.RemarkCleared() {
		_spec.ClearField(agent.FieldRemark, field.TypeString)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Phone(); ok {
		_spec.SetField(agent.FieldPhone, field.TypeString, value)
	}
	if value, ok := au.mutation.Super(); ok {
		_spec.SetField(agent.FieldSuper, field.TypeBool, value)
	}
	if au.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agent.EnterpriseTable,
			Columns: []string{agent.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agent.EnterpriseTable,
			Columns: []string{agent.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.StationsTable,
			Columns: agent.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedStationsIDs(); len(nodes) > 0 && !au.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.StationsTable,
			Columns: agent.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.StationsTable,
			Columns: agent.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AgentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AgentUpdateOne) SetUpdatedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AgentUpdateOne) SetDeletedAt(t time.Time) *AgentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDeletedAt(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AgentUpdateOne) ClearDeletedAt() *AgentUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetLastModifier sets the "last_modifier" field.
func (auo *AgentUpdateOne) SetLastModifier(m *model.Modifier) *AgentUpdateOne {
	auo.mutation.SetLastModifier(m)
	return auo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (auo *AgentUpdateOne) ClearLastModifier() *AgentUpdateOne {
	auo.mutation.ClearLastModifier()
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AgentUpdateOne) SetRemark(s string) *AgentUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableRemark(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// ClearRemark clears the value of the "remark" field.
func (auo *AgentUpdateOne) ClearRemark() *AgentUpdateOne {
	auo.mutation.ClearRemark()
	return auo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (auo *AgentUpdateOne) SetEnterpriseID(u uint64) *AgentUpdateOne {
	auo.mutation.SetEnterpriseID(u)
	return auo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableEnterpriseID(u *uint64) *AgentUpdateOne {
	if u != nil {
		auo.SetEnterpriseID(*u)
	}
	return auo
}

// SetName sets the "name" field.
func (auo *AgentUpdateOne) SetName(s string) *AgentUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableName(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetPhone sets the "phone" field.
func (auo *AgentUpdateOne) SetPhone(s string) *AgentUpdateOne {
	auo.mutation.SetPhone(s)
	return auo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillablePhone(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetPhone(*s)
	}
	return auo
}

// SetSuper sets the "super" field.
func (auo *AgentUpdateOne) SetSuper(b bool) *AgentUpdateOne {
	auo.mutation.SetSuper(b)
	return auo
}

// SetNillableSuper sets the "super" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSuper(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetSuper(*b)
	}
	return auo
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (auo *AgentUpdateOne) SetEnterprise(e *Enterprise) *AgentUpdateOne {
	return auo.SetEnterpriseID(e.ID)
}

// AddStationIDs adds the "stations" edge to the EnterpriseStation entity by IDs.
func (auo *AgentUpdateOne) AddStationIDs(ids ...uint64) *AgentUpdateOne {
	auo.mutation.AddStationIDs(ids...)
	return auo
}

// AddStations adds the "stations" edges to the EnterpriseStation entity.
func (auo *AgentUpdateOne) AddStations(e ...*EnterpriseStation) *AgentUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddStationIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (auo *AgentUpdateOne) ClearEnterprise() *AgentUpdateOne {
	auo.mutation.ClearEnterprise()
	return auo
}

// ClearStations clears all "stations" edges to the EnterpriseStation entity.
func (auo *AgentUpdateOne) ClearStations() *AgentUpdateOne {
	auo.mutation.ClearStations()
	return auo
}

// RemoveStationIDs removes the "stations" edge to EnterpriseStation entities by IDs.
func (auo *AgentUpdateOne) RemoveStationIDs(ids ...uint64) *AgentUpdateOne {
	auo.mutation.RemoveStationIDs(ids...)
	return auo
}

// RemoveStations removes "stations" edges to EnterpriseStation entities.
func (auo *AgentUpdateOne) RemoveStations(e ...*EnterpriseStation) *AgentUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveStationIDs(ids...)
}

// Where appends a list predicates to the AgentUpdate builder.
func (auo *AgentUpdateOne) Where(ps ...predicate.Agent) *AgentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AgentUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if agent.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agent.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agent.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AgentUpdateOne) check() error {
	if _, ok := auo.mutation.EnterpriseID(); auo.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Agent.enterprise"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AgentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AgentUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(agent.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(agent.FieldDeletedAt, field.TypeTime)
	}
	if auo.mutation.CreatorCleared() {
		_spec.ClearField(agent.FieldCreator, field.TypeJSON)
	}
	if value, ok := auo.mutation.LastModifier(); ok {
		_spec.SetField(agent.FieldLastModifier, field.TypeJSON, value)
	}
	if auo.mutation.LastModifierCleared() {
		_spec.ClearField(agent.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.SetField(agent.FieldRemark, field.TypeString, value)
	}
	if auo.mutation.RemarkCleared() {
		_spec.ClearField(agent.FieldRemark, field.TypeString)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Phone(); ok {
		_spec.SetField(agent.FieldPhone, field.TypeString, value)
	}
	if value, ok := auo.mutation.Super(); ok {
		_spec.SetField(agent.FieldSuper, field.TypeBool, value)
	}
	if auo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agent.EnterpriseTable,
			Columns: []string{agent.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agent.EnterpriseTable,
			Columns: []string{agent.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.StationsTable,
			Columns: agent.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedStationsIDs(); len(nodes) > 0 && !auo.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.StationsTable,
			Columns: agent.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.StationsTable,
			Columns: agent.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
