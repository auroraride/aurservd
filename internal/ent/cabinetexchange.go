// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetexchange"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CabinetExchange is the model entity for the CabinetExchange schema.
type CabinetExchange struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// RiderID holds the value of the "rider_id" field.
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// CabinetID holds the value of the "cabinet_id" field.
	// 电柜ID
	CabinetID uint64 `json:"cabinet_id,omitempty"`
	// Alternative holds the value of the "alternative" field.
	// 是否备无满电选方案
	Alternative bool `json:"alternative,omitempty"`
	// Step holds the value of the "step" field.
	// 步骤
	Step uint `json:"step,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status uint `json:"status,omitempty"`
	// BinIndex holds the value of the "bin_index" field.
	// 仓位Index
	BinIndex uint `json:"bin_index,omitempty"`
	// Bin holds the value of the "bin" field.
	// 仓位详情
	Bin model.CabinetBin `json:"bin,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CabinetExchangeQuery when eager-loading is set.
	Edges CabinetExchangeEdges `json:"edges"`
}

// CabinetExchangeEdges holds the relations/edges for other nodes in the graph.
type CabinetExchangeEdges struct {
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetExchangeEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[0] {
		if e.Rider == nil {
			// The edge rider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetExchangeEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[1] {
		if e.Cabinet == nil {
			// The edge cabinet was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CabinetExchange) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cabinetexchange.FieldCreator, cabinetexchange.FieldLastModifier, cabinetexchange.FieldBin:
			values[i] = new([]byte)
		case cabinetexchange.FieldAlternative:
			values[i] = new(sql.NullBool)
		case cabinetexchange.FieldID, cabinetexchange.FieldRiderID, cabinetexchange.FieldCabinetID, cabinetexchange.FieldStep, cabinetexchange.FieldStatus, cabinetexchange.FieldBinIndex:
			values[i] = new(sql.NullInt64)
		case cabinetexchange.FieldRemark:
			values[i] = new(sql.NullString)
		case cabinetexchange.FieldCreatedAt, cabinetexchange.FieldUpdatedAt, cabinetexchange.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CabinetExchange", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CabinetExchange fields.
func (ce *CabinetExchange) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cabinetexchange.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ce.ID = uint64(value.Int64)
		case cabinetexchange.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ce.CreatedAt = value.Time
			}
		case cabinetexchange.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ce.UpdatedAt = value.Time
			}
		case cabinetexchange.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ce.DeletedAt = new(time.Time)
				*ce.DeletedAt = value.Time
			}
		case cabinetexchange.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ce.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case cabinetexchange.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ce.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case cabinetexchange.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ce.Remark = value.String
			}
		case cabinetexchange.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				ce.RiderID = uint64(value.Int64)
			}
		case cabinetexchange.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				ce.CabinetID = uint64(value.Int64)
			}
		case cabinetexchange.FieldAlternative:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field alternative", values[i])
			} else if value.Valid {
				ce.Alternative = value.Bool
			}
		case cabinetexchange.FieldStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				ce.Step = uint(value.Int64)
			}
		case cabinetexchange.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ce.Status = uint(value.Int64)
			}
		case cabinetexchange.FieldBinIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bin_index", values[i])
			} else if value.Valid {
				ce.BinIndex = uint(value.Int64)
			}
		case cabinetexchange.FieldBin:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bin", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ce.Bin); err != nil {
					return fmt.Errorf("unmarshal field bin: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryRider queries the "rider" edge of the CabinetExchange entity.
func (ce *CabinetExchange) QueryRider() *RiderQuery {
	return (&CabinetExchangeClient{config: ce.config}).QueryRider(ce)
}

// QueryCabinet queries the "cabinet" edge of the CabinetExchange entity.
func (ce *CabinetExchange) QueryCabinet() *CabinetQuery {
	return (&CabinetExchangeClient{config: ce.config}).QueryCabinet(ce)
}

// Update returns a builder for updating this CabinetExchange.
// Note that you need to call CabinetExchange.Unwrap() before calling this method if this CabinetExchange
// was returned from a transaction, and the transaction was committed or rolled back.
func (ce *CabinetExchange) Update() *CabinetExchangeUpdateOne {
	return (&CabinetExchangeClient{config: ce.config}).UpdateOne(ce)
}

// Unwrap unwraps the CabinetExchange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ce *CabinetExchange) Unwrap() *CabinetExchange {
	tx, ok := ce.config.driver.(*txDriver)
	if !ok {
		panic("ent: CabinetExchange is not a transactional entity")
	}
	ce.config.driver = tx.drv
	return ce
}

// String implements the fmt.Stringer.
func (ce *CabinetExchange) String() string {
	var builder strings.Builder
	builder.WriteString("CabinetExchange(")
	builder.WriteString(fmt.Sprintf("id=%v", ce.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ce.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ce.UpdatedAt.Format(time.ANSIC))
	if v := ce.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", ce.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ce.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(ce.Remark)
	builder.WriteString(", rider_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.RiderID))
	builder.WriteString(", cabinet_id=")
	builder.WriteString(fmt.Sprintf("%v", ce.CabinetID))
	builder.WriteString(", alternative=")
	builder.WriteString(fmt.Sprintf("%v", ce.Alternative))
	builder.WriteString(", step=")
	builder.WriteString(fmt.Sprintf("%v", ce.Step))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ce.Status))
	builder.WriteString(", bin_index=")
	builder.WriteString(fmt.Sprintf("%v", ce.BinIndex))
	builder.WriteString(", bin=")
	builder.WriteString(fmt.Sprintf("%v", ce.Bin))
	builder.WriteByte(')')
	return builder.String()
}

// CabinetExchanges is a parsable slice of CabinetExchange.
type CabinetExchanges []*CabinetExchange

func (ce CabinetExchanges) config(cfg config) {
	for _i := range ce {
		ce[_i].config = cfg
	}
}
