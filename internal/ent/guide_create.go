// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/guide"
)

// GuideCreate is the builder for creating a Guide entity.
type GuideCreate struct {
	config
	mutation *GuideMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gc *GuideCreate) SetCreatedAt(t time.Time) *GuideCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GuideCreate) SetNillableCreatedAt(t *time.Time) *GuideCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GuideCreate) SetUpdatedAt(t time.Time) *GuideCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GuideCreate) SetNillableUpdatedAt(t *time.Time) *GuideCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetDeletedAt sets the "deleted_at" field.
func (gc *GuideCreate) SetDeletedAt(t time.Time) *GuideCreate {
	gc.mutation.SetDeletedAt(t)
	return gc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gc *GuideCreate) SetNillableDeletedAt(t *time.Time) *GuideCreate {
	if t != nil {
		gc.SetDeletedAt(*t)
	}
	return gc
}

// SetCreator sets the "creator" field.
func (gc *GuideCreate) SetCreator(m *model.Modifier) *GuideCreate {
	gc.mutation.SetCreator(m)
	return gc
}

// SetLastModifier sets the "last_modifier" field.
func (gc *GuideCreate) SetLastModifier(m *model.Modifier) *GuideCreate {
	gc.mutation.SetLastModifier(m)
	return gc
}

// SetRemark sets the "remark" field.
func (gc *GuideCreate) SetRemark(s string) *GuideCreate {
	gc.mutation.SetRemark(s)
	return gc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (gc *GuideCreate) SetNillableRemark(s *string) *GuideCreate {
	if s != nil {
		gc.SetRemark(*s)
	}
	return gc
}

// SetName sets the "name" field.
func (gc *GuideCreate) SetName(s string) *GuideCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetSort sets the "sort" field.
func (gc *GuideCreate) SetSort(u uint8) *GuideCreate {
	gc.mutation.SetSort(u)
	return gc
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (gc *GuideCreate) SetNillableSort(u *uint8) *GuideCreate {
	if u != nil {
		gc.SetSort(*u)
	}
	return gc
}

// SetAnswer sets the "answer" field.
func (gc *GuideCreate) SetAnswer(s string) *GuideCreate {
	gc.mutation.SetAnswer(s)
	return gc
}

// Mutation returns the GuideMutation object of the builder.
func (gc *GuideCreate) Mutation() *GuideMutation {
	return gc.mutation
}

// Save creates the Guide in the database.
func (gc *GuideCreate) Save(ctx context.Context) (*Guide, error) {
	if err := gc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuideCreate) SaveX(ctx context.Context) *Guide {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GuideCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GuideCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GuideCreate) defaults() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		if guide.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized guide.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := guide.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		if guide.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized guide.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := guide.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.Sort(); !ok {
		v := guide.DefaultSort
		gc.mutation.SetSort(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gc *GuideCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Guide.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Guide.updated_at"`)}
	}
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Guide.name"`)}
	}
	if _, ok := gc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Guide.sort"`)}
	}
	if _, ok := gc.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "Guide.answer"`)}
	}
	return nil
}

func (gc *GuideCreate) sqlSave(ctx context.Context) (*Guide, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GuideCreate) createSpec() (*Guide, *sqlgraph.CreateSpec) {
	var (
		_node = &Guide{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(guide.Table, sqlgraph.NewFieldSpec(guide.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = gc.conflict
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(guide.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(guide.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.DeletedAt(); ok {
		_spec.SetField(guide.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := gc.mutation.Creator(); ok {
		_spec.SetField(guide.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := gc.mutation.LastModifier(); ok {
		_spec.SetField(guide.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := gc.mutation.Remark(); ok {
		_spec.SetField(guide.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(guide.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.Sort(); ok {
		_spec.SetField(guide.FieldSort, field.TypeUint8, value)
		_node.Sort = value
	}
	if value, ok := gc.mutation.Answer(); ok {
		_spec.SetField(guide.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Guide.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GuideUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gc *GuideCreate) OnConflict(opts ...sql.ConflictOption) *GuideUpsertOne {
	gc.conflict = opts
	return &GuideUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GuideCreate) OnConflictColumns(columns ...string) *GuideUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GuideUpsertOne{
		create: gc,
	}
}

type (
	// GuideUpsertOne is the builder for "upsert"-ing
	//  one Guide node.
	GuideUpsertOne struct {
		create *GuideCreate
	}

	// GuideUpsert is the "OnConflict" setter.
	GuideUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *GuideUpsert) SetUpdatedAt(v time.Time) *GuideUpsert {
	u.Set(guide.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GuideUpsert) UpdateUpdatedAt() *GuideUpsert {
	u.SetExcluded(guide.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GuideUpsert) SetDeletedAt(v time.Time) *GuideUpsert {
	u.Set(guide.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GuideUpsert) UpdateDeletedAt() *GuideUpsert {
	u.SetExcluded(guide.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GuideUpsert) ClearDeletedAt() *GuideUpsert {
	u.SetNull(guide.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *GuideUpsert) SetLastModifier(v *model.Modifier) *GuideUpsert {
	u.Set(guide.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *GuideUpsert) UpdateLastModifier() *GuideUpsert {
	u.SetExcluded(guide.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *GuideUpsert) ClearLastModifier() *GuideUpsert {
	u.SetNull(guide.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *GuideUpsert) SetRemark(v string) *GuideUpsert {
	u.Set(guide.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *GuideUpsert) UpdateRemark() *GuideUpsert {
	u.SetExcluded(guide.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *GuideUpsert) ClearRemark() *GuideUpsert {
	u.SetNull(guide.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *GuideUpsert) SetName(v string) *GuideUpsert {
	u.Set(guide.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuideUpsert) UpdateName() *GuideUpsert {
	u.SetExcluded(guide.FieldName)
	return u
}

// SetSort sets the "sort" field.
func (u *GuideUpsert) SetSort(v uint8) *GuideUpsert {
	u.Set(guide.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *GuideUpsert) UpdateSort() *GuideUpsert {
	u.SetExcluded(guide.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *GuideUpsert) AddSort(v uint8) *GuideUpsert {
	u.Add(guide.FieldSort, v)
	return u
}

// SetAnswer sets the "answer" field.
func (u *GuideUpsert) SetAnswer(v string) *GuideUpsert {
	u.Set(guide.FieldAnswer, v)
	return u
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *GuideUpsert) UpdateAnswer() *GuideUpsert {
	u.SetExcluded(guide.FieldAnswer)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GuideUpsertOne) UpdateNewValues() *GuideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(guide.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(guide.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Guide.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GuideUpsertOne) Ignore() *GuideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GuideUpsertOne) DoNothing() *GuideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GuideCreate.OnConflict
// documentation for more info.
func (u *GuideUpsertOne) Update(set func(*GuideUpsert)) *GuideUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GuideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GuideUpsertOne) SetUpdatedAt(v time.Time) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateUpdatedAt() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GuideUpsertOne) SetDeletedAt(v time.Time) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateDeletedAt() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GuideUpsertOne) ClearDeletedAt() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *GuideUpsertOne) SetLastModifier(v *model.Modifier) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateLastModifier() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *GuideUpsertOne) ClearLastModifier() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *GuideUpsertOne) SetRemark(v string) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateRemark() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *GuideUpsertOne) ClearRemark() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *GuideUpsertOne) SetName(v string) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateName() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateName()
	})
}

// SetSort sets the "sort" field.
func (u *GuideUpsertOne) SetSort(v uint8) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *GuideUpsertOne) AddSort(v uint8) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateSort() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateSort()
	})
}

// SetAnswer sets the "answer" field.
func (u *GuideUpsertOne) SetAnswer(v string) *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.SetAnswer(v)
	})
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *GuideUpsertOne) UpdateAnswer() *GuideUpsertOne {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateAnswer()
	})
}

// Exec executes the query.
func (u *GuideUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GuideCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GuideUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GuideUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GuideUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GuideCreateBulk is the builder for creating many Guide entities in bulk.
type GuideCreateBulk struct {
	config
	err      error
	builders []*GuideCreate
	conflict []sql.ConflictOption
}

// Save creates the Guide entities in the database.
func (gcb *GuideCreateBulk) Save(ctx context.Context) ([]*Guide, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Guide, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuideMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GuideCreateBulk) SaveX(ctx context.Context) []*Guide {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GuideCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GuideCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Guide.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GuideUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gcb *GuideCreateBulk) OnConflict(opts ...sql.ConflictOption) *GuideUpsertBulk {
	gcb.conflict = opts
	return &GuideUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GuideCreateBulk) OnConflictColumns(columns ...string) *GuideUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GuideUpsertBulk{
		create: gcb,
	}
}

// GuideUpsertBulk is the builder for "upsert"-ing
// a bulk of Guide nodes.
type GuideUpsertBulk struct {
	create *GuideCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GuideUpsertBulk) UpdateNewValues() *GuideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(guide.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(guide.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Guide.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GuideUpsertBulk) Ignore() *GuideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GuideUpsertBulk) DoNothing() *GuideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GuideCreateBulk.OnConflict
// documentation for more info.
func (u *GuideUpsertBulk) Update(set func(*GuideUpsert)) *GuideUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GuideUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GuideUpsertBulk) SetUpdatedAt(v time.Time) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateUpdatedAt() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GuideUpsertBulk) SetDeletedAt(v time.Time) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateDeletedAt() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GuideUpsertBulk) ClearDeletedAt() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *GuideUpsertBulk) SetLastModifier(v *model.Modifier) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateLastModifier() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *GuideUpsertBulk) ClearLastModifier() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *GuideUpsertBulk) SetRemark(v string) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateRemark() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *GuideUpsertBulk) ClearRemark() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *GuideUpsertBulk) SetName(v string) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateName() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateName()
	})
}

// SetSort sets the "sort" field.
func (u *GuideUpsertBulk) SetSort(v uint8) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *GuideUpsertBulk) AddSort(v uint8) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateSort() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateSort()
	})
}

// SetAnswer sets the "answer" field.
func (u *GuideUpsertBulk) SetAnswer(v string) *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.SetAnswer(v)
	})
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *GuideUpsertBulk) UpdateAnswer() *GuideUpsertBulk {
	return u.Update(func(s *GuideUpsert) {
		s.UpdateAnswer()
	})
}

// Exec executes the query.
func (u *GuideUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GuideCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GuideCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GuideUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
