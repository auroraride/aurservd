// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryfault"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryFaultUpdate is the builder for updating BatteryFault entities.
type BatteryFaultUpdate struct {
	config
	hooks     []Hook
	mutation  *BatteryFaultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BatteryFaultUpdate builder.
func (bfu *BatteryFaultUpdate) Where(ps ...predicate.BatteryFault) *BatteryFaultUpdate {
	bfu.mutation.Where(ps...)
	return bfu
}

// SetUpdatedAt sets the "updated_at" field.
func (bfu *BatteryFaultUpdate) SetUpdatedAt(t time.Time) *BatteryFaultUpdate {
	bfu.mutation.SetUpdatedAt(t)
	return bfu
}

// SetSn sets the "sn" field.
func (bfu *BatteryFaultUpdate) SetSn(s string) *BatteryFaultUpdate {
	bfu.mutation.SetSn(s)
	return bfu
}

// SetBatteryID sets the "battery_id" field.
func (bfu *BatteryFaultUpdate) SetBatteryID(u uint64) *BatteryFaultUpdate {
	bfu.mutation.SetBatteryID(u)
	return bfu
}

// SetFault sets the "fault" field.
func (bfu *BatteryFaultUpdate) SetFault(mf model.BatteryFault) *BatteryFaultUpdate {
	bfu.mutation.SetFault(mf)
	return bfu
}

// SetEndAt sets the "end_at" field.
func (bfu *BatteryFaultUpdate) SetEndAt(t time.Time) *BatteryFaultUpdate {
	bfu.mutation.SetEndAt(t)
	return bfu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (bfu *BatteryFaultUpdate) SetNillableEndAt(t *time.Time) *BatteryFaultUpdate {
	if t != nil {
		bfu.SetEndAt(*t)
	}
	return bfu
}

// ClearEndAt clears the value of the "end_at" field.
func (bfu *BatteryFaultUpdate) ClearEndAt() *BatteryFaultUpdate {
	bfu.mutation.ClearEndAt()
	return bfu
}

// SetBattery sets the "battery" edge to the Battery entity.
func (bfu *BatteryFaultUpdate) SetBattery(b *Battery) *BatteryFaultUpdate {
	return bfu.SetBatteryID(b.ID)
}

// Mutation returns the BatteryFaultMutation object of the builder.
func (bfu *BatteryFaultUpdate) Mutation() *BatteryFaultMutation {
	return bfu.mutation
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (bfu *BatteryFaultUpdate) ClearBattery() *BatteryFaultUpdate {
	bfu.mutation.ClearBattery()
	return bfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bfu *BatteryFaultUpdate) Save(ctx context.Context) (int, error) {
	bfu.defaults()
	return withHooks[int, BatteryFaultMutation](ctx, bfu.sqlSave, bfu.mutation, bfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bfu *BatteryFaultUpdate) SaveX(ctx context.Context) int {
	affected, err := bfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bfu *BatteryFaultUpdate) Exec(ctx context.Context) error {
	_, err := bfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfu *BatteryFaultUpdate) ExecX(ctx context.Context) {
	if err := bfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfu *BatteryFaultUpdate) defaults() {
	if _, ok := bfu.mutation.UpdatedAt(); !ok {
		v := batteryfault.UpdateDefaultUpdatedAt()
		bfu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfu *BatteryFaultUpdate) check() error {
	if v, ok := bfu.mutation.Fault(); ok {
		if err := batteryfault.FaultValidator(v); err != nil {
			return &ValidationError{Name: "fault", err: fmt.Errorf(`ent: validator failed for field "BatteryFault.fault": %w`, err)}
		}
	}
	if _, ok := bfu.mutation.BatteryID(); bfu.mutation.BatteryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BatteryFault.battery"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bfu *BatteryFaultUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryFaultUpdate {
	bfu.modifiers = append(bfu.modifiers, modifiers...)
	return bfu
}

func (bfu *BatteryFaultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bfu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   batteryfault.Table,
			Columns: batteryfault.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batteryfault.FieldID,
			},
		},
	}
	if ps := bfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfu.mutation.UpdatedAt(); ok {
		_spec.SetField(batteryfault.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bfu.mutation.Sn(); ok {
		_spec.SetField(batteryfault.FieldSn, field.TypeString, value)
	}
	if value, ok := bfu.mutation.Fault(); ok {
		_spec.SetField(batteryfault.FieldFault, field.TypeEnum, value)
	}
	if value, ok := bfu.mutation.EndAt(); ok {
		_spec.SetField(batteryfault.FieldEndAt, field.TypeTime, value)
	}
	if bfu.mutation.EndAtCleared() {
		_spec.ClearField(batteryfault.FieldEndAt, field.TypeTime)
	}
	if bfu.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryfault.BatteryTable,
			Columns: []string{batteryfault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: battery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfu.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryfault.BatteryTable,
			Columns: []string{batteryfault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batteryfault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bfu.mutation.done = true
	return n, nil
}

// BatteryFaultUpdateOne is the builder for updating a single BatteryFault entity.
type BatteryFaultUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BatteryFaultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (bfuo *BatteryFaultUpdateOne) SetUpdatedAt(t time.Time) *BatteryFaultUpdateOne {
	bfuo.mutation.SetUpdatedAt(t)
	return bfuo
}

// SetSn sets the "sn" field.
func (bfuo *BatteryFaultUpdateOne) SetSn(s string) *BatteryFaultUpdateOne {
	bfuo.mutation.SetSn(s)
	return bfuo
}

// SetBatteryID sets the "battery_id" field.
func (bfuo *BatteryFaultUpdateOne) SetBatteryID(u uint64) *BatteryFaultUpdateOne {
	bfuo.mutation.SetBatteryID(u)
	return bfuo
}

// SetFault sets the "fault" field.
func (bfuo *BatteryFaultUpdateOne) SetFault(mf model.BatteryFault) *BatteryFaultUpdateOne {
	bfuo.mutation.SetFault(mf)
	return bfuo
}

// SetEndAt sets the "end_at" field.
func (bfuo *BatteryFaultUpdateOne) SetEndAt(t time.Time) *BatteryFaultUpdateOne {
	bfuo.mutation.SetEndAt(t)
	return bfuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (bfuo *BatteryFaultUpdateOne) SetNillableEndAt(t *time.Time) *BatteryFaultUpdateOne {
	if t != nil {
		bfuo.SetEndAt(*t)
	}
	return bfuo
}

// ClearEndAt clears the value of the "end_at" field.
func (bfuo *BatteryFaultUpdateOne) ClearEndAt() *BatteryFaultUpdateOne {
	bfuo.mutation.ClearEndAt()
	return bfuo
}

// SetBattery sets the "battery" edge to the Battery entity.
func (bfuo *BatteryFaultUpdateOne) SetBattery(b *Battery) *BatteryFaultUpdateOne {
	return bfuo.SetBatteryID(b.ID)
}

// Mutation returns the BatteryFaultMutation object of the builder.
func (bfuo *BatteryFaultUpdateOne) Mutation() *BatteryFaultMutation {
	return bfuo.mutation
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (bfuo *BatteryFaultUpdateOne) ClearBattery() *BatteryFaultUpdateOne {
	bfuo.mutation.ClearBattery()
	return bfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bfuo *BatteryFaultUpdateOne) Select(field string, fields ...string) *BatteryFaultUpdateOne {
	bfuo.fields = append([]string{field}, fields...)
	return bfuo
}

// Save executes the query and returns the updated BatteryFault entity.
func (bfuo *BatteryFaultUpdateOne) Save(ctx context.Context) (*BatteryFault, error) {
	bfuo.defaults()
	return withHooks[*BatteryFault, BatteryFaultMutation](ctx, bfuo.sqlSave, bfuo.mutation, bfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bfuo *BatteryFaultUpdateOne) SaveX(ctx context.Context) *BatteryFault {
	node, err := bfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bfuo *BatteryFaultUpdateOne) Exec(ctx context.Context) error {
	_, err := bfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfuo *BatteryFaultUpdateOne) ExecX(ctx context.Context) {
	if err := bfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfuo *BatteryFaultUpdateOne) defaults() {
	if _, ok := bfuo.mutation.UpdatedAt(); !ok {
		v := batteryfault.UpdateDefaultUpdatedAt()
		bfuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfuo *BatteryFaultUpdateOne) check() error {
	if v, ok := bfuo.mutation.Fault(); ok {
		if err := batteryfault.FaultValidator(v); err != nil {
			return &ValidationError{Name: "fault", err: fmt.Errorf(`ent: validator failed for field "BatteryFault.fault": %w`, err)}
		}
	}
	if _, ok := bfuo.mutation.BatteryID(); bfuo.mutation.BatteryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BatteryFault.battery"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bfuo *BatteryFaultUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryFaultUpdateOne {
	bfuo.modifiers = append(bfuo.modifiers, modifiers...)
	return bfuo
}

func (bfuo *BatteryFaultUpdateOne) sqlSave(ctx context.Context) (_node *BatteryFault, err error) {
	if err := bfuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   batteryfault.Table,
			Columns: batteryfault.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batteryfault.FieldID,
			},
		},
	}
	id, ok := bfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BatteryFault.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batteryfault.FieldID)
		for _, f := range fields {
			if !batteryfault.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != batteryfault.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(batteryfault.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bfuo.mutation.Sn(); ok {
		_spec.SetField(batteryfault.FieldSn, field.TypeString, value)
	}
	if value, ok := bfuo.mutation.Fault(); ok {
		_spec.SetField(batteryfault.FieldFault, field.TypeEnum, value)
	}
	if value, ok := bfuo.mutation.EndAt(); ok {
		_spec.SetField(batteryfault.FieldEndAt, field.TypeTime, value)
	}
	if bfuo.mutation.EndAtCleared() {
		_spec.ClearField(batteryfault.FieldEndAt, field.TypeTime)
	}
	if bfuo.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryfault.BatteryTable,
			Columns: []string{batteryfault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: battery.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfuo.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryfault.BatteryTable,
			Columns: []string{batteryfault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bfuo.modifiers...)
	_node = &BatteryFault{config: bfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batteryfault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bfuo.mutation.done = true
	return _node, nil
}
