// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
)

// PromotionLevelTaskQuery is the builder for querying PromotionLevelTask entities.
type PromotionLevelTaskQuery struct {
	config
	ctx        *QueryContext
	order      []promotionleveltask.OrderOption
	inters     []Interceptor
	predicates []predicate.PromotionLevelTask
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PromotionLevelTaskQuery builder.
func (pltq *PromotionLevelTaskQuery) Where(ps ...predicate.PromotionLevelTask) *PromotionLevelTaskQuery {
	pltq.predicates = append(pltq.predicates, ps...)
	return pltq
}

// Limit the number of records to be returned by this query.
func (pltq *PromotionLevelTaskQuery) Limit(limit int) *PromotionLevelTaskQuery {
	pltq.ctx.Limit = &limit
	return pltq
}

// Offset to start from.
func (pltq *PromotionLevelTaskQuery) Offset(offset int) *PromotionLevelTaskQuery {
	pltq.ctx.Offset = &offset
	return pltq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pltq *PromotionLevelTaskQuery) Unique(unique bool) *PromotionLevelTaskQuery {
	pltq.ctx.Unique = &unique
	return pltq
}

// Order specifies how the records should be ordered.
func (pltq *PromotionLevelTaskQuery) Order(o ...promotionleveltask.OrderOption) *PromotionLevelTaskQuery {
	pltq.order = append(pltq.order, o...)
	return pltq
}

// First returns the first PromotionLevelTask entity from the query.
// Returns a *NotFoundError when no PromotionLevelTask was found.
func (pltq *PromotionLevelTaskQuery) First(ctx context.Context) (*PromotionLevelTask, error) {
	nodes, err := pltq.Limit(1).All(setContextOp(ctx, pltq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{promotionleveltask.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pltq *PromotionLevelTaskQuery) FirstX(ctx context.Context) *PromotionLevelTask {
	node, err := pltq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PromotionLevelTask ID from the query.
// Returns a *NotFoundError when no PromotionLevelTask ID was found.
func (pltq *PromotionLevelTaskQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pltq.Limit(1).IDs(setContextOp(ctx, pltq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{promotionleveltask.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pltq *PromotionLevelTaskQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := pltq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PromotionLevelTask entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PromotionLevelTask entity is found.
// Returns a *NotFoundError when no PromotionLevelTask entities are found.
func (pltq *PromotionLevelTaskQuery) Only(ctx context.Context) (*PromotionLevelTask, error) {
	nodes, err := pltq.Limit(2).All(setContextOp(ctx, pltq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{promotionleveltask.Label}
	default:
		return nil, &NotSingularError{promotionleveltask.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pltq *PromotionLevelTaskQuery) OnlyX(ctx context.Context) *PromotionLevelTask {
	node, err := pltq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PromotionLevelTask ID in the query.
// Returns a *NotSingularError when more than one PromotionLevelTask ID is found.
// Returns a *NotFoundError when no entities are found.
func (pltq *PromotionLevelTaskQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pltq.Limit(2).IDs(setContextOp(ctx, pltq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{promotionleveltask.Label}
	default:
		err = &NotSingularError{promotionleveltask.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pltq *PromotionLevelTaskQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := pltq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PromotionLevelTasks.
func (pltq *PromotionLevelTaskQuery) All(ctx context.Context) ([]*PromotionLevelTask, error) {
	ctx = setContextOp(ctx, pltq.ctx, "All")
	if err := pltq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PromotionLevelTask, *PromotionLevelTaskQuery]()
	return withInterceptors[[]*PromotionLevelTask](ctx, pltq, qr, pltq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pltq *PromotionLevelTaskQuery) AllX(ctx context.Context) []*PromotionLevelTask {
	nodes, err := pltq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PromotionLevelTask IDs.
func (pltq *PromotionLevelTaskQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if pltq.ctx.Unique == nil && pltq.path != nil {
		pltq.Unique(true)
	}
	ctx = setContextOp(ctx, pltq.ctx, "IDs")
	if err = pltq.Select(promotionleveltask.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pltq *PromotionLevelTaskQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := pltq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pltq *PromotionLevelTaskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pltq.ctx, "Count")
	if err := pltq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pltq, querierCount[*PromotionLevelTaskQuery](), pltq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pltq *PromotionLevelTaskQuery) CountX(ctx context.Context) int {
	count, err := pltq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pltq *PromotionLevelTaskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pltq.ctx, "Exist")
	switch _, err := pltq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pltq *PromotionLevelTaskQuery) ExistX(ctx context.Context) bool {
	exist, err := pltq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PromotionLevelTaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pltq *PromotionLevelTaskQuery) Clone() *PromotionLevelTaskQuery {
	if pltq == nil {
		return nil
	}
	return &PromotionLevelTaskQuery{
		config:     pltq.config,
		ctx:        pltq.ctx.Clone(),
		order:      append([]promotionleveltask.OrderOption{}, pltq.order...),
		inters:     append([]Interceptor{}, pltq.inters...),
		predicates: append([]predicate.PromotionLevelTask{}, pltq.predicates...),
		// clone intermediate query.
		sql:  pltq.sql.Clone(),
		path: pltq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PromotionLevelTask.Query().
//		GroupBy(promotionleveltask.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pltq *PromotionLevelTaskQuery) GroupBy(field string, fields ...string) *PromotionLevelTaskGroupBy {
	pltq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PromotionLevelTaskGroupBy{build: pltq}
	grbuild.flds = &pltq.ctx.Fields
	grbuild.label = promotionleveltask.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PromotionLevelTask.Query().
//		Select(promotionleveltask.FieldCreatedAt).
//		Scan(ctx, &v)
func (pltq *PromotionLevelTaskQuery) Select(fields ...string) *PromotionLevelTaskSelect {
	pltq.ctx.Fields = append(pltq.ctx.Fields, fields...)
	sbuild := &PromotionLevelTaskSelect{PromotionLevelTaskQuery: pltq}
	sbuild.label = promotionleveltask.Label
	sbuild.flds, sbuild.scan = &pltq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PromotionLevelTaskSelect configured with the given aggregations.
func (pltq *PromotionLevelTaskQuery) Aggregate(fns ...AggregateFunc) *PromotionLevelTaskSelect {
	return pltq.Select().Aggregate(fns...)
}

func (pltq *PromotionLevelTaskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pltq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pltq); err != nil {
				return err
			}
		}
	}
	for _, f := range pltq.ctx.Fields {
		if !promotionleveltask.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pltq.path != nil {
		prev, err := pltq.path(ctx)
		if err != nil {
			return err
		}
		pltq.sql = prev
	}
	return nil
}

func (pltq *PromotionLevelTaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PromotionLevelTask, error) {
	var (
		nodes = []*PromotionLevelTask{}
		_spec = pltq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PromotionLevelTask).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PromotionLevelTask{config: pltq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(pltq.modifiers) > 0 {
		_spec.Modifiers = pltq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pltq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (pltq *PromotionLevelTaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pltq.querySpec()
	if len(pltq.modifiers) > 0 {
		_spec.Modifiers = pltq.modifiers
	}
	_spec.Node.Columns = pltq.ctx.Fields
	if len(pltq.ctx.Fields) > 0 {
		_spec.Unique = pltq.ctx.Unique != nil && *pltq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pltq.driver, _spec)
}

func (pltq *PromotionLevelTaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(promotionleveltask.Table, promotionleveltask.Columns, sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64))
	_spec.From = pltq.sql
	if unique := pltq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pltq.path != nil {
		_spec.Unique = true
	}
	if fields := pltq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionleveltask.FieldID)
		for i := range fields {
			if fields[i] != promotionleveltask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pltq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pltq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pltq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pltq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pltq *PromotionLevelTaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pltq.driver.Dialect())
	t1 := builder.Table(promotionleveltask.Table)
	columns := pltq.ctx.Fields
	if len(columns) == 0 {
		columns = promotionleveltask.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pltq.sql != nil {
		selector = pltq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pltq.ctx.Unique != nil && *pltq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pltq.modifiers {
		m(selector)
	}
	for _, p := range pltq.predicates {
		p(selector)
	}
	for _, p := range pltq.order {
		p(selector)
	}
	if offset := pltq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pltq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pltq *PromotionLevelTaskQuery) Modify(modifiers ...func(s *sql.Selector)) *PromotionLevelTaskSelect {
	pltq.modifiers = append(pltq.modifiers, modifiers...)
	return pltq.Select()
}

type PromotionLevelTaskQueryWith string

var ()

func (pltq *PromotionLevelTaskQuery) With(withEdges ...PromotionLevelTaskQueryWith) *PromotionLevelTaskQuery {
	for _, v := range withEdges {
		switch v {
		}
	}
	return pltq
}

// PromotionLevelTaskGroupBy is the group-by builder for PromotionLevelTask entities.
type PromotionLevelTaskGroupBy struct {
	selector
	build *PromotionLevelTaskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pltgb *PromotionLevelTaskGroupBy) Aggregate(fns ...AggregateFunc) *PromotionLevelTaskGroupBy {
	pltgb.fns = append(pltgb.fns, fns...)
	return pltgb
}

// Scan applies the selector query and scans the result into the given value.
func (pltgb *PromotionLevelTaskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pltgb.build.ctx, "GroupBy")
	if err := pltgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionLevelTaskQuery, *PromotionLevelTaskGroupBy](ctx, pltgb.build, pltgb, pltgb.build.inters, v)
}

func (pltgb *PromotionLevelTaskGroupBy) sqlScan(ctx context.Context, root *PromotionLevelTaskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pltgb.fns))
	for _, fn := range pltgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pltgb.flds)+len(pltgb.fns))
		for _, f := range *pltgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pltgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pltgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PromotionLevelTaskSelect is the builder for selecting fields of PromotionLevelTask entities.
type PromotionLevelTaskSelect struct {
	*PromotionLevelTaskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (plts *PromotionLevelTaskSelect) Aggregate(fns ...AggregateFunc) *PromotionLevelTaskSelect {
	plts.fns = append(plts.fns, fns...)
	return plts
}

// Scan applies the selector query and scans the result into the given value.
func (plts *PromotionLevelTaskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, plts.ctx, "Select")
	if err := plts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionLevelTaskQuery, *PromotionLevelTaskSelect](ctx, plts.PromotionLevelTaskQuery, plts, plts.inters, v)
}

func (plts *PromotionLevelTaskSelect) sqlScan(ctx context.Context, root *PromotionLevelTaskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(plts.fns))
	for _, fn := range plts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*plts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := plts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (plts *PromotionLevelTaskSelect) Modify(modifiers ...func(s *sql.Selector)) *PromotionLevelTaskSelect {
	plts.modifiers = append(plts.modifiers, modifiers...)
	return plts
}
