// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// Attendance is the model entity for the Attendance schema.
type Attendance struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// StoreID holds the value of the "store_id" field.
	// 门店ID
	StoreID uint64 `json:"store_id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	// 店员ID
	EmployeeID uint64 `json:"employee_id,omitempty"`
	// Inventory holds the value of the "inventory" field.
	// 物资盘点
	Inventory []model.AttendanceInventory `json:"inventory,omitempty"`
	// Photo holds the value of the "photo" field.
	// 上班照片
	Photo *string `json:"photo,omitempty"`
	// Duty holds the value of the "duty" field.
	// 是否上班盘点
	Duty bool `json:"duty,omitempty"`
	// Date holds the value of the "date" field.
	// 日期
	Date model.Date `json:"date,omitempty"`
	// Lng holds the value of the "lng" field.
	// 经度
	Lng *float64 `json:"lng,omitempty"`
	// Lat holds the value of the "lat" field.
	// 纬度
	Lat *float64 `json:"lat,omitempty"`
	// Address holds the value of the "address" field.
	// 详细地址
	Address *string `json:"address,omitempty"`
	// Distance holds the value of the "distance" field.
	// 打卡距离
	Distance *float64 `json:"distance,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttendanceQuery when eager-loading is set.
	Edges AttendanceEdges `json:"edges"`
}

// AttendanceEdges holds the relations/edges for other nodes in the graph.
type AttendanceEdges struct {
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[0] {
		if e.Store == nil {
			// The edge store was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttendanceEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Attendance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case attendance.FieldCreator, attendance.FieldLastModifier, attendance.FieldInventory:
			values[i] = new([]byte)
		case attendance.FieldDate:
			values[i] = new(model.Date)
		case attendance.FieldDuty:
			values[i] = new(sql.NullBool)
		case attendance.FieldLng, attendance.FieldLat, attendance.FieldDistance:
			values[i] = new(sql.NullFloat64)
		case attendance.FieldID, attendance.FieldStoreID, attendance.FieldEmployeeID:
			values[i] = new(sql.NullInt64)
		case attendance.FieldRemark, attendance.FieldPhoto, attendance.FieldAddress:
			values[i] = new(sql.NullString)
		case attendance.FieldCreatedAt, attendance.FieldUpdatedAt, attendance.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Attendance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Attendance fields.
func (a *Attendance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attendance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case attendance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case attendance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case attendance.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case attendance.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case attendance.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case attendance.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				a.Remark = value.String
			}
		case attendance.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				a.StoreID = uint64(value.Int64)
			}
		case attendance.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				a.EmployeeID = uint64(value.Int64)
			}
		case attendance.FieldInventory:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field inventory", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Inventory); err != nil {
					return fmt.Errorf("unmarshal field inventory: %w", err)
				}
			}
		case attendance.FieldPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo", values[i])
			} else if value.Valid {
				a.Photo = new(string)
				*a.Photo = value.String
			}
		case attendance.FieldDuty:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field duty", values[i])
			} else if value.Valid {
				a.Duty = value.Bool
			}
		case attendance.FieldDate:
			if value, ok := values[i].(*model.Date); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value != nil {
				a.Date = *value
			}
		case attendance.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				a.Lng = new(float64)
				*a.Lng = value.Float64
			}
		case attendance.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				a.Lat = new(float64)
				*a.Lat = value.Float64
			}
		case attendance.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				a.Address = new(string)
				*a.Address = value.String
			}
		case attendance.FieldDistance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field distance", values[i])
			} else if value.Valid {
				a.Distance = new(float64)
				*a.Distance = value.Float64
			}
		}
	}
	return nil
}

// QueryStore queries the "store" edge of the Attendance entity.
func (a *Attendance) QueryStore() *StoreQuery {
	return (&AttendanceClient{config: a.config}).QueryStore(a)
}

// QueryEmployee queries the "employee" edge of the Attendance entity.
func (a *Attendance) QueryEmployee() *EmployeeQuery {
	return (&AttendanceClient{config: a.config}).QueryEmployee(a)
}

// Update returns a builder for updating this Attendance.
// Note that you need to call Attendance.Unwrap() before calling this method if this Attendance
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Attendance) Update() *AttendanceUpdateOne {
	return (&AttendanceClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Attendance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Attendance) Unwrap() *Attendance {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Attendance is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Attendance) String() string {
	var builder strings.Builder
	builder.WriteString("Attendance(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	if v := a.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", a.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", a.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(a.Remark)
	builder.WriteString(", store_id=")
	builder.WriteString(fmt.Sprintf("%v", a.StoreID))
	builder.WriteString(", employee_id=")
	builder.WriteString(fmt.Sprintf("%v", a.EmployeeID))
	builder.WriteString(", inventory=")
	builder.WriteString(fmt.Sprintf("%v", a.Inventory))
	if v := a.Photo; v != nil {
		builder.WriteString(", photo=")
		builder.WriteString(*v)
	}
	builder.WriteString(", duty=")
	builder.WriteString(fmt.Sprintf("%v", a.Duty))
	builder.WriteString(", date=")
	builder.WriteString(fmt.Sprintf("%v", a.Date))
	if v := a.Lng; v != nil {
		builder.WriteString(", lng=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := a.Lat; v != nil {
		builder.WriteString(", lat=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := a.Address; v != nil {
		builder.WriteString(", address=")
		builder.WriteString(*v)
	}
	if v := a.Distance; v != nil {
		builder.WriteString(", distance=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Attendances is a parsable slice of Attendance.
type Attendances []*Attendance

func (a Attendances) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
