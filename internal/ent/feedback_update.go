// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/feedback"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// FeedbackUpdate is the builder for updating Feedback entities.
type FeedbackUpdate struct {
	config
	hooks     []Hook
	mutation  *FeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FeedbackUpdate builder.
func (fu *FeedbackUpdate) Where(ps ...predicate.Feedback) *FeedbackUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FeedbackUpdate) SetUpdatedAt(t time.Time) *FeedbackUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (fu *FeedbackUpdate) SetEnterpriseID(u uint64) *FeedbackUpdate {
	fu.mutation.SetEnterpriseID(u)
	return fu
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableEnterpriseID(u *uint64) *FeedbackUpdate {
	if u != nil {
		fu.SetEnterpriseID(*u)
	}
	return fu
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (fu *FeedbackUpdate) ClearEnterpriseID() *FeedbackUpdate {
	fu.mutation.ClearEnterpriseID()
	return fu
}

// SetAgentID sets the "agent_id" field.
func (fu *FeedbackUpdate) SetAgentID(u uint64) *FeedbackUpdate {
	fu.mutation.SetAgentID(u)
	return fu
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableAgentID(u *uint64) *FeedbackUpdate {
	if u != nil {
		fu.SetAgentID(*u)
	}
	return fu
}

// ClearAgentID clears the value of the "agent_id" field.
func (fu *FeedbackUpdate) ClearAgentID() *FeedbackUpdate {
	fu.mutation.ClearAgentID()
	return fu
}

// SetContent sets the "content" field.
func (fu *FeedbackUpdate) SetContent(s string) *FeedbackUpdate {
	fu.mutation.SetContent(s)
	return fu
}

// SetType sets the "type" field.
func (fu *FeedbackUpdate) SetType(u uint8) *FeedbackUpdate {
	fu.mutation.ResetType()
	fu.mutation.SetType(u)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableType(u *uint8) *FeedbackUpdate {
	if u != nil {
		fu.SetType(*u)
	}
	return fu
}

// AddType adds u to the "type" field.
func (fu *FeedbackUpdate) AddType(u int8) *FeedbackUpdate {
	fu.mutation.AddType(u)
	return fu
}

// SetURL sets the "url" field.
func (fu *FeedbackUpdate) SetURL(s []string) *FeedbackUpdate {
	fu.mutation.SetURL(s)
	return fu
}

// AppendURL appends s to the "url" field.
func (fu *FeedbackUpdate) AppendURL(s []string) *FeedbackUpdate {
	fu.mutation.AppendURL(s)
	return fu
}

// ClearURL clears the value of the "url" field.
func (fu *FeedbackUpdate) ClearURL() *FeedbackUpdate {
	fu.mutation.ClearURL()
	return fu
}

// SetName sets the "name" field.
func (fu *FeedbackUpdate) SetName(s string) *FeedbackUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillableName(s *string) *FeedbackUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// ClearName clears the value of the "name" field.
func (fu *FeedbackUpdate) ClearName() *FeedbackUpdate {
	fu.mutation.ClearName()
	return fu
}

// SetPhone sets the "phone" field.
func (fu *FeedbackUpdate) SetPhone(s string) *FeedbackUpdate {
	fu.mutation.SetPhone(s)
	return fu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (fu *FeedbackUpdate) SetNillablePhone(s *string) *FeedbackUpdate {
	if s != nil {
		fu.SetPhone(*s)
	}
	return fu
}

// ClearPhone clears the value of the "phone" field.
func (fu *FeedbackUpdate) ClearPhone() *FeedbackUpdate {
	fu.mutation.ClearPhone()
	return fu
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (fu *FeedbackUpdate) SetEnterprise(e *Enterprise) *FeedbackUpdate {
	return fu.SetEnterpriseID(e.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (fu *FeedbackUpdate) SetAgent(a *Agent) *FeedbackUpdate {
	return fu.SetAgentID(a.ID)
}

// Mutation returns the FeedbackMutation object of the builder.
func (fu *FeedbackUpdate) Mutation() *FeedbackMutation {
	return fu.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (fu *FeedbackUpdate) ClearEnterprise() *FeedbackUpdate {
	fu.mutation.ClearEnterprise()
	return fu
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (fu *FeedbackUpdate) ClearAgent() *FeedbackUpdate {
	fu.mutation.ClearAgent()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FeedbackUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FeedbackUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FeedbackUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FeedbackUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FeedbackUpdate) defaults() {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		v := feedback.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FeedbackUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeedbackUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FeedbackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(feedback.Table, feedback.Columns, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUint64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(feedback.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.Content(); ok {
		_spec.SetField(feedback.FieldContent, field.TypeString, value)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(feedback.FieldType, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.AddedType(); ok {
		_spec.AddField(feedback.FieldType, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.URL(); ok {
		_spec.SetField(feedback.FieldURL, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedURL(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feedback.FieldURL, value)
		})
	}
	if fu.mutation.URLCleared() {
		_spec.ClearField(feedback.FieldURL, field.TypeJSON)
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(feedback.FieldName, field.TypeString, value)
	}
	if fu.mutation.NameCleared() {
		_spec.ClearField(feedback.FieldName, field.TypeString)
	}
	if value, ok := fu.mutation.Phone(); ok {
		_spec.SetField(feedback.FieldPhone, field.TypeString, value)
	}
	if fu.mutation.PhoneCleared() {
		_spec.ClearField(feedback.FieldPhone, field.TypeString)
	}
	if fu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.EnterpriseTable,
			Columns: []string{feedback.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.EnterpriseTable,
			Columns: []string{feedback.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.AgentTable,
			Columns: []string{feedback.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.AgentTable,
			Columns: []string{feedback.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FeedbackUpdateOne is the builder for updating a single Feedback entity.
type FeedbackUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FeedbackMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FeedbackUpdateOne) SetUpdatedAt(t time.Time) *FeedbackUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (fuo *FeedbackUpdateOne) SetEnterpriseID(u uint64) *FeedbackUpdateOne {
	fuo.mutation.SetEnterpriseID(u)
	return fuo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableEnterpriseID(u *uint64) *FeedbackUpdateOne {
	if u != nil {
		fuo.SetEnterpriseID(*u)
	}
	return fuo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (fuo *FeedbackUpdateOne) ClearEnterpriseID() *FeedbackUpdateOne {
	fuo.mutation.ClearEnterpriseID()
	return fuo
}

// SetAgentID sets the "agent_id" field.
func (fuo *FeedbackUpdateOne) SetAgentID(u uint64) *FeedbackUpdateOne {
	fuo.mutation.SetAgentID(u)
	return fuo
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableAgentID(u *uint64) *FeedbackUpdateOne {
	if u != nil {
		fuo.SetAgentID(*u)
	}
	return fuo
}

// ClearAgentID clears the value of the "agent_id" field.
func (fuo *FeedbackUpdateOne) ClearAgentID() *FeedbackUpdateOne {
	fuo.mutation.ClearAgentID()
	return fuo
}

// SetContent sets the "content" field.
func (fuo *FeedbackUpdateOne) SetContent(s string) *FeedbackUpdateOne {
	fuo.mutation.SetContent(s)
	return fuo
}

// SetType sets the "type" field.
func (fuo *FeedbackUpdateOne) SetType(u uint8) *FeedbackUpdateOne {
	fuo.mutation.ResetType()
	fuo.mutation.SetType(u)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableType(u *uint8) *FeedbackUpdateOne {
	if u != nil {
		fuo.SetType(*u)
	}
	return fuo
}

// AddType adds u to the "type" field.
func (fuo *FeedbackUpdateOne) AddType(u int8) *FeedbackUpdateOne {
	fuo.mutation.AddType(u)
	return fuo
}

// SetURL sets the "url" field.
func (fuo *FeedbackUpdateOne) SetURL(s []string) *FeedbackUpdateOne {
	fuo.mutation.SetURL(s)
	return fuo
}

// AppendURL appends s to the "url" field.
func (fuo *FeedbackUpdateOne) AppendURL(s []string) *FeedbackUpdateOne {
	fuo.mutation.AppendURL(s)
	return fuo
}

// ClearURL clears the value of the "url" field.
func (fuo *FeedbackUpdateOne) ClearURL() *FeedbackUpdateOne {
	fuo.mutation.ClearURL()
	return fuo
}

// SetName sets the "name" field.
func (fuo *FeedbackUpdateOne) SetName(s string) *FeedbackUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillableName(s *string) *FeedbackUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// ClearName clears the value of the "name" field.
func (fuo *FeedbackUpdateOne) ClearName() *FeedbackUpdateOne {
	fuo.mutation.ClearName()
	return fuo
}

// SetPhone sets the "phone" field.
func (fuo *FeedbackUpdateOne) SetPhone(s string) *FeedbackUpdateOne {
	fuo.mutation.SetPhone(s)
	return fuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (fuo *FeedbackUpdateOne) SetNillablePhone(s *string) *FeedbackUpdateOne {
	if s != nil {
		fuo.SetPhone(*s)
	}
	return fuo
}

// ClearPhone clears the value of the "phone" field.
func (fuo *FeedbackUpdateOne) ClearPhone() *FeedbackUpdateOne {
	fuo.mutation.ClearPhone()
	return fuo
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (fuo *FeedbackUpdateOne) SetEnterprise(e *Enterprise) *FeedbackUpdateOne {
	return fuo.SetEnterpriseID(e.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (fuo *FeedbackUpdateOne) SetAgent(a *Agent) *FeedbackUpdateOne {
	return fuo.SetAgentID(a.ID)
}

// Mutation returns the FeedbackMutation object of the builder.
func (fuo *FeedbackUpdateOne) Mutation() *FeedbackMutation {
	return fuo.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (fuo *FeedbackUpdateOne) ClearEnterprise() *FeedbackUpdateOne {
	fuo.mutation.ClearEnterprise()
	return fuo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (fuo *FeedbackUpdateOne) ClearAgent() *FeedbackUpdateOne {
	fuo.mutation.ClearAgent()
	return fuo
}

// Where appends a list predicates to the FeedbackUpdate builder.
func (fuo *FeedbackUpdateOne) Where(ps ...predicate.Feedback) *FeedbackUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FeedbackUpdateOne) Select(field string, fields ...string) *FeedbackUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Feedback entity.
func (fuo *FeedbackUpdateOne) Save(ctx context.Context) (*Feedback, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FeedbackUpdateOne) SaveX(ctx context.Context) *Feedback {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FeedbackUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FeedbackUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FeedbackUpdateOne) defaults() {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		v := feedback.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FeedbackUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FeedbackUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FeedbackUpdateOne) sqlSave(ctx context.Context) (_node *Feedback, err error) {
	_spec := sqlgraph.NewUpdateSpec(feedback.Table, feedback.Columns, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUint64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Feedback.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedback.FieldID)
		for _, f := range fields {
			if !feedback.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != feedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(feedback.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.Content(); ok {
		_spec.SetField(feedback.FieldContent, field.TypeString, value)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(feedback.FieldType, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.AddedType(); ok {
		_spec.AddField(feedback.FieldType, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.URL(); ok {
		_spec.SetField(feedback.FieldURL, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedURL(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, feedback.FieldURL, value)
		})
	}
	if fuo.mutation.URLCleared() {
		_spec.ClearField(feedback.FieldURL, field.TypeJSON)
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(feedback.FieldName, field.TypeString, value)
	}
	if fuo.mutation.NameCleared() {
		_spec.ClearField(feedback.FieldName, field.TypeString)
	}
	if value, ok := fuo.mutation.Phone(); ok {
		_spec.SetField(feedback.FieldPhone, field.TypeString, value)
	}
	if fuo.mutation.PhoneCleared() {
		_spec.ClearField(feedback.FieldPhone, field.TypeString)
	}
	if fuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.EnterpriseTable,
			Columns: []string{feedback.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.EnterpriseTable,
			Columns: []string{feedback.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.AgentTable,
			Columns: []string{feedback.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.AgentTable,
			Columns: []string{feedback.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Feedback{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{feedback.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
