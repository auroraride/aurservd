// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/batterynew"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryNewDelete is the builder for deleting a BatteryNew entity.
type BatteryNewDelete struct {
	config
	hooks    []Hook
	mutation *BatteryNewMutation
}

// Where appends a list predicates to the BatteryNewDelete builder.
func (bnd *BatteryNewDelete) Where(ps ...predicate.BatteryNew) *BatteryNewDelete {
	bnd.mutation.Where(ps...)
	return bnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bnd *BatteryNewDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bnd.sqlExec, bnd.mutation, bnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bnd *BatteryNewDelete) ExecX(ctx context.Context) int {
	n, err := bnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bnd *BatteryNewDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(batterynew.Table, sqlgraph.NewFieldSpec(batterynew.FieldID, field.TypeUint64))
	if ps := bnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bnd.mutation.done = true
	return affected, err
}

// BatteryNewDeleteOne is the builder for deleting a single BatteryNew entity.
type BatteryNewDeleteOne struct {
	bnd *BatteryNewDelete
}

// Where appends a list predicates to the BatteryNewDelete builder.
func (bndo *BatteryNewDeleteOne) Where(ps ...predicate.BatteryNew) *BatteryNewDeleteOne {
	bndo.bnd.mutation.Where(ps...)
	return bndo
}

// Exec executes the deletion query.
func (bndo *BatteryNewDeleteOne) Exec(ctx context.Context) error {
	n, err := bndo.bnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{batterynew.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bndo *BatteryNewDeleteOne) ExecX(ctx context.Context) {
	if err := bndo.Exec(ctx); err != nil {
		panic(err)
	}
}
