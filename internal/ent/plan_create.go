// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/plan"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlanCreate) SetCreatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCreatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlanCreate) SetUpdatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableUpdatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PlanCreate) SetDeletedAt(t time.Time) *PlanCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableDeletedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetCreator sets the "creator" field.
func (pc *PlanCreate) SetCreator(m *model.Modifier) *PlanCreate {
	pc.mutation.SetCreator(m)
	return pc
}

// SetLastModifier sets the "last_modifier" field.
func (pc *PlanCreate) SetLastModifier(m *model.Modifier) *PlanCreate {
	pc.mutation.SetLastModifier(m)
	return pc
}

// SetRemark sets the "remark" field.
func (pc *PlanCreate) SetRemark(s string) *PlanCreate {
	pc.mutation.SetRemark(s)
	return pc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pc *PlanCreate) SetNillableRemark(s *string) *PlanCreate {
	if s != nil {
		pc.SetRemark(*s)
	}
	return pc
}

// SetBrandID sets the "brand_id" field.
func (pc *PlanCreate) SetBrandID(u uint64) *PlanCreate {
	pc.mutation.SetBrandID(u)
	return pc
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (pc *PlanCreate) SetNillableBrandID(u *uint64) *PlanCreate {
	if u != nil {
		pc.SetBrandID(*u)
	}
	return pc
}

// SetModel sets the "model" field.
func (pc *PlanCreate) SetModel(s string) *PlanCreate {
	pc.mutation.SetModel(s)
	return pc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (pc *PlanCreate) SetNillableModel(s *string) *PlanCreate {
	if s != nil {
		pc.SetModel(*s)
	}
	return pc
}

// SetEnable sets the "enable" field.
func (pc *PlanCreate) SetEnable(b bool) *PlanCreate {
	pc.mutation.SetEnable(b)
	return pc
}

// SetType sets the "type" field.
func (pc *PlanCreate) SetType(u uint8) *PlanCreate {
	pc.mutation.SetType(u)
	return pc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pc *PlanCreate) SetNillableType(u *uint8) *PlanCreate {
	if u != nil {
		pc.SetType(*u)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PlanCreate) SetName(s string) *PlanCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetStart sets the "start" field.
func (pc *PlanCreate) SetStart(t time.Time) *PlanCreate {
	pc.mutation.SetStart(t)
	return pc
}

// SetEnd sets the "end" field.
func (pc *PlanCreate) SetEnd(t time.Time) *PlanCreate {
	pc.mutation.SetEnd(t)
	return pc
}

// SetPrice sets the "price" field.
func (pc *PlanCreate) SetPrice(f float64) *PlanCreate {
	pc.mutation.SetPrice(f)
	return pc
}

// SetDays sets the "days" field.
func (pc *PlanCreate) SetDays(u uint) *PlanCreate {
	pc.mutation.SetDays(u)
	return pc
}

// SetCommission sets the "commission" field.
func (pc *PlanCreate) SetCommission(f float64) *PlanCreate {
	pc.mutation.SetCommission(f)
	return pc
}

// SetOriginal sets the "original" field.
func (pc *PlanCreate) SetOriginal(f float64) *PlanCreate {
	pc.mutation.SetOriginal(f)
	return pc
}

// SetNillableOriginal sets the "original" field if the given value is not nil.
func (pc *PlanCreate) SetNillableOriginal(f *float64) *PlanCreate {
	if f != nil {
		pc.SetOriginal(*f)
	}
	return pc
}

// SetDesc sets the "desc" field.
func (pc *PlanCreate) SetDesc(s string) *PlanCreate {
	pc.mutation.SetDesc(s)
	return pc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pc *PlanCreate) SetNillableDesc(s *string) *PlanCreate {
	if s != nil {
		pc.SetDesc(*s)
	}
	return pc
}

// SetParentID sets the "parent_id" field.
func (pc *PlanCreate) SetParentID(u uint64) *PlanCreate {
	pc.mutation.SetParentID(u)
	return pc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pc *PlanCreate) SetNillableParentID(u *uint64) *PlanCreate {
	if u != nil {
		pc.SetParentID(*u)
	}
	return pc
}

// SetDiscountNewly sets the "discount_newly" field.
func (pc *PlanCreate) SetDiscountNewly(f float64) *PlanCreate {
	pc.mutation.SetDiscountNewly(f)
	return pc
}

// SetNillableDiscountNewly sets the "discount_newly" field if the given value is not nil.
func (pc *PlanCreate) SetNillableDiscountNewly(f *float64) *PlanCreate {
	if f != nil {
		pc.SetDiscountNewly(*f)
	}
	return pc
}

// SetNotes sets the "notes" field.
func (pc *PlanCreate) SetNotes(s []string) *PlanCreate {
	pc.mutation.SetNotes(s)
	return pc
}

// SetIntelligent sets the "intelligent" field.
func (pc *PlanCreate) SetIntelligent(b bool) *PlanCreate {
	pc.mutation.SetIntelligent(b)
	return pc
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (pc *PlanCreate) SetNillableIntelligent(b *bool) *PlanCreate {
	if b != nil {
		pc.SetIntelligent(*b)
	}
	return pc
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (pc *PlanCreate) SetBrand(e *EbikeBrand) *PlanCreate {
	return pc.SetBrandID(e.ID)
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (pc *PlanCreate) AddCityIDs(ids ...uint64) *PlanCreate {
	pc.mutation.AddCityIDs(ids...)
	return pc
}

// AddCities adds the "cities" edges to the City entity.
func (pc *PlanCreate) AddCities(c ...*City) *PlanCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddCityIDs(ids...)
}

// SetParent sets the "parent" edge to the Plan entity.
func (pc *PlanCreate) SetParent(p *Plan) *PlanCreate {
	return pc.SetParentID(p.ID)
}

// AddComplexIDs adds the "complexes" edge to the Plan entity by IDs.
func (pc *PlanCreate) AddComplexIDs(ids ...uint64) *PlanCreate {
	pc.mutation.AddComplexIDs(ids...)
	return pc
}

// AddComplexes adds the "complexes" edges to the Plan entity.
func (pc *PlanCreate) AddComplexes(p ...*Plan) *PlanCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddComplexIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if plan.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized plan.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := plan.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if plan.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized plan.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := plan.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.GetType(); !ok {
		v := plan.DefaultType
		pc.mutation.SetType(v)
	}
	if _, ok := pc.mutation.DiscountNewly(); !ok {
		v := plan.DefaultDiscountNewly
		pc.mutation.SetDiscountNewly(v)
	}
	if _, ok := pc.mutation.Intelligent(); !ok {
		v := plan.DefaultIntelligent
		pc.mutation.SetIntelligent(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Plan.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Plan.updated_at"`)}
	}
	if _, ok := pc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Plan.enable"`)}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Plan.type"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Plan.name"`)}
	}
	if _, ok := pc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "Plan.start"`)}
	}
	if _, ok := pc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "Plan.end"`)}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Plan.price"`)}
	}
	if _, ok := pc.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "Plan.days"`)}
	}
	if _, ok := pc.mutation.Commission(); !ok {
		return &ValidationError{Name: "commission", err: errors.New(`ent: missing required field "Plan.commission"`)}
	}
	if _, ok := pc.mutation.DiscountNewly(); !ok {
		return &ValidationError{Name: "discount_newly", err: errors.New(`ent: missing required field "Plan.discount_newly"`)}
	}
	if _, ok := pc.mutation.Intelligent(); !ok {
		return &ValidationError{Name: "intelligent", err: errors.New(`ent: missing required field "Plan.intelligent"`)}
	}
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(plan.Table, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(plan.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.Creator(); ok {
		_spec.SetField(plan.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pc.mutation.LastModifier(); ok {
		_spec.SetField(plan.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pc.mutation.Remark(); ok {
		_spec.SetField(plan.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pc.mutation.Model(); ok {
		_spec.SetField(plan.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := pc.mutation.Enable(); ok {
		_spec.SetField(plan.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(plan.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Start(); ok {
		_spec.SetField(plan.FieldStart, field.TypeTime, value)
		_node.Start = value
	}
	if value, ok := pc.mutation.End(); ok {
		_spec.SetField(plan.FieldEnd, field.TypeTime, value)
		_node.End = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(plan.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.Days(); ok {
		_spec.SetField(plan.FieldDays, field.TypeUint, value)
		_node.Days = value
	}
	if value, ok := pc.mutation.Commission(); ok {
		_spec.SetField(plan.FieldCommission, field.TypeFloat64, value)
		_node.Commission = value
	}
	if value, ok := pc.mutation.Original(); ok {
		_spec.SetField(plan.FieldOriginal, field.TypeFloat64, value)
		_node.Original = value
	}
	if value, ok := pc.mutation.Desc(); ok {
		_spec.SetField(plan.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := pc.mutation.DiscountNewly(); ok {
		_spec.SetField(plan.FieldDiscountNewly, field.TypeFloat64, value)
		_node.DiscountNewly = value
	}
	if value, ok := pc.mutation.Notes(); ok {
		_spec.SetField(plan.FieldNotes, field.TypeJSON, value)
		_node.Notes = value
	}
	if value, ok := pc.mutation.Intelligent(); ok {
		_spec.SetField(plan.FieldIntelligent, field.TypeBool, value)
		_node.Intelligent = value
	}
	if nodes := pc.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BrandTable,
			Columns: []string{plan.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ComplexesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plan.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PlanCreate) OnConflict(opts ...sql.ConflictOption) *PlanUpsertOne {
	pc.conflict = opts
	return &PlanUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PlanCreate) OnConflictColumns(columns ...string) *PlanUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlanUpsertOne{
		create: pc,
	}
}

type (
	// PlanUpsertOne is the builder for "upsert"-ing
	//  one Plan node.
	PlanUpsertOne struct {
		create *PlanCreate
	}

	// PlanUpsert is the "OnConflict" setter.
	PlanUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsert) SetUpdatedAt(v time.Time) *PlanUpsert {
	u.Set(plan.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsert) UpdateUpdatedAt() *PlanUpsert {
	u.SetExcluded(plan.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanUpsert) SetDeletedAt(v time.Time) *PlanUpsert {
	u.Set(plan.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanUpsert) UpdateDeletedAt() *PlanUpsert {
	u.SetExcluded(plan.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanUpsert) ClearDeletedAt() *PlanUpsert {
	u.SetNull(plan.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PlanUpsert) SetLastModifier(v *model.Modifier) *PlanUpsert {
	u.Set(plan.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PlanUpsert) UpdateLastModifier() *PlanUpsert {
	u.SetExcluded(plan.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PlanUpsert) ClearLastModifier() *PlanUpsert {
	u.SetNull(plan.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PlanUpsert) SetRemark(v string) *PlanUpsert {
	u.Set(plan.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PlanUpsert) UpdateRemark() *PlanUpsert {
	u.SetExcluded(plan.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PlanUpsert) ClearRemark() *PlanUpsert {
	u.SetNull(plan.FieldRemark)
	return u
}

// SetBrandID sets the "brand_id" field.
func (u *PlanUpsert) SetBrandID(v uint64) *PlanUpsert {
	u.Set(plan.FieldBrandID, v)
	return u
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *PlanUpsert) UpdateBrandID() *PlanUpsert {
	u.SetExcluded(plan.FieldBrandID)
	return u
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *PlanUpsert) ClearBrandID() *PlanUpsert {
	u.SetNull(plan.FieldBrandID)
	return u
}

// SetModel sets the "model" field.
func (u *PlanUpsert) SetModel(v string) *PlanUpsert {
	u.Set(plan.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PlanUpsert) UpdateModel() *PlanUpsert {
	u.SetExcluded(plan.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *PlanUpsert) ClearModel() *PlanUpsert {
	u.SetNull(plan.FieldModel)
	return u
}

// SetEnable sets the "enable" field.
func (u *PlanUpsert) SetEnable(v bool) *PlanUpsert {
	u.Set(plan.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PlanUpsert) UpdateEnable() *PlanUpsert {
	u.SetExcluded(plan.FieldEnable)
	return u
}

// SetType sets the "type" field.
func (u *PlanUpsert) SetType(v uint8) *PlanUpsert {
	u.Set(plan.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlanUpsert) UpdateType() *PlanUpsert {
	u.SetExcluded(plan.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *PlanUpsert) AddType(v uint8) *PlanUpsert {
	u.Add(plan.FieldType, v)
	return u
}

// SetName sets the "name" field.
func (u *PlanUpsert) SetName(v string) *PlanUpsert {
	u.Set(plan.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsert) UpdateName() *PlanUpsert {
	u.SetExcluded(plan.FieldName)
	return u
}

// SetStart sets the "start" field.
func (u *PlanUpsert) SetStart(v time.Time) *PlanUpsert {
	u.Set(plan.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *PlanUpsert) UpdateStart() *PlanUpsert {
	u.SetExcluded(plan.FieldStart)
	return u
}

// SetEnd sets the "end" field.
func (u *PlanUpsert) SetEnd(v time.Time) *PlanUpsert {
	u.Set(plan.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *PlanUpsert) UpdateEnd() *PlanUpsert {
	u.SetExcluded(plan.FieldEnd)
	return u
}

// SetPrice sets the "price" field.
func (u *PlanUpsert) SetPrice(v float64) *PlanUpsert {
	u.Set(plan.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PlanUpsert) UpdatePrice() *PlanUpsert {
	u.SetExcluded(plan.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *PlanUpsert) AddPrice(v float64) *PlanUpsert {
	u.Add(plan.FieldPrice, v)
	return u
}

// SetDays sets the "days" field.
func (u *PlanUpsert) SetDays(v uint) *PlanUpsert {
	u.Set(plan.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *PlanUpsert) UpdateDays() *PlanUpsert {
	u.SetExcluded(plan.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *PlanUpsert) AddDays(v uint) *PlanUpsert {
	u.Add(plan.FieldDays, v)
	return u
}

// SetCommission sets the "commission" field.
func (u *PlanUpsert) SetCommission(v float64) *PlanUpsert {
	u.Set(plan.FieldCommission, v)
	return u
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *PlanUpsert) UpdateCommission() *PlanUpsert {
	u.SetExcluded(plan.FieldCommission)
	return u
}

// AddCommission adds v to the "commission" field.
func (u *PlanUpsert) AddCommission(v float64) *PlanUpsert {
	u.Add(plan.FieldCommission, v)
	return u
}

// SetOriginal sets the "original" field.
func (u *PlanUpsert) SetOriginal(v float64) *PlanUpsert {
	u.Set(plan.FieldOriginal, v)
	return u
}

// UpdateOriginal sets the "original" field to the value that was provided on create.
func (u *PlanUpsert) UpdateOriginal() *PlanUpsert {
	u.SetExcluded(plan.FieldOriginal)
	return u
}

// AddOriginal adds v to the "original" field.
func (u *PlanUpsert) AddOriginal(v float64) *PlanUpsert {
	u.Add(plan.FieldOriginal, v)
	return u
}

// ClearOriginal clears the value of the "original" field.
func (u *PlanUpsert) ClearOriginal() *PlanUpsert {
	u.SetNull(plan.FieldOriginal)
	return u
}

// SetDesc sets the "desc" field.
func (u *PlanUpsert) SetDesc(v string) *PlanUpsert {
	u.Set(plan.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PlanUpsert) UpdateDesc() *PlanUpsert {
	u.SetExcluded(plan.FieldDesc)
	return u
}

// ClearDesc clears the value of the "desc" field.
func (u *PlanUpsert) ClearDesc() *PlanUpsert {
	u.SetNull(plan.FieldDesc)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *PlanUpsert) SetParentID(v uint64) *PlanUpsert {
	u.Set(plan.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PlanUpsert) UpdateParentID() *PlanUpsert {
	u.SetExcluded(plan.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PlanUpsert) ClearParentID() *PlanUpsert {
	u.SetNull(plan.FieldParentID)
	return u
}

// SetDiscountNewly sets the "discount_newly" field.
func (u *PlanUpsert) SetDiscountNewly(v float64) *PlanUpsert {
	u.Set(plan.FieldDiscountNewly, v)
	return u
}

// UpdateDiscountNewly sets the "discount_newly" field to the value that was provided on create.
func (u *PlanUpsert) UpdateDiscountNewly() *PlanUpsert {
	u.SetExcluded(plan.FieldDiscountNewly)
	return u
}

// AddDiscountNewly adds v to the "discount_newly" field.
func (u *PlanUpsert) AddDiscountNewly(v float64) *PlanUpsert {
	u.Add(plan.FieldDiscountNewly, v)
	return u
}

// SetNotes sets the "notes" field.
func (u *PlanUpsert) SetNotes(v []string) *PlanUpsert {
	u.Set(plan.FieldNotes, v)
	return u
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *PlanUpsert) UpdateNotes() *PlanUpsert {
	u.SetExcluded(plan.FieldNotes)
	return u
}

// ClearNotes clears the value of the "notes" field.
func (u *PlanUpsert) ClearNotes() *PlanUpsert {
	u.SetNull(plan.FieldNotes)
	return u
}

// SetIntelligent sets the "intelligent" field.
func (u *PlanUpsert) SetIntelligent(v bool) *PlanUpsert {
	u.Set(plan.FieldIntelligent, v)
	return u
}

// UpdateIntelligent sets the "intelligent" field to the value that was provided on create.
func (u *PlanUpsert) UpdateIntelligent() *PlanUpsert {
	u.SetExcluded(plan.FieldIntelligent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlanUpsertOne) UpdateNewValues() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(plan.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(plan.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlanUpsertOne) Ignore() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanUpsertOne) DoNothing() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanCreate.OnConflict
// documentation for more info.
func (u *PlanUpsertOne) Update(set func(*PlanUpsert)) *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsertOne) SetUpdatedAt(v time.Time) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateUpdatedAt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanUpsertOne) SetDeletedAt(v time.Time) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateDeletedAt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanUpsertOne) ClearDeletedAt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PlanUpsertOne) SetLastModifier(v *model.Modifier) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateLastModifier() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PlanUpsertOne) ClearLastModifier() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PlanUpsertOne) SetRemark(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateRemark() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PlanUpsertOne) ClearRemark() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearRemark()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *PlanUpsertOne) SetBrandID(v uint64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateBrandID() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *PlanUpsertOne) ClearBrandID() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearBrandID()
	})
}

// SetModel sets the "model" field.
func (u *PlanUpsertOne) SetModel(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateModel() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *PlanUpsertOne) ClearModel() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearModel()
	})
}

// SetEnable sets the "enable" field.
func (u *PlanUpsertOne) SetEnable(v bool) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateEnable() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateEnable()
	})
}

// SetType sets the "type" field.
func (u *PlanUpsertOne) SetType(v uint8) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PlanUpsertOne) AddType(v uint8) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateType() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *PlanUpsertOne) SetName(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateName() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateName()
	})
}

// SetStart sets the "start" field.
func (u *PlanUpsertOne) SetStart(v time.Time) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateStart() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *PlanUpsertOne) SetEnd(v time.Time) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateEnd() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateEnd()
	})
}

// SetPrice sets the "price" field.
func (u *PlanUpsertOne) SetPrice(v float64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *PlanUpsertOne) AddPrice(v float64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdatePrice() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePrice()
	})
}

// SetDays sets the "days" field.
func (u *PlanUpsertOne) SetDays(v uint) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *PlanUpsertOne) AddDays(v uint) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateDays() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDays()
	})
}

// SetCommission sets the "commission" field.
func (u *PlanUpsertOne) SetCommission(v float64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetCommission(v)
	})
}

// AddCommission adds v to the "commission" field.
func (u *PlanUpsertOne) AddCommission(v float64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateCommission() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateCommission()
	})
}

// SetOriginal sets the "original" field.
func (u *PlanUpsertOne) SetOriginal(v float64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetOriginal(v)
	})
}

// AddOriginal adds v to the "original" field.
func (u *PlanUpsertOne) AddOriginal(v float64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddOriginal(v)
	})
}

// UpdateOriginal sets the "original" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateOriginal() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateOriginal()
	})
}

// ClearOriginal clears the value of the "original" field.
func (u *PlanUpsertOne) ClearOriginal() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearOriginal()
	})
}

// SetDesc sets the "desc" field.
func (u *PlanUpsertOne) SetDesc(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateDesc() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *PlanUpsertOne) ClearDesc() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDesc()
	})
}

// SetParentID sets the "parent_id" field.
func (u *PlanUpsertOne) SetParentID(v uint64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateParentID() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PlanUpsertOne) ClearParentID() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearParentID()
	})
}

// SetDiscountNewly sets the "discount_newly" field.
func (u *PlanUpsertOne) SetDiscountNewly(v float64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetDiscountNewly(v)
	})
}

// AddDiscountNewly adds v to the "discount_newly" field.
func (u *PlanUpsertOne) AddDiscountNewly(v float64) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.AddDiscountNewly(v)
	})
}

// UpdateDiscountNewly sets the "discount_newly" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateDiscountNewly() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDiscountNewly()
	})
}

// SetNotes sets the "notes" field.
func (u *PlanUpsertOne) SetNotes(v []string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateNotes() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *PlanUpsertOne) ClearNotes() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearNotes()
	})
}

// SetIntelligent sets the "intelligent" field.
func (u *PlanUpsertOne) SetIntelligent(v bool) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetIntelligent(v)
	})
}

// UpdateIntelligent sets the "intelligent" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateIntelligent() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateIntelligent()
	})
}

// Exec executes the query.
func (u *PlanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	builders []*PlanCreate
	conflict []sql.ConflictOption
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PlanCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanUpsertBulk {
	pcb.conflict = opts
	return &PlanUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PlanCreateBulk) OnConflictColumns(columns ...string) *PlanUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlanUpsertBulk{
		create: pcb,
	}
}

// PlanUpsertBulk is the builder for "upsert"-ing
// a bulk of Plan nodes.
type PlanUpsertBulk struct {
	create *PlanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlanUpsertBulk) UpdateNewValues() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(plan.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(plan.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlanUpsertBulk) Ignore() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanUpsertBulk) DoNothing() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanCreateBulk.OnConflict
// documentation for more info.
func (u *PlanUpsertBulk) Update(set func(*PlanUpsert)) *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsertBulk) SetUpdatedAt(v time.Time) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateUpdatedAt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PlanUpsertBulk) SetDeletedAt(v time.Time) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateDeletedAt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PlanUpsertBulk) ClearDeletedAt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PlanUpsertBulk) SetLastModifier(v *model.Modifier) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateLastModifier() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PlanUpsertBulk) ClearLastModifier() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PlanUpsertBulk) SetRemark(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateRemark() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PlanUpsertBulk) ClearRemark() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearRemark()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *PlanUpsertBulk) SetBrandID(v uint64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateBrandID() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *PlanUpsertBulk) ClearBrandID() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearBrandID()
	})
}

// SetModel sets the "model" field.
func (u *PlanUpsertBulk) SetModel(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateModel() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *PlanUpsertBulk) ClearModel() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearModel()
	})
}

// SetEnable sets the "enable" field.
func (u *PlanUpsertBulk) SetEnable(v bool) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateEnable() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateEnable()
	})
}

// SetType sets the "type" field.
func (u *PlanUpsertBulk) SetType(v uint8) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PlanUpsertBulk) AddType(v uint8) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateType() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *PlanUpsertBulk) SetName(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateName() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateName()
	})
}

// SetStart sets the "start" field.
func (u *PlanUpsertBulk) SetStart(v time.Time) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateStart() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *PlanUpsertBulk) SetEnd(v time.Time) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateEnd() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateEnd()
	})
}

// SetPrice sets the "price" field.
func (u *PlanUpsertBulk) SetPrice(v float64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *PlanUpsertBulk) AddPrice(v float64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdatePrice() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdatePrice()
	})
}

// SetDays sets the "days" field.
func (u *PlanUpsertBulk) SetDays(v uint) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *PlanUpsertBulk) AddDays(v uint) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateDays() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDays()
	})
}

// SetCommission sets the "commission" field.
func (u *PlanUpsertBulk) SetCommission(v float64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetCommission(v)
	})
}

// AddCommission adds v to the "commission" field.
func (u *PlanUpsertBulk) AddCommission(v float64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddCommission(v)
	})
}

// UpdateCommission sets the "commission" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateCommission() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateCommission()
	})
}

// SetOriginal sets the "original" field.
func (u *PlanUpsertBulk) SetOriginal(v float64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetOriginal(v)
	})
}

// AddOriginal adds v to the "original" field.
func (u *PlanUpsertBulk) AddOriginal(v float64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddOriginal(v)
	})
}

// UpdateOriginal sets the "original" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateOriginal() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateOriginal()
	})
}

// ClearOriginal clears the value of the "original" field.
func (u *PlanUpsertBulk) ClearOriginal() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearOriginal()
	})
}

// SetDesc sets the "desc" field.
func (u *PlanUpsertBulk) SetDesc(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateDesc() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *PlanUpsertBulk) ClearDesc() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDesc()
	})
}

// SetParentID sets the "parent_id" field.
func (u *PlanUpsertBulk) SetParentID(v uint64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateParentID() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *PlanUpsertBulk) ClearParentID() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearParentID()
	})
}

// SetDiscountNewly sets the "discount_newly" field.
func (u *PlanUpsertBulk) SetDiscountNewly(v float64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetDiscountNewly(v)
	})
}

// AddDiscountNewly adds v to the "discount_newly" field.
func (u *PlanUpsertBulk) AddDiscountNewly(v float64) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.AddDiscountNewly(v)
	})
}

// UpdateDiscountNewly sets the "discount_newly" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateDiscountNewly() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDiscountNewly()
	})
}

// SetNotes sets the "notes" field.
func (u *PlanUpsertBulk) SetNotes(v []string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetNotes(v)
	})
}

// UpdateNotes sets the "notes" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateNotes() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateNotes()
	})
}

// ClearNotes clears the value of the "notes" field.
func (u *PlanUpsertBulk) ClearNotes() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearNotes()
	})
}

// SetIntelligent sets the "intelligent" field.
func (u *PlanUpsertBulk) SetIntelligent(v bool) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetIntelligent(v)
	})
}

// UpdateIntelligent sets the "intelligent" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateIntelligent() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateIntelligent()
	})
}

// Exec executes the query.
func (u *PlanUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
