// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/batterymodel"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// BatteryModelMutation represents an operation that mutates the BatteryModel nodes in the graph.
type BatteryModelMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	model           *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	cabinets        map[uint64]struct{}
	removedcabinets map[uint64]struct{}
	clearedcabinets bool
	done            bool
	oldValue        func(context.Context) (*BatteryModel, error)
	predicates      []predicate.BatteryModel
}

var _ ent.Mutation = (*BatteryModelMutation)(nil)

// batterymodelOption allows management of the mutation configuration using functional options.
type batterymodelOption func(*BatteryModelMutation)

// newBatteryModelMutation creates new mutation for the BatteryModel entity.
func newBatteryModelMutation(c config, op Op, opts ...batterymodelOption) *BatteryModelMutation {
	m := &BatteryModelMutation{
		config:        c,
		op:            op,
		typ:           TypeBatteryModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBatteryModelID sets the ID field of the mutation.
func withBatteryModelID(id uint64) batterymodelOption {
	return func(m *BatteryModelMutation) {
		var (
			err   error
			once  sync.Once
			value *BatteryModel
		)
		m.oldValue = func(ctx context.Context) (*BatteryModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BatteryModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBatteryModel sets the old BatteryModel of the mutation.
func withBatteryModel(node *BatteryModel) batterymodelOption {
	return func(m *BatteryModelMutation) {
		m.oldValue = func(context.Context) (*BatteryModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BatteryModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BatteryModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BatteryModelMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BatteryModelMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BatteryModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetModel sets the "model" field.
func (m *BatteryModelMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *BatteryModelMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the BatteryModel entity.
// If the BatteryModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BatteryModelMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *BatteryModelMutation) ResetModel() {
	m.model = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *BatteryModelMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BatteryModelMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BatteryModel entity.
// If the BatteryModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BatteryModelMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BatteryModelMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by ids.
func (m *BatteryModelMutation) AddCabinetIDs(ids ...uint64) {
	if m.cabinets == nil {
		m.cabinets = make(map[uint64]struct{})
	}
	for i := range ids {
		m.cabinets[ids[i]] = struct{}{}
	}
}

// ClearCabinets clears the "cabinets" edge to the Cabinet entity.
func (m *BatteryModelMutation) ClearCabinets() {
	m.clearedcabinets = true
}

// CabinetsCleared reports if the "cabinets" edge to the Cabinet entity was cleared.
func (m *BatteryModelMutation) CabinetsCleared() bool {
	return m.clearedcabinets
}

// RemoveCabinetIDs removes the "cabinets" edge to the Cabinet entity by IDs.
func (m *BatteryModelMutation) RemoveCabinetIDs(ids ...uint64) {
	if m.removedcabinets == nil {
		m.removedcabinets = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.cabinets, ids[i])
		m.removedcabinets[ids[i]] = struct{}{}
	}
}

// RemovedCabinets returns the removed IDs of the "cabinets" edge to the Cabinet entity.
func (m *BatteryModelMutation) RemovedCabinetsIDs() (ids []uint64) {
	for id := range m.removedcabinets {
		ids = append(ids, id)
	}
	return
}

// CabinetsIDs returns the "cabinets" edge IDs in the mutation.
func (m *BatteryModelMutation) CabinetsIDs() (ids []uint64) {
	for id := range m.cabinets {
		ids = append(ids, id)
	}
	return
}

// ResetCabinets resets all changes to the "cabinets" edge.
func (m *BatteryModelMutation) ResetCabinets() {
	m.cabinets = nil
	m.clearedcabinets = false
	m.removedcabinets = nil
}

// Where appends a list predicates to the BatteryModelMutation builder.
func (m *BatteryModelMutation) Where(ps ...predicate.BatteryModel) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BatteryModelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BatteryModel).
func (m *BatteryModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BatteryModelMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.model != nil {
		fields = append(fields, batterymodel.FieldModel)
	}
	if m.created_at != nil {
		fields = append(fields, batterymodel.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BatteryModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case batterymodel.FieldModel:
		return m.Model()
	case batterymodel.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BatteryModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case batterymodel.FieldModel:
		return m.OldModel(ctx)
	case batterymodel.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown BatteryModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BatteryModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case batterymodel.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case batterymodel.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown BatteryModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BatteryModelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BatteryModelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BatteryModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BatteryModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BatteryModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BatteryModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BatteryModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BatteryModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BatteryModelMutation) ResetField(name string) error {
	switch name {
	case batterymodel.FieldModel:
		m.ResetModel()
		return nil
	case batterymodel.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown BatteryModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BatteryModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cabinets != nil {
		edges = append(edges, batterymodel.EdgeCabinets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BatteryModelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case batterymodel.EdgeCabinets:
		ids := make([]ent.Value, 0, len(m.cabinets))
		for id := range m.cabinets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BatteryModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcabinets != nil {
		edges = append(edges, batterymodel.EdgeCabinets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BatteryModelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case batterymodel.EdgeCabinets:
		ids := make([]ent.Value, 0, len(m.removedcabinets))
		for id := range m.removedcabinets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BatteryModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcabinets {
		edges = append(edges, batterymodel.EdgeCabinets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BatteryModelMutation) EdgeCleared(name string) bool {
	switch name {
	case batterymodel.EdgeCabinets:
		return m.clearedcabinets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BatteryModelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown BatteryModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BatteryModelMutation) ResetEdge(name string) error {
	switch name {
	case batterymodel.EdgeCabinets:
		m.ResetCabinets()
		return nil
	}
	return fmt.Errorf("unknown BatteryModel edge %s", name)
}

