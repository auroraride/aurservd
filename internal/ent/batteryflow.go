// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/adapter"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// BatteryFlow is the model entity for the BatteryFlow schema.
type BatteryFlow struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SubscribeID holds the value of the "subscribe_id" field.
	SubscribeID *uint64 `json:"subscribe_id,omitempty"`
	// 电池ID
	BatteryID uint64 `json:"battery_id,omitempty"`
	// 电池编号
	Sn string `json:"sn,omitempty"`
	// 容量, -1代表未查询到
	Soc float64 `json:"soc,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// 电柜ID
	CabinetID uint64 `json:"cabinet_id,omitempty"`
	// 电柜编号
	Serial string `json:"serial,omitempty"`
	// 仓位序号, 从1开始
	Ordinal int `json:"ordinal,omitempty"`
	// 坐标
	Geom *adapter.Geometry `json:"geom,omitempty"`
	// 备注信息
	Remark *string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatteryFlowQuery when eager-loading is set.
	Edges         BatteryFlowEdges `json:"edges"`
	battery_flows *uint64
	selectValues  sql.SelectValues
}

// BatteryFlowEdges holds the relations/edges for other nodes in the graph.
type BatteryFlowEdges struct {
	// Subscribe holds the value of the subscribe edge.
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// 所属电柜
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// 所属骑手
	Rider *Rider `json:"rider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryFlowEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.Subscribe != nil {
		return e.Subscribe, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: subscribe.Label}
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryFlowEdges) CabinetOrErr() (*Cabinet, error) {
	if e.Cabinet != nil {
		return e.Cabinet, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: cabinet.Label}
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryFlowEdges) RiderOrErr() (*Rider, error) {
	if e.Rider != nil {
		return e.Rider, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: rider.Label}
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BatteryFlow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case batteryflow.FieldGeom:
			values[i] = new(adapter.Geometry)
		case batteryflow.FieldSoc:
			values[i] = new(sql.NullFloat64)
		case batteryflow.FieldID, batteryflow.FieldSubscribeID, batteryflow.FieldBatteryID, batteryflow.FieldRiderID, batteryflow.FieldCabinetID, batteryflow.FieldOrdinal:
			values[i] = new(sql.NullInt64)
		case batteryflow.FieldSn, batteryflow.FieldSerial, batteryflow.FieldRemark:
			values[i] = new(sql.NullString)
		case batteryflow.FieldCreatedAt, batteryflow.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case batteryflow.ForeignKeys[0]: // battery_flows
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BatteryFlow fields.
func (bf *BatteryFlow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case batteryflow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bf.ID = uint64(value.Int64)
		case batteryflow.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bf.CreatedAt = value.Time
			}
		case batteryflow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bf.UpdatedAt = value.Time
			}
		case batteryflow.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				bf.SubscribeID = new(uint64)
				*bf.SubscribeID = uint64(value.Int64)
			}
		case batteryflow.FieldBatteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_id", values[i])
			} else if value.Valid {
				bf.BatteryID = uint64(value.Int64)
			}
		case batteryflow.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				bf.Sn = value.String
			}
		case batteryflow.FieldSoc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field soc", values[i])
			} else if value.Valid {
				bf.Soc = value.Float64
			}
		case batteryflow.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				bf.RiderID = uint64(value.Int64)
			}
		case batteryflow.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				bf.CabinetID = uint64(value.Int64)
			}
		case batteryflow.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				bf.Serial = value.String
			}
		case batteryflow.FieldOrdinal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ordinal", values[i])
			} else if value.Valid {
				bf.Ordinal = int(value.Int64)
			}
		case batteryflow.FieldGeom:
			if value, ok := values[i].(*adapter.Geometry); !ok {
				return fmt.Errorf("unexpected type %T for field geom", values[i])
			} else if value != nil {
				bf.Geom = value
			}
		case batteryflow.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				bf.Remark = new(string)
				*bf.Remark = value.String
			}
		case batteryflow.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field battery_flows", value)
			} else if value.Valid {
				bf.battery_flows = new(uint64)
				*bf.battery_flows = uint64(value.Int64)
			}
		default:
			bf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BatteryFlow.
// This includes values selected through modifiers, order, etc.
func (bf *BatteryFlow) Value(name string) (ent.Value, error) {
	return bf.selectValues.Get(name)
}

// QuerySubscribe queries the "subscribe" edge of the BatteryFlow entity.
func (bf *BatteryFlow) QuerySubscribe() *SubscribeQuery {
	return NewBatteryFlowClient(bf.config).QuerySubscribe(bf)
}

// QueryCabinet queries the "cabinet" edge of the BatteryFlow entity.
func (bf *BatteryFlow) QueryCabinet() *CabinetQuery {
	return NewBatteryFlowClient(bf.config).QueryCabinet(bf)
}

// QueryRider queries the "rider" edge of the BatteryFlow entity.
func (bf *BatteryFlow) QueryRider() *RiderQuery {
	return NewBatteryFlowClient(bf.config).QueryRider(bf)
}

// Update returns a builder for updating this BatteryFlow.
// Note that you need to call BatteryFlow.Unwrap() before calling this method if this BatteryFlow
// was returned from a transaction, and the transaction was committed or rolled back.
func (bf *BatteryFlow) Update() *BatteryFlowUpdateOne {
	return NewBatteryFlowClient(bf.config).UpdateOne(bf)
}

// Unwrap unwraps the BatteryFlow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bf *BatteryFlow) Unwrap() *BatteryFlow {
	_tx, ok := bf.config.driver.(*txDriver)
	if !ok {
		panic("ent: BatteryFlow is not a transactional entity")
	}
	bf.config.driver = _tx.drv
	return bf
}

// String implements the fmt.Stringer.
func (bf *BatteryFlow) String() string {
	var builder strings.Builder
	builder.WriteString("BatteryFlow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bf.SubscribeID; v != nil {
		builder.WriteString("subscribe_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("battery_id=")
	builder.WriteString(fmt.Sprintf("%v", bf.BatteryID))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(bf.Sn)
	builder.WriteString(", ")
	builder.WriteString("soc=")
	builder.WriteString(fmt.Sprintf("%v", bf.Soc))
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", bf.RiderID))
	builder.WriteString(", ")
	builder.WriteString("cabinet_id=")
	builder.WriteString(fmt.Sprintf("%v", bf.CabinetID))
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(bf.Serial)
	builder.WriteString(", ")
	builder.WriteString("ordinal=")
	builder.WriteString(fmt.Sprintf("%v", bf.Ordinal))
	builder.WriteString(", ")
	builder.WriteString("geom=")
	builder.WriteString(fmt.Sprintf("%v", bf.Geom))
	builder.WriteString(", ")
	if v := bf.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// BatteryFlows is a parsable slice of BatteryFlow.
type BatteryFlows []*BatteryFlow
