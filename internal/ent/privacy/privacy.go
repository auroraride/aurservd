// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"
	"fmt"

	"github.com/auroraride/aurservd/internal/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// MutationRuleFunc type is an adapter which allows the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// QueryMutationRule is an interface which groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecision{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecision{Deny}
}

type fixedDecision struct {
	decision error
}

func (f fixedDecision) EvalQuery(context.Context, ent.Query) error {
	return f.decision
}

func (f fixedDecision) EvalMutation(context.Context, ent.Mutation) error {
	return f.decision
}

type contextDecision struct {
	eval func(context.Context) error
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return contextDecision{eval}
}

func (c contextDecision) EvalQuery(ctx context.Context, _ ent.Query) error {
	return c.eval(ctx)
}

func (c contextDecision) EvalMutation(ctx context.Context, _ ent.Mutation) error {
	return c.eval(ctx)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return MutationRuleFunc(func(ctx context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return rule.EvalMutation(ctx, m)
		}
		return Skip
	})
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AgentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AgentQueryRuleFunc func(context.Context, *ent.AgentQuery) error

// EvalQuery return f(ctx, q).
func (f AgentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AgentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AgentQuery", q)
}

// The AgentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AgentMutationRuleFunc func(context.Context, *ent.AgentMutation) error

// EvalMutation calls f(ctx, m).
func (f AgentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AgentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AgentMutation", m)
}

// The AllocateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AllocateQueryRuleFunc func(context.Context, *ent.AllocateQuery) error

// EvalQuery return f(ctx, q).
func (f AllocateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AllocateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AllocateQuery", q)
}

// The AllocateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AllocateMutationRuleFunc func(context.Context, *ent.AllocateMutation) error

// EvalMutation calls f(ctx, m).
func (f AllocateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AllocateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AllocateMutation", m)
}

// The AssistanceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AssistanceQueryRuleFunc func(context.Context, *ent.AssistanceQuery) error

// EvalQuery return f(ctx, q).
func (f AssistanceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AssistanceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AssistanceQuery", q)
}

// The AssistanceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AssistanceMutationRuleFunc func(context.Context, *ent.AssistanceMutation) error

// EvalMutation calls f(ctx, m).
func (f AssistanceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AssistanceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AssistanceMutation", m)
}

// The AttendanceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AttendanceQueryRuleFunc func(context.Context, *ent.AttendanceQuery) error

// EvalQuery return f(ctx, q).
func (f AttendanceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AttendanceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AttendanceQuery", q)
}

// The AttendanceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AttendanceMutationRuleFunc func(context.Context, *ent.AttendanceMutation) error

// EvalMutation calls f(ctx, m).
func (f AttendanceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AttendanceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AttendanceMutation", m)
}

// The BatteryModelQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BatteryModelQueryRuleFunc func(context.Context, *ent.BatteryModelQuery) error

// EvalQuery return f(ctx, q).
func (f BatteryModelQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BatteryModelQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BatteryModelQuery", q)
}

// The BatteryModelMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BatteryModelMutationRuleFunc func(context.Context, *ent.BatteryModelMutation) error

// EvalMutation calls f(ctx, m).
func (f BatteryModelMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BatteryModelMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BatteryModelMutation", m)
}

// The BranchQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BranchQueryRuleFunc func(context.Context, *ent.BranchQuery) error

// EvalQuery return f(ctx, q).
func (f BranchQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BranchQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BranchQuery", q)
}

// The BranchMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BranchMutationRuleFunc func(context.Context, *ent.BranchMutation) error

// EvalMutation calls f(ctx, m).
func (f BranchMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BranchMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BranchMutation", m)
}

// The BranchContractQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BranchContractQueryRuleFunc func(context.Context, *ent.BranchContractQuery) error

// EvalQuery return f(ctx, q).
func (f BranchContractQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BranchContractQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BranchContractQuery", q)
}

// The BranchContractMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BranchContractMutationRuleFunc func(context.Context, *ent.BranchContractMutation) error

// EvalMutation calls f(ctx, m).
func (f BranchContractMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BranchContractMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BranchContractMutation", m)
}

// The BusinessQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type BusinessQueryRuleFunc func(context.Context, *ent.BusinessQuery) error

// EvalQuery return f(ctx, q).
func (f BusinessQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.BusinessQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.BusinessQuery", q)
}

// The BusinessMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type BusinessMutationRuleFunc func(context.Context, *ent.BusinessMutation) error

// EvalMutation calls f(ctx, m).
func (f BusinessMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.BusinessMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.BusinessMutation", m)
}

// The CabinetQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CabinetQueryRuleFunc func(context.Context, *ent.CabinetQuery) error

// EvalQuery return f(ctx, q).
func (f CabinetQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CabinetQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CabinetQuery", q)
}

// The CabinetMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CabinetMutationRuleFunc func(context.Context, *ent.CabinetMutation) error

// EvalMutation calls f(ctx, m).
func (f CabinetMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CabinetMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CabinetMutation", m)
}

// The CabinetFaultQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CabinetFaultQueryRuleFunc func(context.Context, *ent.CabinetFaultQuery) error

// EvalQuery return f(ctx, q).
func (f CabinetFaultQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CabinetFaultQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CabinetFaultQuery", q)
}

// The CabinetFaultMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CabinetFaultMutationRuleFunc func(context.Context, *ent.CabinetFaultMutation) error

// EvalMutation calls f(ctx, m).
func (f CabinetFaultMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CabinetFaultMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CabinetFaultMutation", m)
}

// The CityQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CityQueryRuleFunc func(context.Context, *ent.CityQuery) error

// EvalQuery return f(ctx, q).
func (f CityQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CityQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CityQuery", q)
}

// The CityMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CityMutationRuleFunc func(context.Context, *ent.CityMutation) error

// EvalMutation calls f(ctx, m).
func (f CityMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CityMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CityMutation", m)
}

// The CommissionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CommissionQueryRuleFunc func(context.Context, *ent.CommissionQuery) error

// EvalQuery return f(ctx, q).
func (f CommissionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CommissionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CommissionQuery", q)
}

// The CommissionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CommissionMutationRuleFunc func(context.Context, *ent.CommissionMutation) error

// EvalMutation calls f(ctx, m).
func (f CommissionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CommissionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CommissionMutation", m)
}

// The ContractQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ContractQueryRuleFunc func(context.Context, *ent.ContractQuery) error

// EvalQuery return f(ctx, q).
func (f ContractQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ContractQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ContractQuery", q)
}

// The ContractMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ContractMutationRuleFunc func(context.Context, *ent.ContractMutation) error

// EvalMutation calls f(ctx, m).
func (f ContractMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ContractMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ContractMutation", m)
}

// The CouponQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponQueryRuleFunc func(context.Context, *ent.CouponQuery) error

// EvalQuery return f(ctx, q).
func (f CouponQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CouponQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CouponQuery", q)
}

// The CouponMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponMutationRuleFunc func(context.Context, *ent.CouponMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CouponMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CouponMutation", m)
}

// The CouponAssemblyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponAssemblyQueryRuleFunc func(context.Context, *ent.CouponAssemblyQuery) error

// EvalQuery return f(ctx, q).
func (f CouponAssemblyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CouponAssemblyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CouponAssemblyQuery", q)
}

// The CouponAssemblyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponAssemblyMutationRuleFunc func(context.Context, *ent.CouponAssemblyMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponAssemblyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CouponAssemblyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CouponAssemblyMutation", m)
}

// The CouponTemplateQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CouponTemplateQueryRuleFunc func(context.Context, *ent.CouponTemplateQuery) error

// EvalQuery return f(ctx, q).
func (f CouponTemplateQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CouponTemplateQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CouponTemplateQuery", q)
}

// The CouponTemplateMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CouponTemplateMutationRuleFunc func(context.Context, *ent.CouponTemplateMutation) error

// EvalMutation calls f(ctx, m).
func (f CouponTemplateMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CouponTemplateMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CouponTemplateMutation", m)
}

// The EbikeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EbikeQueryRuleFunc func(context.Context, *ent.EbikeQuery) error

// EvalQuery return f(ctx, q).
func (f EbikeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EbikeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EbikeQuery", q)
}

// The EbikeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EbikeMutationRuleFunc func(context.Context, *ent.EbikeMutation) error

// EvalMutation calls f(ctx, m).
func (f EbikeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EbikeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EbikeMutation", m)
}

// The EbikeBrandQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EbikeBrandQueryRuleFunc func(context.Context, *ent.EbikeBrandQuery) error

// EvalQuery return f(ctx, q).
func (f EbikeBrandQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EbikeBrandQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EbikeBrandQuery", q)
}

// The EbikeBrandMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EbikeBrandMutationRuleFunc func(context.Context, *ent.EbikeBrandMutation) error

// EvalMutation calls f(ctx, m).
func (f EbikeBrandMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EbikeBrandMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EbikeBrandMutation", m)
}

// The EmployeeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EmployeeQueryRuleFunc func(context.Context, *ent.EmployeeQuery) error

// EvalQuery return f(ctx, q).
func (f EmployeeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EmployeeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EmployeeQuery", q)
}

// The EmployeeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EmployeeMutationRuleFunc func(context.Context, *ent.EmployeeMutation) error

// EvalMutation calls f(ctx, m).
func (f EmployeeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EmployeeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EmployeeMutation", m)
}

// The EnterpriseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EnterpriseQueryRuleFunc func(context.Context, *ent.EnterpriseQuery) error

// EvalQuery return f(ctx, q).
func (f EnterpriseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EnterpriseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EnterpriseQuery", q)
}

// The EnterpriseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EnterpriseMutationRuleFunc func(context.Context, *ent.EnterpriseMutation) error

// EvalMutation calls f(ctx, m).
func (f EnterpriseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EnterpriseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EnterpriseMutation", m)
}

// The EnterpriseBillQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EnterpriseBillQueryRuleFunc func(context.Context, *ent.EnterpriseBillQuery) error

// EvalQuery return f(ctx, q).
func (f EnterpriseBillQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EnterpriseBillQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EnterpriseBillQuery", q)
}

// The EnterpriseBillMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EnterpriseBillMutationRuleFunc func(context.Context, *ent.EnterpriseBillMutation) error

// EvalMutation calls f(ctx, m).
func (f EnterpriseBillMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EnterpriseBillMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EnterpriseBillMutation", m)
}

// The EnterpriseContractQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EnterpriseContractQueryRuleFunc func(context.Context, *ent.EnterpriseContractQuery) error

// EvalQuery return f(ctx, q).
func (f EnterpriseContractQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EnterpriseContractQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EnterpriseContractQuery", q)
}

// The EnterpriseContractMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EnterpriseContractMutationRuleFunc func(context.Context, *ent.EnterpriseContractMutation) error

// EvalMutation calls f(ctx, m).
func (f EnterpriseContractMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EnterpriseContractMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EnterpriseContractMutation", m)
}

// The EnterprisePrepaymentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EnterprisePrepaymentQueryRuleFunc func(context.Context, *ent.EnterprisePrepaymentQuery) error

// EvalQuery return f(ctx, q).
func (f EnterprisePrepaymentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EnterprisePrepaymentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EnterprisePrepaymentQuery", q)
}

// The EnterprisePrepaymentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EnterprisePrepaymentMutationRuleFunc func(context.Context, *ent.EnterprisePrepaymentMutation) error

// EvalMutation calls f(ctx, m).
func (f EnterprisePrepaymentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EnterprisePrepaymentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EnterprisePrepaymentMutation", m)
}

// The EnterprisePriceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EnterprisePriceQueryRuleFunc func(context.Context, *ent.EnterprisePriceQuery) error

// EvalQuery return f(ctx, q).
func (f EnterprisePriceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EnterprisePriceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EnterprisePriceQuery", q)
}

// The EnterprisePriceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EnterprisePriceMutationRuleFunc func(context.Context, *ent.EnterprisePriceMutation) error

// EvalMutation calls f(ctx, m).
func (f EnterprisePriceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EnterprisePriceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EnterprisePriceMutation", m)
}

// The EnterpriseStatementQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EnterpriseStatementQueryRuleFunc func(context.Context, *ent.EnterpriseStatementQuery) error

// EvalQuery return f(ctx, q).
func (f EnterpriseStatementQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EnterpriseStatementQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EnterpriseStatementQuery", q)
}

// The EnterpriseStatementMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EnterpriseStatementMutationRuleFunc func(context.Context, *ent.EnterpriseStatementMutation) error

// EvalMutation calls f(ctx, m).
func (f EnterpriseStatementMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EnterpriseStatementMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EnterpriseStatementMutation", m)
}

// The EnterpriseStationQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type EnterpriseStationQueryRuleFunc func(context.Context, *ent.EnterpriseStationQuery) error

// EvalQuery return f(ctx, q).
func (f EnterpriseStationQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EnterpriseStationQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.EnterpriseStationQuery", q)
}

// The EnterpriseStationMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type EnterpriseStationMutationRuleFunc func(context.Context, *ent.EnterpriseStationMutation) error

// EvalMutation calls f(ctx, m).
func (f EnterpriseStationMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.EnterpriseStationMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.EnterpriseStationMutation", m)
}

// The ExceptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExceptionQueryRuleFunc func(context.Context, *ent.ExceptionQuery) error

// EvalQuery return f(ctx, q).
func (f ExceptionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExceptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExceptionQuery", q)
}

// The ExceptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExceptionMutationRuleFunc func(context.Context, *ent.ExceptionMutation) error

// EvalMutation calls f(ctx, m).
func (f ExceptionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExceptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExceptionMutation", m)
}

// The ExchangeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExchangeQueryRuleFunc func(context.Context, *ent.ExchangeQuery) error

// EvalQuery return f(ctx, q).
func (f ExchangeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExchangeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExchangeQuery", q)
}

// The ExchangeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExchangeMutationRuleFunc func(context.Context, *ent.ExchangeMutation) error

// EvalMutation calls f(ctx, m).
func (f ExchangeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExchangeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExchangeMutation", m)
}

// The ExportQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExportQueryRuleFunc func(context.Context, *ent.ExportQuery) error

// EvalQuery return f(ctx, q).
func (f ExportQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExportQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExportQuery", q)
}

// The ExportMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExportMutationRuleFunc func(context.Context, *ent.ExportMutation) error

// EvalMutation calls f(ctx, m).
func (f ExportMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExportMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExportMutation", m)
}

// The InventoryQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InventoryQueryRuleFunc func(context.Context, *ent.InventoryQuery) error

// EvalQuery return f(ctx, q).
func (f InventoryQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InventoryQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.InventoryQuery", q)
}

// The InventoryMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InventoryMutationRuleFunc func(context.Context, *ent.InventoryMutation) error

// EvalMutation calls f(ctx, m).
func (f InventoryMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.InventoryMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.InventoryMutation", m)
}

// The ManagerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ManagerQueryRuleFunc func(context.Context, *ent.ManagerQuery) error

// EvalQuery return f(ctx, q).
func (f ManagerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ManagerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ManagerQuery", q)
}

// The ManagerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ManagerMutationRuleFunc func(context.Context, *ent.ManagerMutation) error

// EvalMutation calls f(ctx, m).
func (f ManagerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ManagerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ManagerMutation", m)
}

// The OrderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderQueryRuleFunc func(context.Context, *ent.OrderQuery) error

// EvalQuery return f(ctx, q).
func (f OrderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderQuery", q)
}

// The OrderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderMutationRuleFunc func(context.Context, *ent.OrderMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderMutation", m)
}

// The OrderRefundQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OrderRefundQueryRuleFunc func(context.Context, *ent.OrderRefundQuery) error

// EvalQuery return f(ctx, q).
func (f OrderRefundQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OrderRefundQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OrderRefundQuery", q)
}

// The OrderRefundMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OrderRefundMutationRuleFunc func(context.Context, *ent.OrderRefundMutation) error

// EvalMutation calls f(ctx, m).
func (f OrderRefundMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OrderRefundMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OrderRefundMutation", m)
}

// The PersonQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PersonQueryRuleFunc func(context.Context, *ent.PersonQuery) error

// EvalQuery return f(ctx, q).
func (f PersonQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PersonQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PersonQuery", q)
}

// The PersonMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PersonMutationRuleFunc func(context.Context, *ent.PersonMutation) error

// EvalMutation calls f(ctx, m).
func (f PersonMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PersonMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PersonMutation", m)
}

// The PlanQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PlanQueryRuleFunc func(context.Context, *ent.PlanQuery) error

// EvalQuery return f(ctx, q).
func (f PlanQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlanQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PlanQuery", q)
}

// The PlanMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PlanMutationRuleFunc func(context.Context, *ent.PlanMutation) error

// EvalMutation calls f(ctx, m).
func (f PlanMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PlanMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PlanMutation", m)
}

// The PlanIntroduceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PlanIntroduceQueryRuleFunc func(context.Context, *ent.PlanIntroduceQuery) error

// EvalQuery return f(ctx, q).
func (f PlanIntroduceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PlanIntroduceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PlanIntroduceQuery", q)
}

// The PlanIntroduceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PlanIntroduceMutationRuleFunc func(context.Context, *ent.PlanIntroduceMutation) error

// EvalMutation calls f(ctx, m).
func (f PlanIntroduceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PlanIntroduceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PlanIntroduceMutation", m)
}

// The PointLogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PointLogQueryRuleFunc func(context.Context, *ent.PointLogQuery) error

// EvalQuery return f(ctx, q).
func (f PointLogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PointLogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PointLogQuery", q)
}

// The PointLogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PointLogMutationRuleFunc func(context.Context, *ent.PointLogMutation) error

// EvalMutation calls f(ctx, m).
func (f PointLogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PointLogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PointLogMutation", m)
}

// The ReserveQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ReserveQueryRuleFunc func(context.Context, *ent.ReserveQuery) error

// EvalQuery return f(ctx, q).
func (f ReserveQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ReserveQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ReserveQuery", q)
}

// The ReserveMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ReserveMutationRuleFunc func(context.Context, *ent.ReserveMutation) error

// EvalMutation calls f(ctx, m).
func (f ReserveMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ReserveMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ReserveMutation", m)
}

// The RiderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RiderQueryRuleFunc func(context.Context, *ent.RiderQuery) error

// EvalQuery return f(ctx, q).
func (f RiderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RiderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RiderQuery", q)
}

// The RiderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RiderMutationRuleFunc func(context.Context, *ent.RiderMutation) error

// EvalMutation calls f(ctx, m).
func (f RiderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RiderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RiderMutation", m)
}

// The RiderFollowUpQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RiderFollowUpQueryRuleFunc func(context.Context, *ent.RiderFollowUpQuery) error

// EvalQuery return f(ctx, q).
func (f RiderFollowUpQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RiderFollowUpQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RiderFollowUpQuery", q)
}

// The RiderFollowUpMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RiderFollowUpMutationRuleFunc func(context.Context, *ent.RiderFollowUpMutation) error

// EvalMutation calls f(ctx, m).
func (f RiderFollowUpMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RiderFollowUpMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RiderFollowUpMutation", m)
}

// The RoleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type RoleQueryRuleFunc func(context.Context, *ent.RoleQuery) error

// EvalQuery return f(ctx, q).
func (f RoleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.RoleQuery", q)
}

// The RoleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type RoleMutationRuleFunc func(context.Context, *ent.RoleMutation) error

// EvalMutation calls f(ctx, m).
func (f RoleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.RoleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.RoleMutation", m)
}

// The SettingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SettingQueryRuleFunc func(context.Context, *ent.SettingQuery) error

// EvalQuery return f(ctx, q).
func (f SettingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SettingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SettingQuery", q)
}

// The SettingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SettingMutationRuleFunc func(context.Context, *ent.SettingMutation) error

// EvalMutation calls f(ctx, m).
func (f SettingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SettingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SettingMutation", m)
}

// The StockQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StockQueryRuleFunc func(context.Context, *ent.StockQuery) error

// EvalQuery return f(ctx, q).
func (f StockQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StockQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StockQuery", q)
}

// The StockMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StockMutationRuleFunc func(context.Context, *ent.StockMutation) error

// EvalMutation calls f(ctx, m).
func (f StockMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StockMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StockMutation", m)
}

// The StoreQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type StoreQueryRuleFunc func(context.Context, *ent.StoreQuery) error

// EvalQuery return f(ctx, q).
func (f StoreQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.StoreQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.StoreQuery", q)
}

// The StoreMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type StoreMutationRuleFunc func(context.Context, *ent.StoreMutation) error

// EvalMutation calls f(ctx, m).
func (f StoreMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.StoreMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.StoreMutation", m)
}

// The SubscribeQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscribeQueryRuleFunc func(context.Context, *ent.SubscribeQuery) error

// EvalQuery return f(ctx, q).
func (f SubscribeQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SubscribeQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SubscribeQuery", q)
}

// The SubscribeMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscribeMutationRuleFunc func(context.Context, *ent.SubscribeMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscribeMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SubscribeMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SubscribeMutation", m)
}

// The SubscribeAlterQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscribeAlterQueryRuleFunc func(context.Context, *ent.SubscribeAlterQuery) error

// EvalQuery return f(ctx, q).
func (f SubscribeAlterQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SubscribeAlterQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SubscribeAlterQuery", q)
}

// The SubscribeAlterMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscribeAlterMutationRuleFunc func(context.Context, *ent.SubscribeAlterMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscribeAlterMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SubscribeAlterMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SubscribeAlterMutation", m)
}

// The SubscribePauseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscribePauseQueryRuleFunc func(context.Context, *ent.SubscribePauseQuery) error

// EvalQuery return f(ctx, q).
func (f SubscribePauseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SubscribePauseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SubscribePauseQuery", q)
}

// The SubscribePauseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscribePauseMutationRuleFunc func(context.Context, *ent.SubscribePauseMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscribePauseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SubscribePauseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SubscribePauseMutation", m)
}

// The SubscribeReminderQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscribeReminderQueryRuleFunc func(context.Context, *ent.SubscribeReminderQuery) error

// EvalQuery return f(ctx, q).
func (f SubscribeReminderQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SubscribeReminderQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SubscribeReminderQuery", q)
}

// The SubscribeReminderMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscribeReminderMutationRuleFunc func(context.Context, *ent.SubscribeReminderMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscribeReminderMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SubscribeReminderMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SubscribeReminderMutation", m)
}

// The SubscribeSuspendQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscribeSuspendQueryRuleFunc func(context.Context, *ent.SubscribeSuspendQuery) error

// EvalQuery return f(ctx, q).
func (f SubscribeSuspendQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SubscribeSuspendQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SubscribeSuspendQuery", q)
}

// The SubscribeSuspendMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscribeSuspendMutationRuleFunc func(context.Context, *ent.SubscribeSuspendMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscribeSuspendMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SubscribeSuspendMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SubscribeSuspendMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.AgentQuery:
		return q.Filter(), nil
	case *ent.AllocateQuery:
		return q.Filter(), nil
	case *ent.AssistanceQuery:
		return q.Filter(), nil
	case *ent.AttendanceQuery:
		return q.Filter(), nil
	case *ent.BatteryModelQuery:
		return q.Filter(), nil
	case *ent.BranchQuery:
		return q.Filter(), nil
	case *ent.BranchContractQuery:
		return q.Filter(), nil
	case *ent.BusinessQuery:
		return q.Filter(), nil
	case *ent.CabinetQuery:
		return q.Filter(), nil
	case *ent.CabinetFaultQuery:
		return q.Filter(), nil
	case *ent.CityQuery:
		return q.Filter(), nil
	case *ent.CommissionQuery:
		return q.Filter(), nil
	case *ent.ContractQuery:
		return q.Filter(), nil
	case *ent.CouponQuery:
		return q.Filter(), nil
	case *ent.CouponAssemblyQuery:
		return q.Filter(), nil
	case *ent.CouponTemplateQuery:
		return q.Filter(), nil
	case *ent.EbikeQuery:
		return q.Filter(), nil
	case *ent.EbikeBrandQuery:
		return q.Filter(), nil
	case *ent.EmployeeQuery:
		return q.Filter(), nil
	case *ent.EnterpriseQuery:
		return q.Filter(), nil
	case *ent.EnterpriseBillQuery:
		return q.Filter(), nil
	case *ent.EnterpriseContractQuery:
		return q.Filter(), nil
	case *ent.EnterprisePrepaymentQuery:
		return q.Filter(), nil
	case *ent.EnterprisePriceQuery:
		return q.Filter(), nil
	case *ent.EnterpriseStatementQuery:
		return q.Filter(), nil
	case *ent.EnterpriseStationQuery:
		return q.Filter(), nil
	case *ent.ExceptionQuery:
		return q.Filter(), nil
	case *ent.ExchangeQuery:
		return q.Filter(), nil
	case *ent.ExportQuery:
		return q.Filter(), nil
	case *ent.InventoryQuery:
		return q.Filter(), nil
	case *ent.ManagerQuery:
		return q.Filter(), nil
	case *ent.OrderQuery:
		return q.Filter(), nil
	case *ent.OrderRefundQuery:
		return q.Filter(), nil
	case *ent.PersonQuery:
		return q.Filter(), nil
	case *ent.PlanQuery:
		return q.Filter(), nil
	case *ent.PlanIntroduceQuery:
		return q.Filter(), nil
	case *ent.PointLogQuery:
		return q.Filter(), nil
	case *ent.ReserveQuery:
		return q.Filter(), nil
	case *ent.RiderQuery:
		return q.Filter(), nil
	case *ent.RiderFollowUpQuery:
		return q.Filter(), nil
	case *ent.RoleQuery:
		return q.Filter(), nil
	case *ent.SettingQuery:
		return q.Filter(), nil
	case *ent.StockQuery:
		return q.Filter(), nil
	case *ent.StoreQuery:
		return q.Filter(), nil
	case *ent.SubscribeQuery:
		return q.Filter(), nil
	case *ent.SubscribeAlterQuery:
		return q.Filter(), nil
	case *ent.SubscribePauseQuery:
		return q.Filter(), nil
	case *ent.SubscribeReminderQuery:
		return q.Filter(), nil
	case *ent.SubscribeSuspendQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.AgentMutation:
		return m.Filter(), nil
	case *ent.AllocateMutation:
		return m.Filter(), nil
	case *ent.AssistanceMutation:
		return m.Filter(), nil
	case *ent.AttendanceMutation:
		return m.Filter(), nil
	case *ent.BatteryModelMutation:
		return m.Filter(), nil
	case *ent.BranchMutation:
		return m.Filter(), nil
	case *ent.BranchContractMutation:
		return m.Filter(), nil
	case *ent.BusinessMutation:
		return m.Filter(), nil
	case *ent.CabinetMutation:
		return m.Filter(), nil
	case *ent.CabinetFaultMutation:
		return m.Filter(), nil
	case *ent.CityMutation:
		return m.Filter(), nil
	case *ent.CommissionMutation:
		return m.Filter(), nil
	case *ent.ContractMutation:
		return m.Filter(), nil
	case *ent.CouponMutation:
		return m.Filter(), nil
	case *ent.CouponAssemblyMutation:
		return m.Filter(), nil
	case *ent.CouponTemplateMutation:
		return m.Filter(), nil
	case *ent.EbikeMutation:
		return m.Filter(), nil
	case *ent.EbikeBrandMutation:
		return m.Filter(), nil
	case *ent.EmployeeMutation:
		return m.Filter(), nil
	case *ent.EnterpriseMutation:
		return m.Filter(), nil
	case *ent.EnterpriseBillMutation:
		return m.Filter(), nil
	case *ent.EnterpriseContractMutation:
		return m.Filter(), nil
	case *ent.EnterprisePrepaymentMutation:
		return m.Filter(), nil
	case *ent.EnterprisePriceMutation:
		return m.Filter(), nil
	case *ent.EnterpriseStatementMutation:
		return m.Filter(), nil
	case *ent.EnterpriseStationMutation:
		return m.Filter(), nil
	case *ent.ExceptionMutation:
		return m.Filter(), nil
	case *ent.ExchangeMutation:
		return m.Filter(), nil
	case *ent.ExportMutation:
		return m.Filter(), nil
	case *ent.InventoryMutation:
		return m.Filter(), nil
	case *ent.ManagerMutation:
		return m.Filter(), nil
	case *ent.OrderMutation:
		return m.Filter(), nil
	case *ent.OrderRefundMutation:
		return m.Filter(), nil
	case *ent.PersonMutation:
		return m.Filter(), nil
	case *ent.PlanMutation:
		return m.Filter(), nil
	case *ent.PlanIntroduceMutation:
		return m.Filter(), nil
	case *ent.PointLogMutation:
		return m.Filter(), nil
	case *ent.ReserveMutation:
		return m.Filter(), nil
	case *ent.RiderMutation:
		return m.Filter(), nil
	case *ent.RiderFollowUpMutation:
		return m.Filter(), nil
	case *ent.RoleMutation:
		return m.Filter(), nil
	case *ent.SettingMutation:
		return m.Filter(), nil
	case *ent.StockMutation:
		return m.Filter(), nil
	case *ent.StoreMutation:
		return m.Filter(), nil
	case *ent.SubscribeMutation:
		return m.Filter(), nil
	case *ent.SubscribeAlterMutation:
		return m.Filter(), nil
	case *ent.SubscribePauseMutation:
		return m.Filter(), nil
	case *ent.SubscribeReminderMutation:
		return m.Filter(), nil
	case *ent.SubscribeSuspendMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
