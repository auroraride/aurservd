// Code generated by ent, DO NOT EDIT.

package purchasepayment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldRemark, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldRiderID, v))
}

// GoodsID applies equality check predicate on the "goods_id" field. It's identical to GoodsIDEQ.
func GoodsID(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldGoodsID, v))
}

// OutTradeNo applies equality check predicate on the "out_trade_no" field. It's identical to OutTradeNoEQ.
func OutTradeNo(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldOutTradeNo, v))
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldIndex, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldTotal, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldAmount, v))
}

// Forfeit applies equality check predicate on the "forfeit" field. It's identical to ForfeitEQ.
func Forfeit(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldForfeit, v))
}

// BillingDate applies equality check predicate on the "billing_date" field. It's identical to BillingDateEQ.
func BillingDate(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldBillingDate, v))
}

// PaymentDate applies equality check predicate on the "payment_date" field. It's identical to PaymentDateEQ.
func PaymentDate(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldPaymentDate, v))
}

// TradeNo applies equality check predicate on the "trade_no" field. It's identical to TradeNoEQ.
func TradeNo(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldTradeNo, v))
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldOrderID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldContainsFold(FieldRemark, v))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldRiderID, vs...))
}

// GoodsIDEQ applies the EQ predicate on the "goods_id" field.
func GoodsIDEQ(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldGoodsID, v))
}

// GoodsIDNEQ applies the NEQ predicate on the "goods_id" field.
func GoodsIDNEQ(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldGoodsID, v))
}

// GoodsIDIn applies the In predicate on the "goods_id" field.
func GoodsIDIn(vs ...uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldGoodsID, vs...))
}

// GoodsIDNotIn applies the NotIn predicate on the "goods_id" field.
func GoodsIDNotIn(vs ...uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldGoodsID, vs...))
}

// OutTradeNoEQ applies the EQ predicate on the "out_trade_no" field.
func OutTradeNoEQ(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldOutTradeNo, v))
}

// OutTradeNoNEQ applies the NEQ predicate on the "out_trade_no" field.
func OutTradeNoNEQ(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldOutTradeNo, v))
}

// OutTradeNoIn applies the In predicate on the "out_trade_no" field.
func OutTradeNoIn(vs ...string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldOutTradeNo, vs...))
}

// OutTradeNoNotIn applies the NotIn predicate on the "out_trade_no" field.
func OutTradeNoNotIn(vs ...string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldOutTradeNo, vs...))
}

// OutTradeNoGT applies the GT predicate on the "out_trade_no" field.
func OutTradeNoGT(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldOutTradeNo, v))
}

// OutTradeNoGTE applies the GTE predicate on the "out_trade_no" field.
func OutTradeNoGTE(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldOutTradeNo, v))
}

// OutTradeNoLT applies the LT predicate on the "out_trade_no" field.
func OutTradeNoLT(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldOutTradeNo, v))
}

// OutTradeNoLTE applies the LTE predicate on the "out_trade_no" field.
func OutTradeNoLTE(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldOutTradeNo, v))
}

// OutTradeNoContains applies the Contains predicate on the "out_trade_no" field.
func OutTradeNoContains(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldContains(FieldOutTradeNo, v))
}

// OutTradeNoHasPrefix applies the HasPrefix predicate on the "out_trade_no" field.
func OutTradeNoHasPrefix(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldHasPrefix(FieldOutTradeNo, v))
}

// OutTradeNoHasSuffix applies the HasSuffix predicate on the "out_trade_no" field.
func OutTradeNoHasSuffix(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldHasSuffix(FieldOutTradeNo, v))
}

// OutTradeNoEqualFold applies the EqualFold predicate on the "out_trade_no" field.
func OutTradeNoEqualFold(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEqualFold(FieldOutTradeNo, v))
}

// OutTradeNoContainsFold applies the ContainsFold predicate on the "out_trade_no" field.
func OutTradeNoContainsFold(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldContainsFold(FieldOutTradeNo, v))
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldIndex, v))
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldIndex, v))
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldIndex, vs...))
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldIndex, vs...))
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldIndex, v))
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldIndex, v))
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldIndex, v))
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldIndex, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldStatus, vs...))
}

// PaywayEQ applies the EQ predicate on the "payway" field.
func PaywayEQ(v Payway) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldPayway, v))
}

// PaywayNEQ applies the NEQ predicate on the "payway" field.
func PaywayNEQ(v Payway) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldPayway, v))
}

// PaywayIn applies the In predicate on the "payway" field.
func PaywayIn(vs ...Payway) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldPayway, vs...))
}

// PaywayNotIn applies the NotIn predicate on the "payway" field.
func PaywayNotIn(vs ...Payway) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldPayway, vs...))
}

// PaywayIsNil applies the IsNil predicate on the "payway" field.
func PaywayIsNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIsNull(FieldPayway))
}

// PaywayNotNil applies the NotNil predicate on the "payway" field.
func PaywayNotNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotNull(FieldPayway))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldTotal, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldAmount, v))
}

// ForfeitEQ applies the EQ predicate on the "forfeit" field.
func ForfeitEQ(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldForfeit, v))
}

// ForfeitNEQ applies the NEQ predicate on the "forfeit" field.
func ForfeitNEQ(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldForfeit, v))
}

// ForfeitIn applies the In predicate on the "forfeit" field.
func ForfeitIn(vs ...float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldForfeit, vs...))
}

// ForfeitNotIn applies the NotIn predicate on the "forfeit" field.
func ForfeitNotIn(vs ...float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldForfeit, vs...))
}

// ForfeitGT applies the GT predicate on the "forfeit" field.
func ForfeitGT(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldForfeit, v))
}

// ForfeitGTE applies the GTE predicate on the "forfeit" field.
func ForfeitGTE(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldForfeit, v))
}

// ForfeitLT applies the LT predicate on the "forfeit" field.
func ForfeitLT(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldForfeit, v))
}

// ForfeitLTE applies the LTE predicate on the "forfeit" field.
func ForfeitLTE(v float64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldForfeit, v))
}

// BillingDateEQ applies the EQ predicate on the "billing_date" field.
func BillingDateEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldBillingDate, v))
}

// BillingDateNEQ applies the NEQ predicate on the "billing_date" field.
func BillingDateNEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldBillingDate, v))
}

// BillingDateIn applies the In predicate on the "billing_date" field.
func BillingDateIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldBillingDate, vs...))
}

// BillingDateNotIn applies the NotIn predicate on the "billing_date" field.
func BillingDateNotIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldBillingDate, vs...))
}

// BillingDateGT applies the GT predicate on the "billing_date" field.
func BillingDateGT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldBillingDate, v))
}

// BillingDateGTE applies the GTE predicate on the "billing_date" field.
func BillingDateGTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldBillingDate, v))
}

// BillingDateLT applies the LT predicate on the "billing_date" field.
func BillingDateLT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldBillingDate, v))
}

// BillingDateLTE applies the LTE predicate on the "billing_date" field.
func BillingDateLTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldBillingDate, v))
}

// PaymentDateEQ applies the EQ predicate on the "payment_date" field.
func PaymentDateEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldPaymentDate, v))
}

// PaymentDateNEQ applies the NEQ predicate on the "payment_date" field.
func PaymentDateNEQ(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldPaymentDate, v))
}

// PaymentDateIn applies the In predicate on the "payment_date" field.
func PaymentDateIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldPaymentDate, vs...))
}

// PaymentDateNotIn applies the NotIn predicate on the "payment_date" field.
func PaymentDateNotIn(vs ...time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldPaymentDate, vs...))
}

// PaymentDateGT applies the GT predicate on the "payment_date" field.
func PaymentDateGT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldPaymentDate, v))
}

// PaymentDateGTE applies the GTE predicate on the "payment_date" field.
func PaymentDateGTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldPaymentDate, v))
}

// PaymentDateLT applies the LT predicate on the "payment_date" field.
func PaymentDateLT(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldPaymentDate, v))
}

// PaymentDateLTE applies the LTE predicate on the "payment_date" field.
func PaymentDateLTE(v time.Time) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldPaymentDate, v))
}

// PaymentDateIsNil applies the IsNil predicate on the "payment_date" field.
func PaymentDateIsNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIsNull(FieldPaymentDate))
}

// PaymentDateNotNil applies the NotNil predicate on the "payment_date" field.
func PaymentDateNotNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotNull(FieldPaymentDate))
}

// TradeNoEQ applies the EQ predicate on the "trade_no" field.
func TradeNoEQ(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldTradeNo, v))
}

// TradeNoNEQ applies the NEQ predicate on the "trade_no" field.
func TradeNoNEQ(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldTradeNo, v))
}

// TradeNoIn applies the In predicate on the "trade_no" field.
func TradeNoIn(vs ...string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldTradeNo, vs...))
}

// TradeNoNotIn applies the NotIn predicate on the "trade_no" field.
func TradeNoNotIn(vs ...string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldTradeNo, vs...))
}

// TradeNoGT applies the GT predicate on the "trade_no" field.
func TradeNoGT(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGT(FieldTradeNo, v))
}

// TradeNoGTE applies the GTE predicate on the "trade_no" field.
func TradeNoGTE(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldGTE(FieldTradeNo, v))
}

// TradeNoLT applies the LT predicate on the "trade_no" field.
func TradeNoLT(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLT(FieldTradeNo, v))
}

// TradeNoLTE applies the LTE predicate on the "trade_no" field.
func TradeNoLTE(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldLTE(FieldTradeNo, v))
}

// TradeNoContains applies the Contains predicate on the "trade_no" field.
func TradeNoContains(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldContains(FieldTradeNo, v))
}

// TradeNoHasPrefix applies the HasPrefix predicate on the "trade_no" field.
func TradeNoHasPrefix(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldHasPrefix(FieldTradeNo, v))
}

// TradeNoHasSuffix applies the HasSuffix predicate on the "trade_no" field.
func TradeNoHasSuffix(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldHasSuffix(FieldTradeNo, v))
}

// TradeNoIsNil applies the IsNil predicate on the "trade_no" field.
func TradeNoIsNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIsNull(FieldTradeNo))
}

// TradeNoNotNil applies the NotNil predicate on the "trade_no" field.
func TradeNoNotNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotNull(FieldTradeNo))
}

// TradeNoEqualFold applies the EqualFold predicate on the "trade_no" field.
func TradeNoEqualFold(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEqualFold(FieldTradeNo, v))
}

// TradeNoContainsFold applies the ContainsFold predicate on the "trade_no" field.
func TradeNoContainsFold(v string) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldContainsFold(FieldTradeNo, v))
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldEQ(FieldOrderID, v))
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNEQ(FieldOrderID, v))
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIn(FieldOrderID, vs...))
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uint64) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotIn(FieldOrderID, vs...))
}

// OrderIDIsNil applies the IsNil predicate on the "order_id" field.
func OrderIDIsNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldIsNull(FieldOrderID))
}

// OrderIDNotNil applies the NotNil predicate on the "order_id" field.
func OrderIDNotNil() predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.FieldNotNull(FieldOrderID))
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.PurchasePayment {
	return predicate.PurchasePayment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.PurchasePayment {
	return predicate.PurchasePayment(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGoods applies the HasEdge predicate on the "goods" edge.
func HasGoods() predicate.PurchasePayment {
	return predicate.PurchasePayment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GoodsTable, GoodsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoodsWith applies the HasEdge predicate on the "goods" edge with a given conditions (other predicates).
func HasGoodsWith(preds ...predicate.Goods) predicate.PurchasePayment {
	return predicate.PurchasePayment(func(s *sql.Selector) {
		step := newGoodsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrder applies the HasEdge predicate on the "order" edge.
func HasOrder() predicate.PurchasePayment {
	return predicate.PurchasePayment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrderWith applies the HasEdge predicate on the "order" edge with a given conditions (other predicates).
func HasOrderWith(preds ...predicate.PurchaseOrder) predicate.PurchasePayment {
	return predicate.PurchasePayment(func(s *sql.Selector) {
		step := newOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PurchasePayment) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PurchasePayment) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PurchasePayment) predicate.PurchasePayment {
	return predicate.PurchasePayment(sql.NotPredicates(p))
}
