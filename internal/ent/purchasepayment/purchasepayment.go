// Code generated by ent, DO NOT EDIT.

package purchasepayment

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the purchasepayment type in the database.
	Label = "purchase_payment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldGoodsID holds the string denoting the goods_id field in the database.
	FieldGoodsID = "goods_id"
	// FieldOutTradeNo holds the string denoting the out_trade_no field in the database.
	FieldOutTradeNo = "out_trade_no"
	// FieldIndex holds the string denoting the index field in the database.
	FieldIndex = "index"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPayway holds the string denoting the payway field in the database.
	FieldPayway = "payway"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldForfeit holds the string denoting the forfeit field in the database.
	FieldForfeit = "forfeit"
	// FieldBillingDate holds the string denoting the billing_date field in the database.
	FieldBillingDate = "billing_date"
	// FieldPaymentTime holds the string denoting the payment_time field in the database.
	FieldPaymentTime = "payment_time"
	// FieldTradeNo holds the string denoting the trade_no field in the database.
	FieldTradeNo = "trade_no"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeGoods holds the string denoting the goods edge name in mutations.
	EdgeGoods = "goods"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the purchasepayment in the database.
	Table = "purchase_payment"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "purchase_payment"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// GoodsTable is the table that holds the goods relation/edge.
	GoodsTable = "purchase_payment"
	// GoodsInverseTable is the table name for the Goods entity.
	// It exists in this package in order to avoid circular dependency with the "goods" package.
	GoodsInverseTable = "goods"
	// GoodsColumn is the table column denoting the goods relation/edge.
	GoodsColumn = "goods_id"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "purchase_payment"
	// OrderInverseTable is the table name for the PurchaseOrder entity.
	// It exists in this package in order to avoid circular dependency with the "purchaseorder" package.
	OrderInverseTable = "purchase_order"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
)

// Columns holds all SQL columns for purchasepayment fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldRiderID,
	FieldGoodsID,
	FieldOutTradeNo,
	FieldIndex,
	FieldStatus,
	FieldPayway,
	FieldTotal,
	FieldAmount,
	FieldForfeit,
	FieldBillingDate,
	FieldPaymentTime,
	FieldTradeNo,
	FieldOrderID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultForfeit holds the default value on creation for the "forfeit" field.
	DefaultForfeit float64
)

// Status defines the type for the "status" enum field.
type Status string

// StatusObligation is the default value of the Status enum.
const DefaultStatus = StatusObligation

// Status values.
const (
	StatusObligation Status = "obligation"
	StatusPaid       Status = "paid"
	StatusCanceled   Status = "canceled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusObligation, StatusPaid, StatusCanceled:
		return nil
	default:
		return fmt.Errorf("purchasepayment: invalid enum value for status field: %q", s)
	}
}

// Payway defines the type for the "payway" enum field.
type Payway string

// Payway values.
const (
	PaywayAlipay Payway = "alipay"
	PaywayWechat Payway = "wechat"
	PaywayCash   Payway = "cash"
)

func (pa Payway) String() string {
	return string(pa)
}

// PaywayValidator is a validator for the "payway" field enum values. It is called by the builders before save.
func PaywayValidator(pa Payway) error {
	switch pa {
	case PaywayAlipay, PaywayWechat, PaywayCash:
		return nil
	default:
		return fmt.Errorf("purchasepayment: invalid enum value for payway field: %q", pa)
	}
}

// OrderOption defines the ordering options for the PurchasePayment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByGoodsID orders the results by the goods_id field.
func ByGoodsID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoodsID, opts...).ToFunc()
}

// ByOutTradeNo orders the results by the out_trade_no field.
func ByOutTradeNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutTradeNo, opts...).ToFunc()
}

// ByIndex orders the results by the index field.
func ByIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIndex, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPayway orders the results by the payway field.
func ByPayway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayway, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByForfeit orders the results by the forfeit field.
func ByForfeit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForfeit, opts...).ToFunc()
}

// ByBillingDate orders the results by the billing_date field.
func ByBillingDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingDate, opts...).ToFunc()
}

// ByPaymentTime orders the results by the payment_time field.
func ByPaymentTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentTime, opts...).ToFunc()
}

// ByTradeNo orders the results by the trade_no field.
func ByTradeNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTradeNo, opts...).ToFunc()
}

// ByOrderID orders the results by the order_id field.
func ByOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderID, opts...).ToFunc()
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByGoodsField orders the results by goods field.
func ByGoodsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGoodsStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrderField orders the results by order field.
func ByOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrderStep(), sql.OrderByField(field, opts...))
	}
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newGoodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GoodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GoodsTable, GoodsColumn),
	)
}
func newOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrderTable, OrderColumn),
	)
}
