// Code generated by ent, DO NOT EDIT.

package promotiongrowth

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldDeletedAt, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldMemberID, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldTaskID, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldRiderID, v))
}

// GrowthValue applies equality check predicate on the "growth_value" field. It's identical to GrowthValueEQ.
func GrowthValue(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldGrowthValue, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotNull(FieldDeletedAt))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotNull(FieldMemberID))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDIsNil applies the IsNil predicate on the "task_id" field.
func TaskIDIsNil() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIsNull(FieldTaskID))
}

// TaskIDNotNil applies the NotNil predicate on the "task_id" field.
func TaskIDNotNil() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotNull(FieldTaskID))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotNull(FieldRiderID))
}

// GrowthValueEQ applies the EQ predicate on the "growth_value" field.
func GrowthValueEQ(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldEQ(FieldGrowthValue, v))
}

// GrowthValueNEQ applies the NEQ predicate on the "growth_value" field.
func GrowthValueNEQ(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNEQ(FieldGrowthValue, v))
}

// GrowthValueIn applies the In predicate on the "growth_value" field.
func GrowthValueIn(vs ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldIn(FieldGrowthValue, vs...))
}

// GrowthValueNotIn applies the NotIn predicate on the "growth_value" field.
func GrowthValueNotIn(vs ...uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldNotIn(FieldGrowthValue, vs...))
}

// GrowthValueGT applies the GT predicate on the "growth_value" field.
func GrowthValueGT(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGT(FieldGrowthValue, v))
}

// GrowthValueGTE applies the GTE predicate on the "growth_value" field.
func GrowthValueGTE(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldGTE(FieldGrowthValue, v))
}

// GrowthValueLT applies the LT predicate on the "growth_value" field.
func GrowthValueLT(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLT(FieldGrowthValue, v))
}

// GrowthValueLTE applies the LTE predicate on the "growth_value" field.
func GrowthValueLTE(v uint64) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(sql.FieldLTE(FieldGrowthValue, v))
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.PromotionMember) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		step := newMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.PromotionLevelTask) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PromotionGrowth) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PromotionGrowth) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PromotionGrowth) predicate.PromotionGrowth {
	return predicate.PromotionGrowth(func(s *sql.Selector) {
		p(s.Not())
	})
}
