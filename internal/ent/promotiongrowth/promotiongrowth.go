// Code generated by ent, DO NOT EDIT.

package promotiongrowth

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotiongrowth type in the database.
	Label = "promotion_growth"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldGrowthValue holds the string denoting the growth_value field in the database.
	FieldGrowthValue = "growth_value"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// Table holds the table name of the promotiongrowth in the database.
	Table = "promotion_growth"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "promotion_growth"
	// MemberInverseTable is the table name for the PromotionMember entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmember" package.
	MemberInverseTable = "promotion_member"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "member_id"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "promotion_growth"
	// TaskInverseTable is the table name for the PromotionLevelTask entity.
	// It exists in this package in order to avoid circular dependency with the "promotionleveltask" package.
	TaskInverseTable = "promotion_level_task"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "promotion_growth"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
)

// Columns holds all SQL columns for promotiongrowth fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldMemberID,
	FieldTaskID,
	FieldRiderID,
	FieldGrowthValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PromotionGrowth queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByGrowthValue orders the results by the growth_value field.
func ByGrowthValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrowthValue, opts...).ToFunc()
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
	)
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
