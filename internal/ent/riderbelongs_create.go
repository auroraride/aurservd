// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/riderbelongs"
)

// RiderBelongsCreate is the builder for creating a RiderBelongs entity.
type RiderBelongsCreate struct {
	config
	mutation *RiderBelongsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rbc *RiderBelongsCreate) SetCreatedAt(t time.Time) *RiderBelongsCreate {
	rbc.mutation.SetCreatedAt(t)
	return rbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rbc *RiderBelongsCreate) SetNillableCreatedAt(t *time.Time) *RiderBelongsCreate {
	if t != nil {
		rbc.SetCreatedAt(*t)
	}
	return rbc
}

// SetUpdatedAt sets the "updated_at" field.
func (rbc *RiderBelongsCreate) SetUpdatedAt(t time.Time) *RiderBelongsCreate {
	rbc.mutation.SetUpdatedAt(t)
	return rbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rbc *RiderBelongsCreate) SetNillableUpdatedAt(t *time.Time) *RiderBelongsCreate {
	if t != nil {
		rbc.SetUpdatedAt(*t)
	}
	return rbc
}

// SetDeletedAt sets the "deleted_at" field.
func (rbc *RiderBelongsCreate) SetDeletedAt(t time.Time) *RiderBelongsCreate {
	rbc.mutation.SetDeletedAt(t)
	return rbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rbc *RiderBelongsCreate) SetNillableDeletedAt(t *time.Time) *RiderBelongsCreate {
	if t != nil {
		rbc.SetDeletedAt(*t)
	}
	return rbc
}

// SetCreator sets the "creator" field.
func (rbc *RiderBelongsCreate) SetCreator(m *model.Modifier) *RiderBelongsCreate {
	rbc.mutation.SetCreator(m)
	return rbc
}

// SetLastModifier sets the "last_modifier" field.
func (rbc *RiderBelongsCreate) SetLastModifier(m *model.Modifier) *RiderBelongsCreate {
	rbc.mutation.SetLastModifier(m)
	return rbc
}

// SetRemark sets the "remark" field.
func (rbc *RiderBelongsCreate) SetRemark(s string) *RiderBelongsCreate {
	rbc.mutation.SetRemark(s)
	return rbc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rbc *RiderBelongsCreate) SetNillableRemark(s *string) *RiderBelongsCreate {
	if s != nil {
		rbc.SetRemark(*s)
	}
	return rbc
}

// Mutation returns the RiderBelongsMutation object of the builder.
func (rbc *RiderBelongsCreate) Mutation() *RiderBelongsMutation {
	return rbc.mutation
}

// Save creates the RiderBelongs in the database.
func (rbc *RiderBelongsCreate) Save(ctx context.Context) (*RiderBelongs, error) {
	if err := rbc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*RiderBelongs, RiderBelongsMutation](ctx, rbc.sqlSave, rbc.mutation, rbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rbc *RiderBelongsCreate) SaveX(ctx context.Context) *RiderBelongs {
	v, err := rbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rbc *RiderBelongsCreate) Exec(ctx context.Context) error {
	_, err := rbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbc *RiderBelongsCreate) ExecX(ctx context.Context) {
	if err := rbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rbc *RiderBelongsCreate) defaults() error {
	if _, ok := rbc.mutation.CreatedAt(); !ok {
		if riderbelongs.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized riderbelongs.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := riderbelongs.DefaultCreatedAt()
		rbc.mutation.SetCreatedAt(v)
	}
	if _, ok := rbc.mutation.UpdatedAt(); !ok {
		if riderbelongs.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized riderbelongs.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := riderbelongs.DefaultUpdatedAt()
		rbc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rbc *RiderBelongsCreate) check() error {
	if _, ok := rbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RiderBelongs.created_at"`)}
	}
	if _, ok := rbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RiderBelongs.updated_at"`)}
	}
	return nil
}

func (rbc *RiderBelongsCreate) sqlSave(ctx context.Context) (*RiderBelongs, error) {
	if err := rbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	rbc.mutation.id = &_node.ID
	rbc.mutation.done = true
	return _node, nil
}

func (rbc *RiderBelongsCreate) createSpec() (*RiderBelongs, *sqlgraph.CreateSpec) {
	var (
		_node = &RiderBelongs{config: rbc.config}
		_spec = sqlgraph.NewCreateSpec(riderbelongs.Table, sqlgraph.NewFieldSpec(riderbelongs.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = rbc.conflict
	if value, ok := rbc.mutation.CreatedAt(); ok {
		_spec.SetField(riderbelongs.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rbc.mutation.UpdatedAt(); ok {
		_spec.SetField(riderbelongs.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rbc.mutation.DeletedAt(); ok {
		_spec.SetField(riderbelongs.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rbc.mutation.Creator(); ok {
		_spec.SetField(riderbelongs.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := rbc.mutation.LastModifier(); ok {
		_spec.SetField(riderbelongs.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := rbc.mutation.Remark(); ok {
		_spec.SetField(riderbelongs.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RiderBelongs.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RiderBelongsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rbc *RiderBelongsCreate) OnConflict(opts ...sql.ConflictOption) *RiderBelongsUpsertOne {
	rbc.conflict = opts
	return &RiderBelongsUpsertOne{
		create: rbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RiderBelongs.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rbc *RiderBelongsCreate) OnConflictColumns(columns ...string) *RiderBelongsUpsertOne {
	rbc.conflict = append(rbc.conflict, sql.ConflictColumns(columns...))
	return &RiderBelongsUpsertOne{
		create: rbc,
	}
}

type (
	// RiderBelongsUpsertOne is the builder for "upsert"-ing
	//  one RiderBelongs node.
	RiderBelongsUpsertOne struct {
		create *RiderBelongsCreate
	}

	// RiderBelongsUpsert is the "OnConflict" setter.
	RiderBelongsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderBelongsUpsert) SetUpdatedAt(v time.Time) *RiderBelongsUpsert {
	u.Set(riderbelongs.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderBelongsUpsert) UpdateUpdatedAt() *RiderBelongsUpsert {
	u.SetExcluded(riderbelongs.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderBelongsUpsert) SetDeletedAt(v time.Time) *RiderBelongsUpsert {
	u.Set(riderbelongs.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderBelongsUpsert) UpdateDeletedAt() *RiderBelongsUpsert {
	u.SetExcluded(riderbelongs.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderBelongsUpsert) ClearDeletedAt() *RiderBelongsUpsert {
	u.SetNull(riderbelongs.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderBelongsUpsert) SetLastModifier(v *model.Modifier) *RiderBelongsUpsert {
	u.Set(riderbelongs.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderBelongsUpsert) UpdateLastModifier() *RiderBelongsUpsert {
	u.SetExcluded(riderbelongs.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderBelongsUpsert) ClearLastModifier() *RiderBelongsUpsert {
	u.SetNull(riderbelongs.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *RiderBelongsUpsert) SetRemark(v string) *RiderBelongsUpsert {
	u.Set(riderbelongs.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderBelongsUpsert) UpdateRemark() *RiderBelongsUpsert {
	u.SetExcluded(riderbelongs.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderBelongsUpsert) ClearRemark() *RiderBelongsUpsert {
	u.SetNull(riderbelongs.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RiderBelongs.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RiderBelongsUpsertOne) UpdateNewValues() *RiderBelongsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(riderbelongs.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(riderbelongs.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RiderBelongs.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RiderBelongsUpsertOne) Ignore() *RiderBelongsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RiderBelongsUpsertOne) DoNothing() *RiderBelongsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RiderBelongsCreate.OnConflict
// documentation for more info.
func (u *RiderBelongsUpsertOne) Update(set func(*RiderBelongsUpsert)) *RiderBelongsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RiderBelongsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderBelongsUpsertOne) SetUpdatedAt(v time.Time) *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderBelongsUpsertOne) UpdateUpdatedAt() *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderBelongsUpsertOne) SetDeletedAt(v time.Time) *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderBelongsUpsertOne) UpdateDeletedAt() *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderBelongsUpsertOne) ClearDeletedAt() *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderBelongsUpsertOne) SetLastModifier(v *model.Modifier) *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderBelongsUpsertOne) UpdateLastModifier() *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderBelongsUpsertOne) ClearLastModifier() *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *RiderBelongsUpsertOne) SetRemark(v string) *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderBelongsUpsertOne) UpdateRemark() *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderBelongsUpsertOne) ClearRemark() *RiderBelongsUpsertOne {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *RiderBelongsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RiderBelongsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RiderBelongsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RiderBelongsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RiderBelongsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RiderBelongsCreateBulk is the builder for creating many RiderBelongs entities in bulk.
type RiderBelongsCreateBulk struct {
	config
	builders []*RiderBelongsCreate
	conflict []sql.ConflictOption
}

// Save creates the RiderBelongs entities in the database.
func (rbcb *RiderBelongsCreateBulk) Save(ctx context.Context) ([]*RiderBelongs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rbcb.builders))
	nodes := make([]*RiderBelongs, len(rbcb.builders))
	mutators := make([]Mutator, len(rbcb.builders))
	for i := range rbcb.builders {
		func(i int, root context.Context) {
			builder := rbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiderBelongsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rbcb *RiderBelongsCreateBulk) SaveX(ctx context.Context) []*RiderBelongs {
	v, err := rbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rbcb *RiderBelongsCreateBulk) Exec(ctx context.Context) error {
	_, err := rbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbcb *RiderBelongsCreateBulk) ExecX(ctx context.Context) {
	if err := rbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RiderBelongs.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RiderBelongsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rbcb *RiderBelongsCreateBulk) OnConflict(opts ...sql.ConflictOption) *RiderBelongsUpsertBulk {
	rbcb.conflict = opts
	return &RiderBelongsUpsertBulk{
		create: rbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RiderBelongs.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rbcb *RiderBelongsCreateBulk) OnConflictColumns(columns ...string) *RiderBelongsUpsertBulk {
	rbcb.conflict = append(rbcb.conflict, sql.ConflictColumns(columns...))
	return &RiderBelongsUpsertBulk{
		create: rbcb,
	}
}

// RiderBelongsUpsertBulk is the builder for "upsert"-ing
// a bulk of RiderBelongs nodes.
type RiderBelongsUpsertBulk struct {
	create *RiderBelongsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RiderBelongs.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RiderBelongsUpsertBulk) UpdateNewValues() *RiderBelongsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(riderbelongs.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(riderbelongs.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RiderBelongs.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RiderBelongsUpsertBulk) Ignore() *RiderBelongsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RiderBelongsUpsertBulk) DoNothing() *RiderBelongsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RiderBelongsCreateBulk.OnConflict
// documentation for more info.
func (u *RiderBelongsUpsertBulk) Update(set func(*RiderBelongsUpsert)) *RiderBelongsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RiderBelongsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderBelongsUpsertBulk) SetUpdatedAt(v time.Time) *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderBelongsUpsertBulk) UpdateUpdatedAt() *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderBelongsUpsertBulk) SetDeletedAt(v time.Time) *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderBelongsUpsertBulk) UpdateDeletedAt() *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderBelongsUpsertBulk) ClearDeletedAt() *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderBelongsUpsertBulk) SetLastModifier(v *model.Modifier) *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderBelongsUpsertBulk) UpdateLastModifier() *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderBelongsUpsertBulk) ClearLastModifier() *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *RiderBelongsUpsertBulk) SetRemark(v string) *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderBelongsUpsertBulk) UpdateRemark() *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderBelongsUpsertBulk) ClearRemark() *RiderBelongsUpsertBulk {
	return u.Update(func(s *RiderBelongsUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *RiderBelongsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RiderBelongsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RiderBelongsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RiderBelongsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
