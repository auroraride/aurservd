// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterpriseStationUpdate is the builder for updating EnterpriseStation entities.
type EnterpriseStationUpdate struct {
	config
	hooks    []Hook
	mutation *EnterpriseStationMutation
}

// Where appends a list predicates to the EnterpriseStationUpdate builder.
func (esu *EnterpriseStationUpdate) Where(ps ...predicate.EnterpriseStation) *EnterpriseStationUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetUpdatedAt sets the "updated_at" field.
func (esu *EnterpriseStationUpdate) SetUpdatedAt(t time.Time) *EnterpriseStationUpdate {
	esu.mutation.SetUpdatedAt(t)
	return esu
}

// SetDeletedAt sets the "deleted_at" field.
func (esu *EnterpriseStationUpdate) SetDeletedAt(t time.Time) *EnterpriseStationUpdate {
	esu.mutation.SetDeletedAt(t)
	return esu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esu *EnterpriseStationUpdate) SetNillableDeletedAt(t *time.Time) *EnterpriseStationUpdate {
	if t != nil {
		esu.SetDeletedAt(*t)
	}
	return esu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (esu *EnterpriseStationUpdate) ClearDeletedAt() *EnterpriseStationUpdate {
	esu.mutation.ClearDeletedAt()
	return esu
}

// SetLastModifier sets the "last_modifier" field.
func (esu *EnterpriseStationUpdate) SetLastModifier(m *model.Modifier) *EnterpriseStationUpdate {
	esu.mutation.SetLastModifier(m)
	return esu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (esu *EnterpriseStationUpdate) ClearLastModifier() *EnterpriseStationUpdate {
	esu.mutation.ClearLastModifier()
	return esu
}

// SetRemark sets the "remark" field.
func (esu *EnterpriseStationUpdate) SetRemark(s string) *EnterpriseStationUpdate {
	esu.mutation.SetRemark(s)
	return esu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (esu *EnterpriseStationUpdate) SetNillableRemark(s *string) *EnterpriseStationUpdate {
	if s != nil {
		esu.SetRemark(*s)
	}
	return esu
}

// ClearRemark clears the value of the "remark" field.
func (esu *EnterpriseStationUpdate) ClearRemark() *EnterpriseStationUpdate {
	esu.mutation.ClearRemark()
	return esu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (esu *EnterpriseStationUpdate) SetEnterpriseID(u uint64) *EnterpriseStationUpdate {
	esu.mutation.SetEnterpriseID(u)
	return esu
}

// SetName sets the "name" field.
func (esu *EnterpriseStationUpdate) SetName(s string) *EnterpriseStationUpdate {
	esu.mutation.SetName(s)
	return esu
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (esu *EnterpriseStationUpdate) SetEnterprise(e *Enterprise) *EnterpriseStationUpdate {
	return esu.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterpriseStationMutation object of the builder.
func (esu *EnterpriseStationUpdate) Mutation() *EnterpriseStationMutation {
	return esu.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (esu *EnterpriseStationUpdate) ClearEnterprise() *EnterpriseStationUpdate {
	esu.mutation.ClearEnterprise()
	return esu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *EnterpriseStationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := esu.defaults(); err != nil {
		return 0, err
	}
	if len(esu.hooks) == 0 {
		if err = esu.check(); err != nil {
			return 0, err
		}
		affected, err = esu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseStationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esu.check(); err != nil {
				return 0, err
			}
			esu.mutation = mutation
			affected, err = esu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(esu.hooks) - 1; i >= 0; i-- {
			if esu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (esu *EnterpriseStationUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *EnterpriseStationUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *EnterpriseStationUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esu *EnterpriseStationUpdate) defaults() error {
	if _, ok := esu.mutation.UpdatedAt(); !ok {
		if enterprisestation.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisestation.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisestation.UpdateDefaultUpdatedAt()
		esu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (esu *EnterpriseStationUpdate) check() error {
	if _, ok := esu.mutation.EnterpriseID(); esu.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseStation.enterprise"`)
	}
	return nil
}

func (esu *EnterpriseStationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisestation.Table,
			Columns: enterprisestation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestation.FieldID,
			},
		},
	}
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestation.FieldUpdatedAt,
		})
	}
	if value, ok := esu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestation.FieldDeletedAt,
		})
	}
	if esu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestation.FieldDeletedAt,
		})
	}
	if esu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisestation.FieldCreator,
		})
	}
	if value, ok := esu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisestation.FieldLastModifier,
		})
	}
	if esu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisestation.FieldLastModifier,
		})
	}
	if value, ok := esu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisestation.FieldRemark,
		})
	}
	if esu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprisestation.FieldRemark,
		})
	}
	if value, ok := esu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisestation.FieldName,
		})
	}
	if esu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestation.EnterpriseTable,
			Columns: []string{enterprisestation.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestation.EnterpriseTable,
			Columns: []string{enterprisestation.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisestation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EnterpriseStationUpdateOne is the builder for updating a single EnterpriseStation entity.
type EnterpriseStationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnterpriseStationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (esuo *EnterpriseStationUpdateOne) SetUpdatedAt(t time.Time) *EnterpriseStationUpdateOne {
	esuo.mutation.SetUpdatedAt(t)
	return esuo
}

// SetDeletedAt sets the "deleted_at" field.
func (esuo *EnterpriseStationUpdateOne) SetDeletedAt(t time.Time) *EnterpriseStationUpdateOne {
	esuo.mutation.SetDeletedAt(t)
	return esuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esuo *EnterpriseStationUpdateOne) SetNillableDeletedAt(t *time.Time) *EnterpriseStationUpdateOne {
	if t != nil {
		esuo.SetDeletedAt(*t)
	}
	return esuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (esuo *EnterpriseStationUpdateOne) ClearDeletedAt() *EnterpriseStationUpdateOne {
	esuo.mutation.ClearDeletedAt()
	return esuo
}

// SetLastModifier sets the "last_modifier" field.
func (esuo *EnterpriseStationUpdateOne) SetLastModifier(m *model.Modifier) *EnterpriseStationUpdateOne {
	esuo.mutation.SetLastModifier(m)
	return esuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (esuo *EnterpriseStationUpdateOne) ClearLastModifier() *EnterpriseStationUpdateOne {
	esuo.mutation.ClearLastModifier()
	return esuo
}

// SetRemark sets the "remark" field.
func (esuo *EnterpriseStationUpdateOne) SetRemark(s string) *EnterpriseStationUpdateOne {
	esuo.mutation.SetRemark(s)
	return esuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (esuo *EnterpriseStationUpdateOne) SetNillableRemark(s *string) *EnterpriseStationUpdateOne {
	if s != nil {
		esuo.SetRemark(*s)
	}
	return esuo
}

// ClearRemark clears the value of the "remark" field.
func (esuo *EnterpriseStationUpdateOne) ClearRemark() *EnterpriseStationUpdateOne {
	esuo.mutation.ClearRemark()
	return esuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (esuo *EnterpriseStationUpdateOne) SetEnterpriseID(u uint64) *EnterpriseStationUpdateOne {
	esuo.mutation.SetEnterpriseID(u)
	return esuo
}

// SetName sets the "name" field.
func (esuo *EnterpriseStationUpdateOne) SetName(s string) *EnterpriseStationUpdateOne {
	esuo.mutation.SetName(s)
	return esuo
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (esuo *EnterpriseStationUpdateOne) SetEnterprise(e *Enterprise) *EnterpriseStationUpdateOne {
	return esuo.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterpriseStationMutation object of the builder.
func (esuo *EnterpriseStationUpdateOne) Mutation() *EnterpriseStationMutation {
	return esuo.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (esuo *EnterpriseStationUpdateOne) ClearEnterprise() *EnterpriseStationUpdateOne {
	esuo.mutation.ClearEnterprise()
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *EnterpriseStationUpdateOne) Select(field string, fields ...string) *EnterpriseStationUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated EnterpriseStation entity.
func (esuo *EnterpriseStationUpdateOne) Save(ctx context.Context) (*EnterpriseStation, error) {
	var (
		err  error
		node *EnterpriseStation
	)
	if err := esuo.defaults(); err != nil {
		return nil, err
	}
	if len(esuo.hooks) == 0 {
		if err = esuo.check(); err != nil {
			return nil, err
		}
		node, err = esuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseStationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esuo.check(); err != nil {
				return nil, err
			}
			esuo.mutation = mutation
			node, err = esuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(esuo.hooks) - 1; i >= 0; i-- {
			if esuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnterpriseStation)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseStationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *EnterpriseStationUpdateOne) SaveX(ctx context.Context) *EnterpriseStation {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *EnterpriseStationUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *EnterpriseStationUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esuo *EnterpriseStationUpdateOne) defaults() error {
	if _, ok := esuo.mutation.UpdatedAt(); !ok {
		if enterprisestation.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisestation.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisestation.UpdateDefaultUpdatedAt()
		esuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (esuo *EnterpriseStationUpdateOne) check() error {
	if _, ok := esuo.mutation.EnterpriseID(); esuo.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseStation.enterprise"`)
	}
	return nil
}

func (esuo *EnterpriseStationUpdateOne) sqlSave(ctx context.Context) (_node *EnterpriseStation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisestation.Table,
			Columns: enterprisestation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestation.FieldID,
			},
		},
	}
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnterpriseStation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisestation.FieldID)
		for _, f := range fields {
			if !enterprisestation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterprisestation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestation.FieldUpdatedAt,
		})
	}
	if value, ok := esuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestation.FieldDeletedAt,
		})
	}
	if esuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestation.FieldDeletedAt,
		})
	}
	if esuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisestation.FieldCreator,
		})
	}
	if value, ok := esuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisestation.FieldLastModifier,
		})
	}
	if esuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisestation.FieldLastModifier,
		})
	}
	if value, ok := esuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisestation.FieldRemark,
		})
	}
	if esuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprisestation.FieldRemark,
		})
	}
	if value, ok := esuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisestation.FieldName,
		})
	}
	if esuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestation.EnterpriseTable,
			Columns: []string{enterprisestation.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestation.EnterpriseTable,
			Columns: []string{enterprisestation.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EnterpriseStation{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisestation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
