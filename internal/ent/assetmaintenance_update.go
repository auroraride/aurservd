// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenance"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenancedetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetMaintenanceUpdate is the builder for updating AssetMaintenance entities.
type AssetMaintenanceUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetMaintenanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetMaintenanceUpdate builder.
func (amu *AssetMaintenanceUpdate) Where(ps ...predicate.AssetMaintenance) *AssetMaintenanceUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetUpdatedAt sets the "updated_at" field.
func (amu *AssetMaintenanceUpdate) SetUpdatedAt(t time.Time) *AssetMaintenanceUpdate {
	amu.mutation.SetUpdatedAt(t)
	return amu
}

// SetDeletedAt sets the "deleted_at" field.
func (amu *AssetMaintenanceUpdate) SetDeletedAt(t time.Time) *AssetMaintenanceUpdate {
	amu.mutation.SetDeletedAt(t)
	return amu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amu *AssetMaintenanceUpdate) SetNillableDeletedAt(t *time.Time) *AssetMaintenanceUpdate {
	if t != nil {
		amu.SetDeletedAt(*t)
	}
	return amu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (amu *AssetMaintenanceUpdate) ClearDeletedAt() *AssetMaintenanceUpdate {
	amu.mutation.ClearDeletedAt()
	return amu
}

// SetLastModifier sets the "last_modifier" field.
func (amu *AssetMaintenanceUpdate) SetLastModifier(m *model.Modifier) *AssetMaintenanceUpdate {
	amu.mutation.SetLastModifier(m)
	return amu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (amu *AssetMaintenanceUpdate) ClearLastModifier() *AssetMaintenanceUpdate {
	amu.mutation.ClearLastModifier()
	return amu
}

// SetRemark sets the "remark" field.
func (amu *AssetMaintenanceUpdate) SetRemark(s string) *AssetMaintenanceUpdate {
	amu.mutation.SetRemark(s)
	return amu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amu *AssetMaintenanceUpdate) SetNillableRemark(s *string) *AssetMaintenanceUpdate {
	if s != nil {
		amu.SetRemark(*s)
	}
	return amu
}

// ClearRemark clears the value of the "remark" field.
func (amu *AssetMaintenanceUpdate) ClearRemark() *AssetMaintenanceUpdate {
	amu.mutation.ClearRemark()
	return amu
}

// SetCabinetID sets the "cabinet_id" field.
func (amu *AssetMaintenanceUpdate) SetCabinetID(u uint64) *AssetMaintenanceUpdate {
	amu.mutation.SetCabinetID(u)
	return amu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (amu *AssetMaintenanceUpdate) SetNillableCabinetID(u *uint64) *AssetMaintenanceUpdate {
	if u != nil {
		amu.SetCabinetID(*u)
	}
	return amu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (amu *AssetMaintenanceUpdate) ClearCabinetID() *AssetMaintenanceUpdate {
	amu.mutation.ClearCabinetID()
	return amu
}

// SetMaintainerID sets the "maintainer_id" field.
func (amu *AssetMaintenanceUpdate) SetMaintainerID(u uint64) *AssetMaintenanceUpdate {
	amu.mutation.SetMaintainerID(u)
	return amu
}

// SetNillableMaintainerID sets the "maintainer_id" field if the given value is not nil.
func (amu *AssetMaintenanceUpdate) SetNillableMaintainerID(u *uint64) *AssetMaintenanceUpdate {
	if u != nil {
		amu.SetMaintainerID(*u)
	}
	return amu
}

// ClearMaintainerID clears the value of the "maintainer_id" field.
func (amu *AssetMaintenanceUpdate) ClearMaintainerID() *AssetMaintenanceUpdate {
	amu.mutation.ClearMaintainerID()
	return amu
}

// SetReason sets the "reason" field.
func (amu *AssetMaintenanceUpdate) SetReason(s string) *AssetMaintenanceUpdate {
	amu.mutation.SetReason(s)
	return amu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (amu *AssetMaintenanceUpdate) SetNillableReason(s *string) *AssetMaintenanceUpdate {
	if s != nil {
		amu.SetReason(*s)
	}
	return amu
}

// ClearReason clears the value of the "reason" field.
func (amu *AssetMaintenanceUpdate) ClearReason() *AssetMaintenanceUpdate {
	amu.mutation.ClearReason()
	return amu
}

// SetContent sets the "content" field.
func (amu *AssetMaintenanceUpdate) SetContent(s string) *AssetMaintenanceUpdate {
	amu.mutation.SetContent(s)
	return amu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (amu *AssetMaintenanceUpdate) SetNillableContent(s *string) *AssetMaintenanceUpdate {
	if s != nil {
		amu.SetContent(*s)
	}
	return amu
}

// ClearContent clears the value of the "content" field.
func (amu *AssetMaintenanceUpdate) ClearContent() *AssetMaintenanceUpdate {
	amu.mutation.ClearContent()
	return amu
}

// SetStatus sets the "status" field.
func (amu *AssetMaintenanceUpdate) SetStatus(u uint8) *AssetMaintenanceUpdate {
	amu.mutation.ResetStatus()
	amu.mutation.SetStatus(u)
	return amu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amu *AssetMaintenanceUpdate) SetNillableStatus(u *uint8) *AssetMaintenanceUpdate {
	if u != nil {
		amu.SetStatus(*u)
	}
	return amu
}

// AddStatus adds u to the "status" field.
func (amu *AssetMaintenanceUpdate) AddStatus(u int8) *AssetMaintenanceUpdate {
	amu.mutation.AddStatus(u)
	return amu
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (amu *AssetMaintenanceUpdate) SetCabinet(c *Cabinet) *AssetMaintenanceUpdate {
	return amu.SetCabinetID(c.ID)
}

// SetMaintainer sets the "maintainer" edge to the Maintainer entity.
func (amu *AssetMaintenanceUpdate) SetMaintainer(m *Maintainer) *AssetMaintenanceUpdate {
	return amu.SetMaintainerID(m.ID)
}

// AddMaintenanceDetailIDs adds the "maintenance_details" edge to the AssetMaintenanceDetails entity by IDs.
func (amu *AssetMaintenanceUpdate) AddMaintenanceDetailIDs(ids ...uint64) *AssetMaintenanceUpdate {
	amu.mutation.AddMaintenanceDetailIDs(ids...)
	return amu
}

// AddMaintenanceDetails adds the "maintenance_details" edges to the AssetMaintenanceDetails entity.
func (amu *AssetMaintenanceUpdate) AddMaintenanceDetails(a ...*AssetMaintenanceDetails) *AssetMaintenanceUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.AddMaintenanceDetailIDs(ids...)
}

// Mutation returns the AssetMaintenanceMutation object of the builder.
func (amu *AssetMaintenanceUpdate) Mutation() *AssetMaintenanceMutation {
	return amu.mutation
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (amu *AssetMaintenanceUpdate) ClearCabinet() *AssetMaintenanceUpdate {
	amu.mutation.ClearCabinet()
	return amu
}

// ClearMaintainer clears the "maintainer" edge to the Maintainer entity.
func (amu *AssetMaintenanceUpdate) ClearMaintainer() *AssetMaintenanceUpdate {
	amu.mutation.ClearMaintainer()
	return amu
}

// ClearMaintenanceDetails clears all "maintenance_details" edges to the AssetMaintenanceDetails entity.
func (amu *AssetMaintenanceUpdate) ClearMaintenanceDetails() *AssetMaintenanceUpdate {
	amu.mutation.ClearMaintenanceDetails()
	return amu
}

// RemoveMaintenanceDetailIDs removes the "maintenance_details" edge to AssetMaintenanceDetails entities by IDs.
func (amu *AssetMaintenanceUpdate) RemoveMaintenanceDetailIDs(ids ...uint64) *AssetMaintenanceUpdate {
	amu.mutation.RemoveMaintenanceDetailIDs(ids...)
	return amu
}

// RemoveMaintenanceDetails removes "maintenance_details" edges to AssetMaintenanceDetails entities.
func (amu *AssetMaintenanceUpdate) RemoveMaintenanceDetails(a ...*AssetMaintenanceDetails) *AssetMaintenanceUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amu.RemoveMaintenanceDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AssetMaintenanceUpdate) Save(ctx context.Context) (int, error) {
	if err := amu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AssetMaintenanceUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AssetMaintenanceUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AssetMaintenanceUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amu *AssetMaintenanceUpdate) defaults() error {
	if _, ok := amu.mutation.UpdatedAt(); !ok {
		if assetmaintenance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetmaintenance.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetmaintenance.UpdateDefaultUpdatedAt()
		amu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (amu *AssetMaintenanceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetMaintenanceUpdate {
	amu.modifiers = append(amu.modifiers, modifiers...)
	return amu
}

func (amu *AssetMaintenanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetmaintenance.Table, assetmaintenance.Columns, sqlgraph.NewFieldSpec(assetmaintenance.FieldID, field.TypeUint64))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetmaintenance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := amu.mutation.DeletedAt(); ok {
		_spec.SetField(assetmaintenance.FieldDeletedAt, field.TypeTime, value)
	}
	if amu.mutation.DeletedAtCleared() {
		_spec.ClearField(assetmaintenance.FieldDeletedAt, field.TypeTime)
	}
	if amu.mutation.CreatorCleared() {
		_spec.ClearField(assetmaintenance.FieldCreator, field.TypeJSON)
	}
	if value, ok := amu.mutation.LastModifier(); ok {
		_spec.SetField(assetmaintenance.FieldLastModifier, field.TypeJSON, value)
	}
	if amu.mutation.LastModifierCleared() {
		_spec.ClearField(assetmaintenance.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := amu.mutation.Remark(); ok {
		_spec.SetField(assetmaintenance.FieldRemark, field.TypeString, value)
	}
	if amu.mutation.RemarkCleared() {
		_spec.ClearField(assetmaintenance.FieldRemark, field.TypeString)
	}
	if value, ok := amu.mutation.Reason(); ok {
		_spec.SetField(assetmaintenance.FieldReason, field.TypeString, value)
	}
	if amu.mutation.ReasonCleared() {
		_spec.ClearField(assetmaintenance.FieldReason, field.TypeString)
	}
	if value, ok := amu.mutation.Content(); ok {
		_spec.SetField(assetmaintenance.FieldContent, field.TypeString, value)
	}
	if amu.mutation.ContentCleared() {
		_spec.ClearField(assetmaintenance.FieldContent, field.TypeString)
	}
	if value, ok := amu.mutation.Status(); ok {
		_spec.SetField(assetmaintenance.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := amu.mutation.AddedStatus(); ok {
		_spec.AddField(assetmaintenance.FieldStatus, field.TypeUint8, value)
	}
	if amu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetmaintenance.CabinetTable,
			Columns: []string{assetmaintenance.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetmaintenance.CabinetTable,
			Columns: []string{assetmaintenance.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetmaintenance.MaintainerTable,
			Columns: []string{assetmaintenance.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetmaintenance.MaintainerTable,
			Columns: []string{assetmaintenance.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.MaintenanceDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetmaintenance.MaintenanceDetailsTable,
			Columns: []string{assetmaintenance.MaintenanceDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmaintenancedetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedMaintenanceDetailsIDs(); len(nodes) > 0 && !amu.mutation.MaintenanceDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetmaintenance.MaintenanceDetailsTable,
			Columns: []string{assetmaintenance.MaintenanceDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmaintenancedetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.MaintenanceDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetmaintenance.MaintenanceDetailsTable,
			Columns: []string{assetmaintenance.MaintenanceDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmaintenancedetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(amu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetmaintenance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// AssetMaintenanceUpdateOne is the builder for updating a single AssetMaintenance entity.
type AssetMaintenanceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetMaintenanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (amuo *AssetMaintenanceUpdateOne) SetUpdatedAt(t time.Time) *AssetMaintenanceUpdateOne {
	amuo.mutation.SetUpdatedAt(t)
	return amuo
}

// SetDeletedAt sets the "deleted_at" field.
func (amuo *AssetMaintenanceUpdateOne) SetDeletedAt(t time.Time) *AssetMaintenanceUpdateOne {
	amuo.mutation.SetDeletedAt(t)
	return amuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amuo *AssetMaintenanceUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetMaintenanceUpdateOne {
	if t != nil {
		amuo.SetDeletedAt(*t)
	}
	return amuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (amuo *AssetMaintenanceUpdateOne) ClearDeletedAt() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearDeletedAt()
	return amuo
}

// SetLastModifier sets the "last_modifier" field.
func (amuo *AssetMaintenanceUpdateOne) SetLastModifier(m *model.Modifier) *AssetMaintenanceUpdateOne {
	amuo.mutation.SetLastModifier(m)
	return amuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (amuo *AssetMaintenanceUpdateOne) ClearLastModifier() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearLastModifier()
	return amuo
}

// SetRemark sets the "remark" field.
func (amuo *AssetMaintenanceUpdateOne) SetRemark(s string) *AssetMaintenanceUpdateOne {
	amuo.mutation.SetRemark(s)
	return amuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amuo *AssetMaintenanceUpdateOne) SetNillableRemark(s *string) *AssetMaintenanceUpdateOne {
	if s != nil {
		amuo.SetRemark(*s)
	}
	return amuo
}

// ClearRemark clears the value of the "remark" field.
func (amuo *AssetMaintenanceUpdateOne) ClearRemark() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearRemark()
	return amuo
}

// SetCabinetID sets the "cabinet_id" field.
func (amuo *AssetMaintenanceUpdateOne) SetCabinetID(u uint64) *AssetMaintenanceUpdateOne {
	amuo.mutation.SetCabinetID(u)
	return amuo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (amuo *AssetMaintenanceUpdateOne) SetNillableCabinetID(u *uint64) *AssetMaintenanceUpdateOne {
	if u != nil {
		amuo.SetCabinetID(*u)
	}
	return amuo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (amuo *AssetMaintenanceUpdateOne) ClearCabinetID() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearCabinetID()
	return amuo
}

// SetMaintainerID sets the "maintainer_id" field.
func (amuo *AssetMaintenanceUpdateOne) SetMaintainerID(u uint64) *AssetMaintenanceUpdateOne {
	amuo.mutation.SetMaintainerID(u)
	return amuo
}

// SetNillableMaintainerID sets the "maintainer_id" field if the given value is not nil.
func (amuo *AssetMaintenanceUpdateOne) SetNillableMaintainerID(u *uint64) *AssetMaintenanceUpdateOne {
	if u != nil {
		amuo.SetMaintainerID(*u)
	}
	return amuo
}

// ClearMaintainerID clears the value of the "maintainer_id" field.
func (amuo *AssetMaintenanceUpdateOne) ClearMaintainerID() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearMaintainerID()
	return amuo
}

// SetReason sets the "reason" field.
func (amuo *AssetMaintenanceUpdateOne) SetReason(s string) *AssetMaintenanceUpdateOne {
	amuo.mutation.SetReason(s)
	return amuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (amuo *AssetMaintenanceUpdateOne) SetNillableReason(s *string) *AssetMaintenanceUpdateOne {
	if s != nil {
		amuo.SetReason(*s)
	}
	return amuo
}

// ClearReason clears the value of the "reason" field.
func (amuo *AssetMaintenanceUpdateOne) ClearReason() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearReason()
	return amuo
}

// SetContent sets the "content" field.
func (amuo *AssetMaintenanceUpdateOne) SetContent(s string) *AssetMaintenanceUpdateOne {
	amuo.mutation.SetContent(s)
	return amuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (amuo *AssetMaintenanceUpdateOne) SetNillableContent(s *string) *AssetMaintenanceUpdateOne {
	if s != nil {
		amuo.SetContent(*s)
	}
	return amuo
}

// ClearContent clears the value of the "content" field.
func (amuo *AssetMaintenanceUpdateOne) ClearContent() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearContent()
	return amuo
}

// SetStatus sets the "status" field.
func (amuo *AssetMaintenanceUpdateOne) SetStatus(u uint8) *AssetMaintenanceUpdateOne {
	amuo.mutation.ResetStatus()
	amuo.mutation.SetStatus(u)
	return amuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (amuo *AssetMaintenanceUpdateOne) SetNillableStatus(u *uint8) *AssetMaintenanceUpdateOne {
	if u != nil {
		amuo.SetStatus(*u)
	}
	return amuo
}

// AddStatus adds u to the "status" field.
func (amuo *AssetMaintenanceUpdateOne) AddStatus(u int8) *AssetMaintenanceUpdateOne {
	amuo.mutation.AddStatus(u)
	return amuo
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (amuo *AssetMaintenanceUpdateOne) SetCabinet(c *Cabinet) *AssetMaintenanceUpdateOne {
	return amuo.SetCabinetID(c.ID)
}

// SetMaintainer sets the "maintainer" edge to the Maintainer entity.
func (amuo *AssetMaintenanceUpdateOne) SetMaintainer(m *Maintainer) *AssetMaintenanceUpdateOne {
	return amuo.SetMaintainerID(m.ID)
}

// AddMaintenanceDetailIDs adds the "maintenance_details" edge to the AssetMaintenanceDetails entity by IDs.
func (amuo *AssetMaintenanceUpdateOne) AddMaintenanceDetailIDs(ids ...uint64) *AssetMaintenanceUpdateOne {
	amuo.mutation.AddMaintenanceDetailIDs(ids...)
	return amuo
}

// AddMaintenanceDetails adds the "maintenance_details" edges to the AssetMaintenanceDetails entity.
func (amuo *AssetMaintenanceUpdateOne) AddMaintenanceDetails(a ...*AssetMaintenanceDetails) *AssetMaintenanceUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.AddMaintenanceDetailIDs(ids...)
}

// Mutation returns the AssetMaintenanceMutation object of the builder.
func (amuo *AssetMaintenanceUpdateOne) Mutation() *AssetMaintenanceMutation {
	return amuo.mutation
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (amuo *AssetMaintenanceUpdateOne) ClearCabinet() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearCabinet()
	return amuo
}

// ClearMaintainer clears the "maintainer" edge to the Maintainer entity.
func (amuo *AssetMaintenanceUpdateOne) ClearMaintainer() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearMaintainer()
	return amuo
}

// ClearMaintenanceDetails clears all "maintenance_details" edges to the AssetMaintenanceDetails entity.
func (amuo *AssetMaintenanceUpdateOne) ClearMaintenanceDetails() *AssetMaintenanceUpdateOne {
	amuo.mutation.ClearMaintenanceDetails()
	return amuo
}

// RemoveMaintenanceDetailIDs removes the "maintenance_details" edge to AssetMaintenanceDetails entities by IDs.
func (amuo *AssetMaintenanceUpdateOne) RemoveMaintenanceDetailIDs(ids ...uint64) *AssetMaintenanceUpdateOne {
	amuo.mutation.RemoveMaintenanceDetailIDs(ids...)
	return amuo
}

// RemoveMaintenanceDetails removes "maintenance_details" edges to AssetMaintenanceDetails entities.
func (amuo *AssetMaintenanceUpdateOne) RemoveMaintenanceDetails(a ...*AssetMaintenanceDetails) *AssetMaintenanceUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return amuo.RemoveMaintenanceDetailIDs(ids...)
}

// Where appends a list predicates to the AssetMaintenanceUpdate builder.
func (amuo *AssetMaintenanceUpdateOne) Where(ps ...predicate.AssetMaintenance) *AssetMaintenanceUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AssetMaintenanceUpdateOne) Select(field string, fields ...string) *AssetMaintenanceUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AssetMaintenance entity.
func (amuo *AssetMaintenanceUpdateOne) Save(ctx context.Context) (*AssetMaintenance, error) {
	if err := amuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AssetMaintenanceUpdateOne) SaveX(ctx context.Context) *AssetMaintenance {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AssetMaintenanceUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AssetMaintenanceUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuo *AssetMaintenanceUpdateOne) defaults() error {
	if _, ok := amuo.mutation.UpdatedAt(); !ok {
		if assetmaintenance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetmaintenance.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetmaintenance.UpdateDefaultUpdatedAt()
		amuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (amuo *AssetMaintenanceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetMaintenanceUpdateOne {
	amuo.modifiers = append(amuo.modifiers, modifiers...)
	return amuo
}

func (amuo *AssetMaintenanceUpdateOne) sqlSave(ctx context.Context) (_node *AssetMaintenance, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetmaintenance.Table, assetmaintenance.Columns, sqlgraph.NewFieldSpec(assetmaintenance.FieldID, field.TypeUint64))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetMaintenance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetmaintenance.FieldID)
		for _, f := range fields {
			if !assetmaintenance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetmaintenance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetmaintenance.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := amuo.mutation.DeletedAt(); ok {
		_spec.SetField(assetmaintenance.FieldDeletedAt, field.TypeTime, value)
	}
	if amuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assetmaintenance.FieldDeletedAt, field.TypeTime)
	}
	if amuo.mutation.CreatorCleared() {
		_spec.ClearField(assetmaintenance.FieldCreator, field.TypeJSON)
	}
	if value, ok := amuo.mutation.LastModifier(); ok {
		_spec.SetField(assetmaintenance.FieldLastModifier, field.TypeJSON, value)
	}
	if amuo.mutation.LastModifierCleared() {
		_spec.ClearField(assetmaintenance.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := amuo.mutation.Remark(); ok {
		_spec.SetField(assetmaintenance.FieldRemark, field.TypeString, value)
	}
	if amuo.mutation.RemarkCleared() {
		_spec.ClearField(assetmaintenance.FieldRemark, field.TypeString)
	}
	if value, ok := amuo.mutation.Reason(); ok {
		_spec.SetField(assetmaintenance.FieldReason, field.TypeString, value)
	}
	if amuo.mutation.ReasonCleared() {
		_spec.ClearField(assetmaintenance.FieldReason, field.TypeString)
	}
	if value, ok := amuo.mutation.Content(); ok {
		_spec.SetField(assetmaintenance.FieldContent, field.TypeString, value)
	}
	if amuo.mutation.ContentCleared() {
		_spec.ClearField(assetmaintenance.FieldContent, field.TypeString)
	}
	if value, ok := amuo.mutation.Status(); ok {
		_spec.SetField(assetmaintenance.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := amuo.mutation.AddedStatus(); ok {
		_spec.AddField(assetmaintenance.FieldStatus, field.TypeUint8, value)
	}
	if amuo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetmaintenance.CabinetTable,
			Columns: []string{assetmaintenance.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetmaintenance.CabinetTable,
			Columns: []string{assetmaintenance.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetmaintenance.MaintainerTable,
			Columns: []string{assetmaintenance.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetmaintenance.MaintainerTable,
			Columns: []string{assetmaintenance.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.MaintenanceDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetmaintenance.MaintenanceDetailsTable,
			Columns: []string{assetmaintenance.MaintenanceDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmaintenancedetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedMaintenanceDetailsIDs(); len(nodes) > 0 && !amuo.mutation.MaintenanceDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetmaintenance.MaintenanceDetailsTable,
			Columns: []string{assetmaintenance.MaintenanceDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmaintenancedetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.MaintenanceDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetmaintenance.MaintenanceDetailsTable,
			Columns: []string{assetmaintenance.MaintenanceDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmaintenancedetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(amuo.modifiers...)
	_node = &AssetMaintenance{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetmaintenance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
