// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
)

// PromotionLevelCreate is the builder for creating a PromotionLevel entity.
type PromotionLevelCreate struct {
	config
	mutation *PromotionLevelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (plc *PromotionLevelCreate) SetCreatedAt(t time.Time) *PromotionLevelCreate {
	plc.mutation.SetCreatedAt(t)
	return plc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (plc *PromotionLevelCreate) SetNillableCreatedAt(t *time.Time) *PromotionLevelCreate {
	if t != nil {
		plc.SetCreatedAt(*t)
	}
	return plc
}

// SetUpdatedAt sets the "updated_at" field.
func (plc *PromotionLevelCreate) SetUpdatedAt(t time.Time) *PromotionLevelCreate {
	plc.mutation.SetUpdatedAt(t)
	return plc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (plc *PromotionLevelCreate) SetNillableUpdatedAt(t *time.Time) *PromotionLevelCreate {
	if t != nil {
		plc.SetUpdatedAt(*t)
	}
	return plc
}

// SetDeletedAt sets the "deleted_at" field.
func (plc *PromotionLevelCreate) SetDeletedAt(t time.Time) *PromotionLevelCreate {
	plc.mutation.SetDeletedAt(t)
	return plc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (plc *PromotionLevelCreate) SetNillableDeletedAt(t *time.Time) *PromotionLevelCreate {
	if t != nil {
		plc.SetDeletedAt(*t)
	}
	return plc
}

// SetCreator sets the "creator" field.
func (plc *PromotionLevelCreate) SetCreator(m *model.Modifier) *PromotionLevelCreate {
	plc.mutation.SetCreator(m)
	return plc
}

// SetLastModifier sets the "last_modifier" field.
func (plc *PromotionLevelCreate) SetLastModifier(m *model.Modifier) *PromotionLevelCreate {
	plc.mutation.SetLastModifier(m)
	return plc
}

// SetRemark sets the "remark" field.
func (plc *PromotionLevelCreate) SetRemark(s string) *PromotionLevelCreate {
	plc.mutation.SetRemark(s)
	return plc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (plc *PromotionLevelCreate) SetNillableRemark(s *string) *PromotionLevelCreate {
	if s != nil {
		plc.SetRemark(*s)
	}
	return plc
}

// SetLevel sets the "level" field.
func (plc *PromotionLevelCreate) SetLevel(u uint64) *PromotionLevelCreate {
	plc.mutation.SetLevel(u)
	return plc
}

// SetGrowthValue sets the "growth_value" field.
func (plc *PromotionLevelCreate) SetGrowthValue(u uint64) *PromotionLevelCreate {
	plc.mutation.SetGrowthValue(u)
	return plc
}

// SetNillableGrowthValue sets the "growth_value" field if the given value is not nil.
func (plc *PromotionLevelCreate) SetNillableGrowthValue(u *uint64) *PromotionLevelCreate {
	if u != nil {
		plc.SetGrowthValue(*u)
	}
	return plc
}

// SetCommissionRatio sets the "commission_ratio" field.
func (plc *PromotionLevelCreate) SetCommissionRatio(f float64) *PromotionLevelCreate {
	plc.mutation.SetCommissionRatio(f)
	return plc
}

// SetNillableCommissionRatio sets the "commission_ratio" field if the given value is not nil.
func (plc *PromotionLevelCreate) SetNillableCommissionRatio(f *float64) *PromotionLevelCreate {
	if f != nil {
		plc.SetCommissionRatio(*f)
	}
	return plc
}

// Mutation returns the PromotionLevelMutation object of the builder.
func (plc *PromotionLevelCreate) Mutation() *PromotionLevelMutation {
	return plc.mutation
}

// Save creates the PromotionLevel in the database.
func (plc *PromotionLevelCreate) Save(ctx context.Context) (*PromotionLevel, error) {
	if err := plc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, plc.sqlSave, plc.mutation, plc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (plc *PromotionLevelCreate) SaveX(ctx context.Context) *PromotionLevel {
	v, err := plc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plc *PromotionLevelCreate) Exec(ctx context.Context) error {
	_, err := plc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plc *PromotionLevelCreate) ExecX(ctx context.Context) {
	if err := plc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plc *PromotionLevelCreate) defaults() error {
	if _, ok := plc.mutation.CreatedAt(); !ok {
		if promotionlevel.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionlevel.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionlevel.DefaultCreatedAt()
		plc.mutation.SetCreatedAt(v)
	}
	if _, ok := plc.mutation.UpdatedAt(); !ok {
		if promotionlevel.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionlevel.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionlevel.DefaultUpdatedAt()
		plc.mutation.SetUpdatedAt(v)
	}
	if _, ok := plc.mutation.GrowthValue(); !ok {
		v := promotionlevel.DefaultGrowthValue
		plc.mutation.SetGrowthValue(v)
	}
	if _, ok := plc.mutation.CommissionRatio(); !ok {
		v := promotionlevel.DefaultCommissionRatio
		plc.mutation.SetCommissionRatio(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (plc *PromotionLevelCreate) check() error {
	if _, ok := plc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionLevel.created_at"`)}
	}
	if _, ok := plc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionLevel.updated_at"`)}
	}
	if _, ok := plc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "PromotionLevel.level"`)}
	}
	if _, ok := plc.mutation.GrowthValue(); !ok {
		return &ValidationError{Name: "growth_value", err: errors.New(`ent: missing required field "PromotionLevel.growth_value"`)}
	}
	if _, ok := plc.mutation.CommissionRatio(); !ok {
		return &ValidationError{Name: "commission_ratio", err: errors.New(`ent: missing required field "PromotionLevel.commission_ratio"`)}
	}
	return nil
}

func (plc *PromotionLevelCreate) sqlSave(ctx context.Context) (*PromotionLevel, error) {
	if err := plc.check(); err != nil {
		return nil, err
	}
	_node, _spec := plc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	plc.mutation.id = &_node.ID
	plc.mutation.done = true
	return _node, nil
}

func (plc *PromotionLevelCreate) createSpec() (*PromotionLevel, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionLevel{config: plc.config}
		_spec = sqlgraph.NewCreateSpec(promotionlevel.Table, sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = plc.conflict
	if value, ok := plc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionlevel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := plc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionlevel.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := plc.mutation.DeletedAt(); ok {
		_spec.SetField(promotionlevel.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := plc.mutation.Creator(); ok {
		_spec.SetField(promotionlevel.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := plc.mutation.LastModifier(); ok {
		_spec.SetField(promotionlevel.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := plc.mutation.Remark(); ok {
		_spec.SetField(promotionlevel.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := plc.mutation.Level(); ok {
		_spec.SetField(promotionlevel.FieldLevel, field.TypeUint64, value)
		_node.Level = value
	}
	if value, ok := plc.mutation.GrowthValue(); ok {
		_spec.SetField(promotionlevel.FieldGrowthValue, field.TypeUint64, value)
		_node.GrowthValue = value
	}
	if value, ok := plc.mutation.CommissionRatio(); ok {
		_spec.SetField(promotionlevel.FieldCommissionRatio, field.TypeFloat64, value)
		_node.CommissionRatio = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionLevel.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionLevelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (plc *PromotionLevelCreate) OnConflict(opts ...sql.ConflictOption) *PromotionLevelUpsertOne {
	plc.conflict = opts
	return &PromotionLevelUpsertOne{
		create: plc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionLevel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (plc *PromotionLevelCreate) OnConflictColumns(columns ...string) *PromotionLevelUpsertOne {
	plc.conflict = append(plc.conflict, sql.ConflictColumns(columns...))
	return &PromotionLevelUpsertOne{
		create: plc,
	}
}

type (
	// PromotionLevelUpsertOne is the builder for "upsert"-ing
	//  one PromotionLevel node.
	PromotionLevelUpsertOne struct {
		create *PromotionLevelCreate
	}

	// PromotionLevelUpsert is the "OnConflict" setter.
	PromotionLevelUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionLevelUpsert) SetUpdatedAt(v time.Time) *PromotionLevelUpsert {
	u.Set(promotionlevel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionLevelUpsert) UpdateUpdatedAt() *PromotionLevelUpsert {
	u.SetExcluded(promotionlevel.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionLevelUpsert) SetDeletedAt(v time.Time) *PromotionLevelUpsert {
	u.Set(promotionlevel.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionLevelUpsert) UpdateDeletedAt() *PromotionLevelUpsert {
	u.SetExcluded(promotionlevel.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionLevelUpsert) ClearDeletedAt() *PromotionLevelUpsert {
	u.SetNull(promotionlevel.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionLevelUpsert) SetLastModifier(v *model.Modifier) *PromotionLevelUpsert {
	u.Set(promotionlevel.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionLevelUpsert) UpdateLastModifier() *PromotionLevelUpsert {
	u.SetExcluded(promotionlevel.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionLevelUpsert) ClearLastModifier() *PromotionLevelUpsert {
	u.SetNull(promotionlevel.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionLevelUpsert) SetRemark(v string) *PromotionLevelUpsert {
	u.Set(promotionlevel.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionLevelUpsert) UpdateRemark() *PromotionLevelUpsert {
	u.SetExcluded(promotionlevel.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionLevelUpsert) ClearRemark() *PromotionLevelUpsert {
	u.SetNull(promotionlevel.FieldRemark)
	return u
}

// SetLevel sets the "level" field.
func (u *PromotionLevelUpsert) SetLevel(v uint64) *PromotionLevelUpsert {
	u.Set(promotionlevel.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *PromotionLevelUpsert) UpdateLevel() *PromotionLevelUpsert {
	u.SetExcluded(promotionlevel.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *PromotionLevelUpsert) AddLevel(v uint64) *PromotionLevelUpsert {
	u.Add(promotionlevel.FieldLevel, v)
	return u
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionLevelUpsert) SetGrowthValue(v uint64) *PromotionLevelUpsert {
	u.Set(promotionlevel.FieldGrowthValue, v)
	return u
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionLevelUpsert) UpdateGrowthValue() *PromotionLevelUpsert {
	u.SetExcluded(promotionlevel.FieldGrowthValue)
	return u
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionLevelUpsert) AddGrowthValue(v uint64) *PromotionLevelUpsert {
	u.Add(promotionlevel.FieldGrowthValue, v)
	return u
}

// SetCommissionRatio sets the "commission_ratio" field.
func (u *PromotionLevelUpsert) SetCommissionRatio(v float64) *PromotionLevelUpsert {
	u.Set(promotionlevel.FieldCommissionRatio, v)
	return u
}

// UpdateCommissionRatio sets the "commission_ratio" field to the value that was provided on create.
func (u *PromotionLevelUpsert) UpdateCommissionRatio() *PromotionLevelUpsert {
	u.SetExcluded(promotionlevel.FieldCommissionRatio)
	return u
}

// AddCommissionRatio adds v to the "commission_ratio" field.
func (u *PromotionLevelUpsert) AddCommissionRatio(v float64) *PromotionLevelUpsert {
	u.Add(promotionlevel.FieldCommissionRatio, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionLevel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionLevelUpsertOne) UpdateNewValues() *PromotionLevelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionlevel.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionlevel.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionLevel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionLevelUpsertOne) Ignore() *PromotionLevelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionLevelUpsertOne) DoNothing() *PromotionLevelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionLevelCreate.OnConflict
// documentation for more info.
func (u *PromotionLevelUpsertOne) Update(set func(*PromotionLevelUpsert)) *PromotionLevelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionLevelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionLevelUpsertOne) SetUpdatedAt(v time.Time) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionLevelUpsertOne) UpdateUpdatedAt() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionLevelUpsertOne) SetDeletedAt(v time.Time) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionLevelUpsertOne) UpdateDeletedAt() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionLevelUpsertOne) ClearDeletedAt() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionLevelUpsertOne) SetLastModifier(v *model.Modifier) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionLevelUpsertOne) UpdateLastModifier() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionLevelUpsertOne) ClearLastModifier() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionLevelUpsertOne) SetRemark(v string) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionLevelUpsertOne) UpdateRemark() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionLevelUpsertOne) ClearRemark() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.ClearRemark()
	})
}

// SetLevel sets the "level" field.
func (u *PromotionLevelUpsertOne) SetLevel(v uint64) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *PromotionLevelUpsertOne) AddLevel(v uint64) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *PromotionLevelUpsertOne) UpdateLevel() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateLevel()
	})
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionLevelUpsertOne) SetGrowthValue(v uint64) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetGrowthValue(v)
	})
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionLevelUpsertOne) AddGrowthValue(v uint64) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.AddGrowthValue(v)
	})
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionLevelUpsertOne) UpdateGrowthValue() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateGrowthValue()
	})
}

// SetCommissionRatio sets the "commission_ratio" field.
func (u *PromotionLevelUpsertOne) SetCommissionRatio(v float64) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetCommissionRatio(v)
	})
}

// AddCommissionRatio adds v to the "commission_ratio" field.
func (u *PromotionLevelUpsertOne) AddCommissionRatio(v float64) *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.AddCommissionRatio(v)
	})
}

// UpdateCommissionRatio sets the "commission_ratio" field to the value that was provided on create.
func (u *PromotionLevelUpsertOne) UpdateCommissionRatio() *PromotionLevelUpsertOne {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateCommissionRatio()
	})
}

// Exec executes the query.
func (u *PromotionLevelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionLevelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionLevelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionLevelUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionLevelUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionLevelCreateBulk is the builder for creating many PromotionLevel entities in bulk.
type PromotionLevelCreateBulk struct {
	config
	err      error
	builders []*PromotionLevelCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionLevel entities in the database.
func (plcb *PromotionLevelCreateBulk) Save(ctx context.Context) ([]*PromotionLevel, error) {
	if plcb.err != nil {
		return nil, plcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(plcb.builders))
	nodes := make([]*PromotionLevel, len(plcb.builders))
	mutators := make([]Mutator, len(plcb.builders))
	for i := range plcb.builders {
		func(i int, root context.Context) {
			builder := plcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionLevelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = plcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plcb *PromotionLevelCreateBulk) SaveX(ctx context.Context) []*PromotionLevel {
	v, err := plcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plcb *PromotionLevelCreateBulk) Exec(ctx context.Context) error {
	_, err := plcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plcb *PromotionLevelCreateBulk) ExecX(ctx context.Context) {
	if err := plcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionLevel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionLevelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (plcb *PromotionLevelCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionLevelUpsertBulk {
	plcb.conflict = opts
	return &PromotionLevelUpsertBulk{
		create: plcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionLevel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (plcb *PromotionLevelCreateBulk) OnConflictColumns(columns ...string) *PromotionLevelUpsertBulk {
	plcb.conflict = append(plcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionLevelUpsertBulk{
		create: plcb,
	}
}

// PromotionLevelUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionLevel nodes.
type PromotionLevelUpsertBulk struct {
	create *PromotionLevelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionLevel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionLevelUpsertBulk) UpdateNewValues() *PromotionLevelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionlevel.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionlevel.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionLevel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionLevelUpsertBulk) Ignore() *PromotionLevelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionLevelUpsertBulk) DoNothing() *PromotionLevelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionLevelCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionLevelUpsertBulk) Update(set func(*PromotionLevelUpsert)) *PromotionLevelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionLevelUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionLevelUpsertBulk) SetUpdatedAt(v time.Time) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionLevelUpsertBulk) UpdateUpdatedAt() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionLevelUpsertBulk) SetDeletedAt(v time.Time) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionLevelUpsertBulk) UpdateDeletedAt() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionLevelUpsertBulk) ClearDeletedAt() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionLevelUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionLevelUpsertBulk) UpdateLastModifier() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionLevelUpsertBulk) ClearLastModifier() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionLevelUpsertBulk) SetRemark(v string) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionLevelUpsertBulk) UpdateRemark() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionLevelUpsertBulk) ClearRemark() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.ClearRemark()
	})
}

// SetLevel sets the "level" field.
func (u *PromotionLevelUpsertBulk) SetLevel(v uint64) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *PromotionLevelUpsertBulk) AddLevel(v uint64) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *PromotionLevelUpsertBulk) UpdateLevel() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateLevel()
	})
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionLevelUpsertBulk) SetGrowthValue(v uint64) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetGrowthValue(v)
	})
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionLevelUpsertBulk) AddGrowthValue(v uint64) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.AddGrowthValue(v)
	})
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionLevelUpsertBulk) UpdateGrowthValue() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateGrowthValue()
	})
}

// SetCommissionRatio sets the "commission_ratio" field.
func (u *PromotionLevelUpsertBulk) SetCommissionRatio(v float64) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.SetCommissionRatio(v)
	})
}

// AddCommissionRatio adds v to the "commission_ratio" field.
func (u *PromotionLevelUpsertBulk) AddCommissionRatio(v float64) *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.AddCommissionRatio(v)
	})
}

// UpdateCommissionRatio sets the "commission_ratio" field to the value that was provided on create.
func (u *PromotionLevelUpsertBulk) UpdateCommissionRatio() *PromotionLevelUpsertBulk {
	return u.Update(func(s *PromotionLevelUpsert) {
		s.UpdateCommissionRatio()
	})
}

// Exec executes the query.
func (u *PromotionLevelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionLevelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionLevelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionLevelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
