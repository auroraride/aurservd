// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// EbikeCreate is the builder for creating a Ebike entity.
type EbikeCreate struct {
	config
	mutation *EbikeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *EbikeCreate) SetCreatedAt(t time.Time) *EbikeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableCreatedAt(t *time.Time) *EbikeCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EbikeCreate) SetUpdatedAt(t time.Time) *EbikeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableUpdatedAt(t *time.Time) *EbikeCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetCreator sets the "creator" field.
func (ec *EbikeCreate) SetCreator(m *model.Modifier) *EbikeCreate {
	ec.mutation.SetCreator(m)
	return ec
}

// SetLastModifier sets the "last_modifier" field.
func (ec *EbikeCreate) SetLastModifier(m *model.Modifier) *EbikeCreate {
	ec.mutation.SetLastModifier(m)
	return ec
}

// SetRemark sets the "remark" field.
func (ec *EbikeCreate) SetRemark(s string) *EbikeCreate {
	ec.mutation.SetRemark(s)
	return ec
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableRemark(s *string) *EbikeCreate {
	if s != nil {
		ec.SetRemark(*s)
	}
	return ec
}

// SetBrandID sets the "brand_id" field.
func (ec *EbikeCreate) SetBrandID(u uint64) *EbikeCreate {
	ec.mutation.SetBrandID(u)
	return ec
}

// SetRiderID sets the "rider_id" field.
func (ec *EbikeCreate) SetRiderID(u uint64) *EbikeCreate {
	ec.mutation.SetRiderID(u)
	return ec
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableRiderID(u *uint64) *EbikeCreate {
	if u != nil {
		ec.SetRiderID(*u)
	}
	return ec
}

// SetStoreID sets the "store_id" field.
func (ec *EbikeCreate) SetStoreID(u uint64) *EbikeCreate {
	ec.mutation.SetStoreID(u)
	return ec
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableStoreID(u *uint64) *EbikeCreate {
	if u != nil {
		ec.SetStoreID(*u)
	}
	return ec
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ec *EbikeCreate) SetEnterpriseID(u uint64) *EbikeCreate {
	ec.mutation.SetEnterpriseID(u)
	return ec
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableEnterpriseID(u *uint64) *EbikeCreate {
	if u != nil {
		ec.SetEnterpriseID(*u)
	}
	return ec
}

// SetStationID sets the "station_id" field.
func (ec *EbikeCreate) SetStationID(u uint64) *EbikeCreate {
	ec.mutation.SetStationID(u)
	return ec
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableStationID(u *uint64) *EbikeCreate {
	if u != nil {
		ec.SetStationID(*u)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EbikeCreate) SetStatus(ms model.EbikeStatus) *EbikeCreate {
	ec.mutation.SetStatus(ms)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableStatus(ms *model.EbikeStatus) *EbikeCreate {
	if ms != nil {
		ec.SetStatus(*ms)
	}
	return ec
}

// SetEnable sets the "enable" field.
func (ec *EbikeCreate) SetEnable(b bool) *EbikeCreate {
	ec.mutation.SetEnable(b)
	return ec
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableEnable(b *bool) *EbikeCreate {
	if b != nil {
		ec.SetEnable(*b)
	}
	return ec
}

// SetSn sets the "sn" field.
func (ec *EbikeCreate) SetSn(s string) *EbikeCreate {
	ec.mutation.SetSn(s)
	return ec
}

// SetPlate sets the "plate" field.
func (ec *EbikeCreate) SetPlate(s string) *EbikeCreate {
	ec.mutation.SetPlate(s)
	return ec
}

// SetNillablePlate sets the "plate" field if the given value is not nil.
func (ec *EbikeCreate) SetNillablePlate(s *string) *EbikeCreate {
	if s != nil {
		ec.SetPlate(*s)
	}
	return ec
}

// SetMachine sets the "machine" field.
func (ec *EbikeCreate) SetMachine(s string) *EbikeCreate {
	ec.mutation.SetMachine(s)
	return ec
}

// SetNillableMachine sets the "machine" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableMachine(s *string) *EbikeCreate {
	if s != nil {
		ec.SetMachine(*s)
	}
	return ec
}

// SetSim sets the "sim" field.
func (ec *EbikeCreate) SetSim(s string) *EbikeCreate {
	ec.mutation.SetSim(s)
	return ec
}

// SetNillableSim sets the "sim" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableSim(s *string) *EbikeCreate {
	if s != nil {
		ec.SetSim(*s)
	}
	return ec
}

// SetColor sets the "color" field.
func (ec *EbikeCreate) SetColor(s string) *EbikeCreate {
	ec.mutation.SetColor(s)
	return ec
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableColor(s *string) *EbikeCreate {
	if s != nil {
		ec.SetColor(*s)
	}
	return ec
}

// SetExFactory sets the "ex_factory" field.
func (ec *EbikeCreate) SetExFactory(s string) *EbikeCreate {
	ec.mutation.SetExFactory(s)
	return ec
}

// SetRto sets the "rto" field.
func (ec *EbikeCreate) SetRto(b bool) *EbikeCreate {
	ec.mutation.SetRto(b)
	return ec
}

// SetNillableRto sets the "rto" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableRto(b *bool) *EbikeCreate {
	if b != nil {
		ec.SetRto(*b)
	}
	return ec
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (ec *EbikeCreate) SetRtoRiderID(u uint64) *EbikeCreate {
	ec.mutation.SetRtoRiderID(u)
	return ec
}

// SetNillableRtoRiderID sets the "rto_rider_id" field if the given value is not nil.
func (ec *EbikeCreate) SetNillableRtoRiderID(u *uint64) *EbikeCreate {
	if u != nil {
		ec.SetRtoRiderID(*u)
	}
	return ec
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (ec *EbikeCreate) SetBrand(e *EbikeBrand) *EbikeCreate {
	return ec.SetBrandID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ec *EbikeCreate) SetRider(r *Rider) *EbikeCreate {
	return ec.SetRiderID(r.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (ec *EbikeCreate) SetStore(s *Store) *EbikeCreate {
	return ec.SetStoreID(s.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ec *EbikeCreate) SetEnterprise(e *Enterprise) *EbikeCreate {
	return ec.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ec *EbikeCreate) SetStation(e *EnterpriseStation) *EbikeCreate {
	return ec.SetStationID(e.ID)
}

// AddAllocateIDs adds the "allocates" edge to the Allocate entity by IDs.
func (ec *EbikeCreate) AddAllocateIDs(ids ...uint64) *EbikeCreate {
	ec.mutation.AddAllocateIDs(ids...)
	return ec
}

// AddAllocates adds the "allocates" edges to the Allocate entity.
func (ec *EbikeCreate) AddAllocates(a ...*Allocate) *EbikeCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddAllocateIDs(ids...)
}

// SetRtoRider sets the "rto_rider" edge to the Rider entity.
func (ec *EbikeCreate) SetRtoRider(r *Rider) *EbikeCreate {
	return ec.SetRtoRiderID(r.ID)
}

// Mutation returns the EbikeMutation object of the builder.
func (ec *EbikeCreate) Mutation() *EbikeMutation {
	return ec.mutation
}

// Save creates the Ebike in the database.
func (ec *EbikeCreate) Save(ctx context.Context) (*Ebike, error) {
	if err := ec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EbikeCreate) SaveX(ctx context.Context) *Ebike {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EbikeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EbikeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EbikeCreate) defaults() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		if ebike.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebike.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := ebike.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		if ebike.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebike.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ebike.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := ebike.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.Enable(); !ok {
		v := ebike.DefaultEnable
		ec.mutation.SetEnable(v)
	}
	if _, ok := ec.mutation.Color(); !ok {
		v := ebike.DefaultColor
		ec.mutation.SetColor(v)
	}
	if _, ok := ec.mutation.Rto(); !ok {
		v := ebike.DefaultRto
		ec.mutation.SetRto(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ec *EbikeCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ebike.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Ebike.updated_at"`)}
	}
	if _, ok := ec.mutation.BrandID(); !ok {
		return &ValidationError{Name: "brand_id", err: errors.New(`ent: missing required field "Ebike.brand_id"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Ebike.status"`)}
	}
	if _, ok := ec.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Ebike.enable"`)}
	}
	if _, ok := ec.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Ebike.sn"`)}
	}
	if _, ok := ec.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "Ebike.color"`)}
	}
	if _, ok := ec.mutation.ExFactory(); !ok {
		return &ValidationError{Name: "ex_factory", err: errors.New(`ent: missing required field "Ebike.ex_factory"`)}
	}
	if _, ok := ec.mutation.Rto(); !ok {
		return &ValidationError{Name: "rto", err: errors.New(`ent: missing required field "Ebike.rto"`)}
	}
	if _, ok := ec.mutation.BrandID(); !ok {
		return &ValidationError{Name: "brand", err: errors.New(`ent: missing required edge "Ebike.brand"`)}
	}
	return nil
}

func (ec *EbikeCreate) sqlSave(ctx context.Context) (*Ebike, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EbikeCreate) createSpec() (*Ebike, *sqlgraph.CreateSpec) {
	var (
		_node = &Ebike{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(ebike.Table, sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(ebike.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(ebike.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.Creator(); ok {
		_spec.SetField(ebike.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ec.mutation.LastModifier(); ok {
		_spec.SetField(ebike.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ec.mutation.Remark(); ok {
		_spec.SetField(ebike.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(ebike.FieldStatus, field.TypeOther, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Enable(); ok {
		_spec.SetField(ebike.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := ec.mutation.Sn(); ok {
		_spec.SetField(ebike.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := ec.mutation.Plate(); ok {
		_spec.SetField(ebike.FieldPlate, field.TypeString, value)
		_node.Plate = &value
	}
	if value, ok := ec.mutation.Machine(); ok {
		_spec.SetField(ebike.FieldMachine, field.TypeString, value)
		_node.Machine = &value
	}
	if value, ok := ec.mutation.Sim(); ok {
		_spec.SetField(ebike.FieldSim, field.TypeString, value)
		_node.Sim = &value
	}
	if value, ok := ec.mutation.Color(); ok {
		_spec.SetField(ebike.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := ec.mutation.ExFactory(); ok {
		_spec.SetField(ebike.FieldExFactory, field.TypeString, value)
		_node.ExFactory = value
	}
	if value, ok := ec.mutation.Rto(); ok {
		_spec.SetField(ebike.FieldRto, field.TypeBool, value)
		_node.Rto = value
	}
	if nodes := ec.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.BrandTable,
			Columns: []string{ebike.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.RiderTable,
			Columns: []string{ebike.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.StoreTable,
			Columns: []string{ebike.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.EnterpriseTable,
			Columns: []string{ebike.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.StationTable,
			Columns: []string{ebike.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AllocatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ebike.AllocatesTable,
			Columns: []string{ebike.AllocatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(allocate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.RtoRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.RtoRiderTable,
			Columns: []string{ebike.RtoRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RtoRiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ebike.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EbikeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ec *EbikeCreate) OnConflict(opts ...sql.ConflictOption) *EbikeUpsertOne {
	ec.conflict = opts
	return &EbikeUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ebike.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EbikeCreate) OnConflictColumns(columns ...string) *EbikeUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EbikeUpsertOne{
		create: ec,
	}
}

type (
	// EbikeUpsertOne is the builder for "upsert"-ing
	//  one Ebike node.
	EbikeUpsertOne struct {
		create *EbikeCreate
	}

	// EbikeUpsert is the "OnConflict" setter.
	EbikeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeUpsert) SetUpdatedAt(v time.Time) *EbikeUpsert {
	u.Set(ebike.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateUpdatedAt() *EbikeUpsert {
	u.SetExcluded(ebike.FieldUpdatedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeUpsert) SetLastModifier(v *model.Modifier) *EbikeUpsert {
	u.Set(ebike.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateLastModifier() *EbikeUpsert {
	u.SetExcluded(ebike.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeUpsert) ClearLastModifier() *EbikeUpsert {
	u.SetNull(ebike.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EbikeUpsert) SetRemark(v string) *EbikeUpsert {
	u.Set(ebike.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateRemark() *EbikeUpsert {
	u.SetExcluded(ebike.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeUpsert) ClearRemark() *EbikeUpsert {
	u.SetNull(ebike.FieldRemark)
	return u
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeUpsert) SetBrandID(v uint64) *EbikeUpsert {
	u.Set(ebike.FieldBrandID, v)
	return u
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateBrandID() *EbikeUpsert {
	u.SetExcluded(ebike.FieldBrandID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *EbikeUpsert) SetRiderID(v uint64) *EbikeUpsert {
	u.Set(ebike.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateRiderID() *EbikeUpsert {
	u.SetExcluded(ebike.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *EbikeUpsert) ClearRiderID() *EbikeUpsert {
	u.SetNull(ebike.FieldRiderID)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *EbikeUpsert) SetStoreID(v uint64) *EbikeUpsert {
	u.Set(ebike.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateStoreID() *EbikeUpsert {
	u.SetExcluded(ebike.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *EbikeUpsert) ClearStoreID() *EbikeUpsert {
	u.SetNull(ebike.FieldStoreID)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EbikeUpsert) SetEnterpriseID(v uint64) *EbikeUpsert {
	u.Set(ebike.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateEnterpriseID() *EbikeUpsert {
	u.SetExcluded(ebike.FieldEnterpriseID)
	return u
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *EbikeUpsert) ClearEnterpriseID() *EbikeUpsert {
	u.SetNull(ebike.FieldEnterpriseID)
	return u
}

// SetStationID sets the "station_id" field.
func (u *EbikeUpsert) SetStationID(v uint64) *EbikeUpsert {
	u.Set(ebike.FieldStationID, v)
	return u
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateStationID() *EbikeUpsert {
	u.SetExcluded(ebike.FieldStationID)
	return u
}

// ClearStationID clears the value of the "station_id" field.
func (u *EbikeUpsert) ClearStationID() *EbikeUpsert {
	u.SetNull(ebike.FieldStationID)
	return u
}

// SetStatus sets the "status" field.
func (u *EbikeUpsert) SetStatus(v model.EbikeStatus) *EbikeUpsert {
	u.Set(ebike.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateStatus() *EbikeUpsert {
	u.SetExcluded(ebike.FieldStatus)
	return u
}

// SetEnable sets the "enable" field.
func (u *EbikeUpsert) SetEnable(v bool) *EbikeUpsert {
	u.Set(ebike.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateEnable() *EbikeUpsert {
	u.SetExcluded(ebike.FieldEnable)
	return u
}

// SetSn sets the "sn" field.
func (u *EbikeUpsert) SetSn(v string) *EbikeUpsert {
	u.Set(ebike.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateSn() *EbikeUpsert {
	u.SetExcluded(ebike.FieldSn)
	return u
}

// SetPlate sets the "plate" field.
func (u *EbikeUpsert) SetPlate(v string) *EbikeUpsert {
	u.Set(ebike.FieldPlate, v)
	return u
}

// UpdatePlate sets the "plate" field to the value that was provided on create.
func (u *EbikeUpsert) UpdatePlate() *EbikeUpsert {
	u.SetExcluded(ebike.FieldPlate)
	return u
}

// ClearPlate clears the value of the "plate" field.
func (u *EbikeUpsert) ClearPlate() *EbikeUpsert {
	u.SetNull(ebike.FieldPlate)
	return u
}

// SetMachine sets the "machine" field.
func (u *EbikeUpsert) SetMachine(v string) *EbikeUpsert {
	u.Set(ebike.FieldMachine, v)
	return u
}

// UpdateMachine sets the "machine" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateMachine() *EbikeUpsert {
	u.SetExcluded(ebike.FieldMachine)
	return u
}

// ClearMachine clears the value of the "machine" field.
func (u *EbikeUpsert) ClearMachine() *EbikeUpsert {
	u.SetNull(ebike.FieldMachine)
	return u
}

// SetSim sets the "sim" field.
func (u *EbikeUpsert) SetSim(v string) *EbikeUpsert {
	u.Set(ebike.FieldSim, v)
	return u
}

// UpdateSim sets the "sim" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateSim() *EbikeUpsert {
	u.SetExcluded(ebike.FieldSim)
	return u
}

// ClearSim clears the value of the "sim" field.
func (u *EbikeUpsert) ClearSim() *EbikeUpsert {
	u.SetNull(ebike.FieldSim)
	return u
}

// SetColor sets the "color" field.
func (u *EbikeUpsert) SetColor(v string) *EbikeUpsert {
	u.Set(ebike.FieldColor, v)
	return u
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateColor() *EbikeUpsert {
	u.SetExcluded(ebike.FieldColor)
	return u
}

// SetExFactory sets the "ex_factory" field.
func (u *EbikeUpsert) SetExFactory(v string) *EbikeUpsert {
	u.Set(ebike.FieldExFactory, v)
	return u
}

// UpdateExFactory sets the "ex_factory" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateExFactory() *EbikeUpsert {
	u.SetExcluded(ebike.FieldExFactory)
	return u
}

// SetRto sets the "rto" field.
func (u *EbikeUpsert) SetRto(v bool) *EbikeUpsert {
	u.Set(ebike.FieldRto, v)
	return u
}

// UpdateRto sets the "rto" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateRto() *EbikeUpsert {
	u.SetExcluded(ebike.FieldRto)
	return u
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (u *EbikeUpsert) SetRtoRiderID(v uint64) *EbikeUpsert {
	u.Set(ebike.FieldRtoRiderID, v)
	return u
}

// UpdateRtoRiderID sets the "rto_rider_id" field to the value that was provided on create.
func (u *EbikeUpsert) UpdateRtoRiderID() *EbikeUpsert {
	u.SetExcluded(ebike.FieldRtoRiderID)
	return u
}

// ClearRtoRiderID clears the value of the "rto_rider_id" field.
func (u *EbikeUpsert) ClearRtoRiderID() *EbikeUpsert {
	u.SetNull(ebike.FieldRtoRiderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Ebike.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EbikeUpsertOne) UpdateNewValues() *EbikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ebike.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(ebike.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ebike.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EbikeUpsertOne) Ignore() *EbikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EbikeUpsertOne) DoNothing() *EbikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EbikeCreate.OnConflict
// documentation for more info.
func (u *EbikeUpsertOne) Update(set func(*EbikeUpsert)) *EbikeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EbikeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeUpsertOne) SetUpdatedAt(v time.Time) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateUpdatedAt() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeUpsertOne) SetLastModifier(v *model.Modifier) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateLastModifier() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeUpsertOne) ClearLastModifier() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EbikeUpsertOne) SetRemark(v string) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateRemark() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeUpsertOne) ClearRemark() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearRemark()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeUpsertOne) SetBrandID(v uint64) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateBrandID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateBrandID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *EbikeUpsertOne) SetRiderID(v uint64) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateRiderID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *EbikeUpsertOne) ClearRiderID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearRiderID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *EbikeUpsertOne) SetStoreID(v uint64) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateStoreID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *EbikeUpsertOne) ClearStoreID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearStoreID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EbikeUpsertOne) SetEnterpriseID(v uint64) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateEnterpriseID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *EbikeUpsertOne) ClearEnterpriseID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetStationID sets the "station_id" field.
func (u *EbikeUpsertOne) SetStationID(v uint64) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateStationID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *EbikeUpsertOne) ClearStationID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearStationID()
	})
}

// SetStatus sets the "status" field.
func (u *EbikeUpsertOne) SetStatus(v model.EbikeStatus) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateStatus() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateStatus()
	})
}

// SetEnable sets the "enable" field.
func (u *EbikeUpsertOne) SetEnable(v bool) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateEnable() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateEnable()
	})
}

// SetSn sets the "sn" field.
func (u *EbikeUpsertOne) SetSn(v string) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateSn() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateSn()
	})
}

// SetPlate sets the "plate" field.
func (u *EbikeUpsertOne) SetPlate(v string) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetPlate(v)
	})
}

// UpdatePlate sets the "plate" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdatePlate() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdatePlate()
	})
}

// ClearPlate clears the value of the "plate" field.
func (u *EbikeUpsertOne) ClearPlate() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearPlate()
	})
}

// SetMachine sets the "machine" field.
func (u *EbikeUpsertOne) SetMachine(v string) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetMachine(v)
	})
}

// UpdateMachine sets the "machine" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateMachine() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateMachine()
	})
}

// ClearMachine clears the value of the "machine" field.
func (u *EbikeUpsertOne) ClearMachine() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearMachine()
	})
}

// SetSim sets the "sim" field.
func (u *EbikeUpsertOne) SetSim(v string) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetSim(v)
	})
}

// UpdateSim sets the "sim" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateSim() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateSim()
	})
}

// ClearSim clears the value of the "sim" field.
func (u *EbikeUpsertOne) ClearSim() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearSim()
	})
}

// SetColor sets the "color" field.
func (u *EbikeUpsertOne) SetColor(v string) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateColor() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateColor()
	})
}

// SetExFactory sets the "ex_factory" field.
func (u *EbikeUpsertOne) SetExFactory(v string) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetExFactory(v)
	})
}

// UpdateExFactory sets the "ex_factory" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateExFactory() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateExFactory()
	})
}

// SetRto sets the "rto" field.
func (u *EbikeUpsertOne) SetRto(v bool) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetRto(v)
	})
}

// UpdateRto sets the "rto" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateRto() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateRto()
	})
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (u *EbikeUpsertOne) SetRtoRiderID(v uint64) *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.SetRtoRiderID(v)
	})
}

// UpdateRtoRiderID sets the "rto_rider_id" field to the value that was provided on create.
func (u *EbikeUpsertOne) UpdateRtoRiderID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateRtoRiderID()
	})
}

// ClearRtoRiderID clears the value of the "rto_rider_id" field.
func (u *EbikeUpsertOne) ClearRtoRiderID() *EbikeUpsertOne {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearRtoRiderID()
	})
}

// Exec executes the query.
func (u *EbikeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EbikeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EbikeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EbikeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EbikeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EbikeCreateBulk is the builder for creating many Ebike entities in bulk.
type EbikeCreateBulk struct {
	config
	err      error
	builders []*EbikeCreate
	conflict []sql.ConflictOption
}

// Save creates the Ebike entities in the database.
func (ecb *EbikeCreateBulk) Save(ctx context.Context) ([]*Ebike, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Ebike, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EbikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EbikeCreateBulk) SaveX(ctx context.Context) []*Ebike {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EbikeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EbikeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ebike.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EbikeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecb *EbikeCreateBulk) OnConflict(opts ...sql.ConflictOption) *EbikeUpsertBulk {
	ecb.conflict = opts
	return &EbikeUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ebike.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EbikeCreateBulk) OnConflictColumns(columns ...string) *EbikeUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EbikeUpsertBulk{
		create: ecb,
	}
}

// EbikeUpsertBulk is the builder for "upsert"-ing
// a bulk of Ebike nodes.
type EbikeUpsertBulk struct {
	create *EbikeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ebike.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EbikeUpsertBulk) UpdateNewValues() *EbikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ebike.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(ebike.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ebike.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EbikeUpsertBulk) Ignore() *EbikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EbikeUpsertBulk) DoNothing() *EbikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EbikeCreateBulk.OnConflict
// documentation for more info.
func (u *EbikeUpsertBulk) Update(set func(*EbikeUpsert)) *EbikeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EbikeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeUpsertBulk) SetUpdatedAt(v time.Time) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateUpdatedAt() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeUpsertBulk) SetLastModifier(v *model.Modifier) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateLastModifier() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeUpsertBulk) ClearLastModifier() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EbikeUpsertBulk) SetRemark(v string) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateRemark() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeUpsertBulk) ClearRemark() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearRemark()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeUpsertBulk) SetBrandID(v uint64) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateBrandID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateBrandID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *EbikeUpsertBulk) SetRiderID(v uint64) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateRiderID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *EbikeUpsertBulk) ClearRiderID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearRiderID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *EbikeUpsertBulk) SetStoreID(v uint64) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateStoreID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *EbikeUpsertBulk) ClearStoreID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearStoreID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EbikeUpsertBulk) SetEnterpriseID(v uint64) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateEnterpriseID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *EbikeUpsertBulk) ClearEnterpriseID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetStationID sets the "station_id" field.
func (u *EbikeUpsertBulk) SetStationID(v uint64) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateStationID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *EbikeUpsertBulk) ClearStationID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearStationID()
	})
}

// SetStatus sets the "status" field.
func (u *EbikeUpsertBulk) SetStatus(v model.EbikeStatus) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateStatus() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateStatus()
	})
}

// SetEnable sets the "enable" field.
func (u *EbikeUpsertBulk) SetEnable(v bool) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateEnable() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateEnable()
	})
}

// SetSn sets the "sn" field.
func (u *EbikeUpsertBulk) SetSn(v string) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateSn() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateSn()
	})
}

// SetPlate sets the "plate" field.
func (u *EbikeUpsertBulk) SetPlate(v string) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetPlate(v)
	})
}

// UpdatePlate sets the "plate" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdatePlate() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdatePlate()
	})
}

// ClearPlate clears the value of the "plate" field.
func (u *EbikeUpsertBulk) ClearPlate() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearPlate()
	})
}

// SetMachine sets the "machine" field.
func (u *EbikeUpsertBulk) SetMachine(v string) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetMachine(v)
	})
}

// UpdateMachine sets the "machine" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateMachine() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateMachine()
	})
}

// ClearMachine clears the value of the "machine" field.
func (u *EbikeUpsertBulk) ClearMachine() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearMachine()
	})
}

// SetSim sets the "sim" field.
func (u *EbikeUpsertBulk) SetSim(v string) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetSim(v)
	})
}

// UpdateSim sets the "sim" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateSim() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateSim()
	})
}

// ClearSim clears the value of the "sim" field.
func (u *EbikeUpsertBulk) ClearSim() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearSim()
	})
}

// SetColor sets the "color" field.
func (u *EbikeUpsertBulk) SetColor(v string) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateColor() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateColor()
	})
}

// SetExFactory sets the "ex_factory" field.
func (u *EbikeUpsertBulk) SetExFactory(v string) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetExFactory(v)
	})
}

// UpdateExFactory sets the "ex_factory" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateExFactory() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateExFactory()
	})
}

// SetRto sets the "rto" field.
func (u *EbikeUpsertBulk) SetRto(v bool) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetRto(v)
	})
}

// UpdateRto sets the "rto" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateRto() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateRto()
	})
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (u *EbikeUpsertBulk) SetRtoRiderID(v uint64) *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.SetRtoRiderID(v)
	})
}

// UpdateRtoRiderID sets the "rto_rider_id" field to the value that was provided on create.
func (u *EbikeUpsertBulk) UpdateRtoRiderID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.UpdateRtoRiderID()
	})
}

// ClearRtoRiderID clears the value of the "rto_rider_id" field.
func (u *EbikeUpsertBulk) ClearRtoRiderID() *EbikeUpsertBulk {
	return u.Update(func(s *EbikeUpsert) {
		s.ClearRtoRiderID()
	})
}

// Exec executes the query.
func (u *EbikeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EbikeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EbikeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EbikeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
