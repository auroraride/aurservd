// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/purchasefollow"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
)

// PurchaseFollow is the model entity for the PurchaseFollow schema.
type PurchaseFollow struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 跟进内容
	Content string `json:"content,omitempty"`
	// 跟进图片
	Pics []string `json:"pics,omitempty"`
	// 订单id
	OrderID uint64 `json:"order_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PurchaseFollowQuery when eager-loading is set.
	Edges        PurchaseFollowEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PurchaseFollowEdges holds the relations/edges for other nodes in the graph.
type PurchaseFollowEdges struct {
	// Order holds the value of the order edge.
	Order *PurchaseOrder `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PurchaseFollowEdges) OrderOrErr() (*PurchaseOrder, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: purchaseorder.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PurchaseFollow) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case purchasefollow.FieldCreator, purchasefollow.FieldLastModifier, purchasefollow.FieldPics:
			values[i] = new([]byte)
		case purchasefollow.FieldID, purchasefollow.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case purchasefollow.FieldRemark, purchasefollow.FieldContent:
			values[i] = new(sql.NullString)
		case purchasefollow.FieldCreatedAt, purchasefollow.FieldUpdatedAt, purchasefollow.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PurchaseFollow fields.
func (pf *PurchaseFollow) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case purchasefollow.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pf.ID = uint64(value.Int64)
		case purchasefollow.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pf.CreatedAt = value.Time
			}
		case purchasefollow.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pf.UpdatedAt = value.Time
			}
		case purchasefollow.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pf.DeletedAt = new(time.Time)
				*pf.DeletedAt = value.Time
			}
		case purchasefollow.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pf.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case purchasefollow.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pf.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case purchasefollow.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pf.Remark = value.String
			}
		case purchasefollow.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pf.Content = value.String
			}
		case purchasefollow.FieldPics:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field pics", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pf.Pics); err != nil {
					return fmt.Errorf("unmarshal field pics: %w", err)
				}
			}
		case purchasefollow.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				pf.OrderID = uint64(value.Int64)
			}
		default:
			pf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PurchaseFollow.
// This includes values selected through modifiers, order, etc.
func (pf *PurchaseFollow) Value(name string) (ent.Value, error) {
	return pf.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the PurchaseFollow entity.
func (pf *PurchaseFollow) QueryOrder() *PurchaseOrderQuery {
	return NewPurchaseFollowClient(pf.config).QueryOrder(pf)
}

// Update returns a builder for updating this PurchaseFollow.
// Note that you need to call PurchaseFollow.Unwrap() before calling this method if this PurchaseFollow
// was returned from a transaction, and the transaction was committed or rolled back.
func (pf *PurchaseFollow) Update() *PurchaseFollowUpdateOne {
	return NewPurchaseFollowClient(pf.config).UpdateOne(pf)
}

// Unwrap unwraps the PurchaseFollow entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pf *PurchaseFollow) Unwrap() *PurchaseFollow {
	_tx, ok := pf.config.driver.(*txDriver)
	if !ok {
		panic("ent: PurchaseFollow is not a transactional entity")
	}
	pf.config.driver = _tx.drv
	return pf
}

// String implements the fmt.Stringer.
func (pf *PurchaseFollow) String() string {
	var builder strings.Builder
	builder.WriteString("PurchaseFollow(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pf.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pf.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pf.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pf.Remark)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pf.Content)
	builder.WriteString(", ")
	builder.WriteString("pics=")
	builder.WriteString(fmt.Sprintf("%v", pf.Pics))
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", pf.OrderID))
	builder.WriteByte(')')
	return builder.String()
}

// PurchaseFollows is a parsable slice of PurchaseFollow.
type PurchaseFollows []*PurchaseFollow
