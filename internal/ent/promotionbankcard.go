// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionBankCard is the model entity for the PromotionBankCard schema.
type PromotionBankCard struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 会员ID
	MemberID uint64 `json:"member_id,omitempty"`
	// 银行卡号
	CardNo string `json:"card_no,omitempty"`
	// 银行名称
	Bank string `json:"bank,omitempty"`
	// 是否是默认银行卡
	IsDefault bool `json:"is_default,omitempty"`
	// 银行卡logo
	BankLogoURL string `json:"bank_logo_url,omitempty"`
	// 省份
	Province string `json:"province,omitempty"`
	// 城市
	City string `json:"city,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionBankCardQuery when eager-loading is set.
	Edges        PromotionBankCardEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionBankCardEdges holds the relations/edges for other nodes in the graph.
type PromotionBankCardEdges struct {
	// Member holds the value of the member edge.
	Member *PromotionMember `json:"member,omitempty"`
	// Withdrawals holds the value of the withdrawals edge.
	Withdrawals []*PromotionWithdrawal `json:"withdrawals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionBankCardEdges) MemberOrErr() (*PromotionMember, error) {
	if e.Member != nil {
		return e.Member, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: promotionmember.Label}
	}
	return nil, &NotLoadedError{edge: "member"}
}

// WithdrawalsOrErr returns the Withdrawals value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionBankCardEdges) WithdrawalsOrErr() ([]*PromotionWithdrawal, error) {
	if e.loadedTypes[1] {
		return e.Withdrawals, nil
	}
	return nil, &NotLoadedError{edge: "withdrawals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionBankCard) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionbankcard.FieldCreator, promotionbankcard.FieldLastModifier:
			values[i] = new([]byte)
		case promotionbankcard.FieldIsDefault:
			values[i] = new(sql.NullBool)
		case promotionbankcard.FieldID, promotionbankcard.FieldMemberID:
			values[i] = new(sql.NullInt64)
		case promotionbankcard.FieldRemark, promotionbankcard.FieldCardNo, promotionbankcard.FieldBank, promotionbankcard.FieldBankLogoURL, promotionbankcard.FieldProvince, promotionbankcard.FieldCity:
			values[i] = new(sql.NullString)
		case promotionbankcard.FieldCreatedAt, promotionbankcard.FieldUpdatedAt, promotionbankcard.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionBankCard fields.
func (pbc *PromotionBankCard) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionbankcard.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pbc.ID = uint64(value.Int64)
		case promotionbankcard.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pbc.CreatedAt = value.Time
			}
		case promotionbankcard.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pbc.UpdatedAt = value.Time
			}
		case promotionbankcard.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pbc.DeletedAt = new(time.Time)
				*pbc.DeletedAt = value.Time
			}
		case promotionbankcard.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pbc.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotionbankcard.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pbc.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotionbankcard.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pbc.Remark = value.String
			}
		case promotionbankcard.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				pbc.MemberID = uint64(value.Int64)
			}
		case promotionbankcard.FieldCardNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field card_no", values[i])
			} else if value.Valid {
				pbc.CardNo = value.String
			}
		case promotionbankcard.FieldBank:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank", values[i])
			} else if value.Valid {
				pbc.Bank = value.String
			}
		case promotionbankcard.FieldIsDefault:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				pbc.IsDefault = value.Bool
			}
		case promotionbankcard.FieldBankLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bank_logo_url", values[i])
			} else if value.Valid {
				pbc.BankLogoURL = value.String
			}
		case promotionbankcard.FieldProvince:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field province", values[i])
			} else if value.Valid {
				pbc.Province = value.String
			}
		case promotionbankcard.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				pbc.City = value.String
			}
		default:
			pbc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionBankCard.
// This includes values selected through modifiers, order, etc.
func (pbc *PromotionBankCard) Value(name string) (ent.Value, error) {
	return pbc.selectValues.Get(name)
}

// QueryMember queries the "member" edge of the PromotionBankCard entity.
func (pbc *PromotionBankCard) QueryMember() *PromotionMemberQuery {
	return NewPromotionBankCardClient(pbc.config).QueryMember(pbc)
}

// QueryWithdrawals queries the "withdrawals" edge of the PromotionBankCard entity.
func (pbc *PromotionBankCard) QueryWithdrawals() *PromotionWithdrawalQuery {
	return NewPromotionBankCardClient(pbc.config).QueryWithdrawals(pbc)
}

// Update returns a builder for updating this PromotionBankCard.
// Note that you need to call PromotionBankCard.Unwrap() before calling this method if this PromotionBankCard
// was returned from a transaction, and the transaction was committed or rolled back.
func (pbc *PromotionBankCard) Update() *PromotionBankCardUpdateOne {
	return NewPromotionBankCardClient(pbc.config).UpdateOne(pbc)
}

// Unwrap unwraps the PromotionBankCard entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pbc *PromotionBankCard) Unwrap() *PromotionBankCard {
	_tx, ok := pbc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionBankCard is not a transactional entity")
	}
	pbc.config.driver = _tx.drv
	return pbc
}

// String implements the fmt.Stringer.
func (pbc *PromotionBankCard) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionBankCard(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pbc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pbc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pbc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pbc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pbc.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pbc.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pbc.Remark)
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", pbc.MemberID))
	builder.WriteString(", ")
	builder.WriteString("card_no=")
	builder.WriteString(pbc.CardNo)
	builder.WriteString(", ")
	builder.WriteString("bank=")
	builder.WriteString(pbc.Bank)
	builder.WriteString(", ")
	builder.WriteString("is_default=")
	builder.WriteString(fmt.Sprintf("%v", pbc.IsDefault))
	builder.WriteString(", ")
	builder.WriteString("bank_logo_url=")
	builder.WriteString(pbc.BankLogoURL)
	builder.WriteString(", ")
	builder.WriteString("province=")
	builder.WriteString(pbc.Province)
	builder.WriteString(", ")
	builder.WriteString("city=")
	builder.WriteString(pbc.City)
	builder.WriteByte(')')
	return builder.String()
}

// PromotionBankCards is a parsable slice of PromotionBankCard.
type PromotionBankCards []*PromotionBankCard
