// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenance"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
)

// AssetMaintenance is the model entity for the AssetMaintenance schema.
type AssetMaintenance struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 电柜ID
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// MaintainerID holds the value of the "maintainer_id" field.
	MaintainerID *uint64 `json:"maintainer_id,omitempty"`
	// 原因
	Reason string `json:"reason,omitempty"`
	// 内容
	Content string `json:"content,omitempty"`
	// 维修状态 1:维护中 2:已维修 3:维修失败 4:已取消 5:暂停维护
	Status uint8 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetMaintenanceQuery when eager-loading is set.
	Edges        AssetMaintenanceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetMaintenanceEdges holds the relations/edges for other nodes in the graph.
type AssetMaintenanceEdges struct {
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// Maintainer holds the value of the maintainer edge.
	Maintainer *Maintainer `json:"maintainer,omitempty"`
	// MaintenanceDetails holds the value of the maintenance_details edge.
	MaintenanceDetails []*AssetMaintenanceDetails `json:"maintenance_details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetMaintenanceEdges) CabinetOrErr() (*Cabinet, error) {
	if e.Cabinet != nil {
		return e.Cabinet, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: cabinet.Label}
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// MaintainerOrErr returns the Maintainer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetMaintenanceEdges) MaintainerOrErr() (*Maintainer, error) {
	if e.Maintainer != nil {
		return e.Maintainer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: maintainer.Label}
	}
	return nil, &NotLoadedError{edge: "maintainer"}
}

// MaintenanceDetailsOrErr returns the MaintenanceDetails value or an error if the edge
// was not loaded in eager-loading.
func (e AssetMaintenanceEdges) MaintenanceDetailsOrErr() ([]*AssetMaintenanceDetails, error) {
	if e.loadedTypes[2] {
		return e.MaintenanceDetails, nil
	}
	return nil, &NotLoadedError{edge: "maintenance_details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetMaintenance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetmaintenance.FieldCreator, assetmaintenance.FieldLastModifier:
			values[i] = new([]byte)
		case assetmaintenance.FieldID, assetmaintenance.FieldCabinetID, assetmaintenance.FieldMaintainerID, assetmaintenance.FieldStatus:
			values[i] = new(sql.NullInt64)
		case assetmaintenance.FieldRemark, assetmaintenance.FieldReason, assetmaintenance.FieldContent:
			values[i] = new(sql.NullString)
		case assetmaintenance.FieldCreatedAt, assetmaintenance.FieldUpdatedAt, assetmaintenance.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetMaintenance fields.
func (am *AssetMaintenance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetmaintenance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = uint64(value.Int64)
		case assetmaintenance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				am.CreatedAt = value.Time
			}
		case assetmaintenance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				am.UpdatedAt = value.Time
			}
		case assetmaintenance.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				am.DeletedAt = new(time.Time)
				*am.DeletedAt = value.Time
			}
		case assetmaintenance.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &am.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case assetmaintenance.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &am.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case assetmaintenance.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				am.Remark = value.String
			}
		case assetmaintenance.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				am.CabinetID = new(uint64)
				*am.CabinetID = uint64(value.Int64)
			}
		case assetmaintenance.FieldMaintainerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintainer_id", values[i])
			} else if value.Valid {
				am.MaintainerID = new(uint64)
				*am.MaintainerID = uint64(value.Int64)
			}
		case assetmaintenance.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				am.Reason = value.String
			}
		case assetmaintenance.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				am.Content = value.String
			}
		case assetmaintenance.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				am.Status = uint8(value.Int64)
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetMaintenance.
// This includes values selected through modifiers, order, etc.
func (am *AssetMaintenance) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// QueryCabinet queries the "cabinet" edge of the AssetMaintenance entity.
func (am *AssetMaintenance) QueryCabinet() *CabinetQuery {
	return NewAssetMaintenanceClient(am.config).QueryCabinet(am)
}

// QueryMaintainer queries the "maintainer" edge of the AssetMaintenance entity.
func (am *AssetMaintenance) QueryMaintainer() *MaintainerQuery {
	return NewAssetMaintenanceClient(am.config).QueryMaintainer(am)
}

// QueryMaintenanceDetails queries the "maintenance_details" edge of the AssetMaintenance entity.
func (am *AssetMaintenance) QueryMaintenanceDetails() *AssetMaintenanceDetailsQuery {
	return NewAssetMaintenanceClient(am.config).QueryMaintenanceDetails(am)
}

// Update returns a builder for updating this AssetMaintenance.
// Note that you need to call AssetMaintenance.Unwrap() before calling this method if this AssetMaintenance
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AssetMaintenance) Update() *AssetMaintenanceUpdateOne {
	return NewAssetMaintenanceClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AssetMaintenance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AssetMaintenance) Unwrap() *AssetMaintenance {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetMaintenance is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AssetMaintenance) String() string {
	var builder strings.Builder
	builder.WriteString("AssetMaintenance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("created_at=")
	builder.WriteString(am.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(am.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := am.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", am.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", am.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(am.Remark)
	builder.WriteString(", ")
	if v := am.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := am.MaintainerID; v != nil {
		builder.WriteString("maintainer_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(am.Reason)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(am.Content)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", am.Status))
	builder.WriteByte(')')
	return builder.String()
}

// AssetMaintenances is a parsable slice of AssetMaintenance.
type AssetMaintenances []*AssetMaintenance
