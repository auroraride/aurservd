// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetRiderID sets the "rider_id" field.
func (tu *TaskUpdate) SetRiderID(u uint64) *TaskUpdate {
	tu.mutation.SetRiderID(u)
	return tu
}

// SetExchangeID sets the "exchange_id" field.
func (tu *TaskUpdate) SetExchangeID(u uint64) *TaskUpdate {
	tu.mutation.ResetExchangeID()
	tu.mutation.SetExchangeID(u)
	return tu
}

// SetNillableExchangeID sets the "exchange_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExchangeID(u *uint64) *TaskUpdate {
	if u != nil {
		tu.SetExchangeID(*u)
	}
	return tu
}

// AddExchangeID adds u to the "exchange_id" field.
func (tu *TaskUpdate) AddExchangeID(u int64) *TaskUpdate {
	tu.mutation.AddExchangeID(u)
	return tu
}

// ClearExchangeID clears the value of the "exchange_id" field.
func (tu *TaskUpdate) ClearExchangeID() *TaskUpdate {
	tu.mutation.ClearExchangeID()
	return tu
}

// SetCabinetID sets the "cabinet_id" field.
func (tu *TaskUpdate) SetCabinetID(u uint64) *TaskUpdate {
	tu.mutation.ResetCabinetID()
	tu.mutation.SetCabinetID(u)
	return tu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCabinetID(u *uint64) *TaskUpdate {
	if u != nil {
		tu.SetCabinetID(*u)
	}
	return tu
}

// AddCabinetID adds u to the "cabinet_id" field.
func (tu *TaskUpdate) AddCabinetID(u int64) *TaskUpdate {
	tu.mutation.AddCabinetID(u)
	return tu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (tu *TaskUpdate) ClearCabinetID() *TaskUpdate {
	tu.mutation.ClearCabinetID()
	return tu
}

// SetSerial sets the "serial" field.
func (tu *TaskUpdate) SetSerial(s string) *TaskUpdate {
	tu.mutation.SetSerial(s)
	return tu
}

// SetJob sets the "job" field.
func (tu *TaskUpdate) SetJob(mj model.TaskJob) *TaskUpdate {
	tu.mutation.SetJob(mj)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(ms model.TaskStatus) *TaskUpdate {
	tu.mutation.SetStatus(ms)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(ms *model.TaskStatus) *TaskUpdate {
	if ms != nil {
		tu.SetStatus(*ms)
	}
	return tu
}

// SetStartAt sets the "start_at" field.
func (tu *TaskUpdate) SetStartAt(t time.Time) *TaskUpdate {
	tu.mutation.SetStartAt(t)
	return tu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStartAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetStartAt(*t)
	}
	return tu
}

// ClearStartAt clears the value of the "start_at" field.
func (tu *TaskUpdate) ClearStartAt() *TaskUpdate {
	tu.mutation.ClearStartAt()
	return tu
}

// SetStopAt sets the "stop_at" field.
func (tu *TaskUpdate) SetStopAt(t time.Time) *TaskUpdate {
	tu.mutation.SetStopAt(t)
	return tu
}

// SetNillableStopAt sets the "stop_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStopAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetStopAt(*t)
	}
	return tu
}

// ClearStopAt clears the value of the "stop_at" field.
func (tu *TaskUpdate) ClearStopAt() *TaskUpdate {
	tu.mutation.ClearStopAt()
	return tu
}

// SetMessage sets the "message" field.
func (tu *TaskUpdate) SetMessage(s string) *TaskUpdate {
	tu.mutation.SetMessage(s)
	return tu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableMessage(s *string) *TaskUpdate {
	if s != nil {
		tu.SetMessage(*s)
	}
	return tu
}

// ClearMessage clears the value of the "message" field.
func (tu *TaskUpdate) ClearMessage() *TaskUpdate {
	tu.mutation.ClearMessage()
	return tu
}

// SetExchange sets the "exchange" field.
func (tu *TaskUpdate) SetExchange(mti *model.ExchangeTaskInfo) *TaskUpdate {
	tu.mutation.SetExchange(mti)
	return tu
}

// ClearExchange clears the value of the "exchange" field.
func (tu *TaskUpdate) ClearExchange() *TaskUpdate {
	tu.mutation.ClearExchange()
	return tu
}

// SetBusinessBinInfo sets the "business_bin_info" field.
func (tu *TaskUpdate) SetBusinessBinInfo(mi *model.BinInfo) *TaskUpdate {
	tu.mutation.SetBusinessBinInfo(mi)
	return tu
}

// ClearBusinessBinInfo clears the value of the "business_bin_info" field.
func (tu *TaskUpdate) ClearBusinessBinInfo() *TaskUpdate {
	tu.mutation.ClearBusinessBinInfo()
	return tu
}

// SetCabinet sets the "cabinet" field.
func (tu *TaskUpdate) SetCabinet(mtc *model.ExchangeTaskCabinet) *TaskUpdate {
	tu.mutation.SetCabinet(mtc)
	return tu
}

// SetRider sets the "rider" edge to the Rider entity.
func (tu *TaskUpdate) SetRider(r *Rider) *TaskUpdate {
	return tu.SetRiderID(r.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (tu *TaskUpdate) ClearRider() *TaskUpdate {
	tu.mutation.ClearRider()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks[int, TaskMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Job(); ok {
		if err := task.JobValidator(v); err != nil {
			return &ValidationError{Name: "job", err: fmt.Errorf(`ent: validator failed for field "Task.job": %w`, err)}
		}
	}
	if _, ok := tu.mutation.RiderID(); tu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.ExchangeID(); ok {
		_spec.SetField(task.FieldExchangeID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedExchangeID(); ok {
		_spec.AddField(task.FieldExchangeID, field.TypeUint64, value)
	}
	if tu.mutation.ExchangeIDCleared() {
		_spec.ClearField(task.FieldExchangeID, field.TypeUint64)
	}
	if value, ok := tu.mutation.CabinetID(); ok {
		_spec.SetField(task.FieldCabinetID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedCabinetID(); ok {
		_spec.AddField(task.FieldCabinetID, field.TypeUint64, value)
	}
	if tu.mutation.CabinetIDCleared() {
		_spec.ClearField(task.FieldCabinetID, field.TypeUint64)
	}
	if value, ok := tu.mutation.Serial(); ok {
		_spec.SetField(task.FieldSerial, field.TypeString, value)
	}
	if value, ok := tu.mutation.Job(); ok {
		_spec.SetField(task.FieldJob, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeOther, value)
	}
	if value, ok := tu.mutation.StartAt(); ok {
		_spec.SetField(task.FieldStartAt, field.TypeTime, value)
	}
	if tu.mutation.StartAtCleared() {
		_spec.ClearField(task.FieldStartAt, field.TypeTime)
	}
	if value, ok := tu.mutation.StopAt(); ok {
		_spec.SetField(task.FieldStopAt, field.TypeTime, value)
	}
	if tu.mutation.StopAtCleared() {
		_spec.ClearField(task.FieldStopAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Message(); ok {
		_spec.SetField(task.FieldMessage, field.TypeString, value)
	}
	if tu.mutation.MessageCleared() {
		_spec.ClearField(task.FieldMessage, field.TypeString)
	}
	if value, ok := tu.mutation.Exchange(); ok {
		_spec.SetField(task.FieldExchange, field.TypeJSON, value)
	}
	if tu.mutation.ExchangeCleared() {
		_spec.ClearField(task.FieldExchange, field.TypeJSON)
	}
	if value, ok := tu.mutation.BusinessBinInfo(); ok {
		_spec.SetField(task.FieldBusinessBinInfo, field.TypeJSON, value)
	}
	if tu.mutation.BusinessBinInfoCleared() {
		_spec.ClearField(task.FieldBusinessBinInfo, field.TypeJSON)
	}
	if value, ok := tu.mutation.Cabinet(); ok {
		_spec.SetField(task.FieldCabinet, field.TypeJSON, value)
	}
	if tu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.RiderTable,
			Columns: []string{task.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.RiderTable,
			Columns: []string{task.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetRiderID sets the "rider_id" field.
func (tuo *TaskUpdateOne) SetRiderID(u uint64) *TaskUpdateOne {
	tuo.mutation.SetRiderID(u)
	return tuo
}

// SetExchangeID sets the "exchange_id" field.
func (tuo *TaskUpdateOne) SetExchangeID(u uint64) *TaskUpdateOne {
	tuo.mutation.ResetExchangeID()
	tuo.mutation.SetExchangeID(u)
	return tuo
}

// SetNillableExchangeID sets the "exchange_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExchangeID(u *uint64) *TaskUpdateOne {
	if u != nil {
		tuo.SetExchangeID(*u)
	}
	return tuo
}

// AddExchangeID adds u to the "exchange_id" field.
func (tuo *TaskUpdateOne) AddExchangeID(u int64) *TaskUpdateOne {
	tuo.mutation.AddExchangeID(u)
	return tuo
}

// ClearExchangeID clears the value of the "exchange_id" field.
func (tuo *TaskUpdateOne) ClearExchangeID() *TaskUpdateOne {
	tuo.mutation.ClearExchangeID()
	return tuo
}

// SetCabinetID sets the "cabinet_id" field.
func (tuo *TaskUpdateOne) SetCabinetID(u uint64) *TaskUpdateOne {
	tuo.mutation.ResetCabinetID()
	tuo.mutation.SetCabinetID(u)
	return tuo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCabinetID(u *uint64) *TaskUpdateOne {
	if u != nil {
		tuo.SetCabinetID(*u)
	}
	return tuo
}

// AddCabinetID adds u to the "cabinet_id" field.
func (tuo *TaskUpdateOne) AddCabinetID(u int64) *TaskUpdateOne {
	tuo.mutation.AddCabinetID(u)
	return tuo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (tuo *TaskUpdateOne) ClearCabinetID() *TaskUpdateOne {
	tuo.mutation.ClearCabinetID()
	return tuo
}

// SetSerial sets the "serial" field.
func (tuo *TaskUpdateOne) SetSerial(s string) *TaskUpdateOne {
	tuo.mutation.SetSerial(s)
	return tuo
}

// SetJob sets the "job" field.
func (tuo *TaskUpdateOne) SetJob(mj model.TaskJob) *TaskUpdateOne {
	tuo.mutation.SetJob(mj)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(ms model.TaskStatus) *TaskUpdateOne {
	tuo.mutation.SetStatus(ms)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(ms *model.TaskStatus) *TaskUpdateOne {
	if ms != nil {
		tuo.SetStatus(*ms)
	}
	return tuo
}

// SetStartAt sets the "start_at" field.
func (tuo *TaskUpdateOne) SetStartAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetStartAt(t)
	return tuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStartAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetStartAt(*t)
	}
	return tuo
}

// ClearStartAt clears the value of the "start_at" field.
func (tuo *TaskUpdateOne) ClearStartAt() *TaskUpdateOne {
	tuo.mutation.ClearStartAt()
	return tuo
}

// SetStopAt sets the "stop_at" field.
func (tuo *TaskUpdateOne) SetStopAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetStopAt(t)
	return tuo
}

// SetNillableStopAt sets the "stop_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStopAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetStopAt(*t)
	}
	return tuo
}

// ClearStopAt clears the value of the "stop_at" field.
func (tuo *TaskUpdateOne) ClearStopAt() *TaskUpdateOne {
	tuo.mutation.ClearStopAt()
	return tuo
}

// SetMessage sets the "message" field.
func (tuo *TaskUpdateOne) SetMessage(s string) *TaskUpdateOne {
	tuo.mutation.SetMessage(s)
	return tuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMessage(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetMessage(*s)
	}
	return tuo
}

// ClearMessage clears the value of the "message" field.
func (tuo *TaskUpdateOne) ClearMessage() *TaskUpdateOne {
	tuo.mutation.ClearMessage()
	return tuo
}

// SetExchange sets the "exchange" field.
func (tuo *TaskUpdateOne) SetExchange(mti *model.ExchangeTaskInfo) *TaskUpdateOne {
	tuo.mutation.SetExchange(mti)
	return tuo
}

// ClearExchange clears the value of the "exchange" field.
func (tuo *TaskUpdateOne) ClearExchange() *TaskUpdateOne {
	tuo.mutation.ClearExchange()
	return tuo
}

// SetBusinessBinInfo sets the "business_bin_info" field.
func (tuo *TaskUpdateOne) SetBusinessBinInfo(mi *model.BinInfo) *TaskUpdateOne {
	tuo.mutation.SetBusinessBinInfo(mi)
	return tuo
}

// ClearBusinessBinInfo clears the value of the "business_bin_info" field.
func (tuo *TaskUpdateOne) ClearBusinessBinInfo() *TaskUpdateOne {
	tuo.mutation.ClearBusinessBinInfo()
	return tuo
}

// SetCabinet sets the "cabinet" field.
func (tuo *TaskUpdateOne) SetCabinet(mtc *model.ExchangeTaskCabinet) *TaskUpdateOne {
	tuo.mutation.SetCabinet(mtc)
	return tuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (tuo *TaskUpdateOne) SetRider(r *Rider) *TaskUpdateOne {
	return tuo.SetRiderID(r.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (tuo *TaskUpdateOne) ClearRider() *TaskUpdateOne {
	tuo.mutation.ClearRider()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	tuo.defaults()
	return withHooks[*Task, TaskMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Job(); ok {
		if err := task.JobValidator(v); err != nil {
			return &ValidationError{Name: "job", err: fmt.Errorf(`ent: validator failed for field "Task.job": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.RiderID(); tuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: task.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.ExchangeID(); ok {
		_spec.SetField(task.FieldExchangeID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedExchangeID(); ok {
		_spec.AddField(task.FieldExchangeID, field.TypeUint64, value)
	}
	if tuo.mutation.ExchangeIDCleared() {
		_spec.ClearField(task.FieldExchangeID, field.TypeUint64)
	}
	if value, ok := tuo.mutation.CabinetID(); ok {
		_spec.SetField(task.FieldCabinetID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedCabinetID(); ok {
		_spec.AddField(task.FieldCabinetID, field.TypeUint64, value)
	}
	if tuo.mutation.CabinetIDCleared() {
		_spec.ClearField(task.FieldCabinetID, field.TypeUint64)
	}
	if value, ok := tuo.mutation.Serial(); ok {
		_spec.SetField(task.FieldSerial, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Job(); ok {
		_spec.SetField(task.FieldJob, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeOther, value)
	}
	if value, ok := tuo.mutation.StartAt(); ok {
		_spec.SetField(task.FieldStartAt, field.TypeTime, value)
	}
	if tuo.mutation.StartAtCleared() {
		_spec.ClearField(task.FieldStartAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.StopAt(); ok {
		_spec.SetField(task.FieldStopAt, field.TypeTime, value)
	}
	if tuo.mutation.StopAtCleared() {
		_spec.ClearField(task.FieldStopAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Message(); ok {
		_spec.SetField(task.FieldMessage, field.TypeString, value)
	}
	if tuo.mutation.MessageCleared() {
		_spec.ClearField(task.FieldMessage, field.TypeString)
	}
	if value, ok := tuo.mutation.Exchange(); ok {
		_spec.SetField(task.FieldExchange, field.TypeJSON, value)
	}
	if tuo.mutation.ExchangeCleared() {
		_spec.ClearField(task.FieldExchange, field.TypeJSON)
	}
	if value, ok := tuo.mutation.BusinessBinInfo(); ok {
		_spec.SetField(task.FieldBusinessBinInfo, field.TypeJSON, value)
	}
	if tuo.mutation.BusinessBinInfoCleared() {
		_spec.ClearField(task.FieldBusinessBinInfo, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Cabinet(); ok {
		_spec.SetField(task.FieldCabinet, field.TypeJSON, value)
	}
	if tuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.RiderTable,
			Columns: []string{task.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.RiderTable,
			Columns: []string{task.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
