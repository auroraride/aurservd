// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// ExchangeUpdate is the builder for updating Exchange entities.
type ExchangeUpdate struct {
	config
	hooks     []Hook
	mutation  *ExchangeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ExchangeUpdate builder.
func (eu *ExchangeUpdate) Where(ps ...predicate.Exchange) *ExchangeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExchangeUpdate) SetUpdatedAt(t time.Time) *ExchangeUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *ExchangeUpdate) SetDeletedAt(t time.Time) *ExchangeUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableDeletedAt(t *time.Time) *ExchangeUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *ExchangeUpdate) ClearDeletedAt() *ExchangeUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetLastModifier sets the "last_modifier" field.
func (eu *ExchangeUpdate) SetLastModifier(m *model.Modifier) *ExchangeUpdate {
	eu.mutation.SetLastModifier(m)
	return eu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (eu *ExchangeUpdate) ClearLastModifier() *ExchangeUpdate {
	eu.mutation.ClearLastModifier()
	return eu
}

// SetRemark sets the "remark" field.
func (eu *ExchangeUpdate) SetRemark(s string) *ExchangeUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableRemark(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetRemark(*s)
	}
	return eu
}

// ClearRemark clears the value of the "remark" field.
func (eu *ExchangeUpdate) ClearRemark() *ExchangeUpdate {
	eu.mutation.ClearRemark()
	return eu
}

// SetSubscribeID sets the "subscribe_id" field.
func (eu *ExchangeUpdate) SetSubscribeID(u uint64) *ExchangeUpdate {
	eu.mutation.SetSubscribeID(u)
	return eu
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableSubscribeID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetSubscribeID(*u)
	}
	return eu
}

// SetCityID sets the "city_id" field.
func (eu *ExchangeUpdate) SetCityID(u uint64) *ExchangeUpdate {
	eu.mutation.SetCityID(u)
	return eu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableCityID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetCityID(*u)
	}
	return eu
}

// SetStoreID sets the "store_id" field.
func (eu *ExchangeUpdate) SetStoreID(u uint64) *ExchangeUpdate {
	eu.mutation.SetStoreID(u)
	return eu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableStoreID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetStoreID(*u)
	}
	return eu
}

// ClearStoreID clears the value of the "store_id" field.
func (eu *ExchangeUpdate) ClearStoreID() *ExchangeUpdate {
	eu.mutation.ClearStoreID()
	return eu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (eu *ExchangeUpdate) SetEnterpriseID(u uint64) *ExchangeUpdate {
	eu.mutation.SetEnterpriseID(u)
	return eu
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableEnterpriseID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetEnterpriseID(*u)
	}
	return eu
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (eu *ExchangeUpdate) ClearEnterpriseID() *ExchangeUpdate {
	eu.mutation.ClearEnterpriseID()
	return eu
}

// SetStationID sets the "station_id" field.
func (eu *ExchangeUpdate) SetStationID(u uint64) *ExchangeUpdate {
	eu.mutation.SetStationID(u)
	return eu
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableStationID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetStationID(*u)
	}
	return eu
}

// ClearStationID clears the value of the "station_id" field.
func (eu *ExchangeUpdate) ClearStationID() *ExchangeUpdate {
	eu.mutation.ClearStationID()
	return eu
}

// SetRiderID sets the "rider_id" field.
func (eu *ExchangeUpdate) SetRiderID(u uint64) *ExchangeUpdate {
	eu.mutation.SetRiderID(u)
	return eu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableRiderID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetRiderID(*u)
	}
	return eu
}

// SetEmployeeID sets the "employee_id" field.
func (eu *ExchangeUpdate) SetEmployeeID(u uint64) *ExchangeUpdate {
	eu.mutation.SetEmployeeID(u)
	return eu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableEmployeeID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetEmployeeID(*u)
	}
	return eu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (eu *ExchangeUpdate) ClearEmployeeID() *ExchangeUpdate {
	eu.mutation.ClearEmployeeID()
	return eu
}

// SetUUID sets the "uuid" field.
func (eu *ExchangeUpdate) SetUUID(s string) *ExchangeUpdate {
	eu.mutation.SetUUID(s)
	return eu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableUUID(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetUUID(*s)
	}
	return eu
}

// SetCabinetID sets the "cabinet_id" field.
func (eu *ExchangeUpdate) SetCabinetID(u uint64) *ExchangeUpdate {
	eu.mutation.SetCabinetID(u)
	return eu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableCabinetID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetCabinetID(*u)
	}
	return eu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (eu *ExchangeUpdate) ClearCabinetID() *ExchangeUpdate {
	eu.mutation.ClearCabinetID()
	return eu
}

// SetSuccess sets the "success" field.
func (eu *ExchangeUpdate) SetSuccess(b bool) *ExchangeUpdate {
	eu.mutation.SetSuccess(b)
	return eu
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableSuccess(b *bool) *ExchangeUpdate {
	if b != nil {
		eu.SetSuccess(*b)
	}
	return eu
}

// SetModel sets the "model" field.
func (eu *ExchangeUpdate) SetModel(s string) *ExchangeUpdate {
	eu.mutation.SetModel(s)
	return eu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableModel(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetModel(*s)
	}
	return eu
}

// SetAlternative sets the "alternative" field.
func (eu *ExchangeUpdate) SetAlternative(b bool) *ExchangeUpdate {
	eu.mutation.SetAlternative(b)
	return eu
}

// SetNillableAlternative sets the "alternative" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableAlternative(b *bool) *ExchangeUpdate {
	if b != nil {
		eu.SetAlternative(*b)
	}
	return eu
}

// SetStartAt sets the "start_at" field.
func (eu *ExchangeUpdate) SetStartAt(t time.Time) *ExchangeUpdate {
	eu.mutation.SetStartAt(t)
	return eu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableStartAt(t *time.Time) *ExchangeUpdate {
	if t != nil {
		eu.SetStartAt(*t)
	}
	return eu
}

// ClearStartAt clears the value of the "start_at" field.
func (eu *ExchangeUpdate) ClearStartAt() *ExchangeUpdate {
	eu.mutation.ClearStartAt()
	return eu
}

// SetFinishAt sets the "finish_at" field.
func (eu *ExchangeUpdate) SetFinishAt(t time.Time) *ExchangeUpdate {
	eu.mutation.SetFinishAt(t)
	return eu
}

// SetNillableFinishAt sets the "finish_at" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableFinishAt(t *time.Time) *ExchangeUpdate {
	if t != nil {
		eu.SetFinishAt(*t)
	}
	return eu
}

// ClearFinishAt clears the value of the "finish_at" field.
func (eu *ExchangeUpdate) ClearFinishAt() *ExchangeUpdate {
	eu.mutation.ClearFinishAt()
	return eu
}

// SetDuration sets the "duration" field.
func (eu *ExchangeUpdate) SetDuration(i int) *ExchangeUpdate {
	eu.mutation.ResetDuration()
	eu.mutation.SetDuration(i)
	return eu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableDuration(i *int) *ExchangeUpdate {
	if i != nil {
		eu.SetDuration(*i)
	}
	return eu
}

// AddDuration adds i to the "duration" field.
func (eu *ExchangeUpdate) AddDuration(i int) *ExchangeUpdate {
	eu.mutation.AddDuration(i)
	return eu
}

// ClearDuration clears the value of the "duration" field.
func (eu *ExchangeUpdate) ClearDuration() *ExchangeUpdate {
	eu.mutation.ClearDuration()
	return eu
}

// SetRiderBattery sets the "rider_battery" field.
func (eu *ExchangeUpdate) SetRiderBattery(s string) *ExchangeUpdate {
	eu.mutation.SetRiderBattery(s)
	return eu
}

// SetNillableRiderBattery sets the "rider_battery" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableRiderBattery(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetRiderBattery(*s)
	}
	return eu
}

// ClearRiderBattery clears the value of the "rider_battery" field.
func (eu *ExchangeUpdate) ClearRiderBattery() *ExchangeUpdate {
	eu.mutation.ClearRiderBattery()
	return eu
}

// SetPutinBattery sets the "putin_battery" field.
func (eu *ExchangeUpdate) SetPutinBattery(s string) *ExchangeUpdate {
	eu.mutation.SetPutinBattery(s)
	return eu
}

// SetNillablePutinBattery sets the "putin_battery" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillablePutinBattery(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetPutinBattery(*s)
	}
	return eu
}

// ClearPutinBattery clears the value of the "putin_battery" field.
func (eu *ExchangeUpdate) ClearPutinBattery() *ExchangeUpdate {
	eu.mutation.ClearPutinBattery()
	return eu
}

// SetPutoutBattery sets the "putout_battery" field.
func (eu *ExchangeUpdate) SetPutoutBattery(s string) *ExchangeUpdate {
	eu.mutation.SetPutoutBattery(s)
	return eu
}

// SetNillablePutoutBattery sets the "putout_battery" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillablePutoutBattery(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetPutoutBattery(*s)
	}
	return eu
}

// ClearPutoutBattery clears the value of the "putout_battery" field.
func (eu *ExchangeUpdate) ClearPutoutBattery() *ExchangeUpdate {
	eu.mutation.ClearPutoutBattery()
	return eu
}

// SetCabinetInfo sets the "cabinet_info" field.
func (eu *ExchangeUpdate) SetCabinetInfo(mci *model.ExchangeCabinetInfo) *ExchangeUpdate {
	eu.mutation.SetCabinetInfo(mci)
	return eu
}

// ClearCabinetInfo clears the value of the "cabinet_info" field.
func (eu *ExchangeUpdate) ClearCabinetInfo() *ExchangeUpdate {
	eu.mutation.ClearCabinetInfo()
	return eu
}

// SetEmpty sets the "empty" field.
func (eu *ExchangeUpdate) SetEmpty(mi *model.BinInfo) *ExchangeUpdate {
	eu.mutation.SetEmpty(mi)
	return eu
}

// ClearEmpty clears the value of the "empty" field.
func (eu *ExchangeUpdate) ClearEmpty() *ExchangeUpdate {
	eu.mutation.ClearEmpty()
	return eu
}

// SetFully sets the "fully" field.
func (eu *ExchangeUpdate) SetFully(mi *model.BinInfo) *ExchangeUpdate {
	eu.mutation.SetFully(mi)
	return eu
}

// ClearFully clears the value of the "fully" field.
func (eu *ExchangeUpdate) ClearFully() *ExchangeUpdate {
	eu.mutation.ClearFully()
	return eu
}

// SetSteps sets the "steps" field.
func (eu *ExchangeUpdate) SetSteps(msi []*model.ExchangeStepInfo) *ExchangeUpdate {
	eu.mutation.SetSteps(msi)
	return eu
}

// AppendSteps appends msi to the "steps" field.
func (eu *ExchangeUpdate) AppendSteps(msi []*model.ExchangeStepInfo) *ExchangeUpdate {
	eu.mutation.AppendSteps(msi)
	return eu
}

// ClearSteps clears the value of the "steps" field.
func (eu *ExchangeUpdate) ClearSteps() *ExchangeUpdate {
	eu.mutation.ClearSteps()
	return eu
}

// SetMessage sets the "message" field.
func (eu *ExchangeUpdate) SetMessage(s string) *ExchangeUpdate {
	eu.mutation.SetMessage(s)
	return eu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableMessage(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetMessage(*s)
	}
	return eu
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (eu *ExchangeUpdate) SetSubscribe(s *Subscribe) *ExchangeUpdate {
	return eu.SetSubscribeID(s.ID)
}

// SetCity sets the "city" edge to the City entity.
func (eu *ExchangeUpdate) SetCity(c *City) *ExchangeUpdate {
	return eu.SetCityID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (eu *ExchangeUpdate) SetStore(s *Store) *ExchangeUpdate {
	return eu.SetStoreID(s.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (eu *ExchangeUpdate) SetEnterprise(e *Enterprise) *ExchangeUpdate {
	return eu.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (eu *ExchangeUpdate) SetStation(e *EnterpriseStation) *ExchangeUpdate {
	return eu.SetStationID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (eu *ExchangeUpdate) SetCabinet(c *Cabinet) *ExchangeUpdate {
	return eu.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eu *ExchangeUpdate) SetRider(r *Rider) *ExchangeUpdate {
	return eu.SetRiderID(r.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (eu *ExchangeUpdate) SetEmployee(e *Employee) *ExchangeUpdate {
	return eu.SetEmployeeID(e.ID)
}

// Mutation returns the ExchangeMutation object of the builder.
func (eu *ExchangeUpdate) Mutation() *ExchangeMutation {
	return eu.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (eu *ExchangeUpdate) ClearSubscribe() *ExchangeUpdate {
	eu.mutation.ClearSubscribe()
	return eu
}

// ClearCity clears the "city" edge to the City entity.
func (eu *ExchangeUpdate) ClearCity() *ExchangeUpdate {
	eu.mutation.ClearCity()
	return eu
}

// ClearStore clears the "store" edge to the Store entity.
func (eu *ExchangeUpdate) ClearStore() *ExchangeUpdate {
	eu.mutation.ClearStore()
	return eu
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (eu *ExchangeUpdate) ClearEnterprise() *ExchangeUpdate {
	eu.mutation.ClearEnterprise()
	return eu
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (eu *ExchangeUpdate) ClearStation() *ExchangeUpdate {
	eu.mutation.ClearStation()
	return eu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (eu *ExchangeUpdate) ClearCabinet() *ExchangeUpdate {
	eu.mutation.ClearCabinet()
	return eu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (eu *ExchangeUpdate) ClearRider() *ExchangeUpdate {
	eu.mutation.ClearRider()
	return eu
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (eu *ExchangeUpdate) ClearEmployee() *ExchangeUpdate {
	eu.mutation.ClearEmployee()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExchangeUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExchangeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExchangeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExchangeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExchangeUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if exchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exchange.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExchangeUpdate) check() error {
	if _, ok := eu.mutation.SubscribeID(); eu.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.subscribe"`)
	}
	if _, ok := eu.mutation.CityID(); eu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.city"`)
	}
	if _, ok := eu.mutation.RiderID(); eu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *ExchangeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExchangeUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *ExchangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exchange.Table, exchange.Columns, sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(exchange.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(exchange.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(exchange.FieldDeletedAt, field.TypeTime)
	}
	if eu.mutation.CreatorCleared() {
		_spec.ClearField(exchange.FieldCreator, field.TypeJSON)
	}
	if value, ok := eu.mutation.LastModifier(); ok {
		_spec.SetField(exchange.FieldLastModifier, field.TypeJSON, value)
	}
	if eu.mutation.LastModifierCleared() {
		_spec.ClearField(exchange.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.SetField(exchange.FieldRemark, field.TypeString, value)
	}
	if eu.mutation.RemarkCleared() {
		_spec.ClearField(exchange.FieldRemark, field.TypeString)
	}
	if value, ok := eu.mutation.UUID(); ok {
		_spec.SetField(exchange.FieldUUID, field.TypeString, value)
	}
	if value, ok := eu.mutation.Success(); ok {
		_spec.SetField(exchange.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Model(); ok {
		_spec.SetField(exchange.FieldModel, field.TypeString, value)
	}
	if value, ok := eu.mutation.Alternative(); ok {
		_spec.SetField(exchange.FieldAlternative, field.TypeBool, value)
	}
	if value, ok := eu.mutation.StartAt(); ok {
		_spec.SetField(exchange.FieldStartAt, field.TypeTime, value)
	}
	if eu.mutation.StartAtCleared() {
		_spec.ClearField(exchange.FieldStartAt, field.TypeTime)
	}
	if value, ok := eu.mutation.FinishAt(); ok {
		_spec.SetField(exchange.FieldFinishAt, field.TypeTime, value)
	}
	if eu.mutation.FinishAtCleared() {
		_spec.ClearField(exchange.FieldFinishAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Duration(); ok {
		_spec.SetField(exchange.FieldDuration, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedDuration(); ok {
		_spec.AddField(exchange.FieldDuration, field.TypeInt, value)
	}
	if eu.mutation.DurationCleared() {
		_spec.ClearField(exchange.FieldDuration, field.TypeInt)
	}
	if value, ok := eu.mutation.RiderBattery(); ok {
		_spec.SetField(exchange.FieldRiderBattery, field.TypeString, value)
	}
	if eu.mutation.RiderBatteryCleared() {
		_spec.ClearField(exchange.FieldRiderBattery, field.TypeString)
	}
	if value, ok := eu.mutation.PutinBattery(); ok {
		_spec.SetField(exchange.FieldPutinBattery, field.TypeString, value)
	}
	if eu.mutation.PutinBatteryCleared() {
		_spec.ClearField(exchange.FieldPutinBattery, field.TypeString)
	}
	if value, ok := eu.mutation.PutoutBattery(); ok {
		_spec.SetField(exchange.FieldPutoutBattery, field.TypeString, value)
	}
	if eu.mutation.PutoutBatteryCleared() {
		_spec.ClearField(exchange.FieldPutoutBattery, field.TypeString)
	}
	if value, ok := eu.mutation.CabinetInfo(); ok {
		_spec.SetField(exchange.FieldCabinetInfo, field.TypeJSON, value)
	}
	if eu.mutation.CabinetInfoCleared() {
		_spec.ClearField(exchange.FieldCabinetInfo, field.TypeJSON)
	}
	if value, ok := eu.mutation.Empty(); ok {
		_spec.SetField(exchange.FieldEmpty, field.TypeJSON, value)
	}
	if eu.mutation.EmptyCleared() {
		_spec.ClearField(exchange.FieldEmpty, field.TypeJSON)
	}
	if value, ok := eu.mutation.Fully(); ok {
		_spec.SetField(exchange.FieldFully, field.TypeJSON, value)
	}
	if eu.mutation.FullyCleared() {
		_spec.ClearField(exchange.FieldFully, field.TypeJSON)
	}
	if value, ok := eu.mutation.Steps(); ok {
		_spec.SetField(exchange.FieldSteps, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedSteps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exchange.FieldSteps, value)
		})
	}
	if eu.mutation.StepsCleared() {
		_spec.ClearField(exchange.FieldSteps, field.TypeJSON)
	}
	if value, ok := eu.mutation.Message(); ok {
		_spec.SetField(exchange.FieldMessage, field.TypeString, value)
	}
	if eu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.SubscribeTable,
			Columns: []string{exchange.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.SubscribeTable,
			Columns: []string{exchange.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EnterpriseTable,
			Columns: []string{exchange.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EnterpriseTable,
			Columns: []string{exchange.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StationTable,
			Columns: []string{exchange.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StationTable,
			Columns: []string{exchange.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExchangeUpdateOne is the builder for updating a single Exchange entity.
type ExchangeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ExchangeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExchangeUpdateOne) SetUpdatedAt(t time.Time) *ExchangeUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *ExchangeUpdateOne) SetDeletedAt(t time.Time) *ExchangeUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableDeletedAt(t *time.Time) *ExchangeUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *ExchangeUpdateOne) ClearDeletedAt() *ExchangeUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetLastModifier sets the "last_modifier" field.
func (euo *ExchangeUpdateOne) SetLastModifier(m *model.Modifier) *ExchangeUpdateOne {
	euo.mutation.SetLastModifier(m)
	return euo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (euo *ExchangeUpdateOne) ClearLastModifier() *ExchangeUpdateOne {
	euo.mutation.ClearLastModifier()
	return euo
}

// SetRemark sets the "remark" field.
func (euo *ExchangeUpdateOne) SetRemark(s string) *ExchangeUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableRemark(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetRemark(*s)
	}
	return euo
}

// ClearRemark clears the value of the "remark" field.
func (euo *ExchangeUpdateOne) ClearRemark() *ExchangeUpdateOne {
	euo.mutation.ClearRemark()
	return euo
}

// SetSubscribeID sets the "subscribe_id" field.
func (euo *ExchangeUpdateOne) SetSubscribeID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetSubscribeID(u)
	return euo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableSubscribeID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetSubscribeID(*u)
	}
	return euo
}

// SetCityID sets the "city_id" field.
func (euo *ExchangeUpdateOne) SetCityID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetCityID(u)
	return euo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableCityID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetCityID(*u)
	}
	return euo
}

// SetStoreID sets the "store_id" field.
func (euo *ExchangeUpdateOne) SetStoreID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetStoreID(u)
	return euo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableStoreID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetStoreID(*u)
	}
	return euo
}

// ClearStoreID clears the value of the "store_id" field.
func (euo *ExchangeUpdateOne) ClearStoreID() *ExchangeUpdateOne {
	euo.mutation.ClearStoreID()
	return euo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (euo *ExchangeUpdateOne) SetEnterpriseID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetEnterpriseID(u)
	return euo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableEnterpriseID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetEnterpriseID(*u)
	}
	return euo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (euo *ExchangeUpdateOne) ClearEnterpriseID() *ExchangeUpdateOne {
	euo.mutation.ClearEnterpriseID()
	return euo
}

// SetStationID sets the "station_id" field.
func (euo *ExchangeUpdateOne) SetStationID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetStationID(u)
	return euo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableStationID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetStationID(*u)
	}
	return euo
}

// ClearStationID clears the value of the "station_id" field.
func (euo *ExchangeUpdateOne) ClearStationID() *ExchangeUpdateOne {
	euo.mutation.ClearStationID()
	return euo
}

// SetRiderID sets the "rider_id" field.
func (euo *ExchangeUpdateOne) SetRiderID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetRiderID(u)
	return euo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableRiderID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetRiderID(*u)
	}
	return euo
}

// SetEmployeeID sets the "employee_id" field.
func (euo *ExchangeUpdateOne) SetEmployeeID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetEmployeeID(u)
	return euo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableEmployeeID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetEmployeeID(*u)
	}
	return euo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (euo *ExchangeUpdateOne) ClearEmployeeID() *ExchangeUpdateOne {
	euo.mutation.ClearEmployeeID()
	return euo
}

// SetUUID sets the "uuid" field.
func (euo *ExchangeUpdateOne) SetUUID(s string) *ExchangeUpdateOne {
	euo.mutation.SetUUID(s)
	return euo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableUUID(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetUUID(*s)
	}
	return euo
}

// SetCabinetID sets the "cabinet_id" field.
func (euo *ExchangeUpdateOne) SetCabinetID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetCabinetID(u)
	return euo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableCabinetID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetCabinetID(*u)
	}
	return euo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (euo *ExchangeUpdateOne) ClearCabinetID() *ExchangeUpdateOne {
	euo.mutation.ClearCabinetID()
	return euo
}

// SetSuccess sets the "success" field.
func (euo *ExchangeUpdateOne) SetSuccess(b bool) *ExchangeUpdateOne {
	euo.mutation.SetSuccess(b)
	return euo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableSuccess(b *bool) *ExchangeUpdateOne {
	if b != nil {
		euo.SetSuccess(*b)
	}
	return euo
}

// SetModel sets the "model" field.
func (euo *ExchangeUpdateOne) SetModel(s string) *ExchangeUpdateOne {
	euo.mutation.SetModel(s)
	return euo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableModel(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetModel(*s)
	}
	return euo
}

// SetAlternative sets the "alternative" field.
func (euo *ExchangeUpdateOne) SetAlternative(b bool) *ExchangeUpdateOne {
	euo.mutation.SetAlternative(b)
	return euo
}

// SetNillableAlternative sets the "alternative" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableAlternative(b *bool) *ExchangeUpdateOne {
	if b != nil {
		euo.SetAlternative(*b)
	}
	return euo
}

// SetStartAt sets the "start_at" field.
func (euo *ExchangeUpdateOne) SetStartAt(t time.Time) *ExchangeUpdateOne {
	euo.mutation.SetStartAt(t)
	return euo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableStartAt(t *time.Time) *ExchangeUpdateOne {
	if t != nil {
		euo.SetStartAt(*t)
	}
	return euo
}

// ClearStartAt clears the value of the "start_at" field.
func (euo *ExchangeUpdateOne) ClearStartAt() *ExchangeUpdateOne {
	euo.mutation.ClearStartAt()
	return euo
}

// SetFinishAt sets the "finish_at" field.
func (euo *ExchangeUpdateOne) SetFinishAt(t time.Time) *ExchangeUpdateOne {
	euo.mutation.SetFinishAt(t)
	return euo
}

// SetNillableFinishAt sets the "finish_at" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableFinishAt(t *time.Time) *ExchangeUpdateOne {
	if t != nil {
		euo.SetFinishAt(*t)
	}
	return euo
}

// ClearFinishAt clears the value of the "finish_at" field.
func (euo *ExchangeUpdateOne) ClearFinishAt() *ExchangeUpdateOne {
	euo.mutation.ClearFinishAt()
	return euo
}

// SetDuration sets the "duration" field.
func (euo *ExchangeUpdateOne) SetDuration(i int) *ExchangeUpdateOne {
	euo.mutation.ResetDuration()
	euo.mutation.SetDuration(i)
	return euo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableDuration(i *int) *ExchangeUpdateOne {
	if i != nil {
		euo.SetDuration(*i)
	}
	return euo
}

// AddDuration adds i to the "duration" field.
func (euo *ExchangeUpdateOne) AddDuration(i int) *ExchangeUpdateOne {
	euo.mutation.AddDuration(i)
	return euo
}

// ClearDuration clears the value of the "duration" field.
func (euo *ExchangeUpdateOne) ClearDuration() *ExchangeUpdateOne {
	euo.mutation.ClearDuration()
	return euo
}

// SetRiderBattery sets the "rider_battery" field.
func (euo *ExchangeUpdateOne) SetRiderBattery(s string) *ExchangeUpdateOne {
	euo.mutation.SetRiderBattery(s)
	return euo
}

// SetNillableRiderBattery sets the "rider_battery" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableRiderBattery(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetRiderBattery(*s)
	}
	return euo
}

// ClearRiderBattery clears the value of the "rider_battery" field.
func (euo *ExchangeUpdateOne) ClearRiderBattery() *ExchangeUpdateOne {
	euo.mutation.ClearRiderBattery()
	return euo
}

// SetPutinBattery sets the "putin_battery" field.
func (euo *ExchangeUpdateOne) SetPutinBattery(s string) *ExchangeUpdateOne {
	euo.mutation.SetPutinBattery(s)
	return euo
}

// SetNillablePutinBattery sets the "putin_battery" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillablePutinBattery(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetPutinBattery(*s)
	}
	return euo
}

// ClearPutinBattery clears the value of the "putin_battery" field.
func (euo *ExchangeUpdateOne) ClearPutinBattery() *ExchangeUpdateOne {
	euo.mutation.ClearPutinBattery()
	return euo
}

// SetPutoutBattery sets the "putout_battery" field.
func (euo *ExchangeUpdateOne) SetPutoutBattery(s string) *ExchangeUpdateOne {
	euo.mutation.SetPutoutBattery(s)
	return euo
}

// SetNillablePutoutBattery sets the "putout_battery" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillablePutoutBattery(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetPutoutBattery(*s)
	}
	return euo
}

// ClearPutoutBattery clears the value of the "putout_battery" field.
func (euo *ExchangeUpdateOne) ClearPutoutBattery() *ExchangeUpdateOne {
	euo.mutation.ClearPutoutBattery()
	return euo
}

// SetCabinetInfo sets the "cabinet_info" field.
func (euo *ExchangeUpdateOne) SetCabinetInfo(mci *model.ExchangeCabinetInfo) *ExchangeUpdateOne {
	euo.mutation.SetCabinetInfo(mci)
	return euo
}

// ClearCabinetInfo clears the value of the "cabinet_info" field.
func (euo *ExchangeUpdateOne) ClearCabinetInfo() *ExchangeUpdateOne {
	euo.mutation.ClearCabinetInfo()
	return euo
}

// SetEmpty sets the "empty" field.
func (euo *ExchangeUpdateOne) SetEmpty(mi *model.BinInfo) *ExchangeUpdateOne {
	euo.mutation.SetEmpty(mi)
	return euo
}

// ClearEmpty clears the value of the "empty" field.
func (euo *ExchangeUpdateOne) ClearEmpty() *ExchangeUpdateOne {
	euo.mutation.ClearEmpty()
	return euo
}

// SetFully sets the "fully" field.
func (euo *ExchangeUpdateOne) SetFully(mi *model.BinInfo) *ExchangeUpdateOne {
	euo.mutation.SetFully(mi)
	return euo
}

// ClearFully clears the value of the "fully" field.
func (euo *ExchangeUpdateOne) ClearFully() *ExchangeUpdateOne {
	euo.mutation.ClearFully()
	return euo
}

// SetSteps sets the "steps" field.
func (euo *ExchangeUpdateOne) SetSteps(msi []*model.ExchangeStepInfo) *ExchangeUpdateOne {
	euo.mutation.SetSteps(msi)
	return euo
}

// AppendSteps appends msi to the "steps" field.
func (euo *ExchangeUpdateOne) AppendSteps(msi []*model.ExchangeStepInfo) *ExchangeUpdateOne {
	euo.mutation.AppendSteps(msi)
	return euo
}

// ClearSteps clears the value of the "steps" field.
func (euo *ExchangeUpdateOne) ClearSteps() *ExchangeUpdateOne {
	euo.mutation.ClearSteps()
	return euo
}

// SetMessage sets the "message" field.
func (euo *ExchangeUpdateOne) SetMessage(s string) *ExchangeUpdateOne {
	euo.mutation.SetMessage(s)
	return euo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableMessage(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetMessage(*s)
	}
	return euo
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (euo *ExchangeUpdateOne) SetSubscribe(s *Subscribe) *ExchangeUpdateOne {
	return euo.SetSubscribeID(s.ID)
}

// SetCity sets the "city" edge to the City entity.
func (euo *ExchangeUpdateOne) SetCity(c *City) *ExchangeUpdateOne {
	return euo.SetCityID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (euo *ExchangeUpdateOne) SetStore(s *Store) *ExchangeUpdateOne {
	return euo.SetStoreID(s.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (euo *ExchangeUpdateOne) SetEnterprise(e *Enterprise) *ExchangeUpdateOne {
	return euo.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (euo *ExchangeUpdateOne) SetStation(e *EnterpriseStation) *ExchangeUpdateOne {
	return euo.SetStationID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (euo *ExchangeUpdateOne) SetCabinet(c *Cabinet) *ExchangeUpdateOne {
	return euo.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (euo *ExchangeUpdateOne) SetRider(r *Rider) *ExchangeUpdateOne {
	return euo.SetRiderID(r.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (euo *ExchangeUpdateOne) SetEmployee(e *Employee) *ExchangeUpdateOne {
	return euo.SetEmployeeID(e.ID)
}

// Mutation returns the ExchangeMutation object of the builder.
func (euo *ExchangeUpdateOne) Mutation() *ExchangeMutation {
	return euo.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (euo *ExchangeUpdateOne) ClearSubscribe() *ExchangeUpdateOne {
	euo.mutation.ClearSubscribe()
	return euo
}

// ClearCity clears the "city" edge to the City entity.
func (euo *ExchangeUpdateOne) ClearCity() *ExchangeUpdateOne {
	euo.mutation.ClearCity()
	return euo
}

// ClearStore clears the "store" edge to the Store entity.
func (euo *ExchangeUpdateOne) ClearStore() *ExchangeUpdateOne {
	euo.mutation.ClearStore()
	return euo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (euo *ExchangeUpdateOne) ClearEnterprise() *ExchangeUpdateOne {
	euo.mutation.ClearEnterprise()
	return euo
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (euo *ExchangeUpdateOne) ClearStation() *ExchangeUpdateOne {
	euo.mutation.ClearStation()
	return euo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (euo *ExchangeUpdateOne) ClearCabinet() *ExchangeUpdateOne {
	euo.mutation.ClearCabinet()
	return euo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (euo *ExchangeUpdateOne) ClearRider() *ExchangeUpdateOne {
	euo.mutation.ClearRider()
	return euo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (euo *ExchangeUpdateOne) ClearEmployee() *ExchangeUpdateOne {
	euo.mutation.ClearEmployee()
	return euo
}

// Where appends a list predicates to the ExchangeUpdate builder.
func (euo *ExchangeUpdateOne) Where(ps ...predicate.Exchange) *ExchangeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExchangeUpdateOne) Select(field string, fields ...string) *ExchangeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exchange entity.
func (euo *ExchangeUpdateOne) Save(ctx context.Context) (*Exchange, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExchangeUpdateOne) SaveX(ctx context.Context) *Exchange {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExchangeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExchangeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExchangeUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if exchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exchange.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExchangeUpdateOne) check() error {
	if _, ok := euo.mutation.SubscribeID(); euo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.subscribe"`)
	}
	if _, ok := euo.mutation.CityID(); euo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.city"`)
	}
	if _, ok := euo.mutation.RiderID(); euo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *ExchangeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ExchangeUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *ExchangeUpdateOne) sqlSave(ctx context.Context) (_node *Exchange, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exchange.Table, exchange.Columns, sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exchange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exchange.FieldID)
		for _, f := range fields {
			if !exchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(exchange.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(exchange.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(exchange.FieldDeletedAt, field.TypeTime)
	}
	if euo.mutation.CreatorCleared() {
		_spec.ClearField(exchange.FieldCreator, field.TypeJSON)
	}
	if value, ok := euo.mutation.LastModifier(); ok {
		_spec.SetField(exchange.FieldLastModifier, field.TypeJSON, value)
	}
	if euo.mutation.LastModifierCleared() {
		_spec.ClearField(exchange.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.SetField(exchange.FieldRemark, field.TypeString, value)
	}
	if euo.mutation.RemarkCleared() {
		_spec.ClearField(exchange.FieldRemark, field.TypeString)
	}
	if value, ok := euo.mutation.UUID(); ok {
		_spec.SetField(exchange.FieldUUID, field.TypeString, value)
	}
	if value, ok := euo.mutation.Success(); ok {
		_spec.SetField(exchange.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Model(); ok {
		_spec.SetField(exchange.FieldModel, field.TypeString, value)
	}
	if value, ok := euo.mutation.Alternative(); ok {
		_spec.SetField(exchange.FieldAlternative, field.TypeBool, value)
	}
	if value, ok := euo.mutation.StartAt(); ok {
		_spec.SetField(exchange.FieldStartAt, field.TypeTime, value)
	}
	if euo.mutation.StartAtCleared() {
		_spec.ClearField(exchange.FieldStartAt, field.TypeTime)
	}
	if value, ok := euo.mutation.FinishAt(); ok {
		_spec.SetField(exchange.FieldFinishAt, field.TypeTime, value)
	}
	if euo.mutation.FinishAtCleared() {
		_spec.ClearField(exchange.FieldFinishAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Duration(); ok {
		_spec.SetField(exchange.FieldDuration, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedDuration(); ok {
		_spec.AddField(exchange.FieldDuration, field.TypeInt, value)
	}
	if euo.mutation.DurationCleared() {
		_spec.ClearField(exchange.FieldDuration, field.TypeInt)
	}
	if value, ok := euo.mutation.RiderBattery(); ok {
		_spec.SetField(exchange.FieldRiderBattery, field.TypeString, value)
	}
	if euo.mutation.RiderBatteryCleared() {
		_spec.ClearField(exchange.FieldRiderBattery, field.TypeString)
	}
	if value, ok := euo.mutation.PutinBattery(); ok {
		_spec.SetField(exchange.FieldPutinBattery, field.TypeString, value)
	}
	if euo.mutation.PutinBatteryCleared() {
		_spec.ClearField(exchange.FieldPutinBattery, field.TypeString)
	}
	if value, ok := euo.mutation.PutoutBattery(); ok {
		_spec.SetField(exchange.FieldPutoutBattery, field.TypeString, value)
	}
	if euo.mutation.PutoutBatteryCleared() {
		_spec.ClearField(exchange.FieldPutoutBattery, field.TypeString)
	}
	if value, ok := euo.mutation.CabinetInfo(); ok {
		_spec.SetField(exchange.FieldCabinetInfo, field.TypeJSON, value)
	}
	if euo.mutation.CabinetInfoCleared() {
		_spec.ClearField(exchange.FieldCabinetInfo, field.TypeJSON)
	}
	if value, ok := euo.mutation.Empty(); ok {
		_spec.SetField(exchange.FieldEmpty, field.TypeJSON, value)
	}
	if euo.mutation.EmptyCleared() {
		_spec.ClearField(exchange.FieldEmpty, field.TypeJSON)
	}
	if value, ok := euo.mutation.Fully(); ok {
		_spec.SetField(exchange.FieldFully, field.TypeJSON, value)
	}
	if euo.mutation.FullyCleared() {
		_spec.ClearField(exchange.FieldFully, field.TypeJSON)
	}
	if value, ok := euo.mutation.Steps(); ok {
		_spec.SetField(exchange.FieldSteps, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedSteps(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, exchange.FieldSteps, value)
		})
	}
	if euo.mutation.StepsCleared() {
		_spec.ClearField(exchange.FieldSteps, field.TypeJSON)
	}
	if value, ok := euo.mutation.Message(); ok {
		_spec.SetField(exchange.FieldMessage, field.TypeString, value)
	}
	if euo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.SubscribeTable,
			Columns: []string{exchange.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.SubscribeTable,
			Columns: []string{exchange.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EnterpriseTable,
			Columns: []string{exchange.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EnterpriseTable,
			Columns: []string{exchange.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StationTable,
			Columns: []string{exchange.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StationTable,
			Columns: []string{exchange.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Exchange{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
