// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// ExchangeUpdate is the builder for updating Exchange entities.
type ExchangeUpdate struct {
	config
	hooks    []Hook
	mutation *ExchangeMutation
}

// Where appends a list predicates to the ExchangeUpdate builder.
func (eu *ExchangeUpdate) Where(ps ...predicate.Exchange) *ExchangeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExchangeUpdate) SetUpdatedAt(t time.Time) *ExchangeUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *ExchangeUpdate) SetDeletedAt(t time.Time) *ExchangeUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableDeletedAt(t *time.Time) *ExchangeUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *ExchangeUpdate) ClearDeletedAt() *ExchangeUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetLastModifier sets the "last_modifier" field.
func (eu *ExchangeUpdate) SetLastModifier(m *model.Modifier) *ExchangeUpdate {
	eu.mutation.SetLastModifier(m)
	return eu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (eu *ExchangeUpdate) ClearLastModifier() *ExchangeUpdate {
	eu.mutation.ClearLastModifier()
	return eu
}

// SetRemark sets the "remark" field.
func (eu *ExchangeUpdate) SetRemark(s string) *ExchangeUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableRemark(s *string) *ExchangeUpdate {
	if s != nil {
		eu.SetRemark(*s)
	}
	return eu
}

// ClearRemark clears the value of the "remark" field.
func (eu *ExchangeUpdate) ClearRemark() *ExchangeUpdate {
	eu.mutation.ClearRemark()
	return eu
}

// SetCityID sets the "city_id" field.
func (eu *ExchangeUpdate) SetCityID(u uint64) *ExchangeUpdate {
	eu.mutation.SetCityID(u)
	return eu
}

// SetEmployeeID sets the "employee_id" field.
func (eu *ExchangeUpdate) SetEmployeeID(u uint64) *ExchangeUpdate {
	eu.mutation.SetEmployeeID(u)
	return eu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableEmployeeID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetEmployeeID(*u)
	}
	return eu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (eu *ExchangeUpdate) ClearEmployeeID() *ExchangeUpdate {
	eu.mutation.ClearEmployeeID()
	return eu
}

// SetStoreID sets the "store_id" field.
func (eu *ExchangeUpdate) SetStoreID(u uint64) *ExchangeUpdate {
	eu.mutation.SetStoreID(u)
	return eu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableStoreID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetStoreID(*u)
	}
	return eu
}

// ClearStoreID clears the value of the "store_id" field.
func (eu *ExchangeUpdate) ClearStoreID() *ExchangeUpdate {
	eu.mutation.ClearStoreID()
	return eu
}

// SetRiderID sets the "rider_id" field.
func (eu *ExchangeUpdate) SetRiderID(u uint64) *ExchangeUpdate {
	eu.mutation.SetRiderID(u)
	return eu
}

// SetUUID sets the "uuid" field.
func (eu *ExchangeUpdate) SetUUID(s string) *ExchangeUpdate {
	eu.mutation.SetUUID(s)
	return eu
}

// SetCabinetID sets the "cabinet_id" field.
func (eu *ExchangeUpdate) SetCabinetID(u uint64) *ExchangeUpdate {
	eu.mutation.SetCabinetID(u)
	return eu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableCabinetID(u *uint64) *ExchangeUpdate {
	if u != nil {
		eu.SetCabinetID(*u)
	}
	return eu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (eu *ExchangeUpdate) ClearCabinetID() *ExchangeUpdate {
	eu.mutation.ClearCabinetID()
	return eu
}

// SetSuccess sets the "success" field.
func (eu *ExchangeUpdate) SetSuccess(b bool) *ExchangeUpdate {
	eu.mutation.SetSuccess(b)
	return eu
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (eu *ExchangeUpdate) SetNillableSuccess(b *bool) *ExchangeUpdate {
	if b != nil {
		eu.SetSuccess(*b)
	}
	return eu
}

// SetDetail sets the "detail" field.
func (eu *ExchangeUpdate) SetDetail(mc *model.ExchangeCabinet) *ExchangeUpdate {
	eu.mutation.SetDetail(mc)
	return eu
}

// ClearDetail clears the value of the "detail" field.
func (eu *ExchangeUpdate) ClearDetail() *ExchangeUpdate {
	eu.mutation.ClearDetail()
	return eu
}

// SetCity sets the "city" edge to the City entity.
func (eu *ExchangeUpdate) SetCity(c *City) *ExchangeUpdate {
	return eu.SetCityID(c.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (eu *ExchangeUpdate) SetEmployee(e *Employee) *ExchangeUpdate {
	return eu.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (eu *ExchangeUpdate) SetStore(s *Store) *ExchangeUpdate {
	return eu.SetStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (eu *ExchangeUpdate) SetCabinet(c *Cabinet) *ExchangeUpdate {
	return eu.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eu *ExchangeUpdate) SetRider(r *Rider) *ExchangeUpdate {
	return eu.SetRiderID(r.ID)
}

// Mutation returns the ExchangeMutation object of the builder.
func (eu *ExchangeUpdate) Mutation() *ExchangeMutation {
	return eu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (eu *ExchangeUpdate) ClearCity() *ExchangeUpdate {
	eu.mutation.ClearCity()
	return eu
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (eu *ExchangeUpdate) ClearEmployee() *ExchangeUpdate {
	eu.mutation.ClearEmployee()
	return eu
}

// ClearStore clears the "store" edge to the Store entity.
func (eu *ExchangeUpdate) ClearStore() *ExchangeUpdate {
	eu.mutation.ClearStore()
	return eu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (eu *ExchangeUpdate) ClearCabinet() *ExchangeUpdate {
	eu.mutation.ClearCabinet()
	return eu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (eu *ExchangeUpdate) ClearRider() *ExchangeUpdate {
	eu.mutation.ClearRider()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExchangeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExchangeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExchangeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExchangeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExchangeUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if exchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exchange.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExchangeUpdate) check() error {
	if _, ok := eu.mutation.CityID(); eu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.city"`)
	}
	if _, ok := eu.mutation.RiderID(); eu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.rider"`)
	}
	return nil
}

func (eu *ExchangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exchange.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldDeletedAt,
		})
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: exchange.FieldDeletedAt,
		})
	}
	if eu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchange.FieldCreator,
		})
	}
	if value, ok := eu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldLastModifier,
		})
	}
	if eu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchange.FieldLastModifier,
		})
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldRemark,
		})
	}
	if eu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldRemark,
		})
	}
	if value, ok := eu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldUUID,
		})
	}
	if value, ok := eu.mutation.Success(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSuccess,
		})
	}
	if value, ok := eu.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldDetail,
		})
	}
	if eu.mutation.DetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchange.FieldDetail,
		})
	}
	if eu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ExchangeUpdateOne is the builder for updating a single Exchange entity.
type ExchangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExchangeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExchangeUpdateOne) SetUpdatedAt(t time.Time) *ExchangeUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *ExchangeUpdateOne) SetDeletedAt(t time.Time) *ExchangeUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableDeletedAt(t *time.Time) *ExchangeUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *ExchangeUpdateOne) ClearDeletedAt() *ExchangeUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetLastModifier sets the "last_modifier" field.
func (euo *ExchangeUpdateOne) SetLastModifier(m *model.Modifier) *ExchangeUpdateOne {
	euo.mutation.SetLastModifier(m)
	return euo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (euo *ExchangeUpdateOne) ClearLastModifier() *ExchangeUpdateOne {
	euo.mutation.ClearLastModifier()
	return euo
}

// SetRemark sets the "remark" field.
func (euo *ExchangeUpdateOne) SetRemark(s string) *ExchangeUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableRemark(s *string) *ExchangeUpdateOne {
	if s != nil {
		euo.SetRemark(*s)
	}
	return euo
}

// ClearRemark clears the value of the "remark" field.
func (euo *ExchangeUpdateOne) ClearRemark() *ExchangeUpdateOne {
	euo.mutation.ClearRemark()
	return euo
}

// SetCityID sets the "city_id" field.
func (euo *ExchangeUpdateOne) SetCityID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetCityID(u)
	return euo
}

// SetEmployeeID sets the "employee_id" field.
func (euo *ExchangeUpdateOne) SetEmployeeID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetEmployeeID(u)
	return euo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableEmployeeID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetEmployeeID(*u)
	}
	return euo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (euo *ExchangeUpdateOne) ClearEmployeeID() *ExchangeUpdateOne {
	euo.mutation.ClearEmployeeID()
	return euo
}

// SetStoreID sets the "store_id" field.
func (euo *ExchangeUpdateOne) SetStoreID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetStoreID(u)
	return euo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableStoreID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetStoreID(*u)
	}
	return euo
}

// ClearStoreID clears the value of the "store_id" field.
func (euo *ExchangeUpdateOne) ClearStoreID() *ExchangeUpdateOne {
	euo.mutation.ClearStoreID()
	return euo
}

// SetRiderID sets the "rider_id" field.
func (euo *ExchangeUpdateOne) SetRiderID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetRiderID(u)
	return euo
}

// SetUUID sets the "uuid" field.
func (euo *ExchangeUpdateOne) SetUUID(s string) *ExchangeUpdateOne {
	euo.mutation.SetUUID(s)
	return euo
}

// SetCabinetID sets the "cabinet_id" field.
func (euo *ExchangeUpdateOne) SetCabinetID(u uint64) *ExchangeUpdateOne {
	euo.mutation.SetCabinetID(u)
	return euo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableCabinetID(u *uint64) *ExchangeUpdateOne {
	if u != nil {
		euo.SetCabinetID(*u)
	}
	return euo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (euo *ExchangeUpdateOne) ClearCabinetID() *ExchangeUpdateOne {
	euo.mutation.ClearCabinetID()
	return euo
}

// SetSuccess sets the "success" field.
func (euo *ExchangeUpdateOne) SetSuccess(b bool) *ExchangeUpdateOne {
	euo.mutation.SetSuccess(b)
	return euo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (euo *ExchangeUpdateOne) SetNillableSuccess(b *bool) *ExchangeUpdateOne {
	if b != nil {
		euo.SetSuccess(*b)
	}
	return euo
}

// SetDetail sets the "detail" field.
func (euo *ExchangeUpdateOne) SetDetail(mc *model.ExchangeCabinet) *ExchangeUpdateOne {
	euo.mutation.SetDetail(mc)
	return euo
}

// ClearDetail clears the value of the "detail" field.
func (euo *ExchangeUpdateOne) ClearDetail() *ExchangeUpdateOne {
	euo.mutation.ClearDetail()
	return euo
}

// SetCity sets the "city" edge to the City entity.
func (euo *ExchangeUpdateOne) SetCity(c *City) *ExchangeUpdateOne {
	return euo.SetCityID(c.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (euo *ExchangeUpdateOne) SetEmployee(e *Employee) *ExchangeUpdateOne {
	return euo.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (euo *ExchangeUpdateOne) SetStore(s *Store) *ExchangeUpdateOne {
	return euo.SetStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (euo *ExchangeUpdateOne) SetCabinet(c *Cabinet) *ExchangeUpdateOne {
	return euo.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (euo *ExchangeUpdateOne) SetRider(r *Rider) *ExchangeUpdateOne {
	return euo.SetRiderID(r.ID)
}

// Mutation returns the ExchangeMutation object of the builder.
func (euo *ExchangeUpdateOne) Mutation() *ExchangeMutation {
	return euo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (euo *ExchangeUpdateOne) ClearCity() *ExchangeUpdateOne {
	euo.mutation.ClearCity()
	return euo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (euo *ExchangeUpdateOne) ClearEmployee() *ExchangeUpdateOne {
	euo.mutation.ClearEmployee()
	return euo
}

// ClearStore clears the "store" edge to the Store entity.
func (euo *ExchangeUpdateOne) ClearStore() *ExchangeUpdateOne {
	euo.mutation.ClearStore()
	return euo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (euo *ExchangeUpdateOne) ClearCabinet() *ExchangeUpdateOne {
	euo.mutation.ClearCabinet()
	return euo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (euo *ExchangeUpdateOne) ClearRider() *ExchangeUpdateOne {
	euo.mutation.ClearRider()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExchangeUpdateOne) Select(field string, fields ...string) *ExchangeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exchange entity.
func (euo *ExchangeUpdateOne) Save(ctx context.Context) (*Exchange, error) {
	var (
		err  error
		node *Exchange
	)
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Exchange)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExchangeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExchangeUpdateOne) SaveX(ctx context.Context) *Exchange {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExchangeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExchangeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExchangeUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if exchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exchange.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExchangeUpdateOne) check() error {
	if _, ok := euo.mutation.CityID(); euo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.city"`)
	}
	if _, ok := euo.mutation.RiderID(); euo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Exchange.rider"`)
	}
	return nil
}

func (euo *ExchangeUpdateOne) sqlSave(ctx context.Context) (_node *Exchange, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   exchange.Table,
			Columns: exchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exchange.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exchange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exchange.FieldID)
		for _, f := range fields {
			if !exchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldDeletedAt,
		})
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: exchange.FieldDeletedAt,
		})
	}
	if euo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchange.FieldCreator,
		})
	}
	if value, ok := euo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldLastModifier,
		})
	}
	if euo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchange.FieldLastModifier,
		})
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldRemark,
		})
	}
	if euo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: exchange.FieldRemark,
		})
	}
	if value, ok := euo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldUUID,
		})
	}
	if value, ok := euo.mutation.Success(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSuccess,
		})
	}
	if value, ok := euo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldDetail,
		})
	}
	if euo.mutation.DetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: exchange.FieldDetail,
		})
	}
	if euo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exchange{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
