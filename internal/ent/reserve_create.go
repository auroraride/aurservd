// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/reserve"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// ReserveCreate is the builder for creating a Reserve entity.
type ReserveCreate struct {
	config
	mutation *ReserveMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReserveCreate) SetCreatedAt(t time.Time) *ReserveCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReserveCreate) SetNillableCreatedAt(t *time.Time) *ReserveCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReserveCreate) SetUpdatedAt(t time.Time) *ReserveCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReserveCreate) SetNillableUpdatedAt(t *time.Time) *ReserveCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *ReserveCreate) SetDeletedAt(t time.Time) *ReserveCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *ReserveCreate) SetNillableDeletedAt(t *time.Time) *ReserveCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetCreator sets the "creator" field.
func (rc *ReserveCreate) SetCreator(m *model.Modifier) *ReserveCreate {
	rc.mutation.SetCreator(m)
	return rc
}

// SetLastModifier sets the "last_modifier" field.
func (rc *ReserveCreate) SetLastModifier(m *model.Modifier) *ReserveCreate {
	rc.mutation.SetLastModifier(m)
	return rc
}

// SetRemark sets the "remark" field.
func (rc *ReserveCreate) SetRemark(s string) *ReserveCreate {
	rc.mutation.SetRemark(s)
	return rc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rc *ReserveCreate) SetNillableRemark(s *string) *ReserveCreate {
	if s != nil {
		rc.SetRemark(*s)
	}
	return rc
}

// SetCabinetID sets the "cabinet_id" field.
func (rc *ReserveCreate) SetCabinetID(u uint64) *ReserveCreate {
	rc.mutation.SetCabinetID(u)
	return rc
}

// SetRiderID sets the "rider_id" field.
func (rc *ReserveCreate) SetRiderID(u uint64) *ReserveCreate {
	rc.mutation.SetRiderID(u)
	return rc
}

// SetCityID sets the "city_id" field.
func (rc *ReserveCreate) SetCityID(u uint64) *ReserveCreate {
	rc.mutation.SetCityID(u)
	return rc
}

// SetBusinessID sets the "business_id" field.
func (rc *ReserveCreate) SetBusinessID(u uint64) *ReserveCreate {
	rc.mutation.SetBusinessID(u)
	return rc
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (rc *ReserveCreate) SetNillableBusinessID(u *uint64) *ReserveCreate {
	if u != nil {
		rc.SetBusinessID(*u)
	}
	return rc
}

// SetStatus sets the "status" field.
func (rc *ReserveCreate) SetStatus(u uint8) *ReserveCreate {
	rc.mutation.SetStatus(u)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *ReserveCreate) SetNillableStatus(u *uint8) *ReserveCreate {
	if u != nil {
		rc.SetStatus(*u)
	}
	return rc
}

// SetType sets the "type" field.
func (rc *ReserveCreate) SetType(s string) *ReserveCreate {
	rc.mutation.SetType(s)
	return rc
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (rc *ReserveCreate) SetCabinet(c *Cabinet) *ReserveCreate {
	return rc.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (rc *ReserveCreate) SetRider(r *Rider) *ReserveCreate {
	return rc.SetRiderID(r.ID)
}

// SetCity sets the "city" edge to the City entity.
func (rc *ReserveCreate) SetCity(c *City) *ReserveCreate {
	return rc.SetCityID(c.ID)
}

// SetBusiness sets the "business" edge to the Business entity.
func (rc *ReserveCreate) SetBusiness(b *Business) *ReserveCreate {
	return rc.SetBusinessID(b.ID)
}

// Mutation returns the ReserveMutation object of the builder.
func (rc *ReserveCreate) Mutation() *ReserveMutation {
	return rc.mutation
}

// Save creates the Reserve in the database.
func (rc *ReserveCreate) Save(ctx context.Context) (*Reserve, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Reserve, ReserveMutation](ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReserveCreate) SaveX(ctx context.Context) *Reserve {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReserveCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReserveCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReserveCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if reserve.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized reserve.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := reserve.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if reserve.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized reserve.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := reserve.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Status(); !ok {
		v := reserve.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReserveCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reserve.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reserve.updated_at"`)}
	}
	if _, ok := rc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet_id", err: errors.New(`ent: missing required field "Reserve.cabinet_id"`)}
	}
	if _, ok := rc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "Reserve.rider_id"`)}
	}
	if _, ok := rc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Reserve.city_id"`)}
	}
	if _, ok := rc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Reserve.status"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Reserve.type"`)}
	}
	if _, ok := rc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet", err: errors.New(`ent: missing required edge "Reserve.cabinet"`)}
	}
	if _, ok := rc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "Reserve.rider"`)}
	}
	if _, ok := rc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Reserve.city"`)}
	}
	return nil
}

func (rc *ReserveCreate) sqlSave(ctx context.Context) (*Reserve, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReserveCreate) createSpec() (*Reserve, *sqlgraph.CreateSpec) {
	var (
		_node = &Reserve{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reserve.Table, sqlgraph.NewFieldSpec(reserve.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(reserve.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(reserve.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(reserve.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rc.mutation.Creator(); ok {
		_spec.SetField(reserve.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := rc.mutation.LastModifier(); ok {
		_spec.SetField(reserve.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := rc.mutation.Remark(); ok {
		_spec.SetField(reserve.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(reserve.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.SetField(reserve.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if nodes := rc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CabinetTable,
			Columns: []string{reserve.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.RiderTable,
			Columns: []string{reserve.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CityTable,
			Columns: []string{reserve.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.BusinessTable,
			Columns: []string{reserve.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reserve.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReserveUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *ReserveCreate) OnConflict(opts ...sql.ConflictOption) *ReserveUpsertOne {
	rc.conflict = opts
	return &ReserveUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reserve.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *ReserveCreate) OnConflictColumns(columns ...string) *ReserveUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &ReserveUpsertOne{
		create: rc,
	}
}

type (
	// ReserveUpsertOne is the builder for "upsert"-ing
	//  one Reserve node.
	ReserveUpsertOne struct {
		create *ReserveCreate
	}

	// ReserveUpsert is the "OnConflict" setter.
	ReserveUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ReserveUpsert) SetUpdatedAt(v time.Time) *ReserveUpsert {
	u.Set(reserve.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateUpdatedAt() *ReserveUpsert {
	u.SetExcluded(reserve.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReserveUpsert) SetDeletedAt(v time.Time) *ReserveUpsert {
	u.Set(reserve.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateDeletedAt() *ReserveUpsert {
	u.SetExcluded(reserve.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ReserveUpsert) ClearDeletedAt() *ReserveUpsert {
	u.SetNull(reserve.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *ReserveUpsert) SetLastModifier(v *model.Modifier) *ReserveUpsert {
	u.Set(reserve.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateLastModifier() *ReserveUpsert {
	u.SetExcluded(reserve.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ReserveUpsert) ClearLastModifier() *ReserveUpsert {
	u.SetNull(reserve.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *ReserveUpsert) SetRemark(v string) *ReserveUpsert {
	u.Set(reserve.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateRemark() *ReserveUpsert {
	u.SetExcluded(reserve.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *ReserveUpsert) ClearRemark() *ReserveUpsert {
	u.SetNull(reserve.FieldRemark)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ReserveUpsert) SetCabinetID(v uint64) *ReserveUpsert {
	u.Set(reserve.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateCabinetID() *ReserveUpsert {
	u.SetExcluded(reserve.FieldCabinetID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *ReserveUpsert) SetRiderID(v uint64) *ReserveUpsert {
	u.Set(reserve.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateRiderID() *ReserveUpsert {
	u.SetExcluded(reserve.FieldRiderID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *ReserveUpsert) SetCityID(v uint64) *ReserveUpsert {
	u.Set(reserve.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateCityID() *ReserveUpsert {
	u.SetExcluded(reserve.FieldCityID)
	return u
}

// SetBusinessID sets the "business_id" field.
func (u *ReserveUpsert) SetBusinessID(v uint64) *ReserveUpsert {
	u.Set(reserve.FieldBusinessID, v)
	return u
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateBusinessID() *ReserveUpsert {
	u.SetExcluded(reserve.FieldBusinessID)
	return u
}

// ClearBusinessID clears the value of the "business_id" field.
func (u *ReserveUpsert) ClearBusinessID() *ReserveUpsert {
	u.SetNull(reserve.FieldBusinessID)
	return u
}

// SetStatus sets the "status" field.
func (u *ReserveUpsert) SetStatus(v uint8) *ReserveUpsert {
	u.Set(reserve.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateStatus() *ReserveUpsert {
	u.SetExcluded(reserve.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ReserveUpsert) AddStatus(v uint8) *ReserveUpsert {
	u.Add(reserve.FieldStatus, v)
	return u
}

// SetType sets the "type" field.
func (u *ReserveUpsert) SetType(v string) *ReserveUpsert {
	u.Set(reserve.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ReserveUpsert) UpdateType() *ReserveUpsert {
	u.SetExcluded(reserve.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Reserve.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReserveUpsertOne) UpdateNewValues() *ReserveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(reserve.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(reserve.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reserve.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ReserveUpsertOne) Ignore() *ReserveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReserveUpsertOne) DoNothing() *ReserveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReserveCreate.OnConflict
// documentation for more info.
func (u *ReserveUpsertOne) Update(set func(*ReserveUpsert)) *ReserveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReserveUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReserveUpsertOne) SetUpdatedAt(v time.Time) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateUpdatedAt() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReserveUpsertOne) SetDeletedAt(v time.Time) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateDeletedAt() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ReserveUpsertOne) ClearDeletedAt() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ReserveUpsertOne) SetLastModifier(v *model.Modifier) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateLastModifier() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ReserveUpsertOne) ClearLastModifier() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ReserveUpsertOne) SetRemark(v string) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateRemark() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ReserveUpsertOne) ClearRemark() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.ClearRemark()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ReserveUpsertOne) SetCabinetID(v uint64) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateCabinetID() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateCabinetID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *ReserveUpsertOne) SetRiderID(v uint64) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateRiderID() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateRiderID()
	})
}

// SetCityID sets the "city_id" field.
func (u *ReserveUpsertOne) SetCityID(v uint64) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateCityID() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateCityID()
	})
}

// SetBusinessID sets the "business_id" field.
func (u *ReserveUpsertOne) SetBusinessID(v uint64) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetBusinessID(v)
	})
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateBusinessID() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateBusinessID()
	})
}

// ClearBusinessID clears the value of the "business_id" field.
func (u *ReserveUpsertOne) ClearBusinessID() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.ClearBusinessID()
	})
}

// SetStatus sets the "status" field.
func (u *ReserveUpsertOne) SetStatus(v uint8) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ReserveUpsertOne) AddStatus(v uint8) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateStatus() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *ReserveUpsertOne) SetType(v string) *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ReserveUpsertOne) UpdateType() *ReserveUpsertOne {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *ReserveUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReserveCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReserveUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReserveUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReserveUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReserveCreateBulk is the builder for creating many Reserve entities in bulk.
type ReserveCreateBulk struct {
	config
	builders []*ReserveCreate
	conflict []sql.ConflictOption
}

// Save creates the Reserve entities in the database.
func (rcb *ReserveCreateBulk) Save(ctx context.Context) ([]*Reserve, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reserve, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReserveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReserveCreateBulk) SaveX(ctx context.Context) []*Reserve {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReserveCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReserveCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Reserve.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReserveUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *ReserveCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReserveUpsertBulk {
	rcb.conflict = opts
	return &ReserveUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Reserve.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *ReserveCreateBulk) OnConflictColumns(columns ...string) *ReserveUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &ReserveUpsertBulk{
		create: rcb,
	}
}

// ReserveUpsertBulk is the builder for "upsert"-ing
// a bulk of Reserve nodes.
type ReserveUpsertBulk struct {
	create *ReserveCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Reserve.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ReserveUpsertBulk) UpdateNewValues() *ReserveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(reserve.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(reserve.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Reserve.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ReserveUpsertBulk) Ignore() *ReserveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReserveUpsertBulk) DoNothing() *ReserveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReserveCreateBulk.OnConflict
// documentation for more info.
func (u *ReserveUpsertBulk) Update(set func(*ReserveUpsert)) *ReserveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReserveUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ReserveUpsertBulk) SetUpdatedAt(v time.Time) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateUpdatedAt() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ReserveUpsertBulk) SetDeletedAt(v time.Time) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateDeletedAt() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ReserveUpsertBulk) ClearDeletedAt() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ReserveUpsertBulk) SetLastModifier(v *model.Modifier) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateLastModifier() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ReserveUpsertBulk) ClearLastModifier() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ReserveUpsertBulk) SetRemark(v string) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateRemark() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ReserveUpsertBulk) ClearRemark() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.ClearRemark()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ReserveUpsertBulk) SetCabinetID(v uint64) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateCabinetID() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateCabinetID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *ReserveUpsertBulk) SetRiderID(v uint64) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateRiderID() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateRiderID()
	})
}

// SetCityID sets the "city_id" field.
func (u *ReserveUpsertBulk) SetCityID(v uint64) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateCityID() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateCityID()
	})
}

// SetBusinessID sets the "business_id" field.
func (u *ReserveUpsertBulk) SetBusinessID(v uint64) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetBusinessID(v)
	})
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateBusinessID() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateBusinessID()
	})
}

// ClearBusinessID clears the value of the "business_id" field.
func (u *ReserveUpsertBulk) ClearBusinessID() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.ClearBusinessID()
	})
}

// SetStatus sets the "status" field.
func (u *ReserveUpsertBulk) SetStatus(v uint8) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ReserveUpsertBulk) AddStatus(v uint8) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateStatus() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *ReserveUpsertBulk) SetType(v string) *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ReserveUpsertBulk) UpdateType() *ReserveUpsertBulk {
	return u.Update(func(s *ReserveUpsert) {
		s.UpdateType()
	})
}

// Exec executes the query.
func (u *ReserveUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReserveCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReserveCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReserveUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
