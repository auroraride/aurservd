// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"reflect"
)

// CallModifyMethod call set field value for the given entity
func CallModifyMethod[T, O any](up *T, old *O, data any) *T {
	nd := reflect.TypeOf(data)
	ptr := nd.Kind() == reflect.Pointer
	if !ptr {
		panic("data need pointer")
	}

	nd = nd.Elem()
	ndv := reflect.ValueOf(data).Elem()

	od := reflect.TypeOf(old).Elem()

	uper := reflect.ValueOf(up)
	for i := 0; i < ndv.NumField(); i++ {
		nf := nd.Field(i)
		nfp := nf.Type.Kind() == reflect.Pointer
		if !nfp {
			continue
		}
		fn := nf.Name
		if fn == "ID" {
			continue
		}
		of, ok := od.FieldByName(fn)
		if !ok {
			continue
		}
		ofp := of.Type.Kind() == reflect.Pointer

		v := ndv.FieldByName(fn)
		if !v.IsZero() {
			method := uper.MethodByName(fmt.Sprintf("Set%s", fn))
			if !ofp {
				v = v.Elem()
			}
			if !method.IsZero() {
				method.Call([]reflect.Value{v})
			}
		}
	}
	return up
}

// ModifyOne returns an update with pointer struct builder for BatteryModel.
func (c *BatteryModelClient) ModifyOne(old *BatteryModel, data any) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModel(old))
	up := &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[BatteryModelUpdateOne, BatteryModel](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Branch.
func (c *BranchClient) ModifyOne(old *Branch, data any) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(old))
	up := &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[BranchUpdateOne, Branch](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for BranchContract.
func (c *BranchContractClient) ModifyOne(old *BranchContract, data any) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContract(old))
	up := &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[BranchContractUpdateOne, BranchContract](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Cabinet.
func (c *CabinetClient) ModifyOne(old *Cabinet, data any) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinet(old))
	up := &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[CabinetUpdateOne, Cabinet](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for CabinetFault.
func (c *CabinetFaultClient) ModifyOne(old *CabinetFault, data any) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFault(old))
	up := &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[CabinetFaultUpdateOne, CabinetFault](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for City.
func (c *CityClient) ModifyOne(old *City, data any) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(old))
	up := &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[CityUpdateOne, City](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Commission.
func (c *CommissionClient) ModifyOne(old *Commission, data any) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(old))
	up := &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[CommissionUpdateOne, Commission](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Contract.
func (c *ContractClient) ModifyOne(old *Contract, data any) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(old))
	up := &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[ContractUpdateOne, Contract](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Enterprise.
func (c *EnterpriseClient) ModifyOne(old *Enterprise, data any) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterprise(old))
	up := &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[EnterpriseUpdateOne, Enterprise](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Manager.
func (c *ManagerClient) ModifyOne(old *Manager, data any) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(old))
	up := &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[ManagerUpdateOne, Manager](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Order.
func (c *OrderClient) ModifyOne(old *Order, data any) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(old))
	up := &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[OrderUpdateOne, Order](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for OrderAlter.
func (c *OrderAlterClient) ModifyOne(old *OrderAlter, data any) *OrderAlterUpdateOne {
	mutation := newOrderAlterMutation(c.config, OpUpdateOne, withOrderAlter(old))
	up := &OrderAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[OrderAlterUpdateOne, OrderAlter](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for OrderArrearage.
func (c *OrderArrearageClient) ModifyOne(old *OrderArrearage, data any) *OrderArrearageUpdateOne {
	mutation := newOrderArrearageMutation(c.config, OpUpdateOne, withOrderArrearage(old))
	up := &OrderArrearageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[OrderArrearageUpdateOne, OrderArrearage](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for OrderPause.
func (c *OrderPauseClient) ModifyOne(old *OrderPause, data any) *OrderPauseUpdateOne {
	mutation := newOrderPauseMutation(c.config, OpUpdateOne, withOrderPause(old))
	up := &OrderPauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[OrderPauseUpdateOne, OrderPause](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Person.
func (c *PersonClient) ModifyOne(old *Person, data any) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(old))
	up := &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[PersonUpdateOne, Person](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Plan.
func (c *PlanClient) ModifyOne(old *Plan, data any) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(old))
	up := &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[PlanUpdateOne, Plan](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Rider.
func (c *RiderClient) ModifyOne(old *Rider, data any) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRider(old))
	up := &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[RiderUpdateOne, Rider](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Setting.
func (c *SettingClient) ModifyOne(old *Setting, data any) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(old))
	up := &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[SettingUpdateOne, Setting](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Store.
func (c *StoreClient) ModifyOne(old *Store, data any) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(old))
	up := &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return CallModifyMethod[StoreUpdateOne, Store](up, old, data)
}
