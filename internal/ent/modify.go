// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"reflect"
)

// EntitySetAttributes call set field value for the given entity
func EntitySetAttributes[T, O any](client *T, entity *O, data any) *T {
	nd := reflect.TypeOf(data)
	ptr := nd.Kind() == reflect.Pointer
	if !ptr {
		panic("data need pointer")
	}

	nd = nd.Elem()
	ndv := reflect.ValueOf(data).Elem()

	od := reflect.TypeOf(entity).Elem()

	uper := reflect.ValueOf(client)
	for i := 0; i < ndv.NumField(); i++ {
		nf := nd.Field(i)
		nfp := nf.Type.Kind() == reflect.Pointer
		if !nfp {
			continue
		}
		fn := nf.Name
		if fn == "ID" {
			continue
		}
		of, ok := od.FieldByName(fn)
		if !ok {
			continue
		}
		ofp := of.Type.Kind() == reflect.Pointer

		v := ndv.FieldByName(fn)
		if !v.IsZero() {
			method := uper.MethodByName(fmt.Sprintf("Set%s", fn))
			if !ofp {
				v = v.Elem()
			}
			if !method.IsZero() {
				method.Call([]reflect.Value{v})
			}
		}
	}
	return client
}

// ModifyOne returns an update with pointer struct builder for Activity.
func (c *ActivityClient) ModifyOne(old *Activity, data any) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(old))
	up := &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[ActivityUpdateOne, Activity](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Agent.
func (c *AgentClient) ModifyOne(old *Agent, data any) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(old))
	up := &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AgentUpdateOne, Agent](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Agreement.
func (c *AgreementClient) ModifyOne(old *Agreement, data any) *AgreementUpdateOne {
	mutation := newAgreementMutation(c.config, OpUpdateOne, withAgreement(old))
	up := &AgreementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AgreementUpdateOne, Agreement](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Allocate.
func (c *AllocateClient) ModifyOne(old *Allocate, data any) *AllocateUpdateOne {
	mutation := newAllocateMutation(c.config, OpUpdateOne, withAllocate(old))
	up := &AllocateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AllocateUpdateOne, Allocate](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Asset.
func (c *AssetClient) ModifyOne(old *Asset, data any) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAsset(old))
	up := &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AssetUpdateOne, Asset](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for AssetAttributeValues.
func (c *AssetAttributeValuesClient) ModifyOne(old *AssetAttributeValues, data any) *AssetAttributeValuesUpdateOne {
	mutation := newAssetAttributeValuesMutation(c.config, OpUpdateOne, withAssetAttributeValues(old))
	up := &AssetAttributeValuesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AssetAttributeValuesUpdateOne, AssetAttributeValues](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for AssetAttributes.
func (c *AssetAttributesClient) ModifyOne(old *AssetAttributes, data any) *AssetAttributesUpdateOne {
	mutation := newAssetAttributesMutation(c.config, OpUpdateOne, withAssetAttributes(old))
	up := &AssetAttributesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AssetAttributesUpdateOne, AssetAttributes](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for AssetHistory.
func (c *AssetHistoryClient) ModifyOne(old *AssetHistory, data any) *AssetHistoryUpdateOne {
	mutation := newAssetHistoryMutation(c.config, OpUpdateOne, withAssetHistory(old))
	up := &AssetHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AssetHistoryUpdateOne, AssetHistory](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for AssetScrap.
func (c *AssetScrapClient) ModifyOne(old *AssetScrap, data any) *AssetScrapUpdateOne {
	mutation := newAssetScrapMutation(c.config, OpUpdateOne, withAssetScrap(old))
	up := &AssetScrapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AssetScrapUpdateOne, AssetScrap](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Assistance.
func (c *AssistanceClient) ModifyOne(old *Assistance, data any) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistance(old))
	up := &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AssistanceUpdateOne, Assistance](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Attendance.
func (c *AttendanceClient) ModifyOne(old *Attendance, data any) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendance(old))
	up := &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[AttendanceUpdateOne, Attendance](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Battery.
func (c *BatteryClient) ModifyOne(old *Battery, data any) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBattery(old))
	up := &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[BatteryUpdateOne, Battery](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for BatteryFlow.
func (c *BatteryFlowClient) ModifyOne(old *BatteryFlow, data any) *BatteryFlowUpdateOne {
	mutation := newBatteryFlowMutation(c.config, OpUpdateOne, withBatteryFlow(old))
	up := &BatteryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[BatteryFlowUpdateOne, BatteryFlow](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for BatteryModel.
func (c *BatteryModelClient) ModifyOne(old *BatteryModel, data any) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModel(old))
	up := &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[BatteryModelUpdateOne, BatteryModel](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for BatteryModelNew.
func (c *BatteryModelNewClient) ModifyOne(old *BatteryModelNew, data any) *BatteryModelNewUpdateOne {
	mutation := newBatteryModelNewMutation(c.config, OpUpdateOne, withBatteryModelNew(old))
	up := &BatteryModelNewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[BatteryModelNewUpdateOne, BatteryModelNew](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Branch.
func (c *BranchClient) ModifyOne(old *Branch, data any) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(old))
	up := &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[BranchUpdateOne, Branch](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for BranchContract.
func (c *BranchContractClient) ModifyOne(old *BranchContract, data any) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContract(old))
	up := &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[BranchContractUpdateOne, BranchContract](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Business.
func (c *BusinessClient) ModifyOne(old *Business, data any) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusiness(old))
	up := &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[BusinessUpdateOne, Business](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Cabinet.
func (c *CabinetClient) ModifyOne(old *Cabinet, data any) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinet(old))
	up := &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[CabinetUpdateOne, Cabinet](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for CabinetEc.
func (c *CabinetEcClient) ModifyOne(old *CabinetEc, data any) *CabinetEcUpdateOne {
	mutation := newCabinetEcMutation(c.config, OpUpdateOne, withCabinetEc(old))
	up := &CabinetEcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[CabinetEcUpdateOne, CabinetEc](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for CabinetFault.
func (c *CabinetFaultClient) ModifyOne(old *CabinetFault, data any) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFault(old))
	up := &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[CabinetFaultUpdateOne, CabinetFault](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for City.
func (c *CityClient) ModifyOne(old *City, data any) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(old))
	up := &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[CityUpdateOne, City](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Commission.
func (c *CommissionClient) ModifyOne(old *Commission, data any) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(old))
	up := &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[CommissionUpdateOne, Commission](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Contract.
func (c *ContractClient) ModifyOne(old *Contract, data any) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(old))
	up := &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[ContractUpdateOne, Contract](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for ContractTemplate.
func (c *ContractTemplateClient) ModifyOne(old *ContractTemplate, data any) *ContractTemplateUpdateOne {
	mutation := newContractTemplateMutation(c.config, OpUpdateOne, withContractTemplate(old))
	up := &ContractTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[ContractTemplateUpdateOne, ContractTemplate](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Coupon.
func (c *CouponClient) ModifyOne(old *Coupon, data any) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(old))
	up := &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[CouponUpdateOne, Coupon](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for CouponAssembly.
func (c *CouponAssemblyClient) ModifyOne(old *CouponAssembly, data any) *CouponAssemblyUpdateOne {
	mutation := newCouponAssemblyMutation(c.config, OpUpdateOne, withCouponAssembly(old))
	up := &CouponAssemblyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[CouponAssemblyUpdateOne, CouponAssembly](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for CouponTemplate.
func (c *CouponTemplateClient) ModifyOne(old *CouponTemplate, data any) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplate(old))
	up := &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[CouponTemplateUpdateOne, CouponTemplate](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Ebike.
func (c *EbikeClient) ModifyOne(old *Ebike, data any) *EbikeUpdateOne {
	mutation := newEbikeMutation(c.config, OpUpdateOne, withEbike(old))
	up := &EbikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EbikeUpdateOne, Ebike](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EbikeBrand.
func (c *EbikeBrandClient) ModifyOne(old *EbikeBrand, data any) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrand(old))
	up := &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EbikeBrandUpdateOne, EbikeBrand](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EbikeBrandAttribute.
func (c *EbikeBrandAttributeClient) ModifyOne(old *EbikeBrandAttribute, data any) *EbikeBrandAttributeUpdateOne {
	mutation := newEbikeBrandAttributeMutation(c.config, OpUpdateOne, withEbikeBrandAttribute(old))
	up := &EbikeBrandAttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EbikeBrandAttributeUpdateOne, EbikeBrandAttribute](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Employee.
func (c *EmployeeClient) ModifyOne(old *Employee, data any) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(old))
	up := &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EmployeeUpdateOne, Employee](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Enterprise.
func (c *EnterpriseClient) ModifyOne(old *Enterprise, data any) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterprise(old))
	up := &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EnterpriseUpdateOne, Enterprise](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) ModifyOne(old *EnterpriseBatterySwap, data any) *EnterpriseBatterySwapUpdateOne {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpUpdateOne, withEnterpriseBatterySwap(old))
	up := &EnterpriseBatterySwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EnterpriseBatterySwapUpdateOne, EnterpriseBatterySwap](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EnterpriseBill.
func (c *EnterpriseBillClient) ModifyOne(old *EnterpriseBill, data any) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBill(old))
	up := &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EnterpriseBillUpdateOne, EnterpriseBill](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EnterpriseContract.
func (c *EnterpriseContractClient) ModifyOne(old *EnterpriseContract, data any) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContract(old))
	up := &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EnterpriseContractUpdateOne, EnterpriseContract](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) ModifyOne(old *EnterprisePrepayment, data any) *EnterprisePrepaymentUpdateOne {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdateOne, withEnterprisePrepayment(old))
	up := &EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EnterprisePrepaymentUpdateOne, EnterprisePrepayment](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EnterprisePrice.
func (c *EnterprisePriceClient) ModifyOne(old *EnterprisePrice, data any) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePrice(old))
	up := &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EnterprisePriceUpdateOne, EnterprisePrice](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) ModifyOne(old *EnterpriseStatement, data any) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatement(old))
	up := &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EnterpriseStatementUpdateOne, EnterpriseStatement](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for EnterpriseStation.
func (c *EnterpriseStationClient) ModifyOne(old *EnterpriseStation, data any) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStation(old))
	up := &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[EnterpriseStationUpdateOne, EnterpriseStation](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Exception.
func (c *ExceptionClient) ModifyOne(old *Exception, data any) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withException(old))
	up := &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[ExceptionUpdateOne, Exception](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Exchange.
func (c *ExchangeClient) ModifyOne(old *Exchange, data any) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchange(old))
	up := &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[ExchangeUpdateOne, Exchange](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Export.
func (c *ExportClient) ModifyOne(old *Export, data any) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExport(old))
	up := &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[ExportUpdateOne, Export](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Fault.
func (c *FaultClient) ModifyOne(old *Fault, data any) *FaultUpdateOne {
	mutation := newFaultMutation(c.config, OpUpdateOne, withFault(old))
	up := &FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[FaultUpdateOne, Fault](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Feedback.
func (c *FeedbackClient) ModifyOne(old *Feedback, data any) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedback(old))
	up := &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[FeedbackUpdateOne, Feedback](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Goods.
func (c *GoodsClient) ModifyOne(old *Goods, data any) *GoodsUpdateOne {
	mutation := newGoodsMutation(c.config, OpUpdateOne, withGoods(old))
	up := &GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[GoodsUpdateOne, Goods](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Instructions.
func (c *InstructionsClient) ModifyOne(old *Instructions, data any) *InstructionsUpdateOne {
	mutation := newInstructionsMutation(c.config, OpUpdateOne, withInstructions(old))
	up := &InstructionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[InstructionsUpdateOne, Instructions](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Inventory.
func (c *InventoryClient) ModifyOne(old *Inventory, data any) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventory(old))
	up := &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[InventoryUpdateOne, Inventory](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Maintainer.
func (c *MaintainerClient) ModifyOne(old *Maintainer, data any) *MaintainerUpdateOne {
	mutation := newMaintainerMutation(c.config, OpUpdateOne, withMaintainer(old))
	up := &MaintainerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[MaintainerUpdateOne, Maintainer](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Manager.
func (c *ManagerClient) ModifyOne(old *Manager, data any) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(old))
	up := &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[ManagerUpdateOne, Manager](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Material.
func (c *MaterialClient) ModifyOne(old *Material, data any) *MaterialUpdateOne {
	mutation := newMaterialMutation(c.config, OpUpdateOne, withMaterial(old))
	up := &MaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[MaterialUpdateOne, Material](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Order.
func (c *OrderClient) ModifyOne(old *Order, data any) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(old))
	up := &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[OrderUpdateOne, Order](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for OrderRefund.
func (c *OrderRefundClient) ModifyOne(old *OrderRefund, data any) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefund(old))
	up := &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[OrderRefundUpdateOne, OrderRefund](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Person.
func (c *PersonClient) ModifyOne(old *Person, data any) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(old))
	up := &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PersonUpdateOne, Person](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Plan.
func (c *PlanClient) ModifyOne(old *Plan, data any) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(old))
	up := &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PlanUpdateOne, Plan](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PlanIntroduce.
func (c *PlanIntroduceClient) ModifyOne(old *PlanIntroduce, data any) *PlanIntroduceUpdateOne {
	mutation := newPlanIntroduceMutation(c.config, OpUpdateOne, withPlanIntroduce(old))
	up := &PlanIntroduceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PlanIntroduceUpdateOne, PlanIntroduce](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PointLog.
func (c *PointLogClient) ModifyOne(old *PointLog, data any) *PointLogUpdateOne {
	mutation := newPointLogMutation(c.config, OpUpdateOne, withPointLog(old))
	up := &PointLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PointLogUpdateOne, PointLog](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionAchievement.
func (c *PromotionAchievementClient) ModifyOne(old *PromotionAchievement, data any) *PromotionAchievementUpdateOne {
	mutation := newPromotionAchievementMutation(c.config, OpUpdateOne, withPromotionAchievement(old))
	up := &PromotionAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionAchievementUpdateOne, PromotionAchievement](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionBankCard.
func (c *PromotionBankCardClient) ModifyOne(old *PromotionBankCard, data any) *PromotionBankCardUpdateOne {
	mutation := newPromotionBankCardMutation(c.config, OpUpdateOne, withPromotionBankCard(old))
	up := &PromotionBankCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionBankCardUpdateOne, PromotionBankCard](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionCommission.
func (c *PromotionCommissionClient) ModifyOne(old *PromotionCommission, data any) *PromotionCommissionUpdateOne {
	mutation := newPromotionCommissionMutation(c.config, OpUpdateOne, withPromotionCommission(old))
	up := &PromotionCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionCommissionUpdateOne, PromotionCommission](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) ModifyOne(old *PromotionCommissionPlan, data any) *PromotionCommissionPlanUpdateOne {
	mutation := newPromotionCommissionPlanMutation(c.config, OpUpdateOne, withPromotionCommissionPlan(old))
	up := &PromotionCommissionPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionCommissionPlanUpdateOne, PromotionCommissionPlan](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionEarnings.
func (c *PromotionEarningsClient) ModifyOne(old *PromotionEarnings, data any) *PromotionEarningsUpdateOne {
	mutation := newPromotionEarningsMutation(c.config, OpUpdateOne, withPromotionEarnings(old))
	up := &PromotionEarningsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionEarningsUpdateOne, PromotionEarnings](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionGrowth.
func (c *PromotionGrowthClient) ModifyOne(old *PromotionGrowth, data any) *PromotionGrowthUpdateOne {
	mutation := newPromotionGrowthMutation(c.config, OpUpdateOne, withPromotionGrowth(old))
	up := &PromotionGrowthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionGrowthUpdateOne, PromotionGrowth](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionLevel.
func (c *PromotionLevelClient) ModifyOne(old *PromotionLevel, data any) *PromotionLevelUpdateOne {
	mutation := newPromotionLevelMutation(c.config, OpUpdateOne, withPromotionLevel(old))
	up := &PromotionLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionLevelUpdateOne, PromotionLevel](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionLevelTask.
func (c *PromotionLevelTaskClient) ModifyOne(old *PromotionLevelTask, data any) *PromotionLevelTaskUpdateOne {
	mutation := newPromotionLevelTaskMutation(c.config, OpUpdateOne, withPromotionLevelTask(old))
	up := &PromotionLevelTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionLevelTaskUpdateOne, PromotionLevelTask](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionMember.
func (c *PromotionMemberClient) ModifyOne(old *PromotionMember, data any) *PromotionMemberUpdateOne {
	mutation := newPromotionMemberMutation(c.config, OpUpdateOne, withPromotionMember(old))
	up := &PromotionMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionMemberUpdateOne, PromotionMember](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionMemberCommission.
func (c *PromotionMemberCommissionClient) ModifyOne(old *PromotionMemberCommission, data any) *PromotionMemberCommissionUpdateOne {
	mutation := newPromotionMemberCommissionMutation(c.config, OpUpdateOne, withPromotionMemberCommission(old))
	up := &PromotionMemberCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionMemberCommissionUpdateOne, PromotionMemberCommission](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionPerson.
func (c *PromotionPersonClient) ModifyOne(old *PromotionPerson, data any) *PromotionPersonUpdateOne {
	mutation := newPromotionPersonMutation(c.config, OpUpdateOne, withPromotionPerson(old))
	up := &PromotionPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionPersonUpdateOne, PromotionPerson](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionPrivilege.
func (c *PromotionPrivilegeClient) ModifyOne(old *PromotionPrivilege, data any) *PromotionPrivilegeUpdateOne {
	mutation := newPromotionPrivilegeMutation(c.config, OpUpdateOne, withPromotionPrivilege(old))
	up := &PromotionPrivilegeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionPrivilegeUpdateOne, PromotionPrivilege](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionReferrals.
func (c *PromotionReferralsClient) ModifyOne(old *PromotionReferrals, data any) *PromotionReferralsUpdateOne {
	mutation := newPromotionReferralsMutation(c.config, OpUpdateOne, withPromotionReferrals(old))
	up := &PromotionReferralsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionReferralsUpdateOne, PromotionReferrals](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionReferralsProgress.
func (c *PromotionReferralsProgressClient) ModifyOne(old *PromotionReferralsProgress, data any) *PromotionReferralsProgressUpdateOne {
	mutation := newPromotionReferralsProgressMutation(c.config, OpUpdateOne, withPromotionReferralsProgress(old))
	up := &PromotionReferralsProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionReferralsProgressUpdateOne, PromotionReferralsProgress](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionSetting.
func (c *PromotionSettingClient) ModifyOne(old *PromotionSetting, data any) *PromotionSettingUpdateOne {
	mutation := newPromotionSettingMutation(c.config, OpUpdateOne, withPromotionSetting(old))
	up := &PromotionSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionSettingUpdateOne, PromotionSetting](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for PromotionWithdrawal.
func (c *PromotionWithdrawalClient) ModifyOne(old *PromotionWithdrawal, data any) *PromotionWithdrawalUpdateOne {
	mutation := newPromotionWithdrawalMutation(c.config, OpUpdateOne, withPromotionWithdrawal(old))
	up := &PromotionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[PromotionWithdrawalUpdateOne, PromotionWithdrawal](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Question.
func (c *QuestionClient) ModifyOne(old *Question, data any) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestion(old))
	up := &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[QuestionUpdateOne, Question](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for QuestionCategory.
func (c *QuestionCategoryClient) ModifyOne(old *QuestionCategory, data any) *QuestionCategoryUpdateOne {
	mutation := newQuestionCategoryMutation(c.config, OpUpdateOne, withQuestionCategory(old))
	up := &QuestionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[QuestionCategoryUpdateOne, QuestionCategory](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Reserve.
func (c *ReserveClient) ModifyOne(old *Reserve, data any) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserve(old))
	up := &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[ReserveUpdateOne, Reserve](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Rider.
func (c *RiderClient) ModifyOne(old *Rider, data any) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRider(old))
	up := &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[RiderUpdateOne, Rider](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for RiderFollowUp.
func (c *RiderFollowUpClient) ModifyOne(old *RiderFollowUp, data any) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUp(old))
	up := &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[RiderFollowUpUpdateOne, RiderFollowUp](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for RiderPhoneDevice.
func (c *RiderPhoneDeviceClient) ModifyOne(old *RiderPhoneDevice, data any) *RiderPhoneDeviceUpdateOne {
	mutation := newRiderPhoneDeviceMutation(c.config, OpUpdateOne, withRiderPhoneDevice(old))
	up := &RiderPhoneDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[RiderPhoneDeviceUpdateOne, RiderPhoneDevice](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Role.
func (c *RoleClient) ModifyOne(old *Role, data any) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(old))
	up := &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[RoleUpdateOne, Role](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Setting.
func (c *SettingClient) ModifyOne(old *Setting, data any) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(old))
	up := &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[SettingUpdateOne, Setting](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Stock.
func (c *StockClient) ModifyOne(old *Stock, data any) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(old))
	up := &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[StockUpdateOne, Stock](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for StockSummary.
func (c *StockSummaryClient) ModifyOne(old *StockSummary, data any) *StockSummaryUpdateOne {
	mutation := newStockSummaryMutation(c.config, OpUpdateOne, withStockSummary(old))
	up := &StockSummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[StockSummaryUpdateOne, StockSummary](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Store.
func (c *StoreClient) ModifyOne(old *Store, data any) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(old))
	up := &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[StoreUpdateOne, Store](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for StoreGoods.
func (c *StoreGoodsClient) ModifyOne(old *StoreGoods, data any) *StoreGoodsUpdateOne {
	mutation := newStoreGoodsMutation(c.config, OpUpdateOne, withStoreGoods(old))
	up := &StoreGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[StoreGoodsUpdateOne, StoreGoods](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Subscribe.
func (c *SubscribeClient) ModifyOne(old *Subscribe, data any) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribe(old))
	up := &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[SubscribeUpdateOne, Subscribe](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for SubscribeAlter.
func (c *SubscribeAlterClient) ModifyOne(old *SubscribeAlter, data any) *SubscribeAlterUpdateOne {
	mutation := newSubscribeAlterMutation(c.config, OpUpdateOne, withSubscribeAlter(old))
	up := &SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[SubscribeAlterUpdateOne, SubscribeAlter](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for SubscribePause.
func (c *SubscribePauseClient) ModifyOne(old *SubscribePause, data any) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePause(old))
	up := &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[SubscribePauseUpdateOne, SubscribePause](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for SubscribeReminder.
func (c *SubscribeReminderClient) ModifyOne(old *SubscribeReminder, data any) *SubscribeReminderUpdateOne {
	mutation := newSubscribeReminderMutation(c.config, OpUpdateOne, withSubscribeReminder(old))
	up := &SubscribeReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[SubscribeReminderUpdateOne, SubscribeReminder](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for SubscribeSuspend.
func (c *SubscribeSuspendClient) ModifyOne(old *SubscribeSuspend, data any) *SubscribeSuspendUpdateOne {
	mutation := newSubscribeSuspendMutation(c.config, OpUpdateOne, withSubscribeSuspend(old))
	up := &SubscribeSuspendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[SubscribeSuspendUpdateOne, SubscribeSuspend](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Version.
func (c *VersionClient) ModifyOne(old *Version, data any) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersion(old))
	up := &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[VersionUpdateOne, Version](up, old, data)
}

// ModifyOne returns an update with pointer struct builder for Warehouse.
func (c *WarehouseClient) ModifyOne(old *Warehouse, data any) *WarehouseUpdateOne {
	mutation := newWarehouseMutation(c.config, OpUpdateOne, withWarehouse(old))
	up := &WarehouseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
	return EntitySetAttributes[WarehouseUpdateOne, Warehouse](up, old, data)
}
