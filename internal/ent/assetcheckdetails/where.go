// Code generated by ent, DO NOT EDIT.

package assetcheckdetails

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldRemark, v))
}

// MaintainerID applies equality check predicate on the "maintainer_id" field. It's identical to MaintainerIDEQ.
func MaintainerID(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldMaintainerID, v))
}

// AssetID applies equality check predicate on the "asset_id" field. It's identical to AssetIDEQ.
func AssetID(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldAssetID, v))
}

// CheckID applies equality check predicate on the "check_id" field. It's identical to CheckIDEQ.
func CheckID(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldCheckID, v))
}

// RealLocationsID applies equality check predicate on the "real_locations_id" field. It's identical to RealLocationsIDEQ.
func RealLocationsID(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldRealLocationsID, v))
}

// RealLocationsType applies equality check predicate on the "real_locations_type" field. It's identical to RealLocationsTypeEQ.
func RealLocationsType(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldRealLocationsType, v))
}

// LocationsID applies equality check predicate on the "locations_id" field. It's identical to LocationsIDEQ.
func LocationsID(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldLocationsID, v))
}

// LocationsType applies equality check predicate on the "locations_type" field. It's identical to LocationsTypeEQ.
func LocationsType(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldLocationsType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldStatus, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldResult, v))
}

// OperateID applies equality check predicate on the "operate_id" field. It's identical to OperateIDEQ.
func OperateID(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldOperateID, v))
}

// OperateAt applies equality check predicate on the "operate_at" field. It's identical to OperateAtEQ.
func OperateAt(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldOperateAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldContainsFold(FieldRemark, v))
}

// MaintainerIDEQ applies the EQ predicate on the "maintainer_id" field.
func MaintainerIDEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldMaintainerID, v))
}

// MaintainerIDNEQ applies the NEQ predicate on the "maintainer_id" field.
func MaintainerIDNEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldMaintainerID, v))
}

// MaintainerIDIn applies the In predicate on the "maintainer_id" field.
func MaintainerIDIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldMaintainerID, vs...))
}

// MaintainerIDNotIn applies the NotIn predicate on the "maintainer_id" field.
func MaintainerIDNotIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldMaintainerID, vs...))
}

// MaintainerIDIsNil applies the IsNil predicate on the "maintainer_id" field.
func MaintainerIDIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldMaintainerID))
}

// MaintainerIDNotNil applies the NotNil predicate on the "maintainer_id" field.
func MaintainerIDNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldMaintainerID))
}

// AssetIDEQ applies the EQ predicate on the "asset_id" field.
func AssetIDEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldAssetID, v))
}

// AssetIDNEQ applies the NEQ predicate on the "asset_id" field.
func AssetIDNEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldAssetID, v))
}

// AssetIDIn applies the In predicate on the "asset_id" field.
func AssetIDIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldAssetID, vs...))
}

// AssetIDNotIn applies the NotIn predicate on the "asset_id" field.
func AssetIDNotIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldAssetID, vs...))
}

// AssetIDIsNil applies the IsNil predicate on the "asset_id" field.
func AssetIDIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldAssetID))
}

// AssetIDNotNil applies the NotNil predicate on the "asset_id" field.
func AssetIDNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldAssetID))
}

// CheckIDEQ applies the EQ predicate on the "check_id" field.
func CheckIDEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldCheckID, v))
}

// CheckIDNEQ applies the NEQ predicate on the "check_id" field.
func CheckIDNEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldCheckID, v))
}

// CheckIDIn applies the In predicate on the "check_id" field.
func CheckIDIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldCheckID, vs...))
}

// CheckIDNotIn applies the NotIn predicate on the "check_id" field.
func CheckIDNotIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldCheckID, vs...))
}

// CheckIDIsNil applies the IsNil predicate on the "check_id" field.
func CheckIDIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldCheckID))
}

// CheckIDNotNil applies the NotNil predicate on the "check_id" field.
func CheckIDNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldCheckID))
}

// RealLocationsIDEQ applies the EQ predicate on the "real_locations_id" field.
func RealLocationsIDEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldRealLocationsID, v))
}

// RealLocationsIDNEQ applies the NEQ predicate on the "real_locations_id" field.
func RealLocationsIDNEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldRealLocationsID, v))
}

// RealLocationsIDIn applies the In predicate on the "real_locations_id" field.
func RealLocationsIDIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldRealLocationsID, vs...))
}

// RealLocationsIDNotIn applies the NotIn predicate on the "real_locations_id" field.
func RealLocationsIDNotIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldRealLocationsID, vs...))
}

// RealLocationsIDIsNil applies the IsNil predicate on the "real_locations_id" field.
func RealLocationsIDIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldRealLocationsID))
}

// RealLocationsIDNotNil applies the NotNil predicate on the "real_locations_id" field.
func RealLocationsIDNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldRealLocationsID))
}

// RealLocationsTypeEQ applies the EQ predicate on the "real_locations_type" field.
func RealLocationsTypeEQ(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldRealLocationsType, v))
}

// RealLocationsTypeNEQ applies the NEQ predicate on the "real_locations_type" field.
func RealLocationsTypeNEQ(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldRealLocationsType, v))
}

// RealLocationsTypeIn applies the In predicate on the "real_locations_type" field.
func RealLocationsTypeIn(vs ...uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldRealLocationsType, vs...))
}

// RealLocationsTypeNotIn applies the NotIn predicate on the "real_locations_type" field.
func RealLocationsTypeNotIn(vs ...uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldRealLocationsType, vs...))
}

// RealLocationsTypeGT applies the GT predicate on the "real_locations_type" field.
func RealLocationsTypeGT(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldRealLocationsType, v))
}

// RealLocationsTypeGTE applies the GTE predicate on the "real_locations_type" field.
func RealLocationsTypeGTE(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldRealLocationsType, v))
}

// RealLocationsTypeLT applies the LT predicate on the "real_locations_type" field.
func RealLocationsTypeLT(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldRealLocationsType, v))
}

// RealLocationsTypeLTE applies the LTE predicate on the "real_locations_type" field.
func RealLocationsTypeLTE(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldRealLocationsType, v))
}

// RealLocationsTypeIsNil applies the IsNil predicate on the "real_locations_type" field.
func RealLocationsTypeIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldRealLocationsType))
}

// RealLocationsTypeNotNil applies the NotNil predicate on the "real_locations_type" field.
func RealLocationsTypeNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldRealLocationsType))
}

// LocationsIDEQ applies the EQ predicate on the "locations_id" field.
func LocationsIDEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldLocationsID, v))
}

// LocationsIDNEQ applies the NEQ predicate on the "locations_id" field.
func LocationsIDNEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldLocationsID, v))
}

// LocationsIDIn applies the In predicate on the "locations_id" field.
func LocationsIDIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldLocationsID, vs...))
}

// LocationsIDNotIn applies the NotIn predicate on the "locations_id" field.
func LocationsIDNotIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldLocationsID, vs...))
}

// LocationsIDIsNil applies the IsNil predicate on the "locations_id" field.
func LocationsIDIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldLocationsID))
}

// LocationsIDNotNil applies the NotNil predicate on the "locations_id" field.
func LocationsIDNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldLocationsID))
}

// LocationsTypeEQ applies the EQ predicate on the "locations_type" field.
func LocationsTypeEQ(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldLocationsType, v))
}

// LocationsTypeNEQ applies the NEQ predicate on the "locations_type" field.
func LocationsTypeNEQ(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldLocationsType, v))
}

// LocationsTypeIn applies the In predicate on the "locations_type" field.
func LocationsTypeIn(vs ...uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldLocationsType, vs...))
}

// LocationsTypeNotIn applies the NotIn predicate on the "locations_type" field.
func LocationsTypeNotIn(vs ...uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldLocationsType, vs...))
}

// LocationsTypeGT applies the GT predicate on the "locations_type" field.
func LocationsTypeGT(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldLocationsType, v))
}

// LocationsTypeGTE applies the GTE predicate on the "locations_type" field.
func LocationsTypeGTE(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldLocationsType, v))
}

// LocationsTypeLT applies the LT predicate on the "locations_type" field.
func LocationsTypeLT(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldLocationsType, v))
}

// LocationsTypeLTE applies the LTE predicate on the "locations_type" field.
func LocationsTypeLTE(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldLocationsType, v))
}

// LocationsTypeIsNil applies the IsNil predicate on the "locations_type" field.
func LocationsTypeIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldLocationsType))
}

// LocationsTypeNotNil applies the NotNil predicate on the "locations_type" field.
func LocationsTypeNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldLocationsType))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldStatus))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v uint8) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldResult, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldResult))
}

// OperateIDEQ applies the EQ predicate on the "operate_id" field.
func OperateIDEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldOperateID, v))
}

// OperateIDNEQ applies the NEQ predicate on the "operate_id" field.
func OperateIDNEQ(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldOperateID, v))
}

// OperateIDIn applies the In predicate on the "operate_id" field.
func OperateIDIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldOperateID, vs...))
}

// OperateIDNotIn applies the NotIn predicate on the "operate_id" field.
func OperateIDNotIn(vs ...uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldOperateID, vs...))
}

// OperateIDGT applies the GT predicate on the "operate_id" field.
func OperateIDGT(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldOperateID, v))
}

// OperateIDGTE applies the GTE predicate on the "operate_id" field.
func OperateIDGTE(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldOperateID, v))
}

// OperateIDLT applies the LT predicate on the "operate_id" field.
func OperateIDLT(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldOperateID, v))
}

// OperateIDLTE applies the LTE predicate on the "operate_id" field.
func OperateIDLTE(v uint64) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldOperateID, v))
}

// OperateIDIsNil applies the IsNil predicate on the "operate_id" field.
func OperateIDIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldOperateID))
}

// OperateIDNotNil applies the NotNil predicate on the "operate_id" field.
func OperateIDNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldOperateID))
}

// OperateAtEQ applies the EQ predicate on the "operate_at" field.
func OperateAtEQ(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldEQ(FieldOperateAt, v))
}

// OperateAtNEQ applies the NEQ predicate on the "operate_at" field.
func OperateAtNEQ(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNEQ(FieldOperateAt, v))
}

// OperateAtIn applies the In predicate on the "operate_at" field.
func OperateAtIn(vs ...time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIn(FieldOperateAt, vs...))
}

// OperateAtNotIn applies the NotIn predicate on the "operate_at" field.
func OperateAtNotIn(vs ...time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotIn(FieldOperateAt, vs...))
}

// OperateAtGT applies the GT predicate on the "operate_at" field.
func OperateAtGT(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGT(FieldOperateAt, v))
}

// OperateAtGTE applies the GTE predicate on the "operate_at" field.
func OperateAtGTE(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldGTE(FieldOperateAt, v))
}

// OperateAtLT applies the LT predicate on the "operate_at" field.
func OperateAtLT(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLT(FieldOperateAt, v))
}

// OperateAtLTE applies the LTE predicate on the "operate_at" field.
func OperateAtLTE(v time.Time) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldLTE(FieldOperateAt, v))
}

// OperateAtIsNil applies the IsNil predicate on the "operate_at" field.
func OperateAtIsNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldIsNull(FieldOperateAt))
}

// OperateAtNotNil applies the NotNil predicate on the "operate_at" field.
func OperateAtNotNil() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.FieldNotNull(FieldOperateAt))
}

// HasMaintainer applies the HasEdge predicate on the "maintainer" edge.
func HasMaintainer() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MaintainerTable, MaintainerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMaintainerWith applies the HasEdge predicate on the "maintainer" edge with a given conditions (other predicates).
func HasMaintainerWith(preds ...predicate.Maintainer) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newMaintainerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsset applies the HasEdge predicate on the "asset" edge.
func HasAsset() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetWith applies the HasEdge predicate on the "asset" edge with a given conditions (other predicates).
func HasAssetWith(preds ...predicate.Asset) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newAssetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCheck applies the HasEdge predicate on the "check" edge.
func HasCheck() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CheckTable, CheckColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCheckWith applies the HasEdge predicate on the "check" edge with a given conditions (other predicates).
func HasCheckWith(preds ...predicate.AssetCheck) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newCheckStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWarehouse applies the HasEdge predicate on the "warehouse" edge.
func HasWarehouse() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, WarehouseTable, WarehouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWarehouseWith applies the HasEdge predicate on the "warehouse" edge with a given conditions (other predicates).
func HasWarehouseWith(preds ...predicate.Warehouse) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newWarehouseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.EnterpriseStation) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperator applies the HasEdge predicate on the "operator" edge.
func HasOperator() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OperatorTable, OperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatorWith applies the HasEdge predicate on the "operator" edge with a given conditions (other predicates).
func HasOperatorWith(preds ...predicate.Maintainer) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRealWarehouse applies the HasEdge predicate on the "real_warehouse" edge.
func HasRealWarehouse() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RealWarehouseTable, RealWarehouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRealWarehouseWith applies the HasEdge predicate on the "real_warehouse" edge with a given conditions (other predicates).
func HasRealWarehouseWith(preds ...predicate.Warehouse) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newRealWarehouseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRealStore applies the HasEdge predicate on the "real_store" edge.
func HasRealStore() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RealStoreTable, RealStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRealStoreWith applies the HasEdge predicate on the "real_store" edge with a given conditions (other predicates).
func HasRealStoreWith(preds ...predicate.Store) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newRealStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRealCabinet applies the HasEdge predicate on the "real_cabinet" edge.
func HasRealCabinet() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RealCabinetTable, RealCabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRealCabinetWith applies the HasEdge predicate on the "real_cabinet" edge with a given conditions (other predicates).
func HasRealCabinetWith(preds ...predicate.Cabinet) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newRealCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRealStation applies the HasEdge predicate on the "real_station" edge.
func HasRealStation() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RealStationTable, RealStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRealStationWith applies the HasEdge predicate on the "real_station" edge with a given conditions (other predicates).
func HasRealStationWith(preds ...predicate.EnterpriseStation) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newRealStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRealRider applies the HasEdge predicate on the "real_rider" edge.
func HasRealRider() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RealRiderTable, RealRiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRealRiderWith applies the HasEdge predicate on the "real_rider" edge with a given conditions (other predicates).
func HasRealRiderWith(preds ...predicate.Rider) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newRealRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRealOperator applies the HasEdge predicate on the "real_operator" edge.
func HasRealOperator() predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RealOperatorTable, RealOperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRealOperatorWith applies the HasEdge predicate on the "real_operator" edge with a given conditions (other predicates).
func HasRealOperatorWith(preds ...predicate.Maintainer) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(func(s *sql.Selector) {
		step := newRealOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetCheckDetails) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetCheckDetails) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetCheckDetails) predicate.AssetCheckDetails {
	return predicate.AssetCheckDetails(sql.NotPredicates(p))
}
