// Code generated by ent, DO NOT EDIT.

package assetcheckdetails

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the assetcheckdetails type in the database.
	Label = "asset_check_details"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldAssetID holds the string denoting the asset_id field in the database.
	FieldAssetID = "asset_id"
	// FieldCheckID holds the string denoting the check_id field in the database.
	FieldCheckID = "check_id"
	// EdgeAsset holds the string denoting the asset edge name in mutations.
	EdgeAsset = "asset"
	// EdgeCheck holds the string denoting the check edge name in mutations.
	EdgeCheck = "check"
	// Table holds the table name of the assetcheckdetails in the database.
	Table = "asset_check_details"
	// AssetTable is the table that holds the asset relation/edge.
	AssetTable = "asset_check_details"
	// AssetInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetInverseTable = "asset"
	// AssetColumn is the table column denoting the asset relation/edge.
	AssetColumn = "asset_id"
	// CheckTable is the table that holds the check relation/edge.
	CheckTable = "asset_check_details"
	// CheckInverseTable is the table name for the AssetCheck entity.
	// It exists in this package in order to avoid circular dependency with the "assetcheck" package.
	CheckInverseTable = "asset_check"
	// CheckColumn is the table column denoting the check relation/edge.
	CheckColumn = "check_id"
)

// Columns holds all SQL columns for assetcheckdetails fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldAssetID,
	FieldCheckID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the AssetCheckDetails queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByAssetID orders the results by the asset_id field.
func ByAssetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetID, opts...).ToFunc()
}

// ByCheckID orders the results by the check_id field.
func ByCheckID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckID, opts...).ToFunc()
}

// ByAssetField orders the results by asset field.
func ByAssetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetStep(), sql.OrderByField(field, opts...))
	}
}

// ByCheckField orders the results by check field.
func ByCheckField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCheckStep(), sql.OrderByField(field, opts...))
	}
}
func newAssetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
	)
}
func newCheckStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CheckInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CheckTable, CheckColumn),
	)
}
