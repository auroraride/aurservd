// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/purchasecommodity"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
	"github.com/auroraride/aurservd/internal/ent/purchasepayment"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PurchaseOrderQuery is the builder for querying PurchaseOrder entities.
type PurchaseOrderQuery struct {
	config
	ctx           *QueryContext
	order         []purchaseorder.OrderOption
	inters        []Interceptor
	predicates    []predicate.PurchaseOrder
	withRider     *RiderQuery
	withCommodity *PurchaseCommodityQuery
	withPayments  *PurchasePaymentQuery
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PurchaseOrderQuery builder.
func (poq *PurchaseOrderQuery) Where(ps ...predicate.PurchaseOrder) *PurchaseOrderQuery {
	poq.predicates = append(poq.predicates, ps...)
	return poq
}

// Limit the number of records to be returned by this query.
func (poq *PurchaseOrderQuery) Limit(limit int) *PurchaseOrderQuery {
	poq.ctx.Limit = &limit
	return poq
}

// Offset to start from.
func (poq *PurchaseOrderQuery) Offset(offset int) *PurchaseOrderQuery {
	poq.ctx.Offset = &offset
	return poq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (poq *PurchaseOrderQuery) Unique(unique bool) *PurchaseOrderQuery {
	poq.ctx.Unique = &unique
	return poq
}

// Order specifies how the records should be ordered.
func (poq *PurchaseOrderQuery) Order(o ...purchaseorder.OrderOption) *PurchaseOrderQuery {
	poq.order = append(poq.order, o...)
	return poq
}

// QueryRider chains the current query on the "rider" edge.
func (poq *PurchaseOrderQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: poq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(purchaseorder.Table, purchaseorder.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, purchaseorder.RiderTable, purchaseorder.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(poq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCommodity chains the current query on the "commodity" edge.
func (poq *PurchaseOrderQuery) QueryCommodity() *PurchaseCommodityQuery {
	query := (&PurchaseCommodityClient{config: poq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(purchaseorder.Table, purchaseorder.FieldID, selector),
			sqlgraph.To(purchasecommodity.Table, purchasecommodity.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, purchaseorder.CommodityTable, purchaseorder.CommodityColumn),
		)
		fromU = sqlgraph.SetNeighbors(poq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPayments chains the current query on the "payments" edge.
func (poq *PurchaseOrderQuery) QueryPayments() *PurchasePaymentQuery {
	query := (&PurchasePaymentClient{config: poq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := poq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := poq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(purchaseorder.Table, purchaseorder.FieldID, selector),
			sqlgraph.To(purchasepayment.Table, purchasepayment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, purchaseorder.PaymentsTable, purchaseorder.PaymentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(poq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PurchaseOrder entity from the query.
// Returns a *NotFoundError when no PurchaseOrder was found.
func (poq *PurchaseOrderQuery) First(ctx context.Context) (*PurchaseOrder, error) {
	nodes, err := poq.Limit(1).All(setContextOp(ctx, poq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{purchaseorder.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (poq *PurchaseOrderQuery) FirstX(ctx context.Context) *PurchaseOrder {
	node, err := poq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PurchaseOrder ID from the query.
// Returns a *NotFoundError when no PurchaseOrder ID was found.
func (poq *PurchaseOrderQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = poq.Limit(1).IDs(setContextOp(ctx, poq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{purchaseorder.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (poq *PurchaseOrderQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := poq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PurchaseOrder entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PurchaseOrder entity is found.
// Returns a *NotFoundError when no PurchaseOrder entities are found.
func (poq *PurchaseOrderQuery) Only(ctx context.Context) (*PurchaseOrder, error) {
	nodes, err := poq.Limit(2).All(setContextOp(ctx, poq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{purchaseorder.Label}
	default:
		return nil, &NotSingularError{purchaseorder.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (poq *PurchaseOrderQuery) OnlyX(ctx context.Context) *PurchaseOrder {
	node, err := poq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PurchaseOrder ID in the query.
// Returns a *NotSingularError when more than one PurchaseOrder ID is found.
// Returns a *NotFoundError when no entities are found.
func (poq *PurchaseOrderQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = poq.Limit(2).IDs(setContextOp(ctx, poq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{purchaseorder.Label}
	default:
		err = &NotSingularError{purchaseorder.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (poq *PurchaseOrderQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := poq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PurchaseOrders.
func (poq *PurchaseOrderQuery) All(ctx context.Context) ([]*PurchaseOrder, error) {
	ctx = setContextOp(ctx, poq.ctx, ent.OpQueryAll)
	if err := poq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PurchaseOrder, *PurchaseOrderQuery]()
	return withInterceptors[[]*PurchaseOrder](ctx, poq, qr, poq.inters)
}

// AllX is like All, but panics if an error occurs.
func (poq *PurchaseOrderQuery) AllX(ctx context.Context) []*PurchaseOrder {
	nodes, err := poq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PurchaseOrder IDs.
func (poq *PurchaseOrderQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if poq.ctx.Unique == nil && poq.path != nil {
		poq.Unique(true)
	}
	ctx = setContextOp(ctx, poq.ctx, ent.OpQueryIDs)
	if err = poq.Select(purchaseorder.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (poq *PurchaseOrderQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := poq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (poq *PurchaseOrderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, poq.ctx, ent.OpQueryCount)
	if err := poq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, poq, querierCount[*PurchaseOrderQuery](), poq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (poq *PurchaseOrderQuery) CountX(ctx context.Context) int {
	count, err := poq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (poq *PurchaseOrderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, poq.ctx, ent.OpQueryExist)
	switch _, err := poq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (poq *PurchaseOrderQuery) ExistX(ctx context.Context) bool {
	exist, err := poq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PurchaseOrderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (poq *PurchaseOrderQuery) Clone() *PurchaseOrderQuery {
	if poq == nil {
		return nil
	}
	return &PurchaseOrderQuery{
		config:        poq.config,
		ctx:           poq.ctx.Clone(),
		order:         append([]purchaseorder.OrderOption{}, poq.order...),
		inters:        append([]Interceptor{}, poq.inters...),
		predicates:    append([]predicate.PurchaseOrder{}, poq.predicates...),
		withRider:     poq.withRider.Clone(),
		withCommodity: poq.withCommodity.Clone(),
		withPayments:  poq.withPayments.Clone(),
		// clone intermediate query.
		sql:       poq.sql.Clone(),
		path:      poq.path,
		modifiers: append([]func(*sql.Selector){}, poq.modifiers...),
	}
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (poq *PurchaseOrderQuery) WithRider(opts ...func(*RiderQuery)) *PurchaseOrderQuery {
	query := (&RiderClient{config: poq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poq.withRider = query
	return poq
}

// WithCommodity tells the query-builder to eager-load the nodes that are connected to
// the "commodity" edge. The optional arguments are used to configure the query builder of the edge.
func (poq *PurchaseOrderQuery) WithCommodity(opts ...func(*PurchaseCommodityQuery)) *PurchaseOrderQuery {
	query := (&PurchaseCommodityClient{config: poq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poq.withCommodity = query
	return poq
}

// WithPayments tells the query-builder to eager-load the nodes that are connected to
// the "payments" edge. The optional arguments are used to configure the query builder of the edge.
func (poq *PurchaseOrderQuery) WithPayments(opts ...func(*PurchasePaymentQuery)) *PurchaseOrderQuery {
	query := (&PurchasePaymentClient{config: poq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	poq.withPayments = query
	return poq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PurchaseOrder.Query().
//		GroupBy(purchaseorder.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (poq *PurchaseOrderQuery) GroupBy(field string, fields ...string) *PurchaseOrderGroupBy {
	poq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PurchaseOrderGroupBy{build: poq}
	grbuild.flds = &poq.ctx.Fields
	grbuild.label = purchaseorder.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PurchaseOrder.Query().
//		Select(purchaseorder.FieldCreatedAt).
//		Scan(ctx, &v)
func (poq *PurchaseOrderQuery) Select(fields ...string) *PurchaseOrderSelect {
	poq.ctx.Fields = append(poq.ctx.Fields, fields...)
	sbuild := &PurchaseOrderSelect{PurchaseOrderQuery: poq}
	sbuild.label = purchaseorder.Label
	sbuild.flds, sbuild.scan = &poq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PurchaseOrderSelect configured with the given aggregations.
func (poq *PurchaseOrderQuery) Aggregate(fns ...AggregateFunc) *PurchaseOrderSelect {
	return poq.Select().Aggregate(fns...)
}

func (poq *PurchaseOrderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range poq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, poq); err != nil {
				return err
			}
		}
	}
	for _, f := range poq.ctx.Fields {
		if !purchaseorder.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if poq.path != nil {
		prev, err := poq.path(ctx)
		if err != nil {
			return err
		}
		poq.sql = prev
	}
	return nil
}

func (poq *PurchaseOrderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PurchaseOrder, error) {
	var (
		nodes       = []*PurchaseOrder{}
		_spec       = poq.querySpec()
		loadedTypes = [3]bool{
			poq.withRider != nil,
			poq.withCommodity != nil,
			poq.withPayments != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PurchaseOrder).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PurchaseOrder{config: poq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(poq.modifiers) > 0 {
		_spec.Modifiers = poq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, poq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := poq.withRider; query != nil {
		if err := poq.loadRider(ctx, query, nodes, nil,
			func(n *PurchaseOrder, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := poq.withCommodity; query != nil {
		if err := poq.loadCommodity(ctx, query, nodes, nil,
			func(n *PurchaseOrder, e *PurchaseCommodity) { n.Edges.Commodity = e }); err != nil {
			return nil, err
		}
	}
	if query := poq.withPayments; query != nil {
		if err := poq.loadPayments(ctx, query, nodes,
			func(n *PurchaseOrder) { n.Edges.Payments = []*PurchasePayment{} },
			func(n *PurchaseOrder, e *PurchasePayment) { n.Edges.Payments = append(n.Edges.Payments, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (poq *PurchaseOrderQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*PurchaseOrder, init func(*PurchaseOrder), assign func(*PurchaseOrder, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PurchaseOrder)
	for i := range nodes {
		fk := nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (poq *PurchaseOrderQuery) loadCommodity(ctx context.Context, query *PurchaseCommodityQuery, nodes []*PurchaseOrder, init func(*PurchaseOrder), assign func(*PurchaseOrder, *PurchaseCommodity)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PurchaseOrder)
	for i := range nodes {
		fk := nodes[i].CommodityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(purchasecommodity.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "commodity_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (poq *PurchaseOrderQuery) loadPayments(ctx context.Context, query *PurchasePaymentQuery, nodes []*PurchaseOrder, init func(*PurchaseOrder), assign func(*PurchaseOrder, *PurchasePayment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*PurchaseOrder)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PurchasePayment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(purchaseorder.PaymentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.purchase_order_payments
		if fk == nil {
			return fmt.Errorf(`foreign-key "purchase_order_payments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "purchase_order_payments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (poq *PurchaseOrderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := poq.querySpec()
	if len(poq.modifiers) > 0 {
		_spec.Modifiers = poq.modifiers
	}
	_spec.Node.Columns = poq.ctx.Fields
	if len(poq.ctx.Fields) > 0 {
		_spec.Unique = poq.ctx.Unique != nil && *poq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, poq.driver, _spec)
}

func (poq *PurchaseOrderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(purchaseorder.Table, purchaseorder.Columns, sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64))
	_spec.From = poq.sql
	if unique := poq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if poq.path != nil {
		_spec.Unique = true
	}
	if fields := poq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purchaseorder.FieldID)
		for i := range fields {
			if fields[i] != purchaseorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if poq.withRider != nil {
			_spec.Node.AddColumnOnce(purchaseorder.FieldRiderID)
		}
		if poq.withCommodity != nil {
			_spec.Node.AddColumnOnce(purchaseorder.FieldCommodityID)
		}
	}
	if ps := poq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := poq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := poq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := poq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (poq *PurchaseOrderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(poq.driver.Dialect())
	t1 := builder.Table(purchaseorder.Table)
	columns := poq.ctx.Fields
	if len(columns) == 0 {
		columns = purchaseorder.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if poq.sql != nil {
		selector = poq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if poq.ctx.Unique != nil && *poq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range poq.modifiers {
		m(selector)
	}
	for _, p := range poq.predicates {
		p(selector)
	}
	for _, p := range poq.order {
		p(selector)
	}
	if offset := poq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := poq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (poq *PurchaseOrderQuery) Modify(modifiers ...func(s *sql.Selector)) *PurchaseOrderSelect {
	poq.modifiers = append(poq.modifiers, modifiers...)
	return poq.Select()
}

type PurchaseOrderQueryWith string

var (
	PurchaseOrderQueryWithRider     PurchaseOrderQueryWith = "Rider"
	PurchaseOrderQueryWithCommodity PurchaseOrderQueryWith = "Commodity"
	PurchaseOrderQueryWithPayments  PurchaseOrderQueryWith = "Payments"
)

func (poq *PurchaseOrderQuery) With(withEdges ...PurchaseOrderQueryWith) *PurchaseOrderQuery {
	for _, v := range withEdges {
		switch v {
		case PurchaseOrderQueryWithRider:
			poq.WithRider()
		case PurchaseOrderQueryWithCommodity:
			poq.WithCommodity()
		case PurchaseOrderQueryWithPayments:
			poq.WithPayments()
		}
	}
	return poq
}

// PurchaseOrderGroupBy is the group-by builder for PurchaseOrder entities.
type PurchaseOrderGroupBy struct {
	selector
	build *PurchaseOrderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pogb *PurchaseOrderGroupBy) Aggregate(fns ...AggregateFunc) *PurchaseOrderGroupBy {
	pogb.fns = append(pogb.fns, fns...)
	return pogb
}

// Scan applies the selector query and scans the result into the given value.
func (pogb *PurchaseOrderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pogb.build.ctx, ent.OpQueryGroupBy)
	if err := pogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PurchaseOrderQuery, *PurchaseOrderGroupBy](ctx, pogb.build, pogb, pogb.build.inters, v)
}

func (pogb *PurchaseOrderGroupBy) sqlScan(ctx context.Context, root *PurchaseOrderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pogb.fns))
	for _, fn := range pogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pogb.flds)+len(pogb.fns))
		for _, f := range *pogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PurchaseOrderSelect is the builder for selecting fields of PurchaseOrder entities.
type PurchaseOrderSelect struct {
	*PurchaseOrderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pos *PurchaseOrderSelect) Aggregate(fns ...AggregateFunc) *PurchaseOrderSelect {
	pos.fns = append(pos.fns, fns...)
	return pos
}

// Scan applies the selector query and scans the result into the given value.
func (pos *PurchaseOrderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pos.ctx, ent.OpQuerySelect)
	if err := pos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PurchaseOrderQuery, *PurchaseOrderSelect](ctx, pos.PurchaseOrderQuery, pos, pos.inters, v)
}

func (pos *PurchaseOrderSelect) sqlScan(ctx context.Context, root *PurchaseOrderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pos.fns))
	for _, fn := range pos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pos *PurchaseOrderSelect) Modify(modifiers ...func(s *sql.Selector)) *PurchaseOrderSelect {
	pos.modifiers = append(pos.modifiers, modifiers...)
	return pos
}
