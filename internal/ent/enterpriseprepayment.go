// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprepayment"
)

// EnterprisePrepayment is the model entity for the EnterprisePrepayment schema.
type EnterprisePrepayment struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 企业ID
	EnterpriseID uint64 `json:"enterprise_id,omitempty"`
	// AgentID holds the value of the "agent_id" field.
	AgentID *uint64 `json:"agent_id,omitempty"`
	// 预付金额
	Amount float64 `json:"amount,omitempty"`
	// 支付方式
	Payway model.Payway `json:"payway,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterprisePrepaymentQuery when eager-loading is set.
	Edges                  EnterprisePrepaymentEdges `json:"edges"`
	enterprise_prepayments *uint64
	selectValues           sql.SelectValues
}

// EnterprisePrepaymentEdges holds the relations/edges for other nodes in the graph.
type EnterprisePrepaymentEdges struct {
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterprisePrepaymentEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[0] {
		if e.Enterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterprisePrepaymentEdges) AgentOrErr() (*Agent, error) {
	if e.loadedTypes[1] {
		if e.Agent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: agent.Label}
		}
		return e.Agent, nil
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnterprisePrepayment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterpriseprepayment.FieldCreator, enterpriseprepayment.FieldLastModifier:
			values[i] = new([]byte)
		case enterpriseprepayment.FieldPayway:
			values[i] = new(model.Payway)
		case enterpriseprepayment.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case enterpriseprepayment.FieldID, enterpriseprepayment.FieldEnterpriseID, enterpriseprepayment.FieldAgentID:
			values[i] = new(sql.NullInt64)
		case enterpriseprepayment.FieldRemark:
			values[i] = new(sql.NullString)
		case enterpriseprepayment.FieldCreatedAt, enterpriseprepayment.FieldUpdatedAt, enterpriseprepayment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case enterpriseprepayment.ForeignKeys[0]: // enterprise_prepayments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnterprisePrepayment fields.
func (ep *EnterprisePrepayment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterpriseprepayment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ep.ID = uint64(value.Int64)
		case enterpriseprepayment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ep.CreatedAt = value.Time
			}
		case enterpriseprepayment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ep.UpdatedAt = value.Time
			}
		case enterpriseprepayment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ep.DeletedAt = new(time.Time)
				*ep.DeletedAt = value.Time
			}
		case enterpriseprepayment.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ep.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterpriseprepayment.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ep.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterpriseprepayment.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ep.Remark = value.String
			}
		case enterpriseprepayment.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				ep.EnterpriseID = uint64(value.Int64)
			}
		case enterpriseprepayment.FieldAgentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				ep.AgentID = new(uint64)
				*ep.AgentID = uint64(value.Int64)
			}
		case enterpriseprepayment.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ep.Amount = value.Float64
			}
		case enterpriseprepayment.FieldPayway:
			if value, ok := values[i].(*model.Payway); !ok {
				return fmt.Errorf("unexpected type %T for field payway", values[i])
			} else if value != nil {
				ep.Payway = *value
			}
		case enterpriseprepayment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field enterprise_prepayments", value)
			} else if value.Valid {
				ep.enterprise_prepayments = new(uint64)
				*ep.enterprise_prepayments = uint64(value.Int64)
			}
		default:
			ep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EnterprisePrepayment.
// This includes values selected through modifiers, order, etc.
func (ep *EnterprisePrepayment) Value(name string) (ent.Value, error) {
	return ep.selectValues.Get(name)
}

// QueryEnterprise queries the "enterprise" edge of the EnterprisePrepayment entity.
func (ep *EnterprisePrepayment) QueryEnterprise() *EnterpriseQuery {
	return NewEnterprisePrepaymentClient(ep.config).QueryEnterprise(ep)
}

// QueryAgent queries the "agent" edge of the EnterprisePrepayment entity.
func (ep *EnterprisePrepayment) QueryAgent() *AgentQuery {
	return NewEnterprisePrepaymentClient(ep.config).QueryAgent(ep)
}

// Update returns a builder for updating this EnterprisePrepayment.
// Note that you need to call EnterprisePrepayment.Unwrap() before calling this method if this EnterprisePrepayment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *EnterprisePrepayment) Update() *EnterprisePrepaymentUpdateOne {
	return NewEnterprisePrepaymentClient(ep.config).UpdateOne(ep)
}

// Unwrap unwraps the EnterprisePrepayment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *EnterprisePrepayment) Unwrap() *EnterprisePrepayment {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnterprisePrepayment is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *EnterprisePrepayment) String() string {
	var builder strings.Builder
	builder.WriteString("EnterprisePrepayment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ep.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ep.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ep.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", ep.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ep.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ep.Remark)
	builder.WriteString(", ")
	builder.WriteString("enterprise_id=")
	builder.WriteString(fmt.Sprintf("%v", ep.EnterpriseID))
	builder.WriteString(", ")
	if v := ep.AgentID; v != nil {
		builder.WriteString("agent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", ep.Amount))
	builder.WriteString(", ")
	builder.WriteString("payway=")
	builder.WriteString(fmt.Sprintf("%v", ep.Payway))
	builder.WriteByte(')')
	return builder.String()
}

// EnterprisePrepayments is a parsable slice of EnterprisePrepayment.
type EnterprisePrepayments []*EnterprisePrepayment
