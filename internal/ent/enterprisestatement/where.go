// Code generated by entc, DO NOT EDIT.

package enterprisestatement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnterpriseID), v))
	})
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// SettledAt applies equality check predicate on the "settled_at" field. It's identical to SettledAtEQ.
func SettledAt(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettledAt), v))
	})
}

// Days applies equality check predicate on the "days" field. It's identical to DaysEQ.
func Days(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDays), v))
	})
}

// RiderNumber applies equality check predicate on the "rider_number" field. It's identical to RiderNumberEQ.
func RiderNumber(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderNumber), v))
	})
}

// BillTime applies equality check predicate on the "bill_time" field. It's identical to BillTimeEQ.
func BillTime(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillTime), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnterpriseID), v))
	})
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnterpriseID), v))
	})
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEnterpriseID), v...))
	})
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEnterpriseID), v...))
	})
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCost), v))
	})
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCost), v))
	})
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...float64) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCost), v...))
	})
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...float64) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCost), v...))
	})
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCost), v))
	})
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCost), v))
	})
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCost), v))
	})
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCost), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// SettledAtEQ applies the EQ predicate on the "settled_at" field.
func SettledAtEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSettledAt), v))
	})
}

// SettledAtNEQ applies the NEQ predicate on the "settled_at" field.
func SettledAtNEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSettledAt), v))
	})
}

// SettledAtIn applies the In predicate on the "settled_at" field.
func SettledAtIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSettledAt), v...))
	})
}

// SettledAtNotIn applies the NotIn predicate on the "settled_at" field.
func SettledAtNotIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSettledAt), v...))
	})
}

// SettledAtGT applies the GT predicate on the "settled_at" field.
func SettledAtGT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSettledAt), v))
	})
}

// SettledAtGTE applies the GTE predicate on the "settled_at" field.
func SettledAtGTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSettledAt), v))
	})
}

// SettledAtLT applies the LT predicate on the "settled_at" field.
func SettledAtLT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSettledAt), v))
	})
}

// SettledAtLTE applies the LTE predicate on the "settled_at" field.
func SettledAtLTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSettledAt), v))
	})
}

// SettledAtIsNil applies the IsNil predicate on the "settled_at" field.
func SettledAtIsNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSettledAt)))
	})
}

// SettledAtNotNil applies the NotNil predicate on the "settled_at" field.
func SettledAtNotNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSettledAt)))
	})
}

// DaysEQ applies the EQ predicate on the "days" field.
func DaysEQ(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDays), v))
	})
}

// DaysNEQ applies the NEQ predicate on the "days" field.
func DaysNEQ(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDays), v))
	})
}

// DaysIn applies the In predicate on the "days" field.
func DaysIn(vs ...int) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDays), v...))
	})
}

// DaysNotIn applies the NotIn predicate on the "days" field.
func DaysNotIn(vs ...int) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDays), v...))
	})
}

// DaysGT applies the GT predicate on the "days" field.
func DaysGT(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDays), v))
	})
}

// DaysGTE applies the GTE predicate on the "days" field.
func DaysGTE(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDays), v))
	})
}

// DaysLT applies the LT predicate on the "days" field.
func DaysLT(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDays), v))
	})
}

// DaysLTE applies the LTE predicate on the "days" field.
func DaysLTE(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDays), v))
	})
}

// RiderNumberEQ applies the EQ predicate on the "rider_number" field.
func RiderNumberEQ(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderNumber), v))
	})
}

// RiderNumberNEQ applies the NEQ predicate on the "rider_number" field.
func RiderNumberNEQ(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRiderNumber), v))
	})
}

// RiderNumberIn applies the In predicate on the "rider_number" field.
func RiderNumberIn(vs ...int) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRiderNumber), v...))
	})
}

// RiderNumberNotIn applies the NotIn predicate on the "rider_number" field.
func RiderNumberNotIn(vs ...int) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRiderNumber), v...))
	})
}

// RiderNumberGT applies the GT predicate on the "rider_number" field.
func RiderNumberGT(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRiderNumber), v))
	})
}

// RiderNumberGTE applies the GTE predicate on the "rider_number" field.
func RiderNumberGTE(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRiderNumber), v))
	})
}

// RiderNumberLT applies the LT predicate on the "rider_number" field.
func RiderNumberLT(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRiderNumber), v))
	})
}

// RiderNumberLTE applies the LTE predicate on the "rider_number" field.
func RiderNumberLTE(v int) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRiderNumber), v))
	})
}

// BillTimeEQ applies the EQ predicate on the "bill_time" field.
func BillTimeEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBillTime), v))
	})
}

// BillTimeNEQ applies the NEQ predicate on the "bill_time" field.
func BillTimeNEQ(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBillTime), v))
	})
}

// BillTimeIn applies the In predicate on the "bill_time" field.
func BillTimeIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBillTime), v...))
	})
}

// BillTimeNotIn applies the NotIn predicate on the "bill_time" field.
func BillTimeNotIn(vs ...time.Time) predicate.EnterpriseStatement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBillTime), v...))
	})
}

// BillTimeGT applies the GT predicate on the "bill_time" field.
func BillTimeGT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBillTime), v))
	})
}

// BillTimeGTE applies the GTE predicate on the "bill_time" field.
func BillTimeGTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBillTime), v))
	})
}

// BillTimeLT applies the LT predicate on the "bill_time" field.
func BillTimeLT(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBillTime), v))
	})
}

// BillTimeLTE applies the LTE predicate on the "bill_time" field.
func BillTimeLTE(v time.Time) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBillTime), v))
	})
}

// BillTimeIsNil applies the IsNil predicate on the "bill_time" field.
func BillTimeIsNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBillTime)))
	})
}

// BillTimeNotNil applies the NotNil predicate on the "bill_time" field.
func BillTimeNotNil() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBillTime)))
	})
}

// HasSubscribes applies the HasEdge predicate on the "subscribes" edge.
func HasSubscribes() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscribesTable, SubscribesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribesWith applies the HasEdge predicate on the "subscribes" edge with a given conditions (other predicates).
func HasSubscribesWith(preds ...predicate.Subscribe) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscribesTable, SubscribesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnterpriseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EnterpriseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EnterpriseStatement) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EnterpriseStatement) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EnterpriseStatement) predicate.EnterpriseStatement {
	return predicate.EnterpriseStatement(func(s *sql.Selector) {
		p(s.Not())
	})
}
