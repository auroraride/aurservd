// Code generated by ent, DO NOT EDIT.

package ebike

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandID), v))
	})
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnable), v))
	})
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// Plate applies equality check predicate on the "plate" field. It's identical to PlateEQ.
func Plate(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlate), v))
	})
}

// Machine applies equality check predicate on the "machine" field. It's identical to MachineEQ.
func Machine(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMachine), v))
	})
}

// Sim applies equality check predicate on the "sim" field. It's identical to SimEQ.
func Sim(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSim), v))
	})
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColor), v))
	})
}

// ExFactory applies equality check predicate on the "ex_factory" field. It's identical to ExFactoryEQ.
func ExFactory(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExFactory), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandID), v))
	})
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrandID), v))
	})
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBrandID), v...))
	})
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBrandID), v...))
	})
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRiderID), v))
	})
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRiderID), v...))
	})
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRiderID), v...))
	})
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRiderID)))
	})
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRiderID)))
	})
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreID), v))
	})
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreID), v...))
	})
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreID), v...))
	})
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreID)))
	})
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreID)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...model.EbikeStatus) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...model.EbikeStatus) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnable), v))
	})
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnable), v))
	})
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSn), v))
	})
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSn), v...))
	})
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSn), v...))
	})
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSn), v))
	})
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSn), v))
	})
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSn), v))
	})
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSn), v))
	})
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSn), v))
	})
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSn), v))
	})
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSn), v))
	})
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSn), v))
	})
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSn), v))
	})
}

// PlateEQ applies the EQ predicate on the "plate" field.
func PlateEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlate), v))
	})
}

// PlateNEQ applies the NEQ predicate on the "plate" field.
func PlateNEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlate), v))
	})
}

// PlateIn applies the In predicate on the "plate" field.
func PlateIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlate), v...))
	})
}

// PlateNotIn applies the NotIn predicate on the "plate" field.
func PlateNotIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlate), v...))
	})
}

// PlateGT applies the GT predicate on the "plate" field.
func PlateGT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlate), v))
	})
}

// PlateGTE applies the GTE predicate on the "plate" field.
func PlateGTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlate), v))
	})
}

// PlateLT applies the LT predicate on the "plate" field.
func PlateLT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlate), v))
	})
}

// PlateLTE applies the LTE predicate on the "plate" field.
func PlateLTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlate), v))
	})
}

// PlateContains applies the Contains predicate on the "plate" field.
func PlateContains(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlate), v))
	})
}

// PlateHasPrefix applies the HasPrefix predicate on the "plate" field.
func PlateHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlate), v))
	})
}

// PlateHasSuffix applies the HasSuffix predicate on the "plate" field.
func PlateHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlate), v))
	})
}

// PlateIsNil applies the IsNil predicate on the "plate" field.
func PlateIsNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlate)))
	})
}

// PlateNotNil applies the NotNil predicate on the "plate" field.
func PlateNotNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlate)))
	})
}

// PlateEqualFold applies the EqualFold predicate on the "plate" field.
func PlateEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlate), v))
	})
}

// PlateContainsFold applies the ContainsFold predicate on the "plate" field.
func PlateContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlate), v))
	})
}

// MachineEQ applies the EQ predicate on the "machine" field.
func MachineEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMachine), v))
	})
}

// MachineNEQ applies the NEQ predicate on the "machine" field.
func MachineNEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMachine), v))
	})
}

// MachineIn applies the In predicate on the "machine" field.
func MachineIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMachine), v...))
	})
}

// MachineNotIn applies the NotIn predicate on the "machine" field.
func MachineNotIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMachine), v...))
	})
}

// MachineGT applies the GT predicate on the "machine" field.
func MachineGT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMachine), v))
	})
}

// MachineGTE applies the GTE predicate on the "machine" field.
func MachineGTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMachine), v))
	})
}

// MachineLT applies the LT predicate on the "machine" field.
func MachineLT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMachine), v))
	})
}

// MachineLTE applies the LTE predicate on the "machine" field.
func MachineLTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMachine), v))
	})
}

// MachineContains applies the Contains predicate on the "machine" field.
func MachineContains(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMachine), v))
	})
}

// MachineHasPrefix applies the HasPrefix predicate on the "machine" field.
func MachineHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMachine), v))
	})
}

// MachineHasSuffix applies the HasSuffix predicate on the "machine" field.
func MachineHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMachine), v))
	})
}

// MachineIsNil applies the IsNil predicate on the "machine" field.
func MachineIsNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMachine)))
	})
}

// MachineNotNil applies the NotNil predicate on the "machine" field.
func MachineNotNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMachine)))
	})
}

// MachineEqualFold applies the EqualFold predicate on the "machine" field.
func MachineEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMachine), v))
	})
}

// MachineContainsFold applies the ContainsFold predicate on the "machine" field.
func MachineContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMachine), v))
	})
}

// SimEQ applies the EQ predicate on the "sim" field.
func SimEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSim), v))
	})
}

// SimNEQ applies the NEQ predicate on the "sim" field.
func SimNEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSim), v))
	})
}

// SimIn applies the In predicate on the "sim" field.
func SimIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSim), v...))
	})
}

// SimNotIn applies the NotIn predicate on the "sim" field.
func SimNotIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSim), v...))
	})
}

// SimGT applies the GT predicate on the "sim" field.
func SimGT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSim), v))
	})
}

// SimGTE applies the GTE predicate on the "sim" field.
func SimGTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSim), v))
	})
}

// SimLT applies the LT predicate on the "sim" field.
func SimLT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSim), v))
	})
}

// SimLTE applies the LTE predicate on the "sim" field.
func SimLTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSim), v))
	})
}

// SimContains applies the Contains predicate on the "sim" field.
func SimContains(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSim), v))
	})
}

// SimHasPrefix applies the HasPrefix predicate on the "sim" field.
func SimHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSim), v))
	})
}

// SimHasSuffix applies the HasSuffix predicate on the "sim" field.
func SimHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSim), v))
	})
}

// SimIsNil applies the IsNil predicate on the "sim" field.
func SimIsNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSim)))
	})
}

// SimNotNil applies the NotNil predicate on the "sim" field.
func SimNotNil() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSim)))
	})
}

// SimEqualFold applies the EqualFold predicate on the "sim" field.
func SimEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSim), v))
	})
}

// SimContainsFold applies the ContainsFold predicate on the "sim" field.
func SimContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSim), v))
	})
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldColor), v))
	})
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldColor), v))
	})
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldColor), v...))
	})
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldColor), v...))
	})
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldColor), v))
	})
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldColor), v))
	})
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldColor), v))
	})
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldColor), v))
	})
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldColor), v))
	})
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldColor), v))
	})
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldColor), v))
	})
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldColor), v))
	})
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldColor), v))
	})
}

// ExFactoryEQ applies the EQ predicate on the "ex_factory" field.
func ExFactoryEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExFactory), v))
	})
}

// ExFactoryNEQ applies the NEQ predicate on the "ex_factory" field.
func ExFactoryNEQ(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExFactory), v))
	})
}

// ExFactoryIn applies the In predicate on the "ex_factory" field.
func ExFactoryIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExFactory), v...))
	})
}

// ExFactoryNotIn applies the NotIn predicate on the "ex_factory" field.
func ExFactoryNotIn(vs ...string) predicate.Ebike {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExFactory), v...))
	})
}

// ExFactoryGT applies the GT predicate on the "ex_factory" field.
func ExFactoryGT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExFactory), v))
	})
}

// ExFactoryGTE applies the GTE predicate on the "ex_factory" field.
func ExFactoryGTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExFactory), v))
	})
}

// ExFactoryLT applies the LT predicate on the "ex_factory" field.
func ExFactoryLT(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExFactory), v))
	})
}

// ExFactoryLTE applies the LTE predicate on the "ex_factory" field.
func ExFactoryLTE(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExFactory), v))
	})
}

// ExFactoryContains applies the Contains predicate on the "ex_factory" field.
func ExFactoryContains(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExFactory), v))
	})
}

// ExFactoryHasPrefix applies the HasPrefix predicate on the "ex_factory" field.
func ExFactoryHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExFactory), v))
	})
}

// ExFactoryHasSuffix applies the HasSuffix predicate on the "ex_factory" field.
func ExFactoryHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExFactory), v))
	})
}

// ExFactoryEqualFold applies the EqualFold predicate on the "ex_factory" field.
func ExFactoryEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExFactory), v))
	})
}

// ExFactoryContainsFold applies the ContainsFold predicate on the "ex_factory" field.
func ExFactoryContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExFactory), v))
	})
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BrandTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.EbikeBrand) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BrandInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ebike) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ebike) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ebike) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		p(s.Not())
	})
}
