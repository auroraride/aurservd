// Code generated by ent, DO NOT EDIT.

package ebike

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldUpdatedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldRemark, v))
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldBrandID, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldRiderID, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldStoreID, v))
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldEnterpriseID, v))
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldStationID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldStatus, v))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldEnable, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldSn, v))
}

// Plate applies equality check predicate on the "plate" field. It's identical to PlateEQ.
func Plate(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldPlate, v))
}

// Machine applies equality check predicate on the "machine" field. It's identical to MachineEQ.
func Machine(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldMachine, v))
}

// Sim applies equality check predicate on the "sim" field. It's identical to SimEQ.
func Sim(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldSim, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldColor, v))
}

// ExFactory applies equality check predicate on the "ex_factory" field. It's identical to ExFactoryEQ.
func ExFactory(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldExFactory, v))
}

// RtoRiderID applies equality check predicate on the "rto_rider_id" field. It's identical to RtoRiderIDEQ.
func RtoRiderID(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldRtoRiderID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContainsFold(FieldRemark, v))
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldBrandID, v))
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldBrandID, v))
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldBrandID, vs...))
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldBrandID, vs...))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldRiderID))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldStoreID))
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldStoreID))
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldEnterpriseID, v))
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldEnterpriseID, v))
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDIsNil applies the IsNil predicate on the "enterprise_id" field.
func EnterpriseIDIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldEnterpriseID))
}

// EnterpriseIDNotNil applies the NotNil predicate on the "enterprise_id" field.
func EnterpriseIDNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldEnterpriseID))
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldStationID, v))
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldStationID, v))
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldStationID, vs...))
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldStationID, vs...))
}

// StationIDIsNil applies the IsNil predicate on the "station_id" field.
func StationIDIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldStationID))
}

// StationIDNotNil applies the NotNil predicate on the "station_id" field.
func StationIDNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldStationID))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v model.EbikeStatus) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldStatus, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldEnable, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContainsFold(FieldSn, v))
}

// PlateEQ applies the EQ predicate on the "plate" field.
func PlateEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldPlate, v))
}

// PlateNEQ applies the NEQ predicate on the "plate" field.
func PlateNEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldPlate, v))
}

// PlateIn applies the In predicate on the "plate" field.
func PlateIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldPlate, vs...))
}

// PlateNotIn applies the NotIn predicate on the "plate" field.
func PlateNotIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldPlate, vs...))
}

// PlateGT applies the GT predicate on the "plate" field.
func PlateGT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldPlate, v))
}

// PlateGTE applies the GTE predicate on the "plate" field.
func PlateGTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldPlate, v))
}

// PlateLT applies the LT predicate on the "plate" field.
func PlateLT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldPlate, v))
}

// PlateLTE applies the LTE predicate on the "plate" field.
func PlateLTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldPlate, v))
}

// PlateContains applies the Contains predicate on the "plate" field.
func PlateContains(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContains(FieldPlate, v))
}

// PlateHasPrefix applies the HasPrefix predicate on the "plate" field.
func PlateHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasPrefix(FieldPlate, v))
}

// PlateHasSuffix applies the HasSuffix predicate on the "plate" field.
func PlateHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasSuffix(FieldPlate, v))
}

// PlateIsNil applies the IsNil predicate on the "plate" field.
func PlateIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldPlate))
}

// PlateNotNil applies the NotNil predicate on the "plate" field.
func PlateNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldPlate))
}

// PlateEqualFold applies the EqualFold predicate on the "plate" field.
func PlateEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEqualFold(FieldPlate, v))
}

// PlateContainsFold applies the ContainsFold predicate on the "plate" field.
func PlateContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContainsFold(FieldPlate, v))
}

// MachineEQ applies the EQ predicate on the "machine" field.
func MachineEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldMachine, v))
}

// MachineNEQ applies the NEQ predicate on the "machine" field.
func MachineNEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldMachine, v))
}

// MachineIn applies the In predicate on the "machine" field.
func MachineIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldMachine, vs...))
}

// MachineNotIn applies the NotIn predicate on the "machine" field.
func MachineNotIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldMachine, vs...))
}

// MachineGT applies the GT predicate on the "machine" field.
func MachineGT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldMachine, v))
}

// MachineGTE applies the GTE predicate on the "machine" field.
func MachineGTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldMachine, v))
}

// MachineLT applies the LT predicate on the "machine" field.
func MachineLT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldMachine, v))
}

// MachineLTE applies the LTE predicate on the "machine" field.
func MachineLTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldMachine, v))
}

// MachineContains applies the Contains predicate on the "machine" field.
func MachineContains(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContains(FieldMachine, v))
}

// MachineHasPrefix applies the HasPrefix predicate on the "machine" field.
func MachineHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasPrefix(FieldMachine, v))
}

// MachineHasSuffix applies the HasSuffix predicate on the "machine" field.
func MachineHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasSuffix(FieldMachine, v))
}

// MachineIsNil applies the IsNil predicate on the "machine" field.
func MachineIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldMachine))
}

// MachineNotNil applies the NotNil predicate on the "machine" field.
func MachineNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldMachine))
}

// MachineEqualFold applies the EqualFold predicate on the "machine" field.
func MachineEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEqualFold(FieldMachine, v))
}

// MachineContainsFold applies the ContainsFold predicate on the "machine" field.
func MachineContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContainsFold(FieldMachine, v))
}

// SimEQ applies the EQ predicate on the "sim" field.
func SimEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldSim, v))
}

// SimNEQ applies the NEQ predicate on the "sim" field.
func SimNEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldSim, v))
}

// SimIn applies the In predicate on the "sim" field.
func SimIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldSim, vs...))
}

// SimNotIn applies the NotIn predicate on the "sim" field.
func SimNotIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldSim, vs...))
}

// SimGT applies the GT predicate on the "sim" field.
func SimGT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldSim, v))
}

// SimGTE applies the GTE predicate on the "sim" field.
func SimGTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldSim, v))
}

// SimLT applies the LT predicate on the "sim" field.
func SimLT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldSim, v))
}

// SimLTE applies the LTE predicate on the "sim" field.
func SimLTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldSim, v))
}

// SimContains applies the Contains predicate on the "sim" field.
func SimContains(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContains(FieldSim, v))
}

// SimHasPrefix applies the HasPrefix predicate on the "sim" field.
func SimHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasPrefix(FieldSim, v))
}

// SimHasSuffix applies the HasSuffix predicate on the "sim" field.
func SimHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasSuffix(FieldSim, v))
}

// SimIsNil applies the IsNil predicate on the "sim" field.
func SimIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldSim))
}

// SimNotNil applies the NotNil predicate on the "sim" field.
func SimNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldSim))
}

// SimEqualFold applies the EqualFold predicate on the "sim" field.
func SimEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEqualFold(FieldSim, v))
}

// SimContainsFold applies the ContainsFold predicate on the "sim" field.
func SimContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContainsFold(FieldSim, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasSuffix(FieldColor, v))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContainsFold(FieldColor, v))
}

// ExFactoryEQ applies the EQ predicate on the "ex_factory" field.
func ExFactoryEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldExFactory, v))
}

// ExFactoryNEQ applies the NEQ predicate on the "ex_factory" field.
func ExFactoryNEQ(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldExFactory, v))
}

// ExFactoryIn applies the In predicate on the "ex_factory" field.
func ExFactoryIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldExFactory, vs...))
}

// ExFactoryNotIn applies the NotIn predicate on the "ex_factory" field.
func ExFactoryNotIn(vs ...string) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldExFactory, vs...))
}

// ExFactoryGT applies the GT predicate on the "ex_factory" field.
func ExFactoryGT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGT(FieldExFactory, v))
}

// ExFactoryGTE applies the GTE predicate on the "ex_factory" field.
func ExFactoryGTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldGTE(FieldExFactory, v))
}

// ExFactoryLT applies the LT predicate on the "ex_factory" field.
func ExFactoryLT(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLT(FieldExFactory, v))
}

// ExFactoryLTE applies the LTE predicate on the "ex_factory" field.
func ExFactoryLTE(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldLTE(FieldExFactory, v))
}

// ExFactoryContains applies the Contains predicate on the "ex_factory" field.
func ExFactoryContains(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContains(FieldExFactory, v))
}

// ExFactoryHasPrefix applies the HasPrefix predicate on the "ex_factory" field.
func ExFactoryHasPrefix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasPrefix(FieldExFactory, v))
}

// ExFactoryHasSuffix applies the HasSuffix predicate on the "ex_factory" field.
func ExFactoryHasSuffix(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldHasSuffix(FieldExFactory, v))
}

// ExFactoryEqualFold applies the EqualFold predicate on the "ex_factory" field.
func ExFactoryEqualFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldEqualFold(FieldExFactory, v))
}

// ExFactoryContainsFold applies the ContainsFold predicate on the "ex_factory" field.
func ExFactoryContainsFold(v string) predicate.Ebike {
	return predicate.Ebike(sql.FieldContainsFold(FieldExFactory, v))
}

// RtoRiderIDEQ applies the EQ predicate on the "rto_rider_id" field.
func RtoRiderIDEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldEQ(FieldRtoRiderID, v))
}

// RtoRiderIDNEQ applies the NEQ predicate on the "rto_rider_id" field.
func RtoRiderIDNEQ(v uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNEQ(FieldRtoRiderID, v))
}

// RtoRiderIDIn applies the In predicate on the "rto_rider_id" field.
func RtoRiderIDIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldIn(FieldRtoRiderID, vs...))
}

// RtoRiderIDNotIn applies the NotIn predicate on the "rto_rider_id" field.
func RtoRiderIDNotIn(vs ...uint64) predicate.Ebike {
	return predicate.Ebike(sql.FieldNotIn(FieldRtoRiderID, vs...))
}

// RtoRiderIDIsNil applies the IsNil predicate on the "rto_rider_id" field.
func RtoRiderIDIsNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldIsNull(FieldRtoRiderID))
}

// RtoRiderIDNotNil applies the NotNil predicate on the "rto_rider_id" field.
func RtoRiderIDNotNil() predicate.Ebike {
	return predicate.Ebike(sql.FieldNotNull(FieldRtoRiderID))
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.EbikeBrand) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := newBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := newEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.EnterpriseStation) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAllocates applies the HasEdge predicate on the "allocates" edge.
func HasAllocates() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AllocatesTable, AllocatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAllocatesWith applies the HasEdge predicate on the "allocates" edge with a given conditions (other predicates).
func HasAllocatesWith(preds ...predicate.Allocate) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := newAllocatesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRtoRider applies the HasEdge predicate on the "rto_rider" edge.
func HasRtoRider() predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RtoRiderTable, RtoRiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRtoRiderWith applies the HasEdge predicate on the "rto_rider" edge with a given conditions (other predicates).
func HasRtoRiderWith(preds ...predicate.Rider) predicate.Ebike {
	return predicate.Ebike(func(s *sql.Selector) {
		step := newRtoRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ebike) predicate.Ebike {
	return predicate.Ebike(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ebike) predicate.Ebike {
	return predicate.Ebike(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ebike) predicate.Ebike {
	return predicate.Ebike(sql.NotPredicates(p))
}
