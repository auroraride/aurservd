// Code generated by ent, DO NOT EDIT.

package ebike

import (
	"time"

	"entgo.io/ent"
	"github.com/auroraride/aurservd/app/model"
)

const (
	// Label holds the string label denoting the ebike type in the database.
	Label = "ebike"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldPlate holds the string denoting the plate field in the database.
	FieldPlate = "plate"
	// FieldMachine holds the string denoting the machine field in the database.
	FieldMachine = "machine"
	// FieldSim holds the string denoting the sim field in the database.
	FieldSim = "sim"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldExFactory holds the string denoting the ex_factory field in the database.
	FieldExFactory = "ex_factory"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// Table holds the table name of the ebike in the database.
	Table = "ebike"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "ebike"
	// BrandInverseTable is the table name for the EbikeBrand entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrand" package.
	BrandInverseTable = "ebike_brand"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "ebike"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "ebike"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
)

// Columns holds all SQL columns for ebike fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldBrandID,
	FieldRiderID,
	FieldStoreID,
	FieldStatus,
	FieldEnable,
	FieldSn,
	FieldPlate,
	FieldMachine,
	FieldSim,
	FieldColor,
	FieldExFactory,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus model.EbikeStatus
	// DefaultEnable holds the default value on creation for the "enable" field.
	DefaultEnable bool
	// DefaultColor holds the default value on creation for the "color" field.
	DefaultColor string
)
