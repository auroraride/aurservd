// Code generated by ent, DO NOT EDIT.

package ebike

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/app/model"
)

const (
	// Label holds the string label denoting the ebike type in the database.
	Label = "ebike"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldPlate holds the string denoting the plate field in the database.
	FieldPlate = "plate"
	// FieldMachine holds the string denoting the machine field in the database.
	FieldMachine = "machine"
	// FieldSim holds the string denoting the sim field in the database.
	FieldSim = "sim"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldExFactory holds the string denoting the ex_factory field in the database.
	FieldExFactory = "ex_factory"
	// FieldRto holds the string denoting the rto field in the database.
	FieldRto = "rto"
	// FieldRtoRiderID holds the string denoting the rto_rider_id field in the database.
	FieldRtoRiderID = "rto_rider_id"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeAllocates holds the string denoting the allocates edge name in mutations.
	EdgeAllocates = "allocates"
	// EdgeRtoRider holds the string denoting the rto_rider edge name in mutations.
	EdgeRtoRider = "rto_rider"
	// Table holds the table name of the ebike in the database.
	Table = "ebike"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "ebike"
	// BrandInverseTable is the table name for the EbikeBrand entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrand" package.
	BrandInverseTable = "ebike_brand"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "ebike"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "ebike"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "ebike"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "ebike"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// AllocatesTable is the table that holds the allocates relation/edge.
	AllocatesTable = "allocate"
	// AllocatesInverseTable is the table name for the Allocate entity.
	// It exists in this package in order to avoid circular dependency with the "allocate" package.
	AllocatesInverseTable = "allocate"
	// AllocatesColumn is the table column denoting the allocates relation/edge.
	AllocatesColumn = "ebike_id"
	// RtoRiderTable is the table that holds the rto_rider relation/edge.
	RtoRiderTable = "ebike"
	// RtoRiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RtoRiderInverseTable = "rider"
	// RtoRiderColumn is the table column denoting the rto_rider relation/edge.
	RtoRiderColumn = "rto_rider_id"
)

// Columns holds all SQL columns for ebike fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldBrandID,
	FieldRiderID,
	FieldStoreID,
	FieldEnterpriseID,
	FieldStationID,
	FieldStatus,
	FieldEnable,
	FieldSn,
	FieldPlate,
	FieldMachine,
	FieldSim,
	FieldColor,
	FieldExFactory,
	FieldRto,
	FieldRtoRiderID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus model.EbikeStatus
	// DefaultEnable holds the default value on creation for the "enable" field.
	DefaultEnable bool
	// DefaultColor holds the default value on creation for the "color" field.
	DefaultColor string
	// DefaultRto holds the default value on creation for the "rto" field.
	DefaultRto bool
)

// OrderOption defines the ordering options for the Ebike queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByBrandID orders the results by the brand_id field.
func ByBrandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByEnterpriseID orders the results by the enterprise_id field.
func ByEnterpriseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterpriseID, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByPlate orders the results by the plate field.
func ByPlate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlate, opts...).ToFunc()
}

// ByMachine orders the results by the machine field.
func ByMachine(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMachine, opts...).ToFunc()
}

// BySim orders the results by the sim field.
func BySim(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSim, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByExFactory orders the results by the ex_factory field.
func ByExFactory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExFactory, opts...).ToFunc()
}

// ByRto orders the results by the rto field.
func ByRto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRto, opts...).ToFunc()
}

// ByRtoRiderID orders the results by the rto_rider_id field.
func ByRtoRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRtoRiderID, opts...).ToFunc()
}

// ByBrandField orders the results by brand field.
func ByBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnterpriseField orders the results by enterprise field.
func ByEnterpriseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnterpriseStep(), sql.OrderByField(field, opts...))
	}
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByAllocatesCount orders the results by allocates count.
func ByAllocatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAllocatesStep(), opts...)
	}
}

// ByAllocates orders the results by allocates terms.
func ByAllocates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAllocatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRtoRiderField orders the results by rto_rider field.
func ByRtoRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRtoRiderStep(), sql.OrderByField(field, opts...))
	}
}
func newBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
func newEnterpriseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnterpriseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EnterpriseTable, EnterpriseColumn),
	)
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
	)
}
func newAllocatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AllocatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AllocatesTable, AllocatesColumn),
	)
}
func newRtoRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RtoRiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RtoRiderTable, RtoRiderColumn),
	)
}
