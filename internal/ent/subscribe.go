// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// Subscribe is the model entity for the Subscribe schema.
type Subscribe struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 骑士卡ID
	PlanID *uint64 `json:"plan_id,omitempty"`
	// 店员ID
	EmployeeID *uint64 `json:"employee_id,omitempty"`
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// 站点ID
	StationID *uint64 `json:"station_id,omitempty"`
	// 门店ID
	StoreID *uint64 `json:"store_id,omitempty"`
	// 电柜ID
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// 初始订单ID(开通订阅的初始订单), 团签用户无此字段
	InitialOrderID uint64 `json:"initial_order_id,omitempty"`
	// 企业ID
	EnterpriseID *uint64 `json:"enterprise_id,omitempty"`
	// 当前订阅状态
	Status uint8 `json:"status,omitempty"`
	// 订阅类型 0团签 1新签 2续签 3重签 4更改电池, 除0值外 其他值参考order.type
	Type uint `json:"type,omitempty"`
	// 电池型号
	Model string `json:"model,omitempty"`
	// 初始骑士卡天数, 个签和代理模式团签有此字段
	InitialDays int `json:"initial_days,omitempty"`
	// 改动天数
	AlterDays int `json:"alter_days,omitempty"`
	// 寄存天数
	PauseDays int `json:"pause_days,omitempty"`
	// 暂停天数
	SuspendDays int `json:"suspend_days,omitempty"`
	// 续期天数
	RenewalDays int `json:"renewal_days,omitempty"`
	// 已缴纳逾期滞纳金天数
	OverdueDays int `json:"overdue_days,omitempty"`
	// 剩余天数, 负数为逾期, 代理商骑手剩余时间根据agent_end_at计算
	Remaining int `json:"remaining,omitempty"`
	// 当前寄存时间
	PausedAt *time.Time `json:"paused_at,omitempty"`
	// 当前暂停时间
	SuspendAt *time.Time `json:"suspend_at,omitempty"`
	// 激活时间
	StartAt *time.Time `json:"start_at,omitempty"`
	// 归还/团签结束时间
	EndAt *time.Time `json:"end_at,omitempty"`
	// 退款时间
	RefundAt *time.Time `json:"refund_at,omitempty"`
	// 退租理由
	UnsubscribeReason string `json:"unsubscribe_reason,omitempty"`
	// 上次结算日期(包含该日期)
	LastBillDate *time.Time `json:"last_bill_date,omitempty"`
	// 是否超期退租
	PauseOverdue bool `json:"pause_overdue,omitempty"`
	// 代理商处到期日期
	AgentEndAt *time.Time `json:"agent_end_at,omitempty"`
	// 计算公式
	Formula *string `json:"formula,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscribeQuery when eager-loading is set.
	Edges SubscribeEdges `json:"edges"`
}

// SubscribeEdges holds the relations/edges for other nodes in the graph.
type SubscribeEdges struct {
	// Plan holds the value of the plan edge.
	Plan *Plan `json:"plan,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Station holds the value of the station edge.
	Station *EnterpriseStation `json:"station,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Pauses holds the value of the pauses edge.
	Pauses []*SubscribePause `json:"pauses,omitempty"`
	// Suspends holds the value of the suspends edge.
	Suspends []*SubscribeSuspend `json:"suspends,omitempty"`
	// Alters holds the value of the alters edge.
	Alters []*SubscribeAlter `json:"alters,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// 对应初始订单
	InitialOrder *Order `json:"initial_order,omitempty"`
	// Bills holds the value of the bills edge.
	Bills []*EnterpriseBill `json:"bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [14]bool
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) PlanOrErr() (*Plan, error) {
	if e.loadedTypes[0] {
		if e.Plan == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Plan, nil
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[2] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) StationOrErr() (*EnterpriseStation, error) {
	if e.loadedTypes[3] {
		if e.Station == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprisestation.Label}
		}
		return e.Station, nil
	}
	return nil, &NotLoadedError{edge: "station"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[4] {
		if e.Store == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[5] {
		if e.Cabinet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[6] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[7] {
		if e.Enterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// PausesOrErr returns the Pauses value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) PausesOrErr() ([]*SubscribePause, error) {
	if e.loadedTypes[8] {
		return e.Pauses, nil
	}
	return nil, &NotLoadedError{edge: "pauses"}
}

// SuspendsOrErr returns the Suspends value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) SuspendsOrErr() ([]*SubscribeSuspend, error) {
	if e.loadedTypes[9] {
		return e.Suspends, nil
	}
	return nil, &NotLoadedError{edge: "suspends"}
}

// AltersOrErr returns the Alters value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) AltersOrErr() ([]*SubscribeAlter, error) {
	if e.loadedTypes[10] {
		return e.Alters, nil
	}
	return nil, &NotLoadedError{edge: "alters"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[11] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// InitialOrderOrErr returns the InitialOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) InitialOrderOrErr() (*Order, error) {
	if e.loadedTypes[12] {
		if e.InitialOrder == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.InitialOrder, nil
	}
	return nil, &NotLoadedError{edge: "initial_order"}
}

// BillsOrErr returns the Bills value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) BillsOrErr() ([]*EnterpriseBill, error) {
	if e.loadedTypes[13] {
		return e.Bills, nil
	}
	return nil, &NotLoadedError{edge: "bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscribe) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscribe.FieldCreator, subscribe.FieldLastModifier:
			values[i] = new([]byte)
		case subscribe.FieldPauseOverdue:
			values[i] = new(sql.NullBool)
		case subscribe.FieldID, subscribe.FieldPlanID, subscribe.FieldEmployeeID, subscribe.FieldCityID, subscribe.FieldStationID, subscribe.FieldStoreID, subscribe.FieldCabinetID, subscribe.FieldRiderID, subscribe.FieldInitialOrderID, subscribe.FieldEnterpriseID, subscribe.FieldStatus, subscribe.FieldType, subscribe.FieldInitialDays, subscribe.FieldAlterDays, subscribe.FieldPauseDays, subscribe.FieldSuspendDays, subscribe.FieldRenewalDays, subscribe.FieldOverdueDays, subscribe.FieldRemaining:
			values[i] = new(sql.NullInt64)
		case subscribe.FieldRemark, subscribe.FieldModel, subscribe.FieldUnsubscribeReason, subscribe.FieldFormula:
			values[i] = new(sql.NullString)
		case subscribe.FieldCreatedAt, subscribe.FieldUpdatedAt, subscribe.FieldDeletedAt, subscribe.FieldPausedAt, subscribe.FieldSuspendAt, subscribe.FieldStartAt, subscribe.FieldEndAt, subscribe.FieldRefundAt, subscribe.FieldLastBillDate, subscribe.FieldAgentEndAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Subscribe", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscribe fields.
func (s *Subscribe) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscribe.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case subscribe.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case subscribe.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case subscribe.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case subscribe.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case subscribe.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case subscribe.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				s.Remark = value.String
			}
		case subscribe.FieldPlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				s.PlanID = new(uint64)
				*s.PlanID = uint64(value.Int64)
			}
		case subscribe.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				s.EmployeeID = new(uint64)
				*s.EmployeeID = uint64(value.Int64)
			}
		case subscribe.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				s.CityID = uint64(value.Int64)
			}
		case subscribe.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				s.StationID = new(uint64)
				*s.StationID = uint64(value.Int64)
			}
		case subscribe.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				s.StoreID = new(uint64)
				*s.StoreID = uint64(value.Int64)
			}
		case subscribe.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				s.CabinetID = new(uint64)
				*s.CabinetID = uint64(value.Int64)
			}
		case subscribe.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				s.RiderID = uint64(value.Int64)
			}
		case subscribe.FieldInitialOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field initial_order_id", values[i])
			} else if value.Valid {
				s.InitialOrderID = uint64(value.Int64)
			}
		case subscribe.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				s.EnterpriseID = new(uint64)
				*s.EnterpriseID = uint64(value.Int64)
			}
		case subscribe.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = uint8(value.Int64)
			}
		case subscribe.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = uint(value.Int64)
			}
		case subscribe.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				s.Model = value.String
			}
		case subscribe.FieldInitialDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field initial_days", values[i])
			} else if value.Valid {
				s.InitialDays = int(value.Int64)
			}
		case subscribe.FieldAlterDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alter_days", values[i])
			} else if value.Valid {
				s.AlterDays = int(value.Int64)
			}
		case subscribe.FieldPauseDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pause_days", values[i])
			} else if value.Valid {
				s.PauseDays = int(value.Int64)
			}
		case subscribe.FieldSuspendDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field suspend_days", values[i])
			} else if value.Valid {
				s.SuspendDays = int(value.Int64)
			}
		case subscribe.FieldRenewalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_days", values[i])
			} else if value.Valid {
				s.RenewalDays = int(value.Int64)
			}
		case subscribe.FieldOverdueDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field overdue_days", values[i])
			} else if value.Valid {
				s.OverdueDays = int(value.Int64)
			}
		case subscribe.FieldRemaining:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field remaining", values[i])
			} else if value.Valid {
				s.Remaining = int(value.Int64)
			}
		case subscribe.FieldPausedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paused_at", values[i])
			} else if value.Valid {
				s.PausedAt = new(time.Time)
				*s.PausedAt = value.Time
			}
		case subscribe.FieldSuspendAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field suspend_at", values[i])
			} else if value.Valid {
				s.SuspendAt = new(time.Time)
				*s.SuspendAt = value.Time
			}
		case subscribe.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				s.StartAt = new(time.Time)
				*s.StartAt = value.Time
			}
		case subscribe.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				s.EndAt = new(time.Time)
				*s.EndAt = value.Time
			}
		case subscribe.FieldRefundAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_at", values[i])
			} else if value.Valid {
				s.RefundAt = new(time.Time)
				*s.RefundAt = value.Time
			}
		case subscribe.FieldUnsubscribeReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unsubscribe_reason", values[i])
			} else if value.Valid {
				s.UnsubscribeReason = value.String
			}
		case subscribe.FieldLastBillDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_bill_date", values[i])
			} else if value.Valid {
				s.LastBillDate = new(time.Time)
				*s.LastBillDate = value.Time
			}
		case subscribe.FieldPauseOverdue:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pause_overdue", values[i])
			} else if value.Valid {
				s.PauseOverdue = value.Bool
			}
		case subscribe.FieldAgentEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field agent_end_at", values[i])
			} else if value.Valid {
				s.AgentEndAt = new(time.Time)
				*s.AgentEndAt = value.Time
			}
		case subscribe.FieldFormula:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field formula", values[i])
			} else if value.Valid {
				s.Formula = new(string)
				*s.Formula = value.String
			}
		}
	}
	return nil
}

// QueryPlan queries the "plan" edge of the Subscribe entity.
func (s *Subscribe) QueryPlan() *PlanQuery {
	return (&SubscribeClient{config: s.config}).QueryPlan(s)
}

// QueryEmployee queries the "employee" edge of the Subscribe entity.
func (s *Subscribe) QueryEmployee() *EmployeeQuery {
	return (&SubscribeClient{config: s.config}).QueryEmployee(s)
}

// QueryCity queries the "city" edge of the Subscribe entity.
func (s *Subscribe) QueryCity() *CityQuery {
	return (&SubscribeClient{config: s.config}).QueryCity(s)
}

// QueryStation queries the "station" edge of the Subscribe entity.
func (s *Subscribe) QueryStation() *EnterpriseStationQuery {
	return (&SubscribeClient{config: s.config}).QueryStation(s)
}

// QueryStore queries the "store" edge of the Subscribe entity.
func (s *Subscribe) QueryStore() *StoreQuery {
	return (&SubscribeClient{config: s.config}).QueryStore(s)
}

// QueryCabinet queries the "cabinet" edge of the Subscribe entity.
func (s *Subscribe) QueryCabinet() *CabinetQuery {
	return (&SubscribeClient{config: s.config}).QueryCabinet(s)
}

// QueryRider queries the "rider" edge of the Subscribe entity.
func (s *Subscribe) QueryRider() *RiderQuery {
	return (&SubscribeClient{config: s.config}).QueryRider(s)
}

// QueryEnterprise queries the "enterprise" edge of the Subscribe entity.
func (s *Subscribe) QueryEnterprise() *EnterpriseQuery {
	return (&SubscribeClient{config: s.config}).QueryEnterprise(s)
}

// QueryPauses queries the "pauses" edge of the Subscribe entity.
func (s *Subscribe) QueryPauses() *SubscribePauseQuery {
	return (&SubscribeClient{config: s.config}).QueryPauses(s)
}

// QuerySuspends queries the "suspends" edge of the Subscribe entity.
func (s *Subscribe) QuerySuspends() *SubscribeSuspendQuery {
	return (&SubscribeClient{config: s.config}).QuerySuspends(s)
}

// QueryAlters queries the "alters" edge of the Subscribe entity.
func (s *Subscribe) QueryAlters() *SubscribeAlterQuery {
	return (&SubscribeClient{config: s.config}).QueryAlters(s)
}

// QueryOrders queries the "orders" edge of the Subscribe entity.
func (s *Subscribe) QueryOrders() *OrderQuery {
	return (&SubscribeClient{config: s.config}).QueryOrders(s)
}

// QueryInitialOrder queries the "initial_order" edge of the Subscribe entity.
func (s *Subscribe) QueryInitialOrder() *OrderQuery {
	return (&SubscribeClient{config: s.config}).QueryInitialOrder(s)
}

// QueryBills queries the "bills" edge of the Subscribe entity.
func (s *Subscribe) QueryBills() *EnterpriseBillQuery {
	return (&SubscribeClient{config: s.config}).QueryBills(s)
}

// Update returns a builder for updating this Subscribe.
// Note that you need to call Subscribe.Unwrap() before calling this method if this Subscribe
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscribe) Update() *SubscribeUpdateOne {
	return (&SubscribeClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Subscribe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscribe) Unwrap() *Subscribe {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subscribe is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscribe) String() string {
	var builder strings.Builder
	builder.WriteString("Subscribe(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", s.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", s.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(s.Remark)
	builder.WriteString(", ")
	if v := s.PlanID; v != nil {
		builder.WriteString("plan_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.EmployeeID; v != nil {
		builder.WriteString("employee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("city_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CityID))
	builder.WriteString(", ")
	if v := s.StationID; v != nil {
		builder.WriteString("station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.StoreID; v != nil {
		builder.WriteString("store_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", s.RiderID))
	builder.WriteString(", ")
	builder.WriteString("initial_order_id=")
	builder.WriteString(fmt.Sprintf("%v", s.InitialOrderID))
	builder.WriteString(", ")
	if v := s.EnterpriseID; v != nil {
		builder.WriteString("enterprise_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(s.Model)
	builder.WriteString(", ")
	builder.WriteString("initial_days=")
	builder.WriteString(fmt.Sprintf("%v", s.InitialDays))
	builder.WriteString(", ")
	builder.WriteString("alter_days=")
	builder.WriteString(fmt.Sprintf("%v", s.AlterDays))
	builder.WriteString(", ")
	builder.WriteString("pause_days=")
	builder.WriteString(fmt.Sprintf("%v", s.PauseDays))
	builder.WriteString(", ")
	builder.WriteString("suspend_days=")
	builder.WriteString(fmt.Sprintf("%v", s.SuspendDays))
	builder.WriteString(", ")
	builder.WriteString("renewal_days=")
	builder.WriteString(fmt.Sprintf("%v", s.RenewalDays))
	builder.WriteString(", ")
	builder.WriteString("overdue_days=")
	builder.WriteString(fmt.Sprintf("%v", s.OverdueDays))
	builder.WriteString(", ")
	builder.WriteString("remaining=")
	builder.WriteString(fmt.Sprintf("%v", s.Remaining))
	builder.WriteString(", ")
	if v := s.PausedAt; v != nil {
		builder.WriteString("paused_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.SuspendAt; v != nil {
		builder.WriteString("suspend_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.StartAt; v != nil {
		builder.WriteString("start_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.EndAt; v != nil {
		builder.WriteString("end_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.RefundAt; v != nil {
		builder.WriteString("refund_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("unsubscribe_reason=")
	builder.WriteString(s.UnsubscribeReason)
	builder.WriteString(", ")
	if v := s.LastBillDate; v != nil {
		builder.WriteString("last_bill_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("pause_overdue=")
	builder.WriteString(fmt.Sprintf("%v", s.PauseOverdue))
	builder.WriteString(", ")
	if v := s.AgentEndAt; v != nil {
		builder.WriteString("agent_end_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.Formula; v != nil {
		builder.WriteString("formula=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Subscribes is a parsable slice of Subscribe.
type Subscribes []*Subscribe

func (s Subscribes) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
