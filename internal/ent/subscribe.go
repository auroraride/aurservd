// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// Subscribe is the model entity for the Subscribe schema.
type Subscribe struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// PlanID holds the value of the "plan_id" field.
	// 骑士卡ID
	PlanID uint64 `json:"plan_id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	// 操作店员ID
	EmployeeID uint64 `json:"employee_id,omitempty"`
	// CityID holds the value of the "city_id" field.
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// RiderID holds the value of the "rider_id" field.
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// InitialOrderID holds the value of the "initial_order_id" field.
	// 初始订单ID(开通订阅的初始订单)
	InitialOrderID uint64 `json:"initial_order_id,omitempty"`
	// Status holds the value of the "status" field.
	// 当前订阅状态
	Status uint8 `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	// 订阅类型 1新签 2续签 3重签 4更改电池
	Type uint `json:"type,omitempty"`
	// Voltage holds the value of the "voltage" field.
	// 可用电压型号
	Voltage float64 `json:"voltage,omitempty"`
	// InitialDays holds the value of the "initial_days" field.
	// 初始骑士卡天数
	InitialDays int `json:"initial_days,omitempty"`
	// AlterDays holds the value of the "alter_days" field.
	// 改动天数
	AlterDays int `json:"alter_days,omitempty"`
	// PauseDays holds the value of the "pause_days" field.
	// 暂停天数
	PauseDays int `json:"pause_days,omitempty"`
	// RenewalDays holds the value of the "renewal_days" field.
	// 续期天数
	RenewalDays int `json:"renewal_days,omitempty"`
	// OverdueDays holds the value of the "overdue_days" field.
	// 已缴纳逾期滞纳金天数
	OverdueDays int `json:"overdue_days,omitempty"`
	// Remaining holds the value of the "remaining" field.
	// 剩余天数, 负数为逾期
	Remaining int `json:"remaining,omitempty"`
	// PausedAt holds the value of the "paused_at" field.
	// 当前是否暂停计费, 暂停计费时间
	PausedAt *time.Time `json:"paused_at,omitempty"`
	// StartAt holds the value of the "start_at" field.
	// 激活时间
	StartAt *time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	// 归还时间
	EndAt *time.Time `json:"end_at,omitempty"`
	// RefundAt holds the value of the "refund_at" field.
	// 退款时间
	RefundAt *time.Time `json:"refund_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscribeQuery when eager-loading is set.
	Edges SubscribeEdges `json:"edges"`
}

// SubscribeEdges holds the relations/edges for other nodes in the graph.
type SubscribeEdges struct {
	// Plan holds the value of the plan edge.
	Plan *Plan `json:"plan,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Pauses holds the value of the pauses edge.
	Pauses []*SubscribePause `json:"pauses,omitempty"`
	// Alters holds the value of the alters edge.
	Alters []*SubscribeAlter `json:"alters,omitempty"`
	// Orders holds the value of the orders edge.
	Orders []*Order `json:"orders,omitempty"`
	// InitialOrder holds the value of the initial_order edge.
	InitialOrder *Order `json:"initial_order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) PlanOrErr() (*Plan, error) {
	if e.loadedTypes[0] {
		if e.Plan == nil {
			// The edge plan was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Plan, nil
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[2] {
		if e.City == nil {
			// The edge city was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[3] {
		if e.Rider == nil {
			// The edge rider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// PausesOrErr returns the Pauses value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) PausesOrErr() ([]*SubscribePause, error) {
	if e.loadedTypes[4] {
		return e.Pauses, nil
	}
	return nil, &NotLoadedError{edge: "pauses"}
}

// AltersOrErr returns the Alters value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) AltersOrErr() ([]*SubscribeAlter, error) {
	if e.loadedTypes[5] {
		return e.Alters, nil
	}
	return nil, &NotLoadedError{edge: "alters"}
}

// OrdersOrErr returns the Orders value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribeEdges) OrdersOrErr() ([]*Order, error) {
	if e.loadedTypes[6] {
		return e.Orders, nil
	}
	return nil, &NotLoadedError{edge: "orders"}
}

// InitialOrderOrErr returns the InitialOrder value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeEdges) InitialOrderOrErr() (*Order, error) {
	if e.loadedTypes[7] {
		if e.InitialOrder == nil {
			// The edge initial_order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.InitialOrder, nil
	}
	return nil, &NotLoadedError{edge: "initial_order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscribe) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscribe.FieldCreator, subscribe.FieldLastModifier:
			values[i] = new([]byte)
		case subscribe.FieldVoltage:
			values[i] = new(sql.NullFloat64)
		case subscribe.FieldID, subscribe.FieldPlanID, subscribe.FieldEmployeeID, subscribe.FieldCityID, subscribe.FieldRiderID, subscribe.FieldInitialOrderID, subscribe.FieldStatus, subscribe.FieldType, subscribe.FieldInitialDays, subscribe.FieldAlterDays, subscribe.FieldPauseDays, subscribe.FieldRenewalDays, subscribe.FieldOverdueDays, subscribe.FieldRemaining:
			values[i] = new(sql.NullInt64)
		case subscribe.FieldRemark:
			values[i] = new(sql.NullString)
		case subscribe.FieldCreatedAt, subscribe.FieldUpdatedAt, subscribe.FieldDeletedAt, subscribe.FieldPausedAt, subscribe.FieldStartAt, subscribe.FieldEndAt, subscribe.FieldRefundAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Subscribe", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscribe fields.
func (s *Subscribe) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscribe.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case subscribe.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case subscribe.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case subscribe.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case subscribe.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case subscribe.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case subscribe.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				s.Remark = value.String
			}
		case subscribe.FieldPlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				s.PlanID = uint64(value.Int64)
			}
		case subscribe.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				s.EmployeeID = uint64(value.Int64)
			}
		case subscribe.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				s.CityID = uint64(value.Int64)
			}
		case subscribe.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				s.RiderID = uint64(value.Int64)
			}
		case subscribe.FieldInitialOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field initial_order_id", values[i])
			} else if value.Valid {
				s.InitialOrderID = uint64(value.Int64)
			}
		case subscribe.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = uint8(value.Int64)
			}
		case subscribe.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = uint(value.Int64)
			}
		case subscribe.FieldVoltage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field voltage", values[i])
			} else if value.Valid {
				s.Voltage = value.Float64
			}
		case subscribe.FieldInitialDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field initial_days", values[i])
			} else if value.Valid {
				s.InitialDays = int(value.Int64)
			}
		case subscribe.FieldAlterDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field alter_days", values[i])
			} else if value.Valid {
				s.AlterDays = int(value.Int64)
			}
		case subscribe.FieldPauseDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pause_days", values[i])
			} else if value.Valid {
				s.PauseDays = int(value.Int64)
			}
		case subscribe.FieldRenewalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_days", values[i])
			} else if value.Valid {
				s.RenewalDays = int(value.Int64)
			}
		case subscribe.FieldOverdueDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field overdue_days", values[i])
			} else if value.Valid {
				s.OverdueDays = int(value.Int64)
			}
		case subscribe.FieldRemaining:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field remaining", values[i])
			} else if value.Valid {
				s.Remaining = int(value.Int64)
			}
		case subscribe.FieldPausedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field paused_at", values[i])
			} else if value.Valid {
				s.PausedAt = new(time.Time)
				*s.PausedAt = value.Time
			}
		case subscribe.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				s.StartAt = new(time.Time)
				*s.StartAt = value.Time
			}
		case subscribe.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				s.EndAt = new(time.Time)
				*s.EndAt = value.Time
			}
		case subscribe.FieldRefundAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_at", values[i])
			} else if value.Valid {
				s.RefundAt = new(time.Time)
				*s.RefundAt = value.Time
			}
		}
	}
	return nil
}

// QueryPlan queries the "plan" edge of the Subscribe entity.
func (s *Subscribe) QueryPlan() *PlanQuery {
	return (&SubscribeClient{config: s.config}).QueryPlan(s)
}

// QueryEmployee queries the "employee" edge of the Subscribe entity.
func (s *Subscribe) QueryEmployee() *EmployeeQuery {
	return (&SubscribeClient{config: s.config}).QueryEmployee(s)
}

// QueryCity queries the "city" edge of the Subscribe entity.
func (s *Subscribe) QueryCity() *CityQuery {
	return (&SubscribeClient{config: s.config}).QueryCity(s)
}

// QueryRider queries the "rider" edge of the Subscribe entity.
func (s *Subscribe) QueryRider() *RiderQuery {
	return (&SubscribeClient{config: s.config}).QueryRider(s)
}

// QueryPauses queries the "pauses" edge of the Subscribe entity.
func (s *Subscribe) QueryPauses() *SubscribePauseQuery {
	return (&SubscribeClient{config: s.config}).QueryPauses(s)
}

// QueryAlters queries the "alters" edge of the Subscribe entity.
func (s *Subscribe) QueryAlters() *SubscribeAlterQuery {
	return (&SubscribeClient{config: s.config}).QueryAlters(s)
}

// QueryOrders queries the "orders" edge of the Subscribe entity.
func (s *Subscribe) QueryOrders() *OrderQuery {
	return (&SubscribeClient{config: s.config}).QueryOrders(s)
}

// QueryInitialOrder queries the "initial_order" edge of the Subscribe entity.
func (s *Subscribe) QueryInitialOrder() *OrderQuery {
	return (&SubscribeClient{config: s.config}).QueryInitialOrder(s)
}

// Update returns a builder for updating this Subscribe.
// Note that you need to call Subscribe.Unwrap() before calling this method if this Subscribe
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscribe) Update() *SubscribeUpdateOne {
	return (&SubscribeClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Subscribe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscribe) Unwrap() *Subscribe {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subscribe is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscribe) String() string {
	var builder strings.Builder
	builder.WriteString("Subscribe(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	if v := s.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", s.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", s.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(s.Remark)
	builder.WriteString(", plan_id=")
	builder.WriteString(fmt.Sprintf("%v", s.PlanID))
	builder.WriteString(", employee_id=")
	builder.WriteString(fmt.Sprintf("%v", s.EmployeeID))
	builder.WriteString(", city_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CityID))
	builder.WriteString(", rider_id=")
	builder.WriteString(fmt.Sprintf("%v", s.RiderID))
	builder.WriteString(", initial_order_id=")
	builder.WriteString(fmt.Sprintf("%v", s.InitialOrderID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", voltage=")
	builder.WriteString(fmt.Sprintf("%v", s.Voltage))
	builder.WriteString(", initial_days=")
	builder.WriteString(fmt.Sprintf("%v", s.InitialDays))
	builder.WriteString(", alter_days=")
	builder.WriteString(fmt.Sprintf("%v", s.AlterDays))
	builder.WriteString(", pause_days=")
	builder.WriteString(fmt.Sprintf("%v", s.PauseDays))
	builder.WriteString(", renewal_days=")
	builder.WriteString(fmt.Sprintf("%v", s.RenewalDays))
	builder.WriteString(", overdue_days=")
	builder.WriteString(fmt.Sprintf("%v", s.OverdueDays))
	builder.WriteString(", remaining=")
	builder.WriteString(fmt.Sprintf("%v", s.Remaining))
	if v := s.PausedAt; v != nil {
		builder.WriteString(", paused_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := s.StartAt; v != nil {
		builder.WriteString(", start_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := s.EndAt; v != nil {
		builder.WriteString(", end_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := s.RefundAt; v != nil {
		builder.WriteString(", refund_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Subscribes is a parsable slice of Subscribe.
type Subscribes []*Subscribe

func (s Subscribes) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
