// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
)

// PromotionLevelTaskUpdate is the builder for updating PromotionLevelTask entities.
type PromotionLevelTaskUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionLevelTaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionLevelTaskUpdate builder.
func (pltu *PromotionLevelTaskUpdate) Where(ps ...predicate.PromotionLevelTask) *PromotionLevelTaskUpdate {
	pltu.mutation.Where(ps...)
	return pltu
}

// SetUpdatedAt sets the "updated_at" field.
func (pltu *PromotionLevelTaskUpdate) SetUpdatedAt(t time.Time) *PromotionLevelTaskUpdate {
	pltu.mutation.SetUpdatedAt(t)
	return pltu
}

// SetLastModifier sets the "last_modifier" field.
func (pltu *PromotionLevelTaskUpdate) SetLastModifier(m *model.Modifier) *PromotionLevelTaskUpdate {
	pltu.mutation.SetLastModifier(m)
	return pltu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pltu *PromotionLevelTaskUpdate) ClearLastModifier() *PromotionLevelTaskUpdate {
	pltu.mutation.ClearLastModifier()
	return pltu
}

// SetRemark sets the "remark" field.
func (pltu *PromotionLevelTaskUpdate) SetRemark(s string) *PromotionLevelTaskUpdate {
	pltu.mutation.SetRemark(s)
	return pltu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pltu *PromotionLevelTaskUpdate) SetNillableRemark(s *string) *PromotionLevelTaskUpdate {
	if s != nil {
		pltu.SetRemark(*s)
	}
	return pltu
}

// ClearRemark clears the value of the "remark" field.
func (pltu *PromotionLevelTaskUpdate) ClearRemark() *PromotionLevelTaskUpdate {
	pltu.mutation.ClearRemark()
	return pltu
}

// SetName sets the "name" field.
func (pltu *PromotionLevelTaskUpdate) SetName(s string) *PromotionLevelTaskUpdate {
	pltu.mutation.SetName(s)
	return pltu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pltu *PromotionLevelTaskUpdate) SetNillableName(s *string) *PromotionLevelTaskUpdate {
	if s != nil {
		pltu.SetName(*s)
	}
	return pltu
}

// SetDescription sets the "description" field.
func (pltu *PromotionLevelTaskUpdate) SetDescription(s string) *PromotionLevelTaskUpdate {
	pltu.mutation.SetDescription(s)
	return pltu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pltu *PromotionLevelTaskUpdate) SetNillableDescription(s *string) *PromotionLevelTaskUpdate {
	if s != nil {
		pltu.SetDescription(*s)
	}
	return pltu
}

// SetType sets the "type" field.
func (pltu *PromotionLevelTaskUpdate) SetType(u uint8) *PromotionLevelTaskUpdate {
	pltu.mutation.ResetType()
	pltu.mutation.SetType(u)
	return pltu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pltu *PromotionLevelTaskUpdate) SetNillableType(u *uint8) *PromotionLevelTaskUpdate {
	if u != nil {
		pltu.SetType(*u)
	}
	return pltu
}

// AddType adds u to the "type" field.
func (pltu *PromotionLevelTaskUpdate) AddType(u int8) *PromotionLevelTaskUpdate {
	pltu.mutation.AddType(u)
	return pltu
}

// SetGrowthValue sets the "growth_value" field.
func (pltu *PromotionLevelTaskUpdate) SetGrowthValue(u uint64) *PromotionLevelTaskUpdate {
	pltu.mutation.ResetGrowthValue()
	pltu.mutation.SetGrowthValue(u)
	return pltu
}

// SetNillableGrowthValue sets the "growth_value" field if the given value is not nil.
func (pltu *PromotionLevelTaskUpdate) SetNillableGrowthValue(u *uint64) *PromotionLevelTaskUpdate {
	if u != nil {
		pltu.SetGrowthValue(*u)
	}
	return pltu
}

// AddGrowthValue adds u to the "growth_value" field.
func (pltu *PromotionLevelTaskUpdate) AddGrowthValue(u int64) *PromotionLevelTaskUpdate {
	pltu.mutation.AddGrowthValue(u)
	return pltu
}

// SetKey sets the "key" field.
func (pltu *PromotionLevelTaskUpdate) SetKey(s string) *PromotionLevelTaskUpdate {
	pltu.mutation.SetKey(s)
	return pltu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pltu *PromotionLevelTaskUpdate) SetNillableKey(s *string) *PromotionLevelTaskUpdate {
	if s != nil {
		pltu.SetKey(*s)
	}
	return pltu
}

// ClearKey clears the value of the "key" field.
func (pltu *PromotionLevelTaskUpdate) ClearKey() *PromotionLevelTaskUpdate {
	pltu.mutation.ClearKey()
	return pltu
}

// Mutation returns the PromotionLevelTaskMutation object of the builder.
func (pltu *PromotionLevelTaskUpdate) Mutation() *PromotionLevelTaskMutation {
	return pltu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pltu *PromotionLevelTaskUpdate) Save(ctx context.Context) (int, error) {
	if err := pltu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pltu.sqlSave, pltu.mutation, pltu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pltu *PromotionLevelTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := pltu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pltu *PromotionLevelTaskUpdate) Exec(ctx context.Context) error {
	_, err := pltu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pltu *PromotionLevelTaskUpdate) ExecX(ctx context.Context) {
	if err := pltu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pltu *PromotionLevelTaskUpdate) defaults() error {
	if _, ok := pltu.mutation.UpdatedAt(); !ok {
		if promotionleveltask.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionleveltask.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionleveltask.UpdateDefaultUpdatedAt()
		pltu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pltu *PromotionLevelTaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionLevelTaskUpdate {
	pltu.modifiers = append(pltu.modifiers, modifiers...)
	return pltu
}

func (pltu *PromotionLevelTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionleveltask.Table, promotionleveltask.Columns, sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64))
	if ps := pltu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pltu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionleveltask.FieldUpdatedAt, field.TypeTime, value)
	}
	if pltu.mutation.CreatorCleared() {
		_spec.ClearField(promotionleveltask.FieldCreator, field.TypeJSON)
	}
	if value, ok := pltu.mutation.LastModifier(); ok {
		_spec.SetField(promotionleveltask.FieldLastModifier, field.TypeJSON, value)
	}
	if pltu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionleveltask.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pltu.mutation.Remark(); ok {
		_spec.SetField(promotionleveltask.FieldRemark, field.TypeString, value)
	}
	if pltu.mutation.RemarkCleared() {
		_spec.ClearField(promotionleveltask.FieldRemark, field.TypeString)
	}
	if value, ok := pltu.mutation.Name(); ok {
		_spec.SetField(promotionleveltask.FieldName, field.TypeString, value)
	}
	if value, ok := pltu.mutation.Description(); ok {
		_spec.SetField(promotionleveltask.FieldDescription, field.TypeString, value)
	}
	if value, ok := pltu.mutation.GetType(); ok {
		_spec.SetField(promotionleveltask.FieldType, field.TypeUint8, value)
	}
	if value, ok := pltu.mutation.AddedType(); ok {
		_spec.AddField(promotionleveltask.FieldType, field.TypeUint8, value)
	}
	if value, ok := pltu.mutation.GrowthValue(); ok {
		_spec.SetField(promotionleveltask.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pltu.mutation.AddedGrowthValue(); ok {
		_spec.AddField(promotionleveltask.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pltu.mutation.Key(); ok {
		_spec.SetField(promotionleveltask.FieldKey, field.TypeString, value)
	}
	if pltu.mutation.KeyCleared() {
		_spec.ClearField(promotionleveltask.FieldKey, field.TypeString)
	}
	_spec.AddModifiers(pltu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pltu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionleveltask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pltu.mutation.done = true
	return n, nil
}

// PromotionLevelTaskUpdateOne is the builder for updating a single PromotionLevelTask entity.
type PromotionLevelTaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionLevelTaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pltuo *PromotionLevelTaskUpdateOne) SetUpdatedAt(t time.Time) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.SetUpdatedAt(t)
	return pltuo
}

// SetLastModifier sets the "last_modifier" field.
func (pltuo *PromotionLevelTaskUpdateOne) SetLastModifier(m *model.Modifier) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.SetLastModifier(m)
	return pltuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pltuo *PromotionLevelTaskUpdateOne) ClearLastModifier() *PromotionLevelTaskUpdateOne {
	pltuo.mutation.ClearLastModifier()
	return pltuo
}

// SetRemark sets the "remark" field.
func (pltuo *PromotionLevelTaskUpdateOne) SetRemark(s string) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.SetRemark(s)
	return pltuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pltuo *PromotionLevelTaskUpdateOne) SetNillableRemark(s *string) *PromotionLevelTaskUpdateOne {
	if s != nil {
		pltuo.SetRemark(*s)
	}
	return pltuo
}

// ClearRemark clears the value of the "remark" field.
func (pltuo *PromotionLevelTaskUpdateOne) ClearRemark() *PromotionLevelTaskUpdateOne {
	pltuo.mutation.ClearRemark()
	return pltuo
}

// SetName sets the "name" field.
func (pltuo *PromotionLevelTaskUpdateOne) SetName(s string) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.SetName(s)
	return pltuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pltuo *PromotionLevelTaskUpdateOne) SetNillableName(s *string) *PromotionLevelTaskUpdateOne {
	if s != nil {
		pltuo.SetName(*s)
	}
	return pltuo
}

// SetDescription sets the "description" field.
func (pltuo *PromotionLevelTaskUpdateOne) SetDescription(s string) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.SetDescription(s)
	return pltuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pltuo *PromotionLevelTaskUpdateOne) SetNillableDescription(s *string) *PromotionLevelTaskUpdateOne {
	if s != nil {
		pltuo.SetDescription(*s)
	}
	return pltuo
}

// SetType sets the "type" field.
func (pltuo *PromotionLevelTaskUpdateOne) SetType(u uint8) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.ResetType()
	pltuo.mutation.SetType(u)
	return pltuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pltuo *PromotionLevelTaskUpdateOne) SetNillableType(u *uint8) *PromotionLevelTaskUpdateOne {
	if u != nil {
		pltuo.SetType(*u)
	}
	return pltuo
}

// AddType adds u to the "type" field.
func (pltuo *PromotionLevelTaskUpdateOne) AddType(u int8) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.AddType(u)
	return pltuo
}

// SetGrowthValue sets the "growth_value" field.
func (pltuo *PromotionLevelTaskUpdateOne) SetGrowthValue(u uint64) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.ResetGrowthValue()
	pltuo.mutation.SetGrowthValue(u)
	return pltuo
}

// SetNillableGrowthValue sets the "growth_value" field if the given value is not nil.
func (pltuo *PromotionLevelTaskUpdateOne) SetNillableGrowthValue(u *uint64) *PromotionLevelTaskUpdateOne {
	if u != nil {
		pltuo.SetGrowthValue(*u)
	}
	return pltuo
}

// AddGrowthValue adds u to the "growth_value" field.
func (pltuo *PromotionLevelTaskUpdateOne) AddGrowthValue(u int64) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.AddGrowthValue(u)
	return pltuo
}

// SetKey sets the "key" field.
func (pltuo *PromotionLevelTaskUpdateOne) SetKey(s string) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.SetKey(s)
	return pltuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pltuo *PromotionLevelTaskUpdateOne) SetNillableKey(s *string) *PromotionLevelTaskUpdateOne {
	if s != nil {
		pltuo.SetKey(*s)
	}
	return pltuo
}

// ClearKey clears the value of the "key" field.
func (pltuo *PromotionLevelTaskUpdateOne) ClearKey() *PromotionLevelTaskUpdateOne {
	pltuo.mutation.ClearKey()
	return pltuo
}

// Mutation returns the PromotionLevelTaskMutation object of the builder.
func (pltuo *PromotionLevelTaskUpdateOne) Mutation() *PromotionLevelTaskMutation {
	return pltuo.mutation
}

// Where appends a list predicates to the PromotionLevelTaskUpdate builder.
func (pltuo *PromotionLevelTaskUpdateOne) Where(ps ...predicate.PromotionLevelTask) *PromotionLevelTaskUpdateOne {
	pltuo.mutation.Where(ps...)
	return pltuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pltuo *PromotionLevelTaskUpdateOne) Select(field string, fields ...string) *PromotionLevelTaskUpdateOne {
	pltuo.fields = append([]string{field}, fields...)
	return pltuo
}

// Save executes the query and returns the updated PromotionLevelTask entity.
func (pltuo *PromotionLevelTaskUpdateOne) Save(ctx context.Context) (*PromotionLevelTask, error) {
	if err := pltuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pltuo.sqlSave, pltuo.mutation, pltuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pltuo *PromotionLevelTaskUpdateOne) SaveX(ctx context.Context) *PromotionLevelTask {
	node, err := pltuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pltuo *PromotionLevelTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := pltuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pltuo *PromotionLevelTaskUpdateOne) ExecX(ctx context.Context) {
	if err := pltuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pltuo *PromotionLevelTaskUpdateOne) defaults() error {
	if _, ok := pltuo.mutation.UpdatedAt(); !ok {
		if promotionleveltask.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionleveltask.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionleveltask.UpdateDefaultUpdatedAt()
		pltuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pltuo *PromotionLevelTaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionLevelTaskUpdateOne {
	pltuo.modifiers = append(pltuo.modifiers, modifiers...)
	return pltuo
}

func (pltuo *PromotionLevelTaskUpdateOne) sqlSave(ctx context.Context) (_node *PromotionLevelTask, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionleveltask.Table, promotionleveltask.Columns, sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64))
	id, ok := pltuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionLevelTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pltuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionleveltask.FieldID)
		for _, f := range fields {
			if !promotionleveltask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionleveltask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pltuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pltuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionleveltask.FieldUpdatedAt, field.TypeTime, value)
	}
	if pltuo.mutation.CreatorCleared() {
		_spec.ClearField(promotionleveltask.FieldCreator, field.TypeJSON)
	}
	if value, ok := pltuo.mutation.LastModifier(); ok {
		_spec.SetField(promotionleveltask.FieldLastModifier, field.TypeJSON, value)
	}
	if pltuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionleveltask.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pltuo.mutation.Remark(); ok {
		_spec.SetField(promotionleveltask.FieldRemark, field.TypeString, value)
	}
	if pltuo.mutation.RemarkCleared() {
		_spec.ClearField(promotionleveltask.FieldRemark, field.TypeString)
	}
	if value, ok := pltuo.mutation.Name(); ok {
		_spec.SetField(promotionleveltask.FieldName, field.TypeString, value)
	}
	if value, ok := pltuo.mutation.Description(); ok {
		_spec.SetField(promotionleveltask.FieldDescription, field.TypeString, value)
	}
	if value, ok := pltuo.mutation.GetType(); ok {
		_spec.SetField(promotionleveltask.FieldType, field.TypeUint8, value)
	}
	if value, ok := pltuo.mutation.AddedType(); ok {
		_spec.AddField(promotionleveltask.FieldType, field.TypeUint8, value)
	}
	if value, ok := pltuo.mutation.GrowthValue(); ok {
		_spec.SetField(promotionleveltask.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pltuo.mutation.AddedGrowthValue(); ok {
		_spec.AddField(promotionleveltask.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pltuo.mutation.Key(); ok {
		_spec.SetField(promotionleveltask.FieldKey, field.TypeString, value)
	}
	if pltuo.mutation.KeyCleared() {
		_spec.ClearField(promotionleveltask.FieldKey, field.TypeString)
	}
	_spec.AddModifiers(pltuo.modifiers...)
	_node = &PromotionLevelTask{config: pltuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pltuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionleveltask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pltuo.mutation.done = true
	return _node, nil
}
