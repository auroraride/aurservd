// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assethistory"
)

// AssetHistoryCreate is the builder for creating a AssetHistory entity.
type AssetHistoryCreate struct {
	config
	mutation *AssetHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ahc *AssetHistoryCreate) SetCreatedAt(t time.Time) *AssetHistoryCreate {
	ahc.mutation.SetCreatedAt(t)
	return ahc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahc *AssetHistoryCreate) SetNillableCreatedAt(t *time.Time) *AssetHistoryCreate {
	if t != nil {
		ahc.SetCreatedAt(*t)
	}
	return ahc
}

// SetUpdatedAt sets the "updated_at" field.
func (ahc *AssetHistoryCreate) SetUpdatedAt(t time.Time) *AssetHistoryCreate {
	ahc.mutation.SetUpdatedAt(t)
	return ahc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ahc *AssetHistoryCreate) SetNillableUpdatedAt(t *time.Time) *AssetHistoryCreate {
	if t != nil {
		ahc.SetUpdatedAt(*t)
	}
	return ahc
}

// SetDeletedAt sets the "deleted_at" field.
func (ahc *AssetHistoryCreate) SetDeletedAt(t time.Time) *AssetHistoryCreate {
	ahc.mutation.SetDeletedAt(t)
	return ahc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ahc *AssetHistoryCreate) SetNillableDeletedAt(t *time.Time) *AssetHistoryCreate {
	if t != nil {
		ahc.SetDeletedAt(*t)
	}
	return ahc
}

// SetCreator sets the "creator" field.
func (ahc *AssetHistoryCreate) SetCreator(m *model.Modifier) *AssetHistoryCreate {
	ahc.mutation.SetCreator(m)
	return ahc
}

// SetLastModifier sets the "last_modifier" field.
func (ahc *AssetHistoryCreate) SetLastModifier(m *model.Modifier) *AssetHistoryCreate {
	ahc.mutation.SetLastModifier(m)
	return ahc
}

// SetRemark sets the "remark" field.
func (ahc *AssetHistoryCreate) SetRemark(s string) *AssetHistoryCreate {
	ahc.mutation.SetRemark(s)
	return ahc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ahc *AssetHistoryCreate) SetNillableRemark(s *string) *AssetHistoryCreate {
	if s != nil {
		ahc.SetRemark(*s)
	}
	return ahc
}

// SetAssetID sets the "asset_id" field.
func (ahc *AssetHistoryCreate) SetAssetID(u uint64) *AssetHistoryCreate {
	ahc.mutation.SetAssetID(u)
	return ahc
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (ahc *AssetHistoryCreate) SetNillableAssetID(u *uint64) *AssetHistoryCreate {
	if u != nil {
		ahc.SetAssetID(*u)
	}
	return ahc
}

// SetFromLocationType sets the "from_location_type" field.
func (ahc *AssetHistoryCreate) SetFromLocationType(i int) *AssetHistoryCreate {
	ahc.mutation.SetFromLocationType(i)
	return ahc
}

// SetFromLocationID sets the "from_location_id" field.
func (ahc *AssetHistoryCreate) SetFromLocationID(i int) *AssetHistoryCreate {
	ahc.mutation.SetFromLocationID(i)
	return ahc
}

// SetToLocationType sets the "to_location_type" field.
func (ahc *AssetHistoryCreate) SetToLocationType(i int) *AssetHistoryCreate {
	ahc.mutation.SetToLocationType(i)
	return ahc
}

// SetToLocationID sets the "to_location_id" field.
func (ahc *AssetHistoryCreate) SetToLocationID(i int) *AssetHistoryCreate {
	ahc.mutation.SetToLocationID(i)
	return ahc
}

// SetAsset sets the "asset" edge to the Asset entity.
func (ahc *AssetHistoryCreate) SetAsset(a *Asset) *AssetHistoryCreate {
	return ahc.SetAssetID(a.ID)
}

// Mutation returns the AssetHistoryMutation object of the builder.
func (ahc *AssetHistoryCreate) Mutation() *AssetHistoryMutation {
	return ahc.mutation
}

// Save creates the AssetHistory in the database.
func (ahc *AssetHistoryCreate) Save(ctx context.Context) (*AssetHistory, error) {
	if err := ahc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ahc.sqlSave, ahc.mutation, ahc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ahc *AssetHistoryCreate) SaveX(ctx context.Context) *AssetHistory {
	v, err := ahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahc *AssetHistoryCreate) Exec(ctx context.Context) error {
	_, err := ahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahc *AssetHistoryCreate) ExecX(ctx context.Context) {
	if err := ahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahc *AssetHistoryCreate) defaults() error {
	if _, ok := ahc.mutation.CreatedAt(); !ok {
		if assethistory.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assethistory.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assethistory.DefaultCreatedAt()
		ahc.mutation.SetCreatedAt(v)
	}
	if _, ok := ahc.mutation.UpdatedAt(); !ok {
		if assethistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assethistory.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assethistory.DefaultUpdatedAt()
		ahc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ahc *AssetHistoryCreate) check() error {
	if _, ok := ahc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetHistory.created_at"`)}
	}
	if _, ok := ahc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetHistory.updated_at"`)}
	}
	if _, ok := ahc.mutation.FromLocationType(); !ok {
		return &ValidationError{Name: "from_location_type", err: errors.New(`ent: missing required field "AssetHistory.from_location_type"`)}
	}
	if _, ok := ahc.mutation.FromLocationID(); !ok {
		return &ValidationError{Name: "from_location_id", err: errors.New(`ent: missing required field "AssetHistory.from_location_id"`)}
	}
	if _, ok := ahc.mutation.ToLocationType(); !ok {
		return &ValidationError{Name: "to_location_type", err: errors.New(`ent: missing required field "AssetHistory.to_location_type"`)}
	}
	if _, ok := ahc.mutation.ToLocationID(); !ok {
		return &ValidationError{Name: "to_location_id", err: errors.New(`ent: missing required field "AssetHistory.to_location_id"`)}
	}
	return nil
}

func (ahc *AssetHistoryCreate) sqlSave(ctx context.Context) (*AssetHistory, error) {
	if err := ahc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ahc.mutation.id = &_node.ID
	ahc.mutation.done = true
	return _node, nil
}

func (ahc *AssetHistoryCreate) createSpec() (*AssetHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetHistory{config: ahc.config}
		_spec = sqlgraph.NewCreateSpec(assethistory.Table, sqlgraph.NewFieldSpec(assethistory.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ahc.conflict
	if value, ok := ahc.mutation.CreatedAt(); ok {
		_spec.SetField(assethistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ahc.mutation.UpdatedAt(); ok {
		_spec.SetField(assethistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ahc.mutation.DeletedAt(); ok {
		_spec.SetField(assethistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ahc.mutation.Creator(); ok {
		_spec.SetField(assethistory.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ahc.mutation.LastModifier(); ok {
		_spec.SetField(assethistory.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ahc.mutation.Remark(); ok {
		_spec.SetField(assethistory.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ahc.mutation.FromLocationType(); ok {
		_spec.SetField(assethistory.FieldFromLocationType, field.TypeInt, value)
		_node.FromLocationType = value
	}
	if value, ok := ahc.mutation.FromLocationID(); ok {
		_spec.SetField(assethistory.FieldFromLocationID, field.TypeInt, value)
		_node.FromLocationID = value
	}
	if value, ok := ahc.mutation.ToLocationType(); ok {
		_spec.SetField(assethistory.FieldToLocationType, field.TypeInt, value)
		_node.ToLocationType = value
	}
	if value, ok := ahc.mutation.ToLocationID(); ok {
		_spec.SetField(assethistory.FieldToLocationID, field.TypeInt, value)
		_node.ToLocationID = value
	}
	if nodes := ahc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assethistory.AssetTable,
			Columns: []string{assethistory.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetHistory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ahc *AssetHistoryCreate) OnConflict(opts ...sql.ConflictOption) *AssetHistoryUpsertOne {
	ahc.conflict = opts
	return &AssetHistoryUpsertOne{
		create: ahc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ahc *AssetHistoryCreate) OnConflictColumns(columns ...string) *AssetHistoryUpsertOne {
	ahc.conflict = append(ahc.conflict, sql.ConflictColumns(columns...))
	return &AssetHistoryUpsertOne{
		create: ahc,
	}
}

type (
	// AssetHistoryUpsertOne is the builder for "upsert"-ing
	//  one AssetHistory node.
	AssetHistoryUpsertOne struct {
		create *AssetHistoryCreate
	}

	// AssetHistoryUpsert is the "OnConflict" setter.
	AssetHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetHistoryUpsert) SetUpdatedAt(v time.Time) *AssetHistoryUpsert {
	u.Set(assethistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateUpdatedAt() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetHistoryUpsert) SetDeletedAt(v time.Time) *AssetHistoryUpsert {
	u.Set(assethistory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateDeletedAt() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetHistoryUpsert) ClearDeletedAt() *AssetHistoryUpsert {
	u.SetNull(assethistory.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetHistoryUpsert) SetLastModifier(v *model.Modifier) *AssetHistoryUpsert {
	u.Set(assethistory.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateLastModifier() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetHistoryUpsert) ClearLastModifier() *AssetHistoryUpsert {
	u.SetNull(assethistory.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetHistoryUpsert) SetRemark(v string) *AssetHistoryUpsert {
	u.Set(assethistory.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateRemark() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetHistoryUpsert) ClearRemark() *AssetHistoryUpsert {
	u.SetNull(assethistory.FieldRemark)
	return u
}

// SetAssetID sets the "asset_id" field.
func (u *AssetHistoryUpsert) SetAssetID(v uint64) *AssetHistoryUpsert {
	u.Set(assethistory.FieldAssetID, v)
	return u
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateAssetID() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldAssetID)
	return u
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetHistoryUpsert) ClearAssetID() *AssetHistoryUpsert {
	u.SetNull(assethistory.FieldAssetID)
	return u
}

// SetFromLocationType sets the "from_location_type" field.
func (u *AssetHistoryUpsert) SetFromLocationType(v int) *AssetHistoryUpsert {
	u.Set(assethistory.FieldFromLocationType, v)
	return u
}

// UpdateFromLocationType sets the "from_location_type" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateFromLocationType() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldFromLocationType)
	return u
}

// AddFromLocationType adds v to the "from_location_type" field.
func (u *AssetHistoryUpsert) AddFromLocationType(v int) *AssetHistoryUpsert {
	u.Add(assethistory.FieldFromLocationType, v)
	return u
}

// SetFromLocationID sets the "from_location_id" field.
func (u *AssetHistoryUpsert) SetFromLocationID(v int) *AssetHistoryUpsert {
	u.Set(assethistory.FieldFromLocationID, v)
	return u
}

// UpdateFromLocationID sets the "from_location_id" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateFromLocationID() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldFromLocationID)
	return u
}

// AddFromLocationID adds v to the "from_location_id" field.
func (u *AssetHistoryUpsert) AddFromLocationID(v int) *AssetHistoryUpsert {
	u.Add(assethistory.FieldFromLocationID, v)
	return u
}

// SetToLocationType sets the "to_location_type" field.
func (u *AssetHistoryUpsert) SetToLocationType(v int) *AssetHistoryUpsert {
	u.Set(assethistory.FieldToLocationType, v)
	return u
}

// UpdateToLocationType sets the "to_location_type" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateToLocationType() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldToLocationType)
	return u
}

// AddToLocationType adds v to the "to_location_type" field.
func (u *AssetHistoryUpsert) AddToLocationType(v int) *AssetHistoryUpsert {
	u.Add(assethistory.FieldToLocationType, v)
	return u
}

// SetToLocationID sets the "to_location_id" field.
func (u *AssetHistoryUpsert) SetToLocationID(v int) *AssetHistoryUpsert {
	u.Set(assethistory.FieldToLocationID, v)
	return u
}

// UpdateToLocationID sets the "to_location_id" field to the value that was provided on create.
func (u *AssetHistoryUpsert) UpdateToLocationID() *AssetHistoryUpsert {
	u.SetExcluded(assethistory.FieldToLocationID)
	return u
}

// AddToLocationID adds v to the "to_location_id" field.
func (u *AssetHistoryUpsert) AddToLocationID(v int) *AssetHistoryUpsert {
	u.Add(assethistory.FieldToLocationID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetHistoryUpsertOne) UpdateNewValues() *AssetHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assethistory.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(assethistory.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetHistoryUpsertOne) Ignore() *AssetHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetHistoryUpsertOne) DoNothing() *AssetHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetHistoryCreate.OnConflict
// documentation for more info.
func (u *AssetHistoryUpsertOne) Update(set func(*AssetHistoryUpsert)) *AssetHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetHistoryUpsertOne) SetUpdatedAt(v time.Time) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateUpdatedAt() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetHistoryUpsertOne) SetDeletedAt(v time.Time) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateDeletedAt() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetHistoryUpsertOne) ClearDeletedAt() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetHistoryUpsertOne) SetLastModifier(v *model.Modifier) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateLastModifier() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetHistoryUpsertOne) ClearLastModifier() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetHistoryUpsertOne) SetRemark(v string) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateRemark() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetHistoryUpsertOne) ClearRemark() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.ClearRemark()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetHistoryUpsertOne) SetAssetID(v uint64) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateAssetID() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateAssetID()
	})
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetHistoryUpsertOne) ClearAssetID() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.ClearAssetID()
	})
}

// SetFromLocationType sets the "from_location_type" field.
func (u *AssetHistoryUpsertOne) SetFromLocationType(v int) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetFromLocationType(v)
	})
}

// AddFromLocationType adds v to the "from_location_type" field.
func (u *AssetHistoryUpsertOne) AddFromLocationType(v int) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.AddFromLocationType(v)
	})
}

// UpdateFromLocationType sets the "from_location_type" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateFromLocationType() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateFromLocationType()
	})
}

// SetFromLocationID sets the "from_location_id" field.
func (u *AssetHistoryUpsertOne) SetFromLocationID(v int) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetFromLocationID(v)
	})
}

// AddFromLocationID adds v to the "from_location_id" field.
func (u *AssetHistoryUpsertOne) AddFromLocationID(v int) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.AddFromLocationID(v)
	})
}

// UpdateFromLocationID sets the "from_location_id" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateFromLocationID() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateFromLocationID()
	})
}

// SetToLocationType sets the "to_location_type" field.
func (u *AssetHistoryUpsertOne) SetToLocationType(v int) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetToLocationType(v)
	})
}

// AddToLocationType adds v to the "to_location_type" field.
func (u *AssetHistoryUpsertOne) AddToLocationType(v int) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.AddToLocationType(v)
	})
}

// UpdateToLocationType sets the "to_location_type" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateToLocationType() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateToLocationType()
	})
}

// SetToLocationID sets the "to_location_id" field.
func (u *AssetHistoryUpsertOne) SetToLocationID(v int) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetToLocationID(v)
	})
}

// AddToLocationID adds v to the "to_location_id" field.
func (u *AssetHistoryUpsertOne) AddToLocationID(v int) *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.AddToLocationID(v)
	})
}

// UpdateToLocationID sets the "to_location_id" field to the value that was provided on create.
func (u *AssetHistoryUpsertOne) UpdateToLocationID() *AssetHistoryUpsertOne {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateToLocationID()
	})
}

// Exec executes the query.
func (u *AssetHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetHistoryUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetHistoryUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetHistoryCreateBulk is the builder for creating many AssetHistory entities in bulk.
type AssetHistoryCreateBulk struct {
	config
	err      error
	builders []*AssetHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetHistory entities in the database.
func (ahcb *AssetHistoryCreateBulk) Save(ctx context.Context) ([]*AssetHistory, error) {
	if ahcb.err != nil {
		return nil, ahcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ahcb.builders))
	nodes := make([]*AssetHistory, len(ahcb.builders))
	mutators := make([]Mutator, len(ahcb.builders))
	for i := range ahcb.builders {
		func(i int, root context.Context) {
			builder := ahcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ahcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ahcb *AssetHistoryCreateBulk) SaveX(ctx context.Context) []*AssetHistory {
	v, err := ahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahcb *AssetHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcb *AssetHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ahcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetHistoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ahcb *AssetHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetHistoryUpsertBulk {
	ahcb.conflict = opts
	return &AssetHistoryUpsertBulk{
		create: ahcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ahcb *AssetHistoryCreateBulk) OnConflictColumns(columns ...string) *AssetHistoryUpsertBulk {
	ahcb.conflict = append(ahcb.conflict, sql.ConflictColumns(columns...))
	return &AssetHistoryUpsertBulk{
		create: ahcb,
	}
}

// AssetHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetHistory nodes.
type AssetHistoryUpsertBulk struct {
	create *AssetHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetHistoryUpsertBulk) UpdateNewValues() *AssetHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assethistory.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(assethistory.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetHistoryUpsertBulk) Ignore() *AssetHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetHistoryUpsertBulk) DoNothing() *AssetHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *AssetHistoryUpsertBulk) Update(set func(*AssetHistoryUpsert)) *AssetHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetHistoryUpsertBulk) SetUpdatedAt(v time.Time) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateUpdatedAt() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetHistoryUpsertBulk) SetDeletedAt(v time.Time) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateDeletedAt() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetHistoryUpsertBulk) ClearDeletedAt() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetHistoryUpsertBulk) SetLastModifier(v *model.Modifier) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateLastModifier() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetHistoryUpsertBulk) ClearLastModifier() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetHistoryUpsertBulk) SetRemark(v string) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateRemark() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetHistoryUpsertBulk) ClearRemark() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.ClearRemark()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetHistoryUpsertBulk) SetAssetID(v uint64) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateAssetID() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateAssetID()
	})
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetHistoryUpsertBulk) ClearAssetID() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.ClearAssetID()
	})
}

// SetFromLocationType sets the "from_location_type" field.
func (u *AssetHistoryUpsertBulk) SetFromLocationType(v int) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetFromLocationType(v)
	})
}

// AddFromLocationType adds v to the "from_location_type" field.
func (u *AssetHistoryUpsertBulk) AddFromLocationType(v int) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.AddFromLocationType(v)
	})
}

// UpdateFromLocationType sets the "from_location_type" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateFromLocationType() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateFromLocationType()
	})
}

// SetFromLocationID sets the "from_location_id" field.
func (u *AssetHistoryUpsertBulk) SetFromLocationID(v int) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetFromLocationID(v)
	})
}

// AddFromLocationID adds v to the "from_location_id" field.
func (u *AssetHistoryUpsertBulk) AddFromLocationID(v int) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.AddFromLocationID(v)
	})
}

// UpdateFromLocationID sets the "from_location_id" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateFromLocationID() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateFromLocationID()
	})
}

// SetToLocationType sets the "to_location_type" field.
func (u *AssetHistoryUpsertBulk) SetToLocationType(v int) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetToLocationType(v)
	})
}

// AddToLocationType adds v to the "to_location_type" field.
func (u *AssetHistoryUpsertBulk) AddToLocationType(v int) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.AddToLocationType(v)
	})
}

// UpdateToLocationType sets the "to_location_type" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateToLocationType() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateToLocationType()
	})
}

// SetToLocationID sets the "to_location_id" field.
func (u *AssetHistoryUpsertBulk) SetToLocationID(v int) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.SetToLocationID(v)
	})
}

// AddToLocationID adds v to the "to_location_id" field.
func (u *AssetHistoryUpsertBulk) AddToLocationID(v int) *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.AddToLocationID(v)
	})
}

// UpdateToLocationID sets the "to_location_id" field to the value that was provided on create.
func (u *AssetHistoryUpsertBulk) UpdateToLocationID() *AssetHistoryUpsertBulk {
	return u.Update(func(s *AssetHistoryUpsert) {
		s.UpdateToLocationID()
	})
}

// Exec executes the query.
func (u *AssetHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
