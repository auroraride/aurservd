// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/question"
	"github.com/auroraride/aurservd/internal/ent/questioncategory"
)

// QuestionCreate is the builder for creating a Question entity.
type QuestionCreate struct {
	config
	mutation *QuestionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuestionCreate) SetCreatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableCreatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetUpdatedAt sets the "updated_at" field.
func (qc *QuestionCreate) SetUpdatedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetUpdatedAt(t)
	return qc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableUpdatedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetUpdatedAt(*t)
	}
	return qc
}

// SetDeletedAt sets the "deleted_at" field.
func (qc *QuestionCreate) SetDeletedAt(t time.Time) *QuestionCreate {
	qc.mutation.SetDeletedAt(t)
	return qc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableDeletedAt(t *time.Time) *QuestionCreate {
	if t != nil {
		qc.SetDeletedAt(*t)
	}
	return qc
}

// SetCreator sets the "creator" field.
func (qc *QuestionCreate) SetCreator(m *model.Modifier) *QuestionCreate {
	qc.mutation.SetCreator(m)
	return qc
}

// SetLastModifier sets the "last_modifier" field.
func (qc *QuestionCreate) SetLastModifier(m *model.Modifier) *QuestionCreate {
	qc.mutation.SetLastModifier(m)
	return qc
}

// SetRemark sets the "remark" field.
func (qc *QuestionCreate) SetRemark(s string) *QuestionCreate {
	qc.mutation.SetRemark(s)
	return qc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableRemark(s *string) *QuestionCreate {
	if s != nil {
		qc.SetRemark(*s)
	}
	return qc
}

// SetName sets the "name" field.
func (qc *QuestionCreate) SetName(s string) *QuestionCreate {
	qc.mutation.SetName(s)
	return qc
}

// SetSort sets the "sort" field.
func (qc *QuestionCreate) SetSort(i int) *QuestionCreate {
	qc.mutation.SetSort(i)
	return qc
}

// SetAnswer sets the "answer" field.
func (qc *QuestionCreate) SetAnswer(s string) *QuestionCreate {
	qc.mutation.SetAnswer(s)
	return qc
}

// SetCategoryID sets the "category_id" field.
func (qc *QuestionCreate) SetCategoryID(u uint64) *QuestionCreate {
	qc.mutation.SetCategoryID(u)
	return qc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (qc *QuestionCreate) SetNillableCategoryID(u *uint64) *QuestionCreate {
	if u != nil {
		qc.SetCategoryID(*u)
	}
	return qc
}

// SetCategory sets the "category" edge to the QuestionCategory entity.
func (qc *QuestionCreate) SetCategory(q *QuestionCategory) *QuestionCreate {
	return qc.SetCategoryID(q.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (qc *QuestionCreate) Mutation() *QuestionMutation {
	return qc.mutation
}

// Save creates the Question in the database.
func (qc *QuestionCreate) Save(ctx context.Context) (*Question, error) {
	if err := qc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, qc.sqlSave, qc.mutation, qc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestionCreate) SaveX(ctx context.Context) *Question {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuestionCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuestionCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuestionCreate) defaults() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		if question.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized question.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := question.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		if question.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized question.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := question.DefaultUpdatedAt()
		qc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuestionCreate) check() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Question.created_at"`)}
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Question.updated_at"`)}
	}
	if _, ok := qc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Question.name"`)}
	}
	if _, ok := qc.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Question.sort"`)}
	}
	if _, ok := qc.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "Question.answer"`)}
	}
	return nil
}

func (qc *QuestionCreate) sqlSave(ctx context.Context) (*Question, error) {
	if err := qc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	qc.mutation.id = &_node.ID
	qc.mutation.done = true
	return _node, nil
}

func (qc *QuestionCreate) createSpec() (*Question, *sqlgraph.CreateSpec) {
	var (
		_node = &Question{config: qc.config}
		_spec = sqlgraph.NewCreateSpec(question.Table, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = qc.conflict
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qc.mutation.DeletedAt(); ok {
		_spec.SetField(question.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := qc.mutation.Creator(); ok {
		_spec.SetField(question.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := qc.mutation.LastModifier(); ok {
		_spec.SetField(question.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := qc.mutation.Remark(); ok {
		_spec.SetField(question.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := qc.mutation.Name(); ok {
		_spec.SetField(question.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := qc.mutation.Sort(); ok {
		_spec.SetField(question.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	if value, ok := qc.mutation.Answer(); ok {
		_spec.SetField(question.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	if nodes := qc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questioncategory.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CategoryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Question.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuestionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (qc *QuestionCreate) OnConflict(opts ...sql.ConflictOption) *QuestionUpsertOne {
	qc.conflict = opts
	return &QuestionUpsertOne{
		create: qc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qc *QuestionCreate) OnConflictColumns(columns ...string) *QuestionUpsertOne {
	qc.conflict = append(qc.conflict, sql.ConflictColumns(columns...))
	return &QuestionUpsertOne{
		create: qc,
	}
}

type (
	// QuestionUpsertOne is the builder for "upsert"-ing
	//  one Question node.
	QuestionUpsertOne struct {
		create *QuestionCreate
	}

	// QuestionUpsert is the "OnConflict" setter.
	QuestionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *QuestionUpsert) SetUpdatedAt(v time.Time) *QuestionUpsert {
	u.Set(question.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateUpdatedAt() *QuestionUpsert {
	u.SetExcluded(question.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *QuestionUpsert) SetDeletedAt(v time.Time) *QuestionUpsert {
	u.Set(question.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateDeletedAt() *QuestionUpsert {
	u.SetExcluded(question.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *QuestionUpsert) ClearDeletedAt() *QuestionUpsert {
	u.SetNull(question.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *QuestionUpsert) SetLastModifier(v *model.Modifier) *QuestionUpsert {
	u.Set(question.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateLastModifier() *QuestionUpsert {
	u.SetExcluded(question.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *QuestionUpsert) ClearLastModifier() *QuestionUpsert {
	u.SetNull(question.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *QuestionUpsert) SetRemark(v string) *QuestionUpsert {
	u.Set(question.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateRemark() *QuestionUpsert {
	u.SetExcluded(question.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *QuestionUpsert) ClearRemark() *QuestionUpsert {
	u.SetNull(question.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *QuestionUpsert) SetName(v string) *QuestionUpsert {
	u.Set(question.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateName() *QuestionUpsert {
	u.SetExcluded(question.FieldName)
	return u
}

// SetSort sets the "sort" field.
func (u *QuestionUpsert) SetSort(v int) *QuestionUpsert {
	u.Set(question.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateSort() *QuestionUpsert {
	u.SetExcluded(question.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *QuestionUpsert) AddSort(v int) *QuestionUpsert {
	u.Add(question.FieldSort, v)
	return u
}

// SetAnswer sets the "answer" field.
func (u *QuestionUpsert) SetAnswer(v string) *QuestionUpsert {
	u.Set(question.FieldAnswer, v)
	return u
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateAnswer() *QuestionUpsert {
	u.SetExcluded(question.FieldAnswer)
	return u
}

// SetCategoryID sets the "category_id" field.
func (u *QuestionUpsert) SetCategoryID(v uint64) *QuestionUpsert {
	u.Set(question.FieldCategoryID, v)
	return u
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *QuestionUpsert) UpdateCategoryID() *QuestionUpsert {
	u.SetExcluded(question.FieldCategoryID)
	return u
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *QuestionUpsert) ClearCategoryID() *QuestionUpsert {
	u.SetNull(question.FieldCategoryID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *QuestionUpsertOne) UpdateNewValues() *QuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(question.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(question.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Question.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *QuestionUpsertOne) Ignore() *QuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuestionUpsertOne) DoNothing() *QuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuestionCreate.OnConflict
// documentation for more info.
func (u *QuestionUpsertOne) Update(set func(*QuestionUpsert)) *QuestionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QuestionUpsertOne) SetUpdatedAt(v time.Time) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateUpdatedAt() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *QuestionUpsertOne) SetDeletedAt(v time.Time) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateDeletedAt() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *QuestionUpsertOne) ClearDeletedAt() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *QuestionUpsertOne) SetLastModifier(v *model.Modifier) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateLastModifier() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *QuestionUpsertOne) ClearLastModifier() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *QuestionUpsertOne) SetRemark(v string) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateRemark() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *QuestionUpsertOne) ClearRemark() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *QuestionUpsertOne) SetName(v string) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateName() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateName()
	})
}

// SetSort sets the "sort" field.
func (u *QuestionUpsertOne) SetSort(v int) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *QuestionUpsertOne) AddSort(v int) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateSort() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateSort()
	})
}

// SetAnswer sets the "answer" field.
func (u *QuestionUpsertOne) SetAnswer(v string) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetAnswer(v)
	})
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateAnswer() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateAnswer()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *QuestionUpsertOne) SetCategoryID(v uint64) *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.SetCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *QuestionUpsertOne) UpdateCategoryID() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *QuestionUpsertOne) ClearCategoryID() *QuestionUpsertOne {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearCategoryID()
	})
}

// Exec executes the query.
func (u *QuestionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QuestionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuestionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *QuestionUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *QuestionUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// QuestionCreateBulk is the builder for creating many Question entities in bulk.
type QuestionCreateBulk struct {
	config
	err      error
	builders []*QuestionCreate
	conflict []sql.ConflictOption
}

// Save creates the Question entities in the database.
func (qcb *QuestionCreateBulk) Save(ctx context.Context) ([]*Question, error) {
	if qcb.err != nil {
		return nil, qcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Question, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = qcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuestionCreateBulk) SaveX(ctx context.Context) []*Question {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuestionCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Question.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuestionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (qcb *QuestionCreateBulk) OnConflict(opts ...sql.ConflictOption) *QuestionUpsertBulk {
	qcb.conflict = opts
	return &QuestionUpsertBulk{
		create: qcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qcb *QuestionCreateBulk) OnConflictColumns(columns ...string) *QuestionUpsertBulk {
	qcb.conflict = append(qcb.conflict, sql.ConflictColumns(columns...))
	return &QuestionUpsertBulk{
		create: qcb,
	}
}

// QuestionUpsertBulk is the builder for "upsert"-ing
// a bulk of Question nodes.
type QuestionUpsertBulk struct {
	create *QuestionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *QuestionUpsertBulk) UpdateNewValues() *QuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(question.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(question.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Question.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *QuestionUpsertBulk) Ignore() *QuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuestionUpsertBulk) DoNothing() *QuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuestionCreateBulk.OnConflict
// documentation for more info.
func (u *QuestionUpsertBulk) Update(set func(*QuestionUpsert)) *QuestionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuestionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QuestionUpsertBulk) SetUpdatedAt(v time.Time) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateUpdatedAt() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *QuestionUpsertBulk) SetDeletedAt(v time.Time) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateDeletedAt() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *QuestionUpsertBulk) ClearDeletedAt() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *QuestionUpsertBulk) SetLastModifier(v *model.Modifier) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateLastModifier() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *QuestionUpsertBulk) ClearLastModifier() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *QuestionUpsertBulk) SetRemark(v string) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateRemark() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *QuestionUpsertBulk) ClearRemark() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *QuestionUpsertBulk) SetName(v string) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateName() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateName()
	})
}

// SetSort sets the "sort" field.
func (u *QuestionUpsertBulk) SetSort(v int) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *QuestionUpsertBulk) AddSort(v int) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateSort() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateSort()
	})
}

// SetAnswer sets the "answer" field.
func (u *QuestionUpsertBulk) SetAnswer(v string) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetAnswer(v)
	})
}

// UpdateAnswer sets the "answer" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateAnswer() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateAnswer()
	})
}

// SetCategoryID sets the "category_id" field.
func (u *QuestionUpsertBulk) SetCategoryID(v uint64) *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.SetCategoryID(v)
	})
}

// UpdateCategoryID sets the "category_id" field to the value that was provided on create.
func (u *QuestionUpsertBulk) UpdateCategoryID() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.UpdateCategoryID()
	})
}

// ClearCategoryID clears the value of the "category_id" field.
func (u *QuestionUpsertBulk) ClearCategoryID() *QuestionUpsertBulk {
	return u.Update(func(s *QuestionUpsert) {
		s.ClearCategoryID()
	})
}

// Exec executes the query.
func (u *QuestionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the QuestionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QuestionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuestionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
