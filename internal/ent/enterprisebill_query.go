// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EnterpriseBillQuery is the builder for querying EnterpriseBill entities.
type EnterpriseBillQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.EnterpriseBill
	// eager-loading edges.
	withRider      *RiderQuery
	withCity       *CityQuery
	withStation    *EnterpriseStationQuery
	withEnterprise *EnterpriseQuery
	withStatement  *EnterpriseStatementQuery
	withSubscribe  *SubscribeQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnterpriseBillQuery builder.
func (ebq *EnterpriseBillQuery) Where(ps ...predicate.EnterpriseBill) *EnterpriseBillQuery {
	ebq.predicates = append(ebq.predicates, ps...)
	return ebq
}

// Limit adds a limit step to the query.
func (ebq *EnterpriseBillQuery) Limit(limit int) *EnterpriseBillQuery {
	ebq.limit = &limit
	return ebq
}

// Offset adds an offset step to the query.
func (ebq *EnterpriseBillQuery) Offset(offset int) *EnterpriseBillQuery {
	ebq.offset = &offset
	return ebq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ebq *EnterpriseBillQuery) Unique(unique bool) *EnterpriseBillQuery {
	ebq.unique = &unique
	return ebq
}

// Order adds an order step to the query.
func (ebq *EnterpriseBillQuery) Order(o ...OrderFunc) *EnterpriseBillQuery {
	ebq.order = append(ebq.order, o...)
	return ebq
}

// QueryRider chains the current query on the "rider" edge.
func (ebq *EnterpriseBillQuery) QueryRider() *RiderQuery {
	query := &RiderQuery{config: ebq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.RiderTable, enterprisebill.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (ebq *EnterpriseBillQuery) QueryCity() *CityQuery {
	query := &CityQuery{config: ebq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.CityTable, enterprisebill.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStation chains the current query on the "station" edge.
func (ebq *EnterpriseBillQuery) QueryStation() *EnterpriseStationQuery {
	query := &EnterpriseStationQuery{config: ebq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.StationTable, enterprisebill.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (ebq *EnterpriseBillQuery) QueryEnterprise() *EnterpriseQuery {
	query := &EnterpriseQuery{config: ebq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.EnterpriseTable, enterprisebill.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatement chains the current query on the "statement" edge.
func (ebq *EnterpriseBillQuery) QueryStatement() *EnterpriseStatementQuery {
	query := &EnterpriseStatementQuery{config: ebq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, selector),
			sqlgraph.To(enterprisestatement.Table, enterprisestatement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.StatementTable, enterprisebill.StatementColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribe chains the current query on the "subscribe" edge.
func (ebq *EnterpriseBillQuery) QuerySubscribe() *SubscribeQuery {
	query := &SubscribeQuery{config: ebq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.SubscribeTable, enterprisebill.SubscribeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EnterpriseBill entity from the query.
// Returns a *NotFoundError when no EnterpriseBill was found.
func (ebq *EnterpriseBillQuery) First(ctx context.Context) (*EnterpriseBill, error) {
	nodes, err := ebq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enterprisebill.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ebq *EnterpriseBillQuery) FirstX(ctx context.Context) *EnterpriseBill {
	node, err := ebq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EnterpriseBill ID from the query.
// Returns a *NotFoundError when no EnterpriseBill ID was found.
func (ebq *EnterpriseBillQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ebq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enterprisebill.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ebq *EnterpriseBillQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ebq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EnterpriseBill entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EnterpriseBill entity is found.
// Returns a *NotFoundError when no EnterpriseBill entities are found.
func (ebq *EnterpriseBillQuery) Only(ctx context.Context) (*EnterpriseBill, error) {
	nodes, err := ebq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enterprisebill.Label}
	default:
		return nil, &NotSingularError{enterprisebill.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ebq *EnterpriseBillQuery) OnlyX(ctx context.Context) *EnterpriseBill {
	node, err := ebq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EnterpriseBill ID in the query.
// Returns a *NotSingularError when more than one EnterpriseBill ID is found.
// Returns a *NotFoundError when no entities are found.
func (ebq *EnterpriseBillQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ebq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enterprisebill.Label}
	default:
		err = &NotSingularError{enterprisebill.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ebq *EnterpriseBillQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ebq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EnterpriseBills.
func (ebq *EnterpriseBillQuery) All(ctx context.Context) ([]*EnterpriseBill, error) {
	if err := ebq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ebq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ebq *EnterpriseBillQuery) AllX(ctx context.Context) []*EnterpriseBill {
	nodes, err := ebq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EnterpriseBill IDs.
func (ebq *EnterpriseBillQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := ebq.Select(enterprisebill.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ebq *EnterpriseBillQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ebq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ebq *EnterpriseBillQuery) Count(ctx context.Context) (int, error) {
	if err := ebq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ebq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ebq *EnterpriseBillQuery) CountX(ctx context.Context) int {
	count, err := ebq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ebq *EnterpriseBillQuery) Exist(ctx context.Context) (bool, error) {
	if err := ebq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ebq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ebq *EnterpriseBillQuery) ExistX(ctx context.Context) bool {
	exist, err := ebq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnterpriseBillQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ebq *EnterpriseBillQuery) Clone() *EnterpriseBillQuery {
	if ebq == nil {
		return nil
	}
	return &EnterpriseBillQuery{
		config:         ebq.config,
		limit:          ebq.limit,
		offset:         ebq.offset,
		order:          append([]OrderFunc{}, ebq.order...),
		predicates:     append([]predicate.EnterpriseBill{}, ebq.predicates...),
		withRider:      ebq.withRider.Clone(),
		withCity:       ebq.withCity.Clone(),
		withStation:    ebq.withStation.Clone(),
		withEnterprise: ebq.withEnterprise.Clone(),
		withStatement:  ebq.withStatement.Clone(),
		withSubscribe:  ebq.withSubscribe.Clone(),
		// clone intermediate query.
		sql:    ebq.sql.Clone(),
		path:   ebq.path,
		unique: ebq.unique,
	}
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EnterpriseBillQuery) WithRider(opts ...func(*RiderQuery)) *EnterpriseBillQuery {
	query := &RiderQuery{config: ebq.config}
	for _, opt := range opts {
		opt(query)
	}
	ebq.withRider = query
	return ebq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EnterpriseBillQuery) WithCity(opts ...func(*CityQuery)) *EnterpriseBillQuery {
	query := &CityQuery{config: ebq.config}
	for _, opt := range opts {
		opt(query)
	}
	ebq.withCity = query
	return ebq
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EnterpriseBillQuery) WithStation(opts ...func(*EnterpriseStationQuery)) *EnterpriseBillQuery {
	query := &EnterpriseStationQuery{config: ebq.config}
	for _, opt := range opts {
		opt(query)
	}
	ebq.withStation = query
	return ebq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EnterpriseBillQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *EnterpriseBillQuery {
	query := &EnterpriseQuery{config: ebq.config}
	for _, opt := range opts {
		opt(query)
	}
	ebq.withEnterprise = query
	return ebq
}

// WithStatement tells the query-builder to eager-load the nodes that are connected to
// the "statement" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EnterpriseBillQuery) WithStatement(opts ...func(*EnterpriseStatementQuery)) *EnterpriseBillQuery {
	query := &EnterpriseStatementQuery{config: ebq.config}
	for _, opt := range opts {
		opt(query)
	}
	ebq.withStatement = query
	return ebq
}

// WithSubscribe tells the query-builder to eager-load the nodes that are connected to
// the "subscribe" edge. The optional arguments are used to configure the query builder of the edge.
func (ebq *EnterpriseBillQuery) WithSubscribe(opts ...func(*SubscribeQuery)) *EnterpriseBillQuery {
	query := &SubscribeQuery{config: ebq.config}
	for _, opt := range opts {
		opt(query)
	}
	ebq.withSubscribe = query
	return ebq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EnterpriseBill.Query().
//		GroupBy(enterprisebill.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ebq *EnterpriseBillQuery) GroupBy(field string, fields ...string) *EnterpriseBillGroupBy {
	grbuild := &EnterpriseBillGroupBy{config: ebq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ebq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ebq.sqlQuery(ctx), nil
	}
	grbuild.label = enterprisebill.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EnterpriseBill.Query().
//		Select(enterprisebill.FieldCreatedAt).
//		Scan(ctx, &v)
func (ebq *EnterpriseBillQuery) Select(fields ...string) *EnterpriseBillSelect {
	ebq.fields = append(ebq.fields, fields...)
	selbuild := &EnterpriseBillSelect{EnterpriseBillQuery: ebq}
	selbuild.label = enterprisebill.Label
	selbuild.flds, selbuild.scan = &ebq.fields, selbuild.Scan
	return selbuild
}

func (ebq *EnterpriseBillQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ebq.fields {
		if !enterprisebill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ebq.path != nil {
		prev, err := ebq.path(ctx)
		if err != nil {
			return err
		}
		ebq.sql = prev
	}
	return nil
}

func (ebq *EnterpriseBillQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EnterpriseBill, error) {
	var (
		nodes       = []*EnterpriseBill{}
		_spec       = ebq.querySpec()
		loadedTypes = [6]bool{
			ebq.withRider != nil,
			ebq.withCity != nil,
			ebq.withStation != nil,
			ebq.withEnterprise != nil,
			ebq.withStatement != nil,
			ebq.withSubscribe != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*EnterpriseBill).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &EnterpriseBill{config: ebq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ebq.modifiers) > 0 {
		_spec.Modifiers = ebq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ebq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ebq.withRider; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EnterpriseBill)
		for i := range nodes {
			fk := nodes[i].RiderID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(rider.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rider = n
			}
		}
	}

	if query := ebq.withCity; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EnterpriseBill)
		for i := range nodes {
			fk := nodes[i].CityID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(city.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.City = n
			}
		}
	}

	if query := ebq.withStation; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EnterpriseBill)
		for i := range nodes {
			if nodes[i].StationID == nil {
				continue
			}
			fk := *nodes[i].StationID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enterprisestation.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "station_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Station = n
			}
		}
	}

	if query := ebq.withEnterprise; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EnterpriseBill)
		for i := range nodes {
			fk := nodes[i].EnterpriseID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enterprise.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Enterprise = n
			}
		}
	}

	if query := ebq.withStatement; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EnterpriseBill)
		for i := range nodes {
			fk := nodes[i].StatementID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enterprisestatement.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "statement_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Statement = n
			}
		}
	}

	if query := ebq.withSubscribe; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*EnterpriseBill)
		for i := range nodes {
			fk := nodes[i].SubscribeID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(subscribe.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Subscribe = n
			}
		}
	}

	return nodes, nil
}

func (ebq *EnterpriseBillQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ebq.querySpec()
	if len(ebq.modifiers) > 0 {
		_spec.Modifiers = ebq.modifiers
	}
	_spec.Node.Columns = ebq.fields
	if len(ebq.fields) > 0 {
		_spec.Unique = ebq.unique != nil && *ebq.unique
	}
	return sqlgraph.CountNodes(ctx, ebq.driver, _spec)
}

func (ebq *EnterpriseBillQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ebq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ebq *EnterpriseBillQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisebill.Table,
			Columns: enterprisebill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisebill.FieldID,
			},
		},
		From:   ebq.sql,
		Unique: true,
	}
	if unique := ebq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ebq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisebill.FieldID)
		for i := range fields {
			if fields[i] != enterprisebill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ebq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ebq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ebq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ebq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ebq *EnterpriseBillQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ebq.driver.Dialect())
	t1 := builder.Table(enterprisebill.Table)
	columns := ebq.fields
	if len(columns) == 0 {
		columns = enterprisebill.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ebq.sql != nil {
		selector = ebq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ebq.unique != nil && *ebq.unique {
		selector.Distinct()
	}
	for _, m := range ebq.modifiers {
		m(selector)
	}
	for _, p := range ebq.predicates {
		p(selector)
	}
	for _, p := range ebq.order {
		p(selector)
	}
	if offset := ebq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ebq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ebq *EnterpriseBillQuery) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseBillSelect {
	ebq.modifiers = append(ebq.modifiers, modifiers...)
	return ebq.Select()
}

// EnterpriseBillGroupBy is the group-by builder for EnterpriseBill entities.
type EnterpriseBillGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ebgb *EnterpriseBillGroupBy) Aggregate(fns ...AggregateFunc) *EnterpriseBillGroupBy {
	ebgb.fns = append(ebgb.fns, fns...)
	return ebgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ebgb *EnterpriseBillGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ebgb.path(ctx)
	if err != nil {
		return err
	}
	ebgb.sql = query
	return ebgb.sqlScan(ctx, v)
}

func (ebgb *EnterpriseBillGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ebgb.fields {
		if !enterprisebill.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ebgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ebgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ebgb *EnterpriseBillGroupBy) sqlQuery() *sql.Selector {
	selector := ebgb.sql.Select()
	aggregation := make([]string, 0, len(ebgb.fns))
	for _, fn := range ebgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ebgb.fields)+len(ebgb.fns))
		for _, f := range ebgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ebgb.fields...)...)
}

// EnterpriseBillSelect is the builder for selecting fields of EnterpriseBill entities.
type EnterpriseBillSelect struct {
	*EnterpriseBillQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ebs *EnterpriseBillSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ebs.prepareQuery(ctx); err != nil {
		return err
	}
	ebs.sql = ebs.EnterpriseBillQuery.sqlQuery(ctx)
	return ebs.sqlScan(ctx, v)
}

func (ebs *EnterpriseBillSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ebs.sql.Query()
	if err := ebs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ebs *EnterpriseBillSelect) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseBillSelect {
	ebs.modifiers = append(ebs.modifiers, modifiers...)
	return ebs
}
