// Code generated by entc, DO NOT EDIT.

package city

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the city type in the database.
	Label = "city"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldOpen holds the string denoting the open field in the database.
	FieldOpen = "open"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// EdgePlans holds the string denoting the plans edge name in mutations.
	EdgePlans = "plans"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeBranches holds the string denoting the branches edge name in mutations.
	EdgeBranches = "branches"
	// EdgeFaults holds the string denoting the faults edge name in mutations.
	EdgeFaults = "faults"
	// Table holds the table name of the city in the database.
	Table = "city"
	// PlansTable is the table that holds the plans relation/edge. The primary key declared below.
	PlansTable = "plan_cities"
	// PlansInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlansInverseTable = "plan"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "city"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "city"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
	// BranchesTable is the table that holds the branches relation/edge.
	BranchesTable = "branch"
	// BranchesInverseTable is the table name for the Branch entity.
	// It exists in this package in order to avoid circular dependency with the "branch" package.
	BranchesInverseTable = "branch"
	// BranchesColumn is the table column denoting the branches relation/edge.
	BranchesColumn = "city_id"
	// FaultsTable is the table that holds the faults relation/edge.
	FaultsTable = "cabinet_fault"
	// FaultsInverseTable is the table name for the CabinetFault entity.
	// It exists in this package in order to avoid circular dependency with the "cabinetfault" package.
	FaultsInverseTable = "cabinet_fault"
	// FaultsColumn is the table column denoting the faults relation/edge.
	FaultsColumn = "city_id"
)

// Columns holds all SQL columns for city fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldOpen,
	FieldName,
	FieldCode,
	FieldParentID,
	FieldLng,
	FieldLat,
}

var (
	// PlansPrimaryKey and PlansColumn2 are the table columns denoting the
	// primary key for the plans relation (M2M).
	PlansPrimaryKey = []string{"plan_id", "city_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
//
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
)
