// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assethistory"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetHistoryQuery is the builder for querying AssetHistory entities.
type AssetHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []assethistory.OrderOption
	inters     []Interceptor
	predicates []predicate.AssetHistory
	withAsset  *AssetQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetHistoryQuery builder.
func (ahq *AssetHistoryQuery) Where(ps ...predicate.AssetHistory) *AssetHistoryQuery {
	ahq.predicates = append(ahq.predicates, ps...)
	return ahq
}

// Limit the number of records to be returned by this query.
func (ahq *AssetHistoryQuery) Limit(limit int) *AssetHistoryQuery {
	ahq.ctx.Limit = &limit
	return ahq
}

// Offset to start from.
func (ahq *AssetHistoryQuery) Offset(offset int) *AssetHistoryQuery {
	ahq.ctx.Offset = &offset
	return ahq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ahq *AssetHistoryQuery) Unique(unique bool) *AssetHistoryQuery {
	ahq.ctx.Unique = &unique
	return ahq
}

// Order specifies how the records should be ordered.
func (ahq *AssetHistoryQuery) Order(o ...assethistory.OrderOption) *AssetHistoryQuery {
	ahq.order = append(ahq.order, o...)
	return ahq
}

// QueryAsset chains the current query on the "asset" edge.
func (ahq *AssetHistoryQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: ahq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ahq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ahq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assethistory.Table, assethistory.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assethistory.AssetTable, assethistory.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(ahq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssetHistory entity from the query.
// Returns a *NotFoundError when no AssetHistory was found.
func (ahq *AssetHistoryQuery) First(ctx context.Context) (*AssetHistory, error) {
	nodes, err := ahq.Limit(1).All(setContextOp(ctx, ahq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assethistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ahq *AssetHistoryQuery) FirstX(ctx context.Context) *AssetHistory {
	node, err := ahq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssetHistory ID from the query.
// Returns a *NotFoundError when no AssetHistory ID was found.
func (ahq *AssetHistoryQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ahq.Limit(1).IDs(setContextOp(ctx, ahq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assethistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ahq *AssetHistoryQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ahq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssetHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssetHistory entity is found.
// Returns a *NotFoundError when no AssetHistory entities are found.
func (ahq *AssetHistoryQuery) Only(ctx context.Context) (*AssetHistory, error) {
	nodes, err := ahq.Limit(2).All(setContextOp(ctx, ahq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assethistory.Label}
	default:
		return nil, &NotSingularError{assethistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ahq *AssetHistoryQuery) OnlyX(ctx context.Context) *AssetHistory {
	node, err := ahq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssetHistory ID in the query.
// Returns a *NotSingularError when more than one AssetHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (ahq *AssetHistoryQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ahq.Limit(2).IDs(setContextOp(ctx, ahq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assethistory.Label}
	default:
		err = &NotSingularError{assethistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ahq *AssetHistoryQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ahq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssetHistories.
func (ahq *AssetHistoryQuery) All(ctx context.Context) ([]*AssetHistory, error) {
	ctx = setContextOp(ctx, ahq.ctx, "All")
	if err := ahq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssetHistory, *AssetHistoryQuery]()
	return withInterceptors[[]*AssetHistory](ctx, ahq, qr, ahq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ahq *AssetHistoryQuery) AllX(ctx context.Context) []*AssetHistory {
	nodes, err := ahq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssetHistory IDs.
func (ahq *AssetHistoryQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if ahq.ctx.Unique == nil && ahq.path != nil {
		ahq.Unique(true)
	}
	ctx = setContextOp(ctx, ahq.ctx, "IDs")
	if err = ahq.Select(assethistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ahq *AssetHistoryQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ahq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ahq *AssetHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ahq.ctx, "Count")
	if err := ahq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ahq, querierCount[*AssetHistoryQuery](), ahq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ahq *AssetHistoryQuery) CountX(ctx context.Context) int {
	count, err := ahq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ahq *AssetHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ahq.ctx, "Exist")
	switch _, err := ahq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ahq *AssetHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := ahq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ahq *AssetHistoryQuery) Clone() *AssetHistoryQuery {
	if ahq == nil {
		return nil
	}
	return &AssetHistoryQuery{
		config:     ahq.config,
		ctx:        ahq.ctx.Clone(),
		order:      append([]assethistory.OrderOption{}, ahq.order...),
		inters:     append([]Interceptor{}, ahq.inters...),
		predicates: append([]predicate.AssetHistory{}, ahq.predicates...),
		withAsset:  ahq.withAsset.Clone(),
		// clone intermediate query.
		sql:  ahq.sql.Clone(),
		path: ahq.path,
	}
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (ahq *AssetHistoryQuery) WithAsset(opts ...func(*AssetQuery)) *AssetHistoryQuery {
	query := (&AssetClient{config: ahq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ahq.withAsset = query
	return ahq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssetHistory.Query().
//		GroupBy(assethistory.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ahq *AssetHistoryQuery) GroupBy(field string, fields ...string) *AssetHistoryGroupBy {
	ahq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetHistoryGroupBy{build: ahq}
	grbuild.flds = &ahq.ctx.Fields
	grbuild.label = assethistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AssetHistory.Query().
//		Select(assethistory.FieldCreatedAt).
//		Scan(ctx, &v)
func (ahq *AssetHistoryQuery) Select(fields ...string) *AssetHistorySelect {
	ahq.ctx.Fields = append(ahq.ctx.Fields, fields...)
	sbuild := &AssetHistorySelect{AssetHistoryQuery: ahq}
	sbuild.label = assethistory.Label
	sbuild.flds, sbuild.scan = &ahq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetHistorySelect configured with the given aggregations.
func (ahq *AssetHistoryQuery) Aggregate(fns ...AggregateFunc) *AssetHistorySelect {
	return ahq.Select().Aggregate(fns...)
}

func (ahq *AssetHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ahq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ahq); err != nil {
				return err
			}
		}
	}
	for _, f := range ahq.ctx.Fields {
		if !assethistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ahq.path != nil {
		prev, err := ahq.path(ctx)
		if err != nil {
			return err
		}
		ahq.sql = prev
	}
	return nil
}

func (ahq *AssetHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssetHistory, error) {
	var (
		nodes       = []*AssetHistory{}
		_spec       = ahq.querySpec()
		loadedTypes = [1]bool{
			ahq.withAsset != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssetHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssetHistory{config: ahq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ahq.modifiers) > 0 {
		_spec.Modifiers = ahq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ahq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ahq.withAsset; query != nil {
		if err := ahq.loadAsset(ctx, query, nodes, nil,
			func(n *AssetHistory, e *Asset) { n.Edges.Asset = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ahq *AssetHistoryQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*AssetHistory, init func(*AssetHistory), assign func(*AssetHistory, *Asset)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetHistory)
	for i := range nodes {
		if nodes[i].AssetID == nil {
			continue
		}
		fk := *nodes[i].AssetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(asset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "asset_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ahq *AssetHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ahq.querySpec()
	if len(ahq.modifiers) > 0 {
		_spec.Modifiers = ahq.modifiers
	}
	_spec.Node.Columns = ahq.ctx.Fields
	if len(ahq.ctx.Fields) > 0 {
		_spec.Unique = ahq.ctx.Unique != nil && *ahq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ahq.driver, _spec)
}

func (ahq *AssetHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assethistory.Table, assethistory.Columns, sqlgraph.NewFieldSpec(assethistory.FieldID, field.TypeUint64))
	_spec.From = ahq.sql
	if unique := ahq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ahq.path != nil {
		_spec.Unique = true
	}
	if fields := ahq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assethistory.FieldID)
		for i := range fields {
			if fields[i] != assethistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ahq.withAsset != nil {
			_spec.Node.AddColumnOnce(assethistory.FieldAssetID)
		}
	}
	if ps := ahq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ahq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ahq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ahq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ahq *AssetHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ahq.driver.Dialect())
	t1 := builder.Table(assethistory.Table)
	columns := ahq.ctx.Fields
	if len(columns) == 0 {
		columns = assethistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ahq.sql != nil {
		selector = ahq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ahq.ctx.Unique != nil && *ahq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ahq.modifiers {
		m(selector)
	}
	for _, p := range ahq.predicates {
		p(selector)
	}
	for _, p := range ahq.order {
		p(selector)
	}
	if offset := ahq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ahq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ahq *AssetHistoryQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetHistorySelect {
	ahq.modifiers = append(ahq.modifiers, modifiers...)
	return ahq.Select()
}

type AssetHistoryQueryWith string

var (
	AssetHistoryQueryWithAsset AssetHistoryQueryWith = "Asset"
)

func (ahq *AssetHistoryQuery) With(withEdges ...AssetHistoryQueryWith) *AssetHistoryQuery {
	for _, v := range withEdges {
		switch v {
		case AssetHistoryQueryWithAsset:
			ahq.WithAsset()
		}
	}
	return ahq
}

// AssetHistoryGroupBy is the group-by builder for AssetHistory entities.
type AssetHistoryGroupBy struct {
	selector
	build *AssetHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ahgb *AssetHistoryGroupBy) Aggregate(fns ...AggregateFunc) *AssetHistoryGroupBy {
	ahgb.fns = append(ahgb.fns, fns...)
	return ahgb
}

// Scan applies the selector query and scans the result into the given value.
func (ahgb *AssetHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ahgb.build.ctx, "GroupBy")
	if err := ahgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetHistoryQuery, *AssetHistoryGroupBy](ctx, ahgb.build, ahgb, ahgb.build.inters, v)
}

func (ahgb *AssetHistoryGroupBy) sqlScan(ctx context.Context, root *AssetHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ahgb.fns))
	for _, fn := range ahgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ahgb.flds)+len(ahgb.fns))
		for _, f := range *ahgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ahgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ahgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetHistorySelect is the builder for selecting fields of AssetHistory entities.
type AssetHistorySelect struct {
	*AssetHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ahs *AssetHistorySelect) Aggregate(fns ...AggregateFunc) *AssetHistorySelect {
	ahs.fns = append(ahs.fns, fns...)
	return ahs
}

// Scan applies the selector query and scans the result into the given value.
func (ahs *AssetHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ahs.ctx, "Select")
	if err := ahs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetHistoryQuery, *AssetHistorySelect](ctx, ahs.AssetHistoryQuery, ahs, ahs.inters, v)
}

func (ahs *AssetHistorySelect) sqlScan(ctx context.Context, root *AssetHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ahs.fns))
	for _, fn := range ahs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ahs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ahs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ahs *AssetHistorySelect) Modify(modifiers ...func(s *sql.Selector)) *AssetHistorySelect {
	ahs.modifiers = append(ahs.modifiers, modifiers...)
	return ahs
}
