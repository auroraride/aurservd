// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// Rider is the model entity for the Rider schema.
type Rider struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// LastModify holds the value of the "last_modify" field.
	// 最后修改人
	LastModify *time.Time `json:"last_modify,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark *string `json:"remark,omitempty"`
	// PersonID holds the value of the "person_id" field.
	// 实人
	PersonID *uint64 `json:"person_id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	// 团队
	GroupID *uint64 `json:"group_id,omitempty"`
	// Phone holds the value of the "phone" field.
	// 手机号
	Phone string `json:"phone,omitempty"`
	// Contact holds the value of the "contact" field.
	// 紧急联系人
	Contact *model.RiderContact `json:"contact,omitempty"`
	// DeviceType holds the value of the "device_type" field.
	// 登录设备类型: 1iOS 2Android
	DeviceType uint8 `json:"device_type,omitempty"`
	// LastDevice holds the value of the "last_device" field.
	// 上次登录设备ID
	LastDevice string `json:"last_device,omitempty"`
	// LastFace holds the value of the "last_face" field.
	// 上次登录人脸
	LastFace *string `json:"last_face,omitempty"`
	// PushID holds the value of the "push_id" field.
	// 推送ID
	PushID *string `json:"push_id,omitempty"`
	// LastSigninAt holds the value of the "last_signin_at" field.
	// 最后登录时间
	LastSigninAt *time.Time `json:"last_signin_at,omitempty"`
	// EsignAccountID holds the value of the "esign_account_id" field.
	// E签宝账户ID
	EsignAccountID string `json:"esign_account_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RiderQuery when eager-loading is set.
	Edges RiderEdges `json:"edges"`
}

// RiderEdges holds the relations/edges for other nodes in the graph.
type RiderEdges struct {
	// Person holds the value of the person edge.
	Person *Person `json:"person,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RiderEdges) PersonOrErr() (*Person, error) {
	if e.loadedTypes[0] {
		if e.Person == nil {
			// The edge person was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: person.Label}
		}
		return e.Person, nil
	}
	return nil, &NotLoadedError{edge: "person"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rider) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rider.FieldContact:
			values[i] = new([]byte)
		case rider.FieldID, rider.FieldPersonID, rider.FieldGroupID, rider.FieldDeviceType:
			values[i] = new(sql.NullInt64)
		case rider.FieldRemark, rider.FieldPhone, rider.FieldLastDevice, rider.FieldLastFace, rider.FieldPushID, rider.FieldEsignAccountID:
			values[i] = new(sql.NullString)
		case rider.FieldCreatedAt, rider.FieldUpdatedAt, rider.FieldDeletedAt, rider.FieldLastModify, rider.FieldLastSigninAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Rider", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rider fields.
func (r *Rider) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rider.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = uint64(value.Int64)
		case rider.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case rider.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case rider.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = new(time.Time)
				*r.DeletedAt = value.Time
			}
		case rider.FieldLastModify:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modify", values[i])
			} else if value.Valid {
				r.LastModify = new(time.Time)
				*r.LastModify = value.Time
			}
		case rider.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				r.Remark = new(string)
				*r.Remark = value.String
			}
		case rider.FieldPersonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field person_id", values[i])
			} else if value.Valid {
				r.PersonID = new(uint64)
				*r.PersonID = uint64(value.Int64)
			}
		case rider.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				r.GroupID = new(uint64)
				*r.GroupID = uint64(value.Int64)
			}
		case rider.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				r.Phone = value.String
			}
		case rider.FieldContact:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field contact", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Contact); err != nil {
					return fmt.Errorf("unmarshal field contact: %w", err)
				}
			}
		case rider.FieldDeviceType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_type", values[i])
			} else if value.Valid {
				r.DeviceType = uint8(value.Int64)
			}
		case rider.FieldLastDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_device", values[i])
			} else if value.Valid {
				r.LastDevice = value.String
			}
		case rider.FieldLastFace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_face", values[i])
			} else if value.Valid {
				r.LastFace = new(string)
				*r.LastFace = value.String
			}
		case rider.FieldPushID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field push_id", values[i])
			} else if value.Valid {
				r.PushID = new(string)
				*r.PushID = value.String
			}
		case rider.FieldLastSigninAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_signin_at", values[i])
			} else if value.Valid {
				r.LastSigninAt = new(time.Time)
				*r.LastSigninAt = value.Time
			}
		case rider.FieldEsignAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field esign_account_id", values[i])
			} else if value.Valid {
				r.EsignAccountID = value.String
			}
		}
	}
	return nil
}

// QueryPerson queries the "person" edge of the Rider entity.
func (r *Rider) QueryPerson() *PersonQuery {
	return (&RiderClient{config: r.config}).QueryPerson(r)
}

// Update returns a builder for updating this Rider.
// Note that you need to call Rider.Unwrap() before calling this method if this Rider
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rider) Update() *RiderUpdateOne {
	return (&RiderClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Rider entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rider) Unwrap() *Rider {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rider is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rider) String() string {
	var builder strings.Builder
	builder.WriteString("Rider(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	if v := r.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := r.LastModify; v != nil {
		builder.WriteString(", last_modify=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := r.Remark; v != nil {
		builder.WriteString(", remark=")
		builder.WriteString(*v)
	}
	if v := r.PersonID; v != nil {
		builder.WriteString(", person_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := r.GroupID; v != nil {
		builder.WriteString(", group_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", phone=")
	builder.WriteString(r.Phone)
	builder.WriteString(", contact=")
	builder.WriteString(fmt.Sprintf("%v", r.Contact))
	builder.WriteString(", device_type=")
	builder.WriteString(fmt.Sprintf("%v", r.DeviceType))
	builder.WriteString(", last_device=")
	builder.WriteString(r.LastDevice)
	if v := r.LastFace; v != nil {
		builder.WriteString(", last_face=")
		builder.WriteString(*v)
	}
	if v := r.PushID; v != nil {
		builder.WriteString(", push_id=")
		builder.WriteString(*v)
	}
	if v := r.LastSigninAt; v != nil {
		builder.WriteString(", last_signin_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", esign_account_id=")
	builder.WriteString(r.EsignAccountID)
	builder.WriteByte(')')
	return builder.String()
}

// Riders is a parsable slice of Rider.
type Riders []*Rider

func (r Riders) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
