// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PersonCreate) SetCreatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCreatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PersonCreate) SetUpdatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableUpdatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PersonCreate) SetDeletedAt(t time.Time) *PersonCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDeletedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetCreator sets the "creator" field.
func (pc *PersonCreate) SetCreator(m *model.Modifier) *PersonCreate {
	pc.mutation.SetCreator(m)
	return pc
}

// SetLastModifier sets the "last_modifier" field.
func (pc *PersonCreate) SetLastModifier(m *model.Modifier) *PersonCreate {
	pc.mutation.SetLastModifier(m)
	return pc
}

// SetRemark sets the "remark" field.
func (pc *PersonCreate) SetRemark(s string) *PersonCreate {
	pc.mutation.SetRemark(s)
	return pc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pc *PersonCreate) SetNillableRemark(s *string) *PersonCreate {
	if s != nil {
		pc.SetRemark(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PersonCreate) SetStatus(u uint8) *PersonCreate {
	pc.mutation.SetStatus(u)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PersonCreate) SetNillableStatus(u *uint8) *PersonCreate {
	if u != nil {
		pc.SetStatus(*u)
	}
	return pc
}

// SetBanned sets the "banned" field.
func (pc *PersonCreate) SetBanned(b bool) *PersonCreate {
	pc.mutation.SetBanned(b)
	return pc
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (pc *PersonCreate) SetNillableBanned(b *bool) *PersonCreate {
	if b != nil {
		pc.SetBanned(*b)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PersonCreate) SetName(s string) *PersonCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetIDCardNumber sets the "id_card_number" field.
func (pc *PersonCreate) SetIDCardNumber(s string) *PersonCreate {
	pc.mutation.SetIDCardNumber(s)
	return pc
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (pc *PersonCreate) SetNillableIDCardNumber(s *string) *PersonCreate {
	if s != nil {
		pc.SetIDCardNumber(*s)
	}
	return pc
}

// SetIDCardType sets the "id_card_type" field.
func (pc *PersonCreate) SetIDCardType(u uint8) *PersonCreate {
	pc.mutation.SetIDCardType(u)
	return pc
}

// SetNillableIDCardType sets the "id_card_type" field if the given value is not nil.
func (pc *PersonCreate) SetNillableIDCardType(u *uint8) *PersonCreate {
	if u != nil {
		pc.SetIDCardType(*u)
	}
	return pc
}

// SetIDCardPortrait sets the "id_card_portrait" field.
func (pc *PersonCreate) SetIDCardPortrait(s string) *PersonCreate {
	pc.mutation.SetIDCardPortrait(s)
	return pc
}

// SetNillableIDCardPortrait sets the "id_card_portrait" field if the given value is not nil.
func (pc *PersonCreate) SetNillableIDCardPortrait(s *string) *PersonCreate {
	if s != nil {
		pc.SetIDCardPortrait(*s)
	}
	return pc
}

// SetIDCardNational sets the "id_card_national" field.
func (pc *PersonCreate) SetIDCardNational(s string) *PersonCreate {
	pc.mutation.SetIDCardNational(s)
	return pc
}

// SetNillableIDCardNational sets the "id_card_national" field if the given value is not nil.
func (pc *PersonCreate) SetNillableIDCardNational(s *string) *PersonCreate {
	if s != nil {
		pc.SetIDCardNational(*s)
	}
	return pc
}

// SetAuthFace sets the "auth_face" field.
func (pc *PersonCreate) SetAuthFace(s string) *PersonCreate {
	pc.mutation.SetAuthFace(s)
	return pc
}

// SetNillableAuthFace sets the "auth_face" field if the given value is not nil.
func (pc *PersonCreate) SetNillableAuthFace(s *string) *PersonCreate {
	if s != nil {
		pc.SetAuthFace(*s)
	}
	return pc
}

// SetAuthResult sets the "auth_result" field.
func (pc *PersonCreate) SetAuthResult(mvr *model.FaceVerifyResult) *PersonCreate {
	pc.mutation.SetAuthResult(mvr)
	return pc
}

// SetAuthAt sets the "auth_at" field.
func (pc *PersonCreate) SetAuthAt(t time.Time) *PersonCreate {
	pc.mutation.SetAuthAt(t)
	return pc
}

// SetNillableAuthAt sets the "auth_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableAuthAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetAuthAt(*t)
	}
	return pc
}

// SetEsignAccountID sets the "esign_account_id" field.
func (pc *PersonCreate) SetEsignAccountID(s string) *PersonCreate {
	pc.mutation.SetEsignAccountID(s)
	return pc
}

// SetNillableEsignAccountID sets the "esign_account_id" field if the given value is not nil.
func (pc *PersonCreate) SetNillableEsignAccountID(s *string) *PersonCreate {
	if s != nil {
		pc.SetEsignAccountID(*s)
	}
	return pc
}

// AddRiderIDs adds the "rider" edge to the Rider entity by IDs.
func (pc *PersonCreate) AddRiderIDs(ids ...uint64) *PersonCreate {
	pc.mutation.AddRiderIDs(ids...)
	return pc
}

// AddRider adds the "rider" edges to the Rider entity.
func (pc *PersonCreate) AddRider(r ...*Rider) *PersonCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRiderIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Person)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PersonMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if person.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized person.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := person.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if person.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized person.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := person.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := person.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.Banned(); !ok {
		v := person.DefaultBanned
		pc.mutation.SetBanned(v)
	}
	if _, ok := pc.mutation.IDCardType(); !ok {
		v := person.DefaultIDCardType
		pc.mutation.SetIDCardType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Person.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Person.updated_at"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Person.status"`)}
	}
	if _, ok := pc.mutation.Banned(); !ok {
		return &ValidationError{Name: "banned", err: errors.New(`ent: missing required field "Person.banned"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Person.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Person.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.IDCardNumber(); ok {
		if err := person.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`ent: validator failed for field "Person.id_card_number": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IDCardType(); !ok {
		return &ValidationError{Name: "id_card_type", err: errors.New(`ent: missing required field "Person.id_card_type"`)}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: person.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := pc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := pc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pc.mutation.Banned(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldBanned,
		})
		_node.Banned = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.IDCardNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardNumber,
		})
		_node.IDCardNumber = value
	}
	if value, ok := pc.mutation.IDCardType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIDCardType,
		})
		_node.IDCardType = value
	}
	if value, ok := pc.mutation.IDCardPortrait(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardPortrait,
		})
		_node.IDCardPortrait = value
	}
	if value, ok := pc.mutation.IDCardNational(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardNational,
		})
		_node.IDCardNational = value
	}
	if value, ok := pc.mutation.AuthFace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldAuthFace,
		})
		_node.AuthFace = value
	}
	if value, ok := pc.mutation.AuthResult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldAuthResult,
		})
		_node.AuthResult = value
	}
	if value, ok := pc.mutation.AuthAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldAuthAt,
		})
		_node.AuthAt = &value
	}
	if value, ok := pc.mutation.EsignAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldEsignAccountID,
		})
		_node.EsignAccountID = value
	}
	if nodes := pc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Person.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PersonCreate) OnConflict(opts ...sql.ConflictOption) *PersonUpsertOne {
	pc.conflict = opts
	return &PersonUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PersonCreate) OnConflictColumns(columns ...string) *PersonUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PersonUpsertOne{
		create: pc,
	}
}

type (
	// PersonUpsertOne is the builder for "upsert"-ing
	//  one Person node.
	PersonUpsertOne struct {
		create *PersonCreate
	}

	// PersonUpsert is the "OnConflict" setter.
	PersonUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsert) SetCreatedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateCreatedAt() *PersonUpsert {
	u.SetExcluded(person.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsert) SetUpdatedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateUpdatedAt() *PersonUpsert {
	u.SetExcluded(person.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PersonUpsert) SetDeletedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateDeletedAt() *PersonUpsert {
	u.SetExcluded(person.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PersonUpsert) ClearDeletedAt() *PersonUpsert {
	u.SetNull(person.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *PersonUpsert) SetCreator(v *model.Modifier) *PersonUpsert {
	u.Set(person.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *PersonUpsert) UpdateCreator() *PersonUpsert {
	u.SetExcluded(person.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *PersonUpsert) ClearCreator() *PersonUpsert {
	u.SetNull(person.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PersonUpsert) SetLastModifier(v *model.Modifier) *PersonUpsert {
	u.Set(person.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PersonUpsert) UpdateLastModifier() *PersonUpsert {
	u.SetExcluded(person.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PersonUpsert) ClearLastModifier() *PersonUpsert {
	u.SetNull(person.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PersonUpsert) SetRemark(v string) *PersonUpsert {
	u.Set(person.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PersonUpsert) UpdateRemark() *PersonUpsert {
	u.SetExcluded(person.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PersonUpsert) ClearRemark() *PersonUpsert {
	u.SetNull(person.FieldRemark)
	return u
}

// SetStatus sets the "status" field.
func (u *PersonUpsert) SetStatus(v uint8) *PersonUpsert {
	u.Set(person.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PersonUpsert) UpdateStatus() *PersonUpsert {
	u.SetExcluded(person.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PersonUpsert) AddStatus(v uint8) *PersonUpsert {
	u.Add(person.FieldStatus, v)
	return u
}

// SetBanned sets the "banned" field.
func (u *PersonUpsert) SetBanned(v bool) *PersonUpsert {
	u.Set(person.FieldBanned, v)
	return u
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *PersonUpsert) UpdateBanned() *PersonUpsert {
	u.SetExcluded(person.FieldBanned)
	return u
}

// SetName sets the "name" field.
func (u *PersonUpsert) SetName(v string) *PersonUpsert {
	u.Set(person.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsert) UpdateName() *PersonUpsert {
	u.SetExcluded(person.FieldName)
	return u
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *PersonUpsert) SetIDCardNumber(v string) *PersonUpsert {
	u.Set(person.FieldIDCardNumber, v)
	return u
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIDCardNumber() *PersonUpsert {
	u.SetExcluded(person.FieldIDCardNumber)
	return u
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (u *PersonUpsert) ClearIDCardNumber() *PersonUpsert {
	u.SetNull(person.FieldIDCardNumber)
	return u
}

// SetIDCardType sets the "id_card_type" field.
func (u *PersonUpsert) SetIDCardType(v uint8) *PersonUpsert {
	u.Set(person.FieldIDCardType, v)
	return u
}

// UpdateIDCardType sets the "id_card_type" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIDCardType() *PersonUpsert {
	u.SetExcluded(person.FieldIDCardType)
	return u
}

// AddIDCardType adds v to the "id_card_type" field.
func (u *PersonUpsert) AddIDCardType(v uint8) *PersonUpsert {
	u.Add(person.FieldIDCardType, v)
	return u
}

// SetIDCardPortrait sets the "id_card_portrait" field.
func (u *PersonUpsert) SetIDCardPortrait(v string) *PersonUpsert {
	u.Set(person.FieldIDCardPortrait, v)
	return u
}

// UpdateIDCardPortrait sets the "id_card_portrait" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIDCardPortrait() *PersonUpsert {
	u.SetExcluded(person.FieldIDCardPortrait)
	return u
}

// ClearIDCardPortrait clears the value of the "id_card_portrait" field.
func (u *PersonUpsert) ClearIDCardPortrait() *PersonUpsert {
	u.SetNull(person.FieldIDCardPortrait)
	return u
}

// SetIDCardNational sets the "id_card_national" field.
func (u *PersonUpsert) SetIDCardNational(v string) *PersonUpsert {
	u.Set(person.FieldIDCardNational, v)
	return u
}

// UpdateIDCardNational sets the "id_card_national" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIDCardNational() *PersonUpsert {
	u.SetExcluded(person.FieldIDCardNational)
	return u
}

// ClearIDCardNational clears the value of the "id_card_national" field.
func (u *PersonUpsert) ClearIDCardNational() *PersonUpsert {
	u.SetNull(person.FieldIDCardNational)
	return u
}

// SetAuthFace sets the "auth_face" field.
func (u *PersonUpsert) SetAuthFace(v string) *PersonUpsert {
	u.Set(person.FieldAuthFace, v)
	return u
}

// UpdateAuthFace sets the "auth_face" field to the value that was provided on create.
func (u *PersonUpsert) UpdateAuthFace() *PersonUpsert {
	u.SetExcluded(person.FieldAuthFace)
	return u
}

// ClearAuthFace clears the value of the "auth_face" field.
func (u *PersonUpsert) ClearAuthFace() *PersonUpsert {
	u.SetNull(person.FieldAuthFace)
	return u
}

// SetAuthResult sets the "auth_result" field.
func (u *PersonUpsert) SetAuthResult(v *model.FaceVerifyResult) *PersonUpsert {
	u.Set(person.FieldAuthResult, v)
	return u
}

// UpdateAuthResult sets the "auth_result" field to the value that was provided on create.
func (u *PersonUpsert) UpdateAuthResult() *PersonUpsert {
	u.SetExcluded(person.FieldAuthResult)
	return u
}

// ClearAuthResult clears the value of the "auth_result" field.
func (u *PersonUpsert) ClearAuthResult() *PersonUpsert {
	u.SetNull(person.FieldAuthResult)
	return u
}

// SetAuthAt sets the "auth_at" field.
func (u *PersonUpsert) SetAuthAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldAuthAt, v)
	return u
}

// UpdateAuthAt sets the "auth_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateAuthAt() *PersonUpsert {
	u.SetExcluded(person.FieldAuthAt)
	return u
}

// ClearAuthAt clears the value of the "auth_at" field.
func (u *PersonUpsert) ClearAuthAt() *PersonUpsert {
	u.SetNull(person.FieldAuthAt)
	return u
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *PersonUpsert) SetEsignAccountID(v string) *PersonUpsert {
	u.Set(person.FieldEsignAccountID, v)
	return u
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *PersonUpsert) UpdateEsignAccountID() *PersonUpsert {
	u.SetExcluded(person.FieldEsignAccountID)
	return u
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *PersonUpsert) ClearEsignAccountID() *PersonUpsert {
	u.SetNull(person.FieldEsignAccountID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PersonUpsertOne) UpdateNewValues() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(person.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(person.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Person.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PersonUpsertOne) Ignore() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonUpsertOne) DoNothing() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonCreate.OnConflict
// documentation for more info.
func (u *PersonUpsertOne) Update(set func(*PersonUpsert)) *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsertOne) SetCreatedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateCreatedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsertOne) SetUpdatedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateUpdatedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PersonUpsertOne) SetDeletedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateDeletedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PersonUpsertOne) ClearDeletedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *PersonUpsertOne) SetCreator(v *model.Modifier) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateCreator() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *PersonUpsertOne) ClearCreator() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PersonUpsertOne) SetLastModifier(v *model.Modifier) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateLastModifier() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PersonUpsertOne) ClearLastModifier() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PersonUpsertOne) SetRemark(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateRemark() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PersonUpsertOne) ClearRemark() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearRemark()
	})
}

// SetStatus sets the "status" field.
func (u *PersonUpsertOne) SetStatus(v uint8) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PersonUpsertOne) AddStatus(v uint8) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateStatus() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateStatus()
	})
}

// SetBanned sets the "banned" field.
func (u *PersonUpsertOne) SetBanned(v bool) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetBanned(v)
	})
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateBanned() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateBanned()
	})
}

// SetName sets the "name" field.
func (u *PersonUpsertOne) SetName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateName()
	})
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *PersonUpsertOne) SetIDCardNumber(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIDCardNumber(v)
	})
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIDCardNumber() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIDCardNumber()
	})
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (u *PersonUpsertOne) ClearIDCardNumber() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIDCardNumber()
	})
}

// SetIDCardType sets the "id_card_type" field.
func (u *PersonUpsertOne) SetIDCardType(v uint8) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIDCardType(v)
	})
}

// AddIDCardType adds v to the "id_card_type" field.
func (u *PersonUpsertOne) AddIDCardType(v uint8) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.AddIDCardType(v)
	})
}

// UpdateIDCardType sets the "id_card_type" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIDCardType() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIDCardType()
	})
}

// SetIDCardPortrait sets the "id_card_portrait" field.
func (u *PersonUpsertOne) SetIDCardPortrait(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIDCardPortrait(v)
	})
}

// UpdateIDCardPortrait sets the "id_card_portrait" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIDCardPortrait() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIDCardPortrait()
	})
}

// ClearIDCardPortrait clears the value of the "id_card_portrait" field.
func (u *PersonUpsertOne) ClearIDCardPortrait() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIDCardPortrait()
	})
}

// SetIDCardNational sets the "id_card_national" field.
func (u *PersonUpsertOne) SetIDCardNational(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIDCardNational(v)
	})
}

// UpdateIDCardNational sets the "id_card_national" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIDCardNational() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIDCardNational()
	})
}

// ClearIDCardNational clears the value of the "id_card_national" field.
func (u *PersonUpsertOne) ClearIDCardNational() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIDCardNational()
	})
}

// SetAuthFace sets the "auth_face" field.
func (u *PersonUpsertOne) SetAuthFace(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetAuthFace(v)
	})
}

// UpdateAuthFace sets the "auth_face" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateAuthFace() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateAuthFace()
	})
}

// ClearAuthFace clears the value of the "auth_face" field.
func (u *PersonUpsertOne) ClearAuthFace() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearAuthFace()
	})
}

// SetAuthResult sets the "auth_result" field.
func (u *PersonUpsertOne) SetAuthResult(v *model.FaceVerifyResult) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetAuthResult(v)
	})
}

// UpdateAuthResult sets the "auth_result" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateAuthResult() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateAuthResult()
	})
}

// ClearAuthResult clears the value of the "auth_result" field.
func (u *PersonUpsertOne) ClearAuthResult() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearAuthResult()
	})
}

// SetAuthAt sets the "auth_at" field.
func (u *PersonUpsertOne) SetAuthAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetAuthAt(v)
	})
}

// UpdateAuthAt sets the "auth_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateAuthAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateAuthAt()
	})
}

// ClearAuthAt clears the value of the "auth_at" field.
func (u *PersonUpsertOne) ClearAuthAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearAuthAt()
	})
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *PersonUpsertOne) SetEsignAccountID(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetEsignAccountID(v)
	})
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateEsignAccountID() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateEsignAccountID()
	})
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *PersonUpsertOne) ClearEsignAccountID() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearEsignAccountID()
	})
}

// Exec executes the query.
func (u *PersonUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PersonCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PersonUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PersonUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	builders []*PersonCreate
	conflict []sql.ConflictOption
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Person.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PersonCreateBulk) OnConflict(opts ...sql.ConflictOption) *PersonUpsertBulk {
	pcb.conflict = opts
	return &PersonUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PersonCreateBulk) OnConflictColumns(columns ...string) *PersonUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PersonUpsertBulk{
		create: pcb,
	}
}

// PersonUpsertBulk is the builder for "upsert"-ing
// a bulk of Person nodes.
type PersonUpsertBulk struct {
	create *PersonCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PersonUpsertBulk) UpdateNewValues() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(person.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(person.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PersonUpsertBulk) Ignore() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonUpsertBulk) DoNothing() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonCreateBulk.OnConflict
// documentation for more info.
func (u *PersonUpsertBulk) Update(set func(*PersonUpsert)) *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsertBulk) SetCreatedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateCreatedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsertBulk) SetUpdatedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateUpdatedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PersonUpsertBulk) SetDeletedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateDeletedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PersonUpsertBulk) ClearDeletedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *PersonUpsertBulk) SetCreator(v *model.Modifier) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateCreator() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *PersonUpsertBulk) ClearCreator() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PersonUpsertBulk) SetLastModifier(v *model.Modifier) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateLastModifier() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PersonUpsertBulk) ClearLastModifier() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PersonUpsertBulk) SetRemark(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateRemark() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PersonUpsertBulk) ClearRemark() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearRemark()
	})
}

// SetStatus sets the "status" field.
func (u *PersonUpsertBulk) SetStatus(v uint8) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PersonUpsertBulk) AddStatus(v uint8) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateStatus() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateStatus()
	})
}

// SetBanned sets the "banned" field.
func (u *PersonUpsertBulk) SetBanned(v bool) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetBanned(v)
	})
}

// UpdateBanned sets the "banned" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateBanned() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateBanned()
	})
}

// SetName sets the "name" field.
func (u *PersonUpsertBulk) SetName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateName()
	})
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *PersonUpsertBulk) SetIDCardNumber(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIDCardNumber(v)
	})
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIDCardNumber() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIDCardNumber()
	})
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (u *PersonUpsertBulk) ClearIDCardNumber() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIDCardNumber()
	})
}

// SetIDCardType sets the "id_card_type" field.
func (u *PersonUpsertBulk) SetIDCardType(v uint8) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIDCardType(v)
	})
}

// AddIDCardType adds v to the "id_card_type" field.
func (u *PersonUpsertBulk) AddIDCardType(v uint8) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.AddIDCardType(v)
	})
}

// UpdateIDCardType sets the "id_card_type" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIDCardType() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIDCardType()
	})
}

// SetIDCardPortrait sets the "id_card_portrait" field.
func (u *PersonUpsertBulk) SetIDCardPortrait(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIDCardPortrait(v)
	})
}

// UpdateIDCardPortrait sets the "id_card_portrait" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIDCardPortrait() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIDCardPortrait()
	})
}

// ClearIDCardPortrait clears the value of the "id_card_portrait" field.
func (u *PersonUpsertBulk) ClearIDCardPortrait() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIDCardPortrait()
	})
}

// SetIDCardNational sets the "id_card_national" field.
func (u *PersonUpsertBulk) SetIDCardNational(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIDCardNational(v)
	})
}

// UpdateIDCardNational sets the "id_card_national" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIDCardNational() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIDCardNational()
	})
}

// ClearIDCardNational clears the value of the "id_card_national" field.
func (u *PersonUpsertBulk) ClearIDCardNational() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearIDCardNational()
	})
}

// SetAuthFace sets the "auth_face" field.
func (u *PersonUpsertBulk) SetAuthFace(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetAuthFace(v)
	})
}

// UpdateAuthFace sets the "auth_face" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateAuthFace() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateAuthFace()
	})
}

// ClearAuthFace clears the value of the "auth_face" field.
func (u *PersonUpsertBulk) ClearAuthFace() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearAuthFace()
	})
}

// SetAuthResult sets the "auth_result" field.
func (u *PersonUpsertBulk) SetAuthResult(v *model.FaceVerifyResult) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetAuthResult(v)
	})
}

// UpdateAuthResult sets the "auth_result" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateAuthResult() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateAuthResult()
	})
}

// ClearAuthResult clears the value of the "auth_result" field.
func (u *PersonUpsertBulk) ClearAuthResult() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearAuthResult()
	})
}

// SetAuthAt sets the "auth_at" field.
func (u *PersonUpsertBulk) SetAuthAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetAuthAt(v)
	})
}

// UpdateAuthAt sets the "auth_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateAuthAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateAuthAt()
	})
}

// ClearAuthAt clears the value of the "auth_at" field.
func (u *PersonUpsertBulk) ClearAuthAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearAuthAt()
	})
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *PersonUpsertBulk) SetEsignAccountID(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetEsignAccountID(v)
	})
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateEsignAccountID() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateEsignAccountID()
	})
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *PersonUpsertBulk) ClearEsignAccountID() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearEsignAccountID()
	})
}

// Exec executes the query.
func (u *PersonUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PersonCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PersonCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
