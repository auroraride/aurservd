// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PersonCreate) SetCreatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCreatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PersonCreate) SetUpdatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableUpdatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PersonCreate) SetDeletedAt(t time.Time) *PersonCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDeletedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetLastModify sets the "last_modify" field.
func (pc *PersonCreate) SetLastModify(t time.Time) *PersonCreate {
	pc.mutation.SetLastModify(t)
	return pc
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (pc *PersonCreate) SetNillableLastModify(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetLastModify(*t)
	}
	return pc
}

// SetRemark sets the "remark" field.
func (pc *PersonCreate) SetRemark(s string) *PersonCreate {
	pc.mutation.SetRemark(s)
	return pc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pc *PersonCreate) SetNillableRemark(s *string) *PersonCreate {
	if s != nil {
		pc.SetRemark(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PersonCreate) SetStatus(u uint8) *PersonCreate {
	pc.mutation.SetStatus(u)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PersonCreate) SetNillableStatus(u *uint8) *PersonCreate {
	if u != nil {
		pc.SetStatus(*u)
	}
	return pc
}

// SetBlock sets the "block" field.
func (pc *PersonCreate) SetBlock(b bool) *PersonCreate {
	pc.mutation.SetBlock(b)
	return pc
}

// SetNillableBlock sets the "block" field if the given value is not nil.
func (pc *PersonCreate) SetNillableBlock(b *bool) *PersonCreate {
	if b != nil {
		pc.SetBlock(*b)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PersonCreate) SetName(s string) *PersonCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetIcNumber sets the "ic_number" field.
func (pc *PersonCreate) SetIcNumber(s string) *PersonCreate {
	pc.mutation.SetIcNumber(s)
	return pc
}

// SetIcType sets the "ic_type" field.
func (pc *PersonCreate) SetIcType(u uint8) *PersonCreate {
	pc.mutation.SetIcType(u)
	return pc
}

// SetNillableIcType sets the "ic_type" field if the given value is not nil.
func (pc *PersonCreate) SetNillableIcType(u *uint8) *PersonCreate {
	if u != nil {
		pc.SetIcType(*u)
	}
	return pc
}

// SetIcPortrait sets the "ic_portrait" field.
func (pc *PersonCreate) SetIcPortrait(s string) *PersonCreate {
	pc.mutation.SetIcPortrait(s)
	return pc
}

// SetIcNational sets the "ic_national" field.
func (pc *PersonCreate) SetIcNational(s string) *PersonCreate {
	pc.mutation.SetIcNational(s)
	return pc
}

// SetFaceImg sets the "face_img" field.
func (pc *PersonCreate) SetFaceImg(s string) *PersonCreate {
	pc.mutation.SetFaceImg(s)
	return pc
}

// SetFaceVerifyResult sets the "face_verify_result" field.
func (pc *PersonCreate) SetFaceVerifyResult(mvr *model.FaceVerifyResult) *PersonCreate {
	pc.mutation.SetFaceVerifyResult(mvr)
	return pc
}

// SetResultAt sets the "result_at" field.
func (pc *PersonCreate) SetResultAt(t time.Time) *PersonCreate {
	pc.mutation.SetResultAt(t)
	return pc
}

// SetNillableResultAt sets the "result_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableResultAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetResultAt(*t)
	}
	return pc
}

// SetEsignAccountID sets the "esign_account_id" field.
func (pc *PersonCreate) SetEsignAccountID(s string) *PersonCreate {
	pc.mutation.SetEsignAccountID(s)
	return pc
}

// SetNillableEsignAccountID sets the "esign_account_id" field if the given value is not nil.
func (pc *PersonCreate) SetNillableEsignAccountID(s *string) *PersonCreate {
	if s != nil {
		pc.SetEsignAccountID(*s)
	}
	return pc
}

// AddRiderIDs adds the "rider" edge to the Rider entity by IDs.
func (pc *PersonCreate) AddRiderIDs(ids ...uint64) *PersonCreate {
	pc.mutation.AddRiderIDs(ids...)
	return pc
}

// AddRider adds the "rider" edges to the Rider entity.
func (pc *PersonCreate) AddRider(r ...*Rider) *PersonCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRiderIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := person.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := person.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := person.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.Block(); !ok {
		v := person.DefaultBlock
		pc.mutation.SetBlock(v)
	}
	if _, ok := pc.mutation.IcType(); !ok {
		v := person.DefaultIcType
		pc.mutation.SetIcType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if _, ok := pc.mutation.Block(); !ok {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required field "block"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IcNumber(); !ok {
		return &ValidationError{Name: "ic_number", err: errors.New(`ent: missing required field "ic_number"`)}
	}
	if v, ok := pc.mutation.IcNumber(); ok {
		if err := person.IcNumberValidator(v); err != nil {
			return &ValidationError{Name: "ic_number", err: fmt.Errorf(`ent: validator failed for field "ic_number": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IcType(); !ok {
		return &ValidationError{Name: "ic_type", err: errors.New(`ent: missing required field "ic_type"`)}
	}
	if _, ok := pc.mutation.IcPortrait(); !ok {
		return &ValidationError{Name: "ic_portrait", err: errors.New(`ent: missing required field "ic_portrait"`)}
	}
	if _, ok := pc.mutation.IcNational(); !ok {
		return &ValidationError{Name: "ic_national", err: errors.New(`ent: missing required field "ic_national"`)}
	}
	if _, ok := pc.mutation.FaceImg(); !ok {
		return &ValidationError{Name: "face_img", err: errors.New(`ent: missing required field "face_img"`)}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: person.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.LastModify(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldLastModify,
		})
		_node.LastModify = &value
	}
	if value, ok := pc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldRemark,
		})
		_node.Remark = &value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pc.mutation.Block(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldBlock,
		})
		_node.Block = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.IcNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcNumber,
		})
		_node.IcNumber = value
	}
	if value, ok := pc.mutation.IcType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIcType,
		})
		_node.IcType = value
	}
	if value, ok := pc.mutation.IcPortrait(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcPortrait,
		})
		_node.IcPortrait = value
	}
	if value, ok := pc.mutation.IcNational(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcNational,
		})
		_node.IcNational = value
	}
	if value, ok := pc.mutation.FaceImg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFaceImg,
		})
		_node.FaceImg = value
	}
	if value, ok := pc.mutation.FaceVerifyResult(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldFaceVerifyResult,
		})
		_node.FaceVerifyResult = value
	}
	if value, ok := pc.mutation.ResultAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldResultAt,
		})
		_node.ResultAt = &value
	}
	if value, ok := pc.mutation.EsignAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldEsignAccountID,
		})
		_node.EsignAccountID = value
	}
	if nodes := pc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Person.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PersonCreate) OnConflict(opts ...sql.ConflictOption) *PersonUpsertOne {
	pc.conflict = opts
	return &PersonUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PersonCreate) OnConflictColumns(columns ...string) *PersonUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PersonUpsertOne{
		create: pc,
	}
}

type (
	// PersonUpsertOne is the builder for "upsert"-ing
	//  one Person node.
	PersonUpsertOne struct {
		create *PersonCreate
	}

	// PersonUpsert is the "OnConflict" setter.
	PersonUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsert) SetCreatedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateCreatedAt() *PersonUpsert {
	u.SetExcluded(person.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsert) SetUpdatedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateUpdatedAt() *PersonUpsert {
	u.SetExcluded(person.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PersonUpsert) SetDeletedAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateDeletedAt() *PersonUpsert {
	u.SetExcluded(person.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PersonUpsert) ClearDeletedAt() *PersonUpsert {
	u.SetNull(person.FieldDeletedAt)
	return u
}

// SetLastModify sets the "last_modify" field.
func (u *PersonUpsert) SetLastModify(v time.Time) *PersonUpsert {
	u.Set(person.FieldLastModify, v)
	return u
}

// UpdateLastModify sets the "last_modify" field to the value that was provided on create.
func (u *PersonUpsert) UpdateLastModify() *PersonUpsert {
	u.SetExcluded(person.FieldLastModify)
	return u
}

// ClearLastModify clears the value of the "last_modify" field.
func (u *PersonUpsert) ClearLastModify() *PersonUpsert {
	u.SetNull(person.FieldLastModify)
	return u
}

// SetRemark sets the "remark" field.
func (u *PersonUpsert) SetRemark(v string) *PersonUpsert {
	u.Set(person.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PersonUpsert) UpdateRemark() *PersonUpsert {
	u.SetExcluded(person.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PersonUpsert) ClearRemark() *PersonUpsert {
	u.SetNull(person.FieldRemark)
	return u
}

// SetStatus sets the "status" field.
func (u *PersonUpsert) SetStatus(v uint8) *PersonUpsert {
	u.Set(person.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PersonUpsert) UpdateStatus() *PersonUpsert {
	u.SetExcluded(person.FieldStatus)
	return u
}

// SetBlock sets the "block" field.
func (u *PersonUpsert) SetBlock(v bool) *PersonUpsert {
	u.Set(person.FieldBlock, v)
	return u
}

// UpdateBlock sets the "block" field to the value that was provided on create.
func (u *PersonUpsert) UpdateBlock() *PersonUpsert {
	u.SetExcluded(person.FieldBlock)
	return u
}

// SetName sets the "name" field.
func (u *PersonUpsert) SetName(v string) *PersonUpsert {
	u.Set(person.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsert) UpdateName() *PersonUpsert {
	u.SetExcluded(person.FieldName)
	return u
}

// SetIcNumber sets the "ic_number" field.
func (u *PersonUpsert) SetIcNumber(v string) *PersonUpsert {
	u.Set(person.FieldIcNumber, v)
	return u
}

// UpdateIcNumber sets the "ic_number" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIcNumber() *PersonUpsert {
	u.SetExcluded(person.FieldIcNumber)
	return u
}

// SetIcType sets the "ic_type" field.
func (u *PersonUpsert) SetIcType(v uint8) *PersonUpsert {
	u.Set(person.FieldIcType, v)
	return u
}

// UpdateIcType sets the "ic_type" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIcType() *PersonUpsert {
	u.SetExcluded(person.FieldIcType)
	return u
}

// SetIcPortrait sets the "ic_portrait" field.
func (u *PersonUpsert) SetIcPortrait(v string) *PersonUpsert {
	u.Set(person.FieldIcPortrait, v)
	return u
}

// UpdateIcPortrait sets the "ic_portrait" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIcPortrait() *PersonUpsert {
	u.SetExcluded(person.FieldIcPortrait)
	return u
}

// SetIcNational sets the "ic_national" field.
func (u *PersonUpsert) SetIcNational(v string) *PersonUpsert {
	u.Set(person.FieldIcNational, v)
	return u
}

// UpdateIcNational sets the "ic_national" field to the value that was provided on create.
func (u *PersonUpsert) UpdateIcNational() *PersonUpsert {
	u.SetExcluded(person.FieldIcNational)
	return u
}

// SetFaceImg sets the "face_img" field.
func (u *PersonUpsert) SetFaceImg(v string) *PersonUpsert {
	u.Set(person.FieldFaceImg, v)
	return u
}

// UpdateFaceImg sets the "face_img" field to the value that was provided on create.
func (u *PersonUpsert) UpdateFaceImg() *PersonUpsert {
	u.SetExcluded(person.FieldFaceImg)
	return u
}

// SetFaceVerifyResult sets the "face_verify_result" field.
func (u *PersonUpsert) SetFaceVerifyResult(v *model.FaceVerifyResult) *PersonUpsert {
	u.Set(person.FieldFaceVerifyResult, v)
	return u
}

// UpdateFaceVerifyResult sets the "face_verify_result" field to the value that was provided on create.
func (u *PersonUpsert) UpdateFaceVerifyResult() *PersonUpsert {
	u.SetExcluded(person.FieldFaceVerifyResult)
	return u
}

// ClearFaceVerifyResult clears the value of the "face_verify_result" field.
func (u *PersonUpsert) ClearFaceVerifyResult() *PersonUpsert {
	u.SetNull(person.FieldFaceVerifyResult)
	return u
}

// SetResultAt sets the "result_at" field.
func (u *PersonUpsert) SetResultAt(v time.Time) *PersonUpsert {
	u.Set(person.FieldResultAt, v)
	return u
}

// UpdateResultAt sets the "result_at" field to the value that was provided on create.
func (u *PersonUpsert) UpdateResultAt() *PersonUpsert {
	u.SetExcluded(person.FieldResultAt)
	return u
}

// ClearResultAt clears the value of the "result_at" field.
func (u *PersonUpsert) ClearResultAt() *PersonUpsert {
	u.SetNull(person.FieldResultAt)
	return u
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *PersonUpsert) SetEsignAccountID(v string) *PersonUpsert {
	u.Set(person.FieldEsignAccountID, v)
	return u
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *PersonUpsert) UpdateEsignAccountID() *PersonUpsert {
	u.SetExcluded(person.FieldEsignAccountID)
	return u
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *PersonUpsert) ClearEsignAccountID() *PersonUpsert {
	u.SetNull(person.FieldEsignAccountID)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PersonUpsertOne) UpdateNewValues() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Person.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PersonUpsertOne) Ignore() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonUpsertOne) DoNothing() *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonCreate.OnConflict
// documentation for more info.
func (u *PersonUpsertOne) Update(set func(*PersonUpsert)) *PersonUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsertOne) SetCreatedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateCreatedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsertOne) SetUpdatedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateUpdatedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PersonUpsertOne) SetDeletedAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateDeletedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PersonUpsertOne) ClearDeletedAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModify sets the "last_modify" field.
func (u *PersonUpsertOne) SetLastModify(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetLastModify(v)
	})
}

// UpdateLastModify sets the "last_modify" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateLastModify() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateLastModify()
	})
}

// ClearLastModify clears the value of the "last_modify" field.
func (u *PersonUpsertOne) ClearLastModify() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearLastModify()
	})
}

// SetRemark sets the "remark" field.
func (u *PersonUpsertOne) SetRemark(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateRemark() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PersonUpsertOne) ClearRemark() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearRemark()
	})
}

// SetStatus sets the "status" field.
func (u *PersonUpsertOne) SetStatus(v uint8) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateStatus() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateStatus()
	})
}

// SetBlock sets the "block" field.
func (u *PersonUpsertOne) SetBlock(v bool) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetBlock(v)
	})
}

// UpdateBlock sets the "block" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateBlock() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateBlock()
	})
}

// SetName sets the "name" field.
func (u *PersonUpsertOne) SetName(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateName() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateName()
	})
}

// SetIcNumber sets the "ic_number" field.
func (u *PersonUpsertOne) SetIcNumber(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIcNumber(v)
	})
}

// UpdateIcNumber sets the "ic_number" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIcNumber() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIcNumber()
	})
}

// SetIcType sets the "ic_type" field.
func (u *PersonUpsertOne) SetIcType(v uint8) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIcType(v)
	})
}

// UpdateIcType sets the "ic_type" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIcType() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIcType()
	})
}

// SetIcPortrait sets the "ic_portrait" field.
func (u *PersonUpsertOne) SetIcPortrait(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIcPortrait(v)
	})
}

// UpdateIcPortrait sets the "ic_portrait" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIcPortrait() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIcPortrait()
	})
}

// SetIcNational sets the "ic_national" field.
func (u *PersonUpsertOne) SetIcNational(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetIcNational(v)
	})
}

// UpdateIcNational sets the "ic_national" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateIcNational() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIcNational()
	})
}

// SetFaceImg sets the "face_img" field.
func (u *PersonUpsertOne) SetFaceImg(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetFaceImg(v)
	})
}

// UpdateFaceImg sets the "face_img" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateFaceImg() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateFaceImg()
	})
}

// SetFaceVerifyResult sets the "face_verify_result" field.
func (u *PersonUpsertOne) SetFaceVerifyResult(v *model.FaceVerifyResult) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetFaceVerifyResult(v)
	})
}

// UpdateFaceVerifyResult sets the "face_verify_result" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateFaceVerifyResult() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateFaceVerifyResult()
	})
}

// ClearFaceVerifyResult clears the value of the "face_verify_result" field.
func (u *PersonUpsertOne) ClearFaceVerifyResult() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearFaceVerifyResult()
	})
}

// SetResultAt sets the "result_at" field.
func (u *PersonUpsertOne) SetResultAt(v time.Time) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetResultAt(v)
	})
}

// UpdateResultAt sets the "result_at" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateResultAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateResultAt()
	})
}

// ClearResultAt clears the value of the "result_at" field.
func (u *PersonUpsertOne) ClearResultAt() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearResultAt()
	})
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *PersonUpsertOne) SetEsignAccountID(v string) *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.SetEsignAccountID(v)
	})
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *PersonUpsertOne) UpdateEsignAccountID() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateEsignAccountID()
	})
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *PersonUpsertOne) ClearEsignAccountID() *PersonUpsertOne {
	return u.Update(func(s *PersonUpsert) {
		s.ClearEsignAccountID()
	})
}

// Exec executes the query.
func (u *PersonUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PersonCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PersonUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PersonUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	builders []*PersonCreate
	conflict []sql.ConflictOption
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Person.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PersonUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PersonCreateBulk) OnConflict(opts ...sql.ConflictOption) *PersonUpsertBulk {
	pcb.conflict = opts
	return &PersonUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PersonCreateBulk) OnConflictColumns(columns ...string) *PersonUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PersonUpsertBulk{
		create: pcb,
	}
}

// PersonUpsertBulk is the builder for "upsert"-ing
// a bulk of Person nodes.
type PersonUpsertBulk struct {
	create *PersonCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *PersonUpsertBulk) UpdateNewValues() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Person.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PersonUpsertBulk) Ignore() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PersonUpsertBulk) DoNothing() *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PersonCreateBulk.OnConflict
// documentation for more info.
func (u *PersonUpsertBulk) Update(set func(*PersonUpsert)) *PersonUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PersonUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PersonUpsertBulk) SetCreatedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateCreatedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PersonUpsertBulk) SetUpdatedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateUpdatedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PersonUpsertBulk) SetDeletedAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateDeletedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PersonUpsertBulk) ClearDeletedAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModify sets the "last_modify" field.
func (u *PersonUpsertBulk) SetLastModify(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetLastModify(v)
	})
}

// UpdateLastModify sets the "last_modify" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateLastModify() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateLastModify()
	})
}

// ClearLastModify clears the value of the "last_modify" field.
func (u *PersonUpsertBulk) ClearLastModify() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearLastModify()
	})
}

// SetRemark sets the "remark" field.
func (u *PersonUpsertBulk) SetRemark(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateRemark() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PersonUpsertBulk) ClearRemark() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearRemark()
	})
}

// SetStatus sets the "status" field.
func (u *PersonUpsertBulk) SetStatus(v uint8) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateStatus() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateStatus()
	})
}

// SetBlock sets the "block" field.
func (u *PersonUpsertBulk) SetBlock(v bool) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetBlock(v)
	})
}

// UpdateBlock sets the "block" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateBlock() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateBlock()
	})
}

// SetName sets the "name" field.
func (u *PersonUpsertBulk) SetName(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateName() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateName()
	})
}

// SetIcNumber sets the "ic_number" field.
func (u *PersonUpsertBulk) SetIcNumber(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIcNumber(v)
	})
}

// UpdateIcNumber sets the "ic_number" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIcNumber() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIcNumber()
	})
}

// SetIcType sets the "ic_type" field.
func (u *PersonUpsertBulk) SetIcType(v uint8) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIcType(v)
	})
}

// UpdateIcType sets the "ic_type" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIcType() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIcType()
	})
}

// SetIcPortrait sets the "ic_portrait" field.
func (u *PersonUpsertBulk) SetIcPortrait(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIcPortrait(v)
	})
}

// UpdateIcPortrait sets the "ic_portrait" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIcPortrait() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIcPortrait()
	})
}

// SetIcNational sets the "ic_national" field.
func (u *PersonUpsertBulk) SetIcNational(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetIcNational(v)
	})
}

// UpdateIcNational sets the "ic_national" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateIcNational() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateIcNational()
	})
}

// SetFaceImg sets the "face_img" field.
func (u *PersonUpsertBulk) SetFaceImg(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetFaceImg(v)
	})
}

// UpdateFaceImg sets the "face_img" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateFaceImg() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateFaceImg()
	})
}

// SetFaceVerifyResult sets the "face_verify_result" field.
func (u *PersonUpsertBulk) SetFaceVerifyResult(v *model.FaceVerifyResult) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetFaceVerifyResult(v)
	})
}

// UpdateFaceVerifyResult sets the "face_verify_result" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateFaceVerifyResult() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateFaceVerifyResult()
	})
}

// ClearFaceVerifyResult clears the value of the "face_verify_result" field.
func (u *PersonUpsertBulk) ClearFaceVerifyResult() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearFaceVerifyResult()
	})
}

// SetResultAt sets the "result_at" field.
func (u *PersonUpsertBulk) SetResultAt(v time.Time) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetResultAt(v)
	})
}

// UpdateResultAt sets the "result_at" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateResultAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateResultAt()
	})
}

// ClearResultAt clears the value of the "result_at" field.
func (u *PersonUpsertBulk) ClearResultAt() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearResultAt()
	})
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *PersonUpsertBulk) SetEsignAccountID(v string) *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.SetEsignAccountID(v)
	})
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *PersonUpsertBulk) UpdateEsignAccountID() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.UpdateEsignAccountID()
	})
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *PersonUpsertBulk) ClearEsignAccountID() *PersonUpsertBulk {
	return u.Update(func(s *PersonUpsert) {
		s.ClearEsignAccountID()
	})
}

// Exec executes the query.
func (u *PersonUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PersonCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PersonCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PersonUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
