// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PersonCreate) SetCreatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableCreatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PersonCreate) SetUpdatedAt(t time.Time) *PersonCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableUpdatedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PersonCreate) SetDeletedAt(t time.Time) *PersonCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PersonCreate) SetNillableDeletedAt(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetLastModify sets the "last_modify" field.
func (pc *PersonCreate) SetLastModify(t time.Time) *PersonCreate {
	pc.mutation.SetLastModify(t)
	return pc
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (pc *PersonCreate) SetNillableLastModify(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetLastModify(*t)
	}
	return pc
}

// SetRemark sets the "remark" field.
func (pc *PersonCreate) SetRemark(s string) *PersonCreate {
	pc.mutation.SetRemark(s)
	return pc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pc *PersonCreate) SetNillableRemark(s *string) *PersonCreate {
	if s != nil {
		pc.SetRemark(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PersonCreate) SetStatus(u uint8) *PersonCreate {
	pc.mutation.SetStatus(u)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PersonCreate) SetNillableStatus(u *uint8) *PersonCreate {
	if u != nil {
		pc.SetStatus(*u)
	}
	return pc
}

// SetBlock sets the "block" field.
func (pc *PersonCreate) SetBlock(b bool) *PersonCreate {
	pc.mutation.SetBlock(b)
	return pc
}

// SetNillableBlock sets the "block" field if the given value is not nil.
func (pc *PersonCreate) SetNillableBlock(b *bool) *PersonCreate {
	if b != nil {
		pc.SetBlock(*b)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PersonCreate) SetName(s string) *PersonCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetIcNumber sets the "ic_number" field.
func (pc *PersonCreate) SetIcNumber(s string) *PersonCreate {
	pc.mutation.SetIcNumber(s)
	return pc
}

// SetIcType sets the "ic_type" field.
func (pc *PersonCreate) SetIcType(u uint8) *PersonCreate {
	pc.mutation.SetIcType(u)
	return pc
}

// SetNillableIcType sets the "ic_type" field if the given value is not nil.
func (pc *PersonCreate) SetNillableIcType(u *uint8) *PersonCreate {
	if u != nil {
		pc.SetIcType(*u)
	}
	return pc
}

// SetIcPortrait sets the "ic_portrait" field.
func (pc *PersonCreate) SetIcPortrait(s string) *PersonCreate {
	pc.mutation.SetIcPortrait(s)
	return pc
}

// SetIcNational sets the "ic_national" field.
func (pc *PersonCreate) SetIcNational(s string) *PersonCreate {
	pc.mutation.SetIcNational(s)
	return pc
}

// SetIcHandheld sets the "ic_handheld" field.
func (pc *PersonCreate) SetIcHandheld(s string) *PersonCreate {
	pc.mutation.SetIcHandheld(s)
	return pc
}

// AddRiderIDs adds the "rider" edge to the Rider entity by IDs.
func (pc *PersonCreate) AddRiderIDs(ids ...uint64) *PersonCreate {
	pc.mutation.AddRiderIDs(ids...)
	return pc
}

// AddRider adds the "rider" edges to the Rider entity.
func (pc *PersonCreate) AddRider(r ...*Rider) *PersonCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddRiderIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := person.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := person.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := person.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.Block(); !ok {
		v := person.DefaultBlock
		pc.mutation.SetBlock(v)
	}
	if _, ok := pc.mutation.IcType(); !ok {
		v := person.DefaultIcType
		pc.mutation.SetIcType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if _, ok := pc.mutation.Block(); !ok {
		return &ValidationError{Name: "block", err: errors.New(`ent: missing required field "block"`)}
	}
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IcNumber(); !ok {
		return &ValidationError{Name: "ic_number", err: errors.New(`ent: missing required field "ic_number"`)}
	}
	if v, ok := pc.mutation.IcNumber(); ok {
		if err := person.IcNumberValidator(v); err != nil {
			return &ValidationError{Name: "ic_number", err: fmt.Errorf(`ent: validator failed for field "ic_number": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IcType(); !ok {
		return &ValidationError{Name: "ic_type", err: errors.New(`ent: missing required field "ic_type"`)}
	}
	if _, ok := pc.mutation.IcPortrait(); !ok {
		return &ValidationError{Name: "ic_portrait", err: errors.New(`ent: missing required field "ic_portrait"`)}
	}
	if v, ok := pc.mutation.IcPortrait(); ok {
		if err := person.IcPortraitValidator(v); err != nil {
			return &ValidationError{Name: "ic_portrait", err: fmt.Errorf(`ent: validator failed for field "ic_portrait": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IcNational(); !ok {
		return &ValidationError{Name: "ic_national", err: errors.New(`ent: missing required field "ic_national"`)}
	}
	if v, ok := pc.mutation.IcNational(); ok {
		if err := person.IcNationalValidator(v); err != nil {
			return &ValidationError{Name: "ic_national", err: fmt.Errorf(`ent: validator failed for field "ic_national": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IcHandheld(); !ok {
		return &ValidationError{Name: "ic_handheld", err: errors.New(`ent: missing required field "ic_handheld"`)}
	}
	if v, ok := pc.mutation.IcHandheld(); ok {
		if err := person.IcHandheldValidator(v); err != nil {
			return &ValidationError{Name: "ic_handheld", err: fmt.Errorf(`ent: validator failed for field "ic_handheld": %w`, err)}
		}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: person.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.LastModify(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldLastModify,
		})
		_node.LastModify = &value
	}
	if value, ok := pc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldRemark,
		})
		_node.Remark = &value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pc.mutation.Block(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldBlock,
		})
		_node.Block = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.IcNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcNumber,
		})
		_node.IcNumber = value
	}
	if value, ok := pc.mutation.IcType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIcType,
		})
		_node.IcType = value
	}
	if value, ok := pc.mutation.IcPortrait(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcPortrait,
		})
		_node.IcPortrait = value
	}
	if value, ok := pc.mutation.IcNational(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcNational,
		})
		_node.IcNational = value
	}
	if value, ok := pc.mutation.IcHandheld(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcHandheld,
		})
		_node.IcHandheld = value
	}
	if nodes := pc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	builders []*PersonCreate
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
