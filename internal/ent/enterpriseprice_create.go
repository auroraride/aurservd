// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agreement"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
)

// EnterprisePriceCreate is the builder for creating a EnterprisePrice entity.
type EnterprisePriceCreate struct {
	config
	mutation *EnterprisePriceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (epc *EnterprisePriceCreate) SetCreatedAt(t time.Time) *EnterprisePriceCreate {
	epc.mutation.SetCreatedAt(t)
	return epc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (epc *EnterprisePriceCreate) SetNillableCreatedAt(t *time.Time) *EnterprisePriceCreate {
	if t != nil {
		epc.SetCreatedAt(*t)
	}
	return epc
}

// SetUpdatedAt sets the "updated_at" field.
func (epc *EnterprisePriceCreate) SetUpdatedAt(t time.Time) *EnterprisePriceCreate {
	epc.mutation.SetUpdatedAt(t)
	return epc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (epc *EnterprisePriceCreate) SetNillableUpdatedAt(t *time.Time) *EnterprisePriceCreate {
	if t != nil {
		epc.SetUpdatedAt(*t)
	}
	return epc
}

// SetDeletedAt sets the "deleted_at" field.
func (epc *EnterprisePriceCreate) SetDeletedAt(t time.Time) *EnterprisePriceCreate {
	epc.mutation.SetDeletedAt(t)
	return epc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epc *EnterprisePriceCreate) SetNillableDeletedAt(t *time.Time) *EnterprisePriceCreate {
	if t != nil {
		epc.SetDeletedAt(*t)
	}
	return epc
}

// SetCreator sets the "creator" field.
func (epc *EnterprisePriceCreate) SetCreator(m *model.Modifier) *EnterprisePriceCreate {
	epc.mutation.SetCreator(m)
	return epc
}

// SetLastModifier sets the "last_modifier" field.
func (epc *EnterprisePriceCreate) SetLastModifier(m *model.Modifier) *EnterprisePriceCreate {
	epc.mutation.SetLastModifier(m)
	return epc
}

// SetRemark sets the "remark" field.
func (epc *EnterprisePriceCreate) SetRemark(s string) *EnterprisePriceCreate {
	epc.mutation.SetRemark(s)
	return epc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (epc *EnterprisePriceCreate) SetNillableRemark(s *string) *EnterprisePriceCreate {
	if s != nil {
		epc.SetRemark(*s)
	}
	return epc
}

// SetCityID sets the "city_id" field.
func (epc *EnterprisePriceCreate) SetCityID(u uint64) *EnterprisePriceCreate {
	epc.mutation.SetCityID(u)
	return epc
}

// SetBrandID sets the "brand_id" field.
func (epc *EnterprisePriceCreate) SetBrandID(u uint64) *EnterprisePriceCreate {
	epc.mutation.SetBrandID(u)
	return epc
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (epc *EnterprisePriceCreate) SetNillableBrandID(u *uint64) *EnterprisePriceCreate {
	if u != nil {
		epc.SetBrandID(*u)
	}
	return epc
}

// SetAgreementID sets the "agreement_id" field.
func (epc *EnterprisePriceCreate) SetAgreementID(u uint64) *EnterprisePriceCreate {
	epc.mutation.SetAgreementID(u)
	return epc
}

// SetNillableAgreementID sets the "agreement_id" field if the given value is not nil.
func (epc *EnterprisePriceCreate) SetNillableAgreementID(u *uint64) *EnterprisePriceCreate {
	if u != nil {
		epc.SetAgreementID(*u)
	}
	return epc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (epc *EnterprisePriceCreate) SetEnterpriseID(u uint64) *EnterprisePriceCreate {
	epc.mutation.SetEnterpriseID(u)
	return epc
}

// SetPrice sets the "price" field.
func (epc *EnterprisePriceCreate) SetPrice(f float64) *EnterprisePriceCreate {
	epc.mutation.SetPrice(f)
	return epc
}

// SetModel sets the "model" field.
func (epc *EnterprisePriceCreate) SetModel(s string) *EnterprisePriceCreate {
	epc.mutation.SetModel(s)
	return epc
}

// SetIntelligent sets the "intelligent" field.
func (epc *EnterprisePriceCreate) SetIntelligent(b bool) *EnterprisePriceCreate {
	epc.mutation.SetIntelligent(b)
	return epc
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (epc *EnterprisePriceCreate) SetNillableIntelligent(b *bool) *EnterprisePriceCreate {
	if b != nil {
		epc.SetIntelligent(*b)
	}
	return epc
}

// SetCity sets the "city" edge to the City entity.
func (epc *EnterprisePriceCreate) SetCity(c *City) *EnterprisePriceCreate {
	return epc.SetCityID(c.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (epc *EnterprisePriceCreate) SetBrand(e *EbikeBrand) *EnterprisePriceCreate {
	return epc.SetBrandID(e.ID)
}

// SetAgreement sets the "agreement" edge to the Agreement entity.
func (epc *EnterprisePriceCreate) SetAgreement(a *Agreement) *EnterprisePriceCreate {
	return epc.SetAgreementID(a.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (epc *EnterprisePriceCreate) SetEnterprise(e *Enterprise) *EnterprisePriceCreate {
	return epc.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterprisePriceMutation object of the builder.
func (epc *EnterprisePriceCreate) Mutation() *EnterprisePriceMutation {
	return epc.mutation
}

// Save creates the EnterprisePrice in the database.
func (epc *EnterprisePriceCreate) Save(ctx context.Context) (*EnterprisePrice, error) {
	if err := epc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epc.sqlSave, epc.mutation, epc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epc *EnterprisePriceCreate) SaveX(ctx context.Context) *EnterprisePrice {
	v, err := epc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epc *EnterprisePriceCreate) Exec(ctx context.Context) error {
	_, err := epc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epc *EnterprisePriceCreate) ExecX(ctx context.Context) {
	if err := epc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epc *EnterprisePriceCreate) defaults() error {
	if _, ok := epc.mutation.CreatedAt(); !ok {
		if enterpriseprice.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseprice.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseprice.DefaultCreatedAt()
		epc.mutation.SetCreatedAt(v)
	}
	if _, ok := epc.mutation.UpdatedAt(); !ok {
		if enterpriseprice.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseprice.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseprice.DefaultUpdatedAt()
		epc.mutation.SetUpdatedAt(v)
	}
	if _, ok := epc.mutation.Intelligent(); !ok {
		v := enterpriseprice.DefaultIntelligent
		epc.mutation.SetIntelligent(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epc *EnterprisePriceCreate) check() error {
	if _, ok := epc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EnterprisePrice.created_at"`)}
	}
	if _, ok := epc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EnterprisePrice.updated_at"`)}
	}
	if _, ok := epc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "EnterprisePrice.city_id"`)}
	}
	if _, ok := epc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise_id", err: errors.New(`ent: missing required field "EnterprisePrice.enterprise_id"`)}
	}
	if _, ok := epc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "EnterprisePrice.price"`)}
	}
	if _, ok := epc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "EnterprisePrice.model"`)}
	}
	if _, ok := epc.mutation.Intelligent(); !ok {
		return &ValidationError{Name: "intelligent", err: errors.New(`ent: missing required field "EnterprisePrice.intelligent"`)}
	}
	if len(epc.mutation.CityIDs()) == 0 {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "EnterprisePrice.city"`)}
	}
	if len(epc.mutation.EnterpriseIDs()) == 0 {
		return &ValidationError{Name: "enterprise", err: errors.New(`ent: missing required edge "EnterprisePrice.enterprise"`)}
	}
	return nil
}

func (epc *EnterprisePriceCreate) sqlSave(ctx context.Context) (*EnterprisePrice, error) {
	if err := epc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	epc.mutation.id = &_node.ID
	epc.mutation.done = true
	return _node, nil
}

func (epc *EnterprisePriceCreate) createSpec() (*EnterprisePrice, *sqlgraph.CreateSpec) {
	var (
		_node = &EnterprisePrice{config: epc.config}
		_spec = sqlgraph.NewCreateSpec(enterpriseprice.Table, sqlgraph.NewFieldSpec(enterpriseprice.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = epc.conflict
	if value, ok := epc.mutation.CreatedAt(); ok {
		_spec.SetField(enterpriseprice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := epc.mutation.UpdatedAt(); ok {
		_spec.SetField(enterpriseprice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := epc.mutation.DeletedAt(); ok {
		_spec.SetField(enterpriseprice.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := epc.mutation.Creator(); ok {
		_spec.SetField(enterpriseprice.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := epc.mutation.LastModifier(); ok {
		_spec.SetField(enterpriseprice.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := epc.mutation.Remark(); ok {
		_spec.SetField(enterpriseprice.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := epc.mutation.Price(); ok {
		_spec.SetField(enterpriseprice.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := epc.mutation.Model(); ok {
		_spec.SetField(enterpriseprice.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := epc.mutation.Intelligent(); ok {
		_spec.SetField(enterpriseprice.FieldIntelligent, field.TypeBool, value)
		_node.Intelligent = value
	}
	if nodes := epc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.CityTable,
			Columns: []string{enterpriseprice.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.BrandTable,
			Columns: []string{enterpriseprice.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.AgreementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.AgreementTable,
			Columns: []string{enterpriseprice.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AgreementID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseprice.EnterpriseTable,
			Columns: []string{enterpriseprice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterprisePrice.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterprisePriceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (epc *EnterprisePriceCreate) OnConflict(opts ...sql.ConflictOption) *EnterprisePriceUpsertOne {
	epc.conflict = opts
	return &EnterprisePriceUpsertOne{
		create: epc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterprisePrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (epc *EnterprisePriceCreate) OnConflictColumns(columns ...string) *EnterprisePriceUpsertOne {
	epc.conflict = append(epc.conflict, sql.ConflictColumns(columns...))
	return &EnterprisePriceUpsertOne{
		create: epc,
	}
}

type (
	// EnterprisePriceUpsertOne is the builder for "upsert"-ing
	//  one EnterprisePrice node.
	EnterprisePriceUpsertOne struct {
		create *EnterprisePriceCreate
	}

	// EnterprisePriceUpsert is the "OnConflict" setter.
	EnterprisePriceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterprisePriceUpsert) SetUpdatedAt(v time.Time) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateUpdatedAt() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterprisePriceUpsert) SetDeletedAt(v time.Time) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateDeletedAt() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterprisePriceUpsert) ClearDeletedAt() *EnterprisePriceUpsert {
	u.SetNull(enterpriseprice.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterprisePriceUpsert) SetLastModifier(v *model.Modifier) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateLastModifier() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterprisePriceUpsert) ClearLastModifier() *EnterprisePriceUpsert {
	u.SetNull(enterpriseprice.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EnterprisePriceUpsert) SetRemark(v string) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateRemark() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterprisePriceUpsert) ClearRemark() *EnterprisePriceUpsert {
	u.SetNull(enterpriseprice.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *EnterprisePriceUpsert) SetCityID(v uint64) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateCityID() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldCityID)
	return u
}

// SetBrandID sets the "brand_id" field.
func (u *EnterprisePriceUpsert) SetBrandID(v uint64) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldBrandID, v)
	return u
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateBrandID() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldBrandID)
	return u
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *EnterprisePriceUpsert) ClearBrandID() *EnterprisePriceUpsert {
	u.SetNull(enterpriseprice.FieldBrandID)
	return u
}

// SetAgreementID sets the "agreement_id" field.
func (u *EnterprisePriceUpsert) SetAgreementID(v uint64) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldAgreementID, v)
	return u
}

// UpdateAgreementID sets the "agreement_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateAgreementID() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldAgreementID)
	return u
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (u *EnterprisePriceUpsert) ClearAgreementID() *EnterprisePriceUpsert {
	u.SetNull(enterpriseprice.FieldAgreementID)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterprisePriceUpsert) SetEnterpriseID(v uint64) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateEnterpriseID() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldEnterpriseID)
	return u
}

// SetPrice sets the "price" field.
func (u *EnterprisePriceUpsert) SetPrice(v float64) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdatePrice() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *EnterprisePriceUpsert) AddPrice(v float64) *EnterprisePriceUpsert {
	u.Add(enterpriseprice.FieldPrice, v)
	return u
}

// SetModel sets the "model" field.
func (u *EnterprisePriceUpsert) SetModel(v string) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateModel() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldModel)
	return u
}

// SetIntelligent sets the "intelligent" field.
func (u *EnterprisePriceUpsert) SetIntelligent(v bool) *EnterprisePriceUpsert {
	u.Set(enterpriseprice.FieldIntelligent, v)
	return u
}

// UpdateIntelligent sets the "intelligent" field to the value that was provided on create.
func (u *EnterprisePriceUpsert) UpdateIntelligent() *EnterprisePriceUpsert {
	u.SetExcluded(enterpriseprice.FieldIntelligent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EnterprisePrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EnterprisePriceUpsertOne) UpdateNewValues() *EnterprisePriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(enterpriseprice.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(enterpriseprice.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterprisePrice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EnterprisePriceUpsertOne) Ignore() *EnterprisePriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterprisePriceUpsertOne) DoNothing() *EnterprisePriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterprisePriceCreate.OnConflict
// documentation for more info.
func (u *EnterprisePriceUpsertOne) Update(set func(*EnterprisePriceUpsert)) *EnterprisePriceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterprisePriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterprisePriceUpsertOne) SetUpdatedAt(v time.Time) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateUpdatedAt() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterprisePriceUpsertOne) SetDeletedAt(v time.Time) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateDeletedAt() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterprisePriceUpsertOne) ClearDeletedAt() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterprisePriceUpsertOne) SetLastModifier(v *model.Modifier) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateLastModifier() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterprisePriceUpsertOne) ClearLastModifier() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterprisePriceUpsertOne) SetRemark(v string) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateRemark() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterprisePriceUpsertOne) ClearRemark() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *EnterprisePriceUpsertOne) SetCityID(v uint64) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateCityID() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateCityID()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *EnterprisePriceUpsertOne) SetBrandID(v uint64) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateBrandID() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *EnterprisePriceUpsertOne) ClearBrandID() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearBrandID()
	})
}

// SetAgreementID sets the "agreement_id" field.
func (u *EnterprisePriceUpsertOne) SetAgreementID(v uint64) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetAgreementID(v)
	})
}

// UpdateAgreementID sets the "agreement_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateAgreementID() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateAgreementID()
	})
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (u *EnterprisePriceUpsertOne) ClearAgreementID() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearAgreementID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterprisePriceUpsertOne) SetEnterpriseID(v uint64) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateEnterpriseID() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetPrice sets the "price" field.
func (u *EnterprisePriceUpsertOne) SetPrice(v float64) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *EnterprisePriceUpsertOne) AddPrice(v float64) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdatePrice() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdatePrice()
	})
}

// SetModel sets the "model" field.
func (u *EnterprisePriceUpsertOne) SetModel(v string) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateModel() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateModel()
	})
}

// SetIntelligent sets the "intelligent" field.
func (u *EnterprisePriceUpsertOne) SetIntelligent(v bool) *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetIntelligent(v)
	})
}

// UpdateIntelligent sets the "intelligent" field to the value that was provided on create.
func (u *EnterprisePriceUpsertOne) UpdateIntelligent() *EnterprisePriceUpsertOne {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateIntelligent()
	})
}

// Exec executes the query.
func (u *EnterprisePriceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterprisePriceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterprisePriceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnterprisePriceUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnterprisePriceUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnterprisePriceCreateBulk is the builder for creating many EnterprisePrice entities in bulk.
type EnterprisePriceCreateBulk struct {
	config
	err      error
	builders []*EnterprisePriceCreate
	conflict []sql.ConflictOption
}

// Save creates the EnterprisePrice entities in the database.
func (epcb *EnterprisePriceCreateBulk) Save(ctx context.Context) ([]*EnterprisePrice, error) {
	if epcb.err != nil {
		return nil, epcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(epcb.builders))
	nodes := make([]*EnterprisePrice, len(epcb.builders))
	mutators := make([]Mutator, len(epcb.builders))
	for i := range epcb.builders {
		func(i int, root context.Context) {
			builder := epcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnterprisePriceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = epcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epcb *EnterprisePriceCreateBulk) SaveX(ctx context.Context) []*EnterprisePrice {
	v, err := epcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epcb *EnterprisePriceCreateBulk) Exec(ctx context.Context) error {
	_, err := epcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epcb *EnterprisePriceCreateBulk) ExecX(ctx context.Context) {
	if err := epcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterprisePrice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterprisePriceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (epcb *EnterprisePriceCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnterprisePriceUpsertBulk {
	epcb.conflict = opts
	return &EnterprisePriceUpsertBulk{
		create: epcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterprisePrice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (epcb *EnterprisePriceCreateBulk) OnConflictColumns(columns ...string) *EnterprisePriceUpsertBulk {
	epcb.conflict = append(epcb.conflict, sql.ConflictColumns(columns...))
	return &EnterprisePriceUpsertBulk{
		create: epcb,
	}
}

// EnterprisePriceUpsertBulk is the builder for "upsert"-ing
// a bulk of EnterprisePrice nodes.
type EnterprisePriceUpsertBulk struct {
	create *EnterprisePriceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnterprisePrice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EnterprisePriceUpsertBulk) UpdateNewValues() *EnterprisePriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(enterpriseprice.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(enterpriseprice.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterprisePrice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EnterprisePriceUpsertBulk) Ignore() *EnterprisePriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterprisePriceUpsertBulk) DoNothing() *EnterprisePriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterprisePriceCreateBulk.OnConflict
// documentation for more info.
func (u *EnterprisePriceUpsertBulk) Update(set func(*EnterprisePriceUpsert)) *EnterprisePriceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterprisePriceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterprisePriceUpsertBulk) SetUpdatedAt(v time.Time) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateUpdatedAt() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterprisePriceUpsertBulk) SetDeletedAt(v time.Time) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateDeletedAt() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterprisePriceUpsertBulk) ClearDeletedAt() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterprisePriceUpsertBulk) SetLastModifier(v *model.Modifier) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateLastModifier() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterprisePriceUpsertBulk) ClearLastModifier() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterprisePriceUpsertBulk) SetRemark(v string) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateRemark() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterprisePriceUpsertBulk) ClearRemark() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *EnterprisePriceUpsertBulk) SetCityID(v uint64) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateCityID() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateCityID()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *EnterprisePriceUpsertBulk) SetBrandID(v uint64) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateBrandID() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *EnterprisePriceUpsertBulk) ClearBrandID() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearBrandID()
	})
}

// SetAgreementID sets the "agreement_id" field.
func (u *EnterprisePriceUpsertBulk) SetAgreementID(v uint64) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetAgreementID(v)
	})
}

// UpdateAgreementID sets the "agreement_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateAgreementID() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateAgreementID()
	})
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (u *EnterprisePriceUpsertBulk) ClearAgreementID() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.ClearAgreementID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterprisePriceUpsertBulk) SetEnterpriseID(v uint64) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateEnterpriseID() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetPrice sets the "price" field.
func (u *EnterprisePriceUpsertBulk) SetPrice(v float64) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *EnterprisePriceUpsertBulk) AddPrice(v float64) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdatePrice() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdatePrice()
	})
}

// SetModel sets the "model" field.
func (u *EnterprisePriceUpsertBulk) SetModel(v string) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateModel() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateModel()
	})
}

// SetIntelligent sets the "intelligent" field.
func (u *EnterprisePriceUpsertBulk) SetIntelligent(v bool) *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.SetIntelligent(v)
	})
}

// UpdateIntelligent sets the "intelligent" field to the value that was provided on create.
func (u *EnterprisePriceUpsertBulk) UpdateIntelligent() *EnterprisePriceUpsertBulk {
	return u.Update(func(s *EnterprisePriceUpsert) {
		s.UpdateIntelligent()
	})
}

// Exec executes the query.
func (u *EnterprisePriceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EnterprisePriceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterprisePriceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterprisePriceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
