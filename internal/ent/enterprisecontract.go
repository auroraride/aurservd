// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
)

// EnterpriseContract is the model entity for the EnterpriseContract schema.
type EnterpriseContract struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// EnterpriseID holds the value of the "enterprise_id" field.
	EnterpriseID uint64 `json:"enterprise_id,omitempty"`
	// Start holds the value of the "start" field.
	// 合同开始时间
	Start time.Time `json:"start,omitempty"`
	// End holds the value of the "end" field.
	// 合同结束时间
	End time.Time `json:"end,omitempty"`
	// File holds the value of the "file" field.
	// 合同文件
	File string `json:"file,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterpriseContractQuery when eager-loading is set.
	Edges EnterpriseContractEdges `json:"edges"`
}

// EnterpriseContractEdges holds the relations/edges for other nodes in the graph.
type EnterpriseContractEdges struct {
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseContractEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[0] {
		if e.Enterprise == nil {
			// The edge enterprise was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnterpriseContract) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterprisecontract.FieldCreator, enterprisecontract.FieldLastModifier:
			values[i] = new([]byte)
		case enterprisecontract.FieldID, enterprisecontract.FieldEnterpriseID:
			values[i] = new(sql.NullInt64)
		case enterprisecontract.FieldRemark, enterprisecontract.FieldFile:
			values[i] = new(sql.NullString)
		case enterprisecontract.FieldCreatedAt, enterprisecontract.FieldUpdatedAt, enterprisecontract.FieldDeletedAt, enterprisecontract.FieldStart, enterprisecontract.FieldEnd:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EnterpriseContract", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnterpriseContract fields.
func (ec *EnterpriseContract) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterprisecontract.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ec.ID = uint64(value.Int64)
		case enterprisecontract.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ec.CreatedAt = value.Time
			}
		case enterprisecontract.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ec.UpdatedAt = value.Time
			}
		case enterprisecontract.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ec.DeletedAt = new(time.Time)
				*ec.DeletedAt = value.Time
			}
		case enterprisecontract.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ec.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterprisecontract.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ec.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterprisecontract.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ec.Remark = value.String
			}
		case enterprisecontract.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				ec.EnterpriseID = uint64(value.Int64)
			}
		case enterprisecontract.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				ec.Start = value.Time
			}
		case enterprisecontract.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				ec.End = value.Time
			}
		case enterprisecontract.FieldFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file", values[i])
			} else if value.Valid {
				ec.File = value.String
			}
		}
	}
	return nil
}

// QueryEnterprise queries the "enterprise" edge of the EnterpriseContract entity.
func (ec *EnterpriseContract) QueryEnterprise() *EnterpriseQuery {
	return (&EnterpriseContractClient{config: ec.config}).QueryEnterprise(ec)
}

// Update returns a builder for updating this EnterpriseContract.
// Note that you need to call EnterpriseContract.Unwrap() before calling this method if this EnterpriseContract
// was returned from a transaction, and the transaction was committed or rolled back.
func (ec *EnterpriseContract) Update() *EnterpriseContractUpdateOne {
	return (&EnterpriseContractClient{config: ec.config}).UpdateOne(ec)
}

// Unwrap unwraps the EnterpriseContract entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ec *EnterpriseContract) Unwrap() *EnterpriseContract {
	tx, ok := ec.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnterpriseContract is not a transactional entity")
	}
	ec.config.driver = tx.drv
	return ec
}

// String implements the fmt.Stringer.
func (ec *EnterpriseContract) String() string {
	var builder strings.Builder
	builder.WriteString("EnterpriseContract(")
	builder.WriteString(fmt.Sprintf("id=%v", ec.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ec.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ec.UpdatedAt.Format(time.ANSIC))
	if v := ec.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", ec.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ec.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(ec.Remark)
	builder.WriteString(", enterprise_id=")
	builder.WriteString(fmt.Sprintf("%v", ec.EnterpriseID))
	builder.WriteString(", start=")
	builder.WriteString(ec.Start.Format(time.ANSIC))
	builder.WriteString(", end=")
	builder.WriteString(ec.End.Format(time.ANSIC))
	builder.WriteString(", file=")
	builder.WriteString(ec.File)
	builder.WriteByte(')')
	return builder.String()
}

// EnterpriseContracts is a parsable slice of EnterpriseContract.
type EnterpriseContracts []*EnterpriseContract

func (ec EnterpriseContracts) config(cfg config) {
	for _i := range ec {
		ec[_i].config = cfg
	}
}
