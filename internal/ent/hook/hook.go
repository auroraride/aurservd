// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/auroraride/aurservd/internal/ent"
)

// The AgentFunc type is an adapter to allow the use of ordinary
// function as Agent mutator.
type AgentFunc func(context.Context, *ent.AgentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AgentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgentMutation", m)
	}
	return f(ctx, mv)
}

// The AssistanceFunc type is an adapter to allow the use of ordinary
// function as Assistance mutator.
type AssistanceFunc func(context.Context, *ent.AssistanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssistanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AssistanceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssistanceMutation", m)
	}
	return f(ctx, mv)
}

// The AttendanceFunc type is an adapter to allow the use of ordinary
// function as Attendance mutator.
type AttendanceFunc func(context.Context, *ent.AttendanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AttendanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AttendanceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AttendanceMutation", m)
	}
	return f(ctx, mv)
}

// The BatteryModelFunc type is an adapter to allow the use of ordinary
// function as BatteryModel mutator.
type BatteryModelFunc func(context.Context, *ent.BatteryModelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BatteryModelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BatteryModelMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BatteryModelMutation", m)
	}
	return f(ctx, mv)
}

// The BranchFunc type is an adapter to allow the use of ordinary
// function as Branch mutator.
type BranchFunc func(context.Context, *ent.BranchMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BranchFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BranchMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BranchMutation", m)
	}
	return f(ctx, mv)
}

// The BranchContractFunc type is an adapter to allow the use of ordinary
// function as BranchContract mutator.
type BranchContractFunc func(context.Context, *ent.BranchContractMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BranchContractFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BranchContractMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BranchContractMutation", m)
	}
	return f(ctx, mv)
}

// The BusinessFunc type is an adapter to allow the use of ordinary
// function as Business mutator.
type BusinessFunc func(context.Context, *ent.BusinessMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BusinessFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.BusinessMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BusinessMutation", m)
	}
	return f(ctx, mv)
}

// The CabinetFunc type is an adapter to allow the use of ordinary
// function as Cabinet mutator.
type CabinetFunc func(context.Context, *ent.CabinetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CabinetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CabinetMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CabinetMutation", m)
	}
	return f(ctx, mv)
}

// The CabinetFaultFunc type is an adapter to allow the use of ordinary
// function as CabinetFault mutator.
type CabinetFaultFunc func(context.Context, *ent.CabinetFaultMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CabinetFaultFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CabinetFaultMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CabinetFaultMutation", m)
	}
	return f(ctx, mv)
}

// The CityFunc type is an adapter to allow the use of ordinary
// function as City mutator.
type CityFunc func(context.Context, *ent.CityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CityMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CityMutation", m)
	}
	return f(ctx, mv)
}

// The CommissionFunc type is an adapter to allow the use of ordinary
// function as Commission mutator.
type CommissionFunc func(context.Context, *ent.CommissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CommissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CommissionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CommissionMutation", m)
	}
	return f(ctx, mv)
}

// The ContractFunc type is an adapter to allow the use of ordinary
// function as Contract mutator.
type ContractFunc func(context.Context, *ent.ContractMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContractFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ContractMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContractMutation", m)
	}
	return f(ctx, mv)
}

// The EmployeeFunc type is an adapter to allow the use of ordinary
// function as Employee mutator.
type EmployeeFunc func(context.Context, *ent.EmployeeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EmployeeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EmployeeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EmployeeMutation", m)
	}
	return f(ctx, mv)
}

// The EnterpriseFunc type is an adapter to allow the use of ordinary
// function as Enterprise mutator.
type EnterpriseFunc func(context.Context, *ent.EnterpriseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnterpriseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseMutation", m)
	}
	return f(ctx, mv)
}

// The EnterpriseBillFunc type is an adapter to allow the use of ordinary
// function as EnterpriseBill mutator.
type EnterpriseBillFunc func(context.Context, *ent.EnterpriseBillMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseBillFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnterpriseBillMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseBillMutation", m)
	}
	return f(ctx, mv)
}

// The EnterpriseContractFunc type is an adapter to allow the use of ordinary
// function as EnterpriseContract mutator.
type EnterpriseContractFunc func(context.Context, *ent.EnterpriseContractMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseContractFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnterpriseContractMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseContractMutation", m)
	}
	return f(ctx, mv)
}

// The EnterprisePrepaymentFunc type is an adapter to allow the use of ordinary
// function as EnterprisePrepayment mutator.
type EnterprisePrepaymentFunc func(context.Context, *ent.EnterprisePrepaymentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterprisePrepaymentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnterprisePrepaymentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterprisePrepaymentMutation", m)
	}
	return f(ctx, mv)
}

// The EnterprisePriceFunc type is an adapter to allow the use of ordinary
// function as EnterprisePrice mutator.
type EnterprisePriceFunc func(context.Context, *ent.EnterprisePriceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterprisePriceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnterprisePriceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterprisePriceMutation", m)
	}
	return f(ctx, mv)
}

// The EnterpriseStatementFunc type is an adapter to allow the use of ordinary
// function as EnterpriseStatement mutator.
type EnterpriseStatementFunc func(context.Context, *ent.EnterpriseStatementMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseStatementFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnterpriseStatementMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseStatementMutation", m)
	}
	return f(ctx, mv)
}

// The EnterpriseStationFunc type is an adapter to allow the use of ordinary
// function as EnterpriseStation mutator.
type EnterpriseStationFunc func(context.Context, *ent.EnterpriseStationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseStationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.EnterpriseStationMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseStationMutation", m)
	}
	return f(ctx, mv)
}

// The ExceptionFunc type is an adapter to allow the use of ordinary
// function as Exception mutator.
type ExceptionFunc func(context.Context, *ent.ExceptionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExceptionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ExceptionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExceptionMutation", m)
	}
	return f(ctx, mv)
}

// The ExchangeFunc type is an adapter to allow the use of ordinary
// function as Exchange mutator.
type ExchangeFunc func(context.Context, *ent.ExchangeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExchangeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ExchangeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExchangeMutation", m)
	}
	return f(ctx, mv)
}

// The ExportFunc type is an adapter to allow the use of ordinary
// function as Export mutator.
type ExportFunc func(context.Context, *ent.ExportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ExportMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExportMutation", m)
	}
	return f(ctx, mv)
}

// The InventoryFunc type is an adapter to allow the use of ordinary
// function as Inventory mutator.
type InventoryFunc func(context.Context, *ent.InventoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InventoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InventoryMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InventoryMutation", m)
	}
	return f(ctx, mv)
}

// The ManagerFunc type is an adapter to allow the use of ordinary
// function as Manager mutator.
type ManagerFunc func(context.Context, *ent.ManagerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ManagerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ManagerMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ManagerMutation", m)
	}
	return f(ctx, mv)
}

// The OrderFunc type is an adapter to allow the use of ordinary
// function as Order mutator.
type OrderFunc func(context.Context, *ent.OrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderMutation", m)
	}
	return f(ctx, mv)
}

// The OrderRefundFunc type is an adapter to allow the use of ordinary
// function as OrderRefund mutator.
type OrderRefundFunc func(context.Context, *ent.OrderRefundMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderRefundFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.OrderRefundMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderRefundMutation", m)
	}
	return f(ctx, mv)
}

// The PersonFunc type is an adapter to allow the use of ordinary
// function as Person mutator.
type PersonFunc func(context.Context, *ent.PersonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PersonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PersonMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PersonMutation", m)
	}
	return f(ctx, mv)
}

// The PlanFunc type is an adapter to allow the use of ordinary
// function as Plan mutator.
type PlanFunc func(context.Context, *ent.PlanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PlanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PlanMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PlanMutation", m)
	}
	return f(ctx, mv)
}

// The ReserveFunc type is an adapter to allow the use of ordinary
// function as Reserve mutator.
type ReserveFunc func(context.Context, *ent.ReserveMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReserveFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReserveMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReserveMutation", m)
	}
	return f(ctx, mv)
}

// The RiderFunc type is an adapter to allow the use of ordinary
// function as Rider mutator.
type RiderFunc func(context.Context, *ent.RiderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RiderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RiderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RiderMutation", m)
	}
	return f(ctx, mv)
}

// The RiderFollowUpFunc type is an adapter to allow the use of ordinary
// function as RiderFollowUp mutator.
type RiderFollowUpFunc func(context.Context, *ent.RiderFollowUpMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RiderFollowUpFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RiderFollowUpMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RiderFollowUpMutation", m)
	}
	return f(ctx, mv)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *ent.RoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RoleMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoleMutation", m)
	}
	return f(ctx, mv)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *ent.SettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SettingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SettingMutation", m)
	}
	return f(ctx, mv)
}

// The StockFunc type is an adapter to allow the use of ordinary
// function as Stock mutator.
type StockFunc func(context.Context, *ent.StockMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StockFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StockMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StockMutation", m)
	}
	return f(ctx, mv)
}

// The StoreFunc type is an adapter to allow the use of ordinary
// function as Store mutator.
type StoreFunc func(context.Context, *ent.StoreMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StoreFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.StoreMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StoreMutation", m)
	}
	return f(ctx, mv)
}

// The SubscribeFunc type is an adapter to allow the use of ordinary
// function as Subscribe mutator.
type SubscribeFunc func(context.Context, *ent.SubscribeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SubscribeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribeMutation", m)
	}
	return f(ctx, mv)
}

// The SubscribeAlterFunc type is an adapter to allow the use of ordinary
// function as SubscribeAlter mutator.
type SubscribeAlterFunc func(context.Context, *ent.SubscribeAlterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribeAlterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SubscribeAlterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribeAlterMutation", m)
	}
	return f(ctx, mv)
}

// The SubscribePauseFunc type is an adapter to allow the use of ordinary
// function as SubscribePause mutator.
type SubscribePauseFunc func(context.Context, *ent.SubscribePauseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribePauseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SubscribePauseMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribePauseMutation", m)
	}
	return f(ctx, mv)
}

// The SubscribeReminderFunc type is an adapter to allow the use of ordinary
// function as SubscribeReminder mutator.
type SubscribeReminderFunc func(context.Context, *ent.SubscribeReminderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribeReminderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SubscribeReminderMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribeReminderMutation", m)
	}
	return f(ctx, mv)
}

// The SubscribeSuspendFunc type is an adapter to allow the use of ordinary
// function as SubscribeSuspend mutator.
type SubscribeSuspendFunc func(context.Context, *ent.SubscribeSuspendMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribeSuspendFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SubscribeSuspendMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribeSuspendMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
