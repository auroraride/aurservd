// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/auroraride/aurservd/internal/ent"
)

// The ActivityFunc type is an adapter to allow the use of ordinary
// function as Activity mutator.
type ActivityFunc func(context.Context, *ent.ActivityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ActivityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ActivityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ActivityMutation", m)
}

// The AgentFunc type is an adapter to allow the use of ordinary
// function as Agent mutator.
type AgentFunc func(context.Context, *ent.AgentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AgentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgentMutation", m)
}

// The AgreementFunc type is an adapter to allow the use of ordinary
// function as Agreement mutator.
type AgreementFunc func(context.Context, *ent.AgreementMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AgreementFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AgreementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AgreementMutation", m)
}

// The AllocateFunc type is an adapter to allow the use of ordinary
// function as Allocate mutator.
type AllocateFunc func(context.Context, *ent.AllocateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AllocateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AllocateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AllocateMutation", m)
}

// The AssetFunc type is an adapter to allow the use of ordinary
// function as Asset mutator.
type AssetFunc func(context.Context, *ent.AssetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetMutation", m)
}

// The AssetAttributeValuesFunc type is an adapter to allow the use of ordinary
// function as AssetAttributeValues mutator.
type AssetAttributeValuesFunc func(context.Context, *ent.AssetAttributeValuesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetAttributeValuesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetAttributeValuesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetAttributeValuesMutation", m)
}

// The AssetAttributesFunc type is an adapter to allow the use of ordinary
// function as AssetAttributes mutator.
type AssetAttributesFunc func(context.Context, *ent.AssetAttributesMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetAttributesFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetAttributesMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetAttributesMutation", m)
}

// The AssetCheckFunc type is an adapter to allow the use of ordinary
// function as AssetCheck mutator.
type AssetCheckFunc func(context.Context, *ent.AssetCheckMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetCheckFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetCheckMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetCheckMutation", m)
}

// The AssetCheckDetailsFunc type is an adapter to allow the use of ordinary
// function as AssetCheckDetails mutator.
type AssetCheckDetailsFunc func(context.Context, *ent.AssetCheckDetailsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetCheckDetailsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetCheckDetailsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetCheckDetailsMutation", m)
}

// The AssetExportFunc type is an adapter to allow the use of ordinary
// function as AssetExport mutator.
type AssetExportFunc func(context.Context, *ent.AssetExportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetExportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetExportMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetExportMutation", m)
}

// The AssetMaintenanceFunc type is an adapter to allow the use of ordinary
// function as AssetMaintenance mutator.
type AssetMaintenanceFunc func(context.Context, *ent.AssetMaintenanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetMaintenanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetMaintenanceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetMaintenanceMutation", m)
}

// The AssetMaintenanceDetailsFunc type is an adapter to allow the use of ordinary
// function as AssetMaintenanceDetails mutator.
type AssetMaintenanceDetailsFunc func(context.Context, *ent.AssetMaintenanceDetailsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetMaintenanceDetailsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetMaintenanceDetailsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetMaintenanceDetailsMutation", m)
}

// The AssetManagerFunc type is an adapter to allow the use of ordinary
// function as AssetManager mutator.
type AssetManagerFunc func(context.Context, *ent.AssetManagerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetManagerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetManagerMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetManagerMutation", m)
}

// The AssetRoleFunc type is an adapter to allow the use of ordinary
// function as AssetRole mutator.
type AssetRoleFunc func(context.Context, *ent.AssetRoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetRoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetRoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetRoleMutation", m)
}

// The AssetScrapFunc type is an adapter to allow the use of ordinary
// function as AssetScrap mutator.
type AssetScrapFunc func(context.Context, *ent.AssetScrapMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetScrapFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetScrapMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetScrapMutation", m)
}

// The AssetScrapDetailsFunc type is an adapter to allow the use of ordinary
// function as AssetScrapDetails mutator.
type AssetScrapDetailsFunc func(context.Context, *ent.AssetScrapDetailsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetScrapDetailsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetScrapDetailsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetScrapDetailsMutation", m)
}

// The AssetTransferFunc type is an adapter to allow the use of ordinary
// function as AssetTransfer mutator.
type AssetTransferFunc func(context.Context, *ent.AssetTransferMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetTransferFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetTransferMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetTransferMutation", m)
}

// The AssetTransferDetailsFunc type is an adapter to allow the use of ordinary
// function as AssetTransferDetails mutator.
type AssetTransferDetailsFunc func(context.Context, *ent.AssetTransferDetailsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssetTransferDetailsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssetTransferDetailsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssetTransferDetailsMutation", m)
}

// The AssistanceFunc type is an adapter to allow the use of ordinary
// function as Assistance mutator.
type AssistanceFunc func(context.Context, *ent.AssistanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AssistanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AssistanceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AssistanceMutation", m)
}

// The AttendanceFunc type is an adapter to allow the use of ordinary
// function as Attendance mutator.
type AttendanceFunc func(context.Context, *ent.AttendanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AttendanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.AttendanceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AttendanceMutation", m)
}

// The BatteryFunc type is an adapter to allow the use of ordinary
// function as Battery mutator.
type BatteryFunc func(context.Context, *ent.BatteryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BatteryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BatteryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BatteryMutation", m)
}

// The BatteryFlowFunc type is an adapter to allow the use of ordinary
// function as BatteryFlow mutator.
type BatteryFlowFunc func(context.Context, *ent.BatteryFlowMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BatteryFlowFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BatteryFlowMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BatteryFlowMutation", m)
}

// The BatteryModelFunc type is an adapter to allow the use of ordinary
// function as BatteryModel mutator.
type BatteryModelFunc func(context.Context, *ent.BatteryModelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BatteryModelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BatteryModelMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BatteryModelMutation", m)
}

// The BranchFunc type is an adapter to allow the use of ordinary
// function as Branch mutator.
type BranchFunc func(context.Context, *ent.BranchMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BranchFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BranchMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BranchMutation", m)
}

// The BranchContractFunc type is an adapter to allow the use of ordinary
// function as BranchContract mutator.
type BranchContractFunc func(context.Context, *ent.BranchContractMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BranchContractFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BranchContractMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BranchContractMutation", m)
}

// The BusinessFunc type is an adapter to allow the use of ordinary
// function as Business mutator.
type BusinessFunc func(context.Context, *ent.BusinessMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f BusinessFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.BusinessMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.BusinessMutation", m)
}

// The CabinetFunc type is an adapter to allow the use of ordinary
// function as Cabinet mutator.
type CabinetFunc func(context.Context, *ent.CabinetMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CabinetFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CabinetMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CabinetMutation", m)
}

// The CabinetEcFunc type is an adapter to allow the use of ordinary
// function as CabinetEc mutator.
type CabinetEcFunc func(context.Context, *ent.CabinetEcMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CabinetEcFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CabinetEcMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CabinetEcMutation", m)
}

// The CabinetFaultFunc type is an adapter to allow the use of ordinary
// function as CabinetFault mutator.
type CabinetFaultFunc func(context.Context, *ent.CabinetFaultMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CabinetFaultFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CabinetFaultMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CabinetFaultMutation", m)
}

// The CityFunc type is an adapter to allow the use of ordinary
// function as City mutator.
type CityFunc func(context.Context, *ent.CityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CityMutation", m)
}

// The CommissionFunc type is an adapter to allow the use of ordinary
// function as Commission mutator.
type CommissionFunc func(context.Context, *ent.CommissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CommissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CommissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CommissionMutation", m)
}

// The ContractFunc type is an adapter to allow the use of ordinary
// function as Contract mutator.
type ContractFunc func(context.Context, *ent.ContractMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContractFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ContractMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContractMutation", m)
}

// The ContractTemplateFunc type is an adapter to allow the use of ordinary
// function as ContractTemplate mutator.
type ContractTemplateFunc func(context.Context, *ent.ContractTemplateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ContractTemplateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ContractTemplateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ContractTemplateMutation", m)
}

// The CouponFunc type is an adapter to allow the use of ordinary
// function as Coupon mutator.
type CouponFunc func(context.Context, *ent.CouponMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CouponFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CouponMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CouponMutation", m)
}

// The CouponAssemblyFunc type is an adapter to allow the use of ordinary
// function as CouponAssembly mutator.
type CouponAssemblyFunc func(context.Context, *ent.CouponAssemblyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CouponAssemblyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CouponAssemblyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CouponAssemblyMutation", m)
}

// The CouponTemplateFunc type is an adapter to allow the use of ordinary
// function as CouponTemplate mutator.
type CouponTemplateFunc func(context.Context, *ent.CouponTemplateMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CouponTemplateFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.CouponTemplateMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CouponTemplateMutation", m)
}

// The EbikeFunc type is an adapter to allow the use of ordinary
// function as Ebike mutator.
type EbikeFunc func(context.Context, *ent.EbikeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EbikeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EbikeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EbikeMutation", m)
}

// The EbikeBrandFunc type is an adapter to allow the use of ordinary
// function as EbikeBrand mutator.
type EbikeBrandFunc func(context.Context, *ent.EbikeBrandMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EbikeBrandFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EbikeBrandMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EbikeBrandMutation", m)
}

// The EbikeBrandAttributeFunc type is an adapter to allow the use of ordinary
// function as EbikeBrandAttribute mutator.
type EbikeBrandAttributeFunc func(context.Context, *ent.EbikeBrandAttributeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EbikeBrandAttributeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EbikeBrandAttributeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EbikeBrandAttributeMutation", m)
}

// The EmployeeFunc type is an adapter to allow the use of ordinary
// function as Employee mutator.
type EmployeeFunc func(context.Context, *ent.EmployeeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EmployeeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EmployeeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EmployeeMutation", m)
}

// The EnterpriseFunc type is an adapter to allow the use of ordinary
// function as Enterprise mutator.
type EnterpriseFunc func(context.Context, *ent.EnterpriseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnterpriseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseMutation", m)
}

// The EnterpriseBatterySwapFunc type is an adapter to allow the use of ordinary
// function as EnterpriseBatterySwap mutator.
type EnterpriseBatterySwapFunc func(context.Context, *ent.EnterpriseBatterySwapMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseBatterySwapFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnterpriseBatterySwapMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseBatterySwapMutation", m)
}

// The EnterpriseBillFunc type is an adapter to allow the use of ordinary
// function as EnterpriseBill mutator.
type EnterpriseBillFunc func(context.Context, *ent.EnterpriseBillMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseBillFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnterpriseBillMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseBillMutation", m)
}

// The EnterpriseContractFunc type is an adapter to allow the use of ordinary
// function as EnterpriseContract mutator.
type EnterpriseContractFunc func(context.Context, *ent.EnterpriseContractMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseContractFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnterpriseContractMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseContractMutation", m)
}

// The EnterprisePrepaymentFunc type is an adapter to allow the use of ordinary
// function as EnterprisePrepayment mutator.
type EnterprisePrepaymentFunc func(context.Context, *ent.EnterprisePrepaymentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterprisePrepaymentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnterprisePrepaymentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterprisePrepaymentMutation", m)
}

// The EnterprisePriceFunc type is an adapter to allow the use of ordinary
// function as EnterprisePrice mutator.
type EnterprisePriceFunc func(context.Context, *ent.EnterprisePriceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterprisePriceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnterprisePriceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterprisePriceMutation", m)
}

// The EnterpriseStatementFunc type is an adapter to allow the use of ordinary
// function as EnterpriseStatement mutator.
type EnterpriseStatementFunc func(context.Context, *ent.EnterpriseStatementMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseStatementFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnterpriseStatementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseStatementMutation", m)
}

// The EnterpriseStationFunc type is an adapter to allow the use of ordinary
// function as EnterpriseStation mutator.
type EnterpriseStationFunc func(context.Context, *ent.EnterpriseStationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EnterpriseStationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EnterpriseStationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EnterpriseStationMutation", m)
}

// The ExceptionFunc type is an adapter to allow the use of ordinary
// function as Exception mutator.
type ExceptionFunc func(context.Context, *ent.ExceptionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExceptionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ExceptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExceptionMutation", m)
}

// The ExchangeFunc type is an adapter to allow the use of ordinary
// function as Exchange mutator.
type ExchangeFunc func(context.Context, *ent.ExchangeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExchangeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ExchangeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExchangeMutation", m)
}

// The ExportFunc type is an adapter to allow the use of ordinary
// function as Export mutator.
type ExportFunc func(context.Context, *ent.ExportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ExportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ExportMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ExportMutation", m)
}

// The FaultFunc type is an adapter to allow the use of ordinary
// function as Fault mutator.
type FaultFunc func(context.Context, *ent.FaultMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FaultFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FaultMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FaultMutation", m)
}

// The FeedbackFunc type is an adapter to allow the use of ordinary
// function as Feedback mutator.
type FeedbackFunc func(context.Context, *ent.FeedbackMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f FeedbackFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.FeedbackMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.FeedbackMutation", m)
}

// The GoodsFunc type is an adapter to allow the use of ordinary
// function as Goods mutator.
type GoodsFunc func(context.Context, *ent.GoodsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f GoodsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.GoodsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.GoodsMutation", m)
}

// The InstructionsFunc type is an adapter to allow the use of ordinary
// function as Instructions mutator.
type InstructionsFunc func(context.Context, *ent.InstructionsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InstructionsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InstructionsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InstructionsMutation", m)
}

// The InventoryFunc type is an adapter to allow the use of ordinary
// function as Inventory mutator.
type InventoryFunc func(context.Context, *ent.InventoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InventoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InventoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InventoryMutation", m)
}

// The MaintainerFunc type is an adapter to allow the use of ordinary
// function as Maintainer mutator.
type MaintainerFunc func(context.Context, *ent.MaintainerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MaintainerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MaintainerMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MaintainerMutation", m)
}

// The ManagerFunc type is an adapter to allow the use of ordinary
// function as Manager mutator.
type ManagerFunc func(context.Context, *ent.ManagerMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ManagerFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ManagerMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ManagerMutation", m)
}

// The MaterialFunc type is an adapter to allow the use of ordinary
// function as Material mutator.
type MaterialFunc func(context.Context, *ent.MaterialMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f MaterialFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.MaterialMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.MaterialMutation", m)
}

// The OrderFunc type is an adapter to allow the use of ordinary
// function as Order mutator.
type OrderFunc func(context.Context, *ent.OrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderMutation", m)
}

// The OrderRefundFunc type is an adapter to allow the use of ordinary
// function as OrderRefund mutator.
type OrderRefundFunc func(context.Context, *ent.OrderRefundMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OrderRefundFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OrderRefundMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OrderRefundMutation", m)
}

// The PersonFunc type is an adapter to allow the use of ordinary
// function as Person mutator.
type PersonFunc func(context.Context, *ent.PersonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PersonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PersonMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PersonMutation", m)
}

// The PlanFunc type is an adapter to allow the use of ordinary
// function as Plan mutator.
type PlanFunc func(context.Context, *ent.PlanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PlanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PlanMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PlanMutation", m)
}

// The PlanIntroduceFunc type is an adapter to allow the use of ordinary
// function as PlanIntroduce mutator.
type PlanIntroduceFunc func(context.Context, *ent.PlanIntroduceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PlanIntroduceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PlanIntroduceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PlanIntroduceMutation", m)
}

// The PointLogFunc type is an adapter to allow the use of ordinary
// function as PointLog mutator.
type PointLogFunc func(context.Context, *ent.PointLogMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PointLogFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PointLogMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PointLogMutation", m)
}

// The PromotionAchievementFunc type is an adapter to allow the use of ordinary
// function as PromotionAchievement mutator.
type PromotionAchievementFunc func(context.Context, *ent.PromotionAchievementMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionAchievementFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionAchievementMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionAchievementMutation", m)
}

// The PromotionBankCardFunc type is an adapter to allow the use of ordinary
// function as PromotionBankCard mutator.
type PromotionBankCardFunc func(context.Context, *ent.PromotionBankCardMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionBankCardFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionBankCardMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionBankCardMutation", m)
}

// The PromotionCommissionFunc type is an adapter to allow the use of ordinary
// function as PromotionCommission mutator.
type PromotionCommissionFunc func(context.Context, *ent.PromotionCommissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionCommissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionCommissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionCommissionMutation", m)
}

// The PromotionCommissionPlanFunc type is an adapter to allow the use of ordinary
// function as PromotionCommissionPlan mutator.
type PromotionCommissionPlanFunc func(context.Context, *ent.PromotionCommissionPlanMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionCommissionPlanFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionCommissionPlanMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionCommissionPlanMutation", m)
}

// The PromotionEarningsFunc type is an adapter to allow the use of ordinary
// function as PromotionEarnings mutator.
type PromotionEarningsFunc func(context.Context, *ent.PromotionEarningsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionEarningsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionEarningsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionEarningsMutation", m)
}

// The PromotionGrowthFunc type is an adapter to allow the use of ordinary
// function as PromotionGrowth mutator.
type PromotionGrowthFunc func(context.Context, *ent.PromotionGrowthMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionGrowthFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionGrowthMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionGrowthMutation", m)
}

// The PromotionLevelFunc type is an adapter to allow the use of ordinary
// function as PromotionLevel mutator.
type PromotionLevelFunc func(context.Context, *ent.PromotionLevelMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionLevelFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionLevelMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionLevelMutation", m)
}

// The PromotionLevelTaskFunc type is an adapter to allow the use of ordinary
// function as PromotionLevelTask mutator.
type PromotionLevelTaskFunc func(context.Context, *ent.PromotionLevelTaskMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionLevelTaskFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionLevelTaskMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionLevelTaskMutation", m)
}

// The PromotionMemberFunc type is an adapter to allow the use of ordinary
// function as PromotionMember mutator.
type PromotionMemberFunc func(context.Context, *ent.PromotionMemberMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionMemberFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionMemberMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionMemberMutation", m)
}

// The PromotionMemberCommissionFunc type is an adapter to allow the use of ordinary
// function as PromotionMemberCommission mutator.
type PromotionMemberCommissionFunc func(context.Context, *ent.PromotionMemberCommissionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionMemberCommissionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionMemberCommissionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionMemberCommissionMutation", m)
}

// The PromotionPersonFunc type is an adapter to allow the use of ordinary
// function as PromotionPerson mutator.
type PromotionPersonFunc func(context.Context, *ent.PromotionPersonMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionPersonFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionPersonMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionPersonMutation", m)
}

// The PromotionPrivilegeFunc type is an adapter to allow the use of ordinary
// function as PromotionPrivilege mutator.
type PromotionPrivilegeFunc func(context.Context, *ent.PromotionPrivilegeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionPrivilegeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionPrivilegeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionPrivilegeMutation", m)
}

// The PromotionReferralsFunc type is an adapter to allow the use of ordinary
// function as PromotionReferrals mutator.
type PromotionReferralsFunc func(context.Context, *ent.PromotionReferralsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionReferralsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionReferralsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionReferralsMutation", m)
}

// The PromotionReferralsProgressFunc type is an adapter to allow the use of ordinary
// function as PromotionReferralsProgress mutator.
type PromotionReferralsProgressFunc func(context.Context, *ent.PromotionReferralsProgressMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionReferralsProgressFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionReferralsProgressMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionReferralsProgressMutation", m)
}

// The PromotionSettingFunc type is an adapter to allow the use of ordinary
// function as PromotionSetting mutator.
type PromotionSettingFunc func(context.Context, *ent.PromotionSettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionSettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionSettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionSettingMutation", m)
}

// The PromotionWithdrawalFunc type is an adapter to allow the use of ordinary
// function as PromotionWithdrawal mutator.
type PromotionWithdrawalFunc func(context.Context, *ent.PromotionWithdrawalMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PromotionWithdrawalFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PromotionWithdrawalMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PromotionWithdrawalMutation", m)
}

// The PurchaseCommodityFunc type is an adapter to allow the use of ordinary
// function as PurchaseCommodity mutator.
type PurchaseCommodityFunc func(context.Context, *ent.PurchaseCommodityMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PurchaseCommodityFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PurchaseCommodityMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PurchaseCommodityMutation", m)
}

// The PurchaseOrderFunc type is an adapter to allow the use of ordinary
// function as PurchaseOrder mutator.
type PurchaseOrderFunc func(context.Context, *ent.PurchaseOrderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PurchaseOrderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PurchaseOrderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PurchaseOrderMutation", m)
}

// The PurchasePaymentFunc type is an adapter to allow the use of ordinary
// function as PurchasePayment mutator.
type PurchasePaymentFunc func(context.Context, *ent.PurchasePaymentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PurchasePaymentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.PurchasePaymentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PurchasePaymentMutation", m)
}

// The QuestionFunc type is an adapter to allow the use of ordinary
// function as Question mutator.
type QuestionFunc func(context.Context, *ent.QuestionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f QuestionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.QuestionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.QuestionMutation", m)
}

// The QuestionCategoryFunc type is an adapter to allow the use of ordinary
// function as QuestionCategory mutator.
type QuestionCategoryFunc func(context.Context, *ent.QuestionCategoryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f QuestionCategoryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.QuestionCategoryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.QuestionCategoryMutation", m)
}

// The ReserveFunc type is an adapter to allow the use of ordinary
// function as Reserve mutator.
type ReserveFunc func(context.Context, *ent.ReserveMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReserveFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ReserveMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReserveMutation", m)
}

// The RiderFunc type is an adapter to allow the use of ordinary
// function as Rider mutator.
type RiderFunc func(context.Context, *ent.RiderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RiderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RiderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RiderMutation", m)
}

// The RiderFollowUpFunc type is an adapter to allow the use of ordinary
// function as RiderFollowUp mutator.
type RiderFollowUpFunc func(context.Context, *ent.RiderFollowUpMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RiderFollowUpFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RiderFollowUpMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RiderFollowUpMutation", m)
}

// The RiderPhoneDeviceFunc type is an adapter to allow the use of ordinary
// function as RiderPhoneDevice mutator.
type RiderPhoneDeviceFunc func(context.Context, *ent.RiderPhoneDeviceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RiderPhoneDeviceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RiderPhoneDeviceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RiderPhoneDeviceMutation", m)
}

// The RoleFunc type is an adapter to allow the use of ordinary
// function as Role mutator.
type RoleFunc func(context.Context, *ent.RoleMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RoleFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RoleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RoleMutation", m)
}

// The SettingFunc type is an adapter to allow the use of ordinary
// function as Setting mutator.
type SettingFunc func(context.Context, *ent.SettingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SettingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SettingMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SettingMutation", m)
}

// The StockFunc type is an adapter to allow the use of ordinary
// function as Stock mutator.
type StockFunc func(context.Context, *ent.StockMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StockFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StockMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StockMutation", m)
}

// The StockSummaryFunc type is an adapter to allow the use of ordinary
// function as StockSummary mutator.
type StockSummaryFunc func(context.Context, *ent.StockSummaryMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StockSummaryFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StockSummaryMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StockSummaryMutation", m)
}

// The StoreFunc type is an adapter to allow the use of ordinary
// function as Store mutator.
type StoreFunc func(context.Context, *ent.StoreMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StoreFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StoreMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StoreMutation", m)
}

// The StoreGoodsFunc type is an adapter to allow the use of ordinary
// function as StoreGoods mutator.
type StoreGoodsFunc func(context.Context, *ent.StoreGoodsMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StoreGoodsFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StoreGoodsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StoreGoodsMutation", m)
}

// The StoreGroupFunc type is an adapter to allow the use of ordinary
// function as StoreGroup mutator.
type StoreGroupFunc func(context.Context, *ent.StoreGroupMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f StoreGroupFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.StoreGroupMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.StoreGroupMutation", m)
}

// The SubscribeFunc type is an adapter to allow the use of ordinary
// function as Subscribe mutator.
type SubscribeFunc func(context.Context, *ent.SubscribeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SubscribeMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribeMutation", m)
}

// The SubscribeAlterFunc type is an adapter to allow the use of ordinary
// function as SubscribeAlter mutator.
type SubscribeAlterFunc func(context.Context, *ent.SubscribeAlterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribeAlterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SubscribeAlterMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribeAlterMutation", m)
}

// The SubscribePauseFunc type is an adapter to allow the use of ordinary
// function as SubscribePause mutator.
type SubscribePauseFunc func(context.Context, *ent.SubscribePauseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribePauseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SubscribePauseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribePauseMutation", m)
}

// The SubscribeReminderFunc type is an adapter to allow the use of ordinary
// function as SubscribeReminder mutator.
type SubscribeReminderFunc func(context.Context, *ent.SubscribeReminderMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribeReminderFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SubscribeReminderMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribeReminderMutation", m)
}

// The SubscribeSuspendFunc type is an adapter to allow the use of ordinary
// function as SubscribeSuspend mutator.
type SubscribeSuspendFunc func(context.Context, *ent.SubscribeSuspendMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SubscribeSuspendFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SubscribeSuspendMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SubscribeSuspendMutation", m)
}

// The VersionFunc type is an adapter to allow the use of ordinary
// function as Version mutator.
type VersionFunc func(context.Context, *ent.VersionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f VersionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.VersionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.VersionMutation", m)
}

// The WarehouseFunc type is an adapter to allow the use of ordinary
// function as Warehouse mutator.
type WarehouseFunc func(context.Context, *ent.WarehouseMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WarehouseFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WarehouseMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WarehouseMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
