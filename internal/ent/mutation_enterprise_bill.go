// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/enterprisebill"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// EnterpriseBillMutation represents an operation that mutates the EnterpriseBill nodes in the graph.
type EnterpriseBillMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	creator           **model.Modifier
	last_modifier     **model.Modifier
	remark            *string
	start             *time.Time
	end               *time.Time
	days              *int
	adddays           *int
	price             *float64
	addprice          *float64
	cost              *float64
	addcost           *float64
	model             *string
	clearedFields     map[string]struct{}
	rider             *uint64
	clearedrider      bool
	city              *uint64
	clearedcity       bool
	station           *uint64
	clearedstation    bool
	enterprise        *uint64
	clearedenterprise bool
	statement         *uint64
	clearedstatement  bool
	subscribe         *uint64
	clearedsubscribe  bool
	done              bool
	oldValue          func(context.Context) (*EnterpriseBill, error)
	predicates        []predicate.EnterpriseBill
}

var _ ent.Mutation = (*EnterpriseBillMutation)(nil)

// enterprisebillOption allows management of the mutation configuration using functional options.
type enterprisebillOption func(*EnterpriseBillMutation)

// newEnterpriseBillMutation creates new mutation for the EnterpriseBill entity.
func newEnterpriseBillMutation(c config, op Op, opts ...enterprisebillOption) *EnterpriseBillMutation {
	m := &EnterpriseBillMutation{
		config:        c,
		op:            op,
		typ:           TypeEnterpriseBill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnterpriseBillID sets the ID field of the mutation.
func withEnterpriseBillID(id uint64) enterprisebillOption {
	return func(m *EnterpriseBillMutation) {
		var (
			err   error
			once  sync.Once
			value *EnterpriseBill
		)
		m.oldValue = func(ctx context.Context) (*EnterpriseBill, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EnterpriseBill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnterpriseBill sets the old EnterpriseBill of the mutation.
func withEnterpriseBill(node *EnterpriseBill) enterprisebillOption {
	return func(m *EnterpriseBillMutation) {
		m.oldValue = func(context.Context) (*EnterpriseBill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnterpriseBillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnterpriseBillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnterpriseBillMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnterpriseBillMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EnterpriseBill.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EnterpriseBillMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EnterpriseBillMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EnterpriseBillMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EnterpriseBillMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EnterpriseBillMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EnterpriseBillMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EnterpriseBillMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EnterpriseBillMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EnterpriseBillMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[enterprisebill.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EnterpriseBillMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[enterprisebill.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EnterpriseBillMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, enterprisebill.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *EnterpriseBillMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *EnterpriseBillMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *EnterpriseBillMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[enterprisebill.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *EnterpriseBillMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[enterprisebill.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *EnterpriseBillMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, enterprisebill.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *EnterpriseBillMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *EnterpriseBillMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *EnterpriseBillMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[enterprisebill.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *EnterpriseBillMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[enterprisebill.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *EnterpriseBillMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, enterprisebill.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *EnterpriseBillMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *EnterpriseBillMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *EnterpriseBillMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[enterprisebill.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *EnterpriseBillMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[enterprisebill.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *EnterpriseBillMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, enterprisebill.FieldRemark)
}

// SetRiderID sets the "rider_id" field.
func (m *EnterpriseBillMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *EnterpriseBillMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *EnterpriseBillMutation) ResetRiderID() {
	m.rider = nil
}

// SetCityID sets the "city_id" field.
func (m *EnterpriseBillMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *EnterpriseBillMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *EnterpriseBillMutation) ResetCityID() {
	m.city = nil
}

// SetStationID sets the "station_id" field.
func (m *EnterpriseBillMutation) SetStationID(u uint64) {
	m.station = &u
}

// StationID returns the value of the "station_id" field in the mutation.
func (m *EnterpriseBillMutation) StationID() (r uint64, exists bool) {
	v := m.station
	if v == nil {
		return
	}
	return *v, true
}

// OldStationID returns the old "station_id" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldStationID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStationID: %w", err)
	}
	return oldValue.StationID, nil
}

// ClearStationID clears the value of the "station_id" field.
func (m *EnterpriseBillMutation) ClearStationID() {
	m.station = nil
	m.clearedFields[enterprisebill.FieldStationID] = struct{}{}
}

// StationIDCleared returns if the "station_id" field was cleared in this mutation.
func (m *EnterpriseBillMutation) StationIDCleared() bool {
	_, ok := m.clearedFields[enterprisebill.FieldStationID]
	return ok
}

// ResetStationID resets all changes to the "station_id" field.
func (m *EnterpriseBillMutation) ResetStationID() {
	m.station = nil
	delete(m.clearedFields, enterprisebill.FieldStationID)
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *EnterpriseBillMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *EnterpriseBillMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *EnterpriseBillMutation) ResetSubscribeID() {
	m.subscribe = nil
}

// SetEnterpriseID sets the "enterprise_id" field.
func (m *EnterpriseBillMutation) SetEnterpriseID(u uint64) {
	m.enterprise = &u
}

// EnterpriseID returns the value of the "enterprise_id" field in the mutation.
func (m *EnterpriseBillMutation) EnterpriseID() (r uint64, exists bool) {
	v := m.enterprise
	if v == nil {
		return
	}
	return *v, true
}

// OldEnterpriseID returns the old "enterprise_id" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldEnterpriseID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnterpriseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnterpriseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnterpriseID: %w", err)
	}
	return oldValue.EnterpriseID, nil
}

// ResetEnterpriseID resets all changes to the "enterprise_id" field.
func (m *EnterpriseBillMutation) ResetEnterpriseID() {
	m.enterprise = nil
}

// SetStatementID sets the "statement_id" field.
func (m *EnterpriseBillMutation) SetStatementID(u uint64) {
	m.statement = &u
}

// StatementID returns the value of the "statement_id" field in the mutation.
func (m *EnterpriseBillMutation) StatementID() (r uint64, exists bool) {
	v := m.statement
	if v == nil {
		return
	}
	return *v, true
}

// OldStatementID returns the old "statement_id" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldStatementID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatementID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatementID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatementID: %w", err)
	}
	return oldValue.StatementID, nil
}

// ResetStatementID resets all changes to the "statement_id" field.
func (m *EnterpriseBillMutation) ResetStatementID() {
	m.statement = nil
}

// SetStart sets the "start" field.
func (m *EnterpriseBillMutation) SetStart(t time.Time) {
	m.start = &t
}

// Start returns the value of the "start" field in the mutation.
func (m *EnterpriseBillMutation) Start() (r time.Time, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// ResetStart resets all changes to the "start" field.
func (m *EnterpriseBillMutation) ResetStart() {
	m.start = nil
}

// SetEnd sets the "end" field.
func (m *EnterpriseBillMutation) SetEnd(t time.Time) {
	m.end = &t
}

// End returns the value of the "end" field in the mutation.
func (m *EnterpriseBillMutation) End() (r time.Time, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldEnd(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// ResetEnd resets all changes to the "end" field.
func (m *EnterpriseBillMutation) ResetEnd() {
	m.end = nil
}

// SetDays sets the "days" field.
func (m *EnterpriseBillMutation) SetDays(i int) {
	m.days = &i
	m.adddays = nil
}

// Days returns the value of the "days" field in the mutation.
func (m *EnterpriseBillMutation) Days() (r int, exists bool) {
	v := m.days
	if v == nil {
		return
	}
	return *v, true
}

// OldDays returns the old "days" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDays: %w", err)
	}
	return oldValue.Days, nil
}

// AddDays adds i to the "days" field.
func (m *EnterpriseBillMutation) AddDays(i int) {
	if m.adddays != nil {
		*m.adddays += i
	} else {
		m.adddays = &i
	}
}

// AddedDays returns the value that was added to the "days" field in this mutation.
func (m *EnterpriseBillMutation) AddedDays() (r int, exists bool) {
	v := m.adddays
	if v == nil {
		return
	}
	return *v, true
}

// ResetDays resets all changes to the "days" field.
func (m *EnterpriseBillMutation) ResetDays() {
	m.days = nil
	m.adddays = nil
}

// SetPrice sets the "price" field.
func (m *EnterpriseBillMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *EnterpriseBillMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *EnterpriseBillMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *EnterpriseBillMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *EnterpriseBillMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetCost sets the "cost" field.
func (m *EnterpriseBillMutation) SetCost(f float64) {
	m.cost = &f
	m.addcost = nil
}

// Cost returns the value of the "cost" field in the mutation.
func (m *EnterpriseBillMutation) Cost() (r float64, exists bool) {
	v := m.cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old "cost" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// AddCost adds f to the "cost" field.
func (m *EnterpriseBillMutation) AddCost(f float64) {
	if m.addcost != nil {
		*m.addcost += f
	} else {
		m.addcost = &f
	}
}

// AddedCost returns the value that was added to the "cost" field in this mutation.
func (m *EnterpriseBillMutation) AddedCost() (r float64, exists bool) {
	v := m.addcost
	if v == nil {
		return
	}
	return *v, true
}

// ResetCost resets all changes to the "cost" field.
func (m *EnterpriseBillMutation) ResetCost() {
	m.cost = nil
	m.addcost = nil
}

// SetModel sets the "model" field.
func (m *EnterpriseBillMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *EnterpriseBillMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the EnterpriseBill entity.
// If the EnterpriseBill object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseBillMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *EnterpriseBillMutation) ResetModel() {
	m.model = nil
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *EnterpriseBillMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *EnterpriseBillMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *EnterpriseBillMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *EnterpriseBillMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearCity clears the "city" edge to the City entity.
func (m *EnterpriseBillMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *EnterpriseBillMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *EnterpriseBillMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *EnterpriseBillMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (m *EnterpriseBillMutation) ClearStation() {
	m.clearedstation = true
}

// StationCleared reports if the "station" edge to the EnterpriseStation entity was cleared.
func (m *EnterpriseBillMutation) StationCleared() bool {
	return m.StationIDCleared() || m.clearedstation
}

// StationIDs returns the "station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StationID instead. It exists only for internal usage by the builders.
func (m *EnterpriseBillMutation) StationIDs() (ids []uint64) {
	if id := m.station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStation resets all changes to the "station" edge.
func (m *EnterpriseBillMutation) ResetStation() {
	m.station = nil
	m.clearedstation = false
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (m *EnterpriseBillMutation) ClearEnterprise() {
	m.clearedenterprise = true
}

// EnterpriseCleared reports if the "enterprise" edge to the Enterprise entity was cleared.
func (m *EnterpriseBillMutation) EnterpriseCleared() bool {
	return m.clearedenterprise
}

// EnterpriseIDs returns the "enterprise" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnterpriseID instead. It exists only for internal usage by the builders.
func (m *EnterpriseBillMutation) EnterpriseIDs() (ids []uint64) {
	if id := m.enterprise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnterprise resets all changes to the "enterprise" edge.
func (m *EnterpriseBillMutation) ResetEnterprise() {
	m.enterprise = nil
	m.clearedenterprise = false
}

// ClearStatement clears the "statement" edge to the EnterpriseStatement entity.
func (m *EnterpriseBillMutation) ClearStatement() {
	m.clearedstatement = true
}

// StatementCleared reports if the "statement" edge to the EnterpriseStatement entity was cleared.
func (m *EnterpriseBillMutation) StatementCleared() bool {
	return m.clearedstatement
}

// StatementIDs returns the "statement" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StatementID instead. It exists only for internal usage by the builders.
func (m *EnterpriseBillMutation) StatementIDs() (ids []uint64) {
	if id := m.statement; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatement resets all changes to the "statement" edge.
func (m *EnterpriseBillMutation) ResetStatement() {
	m.statement = nil
	m.clearedstatement = false
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *EnterpriseBillMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *EnterpriseBillMutation) SubscribeCleared() bool {
	return m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *EnterpriseBillMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *EnterpriseBillMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// Where appends a list predicates to the EnterpriseBillMutation builder.
func (m *EnterpriseBillMutation) Where(ps ...predicate.EnterpriseBill) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EnterpriseBillMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EnterpriseBill).
func (m *EnterpriseBillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnterpriseBillMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.created_at != nil {
		fields = append(fields, enterprisebill.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, enterprisebill.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, enterprisebill.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, enterprisebill.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, enterprisebill.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, enterprisebill.FieldRemark)
	}
	if m.rider != nil {
		fields = append(fields, enterprisebill.FieldRiderID)
	}
	if m.city != nil {
		fields = append(fields, enterprisebill.FieldCityID)
	}
	if m.station != nil {
		fields = append(fields, enterprisebill.FieldStationID)
	}
	if m.subscribe != nil {
		fields = append(fields, enterprisebill.FieldSubscribeID)
	}
	if m.enterprise != nil {
		fields = append(fields, enterprisebill.FieldEnterpriseID)
	}
	if m.statement != nil {
		fields = append(fields, enterprisebill.FieldStatementID)
	}
	if m.start != nil {
		fields = append(fields, enterprisebill.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, enterprisebill.FieldEnd)
	}
	if m.days != nil {
		fields = append(fields, enterprisebill.FieldDays)
	}
	if m.price != nil {
		fields = append(fields, enterprisebill.FieldPrice)
	}
	if m.cost != nil {
		fields = append(fields, enterprisebill.FieldCost)
	}
	if m.model != nil {
		fields = append(fields, enterprisebill.FieldModel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnterpriseBillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enterprisebill.FieldCreatedAt:
		return m.CreatedAt()
	case enterprisebill.FieldUpdatedAt:
		return m.UpdatedAt()
	case enterprisebill.FieldDeletedAt:
		return m.DeletedAt()
	case enterprisebill.FieldCreator:
		return m.Creator()
	case enterprisebill.FieldLastModifier:
		return m.LastModifier()
	case enterprisebill.FieldRemark:
		return m.Remark()
	case enterprisebill.FieldRiderID:
		return m.RiderID()
	case enterprisebill.FieldCityID:
		return m.CityID()
	case enterprisebill.FieldStationID:
		return m.StationID()
	case enterprisebill.FieldSubscribeID:
		return m.SubscribeID()
	case enterprisebill.FieldEnterpriseID:
		return m.EnterpriseID()
	case enterprisebill.FieldStatementID:
		return m.StatementID()
	case enterprisebill.FieldStart:
		return m.Start()
	case enterprisebill.FieldEnd:
		return m.End()
	case enterprisebill.FieldDays:
		return m.Days()
	case enterprisebill.FieldPrice:
		return m.Price()
	case enterprisebill.FieldCost:
		return m.Cost()
	case enterprisebill.FieldModel:
		return m.Model()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnterpriseBillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enterprisebill.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case enterprisebill.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case enterprisebill.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case enterprisebill.FieldCreator:
		return m.OldCreator(ctx)
	case enterprisebill.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case enterprisebill.FieldRemark:
		return m.OldRemark(ctx)
	case enterprisebill.FieldRiderID:
		return m.OldRiderID(ctx)
	case enterprisebill.FieldCityID:
		return m.OldCityID(ctx)
	case enterprisebill.FieldStationID:
		return m.OldStationID(ctx)
	case enterprisebill.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case enterprisebill.FieldEnterpriseID:
		return m.OldEnterpriseID(ctx)
	case enterprisebill.FieldStatementID:
		return m.OldStatementID(ctx)
	case enterprisebill.FieldStart:
		return m.OldStart(ctx)
	case enterprisebill.FieldEnd:
		return m.OldEnd(ctx)
	case enterprisebill.FieldDays:
		return m.OldDays(ctx)
	case enterprisebill.FieldPrice:
		return m.OldPrice(ctx)
	case enterprisebill.FieldCost:
		return m.OldCost(ctx)
	case enterprisebill.FieldModel:
		return m.OldModel(ctx)
	}
	return nil, fmt.Errorf("unknown EnterpriseBill field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnterpriseBillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enterprisebill.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case enterprisebill.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case enterprisebill.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case enterprisebill.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case enterprisebill.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case enterprisebill.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case enterprisebill.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case enterprisebill.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case enterprisebill.FieldStationID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStationID(v)
		return nil
	case enterprisebill.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case enterprisebill.FieldEnterpriseID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnterpriseID(v)
		return nil
	case enterprisebill.FieldStatementID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatementID(v)
		return nil
	case enterprisebill.FieldStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case enterprisebill.FieldEnd:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	case enterprisebill.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDays(v)
		return nil
	case enterprisebill.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case enterprisebill.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	case enterprisebill.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	}
	return fmt.Errorf("unknown EnterpriseBill field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnterpriseBillMutation) AddedFields() []string {
	var fields []string
	if m.adddays != nil {
		fields = append(fields, enterprisebill.FieldDays)
	}
	if m.addprice != nil {
		fields = append(fields, enterprisebill.FieldPrice)
	}
	if m.addcost != nil {
		fields = append(fields, enterprisebill.FieldCost)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnterpriseBillMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case enterprisebill.FieldDays:
		return m.AddedDays()
	case enterprisebill.FieldPrice:
		return m.AddedPrice()
	case enterprisebill.FieldCost:
		return m.AddedCost()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnterpriseBillMutation) AddField(name string, value ent.Value) error {
	switch name {
	case enterprisebill.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDays(v)
		return nil
	case enterprisebill.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case enterprisebill.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCost(v)
		return nil
	}
	return fmt.Errorf("unknown EnterpriseBill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnterpriseBillMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(enterprisebill.FieldDeletedAt) {
		fields = append(fields, enterprisebill.FieldDeletedAt)
	}
	if m.FieldCleared(enterprisebill.FieldCreator) {
		fields = append(fields, enterprisebill.FieldCreator)
	}
	if m.FieldCleared(enterprisebill.FieldLastModifier) {
		fields = append(fields, enterprisebill.FieldLastModifier)
	}
	if m.FieldCleared(enterprisebill.FieldRemark) {
		fields = append(fields, enterprisebill.FieldRemark)
	}
	if m.FieldCleared(enterprisebill.FieldStationID) {
		fields = append(fields, enterprisebill.FieldStationID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnterpriseBillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnterpriseBillMutation) ClearField(name string) error {
	switch name {
	case enterprisebill.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case enterprisebill.FieldCreator:
		m.ClearCreator()
		return nil
	case enterprisebill.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case enterprisebill.FieldRemark:
		m.ClearRemark()
		return nil
	case enterprisebill.FieldStationID:
		m.ClearStationID()
		return nil
	}
	return fmt.Errorf("unknown EnterpriseBill nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnterpriseBillMutation) ResetField(name string) error {
	switch name {
	case enterprisebill.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case enterprisebill.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case enterprisebill.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case enterprisebill.FieldCreator:
		m.ResetCreator()
		return nil
	case enterprisebill.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case enterprisebill.FieldRemark:
		m.ResetRemark()
		return nil
	case enterprisebill.FieldRiderID:
		m.ResetRiderID()
		return nil
	case enterprisebill.FieldCityID:
		m.ResetCityID()
		return nil
	case enterprisebill.FieldStationID:
		m.ResetStationID()
		return nil
	case enterprisebill.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case enterprisebill.FieldEnterpriseID:
		m.ResetEnterpriseID()
		return nil
	case enterprisebill.FieldStatementID:
		m.ResetStatementID()
		return nil
	case enterprisebill.FieldStart:
		m.ResetStart()
		return nil
	case enterprisebill.FieldEnd:
		m.ResetEnd()
		return nil
	case enterprisebill.FieldDays:
		m.ResetDays()
		return nil
	case enterprisebill.FieldPrice:
		m.ResetPrice()
		return nil
	case enterprisebill.FieldCost:
		m.ResetCost()
		return nil
	case enterprisebill.FieldModel:
		m.ResetModel()
		return nil
	}
	return fmt.Errorf("unknown EnterpriseBill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnterpriseBillMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.rider != nil {
		edges = append(edges, enterprisebill.EdgeRider)
	}
	if m.city != nil {
		edges = append(edges, enterprisebill.EdgeCity)
	}
	if m.station != nil {
		edges = append(edges, enterprisebill.EdgeStation)
	}
	if m.enterprise != nil {
		edges = append(edges, enterprisebill.EdgeEnterprise)
	}
	if m.statement != nil {
		edges = append(edges, enterprisebill.EdgeStatement)
	}
	if m.subscribe != nil {
		edges = append(edges, enterprisebill.EdgeSubscribe)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnterpriseBillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case enterprisebill.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case enterprisebill.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case enterprisebill.EdgeStation:
		if id := m.station; id != nil {
			return []ent.Value{*id}
		}
	case enterprisebill.EdgeEnterprise:
		if id := m.enterprise; id != nil {
			return []ent.Value{*id}
		}
	case enterprisebill.EdgeStatement:
		if id := m.statement; id != nil {
			return []ent.Value{*id}
		}
	case enterprisebill.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnterpriseBillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnterpriseBillMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnterpriseBillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedrider {
		edges = append(edges, enterprisebill.EdgeRider)
	}
	if m.clearedcity {
		edges = append(edges, enterprisebill.EdgeCity)
	}
	if m.clearedstation {
		edges = append(edges, enterprisebill.EdgeStation)
	}
	if m.clearedenterprise {
		edges = append(edges, enterprisebill.EdgeEnterprise)
	}
	if m.clearedstatement {
		edges = append(edges, enterprisebill.EdgeStatement)
	}
	if m.clearedsubscribe {
		edges = append(edges, enterprisebill.EdgeSubscribe)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnterpriseBillMutation) EdgeCleared(name string) bool {
	switch name {
	case enterprisebill.EdgeRider:
		return m.clearedrider
	case enterprisebill.EdgeCity:
		return m.clearedcity
	case enterprisebill.EdgeStation:
		return m.clearedstation
	case enterprisebill.EdgeEnterprise:
		return m.clearedenterprise
	case enterprisebill.EdgeStatement:
		return m.clearedstatement
	case enterprisebill.EdgeSubscribe:
		return m.clearedsubscribe
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnterpriseBillMutation) ClearEdge(name string) error {
	switch name {
	case enterprisebill.EdgeRider:
		m.ClearRider()
		return nil
	case enterprisebill.EdgeCity:
		m.ClearCity()
		return nil
	case enterprisebill.EdgeStation:
		m.ClearStation()
		return nil
	case enterprisebill.EdgeEnterprise:
		m.ClearEnterprise()
		return nil
	case enterprisebill.EdgeStatement:
		m.ClearStatement()
		return nil
	case enterprisebill.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	}
	return fmt.Errorf("unknown EnterpriseBill unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnterpriseBillMutation) ResetEdge(name string) error {
	switch name {
	case enterprisebill.EdgeRider:
		m.ResetRider()
		return nil
	case enterprisebill.EdgeCity:
		m.ResetCity()
		return nil
	case enterprisebill.EdgeStation:
		m.ResetStation()
		return nil
	case enterprisebill.EdgeEnterprise:
		m.ResetEnterprise()
		return nil
	case enterprisebill.EdgeStatement:
		m.ResetStatement()
		return nil
	case enterprisebill.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	}
	return fmt.Errorf("unknown EnterpriseBill edge %s", name)
}

