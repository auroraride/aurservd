// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/purchasecommodity"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
	"github.com/auroraride/aurservd/internal/ent/purchasepayment"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PurchasePaymentCreate is the builder for creating a PurchasePayment entity.
type PurchasePaymentCreate struct {
	config
	mutation *PurchasePaymentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ppc *PurchasePaymentCreate) SetCreatedAt(t time.Time) *PurchasePaymentCreate {
	ppc.mutation.SetCreatedAt(t)
	return ppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppc *PurchasePaymentCreate) SetNillableCreatedAt(t *time.Time) *PurchasePaymentCreate {
	if t != nil {
		ppc.SetCreatedAt(*t)
	}
	return ppc
}

// SetUpdatedAt sets the "updated_at" field.
func (ppc *PurchasePaymentCreate) SetUpdatedAt(t time.Time) *PurchasePaymentCreate {
	ppc.mutation.SetUpdatedAt(t)
	return ppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ppc *PurchasePaymentCreate) SetNillableUpdatedAt(t *time.Time) *PurchasePaymentCreate {
	if t != nil {
		ppc.SetUpdatedAt(*t)
	}
	return ppc
}

// SetDeletedAt sets the "deleted_at" field.
func (ppc *PurchasePaymentCreate) SetDeletedAt(t time.Time) *PurchasePaymentCreate {
	ppc.mutation.SetDeletedAt(t)
	return ppc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppc *PurchasePaymentCreate) SetNillableDeletedAt(t *time.Time) *PurchasePaymentCreate {
	if t != nil {
		ppc.SetDeletedAt(*t)
	}
	return ppc
}

// SetCreator sets the "creator" field.
func (ppc *PurchasePaymentCreate) SetCreator(m *model.Modifier) *PurchasePaymentCreate {
	ppc.mutation.SetCreator(m)
	return ppc
}

// SetLastModifier sets the "last_modifier" field.
func (ppc *PurchasePaymentCreate) SetLastModifier(m *model.Modifier) *PurchasePaymentCreate {
	ppc.mutation.SetLastModifier(m)
	return ppc
}

// SetRemark sets the "remark" field.
func (ppc *PurchasePaymentCreate) SetRemark(s string) *PurchasePaymentCreate {
	ppc.mutation.SetRemark(s)
	return ppc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ppc *PurchasePaymentCreate) SetNillableRemark(s *string) *PurchasePaymentCreate {
	if s != nil {
		ppc.SetRemark(*s)
	}
	return ppc
}

// SetRiderID sets the "rider_id" field.
func (ppc *PurchasePaymentCreate) SetRiderID(u uint64) *PurchasePaymentCreate {
	ppc.mutation.SetRiderID(u)
	return ppc
}

// SetCommodityID sets the "commodity_id" field.
func (ppc *PurchasePaymentCreate) SetCommodityID(u uint64) *PurchasePaymentCreate {
	ppc.mutation.SetCommodityID(u)
	return ppc
}

// SetOrderID sets the "order_id" field.
func (ppc *PurchasePaymentCreate) SetOrderID(u uint64) *PurchasePaymentCreate {
	ppc.mutation.SetOrderID(u)
	return ppc
}

// SetOutTradeNo sets the "out_trade_no" field.
func (ppc *PurchasePaymentCreate) SetOutTradeNo(s string) *PurchasePaymentCreate {
	ppc.mutation.SetOutTradeNo(s)
	return ppc
}

// SetPayway sets the "payway" field.
func (ppc *PurchasePaymentCreate) SetPayway(pu purchasepayment.Payway) *PurchasePaymentCreate {
	ppc.mutation.SetPayway(pu)
	return ppc
}

// SetIndex sets the "index" field.
func (ppc *PurchasePaymentCreate) SetIndex(i int) *PurchasePaymentCreate {
	ppc.mutation.SetIndex(i)
	return ppc
}

// SetTotal sets the "total" field.
func (ppc *PurchasePaymentCreate) SetTotal(f float64) *PurchasePaymentCreate {
	ppc.mutation.SetTotal(f)
	return ppc
}

// SetAmount sets the "amount" field.
func (ppc *PurchasePaymentCreate) SetAmount(f float64) *PurchasePaymentCreate {
	ppc.mutation.SetAmount(f)
	return ppc
}

// SetForfeit sets the "forfeit" field.
func (ppc *PurchasePaymentCreate) SetForfeit(f float64) *PurchasePaymentCreate {
	ppc.mutation.SetForfeit(f)
	return ppc
}

// SetNillableForfeit sets the "forfeit" field if the given value is not nil.
func (ppc *PurchasePaymentCreate) SetNillableForfeit(f *float64) *PurchasePaymentCreate {
	if f != nil {
		ppc.SetForfeit(*f)
	}
	return ppc
}

// SetPaidDate sets the "paid_date" field.
func (ppc *PurchasePaymentCreate) SetPaidDate(t time.Time) *PurchasePaymentCreate {
	ppc.mutation.SetPaidDate(t)
	return ppc
}

// SetTradeNo sets the "trade_no" field.
func (ppc *PurchasePaymentCreate) SetTradeNo(s string) *PurchasePaymentCreate {
	ppc.mutation.SetTradeNo(s)
	return ppc
}

// SetNillableTradeNo sets the "trade_no" field if the given value is not nil.
func (ppc *PurchasePaymentCreate) SetNillableTradeNo(s *string) *PurchasePaymentCreate {
	if s != nil {
		ppc.SetTradeNo(*s)
	}
	return ppc
}

// SetRider sets the "rider" edge to the Rider entity.
func (ppc *PurchasePaymentCreate) SetRider(r *Rider) *PurchasePaymentCreate {
	return ppc.SetRiderID(r.ID)
}

// SetCommodity sets the "commodity" edge to the PurchaseCommodity entity.
func (ppc *PurchasePaymentCreate) SetCommodity(p *PurchaseCommodity) *PurchasePaymentCreate {
	return ppc.SetCommodityID(p.ID)
}

// SetOrder sets the "order" edge to the PurchaseOrder entity.
func (ppc *PurchasePaymentCreate) SetOrder(p *PurchaseOrder) *PurchasePaymentCreate {
	return ppc.SetOrderID(p.ID)
}

// Mutation returns the PurchasePaymentMutation object of the builder.
func (ppc *PurchasePaymentCreate) Mutation() *PurchasePaymentMutation {
	return ppc.mutation
}

// Save creates the PurchasePayment in the database.
func (ppc *PurchasePaymentCreate) Save(ctx context.Context) (*PurchasePayment, error) {
	if err := ppc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PurchasePaymentCreate) SaveX(ctx context.Context) *PurchasePayment {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PurchasePaymentCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PurchasePaymentCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PurchasePaymentCreate) defaults() error {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		if purchasepayment.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasepayment.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := purchasepayment.DefaultCreatedAt()
		ppc.mutation.SetCreatedAt(v)
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		if purchasepayment.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasepayment.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasepayment.DefaultUpdatedAt()
		ppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ppc.mutation.Forfeit(); !ok {
		v := purchasepayment.DefaultForfeit
		ppc.mutation.SetForfeit(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PurchasePaymentCreate) check() error {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PurchasePayment.created_at"`)}
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PurchasePayment.updated_at"`)}
	}
	if _, ok := ppc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "PurchasePayment.rider_id"`)}
	}
	if _, ok := ppc.mutation.CommodityID(); !ok {
		return &ValidationError{Name: "commodity_id", err: errors.New(`ent: missing required field "PurchasePayment.commodity_id"`)}
	}
	if _, ok := ppc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "PurchasePayment.order_id"`)}
	}
	if _, ok := ppc.mutation.OutTradeNo(); !ok {
		return &ValidationError{Name: "out_trade_no", err: errors.New(`ent: missing required field "PurchasePayment.out_trade_no"`)}
	}
	if _, ok := ppc.mutation.Payway(); !ok {
		return &ValidationError{Name: "payway", err: errors.New(`ent: missing required field "PurchasePayment.payway"`)}
	}
	if v, ok := ppc.mutation.Payway(); ok {
		if err := purchasepayment.PaywayValidator(v); err != nil {
			return &ValidationError{Name: "payway", err: fmt.Errorf(`ent: validator failed for field "PurchasePayment.payway": %w`, err)}
		}
	}
	if _, ok := ppc.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "PurchasePayment.index"`)}
	}
	if _, ok := ppc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "PurchasePayment.total"`)}
	}
	if _, ok := ppc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PurchasePayment.amount"`)}
	}
	if _, ok := ppc.mutation.Forfeit(); !ok {
		return &ValidationError{Name: "forfeit", err: errors.New(`ent: missing required field "PurchasePayment.forfeit"`)}
	}
	if _, ok := ppc.mutation.PaidDate(); !ok {
		return &ValidationError{Name: "paid_date", err: errors.New(`ent: missing required field "PurchasePayment.paid_date"`)}
	}
	if len(ppc.mutation.RiderIDs()) == 0 {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "PurchasePayment.rider"`)}
	}
	if len(ppc.mutation.CommodityIDs()) == 0 {
		return &ValidationError{Name: "commodity", err: errors.New(`ent: missing required edge "PurchasePayment.commodity"`)}
	}
	if len(ppc.mutation.OrderIDs()) == 0 {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "PurchasePayment.order"`)}
	}
	return nil
}

func (ppc *PurchasePaymentCreate) sqlSave(ctx context.Context) (*PurchasePayment, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PurchasePaymentCreate) createSpec() (*PurchasePayment, *sqlgraph.CreateSpec) {
	var (
		_node = &PurchasePayment{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(purchasepayment.Table, sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ppc.conflict
	if value, ok := ppc.mutation.CreatedAt(); ok {
		_spec.SetField(purchasepayment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ppc.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasepayment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ppc.mutation.DeletedAt(); ok {
		_spec.SetField(purchasepayment.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ppc.mutation.Creator(); ok {
		_spec.SetField(purchasepayment.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ppc.mutation.LastModifier(); ok {
		_spec.SetField(purchasepayment.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ppc.mutation.Remark(); ok {
		_spec.SetField(purchasepayment.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ppc.mutation.OutTradeNo(); ok {
		_spec.SetField(purchasepayment.FieldOutTradeNo, field.TypeString, value)
		_node.OutTradeNo = value
	}
	if value, ok := ppc.mutation.Payway(); ok {
		_spec.SetField(purchasepayment.FieldPayway, field.TypeEnum, value)
		_node.Payway = value
	}
	if value, ok := ppc.mutation.Index(); ok {
		_spec.SetField(purchasepayment.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if value, ok := ppc.mutation.Total(); ok {
		_spec.SetField(purchasepayment.FieldTotal, field.TypeFloat64, value)
		_node.Total = value
	}
	if value, ok := ppc.mutation.Amount(); ok {
		_spec.SetField(purchasepayment.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := ppc.mutation.Forfeit(); ok {
		_spec.SetField(purchasepayment.FieldForfeit, field.TypeFloat64, value)
		_node.Forfeit = value
	}
	if value, ok := ppc.mutation.PaidDate(); ok {
		_spec.SetField(purchasepayment.FieldPaidDate, field.TypeTime, value)
		_node.PaidDate = value
	}
	if value, ok := ppc.mutation.TradeNo(); ok {
		_spec.SetField(purchasepayment.FieldTradeNo, field.TypeString, value)
		_node.TradeNo = value
	}
	if nodes := ppc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.RiderTable,
			Columns: []string{purchasepayment.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.CommodityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.CommodityTable,
			Columns: []string{purchasepayment.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasecommodity.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommodityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchasepayment.OrderTable,
			Columns: []string{purchasepayment.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PurchasePayment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PurchasePaymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ppc *PurchasePaymentCreate) OnConflict(opts ...sql.ConflictOption) *PurchasePaymentUpsertOne {
	ppc.conflict = opts
	return &PurchasePaymentUpsertOne{
		create: ppc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PurchasePayment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppc *PurchasePaymentCreate) OnConflictColumns(columns ...string) *PurchasePaymentUpsertOne {
	ppc.conflict = append(ppc.conflict, sql.ConflictColumns(columns...))
	return &PurchasePaymentUpsertOne{
		create: ppc,
	}
}

type (
	// PurchasePaymentUpsertOne is the builder for "upsert"-ing
	//  one PurchasePayment node.
	PurchasePaymentUpsertOne struct {
		create *PurchasePaymentCreate
	}

	// PurchasePaymentUpsert is the "OnConflict" setter.
	PurchasePaymentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchasePaymentUpsert) SetUpdatedAt(v time.Time) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateUpdatedAt() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchasePaymentUpsert) SetDeletedAt(v time.Time) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateDeletedAt() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchasePaymentUpsert) ClearDeletedAt() *PurchasePaymentUpsert {
	u.SetNull(purchasepayment.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchasePaymentUpsert) SetLastModifier(v *model.Modifier) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateLastModifier() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchasePaymentUpsert) ClearLastModifier() *PurchasePaymentUpsert {
	u.SetNull(purchasepayment.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PurchasePaymentUpsert) SetRemark(v string) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateRemark() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchasePaymentUpsert) ClearRemark() *PurchasePaymentUpsert {
	u.SetNull(purchasepayment.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *PurchasePaymentUpsert) SetRiderID(v uint64) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateRiderID() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldRiderID)
	return u
}

// SetCommodityID sets the "commodity_id" field.
func (u *PurchasePaymentUpsert) SetCommodityID(v uint64) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldCommodityID, v)
	return u
}

// UpdateCommodityID sets the "commodity_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateCommodityID() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldCommodityID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PurchasePaymentUpsert) SetOrderID(v uint64) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateOrderID() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldOrderID)
	return u
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *PurchasePaymentUpsert) SetOutTradeNo(v string) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldOutTradeNo, v)
	return u
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateOutTradeNo() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldOutTradeNo)
	return u
}

// SetPayway sets the "payway" field.
func (u *PurchasePaymentUpsert) SetPayway(v purchasepayment.Payway) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldPayway, v)
	return u
}

// UpdatePayway sets the "payway" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdatePayway() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldPayway)
	return u
}

// SetIndex sets the "index" field.
func (u *PurchasePaymentUpsert) SetIndex(v int) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateIndex() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *PurchasePaymentUpsert) AddIndex(v int) *PurchasePaymentUpsert {
	u.Add(purchasepayment.FieldIndex, v)
	return u
}

// SetTotal sets the "total" field.
func (u *PurchasePaymentUpsert) SetTotal(v float64) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateTotal() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldTotal)
	return u
}

// AddTotal adds v to the "total" field.
func (u *PurchasePaymentUpsert) AddTotal(v float64) *PurchasePaymentUpsert {
	u.Add(purchasepayment.FieldTotal, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *PurchasePaymentUpsert) SetAmount(v float64) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateAmount() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *PurchasePaymentUpsert) AddAmount(v float64) *PurchasePaymentUpsert {
	u.Add(purchasepayment.FieldAmount, v)
	return u
}

// SetForfeit sets the "forfeit" field.
func (u *PurchasePaymentUpsert) SetForfeit(v float64) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldForfeit, v)
	return u
}

// UpdateForfeit sets the "forfeit" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateForfeit() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldForfeit)
	return u
}

// AddForfeit adds v to the "forfeit" field.
func (u *PurchasePaymentUpsert) AddForfeit(v float64) *PurchasePaymentUpsert {
	u.Add(purchasepayment.FieldForfeit, v)
	return u
}

// SetPaidDate sets the "paid_date" field.
func (u *PurchasePaymentUpsert) SetPaidDate(v time.Time) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldPaidDate, v)
	return u
}

// UpdatePaidDate sets the "paid_date" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdatePaidDate() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldPaidDate)
	return u
}

// SetTradeNo sets the "trade_no" field.
func (u *PurchasePaymentUpsert) SetTradeNo(v string) *PurchasePaymentUpsert {
	u.Set(purchasepayment.FieldTradeNo, v)
	return u
}

// UpdateTradeNo sets the "trade_no" field to the value that was provided on create.
func (u *PurchasePaymentUpsert) UpdateTradeNo() *PurchasePaymentUpsert {
	u.SetExcluded(purchasepayment.FieldTradeNo)
	return u
}

// ClearTradeNo clears the value of the "trade_no" field.
func (u *PurchasePaymentUpsert) ClearTradeNo() *PurchasePaymentUpsert {
	u.SetNull(purchasepayment.FieldTradeNo)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PurchasePayment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PurchasePaymentUpsertOne) UpdateNewValues() *PurchasePaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(purchasepayment.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(purchasepayment.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PurchasePayment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PurchasePaymentUpsertOne) Ignore() *PurchasePaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PurchasePaymentUpsertOne) DoNothing() *PurchasePaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PurchasePaymentCreate.OnConflict
// documentation for more info.
func (u *PurchasePaymentUpsertOne) Update(set func(*PurchasePaymentUpsert)) *PurchasePaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PurchasePaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchasePaymentUpsertOne) SetUpdatedAt(v time.Time) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateUpdatedAt() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchasePaymentUpsertOne) SetDeletedAt(v time.Time) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateDeletedAt() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchasePaymentUpsertOne) ClearDeletedAt() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchasePaymentUpsertOne) SetLastModifier(v *model.Modifier) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateLastModifier() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchasePaymentUpsertOne) ClearLastModifier() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PurchasePaymentUpsertOne) SetRemark(v string) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateRemark() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchasePaymentUpsertOne) ClearRemark() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PurchasePaymentUpsertOne) SetRiderID(v uint64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateRiderID() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateRiderID()
	})
}

// SetCommodityID sets the "commodity_id" field.
func (u *PurchasePaymentUpsertOne) SetCommodityID(v uint64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetCommodityID(v)
	})
}

// UpdateCommodityID sets the "commodity_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateCommodityID() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateCommodityID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PurchasePaymentUpsertOne) SetOrderID(v uint64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateOrderID() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateOrderID()
	})
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *PurchasePaymentUpsertOne) SetOutTradeNo(v string) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetOutTradeNo(v)
	})
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateOutTradeNo() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateOutTradeNo()
	})
}

// SetPayway sets the "payway" field.
func (u *PurchasePaymentUpsertOne) SetPayway(v purchasepayment.Payway) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetPayway(v)
	})
}

// UpdatePayway sets the "payway" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdatePayway() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdatePayway()
	})
}

// SetIndex sets the "index" field.
func (u *PurchasePaymentUpsertOne) SetIndex(v int) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *PurchasePaymentUpsertOne) AddIndex(v int) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateIndex() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateIndex()
	})
}

// SetTotal sets the "total" field.
func (u *PurchasePaymentUpsertOne) SetTotal(v float64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *PurchasePaymentUpsertOne) AddTotal(v float64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateTotal() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateTotal()
	})
}

// SetAmount sets the "amount" field.
func (u *PurchasePaymentUpsertOne) SetAmount(v float64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PurchasePaymentUpsertOne) AddAmount(v float64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateAmount() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateAmount()
	})
}

// SetForfeit sets the "forfeit" field.
func (u *PurchasePaymentUpsertOne) SetForfeit(v float64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetForfeit(v)
	})
}

// AddForfeit adds v to the "forfeit" field.
func (u *PurchasePaymentUpsertOne) AddForfeit(v float64) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.AddForfeit(v)
	})
}

// UpdateForfeit sets the "forfeit" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateForfeit() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateForfeit()
	})
}

// SetPaidDate sets the "paid_date" field.
func (u *PurchasePaymentUpsertOne) SetPaidDate(v time.Time) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetPaidDate(v)
	})
}

// UpdatePaidDate sets the "paid_date" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdatePaidDate() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdatePaidDate()
	})
}

// SetTradeNo sets the "trade_no" field.
func (u *PurchasePaymentUpsertOne) SetTradeNo(v string) *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetTradeNo(v)
	})
}

// UpdateTradeNo sets the "trade_no" field to the value that was provided on create.
func (u *PurchasePaymentUpsertOne) UpdateTradeNo() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateTradeNo()
	})
}

// ClearTradeNo clears the value of the "trade_no" field.
func (u *PurchasePaymentUpsertOne) ClearTradeNo() *PurchasePaymentUpsertOne {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.ClearTradeNo()
	})
}

// Exec executes the query.
func (u *PurchasePaymentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PurchasePaymentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PurchasePaymentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PurchasePaymentUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PurchasePaymentUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PurchasePaymentCreateBulk is the builder for creating many PurchasePayment entities in bulk.
type PurchasePaymentCreateBulk struct {
	config
	err      error
	builders []*PurchasePaymentCreate
	conflict []sql.ConflictOption
}

// Save creates the PurchasePayment entities in the database.
func (ppcb *PurchasePaymentCreateBulk) Save(ctx context.Context) ([]*PurchasePayment, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PurchasePayment, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PurchasePaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ppcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PurchasePaymentCreateBulk) SaveX(ctx context.Context) []*PurchasePayment {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PurchasePaymentCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PurchasePaymentCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PurchasePayment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PurchasePaymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ppcb *PurchasePaymentCreateBulk) OnConflict(opts ...sql.ConflictOption) *PurchasePaymentUpsertBulk {
	ppcb.conflict = opts
	return &PurchasePaymentUpsertBulk{
		create: ppcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PurchasePayment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppcb *PurchasePaymentCreateBulk) OnConflictColumns(columns ...string) *PurchasePaymentUpsertBulk {
	ppcb.conflict = append(ppcb.conflict, sql.ConflictColumns(columns...))
	return &PurchasePaymentUpsertBulk{
		create: ppcb,
	}
}

// PurchasePaymentUpsertBulk is the builder for "upsert"-ing
// a bulk of PurchasePayment nodes.
type PurchasePaymentUpsertBulk struct {
	create *PurchasePaymentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PurchasePayment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PurchasePaymentUpsertBulk) UpdateNewValues() *PurchasePaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(purchasepayment.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(purchasepayment.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PurchasePayment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PurchasePaymentUpsertBulk) Ignore() *PurchasePaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PurchasePaymentUpsertBulk) DoNothing() *PurchasePaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PurchasePaymentCreateBulk.OnConflict
// documentation for more info.
func (u *PurchasePaymentUpsertBulk) Update(set func(*PurchasePaymentUpsert)) *PurchasePaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PurchasePaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchasePaymentUpsertBulk) SetUpdatedAt(v time.Time) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateUpdatedAt() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchasePaymentUpsertBulk) SetDeletedAt(v time.Time) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateDeletedAt() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchasePaymentUpsertBulk) ClearDeletedAt() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchasePaymentUpsertBulk) SetLastModifier(v *model.Modifier) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateLastModifier() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchasePaymentUpsertBulk) ClearLastModifier() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PurchasePaymentUpsertBulk) SetRemark(v string) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateRemark() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchasePaymentUpsertBulk) ClearRemark() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PurchasePaymentUpsertBulk) SetRiderID(v uint64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateRiderID() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateRiderID()
	})
}

// SetCommodityID sets the "commodity_id" field.
func (u *PurchasePaymentUpsertBulk) SetCommodityID(v uint64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetCommodityID(v)
	})
}

// UpdateCommodityID sets the "commodity_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateCommodityID() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateCommodityID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PurchasePaymentUpsertBulk) SetOrderID(v uint64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateOrderID() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateOrderID()
	})
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *PurchasePaymentUpsertBulk) SetOutTradeNo(v string) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetOutTradeNo(v)
	})
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateOutTradeNo() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateOutTradeNo()
	})
}

// SetPayway sets the "payway" field.
func (u *PurchasePaymentUpsertBulk) SetPayway(v purchasepayment.Payway) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetPayway(v)
	})
}

// UpdatePayway sets the "payway" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdatePayway() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdatePayway()
	})
}

// SetIndex sets the "index" field.
func (u *PurchasePaymentUpsertBulk) SetIndex(v int) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *PurchasePaymentUpsertBulk) AddIndex(v int) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateIndex() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateIndex()
	})
}

// SetTotal sets the "total" field.
func (u *PurchasePaymentUpsertBulk) SetTotal(v float64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *PurchasePaymentUpsertBulk) AddTotal(v float64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateTotal() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateTotal()
	})
}

// SetAmount sets the "amount" field.
func (u *PurchasePaymentUpsertBulk) SetAmount(v float64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PurchasePaymentUpsertBulk) AddAmount(v float64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateAmount() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateAmount()
	})
}

// SetForfeit sets the "forfeit" field.
func (u *PurchasePaymentUpsertBulk) SetForfeit(v float64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetForfeit(v)
	})
}

// AddForfeit adds v to the "forfeit" field.
func (u *PurchasePaymentUpsertBulk) AddForfeit(v float64) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.AddForfeit(v)
	})
}

// UpdateForfeit sets the "forfeit" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateForfeit() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateForfeit()
	})
}

// SetPaidDate sets the "paid_date" field.
func (u *PurchasePaymentUpsertBulk) SetPaidDate(v time.Time) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetPaidDate(v)
	})
}

// UpdatePaidDate sets the "paid_date" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdatePaidDate() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdatePaidDate()
	})
}

// SetTradeNo sets the "trade_no" field.
func (u *PurchasePaymentUpsertBulk) SetTradeNo(v string) *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.SetTradeNo(v)
	})
}

// UpdateTradeNo sets the "trade_no" field to the value that was provided on create.
func (u *PurchasePaymentUpsertBulk) UpdateTradeNo() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.UpdateTradeNo()
	})
}

// ClearTradeNo clears the value of the "trade_no" field.
func (u *PurchasePaymentUpsertBulk) ClearTradeNo() *PurchasePaymentUpsertBulk {
	return u.Update(func(s *PurchasePaymentUpsert) {
		s.ClearTradeNo()
	})
}

// Exec executes the query.
func (u *PurchasePaymentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PurchasePaymentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PurchasePaymentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PurchasePaymentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
