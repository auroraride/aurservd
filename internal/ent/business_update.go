// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// BusinessUpdate is the builder for updating Business entities.
type BusinessUpdate struct {
	config
	hooks     []Hook
	mutation  *BusinessMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BusinessUpdate builder.
func (bu *BusinessUpdate) Where(ps ...predicate.Business) *BusinessUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BusinessUpdate) SetUpdatedAt(t time.Time) *BusinessUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetDeletedAt sets the "deleted_at" field.
func (bu *BusinessUpdate) SetDeletedAt(t time.Time) *BusinessUpdate {
	bu.mutation.SetDeletedAt(t)
	return bu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableDeletedAt(t *time.Time) *BusinessUpdate {
	if t != nil {
		bu.SetDeletedAt(*t)
	}
	return bu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bu *BusinessUpdate) ClearDeletedAt() *BusinessUpdate {
	bu.mutation.ClearDeletedAt()
	return bu
}

// SetLastModifier sets the "last_modifier" field.
func (bu *BusinessUpdate) SetLastModifier(m *model.Modifier) *BusinessUpdate {
	bu.mutation.SetLastModifier(m)
	return bu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bu *BusinessUpdate) ClearLastModifier() *BusinessUpdate {
	bu.mutation.ClearLastModifier()
	return bu
}

// SetRemark sets the "remark" field.
func (bu *BusinessUpdate) SetRemark(s string) *BusinessUpdate {
	bu.mutation.SetRemark(s)
	return bu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableRemark(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetRemark(*s)
	}
	return bu
}

// ClearRemark clears the value of the "remark" field.
func (bu *BusinessUpdate) ClearRemark() *BusinessUpdate {
	bu.mutation.ClearRemark()
	return bu
}

// SetRiderID sets the "rider_id" field.
func (bu *BusinessUpdate) SetRiderID(u uint64) *BusinessUpdate {
	bu.mutation.SetRiderID(u)
	return bu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableRiderID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetRiderID(*u)
	}
	return bu
}

// SetCityID sets the "city_id" field.
func (bu *BusinessUpdate) SetCityID(u uint64) *BusinessUpdate {
	bu.mutation.SetCityID(u)
	return bu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableCityID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetCityID(*u)
	}
	return bu
}

// SetSubscribeID sets the "subscribe_id" field.
func (bu *BusinessUpdate) SetSubscribeID(u uint64) *BusinessUpdate {
	bu.mutation.SetSubscribeID(u)
	return bu
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableSubscribeID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetSubscribeID(*u)
	}
	return bu
}

// SetEmployeeID sets the "employee_id" field.
func (bu *BusinessUpdate) SetEmployeeID(u uint64) *BusinessUpdate {
	bu.mutation.SetEmployeeID(u)
	return bu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableEmployeeID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetEmployeeID(*u)
	}
	return bu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (bu *BusinessUpdate) ClearEmployeeID() *BusinessUpdate {
	bu.mutation.ClearEmployeeID()
	return bu
}

// SetStoreID sets the "store_id" field.
func (bu *BusinessUpdate) SetStoreID(u uint64) *BusinessUpdate {
	bu.mutation.SetStoreID(u)
	return bu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableStoreID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetStoreID(*u)
	}
	return bu
}

// ClearStoreID clears the value of the "store_id" field.
func (bu *BusinessUpdate) ClearStoreID() *BusinessUpdate {
	bu.mutation.ClearStoreID()
	return bu
}

// SetPlanID sets the "plan_id" field.
func (bu *BusinessUpdate) SetPlanID(u uint64) *BusinessUpdate {
	bu.mutation.SetPlanID(u)
	return bu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillablePlanID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetPlanID(*u)
	}
	return bu
}

// ClearPlanID clears the value of the "plan_id" field.
func (bu *BusinessUpdate) ClearPlanID() *BusinessUpdate {
	bu.mutation.ClearPlanID()
	return bu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (bu *BusinessUpdate) SetEnterpriseID(u uint64) *BusinessUpdate {
	bu.mutation.SetEnterpriseID(u)
	return bu
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableEnterpriseID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetEnterpriseID(*u)
	}
	return bu
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (bu *BusinessUpdate) ClearEnterpriseID() *BusinessUpdate {
	bu.mutation.ClearEnterpriseID()
	return bu
}

// SetStationID sets the "station_id" field.
func (bu *BusinessUpdate) SetStationID(u uint64) *BusinessUpdate {
	bu.mutation.SetStationID(u)
	return bu
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableStationID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetStationID(*u)
	}
	return bu
}

// ClearStationID clears the value of the "station_id" field.
func (bu *BusinessUpdate) ClearStationID() *BusinessUpdate {
	bu.mutation.ClearStationID()
	return bu
}

// SetCabinetID sets the "cabinet_id" field.
func (bu *BusinessUpdate) SetCabinetID(u uint64) *BusinessUpdate {
	bu.mutation.SetCabinetID(u)
	return bu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableCabinetID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetCabinetID(*u)
	}
	return bu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (bu *BusinessUpdate) ClearCabinetID() *BusinessUpdate {
	bu.mutation.ClearCabinetID()
	return bu
}

// SetAgentID sets the "agent_id" field.
func (bu *BusinessUpdate) SetAgentID(u uint64) *BusinessUpdate {
	bu.mutation.SetAgentID(u)
	return bu
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableAgentID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetAgentID(*u)
	}
	return bu
}

// ClearAgentID clears the value of the "agent_id" field.
func (bu *BusinessUpdate) ClearAgentID() *BusinessUpdate {
	bu.mutation.ClearAgentID()
	return bu
}

// SetType sets the "type" field.
func (bu *BusinessUpdate) SetType(mt model.BusinessType) *BusinessUpdate {
	bu.mutation.SetType(mt)
	return bu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableType(mt *model.BusinessType) *BusinessUpdate {
	if mt != nil {
		bu.SetType(*mt)
	}
	return bu
}

// SetBinInfo sets the "bin_info" field.
func (bu *BusinessUpdate) SetBinInfo(mi *model.BinInfo) *BusinessUpdate {
	bu.mutation.SetBinInfo(mi)
	return bu
}

// ClearBinInfo clears the value of the "bin_info" field.
func (bu *BusinessUpdate) ClearBinInfo() *BusinessUpdate {
	bu.mutation.ClearBinInfo()
	return bu
}

// SetStockSn sets the "stock_sn" field.
func (bu *BusinessUpdate) SetStockSn(s string) *BusinessUpdate {
	bu.mutation.SetStockSn(s)
	return bu
}

// SetNillableStockSn sets the "stock_sn" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableStockSn(s *string) *BusinessUpdate {
	if s != nil {
		bu.SetStockSn(*s)
	}
	return bu
}

// ClearStockSn clears the value of the "stock_sn" field.
func (bu *BusinessUpdate) ClearStockSn() *BusinessUpdate {
	bu.mutation.ClearStockSn()
	return bu
}

// SetRtoEbikeID sets the "rto_ebike_id" field.
func (bu *BusinessUpdate) SetRtoEbikeID(u uint64) *BusinessUpdate {
	bu.mutation.SetRtoEbikeID(u)
	return bu
}

// SetNillableRtoEbikeID sets the "rto_ebike_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableRtoEbikeID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetRtoEbikeID(*u)
	}
	return bu
}

// ClearRtoEbikeID clears the value of the "rto_ebike_id" field.
func (bu *BusinessUpdate) ClearRtoEbikeID() *BusinessUpdate {
	bu.mutation.ClearRtoEbikeID()
	return bu
}

// SetBatteryID sets the "battery_id" field.
func (bu *BusinessUpdate) SetBatteryID(u uint64) *BusinessUpdate {
	bu.mutation.SetBatteryID(u)
	return bu
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (bu *BusinessUpdate) SetNillableBatteryID(u *uint64) *BusinessUpdate {
	if u != nil {
		bu.SetBatteryID(*u)
	}
	return bu
}

// ClearBatteryID clears the value of the "battery_id" field.
func (bu *BusinessUpdate) ClearBatteryID() *BusinessUpdate {
	bu.mutation.ClearBatteryID()
	return bu
}

// SetRider sets the "rider" edge to the Rider entity.
func (bu *BusinessUpdate) SetRider(r *Rider) *BusinessUpdate {
	return bu.SetRiderID(r.ID)
}

// SetCity sets the "city" edge to the City entity.
func (bu *BusinessUpdate) SetCity(c *City) *BusinessUpdate {
	return bu.SetCityID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (bu *BusinessUpdate) SetSubscribe(s *Subscribe) *BusinessUpdate {
	return bu.SetSubscribeID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (bu *BusinessUpdate) SetEmployee(e *Employee) *BusinessUpdate {
	return bu.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (bu *BusinessUpdate) SetStore(s *Store) *BusinessUpdate {
	return bu.SetStoreID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (bu *BusinessUpdate) SetPlan(p *Plan) *BusinessUpdate {
	return bu.SetPlanID(p.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (bu *BusinessUpdate) SetEnterprise(e *Enterprise) *BusinessUpdate {
	return bu.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (bu *BusinessUpdate) SetStation(e *EnterpriseStation) *BusinessUpdate {
	return bu.SetStationID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (bu *BusinessUpdate) SetCabinet(c *Cabinet) *BusinessUpdate {
	return bu.SetCabinetID(c.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (bu *BusinessUpdate) SetAgent(a *Agent) *BusinessUpdate {
	return bu.SetAgentID(a.ID)
}

// SetRtoEbike sets the "rto_ebike" edge to the Asset entity.
func (bu *BusinessUpdate) SetRtoEbike(a *Asset) *BusinessUpdate {
	return bu.SetRtoEbikeID(a.ID)
}

// SetBattery sets the "battery" edge to the Asset entity.
func (bu *BusinessUpdate) SetBattery(a *Asset) *BusinessUpdate {
	return bu.SetBatteryID(a.ID)
}

// Mutation returns the BusinessMutation object of the builder.
func (bu *BusinessUpdate) Mutation() *BusinessMutation {
	return bu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (bu *BusinessUpdate) ClearRider() *BusinessUpdate {
	bu.mutation.ClearRider()
	return bu
}

// ClearCity clears the "city" edge to the City entity.
func (bu *BusinessUpdate) ClearCity() *BusinessUpdate {
	bu.mutation.ClearCity()
	return bu
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (bu *BusinessUpdate) ClearSubscribe() *BusinessUpdate {
	bu.mutation.ClearSubscribe()
	return bu
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (bu *BusinessUpdate) ClearEmployee() *BusinessUpdate {
	bu.mutation.ClearEmployee()
	return bu
}

// ClearStore clears the "store" edge to the Store entity.
func (bu *BusinessUpdate) ClearStore() *BusinessUpdate {
	bu.mutation.ClearStore()
	return bu
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (bu *BusinessUpdate) ClearPlan() *BusinessUpdate {
	bu.mutation.ClearPlan()
	return bu
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (bu *BusinessUpdate) ClearEnterprise() *BusinessUpdate {
	bu.mutation.ClearEnterprise()
	return bu
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (bu *BusinessUpdate) ClearStation() *BusinessUpdate {
	bu.mutation.ClearStation()
	return bu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (bu *BusinessUpdate) ClearCabinet() *BusinessUpdate {
	bu.mutation.ClearCabinet()
	return bu
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (bu *BusinessUpdate) ClearAgent() *BusinessUpdate {
	bu.mutation.ClearAgent()
	return bu
}

// ClearRtoEbike clears the "rto_ebike" edge to the Asset entity.
func (bu *BusinessUpdate) ClearRtoEbike() *BusinessUpdate {
	bu.mutation.ClearRtoEbike()
	return bu
}

// ClearBattery clears the "battery" edge to the Asset entity.
func (bu *BusinessUpdate) ClearBattery() *BusinessUpdate {
	bu.mutation.ClearBattery()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BusinessUpdate) Save(ctx context.Context) (int, error) {
	if err := bu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BusinessUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BusinessUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BusinessUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BusinessUpdate) defaults() error {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		if business.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized business.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := business.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bu *BusinessUpdate) check() error {
	if bu.mutation.RiderCleared() && len(bu.mutation.RiderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Business.rider"`)
	}
	if bu.mutation.CityCleared() && len(bu.mutation.CityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Business.city"`)
	}
	if bu.mutation.SubscribeCleared() && len(bu.mutation.SubscribeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Business.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bu *BusinessUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BusinessUpdate {
	bu.modifiers = append(bu.modifiers, modifiers...)
	return bu
}

func (bu *BusinessUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeUint64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(business.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.DeletedAt(); ok {
		_spec.SetField(business.FieldDeletedAt, field.TypeTime, value)
	}
	if bu.mutation.DeletedAtCleared() {
		_spec.ClearField(business.FieldDeletedAt, field.TypeTime)
	}
	if bu.mutation.CreatorCleared() {
		_spec.ClearField(business.FieldCreator, field.TypeJSON)
	}
	if value, ok := bu.mutation.LastModifier(); ok {
		_spec.SetField(business.FieldLastModifier, field.TypeJSON, value)
	}
	if bu.mutation.LastModifierCleared() {
		_spec.ClearField(business.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := bu.mutation.Remark(); ok {
		_spec.SetField(business.FieldRemark, field.TypeString, value)
	}
	if bu.mutation.RemarkCleared() {
		_spec.ClearField(business.FieldRemark, field.TypeString)
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.SetField(business.FieldType, field.TypeOther, value)
	}
	if value, ok := bu.mutation.BinInfo(); ok {
		_spec.SetField(business.FieldBinInfo, field.TypeJSON, value)
	}
	if bu.mutation.BinInfoCleared() {
		_spec.ClearField(business.FieldBinInfo, field.TypeJSON)
	}
	if value, ok := bu.mutation.StockSn(); ok {
		_spec.SetField(business.FieldStockSn, field.TypeString, value)
	}
	if bu.mutation.StockSnCleared() {
		_spec.ClearField(business.FieldStockSn, field.TypeString)
	}
	if bu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RiderTable,
			Columns: []string{business.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RiderTable,
			Columns: []string{business.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CityTable,
			Columns: []string{business.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CityTable,
			Columns: []string{business.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.SubscribeTable,
			Columns: []string{business.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.SubscribeTable,
			Columns: []string{business.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EmployeeTable,
			Columns: []string{business.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EmployeeTable,
			Columns: []string{business.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StoreTable,
			Columns: []string{business.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StoreTable,
			Columns: []string{business.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.PlanTable,
			Columns: []string{business.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.PlanTable,
			Columns: []string{business.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EnterpriseTable,
			Columns: []string{business.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EnterpriseTable,
			Columns: []string{business.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StationTable,
			Columns: []string{business.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StationTable,
			Columns: []string{business.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CabinetTable,
			Columns: []string{business.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CabinetTable,
			Columns: []string{business.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.AgentTable,
			Columns: []string{business.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.AgentTable,
			Columns: []string{business.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.RtoEbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RtoEbikeTable,
			Columns: []string{business.RtoEbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RtoEbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RtoEbikeTable,
			Columns: []string{business.RtoEbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.BatteryTable,
			Columns: []string{business.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.BatteryTable,
			Columns: []string{business.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BusinessUpdateOne is the builder for updating a single Business entity.
type BusinessUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BusinessMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BusinessUpdateOne) SetUpdatedAt(t time.Time) *BusinessUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetDeletedAt sets the "deleted_at" field.
func (buo *BusinessUpdateOne) SetDeletedAt(t time.Time) *BusinessUpdateOne {
	buo.mutation.SetDeletedAt(t)
	return buo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableDeletedAt(t *time.Time) *BusinessUpdateOne {
	if t != nil {
		buo.SetDeletedAt(*t)
	}
	return buo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (buo *BusinessUpdateOne) ClearDeletedAt() *BusinessUpdateOne {
	buo.mutation.ClearDeletedAt()
	return buo
}

// SetLastModifier sets the "last_modifier" field.
func (buo *BusinessUpdateOne) SetLastModifier(m *model.Modifier) *BusinessUpdateOne {
	buo.mutation.SetLastModifier(m)
	return buo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (buo *BusinessUpdateOne) ClearLastModifier() *BusinessUpdateOne {
	buo.mutation.ClearLastModifier()
	return buo
}

// SetRemark sets the "remark" field.
func (buo *BusinessUpdateOne) SetRemark(s string) *BusinessUpdateOne {
	buo.mutation.SetRemark(s)
	return buo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableRemark(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetRemark(*s)
	}
	return buo
}

// ClearRemark clears the value of the "remark" field.
func (buo *BusinessUpdateOne) ClearRemark() *BusinessUpdateOne {
	buo.mutation.ClearRemark()
	return buo
}

// SetRiderID sets the "rider_id" field.
func (buo *BusinessUpdateOne) SetRiderID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetRiderID(u)
	return buo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableRiderID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetRiderID(*u)
	}
	return buo
}

// SetCityID sets the "city_id" field.
func (buo *BusinessUpdateOne) SetCityID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetCityID(u)
	return buo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableCityID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetCityID(*u)
	}
	return buo
}

// SetSubscribeID sets the "subscribe_id" field.
func (buo *BusinessUpdateOne) SetSubscribeID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetSubscribeID(u)
	return buo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableSubscribeID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetSubscribeID(*u)
	}
	return buo
}

// SetEmployeeID sets the "employee_id" field.
func (buo *BusinessUpdateOne) SetEmployeeID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetEmployeeID(u)
	return buo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableEmployeeID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetEmployeeID(*u)
	}
	return buo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (buo *BusinessUpdateOne) ClearEmployeeID() *BusinessUpdateOne {
	buo.mutation.ClearEmployeeID()
	return buo
}

// SetStoreID sets the "store_id" field.
func (buo *BusinessUpdateOne) SetStoreID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetStoreID(u)
	return buo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableStoreID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetStoreID(*u)
	}
	return buo
}

// ClearStoreID clears the value of the "store_id" field.
func (buo *BusinessUpdateOne) ClearStoreID() *BusinessUpdateOne {
	buo.mutation.ClearStoreID()
	return buo
}

// SetPlanID sets the "plan_id" field.
func (buo *BusinessUpdateOne) SetPlanID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetPlanID(u)
	return buo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillablePlanID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetPlanID(*u)
	}
	return buo
}

// ClearPlanID clears the value of the "plan_id" field.
func (buo *BusinessUpdateOne) ClearPlanID() *BusinessUpdateOne {
	buo.mutation.ClearPlanID()
	return buo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (buo *BusinessUpdateOne) SetEnterpriseID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetEnterpriseID(u)
	return buo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableEnterpriseID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetEnterpriseID(*u)
	}
	return buo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (buo *BusinessUpdateOne) ClearEnterpriseID() *BusinessUpdateOne {
	buo.mutation.ClearEnterpriseID()
	return buo
}

// SetStationID sets the "station_id" field.
func (buo *BusinessUpdateOne) SetStationID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetStationID(u)
	return buo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableStationID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetStationID(*u)
	}
	return buo
}

// ClearStationID clears the value of the "station_id" field.
func (buo *BusinessUpdateOne) ClearStationID() *BusinessUpdateOne {
	buo.mutation.ClearStationID()
	return buo
}

// SetCabinetID sets the "cabinet_id" field.
func (buo *BusinessUpdateOne) SetCabinetID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetCabinetID(u)
	return buo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableCabinetID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetCabinetID(*u)
	}
	return buo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (buo *BusinessUpdateOne) ClearCabinetID() *BusinessUpdateOne {
	buo.mutation.ClearCabinetID()
	return buo
}

// SetAgentID sets the "agent_id" field.
func (buo *BusinessUpdateOne) SetAgentID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetAgentID(u)
	return buo
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableAgentID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetAgentID(*u)
	}
	return buo
}

// ClearAgentID clears the value of the "agent_id" field.
func (buo *BusinessUpdateOne) ClearAgentID() *BusinessUpdateOne {
	buo.mutation.ClearAgentID()
	return buo
}

// SetType sets the "type" field.
func (buo *BusinessUpdateOne) SetType(mt model.BusinessType) *BusinessUpdateOne {
	buo.mutation.SetType(mt)
	return buo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableType(mt *model.BusinessType) *BusinessUpdateOne {
	if mt != nil {
		buo.SetType(*mt)
	}
	return buo
}

// SetBinInfo sets the "bin_info" field.
func (buo *BusinessUpdateOne) SetBinInfo(mi *model.BinInfo) *BusinessUpdateOne {
	buo.mutation.SetBinInfo(mi)
	return buo
}

// ClearBinInfo clears the value of the "bin_info" field.
func (buo *BusinessUpdateOne) ClearBinInfo() *BusinessUpdateOne {
	buo.mutation.ClearBinInfo()
	return buo
}

// SetStockSn sets the "stock_sn" field.
func (buo *BusinessUpdateOne) SetStockSn(s string) *BusinessUpdateOne {
	buo.mutation.SetStockSn(s)
	return buo
}

// SetNillableStockSn sets the "stock_sn" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableStockSn(s *string) *BusinessUpdateOne {
	if s != nil {
		buo.SetStockSn(*s)
	}
	return buo
}

// ClearStockSn clears the value of the "stock_sn" field.
func (buo *BusinessUpdateOne) ClearStockSn() *BusinessUpdateOne {
	buo.mutation.ClearStockSn()
	return buo
}

// SetRtoEbikeID sets the "rto_ebike_id" field.
func (buo *BusinessUpdateOne) SetRtoEbikeID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetRtoEbikeID(u)
	return buo
}

// SetNillableRtoEbikeID sets the "rto_ebike_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableRtoEbikeID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetRtoEbikeID(*u)
	}
	return buo
}

// ClearRtoEbikeID clears the value of the "rto_ebike_id" field.
func (buo *BusinessUpdateOne) ClearRtoEbikeID() *BusinessUpdateOne {
	buo.mutation.ClearRtoEbikeID()
	return buo
}

// SetBatteryID sets the "battery_id" field.
func (buo *BusinessUpdateOne) SetBatteryID(u uint64) *BusinessUpdateOne {
	buo.mutation.SetBatteryID(u)
	return buo
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (buo *BusinessUpdateOne) SetNillableBatteryID(u *uint64) *BusinessUpdateOne {
	if u != nil {
		buo.SetBatteryID(*u)
	}
	return buo
}

// ClearBatteryID clears the value of the "battery_id" field.
func (buo *BusinessUpdateOne) ClearBatteryID() *BusinessUpdateOne {
	buo.mutation.ClearBatteryID()
	return buo
}

// SetRider sets the "rider" edge to the Rider entity.
func (buo *BusinessUpdateOne) SetRider(r *Rider) *BusinessUpdateOne {
	return buo.SetRiderID(r.ID)
}

// SetCity sets the "city" edge to the City entity.
func (buo *BusinessUpdateOne) SetCity(c *City) *BusinessUpdateOne {
	return buo.SetCityID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (buo *BusinessUpdateOne) SetSubscribe(s *Subscribe) *BusinessUpdateOne {
	return buo.SetSubscribeID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (buo *BusinessUpdateOne) SetEmployee(e *Employee) *BusinessUpdateOne {
	return buo.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (buo *BusinessUpdateOne) SetStore(s *Store) *BusinessUpdateOne {
	return buo.SetStoreID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (buo *BusinessUpdateOne) SetPlan(p *Plan) *BusinessUpdateOne {
	return buo.SetPlanID(p.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (buo *BusinessUpdateOne) SetEnterprise(e *Enterprise) *BusinessUpdateOne {
	return buo.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (buo *BusinessUpdateOne) SetStation(e *EnterpriseStation) *BusinessUpdateOne {
	return buo.SetStationID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (buo *BusinessUpdateOne) SetCabinet(c *Cabinet) *BusinessUpdateOne {
	return buo.SetCabinetID(c.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (buo *BusinessUpdateOne) SetAgent(a *Agent) *BusinessUpdateOne {
	return buo.SetAgentID(a.ID)
}

// SetRtoEbike sets the "rto_ebike" edge to the Asset entity.
func (buo *BusinessUpdateOne) SetRtoEbike(a *Asset) *BusinessUpdateOne {
	return buo.SetRtoEbikeID(a.ID)
}

// SetBattery sets the "battery" edge to the Asset entity.
func (buo *BusinessUpdateOne) SetBattery(a *Asset) *BusinessUpdateOne {
	return buo.SetBatteryID(a.ID)
}

// Mutation returns the BusinessMutation object of the builder.
func (buo *BusinessUpdateOne) Mutation() *BusinessMutation {
	return buo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (buo *BusinessUpdateOne) ClearRider() *BusinessUpdateOne {
	buo.mutation.ClearRider()
	return buo
}

// ClearCity clears the "city" edge to the City entity.
func (buo *BusinessUpdateOne) ClearCity() *BusinessUpdateOne {
	buo.mutation.ClearCity()
	return buo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (buo *BusinessUpdateOne) ClearSubscribe() *BusinessUpdateOne {
	buo.mutation.ClearSubscribe()
	return buo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (buo *BusinessUpdateOne) ClearEmployee() *BusinessUpdateOne {
	buo.mutation.ClearEmployee()
	return buo
}

// ClearStore clears the "store" edge to the Store entity.
func (buo *BusinessUpdateOne) ClearStore() *BusinessUpdateOne {
	buo.mutation.ClearStore()
	return buo
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (buo *BusinessUpdateOne) ClearPlan() *BusinessUpdateOne {
	buo.mutation.ClearPlan()
	return buo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (buo *BusinessUpdateOne) ClearEnterprise() *BusinessUpdateOne {
	buo.mutation.ClearEnterprise()
	return buo
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (buo *BusinessUpdateOne) ClearStation() *BusinessUpdateOne {
	buo.mutation.ClearStation()
	return buo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (buo *BusinessUpdateOne) ClearCabinet() *BusinessUpdateOne {
	buo.mutation.ClearCabinet()
	return buo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (buo *BusinessUpdateOne) ClearAgent() *BusinessUpdateOne {
	buo.mutation.ClearAgent()
	return buo
}

// ClearRtoEbike clears the "rto_ebike" edge to the Asset entity.
func (buo *BusinessUpdateOne) ClearRtoEbike() *BusinessUpdateOne {
	buo.mutation.ClearRtoEbike()
	return buo
}

// ClearBattery clears the "battery" edge to the Asset entity.
func (buo *BusinessUpdateOne) ClearBattery() *BusinessUpdateOne {
	buo.mutation.ClearBattery()
	return buo
}

// Where appends a list predicates to the BusinessUpdate builder.
func (buo *BusinessUpdateOne) Where(ps ...predicate.Business) *BusinessUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BusinessUpdateOne) Select(field string, fields ...string) *BusinessUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Business entity.
func (buo *BusinessUpdateOne) Save(ctx context.Context) (*Business, error) {
	if err := buo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BusinessUpdateOne) SaveX(ctx context.Context) *Business {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BusinessUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BusinessUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BusinessUpdateOne) defaults() error {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		if business.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized business.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := business.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (buo *BusinessUpdateOne) check() error {
	if buo.mutation.RiderCleared() && len(buo.mutation.RiderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Business.rider"`)
	}
	if buo.mutation.CityCleared() && len(buo.mutation.CityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Business.city"`)
	}
	if buo.mutation.SubscribeCleared() && len(buo.mutation.SubscribeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Business.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buo *BusinessUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BusinessUpdateOne {
	buo.modifiers = append(buo.modifiers, modifiers...)
	return buo
}

func (buo *BusinessUpdateOne) sqlSave(ctx context.Context) (_node *Business, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(business.Table, business.Columns, sqlgraph.NewFieldSpec(business.FieldID, field.TypeUint64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Business.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, business.FieldID)
		for _, f := range fields {
			if !business.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != business.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(business.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.DeletedAt(); ok {
		_spec.SetField(business.FieldDeletedAt, field.TypeTime, value)
	}
	if buo.mutation.DeletedAtCleared() {
		_spec.ClearField(business.FieldDeletedAt, field.TypeTime)
	}
	if buo.mutation.CreatorCleared() {
		_spec.ClearField(business.FieldCreator, field.TypeJSON)
	}
	if value, ok := buo.mutation.LastModifier(); ok {
		_spec.SetField(business.FieldLastModifier, field.TypeJSON, value)
	}
	if buo.mutation.LastModifierCleared() {
		_spec.ClearField(business.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := buo.mutation.Remark(); ok {
		_spec.SetField(business.FieldRemark, field.TypeString, value)
	}
	if buo.mutation.RemarkCleared() {
		_spec.ClearField(business.FieldRemark, field.TypeString)
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.SetField(business.FieldType, field.TypeOther, value)
	}
	if value, ok := buo.mutation.BinInfo(); ok {
		_spec.SetField(business.FieldBinInfo, field.TypeJSON, value)
	}
	if buo.mutation.BinInfoCleared() {
		_spec.ClearField(business.FieldBinInfo, field.TypeJSON)
	}
	if value, ok := buo.mutation.StockSn(); ok {
		_spec.SetField(business.FieldStockSn, field.TypeString, value)
	}
	if buo.mutation.StockSnCleared() {
		_spec.ClearField(business.FieldStockSn, field.TypeString)
	}
	if buo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RiderTable,
			Columns: []string{business.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RiderTable,
			Columns: []string{business.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CityTable,
			Columns: []string{business.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CityTable,
			Columns: []string{business.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.SubscribeTable,
			Columns: []string{business.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.SubscribeTable,
			Columns: []string{business.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EmployeeTable,
			Columns: []string{business.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EmployeeTable,
			Columns: []string{business.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StoreTable,
			Columns: []string{business.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StoreTable,
			Columns: []string{business.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.PlanTable,
			Columns: []string{business.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.PlanTable,
			Columns: []string{business.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EnterpriseTable,
			Columns: []string{business.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EnterpriseTable,
			Columns: []string{business.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StationTable,
			Columns: []string{business.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StationTable,
			Columns: []string{business.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CabinetTable,
			Columns: []string{business.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CabinetTable,
			Columns: []string{business.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.AgentTable,
			Columns: []string{business.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.AgentTable,
			Columns: []string{business.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.RtoEbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RtoEbikeTable,
			Columns: []string{business.RtoEbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RtoEbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RtoEbikeTable,
			Columns: []string{business.RtoEbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.BatteryTable,
			Columns: []string{business.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.BatteryTable,
			Columns: []string{business.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(buo.modifiers...)
	_node = &Business{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{business.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
