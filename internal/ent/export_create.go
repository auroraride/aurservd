// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/export"
	"github.com/auroraride/aurservd/internal/ent/manager"
)

// ExportCreate is the builder for creating a Export entity.
type ExportCreate struct {
	config
	mutation *ExportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *ExportCreate) SetCreatedAt(t time.Time) *ExportCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *ExportCreate) SetNillableCreatedAt(t *time.Time) *ExportCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *ExportCreate) SetUpdatedAt(t time.Time) *ExportCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *ExportCreate) SetNillableUpdatedAt(t *time.Time) *ExportCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *ExportCreate) SetDeletedAt(t time.Time) *ExportCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *ExportCreate) SetNillableDeletedAt(t *time.Time) *ExportCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetManagerID sets the "manager_id" field.
func (ec *ExportCreate) SetManagerID(u uint64) *ExportCreate {
	ec.mutation.SetManagerID(u)
	return ec
}

// SetTaxonomy sets the "taxonomy" field.
func (ec *ExportCreate) SetTaxonomy(s string) *ExportCreate {
	ec.mutation.SetTaxonomy(s)
	return ec
}

// SetSn sets the "sn" field.
func (ec *ExportCreate) SetSn(s string) *ExportCreate {
	ec.mutation.SetSn(s)
	return ec
}

// SetStatus sets the "status" field.
func (ec *ExportCreate) SetStatus(u uint8) *ExportCreate {
	ec.mutation.SetStatus(u)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *ExportCreate) SetNillableStatus(u *uint8) *ExportCreate {
	if u != nil {
		ec.SetStatus(*u)
	}
	return ec
}

// SetPath sets the "path" field.
func (ec *ExportCreate) SetPath(s string) *ExportCreate {
	ec.mutation.SetPath(s)
	return ec
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (ec *ExportCreate) SetNillablePath(s *string) *ExportCreate {
	if s != nil {
		ec.SetPath(*s)
	}
	return ec
}

// SetMessage sets the "message" field.
func (ec *ExportCreate) SetMessage(s string) *ExportCreate {
	ec.mutation.SetMessage(s)
	return ec
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (ec *ExportCreate) SetNillableMessage(s *string) *ExportCreate {
	if s != nil {
		ec.SetMessage(*s)
	}
	return ec
}

// SetFinishAt sets the "finish_at" field.
func (ec *ExportCreate) SetFinishAt(t time.Time) *ExportCreate {
	ec.mutation.SetFinishAt(t)
	return ec
}

// SetNillableFinishAt sets the "finish_at" field if the given value is not nil.
func (ec *ExportCreate) SetNillableFinishAt(t *time.Time) *ExportCreate {
	if t != nil {
		ec.SetFinishAt(*t)
	}
	return ec
}

// SetDuration sets the "duration" field.
func (ec *ExportCreate) SetDuration(i int64) *ExportCreate {
	ec.mutation.SetDuration(i)
	return ec
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (ec *ExportCreate) SetNillableDuration(i *int64) *ExportCreate {
	if i != nil {
		ec.SetDuration(*i)
	}
	return ec
}

// SetCondition sets the "condition" field.
func (ec *ExportCreate) SetCondition(jm json.RawMessage) *ExportCreate {
	ec.mutation.SetCondition(jm)
	return ec
}

// SetInfo sets the "info" field.
func (ec *ExportCreate) SetInfo(m map[string]interface{}) *ExportCreate {
	ec.mutation.SetInfo(m)
	return ec
}

// SetRemark sets the "remark" field.
func (ec *ExportCreate) SetRemark(s string) *ExportCreate {
	ec.mutation.SetRemark(s)
	return ec
}

// SetManager sets the "manager" edge to the Manager entity.
func (ec *ExportCreate) SetManager(m *Manager) *ExportCreate {
	return ec.SetManagerID(m.ID)
}

// Mutation returns the ExportMutation object of the builder.
func (ec *ExportCreate) Mutation() *ExportMutation {
	return ec.mutation
}

// Save creates the Export in the database.
func (ec *ExportCreate) Save(ctx context.Context) (*Export, error) {
	ec.defaults()
	return withHooks[*Export, ExportMutation](ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExportCreate) SaveX(ctx context.Context) *Export {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExportCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExportCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExportCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := export.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := export.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := export.DefaultStatus
		ec.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExportCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Export.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Export.updated_at"`)}
	}
	if _, ok := ec.mutation.ManagerID(); !ok {
		return &ValidationError{Name: "manager_id", err: errors.New(`ent: missing required field "Export.manager_id"`)}
	}
	if _, ok := ec.mutation.Taxonomy(); !ok {
		return &ValidationError{Name: "taxonomy", err: errors.New(`ent: missing required field "Export.taxonomy"`)}
	}
	if _, ok := ec.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Export.sn"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Export.status"`)}
	}
	if _, ok := ec.mutation.Condition(); !ok {
		return &ValidationError{Name: "condition", err: errors.New(`ent: missing required field "Export.condition"`)}
	}
	if _, ok := ec.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "Export.remark"`)}
	}
	if _, ok := ec.mutation.ManagerID(); !ok {
		return &ValidationError{Name: "manager", err: errors.New(`ent: missing required edge "Export.manager"`)}
	}
	return nil
}

func (ec *ExportCreate) sqlSave(ctx context.Context) (*Export, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExportCreate) createSpec() (*Export, *sqlgraph.CreateSpec) {
	var (
		_node = &Export{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: export.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: export.FieldID,
			},
		}
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(export.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(export.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(export.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Taxonomy(); ok {
		_spec.SetField(export.FieldTaxonomy, field.TypeString, value)
		_node.Taxonomy = value
	}
	if value, ok := ec.mutation.Sn(); ok {
		_spec.SetField(export.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(export.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Path(); ok {
		_spec.SetField(export.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := ec.mutation.Message(); ok {
		_spec.SetField(export.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := ec.mutation.FinishAt(); ok {
		_spec.SetField(export.FieldFinishAt, field.TypeTime, value)
		_node.FinishAt = value
	}
	if value, ok := ec.mutation.Duration(); ok {
		_spec.SetField(export.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := ec.mutation.Condition(); ok {
		_spec.SetField(export.FieldCondition, field.TypeJSON, value)
		_node.Condition = value
	}
	if value, ok := ec.mutation.Info(); ok {
		_spec.SetField(export.FieldInfo, field.TypeJSON, value)
		_node.Info = value
	}
	if value, ok := ec.mutation.Remark(); ok {
		_spec.SetField(export.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := ec.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   export.ManagerTable,
			Columns: []string{export.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ManagerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Export.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExportUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ec *ExportCreate) OnConflict(opts ...sql.ConflictOption) *ExportUpsertOne {
	ec.conflict = opts
	return &ExportUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Export.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *ExportCreate) OnConflictColumns(columns ...string) *ExportUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &ExportUpsertOne{
		create: ec,
	}
}

type (
	// ExportUpsertOne is the builder for "upsert"-ing
	//  one Export node.
	ExportUpsertOne struct {
		create *ExportCreate
	}

	// ExportUpsert is the "OnConflict" setter.
	ExportUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ExportUpsert) SetUpdatedAt(v time.Time) *ExportUpsert {
	u.Set(export.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExportUpsert) UpdateUpdatedAt() *ExportUpsert {
	u.SetExcluded(export.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExportUpsert) SetDeletedAt(v time.Time) *ExportUpsert {
	u.Set(export.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExportUpsert) UpdateDeletedAt() *ExportUpsert {
	u.SetExcluded(export.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExportUpsert) ClearDeletedAt() *ExportUpsert {
	u.SetNull(export.FieldDeletedAt)
	return u
}

// SetManagerID sets the "manager_id" field.
func (u *ExportUpsert) SetManagerID(v uint64) *ExportUpsert {
	u.Set(export.FieldManagerID, v)
	return u
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *ExportUpsert) UpdateManagerID() *ExportUpsert {
	u.SetExcluded(export.FieldManagerID)
	return u
}

// SetTaxonomy sets the "taxonomy" field.
func (u *ExportUpsert) SetTaxonomy(v string) *ExportUpsert {
	u.Set(export.FieldTaxonomy, v)
	return u
}

// UpdateTaxonomy sets the "taxonomy" field to the value that was provided on create.
func (u *ExportUpsert) UpdateTaxonomy() *ExportUpsert {
	u.SetExcluded(export.FieldTaxonomy)
	return u
}

// SetSn sets the "sn" field.
func (u *ExportUpsert) SetSn(v string) *ExportUpsert {
	u.Set(export.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *ExportUpsert) UpdateSn() *ExportUpsert {
	u.SetExcluded(export.FieldSn)
	return u
}

// SetStatus sets the "status" field.
func (u *ExportUpsert) SetStatus(v uint8) *ExportUpsert {
	u.Set(export.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExportUpsert) UpdateStatus() *ExportUpsert {
	u.SetExcluded(export.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ExportUpsert) AddStatus(v uint8) *ExportUpsert {
	u.Add(export.FieldStatus, v)
	return u
}

// SetPath sets the "path" field.
func (u *ExportUpsert) SetPath(v string) *ExportUpsert {
	u.Set(export.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ExportUpsert) UpdatePath() *ExportUpsert {
	u.SetExcluded(export.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *ExportUpsert) ClearPath() *ExportUpsert {
	u.SetNull(export.FieldPath)
	return u
}

// SetMessage sets the "message" field.
func (u *ExportUpsert) SetMessage(v string) *ExportUpsert {
	u.Set(export.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ExportUpsert) UpdateMessage() *ExportUpsert {
	u.SetExcluded(export.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *ExportUpsert) ClearMessage() *ExportUpsert {
	u.SetNull(export.FieldMessage)
	return u
}

// SetFinishAt sets the "finish_at" field.
func (u *ExportUpsert) SetFinishAt(v time.Time) *ExportUpsert {
	u.Set(export.FieldFinishAt, v)
	return u
}

// UpdateFinishAt sets the "finish_at" field to the value that was provided on create.
func (u *ExportUpsert) UpdateFinishAt() *ExportUpsert {
	u.SetExcluded(export.FieldFinishAt)
	return u
}

// ClearFinishAt clears the value of the "finish_at" field.
func (u *ExportUpsert) ClearFinishAt() *ExportUpsert {
	u.SetNull(export.FieldFinishAt)
	return u
}

// SetDuration sets the "duration" field.
func (u *ExportUpsert) SetDuration(v int64) *ExportUpsert {
	u.Set(export.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ExportUpsert) UpdateDuration() *ExportUpsert {
	u.SetExcluded(export.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *ExportUpsert) AddDuration(v int64) *ExportUpsert {
	u.Add(export.FieldDuration, v)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *ExportUpsert) ClearDuration() *ExportUpsert {
	u.SetNull(export.FieldDuration)
	return u
}

// SetCondition sets the "condition" field.
func (u *ExportUpsert) SetCondition(v json.RawMessage) *ExportUpsert {
	u.Set(export.FieldCondition, v)
	return u
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *ExportUpsert) UpdateCondition() *ExportUpsert {
	u.SetExcluded(export.FieldCondition)
	return u
}

// SetInfo sets the "info" field.
func (u *ExportUpsert) SetInfo(v map[string]interface{}) *ExportUpsert {
	u.Set(export.FieldInfo, v)
	return u
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *ExportUpsert) UpdateInfo() *ExportUpsert {
	u.SetExcluded(export.FieldInfo)
	return u
}

// ClearInfo clears the value of the "info" field.
func (u *ExportUpsert) ClearInfo() *ExportUpsert {
	u.SetNull(export.FieldInfo)
	return u
}

// SetRemark sets the "remark" field.
func (u *ExportUpsert) SetRemark(v string) *ExportUpsert {
	u.Set(export.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExportUpsert) UpdateRemark() *ExportUpsert {
	u.SetExcluded(export.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Export.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExportUpsertOne) UpdateNewValues() *ExportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(export.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Export.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ExportUpsertOne) Ignore() *ExportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExportUpsertOne) DoNothing() *ExportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExportCreate.OnConflict
// documentation for more info.
func (u *ExportUpsertOne) Update(set func(*ExportUpsert)) *ExportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExportUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExportUpsertOne) SetUpdatedAt(v time.Time) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateUpdatedAt() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExportUpsertOne) SetDeletedAt(v time.Time) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateDeletedAt() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExportUpsertOne) ClearDeletedAt() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.ClearDeletedAt()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *ExportUpsertOne) SetManagerID(v uint64) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateManagerID() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateManagerID()
	})
}

// SetTaxonomy sets the "taxonomy" field.
func (u *ExportUpsertOne) SetTaxonomy(v string) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetTaxonomy(v)
	})
}

// UpdateTaxonomy sets the "taxonomy" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateTaxonomy() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateTaxonomy()
	})
}

// SetSn sets the "sn" field.
func (u *ExportUpsertOne) SetSn(v string) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateSn() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateSn()
	})
}

// SetStatus sets the "status" field.
func (u *ExportUpsertOne) SetStatus(v uint8) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ExportUpsertOne) AddStatus(v uint8) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateStatus() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateStatus()
	})
}

// SetPath sets the "path" field.
func (u *ExportUpsertOne) SetPath(v string) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdatePath() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *ExportUpsertOne) ClearPath() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.ClearPath()
	})
}

// SetMessage sets the "message" field.
func (u *ExportUpsertOne) SetMessage(v string) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateMessage() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *ExportUpsertOne) ClearMessage() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.ClearMessage()
	})
}

// SetFinishAt sets the "finish_at" field.
func (u *ExportUpsertOne) SetFinishAt(v time.Time) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetFinishAt(v)
	})
}

// UpdateFinishAt sets the "finish_at" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateFinishAt() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateFinishAt()
	})
}

// ClearFinishAt clears the value of the "finish_at" field.
func (u *ExportUpsertOne) ClearFinishAt() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.ClearFinishAt()
	})
}

// SetDuration sets the "duration" field.
func (u *ExportUpsertOne) SetDuration(v int64) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ExportUpsertOne) AddDuration(v int64) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateDuration() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *ExportUpsertOne) ClearDuration() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.ClearDuration()
	})
}

// SetCondition sets the "condition" field.
func (u *ExportUpsertOne) SetCondition(v json.RawMessage) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateCondition() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateCondition()
	})
}

// SetInfo sets the "info" field.
func (u *ExportUpsertOne) SetInfo(v map[string]interface{}) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateInfo() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateInfo()
	})
}

// ClearInfo clears the value of the "info" field.
func (u *ExportUpsertOne) ClearInfo() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.ClearInfo()
	})
}

// SetRemark sets the "remark" field.
func (u *ExportUpsertOne) SetRemark(v string) *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExportUpsertOne) UpdateRemark() *ExportUpsertOne {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateRemark()
	})
}

// Exec executes the query.
func (u *ExportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExportUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExportUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExportCreateBulk is the builder for creating many Export entities in bulk.
type ExportCreateBulk struct {
	config
	builders []*ExportCreate
	conflict []sql.ConflictOption
}

// Save creates the Export entities in the database.
func (ecb *ExportCreateBulk) Save(ctx context.Context) ([]*Export, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Export, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExportCreateBulk) SaveX(ctx context.Context) []*Export {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExportCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExportCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Export.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExportUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecb *ExportCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExportUpsertBulk {
	ecb.conflict = opts
	return &ExportUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Export.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *ExportCreateBulk) OnConflictColumns(columns ...string) *ExportUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &ExportUpsertBulk{
		create: ecb,
	}
}

// ExportUpsertBulk is the builder for "upsert"-ing
// a bulk of Export nodes.
type ExportUpsertBulk struct {
	create *ExportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Export.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ExportUpsertBulk) UpdateNewValues() *ExportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(export.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Export.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ExportUpsertBulk) Ignore() *ExportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExportUpsertBulk) DoNothing() *ExportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExportCreateBulk.OnConflict
// documentation for more info.
func (u *ExportUpsertBulk) Update(set func(*ExportUpsert)) *ExportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExportUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExportUpsertBulk) SetUpdatedAt(v time.Time) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateUpdatedAt() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExportUpsertBulk) SetDeletedAt(v time.Time) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateDeletedAt() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExportUpsertBulk) ClearDeletedAt() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.ClearDeletedAt()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *ExportUpsertBulk) SetManagerID(v uint64) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateManagerID() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateManagerID()
	})
}

// SetTaxonomy sets the "taxonomy" field.
func (u *ExportUpsertBulk) SetTaxonomy(v string) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetTaxonomy(v)
	})
}

// UpdateTaxonomy sets the "taxonomy" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateTaxonomy() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateTaxonomy()
	})
}

// SetSn sets the "sn" field.
func (u *ExportUpsertBulk) SetSn(v string) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateSn() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateSn()
	})
}

// SetStatus sets the "status" field.
func (u *ExportUpsertBulk) SetStatus(v uint8) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ExportUpsertBulk) AddStatus(v uint8) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateStatus() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateStatus()
	})
}

// SetPath sets the "path" field.
func (u *ExportUpsertBulk) SetPath(v string) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdatePath() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *ExportUpsertBulk) ClearPath() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.ClearPath()
	})
}

// SetMessage sets the "message" field.
func (u *ExportUpsertBulk) SetMessage(v string) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateMessage() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *ExportUpsertBulk) ClearMessage() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.ClearMessage()
	})
}

// SetFinishAt sets the "finish_at" field.
func (u *ExportUpsertBulk) SetFinishAt(v time.Time) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetFinishAt(v)
	})
}

// UpdateFinishAt sets the "finish_at" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateFinishAt() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateFinishAt()
	})
}

// ClearFinishAt clears the value of the "finish_at" field.
func (u *ExportUpsertBulk) ClearFinishAt() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.ClearFinishAt()
	})
}

// SetDuration sets the "duration" field.
func (u *ExportUpsertBulk) SetDuration(v int64) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ExportUpsertBulk) AddDuration(v int64) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateDuration() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *ExportUpsertBulk) ClearDuration() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.ClearDuration()
	})
}

// SetCondition sets the "condition" field.
func (u *ExportUpsertBulk) SetCondition(v json.RawMessage) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateCondition() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateCondition()
	})
}

// SetInfo sets the "info" field.
func (u *ExportUpsertBulk) SetInfo(v map[string]interface{}) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateInfo() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateInfo()
	})
}

// ClearInfo clears the value of the "info" field.
func (u *ExportUpsertBulk) ClearInfo() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.ClearInfo()
	})
}

// SetRemark sets the "remark" field.
func (u *ExportUpsertBulk) SetRemark(v string) *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExportUpsertBulk) UpdateRemark() *ExportUpsertBulk {
	return u.Update(func(s *ExportUpsert) {
		s.UpdateRemark()
	})
}

// Exec executes the query.
func (u *ExportUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
