// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/stocksummary"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// StockSummaryCreate is the builder for creating a StockSummary entity.
type StockSummaryCreate struct {
	config
	mutation *StockSummaryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ssc *StockSummaryCreate) SetEnterpriseID(u uint64) *StockSummaryCreate {
	ssc.mutation.SetEnterpriseID(u)
	return ssc
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableEnterpriseID(u *uint64) *StockSummaryCreate {
	if u != nil {
		ssc.SetEnterpriseID(*u)
	}
	return ssc
}

// SetStationID sets the "station_id" field.
func (ssc *StockSummaryCreate) SetStationID(u uint64) *StockSummaryCreate {
	ssc.mutation.SetStationID(u)
	return ssc
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableStationID(u *uint64) *StockSummaryCreate {
	if u != nil {
		ssc.SetStationID(*u)
	}
	return ssc
}

// SetStoreID sets the "store_id" field.
func (ssc *StockSummaryCreate) SetStoreID(u uint64) *StockSummaryCreate {
	ssc.mutation.SetStoreID(u)
	return ssc
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableStoreID(u *uint64) *StockSummaryCreate {
	if u != nil {
		ssc.SetStoreID(*u)
	}
	return ssc
}

// SetRiderID sets the "rider_id" field.
func (ssc *StockSummaryCreate) SetRiderID(u uint64) *StockSummaryCreate {
	ssc.mutation.SetRiderID(u)
	return ssc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableRiderID(u *uint64) *StockSummaryCreate {
	if u != nil {
		ssc.SetRiderID(*u)
	}
	return ssc
}

// SetCabinetID sets the "cabinet_id" field.
func (ssc *StockSummaryCreate) SetCabinetID(u uint64) *StockSummaryCreate {
	ssc.mutation.SetCabinetID(u)
	return ssc
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableCabinetID(u *uint64) *StockSummaryCreate {
	if u != nil {
		ssc.SetCabinetID(*u)
	}
	return ssc
}

// SetDate sets the "date" field.
func (ssc *StockSummaryCreate) SetDate(s string) *StockSummaryCreate {
	ssc.mutation.SetDate(s)
	return ssc
}

// SetModel sets the "model" field.
func (ssc *StockSummaryCreate) SetModel(s string) *StockSummaryCreate {
	ssc.mutation.SetModel(s)
	return ssc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableModel(s *string) *StockSummaryCreate {
	if s != nil {
		ssc.SetModel(*s)
	}
	return ssc
}

// SetNum sets the "num" field.
func (ssc *StockSummaryCreate) SetNum(i int) *StockSummaryCreate {
	ssc.mutation.SetNum(i)
	return ssc
}

// SetNillableNum sets the "num" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableNum(i *int) *StockSummaryCreate {
	if i != nil {
		ssc.SetNum(*i)
	}
	return ssc
}

// SetTodayNum sets the "today_num" field.
func (ssc *StockSummaryCreate) SetTodayNum(i int) *StockSummaryCreate {
	ssc.mutation.SetTodayNum(i)
	return ssc
}

// SetNillableTodayNum sets the "today_num" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableTodayNum(i *int) *StockSummaryCreate {
	if i != nil {
		ssc.SetTodayNum(*i)
	}
	return ssc
}

// SetOutboundNum sets the "outbound_num" field.
func (ssc *StockSummaryCreate) SetOutboundNum(i int) *StockSummaryCreate {
	ssc.mutation.SetOutboundNum(i)
	return ssc
}

// SetNillableOutboundNum sets the "outbound_num" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableOutboundNum(i *int) *StockSummaryCreate {
	if i != nil {
		ssc.SetOutboundNum(*i)
	}
	return ssc
}

// SetInboundNum sets the "inbound_num" field.
func (ssc *StockSummaryCreate) SetInboundNum(i int) *StockSummaryCreate {
	ssc.mutation.SetInboundNum(i)
	return ssc
}

// SetNillableInboundNum sets the "inbound_num" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableInboundNum(i *int) *StockSummaryCreate {
	if i != nil {
		ssc.SetInboundNum(*i)
	}
	return ssc
}

// SetInCabinetNum sets the "in_cabinet_num" field.
func (ssc *StockSummaryCreate) SetInCabinetNum(i int) *StockSummaryCreate {
	ssc.mutation.SetInCabinetNum(i)
	return ssc
}

// SetNillableInCabinetNum sets the "in_cabinet_num" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableInCabinetNum(i *int) *StockSummaryCreate {
	if i != nil {
		ssc.SetInCabinetNum(*i)
	}
	return ssc
}

// SetInRiderNum sets the "in_rider_num" field.
func (ssc *StockSummaryCreate) SetInRiderNum(i int) *StockSummaryCreate {
	ssc.mutation.SetInRiderNum(i)
	return ssc
}

// SetNillableInRiderNum sets the "in_rider_num" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableInRiderNum(i *int) *StockSummaryCreate {
	if i != nil {
		ssc.SetInRiderNum(*i)
	}
	return ssc
}

// SetMaterial sets the "material" field.
func (ssc *StockSummaryCreate) SetMaterial(s stocksummary.Material) *StockSummaryCreate {
	ssc.mutation.SetMaterial(s)
	return ssc
}

// SetNillableMaterial sets the "material" field if the given value is not nil.
func (ssc *StockSummaryCreate) SetNillableMaterial(s *stocksummary.Material) *StockSummaryCreate {
	if s != nil {
		ssc.SetMaterial(*s)
	}
	return ssc
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ssc *StockSummaryCreate) SetEnterprise(e *Enterprise) *StockSummaryCreate {
	return ssc.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ssc *StockSummaryCreate) SetStation(e *EnterpriseStation) *StockSummaryCreate {
	return ssc.SetStationID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (ssc *StockSummaryCreate) SetStore(s *Store) *StockSummaryCreate {
	return ssc.SetStoreID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ssc *StockSummaryCreate) SetRider(r *Rider) *StockSummaryCreate {
	return ssc.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ssc *StockSummaryCreate) SetCabinet(c *Cabinet) *StockSummaryCreate {
	return ssc.SetCabinetID(c.ID)
}

// Mutation returns the StockSummaryMutation object of the builder.
func (ssc *StockSummaryCreate) Mutation() *StockSummaryMutation {
	return ssc.mutation
}

// Save creates the StockSummary in the database.
func (ssc *StockSummaryCreate) Save(ctx context.Context) (*StockSummary, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *StockSummaryCreate) SaveX(ctx context.Context) *StockSummary {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *StockSummaryCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *StockSummaryCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *StockSummaryCreate) defaults() {
	if _, ok := ssc.mutation.Num(); !ok {
		v := stocksummary.DefaultNum
		ssc.mutation.SetNum(v)
	}
	if _, ok := ssc.mutation.TodayNum(); !ok {
		v := stocksummary.DefaultTodayNum
		ssc.mutation.SetTodayNum(v)
	}
	if _, ok := ssc.mutation.OutboundNum(); !ok {
		v := stocksummary.DefaultOutboundNum
		ssc.mutation.SetOutboundNum(v)
	}
	if _, ok := ssc.mutation.InboundNum(); !ok {
		v := stocksummary.DefaultInboundNum
		ssc.mutation.SetInboundNum(v)
	}
	if _, ok := ssc.mutation.InCabinetNum(); !ok {
		v := stocksummary.DefaultInCabinetNum
		ssc.mutation.SetInCabinetNum(v)
	}
	if _, ok := ssc.mutation.InRiderNum(); !ok {
		v := stocksummary.DefaultInRiderNum
		ssc.mutation.SetInRiderNum(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *StockSummaryCreate) check() error {
	if _, ok := ssc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "StockSummary.date"`)}
	}
	if v, ok := ssc.mutation.Date(); ok {
		if err := stocksummary.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "StockSummary.date": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "StockSummary.num"`)}
	}
	if _, ok := ssc.mutation.TodayNum(); !ok {
		return &ValidationError{Name: "today_num", err: errors.New(`ent: missing required field "StockSummary.today_num"`)}
	}
	if _, ok := ssc.mutation.OutboundNum(); !ok {
		return &ValidationError{Name: "outbound_num", err: errors.New(`ent: missing required field "StockSummary.outbound_num"`)}
	}
	if _, ok := ssc.mutation.InboundNum(); !ok {
		return &ValidationError{Name: "inbound_num", err: errors.New(`ent: missing required field "StockSummary.inbound_num"`)}
	}
	if _, ok := ssc.mutation.InCabinetNum(); !ok {
		return &ValidationError{Name: "in_cabinet_num", err: errors.New(`ent: missing required field "StockSummary.in_cabinet_num"`)}
	}
	if _, ok := ssc.mutation.InRiderNum(); !ok {
		return &ValidationError{Name: "in_rider_num", err: errors.New(`ent: missing required field "StockSummary.in_rider_num"`)}
	}
	if v, ok := ssc.mutation.Material(); ok {
		if err := stocksummary.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "StockSummary.material": %w`, err)}
		}
	}
	return nil
}

func (ssc *StockSummaryCreate) sqlSave(ctx context.Context) (*StockSummary, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *StockSummaryCreate) createSpec() (*StockSummary, *sqlgraph.CreateSpec) {
	var (
		_node = &StockSummary{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(stocksummary.Table, sqlgraph.NewFieldSpec(stocksummary.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ssc.conflict
	if value, ok := ssc.mutation.Date(); ok {
		_spec.SetField(stocksummary.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := ssc.mutation.Model(); ok {
		_spec.SetField(stocksummary.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := ssc.mutation.Num(); ok {
		_spec.SetField(stocksummary.FieldNum, field.TypeInt, value)
		_node.Num = value
	}
	if value, ok := ssc.mutation.TodayNum(); ok {
		_spec.SetField(stocksummary.FieldTodayNum, field.TypeInt, value)
		_node.TodayNum = value
	}
	if value, ok := ssc.mutation.OutboundNum(); ok {
		_spec.SetField(stocksummary.FieldOutboundNum, field.TypeInt, value)
		_node.OutboundNum = value
	}
	if value, ok := ssc.mutation.InboundNum(); ok {
		_spec.SetField(stocksummary.FieldInboundNum, field.TypeInt, value)
		_node.InboundNum = value
	}
	if value, ok := ssc.mutation.InCabinetNum(); ok {
		_spec.SetField(stocksummary.FieldInCabinetNum, field.TypeInt, value)
		_node.InCabinetNum = value
	}
	if value, ok := ssc.mutation.InRiderNum(); ok {
		_spec.SetField(stocksummary.FieldInRiderNum, field.TypeInt, value)
		_node.InRiderNum = value
	}
	if value, ok := ssc.mutation.Material(); ok {
		_spec.SetField(stocksummary.FieldMaterial, field.TypeEnum, value)
		_node.Material = value
	}
	if nodes := ssc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.EnterpriseTable,
			Columns: []string{stocksummary.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StationTable,
			Columns: []string{stocksummary.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StoreTable,
			Columns: []string{stocksummary.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.RiderTable,
			Columns: []string{stocksummary.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.CabinetTable,
			Columns: []string{stocksummary.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StockSummary.Create().
//		SetEnterpriseID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StockSummaryUpsert) {
//			SetEnterpriseID(v+v).
//		}).
//		Exec(ctx)
func (ssc *StockSummaryCreate) OnConflict(opts ...sql.ConflictOption) *StockSummaryUpsertOne {
	ssc.conflict = opts
	return &StockSummaryUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StockSummary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *StockSummaryCreate) OnConflictColumns(columns ...string) *StockSummaryUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &StockSummaryUpsertOne{
		create: ssc,
	}
}

type (
	// StockSummaryUpsertOne is the builder for "upsert"-ing
	//  one StockSummary node.
	StockSummaryUpsertOne struct {
		create *StockSummaryCreate
	}

	// StockSummaryUpsert is the "OnConflict" setter.
	StockSummaryUpsert struct {
		*sql.UpdateSet
	}
)

// SetEnterpriseID sets the "enterprise_id" field.
func (u *StockSummaryUpsert) SetEnterpriseID(v uint64) *StockSummaryUpsert {
	u.Set(stocksummary.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateEnterpriseID() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldEnterpriseID)
	return u
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *StockSummaryUpsert) ClearEnterpriseID() *StockSummaryUpsert {
	u.SetNull(stocksummary.FieldEnterpriseID)
	return u
}

// SetStationID sets the "station_id" field.
func (u *StockSummaryUpsert) SetStationID(v uint64) *StockSummaryUpsert {
	u.Set(stocksummary.FieldStationID, v)
	return u
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateStationID() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldStationID)
	return u
}

// ClearStationID clears the value of the "station_id" field.
func (u *StockSummaryUpsert) ClearStationID() *StockSummaryUpsert {
	u.SetNull(stocksummary.FieldStationID)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *StockSummaryUpsert) SetStoreID(v uint64) *StockSummaryUpsert {
	u.Set(stocksummary.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateStoreID() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StockSummaryUpsert) ClearStoreID() *StockSummaryUpsert {
	u.SetNull(stocksummary.FieldStoreID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *StockSummaryUpsert) SetRiderID(v uint64) *StockSummaryUpsert {
	u.Set(stocksummary.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateRiderID() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *StockSummaryUpsert) ClearRiderID() *StockSummaryUpsert {
	u.SetNull(stocksummary.FieldRiderID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *StockSummaryUpsert) SetCabinetID(v uint64) *StockSummaryUpsert {
	u.Set(stocksummary.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateCabinetID() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *StockSummaryUpsert) ClearCabinetID() *StockSummaryUpsert {
	u.SetNull(stocksummary.FieldCabinetID)
	return u
}

// SetDate sets the "date" field.
func (u *StockSummaryUpsert) SetDate(v string) *StockSummaryUpsert {
	u.Set(stocksummary.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateDate() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldDate)
	return u
}

// SetModel sets the "model" field.
func (u *StockSummaryUpsert) SetModel(v string) *StockSummaryUpsert {
	u.Set(stocksummary.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateModel() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *StockSummaryUpsert) ClearModel() *StockSummaryUpsert {
	u.SetNull(stocksummary.FieldModel)
	return u
}

// SetNum sets the "num" field.
func (u *StockSummaryUpsert) SetNum(v int) *StockSummaryUpsert {
	u.Set(stocksummary.FieldNum, v)
	return u
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateNum() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldNum)
	return u
}

// AddNum adds v to the "num" field.
func (u *StockSummaryUpsert) AddNum(v int) *StockSummaryUpsert {
	u.Add(stocksummary.FieldNum, v)
	return u
}

// SetTodayNum sets the "today_num" field.
func (u *StockSummaryUpsert) SetTodayNum(v int) *StockSummaryUpsert {
	u.Set(stocksummary.FieldTodayNum, v)
	return u
}

// UpdateTodayNum sets the "today_num" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateTodayNum() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldTodayNum)
	return u
}

// AddTodayNum adds v to the "today_num" field.
func (u *StockSummaryUpsert) AddTodayNum(v int) *StockSummaryUpsert {
	u.Add(stocksummary.FieldTodayNum, v)
	return u
}

// SetOutboundNum sets the "outbound_num" field.
func (u *StockSummaryUpsert) SetOutboundNum(v int) *StockSummaryUpsert {
	u.Set(stocksummary.FieldOutboundNum, v)
	return u
}

// UpdateOutboundNum sets the "outbound_num" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateOutboundNum() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldOutboundNum)
	return u
}

// AddOutboundNum adds v to the "outbound_num" field.
func (u *StockSummaryUpsert) AddOutboundNum(v int) *StockSummaryUpsert {
	u.Add(stocksummary.FieldOutboundNum, v)
	return u
}

// SetInboundNum sets the "inbound_num" field.
func (u *StockSummaryUpsert) SetInboundNum(v int) *StockSummaryUpsert {
	u.Set(stocksummary.FieldInboundNum, v)
	return u
}

// UpdateInboundNum sets the "inbound_num" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateInboundNum() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldInboundNum)
	return u
}

// AddInboundNum adds v to the "inbound_num" field.
func (u *StockSummaryUpsert) AddInboundNum(v int) *StockSummaryUpsert {
	u.Add(stocksummary.FieldInboundNum, v)
	return u
}

// SetInCabinetNum sets the "in_cabinet_num" field.
func (u *StockSummaryUpsert) SetInCabinetNum(v int) *StockSummaryUpsert {
	u.Set(stocksummary.FieldInCabinetNum, v)
	return u
}

// UpdateInCabinetNum sets the "in_cabinet_num" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateInCabinetNum() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldInCabinetNum)
	return u
}

// AddInCabinetNum adds v to the "in_cabinet_num" field.
func (u *StockSummaryUpsert) AddInCabinetNum(v int) *StockSummaryUpsert {
	u.Add(stocksummary.FieldInCabinetNum, v)
	return u
}

// SetInRiderNum sets the "in_rider_num" field.
func (u *StockSummaryUpsert) SetInRiderNum(v int) *StockSummaryUpsert {
	u.Set(stocksummary.FieldInRiderNum, v)
	return u
}

// UpdateInRiderNum sets the "in_rider_num" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateInRiderNum() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldInRiderNum)
	return u
}

// AddInRiderNum adds v to the "in_rider_num" field.
func (u *StockSummaryUpsert) AddInRiderNum(v int) *StockSummaryUpsert {
	u.Add(stocksummary.FieldInRiderNum, v)
	return u
}

// SetMaterial sets the "material" field.
func (u *StockSummaryUpsert) SetMaterial(v stocksummary.Material) *StockSummaryUpsert {
	u.Set(stocksummary.FieldMaterial, v)
	return u
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *StockSummaryUpsert) UpdateMaterial() *StockSummaryUpsert {
	u.SetExcluded(stocksummary.FieldMaterial)
	return u
}

// ClearMaterial clears the value of the "material" field.
func (u *StockSummaryUpsert) ClearMaterial() *StockSummaryUpsert {
	u.SetNull(stocksummary.FieldMaterial)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.StockSummary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StockSummaryUpsertOne) UpdateNewValues() *StockSummaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StockSummary.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StockSummaryUpsertOne) Ignore() *StockSummaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StockSummaryUpsertOne) DoNothing() *StockSummaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StockSummaryCreate.OnConflict
// documentation for more info.
func (u *StockSummaryUpsertOne) Update(set func(*StockSummaryUpsert)) *StockSummaryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StockSummaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *StockSummaryUpsertOne) SetEnterpriseID(v uint64) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateEnterpriseID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *StockSummaryUpsertOne) ClearEnterpriseID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetStationID sets the "station_id" field.
func (u *StockSummaryUpsertOne) SetStationID(v uint64) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateStationID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *StockSummaryUpsertOne) ClearStationID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearStationID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *StockSummaryUpsertOne) SetStoreID(v uint64) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateStoreID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StockSummaryUpsertOne) ClearStoreID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearStoreID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *StockSummaryUpsertOne) SetRiderID(v uint64) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateRiderID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *StockSummaryUpsertOne) ClearRiderID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearRiderID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *StockSummaryUpsertOne) SetCabinetID(v uint64) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateCabinetID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *StockSummaryUpsertOne) ClearCabinetID() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearCabinetID()
	})
}

// SetDate sets the "date" field.
func (u *StockSummaryUpsertOne) SetDate(v string) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateDate() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateDate()
	})
}

// SetModel sets the "model" field.
func (u *StockSummaryUpsertOne) SetModel(v string) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateModel() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *StockSummaryUpsertOne) ClearModel() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearModel()
	})
}

// SetNum sets the "num" field.
func (u *StockSummaryUpsertOne) SetNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *StockSummaryUpsertOne) AddNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateNum() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateNum()
	})
}

// SetTodayNum sets the "today_num" field.
func (u *StockSummaryUpsertOne) SetTodayNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetTodayNum(v)
	})
}

// AddTodayNum adds v to the "today_num" field.
func (u *StockSummaryUpsertOne) AddTodayNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddTodayNum(v)
	})
}

// UpdateTodayNum sets the "today_num" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateTodayNum() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateTodayNum()
	})
}

// SetOutboundNum sets the "outbound_num" field.
func (u *StockSummaryUpsertOne) SetOutboundNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetOutboundNum(v)
	})
}

// AddOutboundNum adds v to the "outbound_num" field.
func (u *StockSummaryUpsertOne) AddOutboundNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddOutboundNum(v)
	})
}

// UpdateOutboundNum sets the "outbound_num" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateOutboundNum() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateOutboundNum()
	})
}

// SetInboundNum sets the "inbound_num" field.
func (u *StockSummaryUpsertOne) SetInboundNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetInboundNum(v)
	})
}

// AddInboundNum adds v to the "inbound_num" field.
func (u *StockSummaryUpsertOne) AddInboundNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddInboundNum(v)
	})
}

// UpdateInboundNum sets the "inbound_num" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateInboundNum() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateInboundNum()
	})
}

// SetInCabinetNum sets the "in_cabinet_num" field.
func (u *StockSummaryUpsertOne) SetInCabinetNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetInCabinetNum(v)
	})
}

// AddInCabinetNum adds v to the "in_cabinet_num" field.
func (u *StockSummaryUpsertOne) AddInCabinetNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddInCabinetNum(v)
	})
}

// UpdateInCabinetNum sets the "in_cabinet_num" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateInCabinetNum() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateInCabinetNum()
	})
}

// SetInRiderNum sets the "in_rider_num" field.
func (u *StockSummaryUpsertOne) SetInRiderNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetInRiderNum(v)
	})
}

// AddInRiderNum adds v to the "in_rider_num" field.
func (u *StockSummaryUpsertOne) AddInRiderNum(v int) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddInRiderNum(v)
	})
}

// UpdateInRiderNum sets the "in_rider_num" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateInRiderNum() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateInRiderNum()
	})
}

// SetMaterial sets the "material" field.
func (u *StockSummaryUpsertOne) SetMaterial(v stocksummary.Material) *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetMaterial(v)
	})
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *StockSummaryUpsertOne) UpdateMaterial() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateMaterial()
	})
}

// ClearMaterial clears the value of the "material" field.
func (u *StockSummaryUpsertOne) ClearMaterial() *StockSummaryUpsertOne {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearMaterial()
	})
}

// Exec executes the query.
func (u *StockSummaryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StockSummaryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StockSummaryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StockSummaryUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StockSummaryUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StockSummaryCreateBulk is the builder for creating many StockSummary entities in bulk.
type StockSummaryCreateBulk struct {
	config
	builders []*StockSummaryCreate
	conflict []sql.ConflictOption
}

// Save creates the StockSummary entities in the database.
func (sscb *StockSummaryCreateBulk) Save(ctx context.Context) ([]*StockSummary, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*StockSummary, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StockSummaryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *StockSummaryCreateBulk) SaveX(ctx context.Context) []*StockSummary {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *StockSummaryCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *StockSummaryCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StockSummary.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StockSummaryUpsert) {
//			SetEnterpriseID(v+v).
//		}).
//		Exec(ctx)
func (sscb *StockSummaryCreateBulk) OnConflict(opts ...sql.ConflictOption) *StockSummaryUpsertBulk {
	sscb.conflict = opts
	return &StockSummaryUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StockSummary.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *StockSummaryCreateBulk) OnConflictColumns(columns ...string) *StockSummaryUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &StockSummaryUpsertBulk{
		create: sscb,
	}
}

// StockSummaryUpsertBulk is the builder for "upsert"-ing
// a bulk of StockSummary nodes.
type StockSummaryUpsertBulk struct {
	create *StockSummaryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.StockSummary.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StockSummaryUpsertBulk) UpdateNewValues() *StockSummaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StockSummary.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StockSummaryUpsertBulk) Ignore() *StockSummaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StockSummaryUpsertBulk) DoNothing() *StockSummaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StockSummaryCreateBulk.OnConflict
// documentation for more info.
func (u *StockSummaryUpsertBulk) Update(set func(*StockSummaryUpsert)) *StockSummaryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StockSummaryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *StockSummaryUpsertBulk) SetEnterpriseID(v uint64) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateEnterpriseID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *StockSummaryUpsertBulk) ClearEnterpriseID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetStationID sets the "station_id" field.
func (u *StockSummaryUpsertBulk) SetStationID(v uint64) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateStationID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *StockSummaryUpsertBulk) ClearStationID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearStationID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *StockSummaryUpsertBulk) SetStoreID(v uint64) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateStoreID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StockSummaryUpsertBulk) ClearStoreID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearStoreID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *StockSummaryUpsertBulk) SetRiderID(v uint64) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateRiderID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *StockSummaryUpsertBulk) ClearRiderID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearRiderID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *StockSummaryUpsertBulk) SetCabinetID(v uint64) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateCabinetID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *StockSummaryUpsertBulk) ClearCabinetID() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearCabinetID()
	})
}

// SetDate sets the "date" field.
func (u *StockSummaryUpsertBulk) SetDate(v string) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateDate() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateDate()
	})
}

// SetModel sets the "model" field.
func (u *StockSummaryUpsertBulk) SetModel(v string) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateModel() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *StockSummaryUpsertBulk) ClearModel() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearModel()
	})
}

// SetNum sets the "num" field.
func (u *StockSummaryUpsertBulk) SetNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *StockSummaryUpsertBulk) AddNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateNum() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateNum()
	})
}

// SetTodayNum sets the "today_num" field.
func (u *StockSummaryUpsertBulk) SetTodayNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetTodayNum(v)
	})
}

// AddTodayNum adds v to the "today_num" field.
func (u *StockSummaryUpsertBulk) AddTodayNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddTodayNum(v)
	})
}

// UpdateTodayNum sets the "today_num" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateTodayNum() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateTodayNum()
	})
}

// SetOutboundNum sets the "outbound_num" field.
func (u *StockSummaryUpsertBulk) SetOutboundNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetOutboundNum(v)
	})
}

// AddOutboundNum adds v to the "outbound_num" field.
func (u *StockSummaryUpsertBulk) AddOutboundNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddOutboundNum(v)
	})
}

// UpdateOutboundNum sets the "outbound_num" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateOutboundNum() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateOutboundNum()
	})
}

// SetInboundNum sets the "inbound_num" field.
func (u *StockSummaryUpsertBulk) SetInboundNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetInboundNum(v)
	})
}

// AddInboundNum adds v to the "inbound_num" field.
func (u *StockSummaryUpsertBulk) AddInboundNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddInboundNum(v)
	})
}

// UpdateInboundNum sets the "inbound_num" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateInboundNum() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateInboundNum()
	})
}

// SetInCabinetNum sets the "in_cabinet_num" field.
func (u *StockSummaryUpsertBulk) SetInCabinetNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetInCabinetNum(v)
	})
}

// AddInCabinetNum adds v to the "in_cabinet_num" field.
func (u *StockSummaryUpsertBulk) AddInCabinetNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddInCabinetNum(v)
	})
}

// UpdateInCabinetNum sets the "in_cabinet_num" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateInCabinetNum() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateInCabinetNum()
	})
}

// SetInRiderNum sets the "in_rider_num" field.
func (u *StockSummaryUpsertBulk) SetInRiderNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetInRiderNum(v)
	})
}

// AddInRiderNum adds v to the "in_rider_num" field.
func (u *StockSummaryUpsertBulk) AddInRiderNum(v int) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.AddInRiderNum(v)
	})
}

// UpdateInRiderNum sets the "in_rider_num" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateInRiderNum() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateInRiderNum()
	})
}

// SetMaterial sets the "material" field.
func (u *StockSummaryUpsertBulk) SetMaterial(v stocksummary.Material) *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.SetMaterial(v)
	})
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *StockSummaryUpsertBulk) UpdateMaterial() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.UpdateMaterial()
	})
}

// ClearMaterial clears the value of the "material" field.
func (u *StockSummaryUpsertBulk) ClearMaterial() *StockSummaryUpsertBulk {
	return u.Update(func(s *StockSummaryUpsert) {
		s.ClearMaterial()
	})
}

// Exec executes the query.
func (u *StockSummaryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StockSummaryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StockSummaryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StockSummaryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
