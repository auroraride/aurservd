// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assetexport"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
)

// AssetExportCreate is the builder for creating a AssetExport entity.
type AssetExportCreate struct {
	config
	mutation *AssetExportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (aec *AssetExportCreate) SetCreatedAt(t time.Time) *AssetExportCreate {
	aec.mutation.SetCreatedAt(t)
	return aec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aec *AssetExportCreate) SetNillableCreatedAt(t *time.Time) *AssetExportCreate {
	if t != nil {
		aec.SetCreatedAt(*t)
	}
	return aec
}

// SetUpdatedAt sets the "updated_at" field.
func (aec *AssetExportCreate) SetUpdatedAt(t time.Time) *AssetExportCreate {
	aec.mutation.SetUpdatedAt(t)
	return aec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aec *AssetExportCreate) SetNillableUpdatedAt(t *time.Time) *AssetExportCreate {
	if t != nil {
		aec.SetUpdatedAt(*t)
	}
	return aec
}

// SetDeletedAt sets the "deleted_at" field.
func (aec *AssetExportCreate) SetDeletedAt(t time.Time) *AssetExportCreate {
	aec.mutation.SetDeletedAt(t)
	return aec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aec *AssetExportCreate) SetNillableDeletedAt(t *time.Time) *AssetExportCreate {
	if t != nil {
		aec.SetDeletedAt(*t)
	}
	return aec
}

// SetAssetManagerID sets the "asset_manager_id" field.
func (aec *AssetExportCreate) SetAssetManagerID(u uint64) *AssetExportCreate {
	aec.mutation.SetAssetManagerID(u)
	return aec
}

// SetTaxonomy sets the "taxonomy" field.
func (aec *AssetExportCreate) SetTaxonomy(s string) *AssetExportCreate {
	aec.mutation.SetTaxonomy(s)
	return aec
}

// SetSn sets the "sn" field.
func (aec *AssetExportCreate) SetSn(s string) *AssetExportCreate {
	aec.mutation.SetSn(s)
	return aec
}

// SetStatus sets the "status" field.
func (aec *AssetExportCreate) SetStatus(u uint8) *AssetExportCreate {
	aec.mutation.SetStatus(u)
	return aec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aec *AssetExportCreate) SetNillableStatus(u *uint8) *AssetExportCreate {
	if u != nil {
		aec.SetStatus(*u)
	}
	return aec
}

// SetPath sets the "path" field.
func (aec *AssetExportCreate) SetPath(s string) *AssetExportCreate {
	aec.mutation.SetPath(s)
	return aec
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (aec *AssetExportCreate) SetNillablePath(s *string) *AssetExportCreate {
	if s != nil {
		aec.SetPath(*s)
	}
	return aec
}

// SetMessage sets the "message" field.
func (aec *AssetExportCreate) SetMessage(s string) *AssetExportCreate {
	aec.mutation.SetMessage(s)
	return aec
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (aec *AssetExportCreate) SetNillableMessage(s *string) *AssetExportCreate {
	if s != nil {
		aec.SetMessage(*s)
	}
	return aec
}

// SetFinishAt sets the "finish_at" field.
func (aec *AssetExportCreate) SetFinishAt(t time.Time) *AssetExportCreate {
	aec.mutation.SetFinishAt(t)
	return aec
}

// SetNillableFinishAt sets the "finish_at" field if the given value is not nil.
func (aec *AssetExportCreate) SetNillableFinishAt(t *time.Time) *AssetExportCreate {
	if t != nil {
		aec.SetFinishAt(*t)
	}
	return aec
}

// SetDuration sets the "duration" field.
func (aec *AssetExportCreate) SetDuration(i int64) *AssetExportCreate {
	aec.mutation.SetDuration(i)
	return aec
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (aec *AssetExportCreate) SetNillableDuration(i *int64) *AssetExportCreate {
	if i != nil {
		aec.SetDuration(*i)
	}
	return aec
}

// SetCondition sets the "condition" field.
func (aec *AssetExportCreate) SetCondition(s string) *AssetExportCreate {
	aec.mutation.SetCondition(s)
	return aec
}

// SetInfo sets the "info" field.
func (aec *AssetExportCreate) SetInfo(m map[string]interface{}) *AssetExportCreate {
	aec.mutation.SetInfo(m)
	return aec
}

// SetRemark sets the "remark" field.
func (aec *AssetExportCreate) SetRemark(s string) *AssetExportCreate {
	aec.mutation.SetRemark(s)
	return aec
}

// SetAssetManager sets the "asset_manager" edge to the AssetManager entity.
func (aec *AssetExportCreate) SetAssetManager(a *AssetManager) *AssetExportCreate {
	return aec.SetAssetManagerID(a.ID)
}

// Mutation returns the AssetExportMutation object of the builder.
func (aec *AssetExportCreate) Mutation() *AssetExportMutation {
	return aec.mutation
}

// Save creates the AssetExport in the database.
func (aec *AssetExportCreate) Save(ctx context.Context) (*AssetExport, error) {
	aec.defaults()
	return withHooks(ctx, aec.sqlSave, aec.mutation, aec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aec *AssetExportCreate) SaveX(ctx context.Context) *AssetExport {
	v, err := aec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aec *AssetExportCreate) Exec(ctx context.Context) error {
	_, err := aec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aec *AssetExportCreate) ExecX(ctx context.Context) {
	if err := aec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aec *AssetExportCreate) defaults() {
	if _, ok := aec.mutation.CreatedAt(); !ok {
		v := assetexport.DefaultCreatedAt()
		aec.mutation.SetCreatedAt(v)
	}
	if _, ok := aec.mutation.UpdatedAt(); !ok {
		v := assetexport.DefaultUpdatedAt()
		aec.mutation.SetUpdatedAt(v)
	}
	if _, ok := aec.mutation.Status(); !ok {
		v := assetexport.DefaultStatus
		aec.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aec *AssetExportCreate) check() error {
	if _, ok := aec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetExport.created_at"`)}
	}
	if _, ok := aec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetExport.updated_at"`)}
	}
	if _, ok := aec.mutation.AssetManagerID(); !ok {
		return &ValidationError{Name: "asset_manager_id", err: errors.New(`ent: missing required field "AssetExport.asset_manager_id"`)}
	}
	if _, ok := aec.mutation.Taxonomy(); !ok {
		return &ValidationError{Name: "taxonomy", err: errors.New(`ent: missing required field "AssetExport.taxonomy"`)}
	}
	if _, ok := aec.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "AssetExport.sn"`)}
	}
	if _, ok := aec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AssetExport.status"`)}
	}
	if _, ok := aec.mutation.Condition(); !ok {
		return &ValidationError{Name: "condition", err: errors.New(`ent: missing required field "AssetExport.condition"`)}
	}
	if _, ok := aec.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "AssetExport.remark"`)}
	}
	if len(aec.mutation.AssetManagerIDs()) == 0 {
		return &ValidationError{Name: "asset_manager", err: errors.New(`ent: missing required edge "AssetExport.asset_manager"`)}
	}
	return nil
}

func (aec *AssetExportCreate) sqlSave(ctx context.Context) (*AssetExport, error) {
	if err := aec.check(); err != nil {
		return nil, err
	}
	_node, _spec := aec.createSpec()
	if err := sqlgraph.CreateNode(ctx, aec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	aec.mutation.id = &_node.ID
	aec.mutation.done = true
	return _node, nil
}

func (aec *AssetExportCreate) createSpec() (*AssetExport, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetExport{config: aec.config}
		_spec = sqlgraph.NewCreateSpec(assetexport.Table, sqlgraph.NewFieldSpec(assetexport.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = aec.conflict
	if value, ok := aec.mutation.CreatedAt(); ok {
		_spec.SetField(assetexport.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aec.mutation.UpdatedAt(); ok {
		_spec.SetField(assetexport.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aec.mutation.DeletedAt(); ok {
		_spec.SetField(assetexport.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := aec.mutation.Taxonomy(); ok {
		_spec.SetField(assetexport.FieldTaxonomy, field.TypeString, value)
		_node.Taxonomy = value
	}
	if value, ok := aec.mutation.Sn(); ok {
		_spec.SetField(assetexport.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := aec.mutation.Status(); ok {
		_spec.SetField(assetexport.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := aec.mutation.Path(); ok {
		_spec.SetField(assetexport.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := aec.mutation.Message(); ok {
		_spec.SetField(assetexport.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := aec.mutation.FinishAt(); ok {
		_spec.SetField(assetexport.FieldFinishAt, field.TypeTime, value)
		_node.FinishAt = value
	}
	if value, ok := aec.mutation.Duration(); ok {
		_spec.SetField(assetexport.FieldDuration, field.TypeInt64, value)
		_node.Duration = value
	}
	if value, ok := aec.mutation.Condition(); ok {
		_spec.SetField(assetexport.FieldCondition, field.TypeString, value)
		_node.Condition = value
	}
	if value, ok := aec.mutation.Info(); ok {
		_spec.SetField(assetexport.FieldInfo, field.TypeJSON, value)
		_node.Info = value
	}
	if value, ok := aec.mutation.Remark(); ok {
		_spec.SetField(assetexport.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if nodes := aec.mutation.AssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetexport.AssetManagerTable,
			Columns: []string{assetexport.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetManagerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetExport.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetExportUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aec *AssetExportCreate) OnConflict(opts ...sql.ConflictOption) *AssetExportUpsertOne {
	aec.conflict = opts
	return &AssetExportUpsertOne{
		create: aec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetExport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aec *AssetExportCreate) OnConflictColumns(columns ...string) *AssetExportUpsertOne {
	aec.conflict = append(aec.conflict, sql.ConflictColumns(columns...))
	return &AssetExportUpsertOne{
		create: aec,
	}
}

type (
	// AssetExportUpsertOne is the builder for "upsert"-ing
	//  one AssetExport node.
	AssetExportUpsertOne struct {
		create *AssetExportCreate
	}

	// AssetExportUpsert is the "OnConflict" setter.
	AssetExportUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetExportUpsert) SetUpdatedAt(v time.Time) *AssetExportUpsert {
	u.Set(assetexport.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateUpdatedAt() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetExportUpsert) SetDeletedAt(v time.Time) *AssetExportUpsert {
	u.Set(assetexport.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateDeletedAt() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetExportUpsert) ClearDeletedAt() *AssetExportUpsert {
	u.SetNull(assetexport.FieldDeletedAt)
	return u
}

// SetAssetManagerID sets the "asset_manager_id" field.
func (u *AssetExportUpsert) SetAssetManagerID(v uint64) *AssetExportUpsert {
	u.Set(assetexport.FieldAssetManagerID, v)
	return u
}

// UpdateAssetManagerID sets the "asset_manager_id" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateAssetManagerID() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldAssetManagerID)
	return u
}

// SetTaxonomy sets the "taxonomy" field.
func (u *AssetExportUpsert) SetTaxonomy(v string) *AssetExportUpsert {
	u.Set(assetexport.FieldTaxonomy, v)
	return u
}

// UpdateTaxonomy sets the "taxonomy" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateTaxonomy() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldTaxonomy)
	return u
}

// SetSn sets the "sn" field.
func (u *AssetExportUpsert) SetSn(v string) *AssetExportUpsert {
	u.Set(assetexport.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateSn() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldSn)
	return u
}

// SetStatus sets the "status" field.
func (u *AssetExportUpsert) SetStatus(v uint8) *AssetExportUpsert {
	u.Set(assetexport.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateStatus() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AssetExportUpsert) AddStatus(v uint8) *AssetExportUpsert {
	u.Add(assetexport.FieldStatus, v)
	return u
}

// SetPath sets the "path" field.
func (u *AssetExportUpsert) SetPath(v string) *AssetExportUpsert {
	u.Set(assetexport.FieldPath, v)
	return u
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdatePath() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldPath)
	return u
}

// ClearPath clears the value of the "path" field.
func (u *AssetExportUpsert) ClearPath() *AssetExportUpsert {
	u.SetNull(assetexport.FieldPath)
	return u
}

// SetMessage sets the "message" field.
func (u *AssetExportUpsert) SetMessage(v string) *AssetExportUpsert {
	u.Set(assetexport.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateMessage() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *AssetExportUpsert) ClearMessage() *AssetExportUpsert {
	u.SetNull(assetexport.FieldMessage)
	return u
}

// SetFinishAt sets the "finish_at" field.
func (u *AssetExportUpsert) SetFinishAt(v time.Time) *AssetExportUpsert {
	u.Set(assetexport.FieldFinishAt, v)
	return u
}

// UpdateFinishAt sets the "finish_at" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateFinishAt() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldFinishAt)
	return u
}

// ClearFinishAt clears the value of the "finish_at" field.
func (u *AssetExportUpsert) ClearFinishAt() *AssetExportUpsert {
	u.SetNull(assetexport.FieldFinishAt)
	return u
}

// SetDuration sets the "duration" field.
func (u *AssetExportUpsert) SetDuration(v int64) *AssetExportUpsert {
	u.Set(assetexport.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateDuration() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *AssetExportUpsert) AddDuration(v int64) *AssetExportUpsert {
	u.Add(assetexport.FieldDuration, v)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *AssetExportUpsert) ClearDuration() *AssetExportUpsert {
	u.SetNull(assetexport.FieldDuration)
	return u
}

// SetCondition sets the "condition" field.
func (u *AssetExportUpsert) SetCondition(v string) *AssetExportUpsert {
	u.Set(assetexport.FieldCondition, v)
	return u
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateCondition() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldCondition)
	return u
}

// SetInfo sets the "info" field.
func (u *AssetExportUpsert) SetInfo(v map[string]interface{}) *AssetExportUpsert {
	u.Set(assetexport.FieldInfo, v)
	return u
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateInfo() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldInfo)
	return u
}

// ClearInfo clears the value of the "info" field.
func (u *AssetExportUpsert) ClearInfo() *AssetExportUpsert {
	u.SetNull(assetexport.FieldInfo)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetExportUpsert) SetRemark(v string) *AssetExportUpsert {
	u.Set(assetexport.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetExportUpsert) UpdateRemark() *AssetExportUpsert {
	u.SetExcluded(assetexport.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetExport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetExportUpsertOne) UpdateNewValues() *AssetExportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetexport.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetExport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetExportUpsertOne) Ignore() *AssetExportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetExportUpsertOne) DoNothing() *AssetExportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetExportCreate.OnConflict
// documentation for more info.
func (u *AssetExportUpsertOne) Update(set func(*AssetExportUpsert)) *AssetExportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetExportUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetExportUpsertOne) SetUpdatedAt(v time.Time) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateUpdatedAt() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetExportUpsertOne) SetDeletedAt(v time.Time) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateDeletedAt() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetExportUpsertOne) ClearDeletedAt() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAssetManagerID sets the "asset_manager_id" field.
func (u *AssetExportUpsertOne) SetAssetManagerID(v uint64) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetAssetManagerID(v)
	})
}

// UpdateAssetManagerID sets the "asset_manager_id" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateAssetManagerID() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateAssetManagerID()
	})
}

// SetTaxonomy sets the "taxonomy" field.
func (u *AssetExportUpsertOne) SetTaxonomy(v string) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetTaxonomy(v)
	})
}

// UpdateTaxonomy sets the "taxonomy" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateTaxonomy() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateTaxonomy()
	})
}

// SetSn sets the "sn" field.
func (u *AssetExportUpsertOne) SetSn(v string) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateSn() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateSn()
	})
}

// SetStatus sets the "status" field.
func (u *AssetExportUpsertOne) SetStatus(v uint8) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetExportUpsertOne) AddStatus(v uint8) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateStatus() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateStatus()
	})
}

// SetPath sets the "path" field.
func (u *AssetExportUpsertOne) SetPath(v string) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdatePath() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *AssetExportUpsertOne) ClearPath() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearPath()
	})
}

// SetMessage sets the "message" field.
func (u *AssetExportUpsertOne) SetMessage(v string) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateMessage() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *AssetExportUpsertOne) ClearMessage() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearMessage()
	})
}

// SetFinishAt sets the "finish_at" field.
func (u *AssetExportUpsertOne) SetFinishAt(v time.Time) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetFinishAt(v)
	})
}

// UpdateFinishAt sets the "finish_at" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateFinishAt() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateFinishAt()
	})
}

// ClearFinishAt clears the value of the "finish_at" field.
func (u *AssetExportUpsertOne) ClearFinishAt() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearFinishAt()
	})
}

// SetDuration sets the "duration" field.
func (u *AssetExportUpsertOne) SetDuration(v int64) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *AssetExportUpsertOne) AddDuration(v int64) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateDuration() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *AssetExportUpsertOne) ClearDuration() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearDuration()
	})
}

// SetCondition sets the "condition" field.
func (u *AssetExportUpsertOne) SetCondition(v string) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateCondition() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateCondition()
	})
}

// SetInfo sets the "info" field.
func (u *AssetExportUpsertOne) SetInfo(v map[string]interface{}) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateInfo() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateInfo()
	})
}

// ClearInfo clears the value of the "info" field.
func (u *AssetExportUpsertOne) ClearInfo() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearInfo()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetExportUpsertOne) SetRemark(v string) *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetExportUpsertOne) UpdateRemark() *AssetExportUpsertOne {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateRemark()
	})
}

// Exec executes the query.
func (u *AssetExportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetExportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetExportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetExportUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetExportUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetExportCreateBulk is the builder for creating many AssetExport entities in bulk.
type AssetExportCreateBulk struct {
	config
	err      error
	builders []*AssetExportCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetExport entities in the database.
func (aecb *AssetExportCreateBulk) Save(ctx context.Context) ([]*AssetExport, error) {
	if aecb.err != nil {
		return nil, aecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aecb.builders))
	nodes := make([]*AssetExport, len(aecb.builders))
	mutators := make([]Mutator, len(aecb.builders))
	for i := range aecb.builders {
		func(i int, root context.Context) {
			builder := aecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetExportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aecb *AssetExportCreateBulk) SaveX(ctx context.Context) []*AssetExport {
	v, err := aecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aecb *AssetExportCreateBulk) Exec(ctx context.Context) error {
	_, err := aecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aecb *AssetExportCreateBulk) ExecX(ctx context.Context) {
	if err := aecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetExport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetExportUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aecb *AssetExportCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetExportUpsertBulk {
	aecb.conflict = opts
	return &AssetExportUpsertBulk{
		create: aecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetExport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aecb *AssetExportCreateBulk) OnConflictColumns(columns ...string) *AssetExportUpsertBulk {
	aecb.conflict = append(aecb.conflict, sql.ConflictColumns(columns...))
	return &AssetExportUpsertBulk{
		create: aecb,
	}
}

// AssetExportUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetExport nodes.
type AssetExportUpsertBulk struct {
	create *AssetExportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetExport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetExportUpsertBulk) UpdateNewValues() *AssetExportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetexport.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetExport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetExportUpsertBulk) Ignore() *AssetExportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetExportUpsertBulk) DoNothing() *AssetExportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetExportCreateBulk.OnConflict
// documentation for more info.
func (u *AssetExportUpsertBulk) Update(set func(*AssetExportUpsert)) *AssetExportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetExportUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetExportUpsertBulk) SetUpdatedAt(v time.Time) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateUpdatedAt() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetExportUpsertBulk) SetDeletedAt(v time.Time) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateDeletedAt() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetExportUpsertBulk) ClearDeletedAt() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAssetManagerID sets the "asset_manager_id" field.
func (u *AssetExportUpsertBulk) SetAssetManagerID(v uint64) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetAssetManagerID(v)
	})
}

// UpdateAssetManagerID sets the "asset_manager_id" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateAssetManagerID() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateAssetManagerID()
	})
}

// SetTaxonomy sets the "taxonomy" field.
func (u *AssetExportUpsertBulk) SetTaxonomy(v string) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetTaxonomy(v)
	})
}

// UpdateTaxonomy sets the "taxonomy" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateTaxonomy() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateTaxonomy()
	})
}

// SetSn sets the "sn" field.
func (u *AssetExportUpsertBulk) SetSn(v string) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateSn() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateSn()
	})
}

// SetStatus sets the "status" field.
func (u *AssetExportUpsertBulk) SetStatus(v uint8) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetExportUpsertBulk) AddStatus(v uint8) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateStatus() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateStatus()
	})
}

// SetPath sets the "path" field.
func (u *AssetExportUpsertBulk) SetPath(v string) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetPath(v)
	})
}

// UpdatePath sets the "path" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdatePath() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdatePath()
	})
}

// ClearPath clears the value of the "path" field.
func (u *AssetExportUpsertBulk) ClearPath() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearPath()
	})
}

// SetMessage sets the "message" field.
func (u *AssetExportUpsertBulk) SetMessage(v string) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateMessage() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *AssetExportUpsertBulk) ClearMessage() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearMessage()
	})
}

// SetFinishAt sets the "finish_at" field.
func (u *AssetExportUpsertBulk) SetFinishAt(v time.Time) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetFinishAt(v)
	})
}

// UpdateFinishAt sets the "finish_at" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateFinishAt() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateFinishAt()
	})
}

// ClearFinishAt clears the value of the "finish_at" field.
func (u *AssetExportUpsertBulk) ClearFinishAt() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearFinishAt()
	})
}

// SetDuration sets the "duration" field.
func (u *AssetExportUpsertBulk) SetDuration(v int64) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *AssetExportUpsertBulk) AddDuration(v int64) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateDuration() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *AssetExportUpsertBulk) ClearDuration() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearDuration()
	})
}

// SetCondition sets the "condition" field.
func (u *AssetExportUpsertBulk) SetCondition(v string) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateCondition() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateCondition()
	})
}

// SetInfo sets the "info" field.
func (u *AssetExportUpsertBulk) SetInfo(v map[string]interface{}) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateInfo() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateInfo()
	})
}

// ClearInfo clears the value of the "info" field.
func (u *AssetExportUpsertBulk) ClearInfo() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.ClearInfo()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetExportUpsertBulk) SetRemark(v string) *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetExportUpsertBulk) UpdateRemark() *AssetExportUpsertBulk {
	return u.Update(func(s *AssetExportUpsert) {
		s.UpdateRemark()
	})
}

// Exec executes the query.
func (u *AssetExportUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetExportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetExportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetExportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
