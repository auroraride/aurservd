// Code generated by ent, DO NOT EDIT.

package asset

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldRemark, v))
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldBrandID, v))
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldModelID, v))
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldCityID, v))
}

// MaterialID applies equality check predicate on the "material_id" field. It's identical to MaterialIDEQ.
func MaterialID(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldMaterialID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldName, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldSn, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldStatus, v))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldEnable, v))
}

// LocationsType applies equality check predicate on the "locations_type" field. It's identical to LocationsTypeEQ.
func LocationsType(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldLocationsType, v))
}

// LocationsID applies equality check predicate on the "locations_id" field. It's identical to LocationsIDEQ.
func LocationsID(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldLocationsID, v))
}

// RtoRiderID applies equality check predicate on the "rto_rider_id" field. It's identical to RtoRiderIDEQ.
func RtoRiderID(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldRtoRiderID, v))
}

// InventoryAt applies equality check predicate on the "inventory_at" field. It's identical to InventoryAtEQ.
func InventoryAt(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldInventoryAt, v))
}

// BrandName applies equality check predicate on the "brand_name" field. It's identical to BrandNameEQ.
func BrandName(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldBrandName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContainsFold(FieldRemark, v))
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldBrandID, v))
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldBrandID, v))
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldBrandID, vs...))
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldBrandID, vs...))
}

// BrandIDIsNil applies the IsNil predicate on the "brand_id" field.
func BrandIDIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldBrandID))
}

// BrandIDNotNil applies the NotNil predicate on the "brand_id" field.
func BrandIDNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldBrandID))
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldModelID, v))
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldModelID, v))
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldModelID, vs...))
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldModelID, vs...))
}

// ModelIDIsNil applies the IsNil predicate on the "model_id" field.
func ModelIDIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldModelID))
}

// ModelIDNotNil applies the NotNil predicate on the "model_id" field.
func ModelIDNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldModelID))
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldCityID, v))
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldCityID, v))
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldCityID, vs...))
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldCityID, vs...))
}

// CityIDIsNil applies the IsNil predicate on the "city_id" field.
func CityIDIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldCityID))
}

// CityIDNotNil applies the NotNil predicate on the "city_id" field.
func CityIDNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldCityID))
}

// MaterialIDEQ applies the EQ predicate on the "material_id" field.
func MaterialIDEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldMaterialID, v))
}

// MaterialIDNEQ applies the NEQ predicate on the "material_id" field.
func MaterialIDNEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldMaterialID, v))
}

// MaterialIDIn applies the In predicate on the "material_id" field.
func MaterialIDIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldMaterialID, vs...))
}

// MaterialIDNotIn applies the NotIn predicate on the "material_id" field.
func MaterialIDNotIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldMaterialID, vs...))
}

// MaterialIDIsNil applies the IsNil predicate on the "material_id" field.
func MaterialIDIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldMaterialID))
}

// MaterialIDNotNil applies the NotNil predicate on the "material_id" field.
func MaterialIDNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldMaterialID))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContainsFold(FieldName, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasSuffix(FieldSn, v))
}

// SnIsNil applies the IsNil predicate on the "sn" field.
func SnIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldSn))
}

// SnNotNil applies the NotNil predicate on the "sn" field.
func SnNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldSn))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContainsFold(FieldSn, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldStatus, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldEnable, v))
}

// LocationsTypeEQ applies the EQ predicate on the "locations_type" field.
func LocationsTypeEQ(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldLocationsType, v))
}

// LocationsTypeNEQ applies the NEQ predicate on the "locations_type" field.
func LocationsTypeNEQ(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldLocationsType, v))
}

// LocationsTypeIn applies the In predicate on the "locations_type" field.
func LocationsTypeIn(vs ...uint8) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldLocationsType, vs...))
}

// LocationsTypeNotIn applies the NotIn predicate on the "locations_type" field.
func LocationsTypeNotIn(vs ...uint8) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldLocationsType, vs...))
}

// LocationsTypeGT applies the GT predicate on the "locations_type" field.
func LocationsTypeGT(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldLocationsType, v))
}

// LocationsTypeGTE applies the GTE predicate on the "locations_type" field.
func LocationsTypeGTE(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldLocationsType, v))
}

// LocationsTypeLT applies the LT predicate on the "locations_type" field.
func LocationsTypeLT(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldLocationsType, v))
}

// LocationsTypeLTE applies the LTE predicate on the "locations_type" field.
func LocationsTypeLTE(v uint8) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldLocationsType, v))
}

// LocationsTypeIsNil applies the IsNil predicate on the "locations_type" field.
func LocationsTypeIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldLocationsType))
}

// LocationsTypeNotNil applies the NotNil predicate on the "locations_type" field.
func LocationsTypeNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldLocationsType))
}

// LocationsIDEQ applies the EQ predicate on the "locations_id" field.
func LocationsIDEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldLocationsID, v))
}

// LocationsIDNEQ applies the NEQ predicate on the "locations_id" field.
func LocationsIDNEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldLocationsID, v))
}

// LocationsIDIn applies the In predicate on the "locations_id" field.
func LocationsIDIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldLocationsID, vs...))
}

// LocationsIDNotIn applies the NotIn predicate on the "locations_id" field.
func LocationsIDNotIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldLocationsID, vs...))
}

// LocationsIDIsNil applies the IsNil predicate on the "locations_id" field.
func LocationsIDIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldLocationsID))
}

// LocationsIDNotNil applies the NotNil predicate on the "locations_id" field.
func LocationsIDNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldLocationsID))
}

// RtoRiderIDEQ applies the EQ predicate on the "rto_rider_id" field.
func RtoRiderIDEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldRtoRiderID, v))
}

// RtoRiderIDNEQ applies the NEQ predicate on the "rto_rider_id" field.
func RtoRiderIDNEQ(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldRtoRiderID, v))
}

// RtoRiderIDIn applies the In predicate on the "rto_rider_id" field.
func RtoRiderIDIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldRtoRiderID, vs...))
}

// RtoRiderIDNotIn applies the NotIn predicate on the "rto_rider_id" field.
func RtoRiderIDNotIn(vs ...uint64) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldRtoRiderID, vs...))
}

// RtoRiderIDGT applies the GT predicate on the "rto_rider_id" field.
func RtoRiderIDGT(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldRtoRiderID, v))
}

// RtoRiderIDGTE applies the GTE predicate on the "rto_rider_id" field.
func RtoRiderIDGTE(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldRtoRiderID, v))
}

// RtoRiderIDLT applies the LT predicate on the "rto_rider_id" field.
func RtoRiderIDLT(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldRtoRiderID, v))
}

// RtoRiderIDLTE applies the LTE predicate on the "rto_rider_id" field.
func RtoRiderIDLTE(v uint64) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldRtoRiderID, v))
}

// RtoRiderIDIsNil applies the IsNil predicate on the "rto_rider_id" field.
func RtoRiderIDIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldRtoRiderID))
}

// RtoRiderIDNotNil applies the NotNil predicate on the "rto_rider_id" field.
func RtoRiderIDNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldRtoRiderID))
}

// InventoryAtEQ applies the EQ predicate on the "inventory_at" field.
func InventoryAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldInventoryAt, v))
}

// InventoryAtNEQ applies the NEQ predicate on the "inventory_at" field.
func InventoryAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldInventoryAt, v))
}

// InventoryAtIn applies the In predicate on the "inventory_at" field.
func InventoryAtIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldInventoryAt, vs...))
}

// InventoryAtNotIn applies the NotIn predicate on the "inventory_at" field.
func InventoryAtNotIn(vs ...time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldInventoryAt, vs...))
}

// InventoryAtGT applies the GT predicate on the "inventory_at" field.
func InventoryAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldInventoryAt, v))
}

// InventoryAtGTE applies the GTE predicate on the "inventory_at" field.
func InventoryAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldInventoryAt, v))
}

// InventoryAtLT applies the LT predicate on the "inventory_at" field.
func InventoryAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldInventoryAt, v))
}

// InventoryAtLTE applies the LTE predicate on the "inventory_at" field.
func InventoryAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldInventoryAt, v))
}

// InventoryAtIsNil applies the IsNil predicate on the "inventory_at" field.
func InventoryAtIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldInventoryAt))
}

// InventoryAtNotNil applies the NotNil predicate on the "inventory_at" field.
func InventoryAtNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldInventoryAt))
}

// BrandNameEQ applies the EQ predicate on the "brand_name" field.
func BrandNameEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEQ(FieldBrandName, v))
}

// BrandNameNEQ applies the NEQ predicate on the "brand_name" field.
func BrandNameNEQ(v string) predicate.Asset {
	return predicate.Asset(sql.FieldNEQ(FieldBrandName, v))
}

// BrandNameIn applies the In predicate on the "brand_name" field.
func BrandNameIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldIn(FieldBrandName, vs...))
}

// BrandNameNotIn applies the NotIn predicate on the "brand_name" field.
func BrandNameNotIn(vs ...string) predicate.Asset {
	return predicate.Asset(sql.FieldNotIn(FieldBrandName, vs...))
}

// BrandNameGT applies the GT predicate on the "brand_name" field.
func BrandNameGT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGT(FieldBrandName, v))
}

// BrandNameGTE applies the GTE predicate on the "brand_name" field.
func BrandNameGTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldGTE(FieldBrandName, v))
}

// BrandNameLT applies the LT predicate on the "brand_name" field.
func BrandNameLT(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLT(FieldBrandName, v))
}

// BrandNameLTE applies the LTE predicate on the "brand_name" field.
func BrandNameLTE(v string) predicate.Asset {
	return predicate.Asset(sql.FieldLTE(FieldBrandName, v))
}

// BrandNameContains applies the Contains predicate on the "brand_name" field.
func BrandNameContains(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContains(FieldBrandName, v))
}

// BrandNameHasPrefix applies the HasPrefix predicate on the "brand_name" field.
func BrandNameHasPrefix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasPrefix(FieldBrandName, v))
}

// BrandNameHasSuffix applies the HasSuffix predicate on the "brand_name" field.
func BrandNameHasSuffix(v string) predicate.Asset {
	return predicate.Asset(sql.FieldHasSuffix(FieldBrandName, v))
}

// BrandNameIsNil applies the IsNil predicate on the "brand_name" field.
func BrandNameIsNil() predicate.Asset {
	return predicate.Asset(sql.FieldIsNull(FieldBrandName))
}

// BrandNameNotNil applies the NotNil predicate on the "brand_name" field.
func BrandNameNotNil() predicate.Asset {
	return predicate.Asset(sql.FieldNotNull(FieldBrandName))
}

// BrandNameEqualFold applies the EqualFold predicate on the "brand_name" field.
func BrandNameEqualFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldEqualFold(FieldBrandName, v))
}

// BrandNameContainsFold applies the ContainsFold predicate on the "brand_name" field.
func BrandNameContainsFold(v string) predicate.Asset {
	return predicate.Asset(sql.FieldContainsFold(FieldBrandName, v))
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.EbikeBrand) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModel applies the HasEdge predicate on the "model" edge.
func HasModel() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelWith applies the HasEdge predicate on the "model" edge with a given conditions (other predicates).
func HasModelWith(preds ...predicate.BatteryModel) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newModelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newCityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMaterial applies the HasEdge predicate on the "material" edge.
func HasMaterial() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MaterialTable, MaterialColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMaterialWith applies the HasEdge predicate on the "material" edge with a given conditions (other predicates).
func HasMaterialWith(preds ...predicate.Material) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newMaterialStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasValues applies the HasEdge predicate on the "values" edge.
func HasValues() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ValuesTable, ValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasValuesWith applies the HasEdge predicate on the "values" edge with a given conditions (other predicates).
func HasValuesWith(preds ...predicate.AssetAttributeValues) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newValuesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWarehouse applies the HasEdge predicate on the "warehouse" edge.
func HasWarehouse() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, WarehouseTable, WarehouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWarehouseWith applies the HasEdge predicate on the "warehouse" edge with a given conditions (other predicates).
func HasWarehouseWith(preds ...predicate.Warehouse) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newWarehouseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.EnterpriseStation) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperator applies the HasEdge predicate on the "operator" edge.
func HasOperator() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OperatorTable, OperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperatorWith applies the HasEdge predicate on the "operator" edge with a given conditions (other predicates).
func HasOperatorWith(preds ...predicate.Maintainer) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScrapDetails applies the HasEdge predicate on the "scrap_details" edge.
func HasScrapDetails() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScrapDetailsTable, ScrapDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScrapDetailsWith applies the HasEdge predicate on the "scrap_details" edge with a given conditions (other predicates).
func HasScrapDetailsWith(preds ...predicate.AssetScrapDetails) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newScrapDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransferDetails applies the HasEdge predicate on the "transfer_details" edge.
func HasTransferDetails() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, TransferDetailsTable, TransferDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransferDetailsWith applies the HasEdge predicate on the "transfer_details" edge with a given conditions (other predicates).
func HasTransferDetailsWith(preds ...predicate.AssetTransferDetails) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := newTransferDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Asset) predicate.Asset {
	return predicate.Asset(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Asset) predicate.Asset {
	return predicate.Asset(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Asset) predicate.Asset {
	return predicate.Asset(sql.NotPredicates(p))
}
