// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/plan"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// BrandID holds the value of the "brand_id" field.
	BrandID *uint64 `json:"brand_id,omitempty"`
	// 电池型号
	Model string `json:"model,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// 骑士卡类别 1:单电 2:车加电
	Type uint8 `json:"type,omitempty"`
	// 骑士卡名称
	Name string `json:"name,omitempty"`
	// 有效期开始日期
	Start time.Time `json:"start,omitempty"`
	// 有效期结束日期
	End time.Time `json:"end,omitempty"`
	// 骑士卡价格
	Price float64 `json:"price,omitempty"`
	// 骑士卡天数
	Days uint `json:"days,omitempty"`
	// 提成
	Commission float64 `json:"commission,omitempty"`
	// 原价
	Original float64 `json:"original,omitempty"`
	// 优惠信息
	Desc string `json:"desc,omitempty"`
	// 父级
	ParentID *uint64 `json:"parent_id,omitempty"`
	// 新签减免
	DiscountNewly float64 `json:"discount_newly,omitempty"`
	// 购买须知
	Notes []string `json:"notes,omitempty"`
	// 是否智能柜套餐
	Intelligent bool `json:"intelligent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanQuery when eager-loading is set.
	Edges        PlanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlanEdges holds the relations/edges for other nodes in the graph.
type PlanEdges struct {
	// Brand holds the value of the brand edge.
	Brand *EbikeBrand `json:"brand,omitempty"`
	// Cities holds the value of the cities edge.
	Cities []*City `json:"cities,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Plan `json:"parent,omitempty"`
	// Complexes holds the value of the complexes edge.
	Complexes []*Plan `json:"complexes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) BrandOrErr() (*EbikeBrand, error) {
	if e.loadedTypes[0] {
		if e.Brand == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ebikebrand.Label}
		}
		return e.Brand, nil
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// CitiesOrErr returns the Cities value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) CitiesOrErr() ([]*City, error) {
	if e.loadedTypes[1] {
		return e.Cities, nil
	}
	return nil, &NotLoadedError{edge: "cities"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) ParentOrErr() (*Plan, error) {
	if e.loadedTypes[2] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ComplexesOrErr returns the Complexes value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) ComplexesOrErr() ([]*Plan, error) {
	if e.loadedTypes[3] {
		return e.Complexes, nil
	}
	return nil, &NotLoadedError{edge: "complexes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case plan.FieldCreator, plan.FieldLastModifier, plan.FieldNotes:
			values[i] = new([]byte)
		case plan.FieldEnable, plan.FieldIntelligent:
			values[i] = new(sql.NullBool)
		case plan.FieldPrice, plan.FieldCommission, plan.FieldOriginal, plan.FieldDiscountNewly:
			values[i] = new(sql.NullFloat64)
		case plan.FieldID, plan.FieldBrandID, plan.FieldType, plan.FieldDays, plan.FieldParentID:
			values[i] = new(sql.NullInt64)
		case plan.FieldRemark, plan.FieldModel, plan.FieldName, plan.FieldDesc:
			values[i] = new(sql.NullString)
		case plan.FieldCreatedAt, plan.FieldUpdatedAt, plan.FieldDeletedAt, plan.FieldStart, plan.FieldEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = uint64(value.Int64)
		case plan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case plan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case plan.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pl.DeletedAt = new(time.Time)
				*pl.DeletedAt = value.Time
			}
		case plan.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case plan.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case plan.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pl.Remark = value.String
			}
		case plan.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				pl.BrandID = new(uint64)
				*pl.BrandID = uint64(value.Int64)
			}
		case plan.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				pl.Model = value.String
			}
		case plan.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				pl.Enable = value.Bool
			}
		case plan.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pl.Type = uint8(value.Int64)
			}
		case plan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plan.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				pl.Start = value.Time
			}
		case plan.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				pl.End = value.Time
			}
		case plan.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pl.Price = value.Float64
			}
		case plan.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				pl.Days = uint(value.Int64)
			}
		case plan.FieldCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field commission", values[i])
			} else if value.Valid {
				pl.Commission = value.Float64
			}
		case plan.FieldOriginal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field original", values[i])
			} else if value.Valid {
				pl.Original = value.Float64
			}
		case plan.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				pl.Desc = value.String
			}
		case plan.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				pl.ParentID = new(uint64)
				*pl.ParentID = uint64(value.Int64)
			}
		case plan.FieldDiscountNewly:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field discount_newly", values[i])
			} else if value.Valid {
				pl.DiscountNewly = value.Float64
			}
		case plan.FieldNotes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Notes); err != nil {
					return fmt.Errorf("unmarshal field notes: %w", err)
				}
			}
		case plan.FieldIntelligent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field intelligent", values[i])
			} else if value.Valid {
				pl.Intelligent = value.Bool
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Plan.
// This includes values selected through modifiers, order, etc.
func (pl *Plan) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryBrand queries the "brand" edge of the Plan entity.
func (pl *Plan) QueryBrand() *EbikeBrandQuery {
	return NewPlanClient(pl.config).QueryBrand(pl)
}

// QueryCities queries the "cities" edge of the Plan entity.
func (pl *Plan) QueryCities() *CityQuery {
	return NewPlanClient(pl.config).QueryCities(pl)
}

// QueryParent queries the "parent" edge of the Plan entity.
func (pl *Plan) QueryParent() *PlanQuery {
	return NewPlanClient(pl.config).QueryParent(pl)
}

// QueryComplexes queries the "complexes" edge of the Plan entity.
func (pl *Plan) QueryComplexes() *PlanQuery {
	return NewPlanClient(pl.config).QueryComplexes(pl)
}

// Update returns a builder for updating this Plan.
// Note that you need to call Plan.Unwrap() before calling this method if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return NewPlanClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Plan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pl.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pl.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pl.Remark)
	builder.WriteString(", ")
	if v := pl.BrandID; v != nil {
		builder.WriteString("brand_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(pl.Model)
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", pl.Enable))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pl.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(pl.Start.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(pl.End.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pl.Price))
	builder.WriteString(", ")
	builder.WriteString("days=")
	builder.WriteString(fmt.Sprintf("%v", pl.Days))
	builder.WriteString(", ")
	builder.WriteString("commission=")
	builder.WriteString(fmt.Sprintf("%v", pl.Commission))
	builder.WriteString(", ")
	builder.WriteString("original=")
	builder.WriteString(fmt.Sprintf("%v", pl.Original))
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(pl.Desc)
	builder.WriteString(", ")
	if v := pl.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("discount_newly=")
	builder.WriteString(fmt.Sprintf("%v", pl.DiscountNewly))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(fmt.Sprintf("%v", pl.Notes))
	builder.WriteString(", ")
	builder.WriteString("intelligent=")
	builder.WriteString(fmt.Sprintf("%v", pl.Intelligent))
	builder.WriteByte(')')
	return builder.String()
}

// Plans is a parsable slice of Plan.
type Plans []*Plan
