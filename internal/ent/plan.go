// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/plan"
)

// Plan is the model entity for the Plan schema.
type Plan struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// Enable holds the value of the "enable" field.
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// Name holds the value of the "name" field.
	// 骑士卡名称
	Name string `json:"name,omitempty"`
	// Start holds the value of the "start" field.
	// 有效期开始日期
	Start model.Date `json:"start,omitempty"`
	// End holds the value of the "end" field.
	// 有效期结束日期
	End model.Date `json:"end,omitempty"`
	// Price holds the value of the "price" field.
	// 骑士卡价格
	Price float64 `json:"price,omitempty"`
	// Days holds the value of the "days" field.
	// 骑士卡天数
	Days uint `json:"days,omitempty"`
	// Commission holds the value of the "commission" field.
	// 提成
	Commission float64 `json:"commission,omitempty"`
	// Original holds the value of the "original" field.
	// 原价
	Original float64 `json:"original,omitempty"`
	// Desc holds the value of the "desc" field.
	// 优惠信息
	Desc string `json:"desc,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	// 父级
	ParentID *uint64 `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanQuery when eager-loading is set.
	Edges PlanEdges `json:"edges"`
}

// PlanEdges holds the relations/edges for other nodes in the graph.
type PlanEdges struct {
	// Pms holds the value of the pms edge.
	Pms []*BatteryModel `json:"pms,omitempty"`
	// Cities holds the value of the cities edge.
	Cities []*City `json:"cities,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Plan `json:"parent,omitempty"`
	// Complexes holds the value of the complexes edge.
	Complexes []*Plan `json:"complexes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// PmsOrErr returns the Pms value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) PmsOrErr() ([]*BatteryModel, error) {
	if e.loadedTypes[0] {
		return e.Pms, nil
	}
	return nil, &NotLoadedError{edge: "pms"}
}

// CitiesOrErr returns the Cities value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) CitiesOrErr() ([]*City, error) {
	if e.loadedTypes[1] {
		return e.Cities, nil
	}
	return nil, &NotLoadedError{edge: "cities"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanEdges) ParentOrErr() (*Plan, error) {
	if e.loadedTypes[2] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ComplexesOrErr returns the Complexes value or an error if the edge
// was not loaded in eager-loading.
func (e PlanEdges) ComplexesOrErr() ([]*Plan, error) {
	if e.loadedTypes[3] {
		return e.Complexes, nil
	}
	return nil, &NotLoadedError{edge: "complexes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Plan) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case plan.FieldCreator, plan.FieldLastModifier:
			values[i] = new([]byte)
		case plan.FieldStart, plan.FieldEnd:
			values[i] = new(model.Date)
		case plan.FieldEnable:
			values[i] = new(sql.NullBool)
		case plan.FieldPrice, plan.FieldCommission, plan.FieldOriginal:
			values[i] = new(sql.NullFloat64)
		case plan.FieldID, plan.FieldDays, plan.FieldParentID:
			values[i] = new(sql.NullInt64)
		case plan.FieldRemark, plan.FieldName, plan.FieldDesc:
			values[i] = new(sql.NullString)
		case plan.FieldCreatedAt, plan.FieldUpdatedAt, plan.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Plan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Plan fields.
func (pl *Plan) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case plan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = uint64(value.Int64)
		case plan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case plan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case plan.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pl.DeletedAt = new(time.Time)
				*pl.DeletedAt = value.Time
			}
		case plan.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case plan.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case plan.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pl.Remark = value.String
			}
		case plan.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				pl.Enable = value.Bool
			}
		case plan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case plan.FieldStart:
			if value, ok := values[i].(*model.Date); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value != nil {
				pl.Start = *value
			}
		case plan.FieldEnd:
			if value, ok := values[i].(*model.Date); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value != nil {
				pl.End = *value
			}
		case plan.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pl.Price = value.Float64
			}
		case plan.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				pl.Days = uint(value.Int64)
			}
		case plan.FieldCommission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field commission", values[i])
			} else if value.Valid {
				pl.Commission = value.Float64
			}
		case plan.FieldOriginal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field original", values[i])
			} else if value.Valid {
				pl.Original = value.Float64
			}
		case plan.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				pl.Desc = value.String
			}
		case plan.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				pl.ParentID = new(uint64)
				*pl.ParentID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryPms queries the "pms" edge of the Plan entity.
func (pl *Plan) QueryPms() *BatteryModelQuery {
	return (&PlanClient{config: pl.config}).QueryPms(pl)
}

// QueryCities queries the "cities" edge of the Plan entity.
func (pl *Plan) QueryCities() *CityQuery {
	return (&PlanClient{config: pl.config}).QueryCities(pl)
}

// QueryParent queries the "parent" edge of the Plan entity.
func (pl *Plan) QueryParent() *PlanQuery {
	return (&PlanClient{config: pl.config}).QueryParent(pl)
}

// QueryComplexes queries the "complexes" edge of the Plan entity.
func (pl *Plan) QueryComplexes() *PlanQuery {
	return (&PlanClient{config: pl.config}).QueryComplexes(pl)
}

// Update returns a builder for updating this Plan.
// Note that you need to call Plan.Unwrap() before calling this method if this Plan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Plan) Update() *PlanUpdateOne {
	return (&PlanClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the Plan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Plan) Unwrap() *Plan {
	tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Plan is not a transactional entity")
	}
	pl.config.driver = tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Plan) String() string {
	var builder strings.Builder
	builder.WriteString("Plan(")
	builder.WriteString(fmt.Sprintf("id=%v", pl.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	if v := pl.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", pl.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pl.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(pl.Remark)
	builder.WriteString(", enable=")
	builder.WriteString(fmt.Sprintf("%v", pl.Enable))
	builder.WriteString(", name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", start=")
	builder.WriteString(fmt.Sprintf("%v", pl.Start))
	builder.WriteString(", end=")
	builder.WriteString(fmt.Sprintf("%v", pl.End))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", pl.Price))
	builder.WriteString(", days=")
	builder.WriteString(fmt.Sprintf("%v", pl.Days))
	builder.WriteString(", commission=")
	builder.WriteString(fmt.Sprintf("%v", pl.Commission))
	builder.WriteString(", original=")
	builder.WriteString(fmt.Sprintf("%v", pl.Original))
	builder.WriteString(", desc=")
	builder.WriteString(pl.Desc)
	if v := pl.ParentID; v != nil {
		builder.WriteString(", parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Plans is a parsable slice of Plan.
type Plans []*Plan

func (pl Plans) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
