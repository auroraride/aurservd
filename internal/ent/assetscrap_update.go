// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetscrap"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetScrapUpdate is the builder for updating AssetScrap entities.
type AssetScrapUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetScrapMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetScrapUpdate builder.
func (asu *AssetScrapUpdate) Where(ps ...predicate.AssetScrap) *AssetScrapUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AssetScrapUpdate) SetUpdatedAt(t time.Time) *AssetScrapUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetLastModifier sets the "last_modifier" field.
func (asu *AssetScrapUpdate) SetLastModifier(m *model.Modifier) *AssetScrapUpdate {
	asu.mutation.SetLastModifier(m)
	return asu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (asu *AssetScrapUpdate) ClearLastModifier() *AssetScrapUpdate {
	asu.mutation.ClearLastModifier()
	return asu
}

// SetRemark sets the "remark" field.
func (asu *AssetScrapUpdate) SetRemark(s string) *AssetScrapUpdate {
	asu.mutation.SetRemark(s)
	return asu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableRemark(s *string) *AssetScrapUpdate {
	if s != nil {
		asu.SetRemark(*s)
	}
	return asu
}

// ClearRemark clears the value of the "remark" field.
func (asu *AssetScrapUpdate) ClearRemark() *AssetScrapUpdate {
	asu.mutation.ClearRemark()
	return asu
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (asu *AssetScrapUpdate) SetScrapReasonType(u uint8) *AssetScrapUpdate {
	asu.mutation.ResetScrapReasonType()
	asu.mutation.SetScrapReasonType(u)
	return asu
}

// SetNillableScrapReasonType sets the "scrap_reason_type" field if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableScrapReasonType(u *uint8) *AssetScrapUpdate {
	if u != nil {
		asu.SetScrapReasonType(*u)
	}
	return asu
}

// AddScrapReasonType adds u to the "scrap_reason_type" field.
func (asu *AssetScrapUpdate) AddScrapReasonType(u int8) *AssetScrapUpdate {
	asu.mutation.AddScrapReasonType(u)
	return asu
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (asu *AssetScrapUpdate) ClearScrapReasonType() *AssetScrapUpdate {
	asu.mutation.ClearScrapReasonType()
	return asu
}

// SetScrapAt sets the "scrap_at" field.
func (asu *AssetScrapUpdate) SetScrapAt(t time.Time) *AssetScrapUpdate {
	asu.mutation.SetScrapAt(t)
	return asu
}

// SetNillableScrapAt sets the "scrap_at" field if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableScrapAt(t *time.Time) *AssetScrapUpdate {
	if t != nil {
		asu.SetScrapAt(*t)
	}
	return asu
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (asu *AssetScrapUpdate) ClearScrapAt() *AssetScrapUpdate {
	asu.mutation.ClearScrapAt()
	return asu
}

// SetScrapOperateID sets the "scrap_operate_id" field.
func (asu *AssetScrapUpdate) SetScrapOperateID(u uint64) *AssetScrapUpdate {
	asu.mutation.SetScrapOperateID(u)
	return asu
}

// SetNillableScrapOperateID sets the "scrap_operate_id" field if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableScrapOperateID(u *uint64) *AssetScrapUpdate {
	if u != nil {
		asu.SetScrapOperateID(*u)
	}
	return asu
}

// ClearScrapOperateID clears the value of the "scrap_operate_id" field.
func (asu *AssetScrapUpdate) ClearScrapOperateID() *AssetScrapUpdate {
	asu.mutation.ClearScrapOperateID()
	return asu
}

// SetScrapOperateRoleType sets the "scrap_operate_role_type" field.
func (asu *AssetScrapUpdate) SetScrapOperateRoleType(u uint8) *AssetScrapUpdate {
	asu.mutation.ResetScrapOperateRoleType()
	asu.mutation.SetScrapOperateRoleType(u)
	return asu
}

// SetNillableScrapOperateRoleType sets the "scrap_operate_role_type" field if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableScrapOperateRoleType(u *uint8) *AssetScrapUpdate {
	if u != nil {
		asu.SetScrapOperateRoleType(*u)
	}
	return asu
}

// AddScrapOperateRoleType adds u to the "scrap_operate_role_type" field.
func (asu *AssetScrapUpdate) AddScrapOperateRoleType(u int8) *AssetScrapUpdate {
	asu.mutation.AddScrapOperateRoleType(u)
	return asu
}

// ClearScrapOperateRoleType clears the value of the "scrap_operate_role_type" field.
func (asu *AssetScrapUpdate) ClearScrapOperateRoleType() *AssetScrapUpdate {
	asu.mutation.ClearScrapOperateRoleType()
	return asu
}

// SetScrapBatch sets the "scrap_batch" field.
func (asu *AssetScrapUpdate) SetScrapBatch(s string) *AssetScrapUpdate {
	asu.mutation.SetScrapBatch(s)
	return asu
}

// SetNillableScrapBatch sets the "scrap_batch" field if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableScrapBatch(s *string) *AssetScrapUpdate {
	if s != nil {
		asu.SetScrapBatch(*s)
	}
	return asu
}

// ClearScrapBatch clears the value of the "scrap_batch" field.
func (asu *AssetScrapUpdate) ClearScrapBatch() *AssetScrapUpdate {
	asu.mutation.ClearScrapBatch()
	return asu
}

// SetAssetID sets the "asset_id" field.
func (asu *AssetScrapUpdate) SetAssetID(u uint64) *AssetScrapUpdate {
	asu.mutation.SetAssetID(u)
	return asu
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableAssetID(u *uint64) *AssetScrapUpdate {
	if u != nil {
		asu.SetAssetID(*u)
	}
	return asu
}

// SetManagerID sets the "manager" edge to the Manager entity by ID.
func (asu *AssetScrapUpdate) SetManagerID(id uint64) *AssetScrapUpdate {
	asu.mutation.SetManagerID(id)
	return asu
}

// SetNillableManagerID sets the "manager" edge to the Manager entity by ID if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableManagerID(id *uint64) *AssetScrapUpdate {
	if id != nil {
		asu = asu.SetManagerID(*id)
	}
	return asu
}

// SetManager sets the "manager" edge to the Manager entity.
func (asu *AssetScrapUpdate) SetManager(m *Manager) *AssetScrapUpdate {
	return asu.SetManagerID(m.ID)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (asu *AssetScrapUpdate) SetEmployeeID(id uint64) *AssetScrapUpdate {
	asu.mutation.SetEmployeeID(id)
	return asu
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableEmployeeID(id *uint64) *AssetScrapUpdate {
	if id != nil {
		asu = asu.SetEmployeeID(*id)
	}
	return asu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (asu *AssetScrapUpdate) SetEmployee(e *Employee) *AssetScrapUpdate {
	return asu.SetEmployeeID(e.ID)
}

// SetMaintainerID sets the "maintainer" edge to the Maintainer entity by ID.
func (asu *AssetScrapUpdate) SetMaintainerID(id uint64) *AssetScrapUpdate {
	asu.mutation.SetMaintainerID(id)
	return asu
}

// SetNillableMaintainerID sets the "maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableMaintainerID(id *uint64) *AssetScrapUpdate {
	if id != nil {
		asu = asu.SetMaintainerID(*id)
	}
	return asu
}

// SetMaintainer sets the "maintainer" edge to the Maintainer entity.
func (asu *AssetScrapUpdate) SetMaintainer(m *Maintainer) *AssetScrapUpdate {
	return asu.SetMaintainerID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (asu *AssetScrapUpdate) SetAgentID(id uint64) *AssetScrapUpdate {
	asu.mutation.SetAgentID(id)
	return asu
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (asu *AssetScrapUpdate) SetNillableAgentID(id *uint64) *AssetScrapUpdate {
	if id != nil {
		asu = asu.SetAgentID(*id)
	}
	return asu
}

// SetAgent sets the "agent" edge to the Agent entity.
func (asu *AssetScrapUpdate) SetAgent(a *Agent) *AssetScrapUpdate {
	return asu.SetAgentID(a.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (asu *AssetScrapUpdate) SetAsset(a *Asset) *AssetScrapUpdate {
	return asu.SetAssetID(a.ID)
}

// Mutation returns the AssetScrapMutation object of the builder.
func (asu *AssetScrapUpdate) Mutation() *AssetScrapMutation {
	return asu.mutation
}

// ClearManager clears the "manager" edge to the Manager entity.
func (asu *AssetScrapUpdate) ClearManager() *AssetScrapUpdate {
	asu.mutation.ClearManager()
	return asu
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (asu *AssetScrapUpdate) ClearEmployee() *AssetScrapUpdate {
	asu.mutation.ClearEmployee()
	return asu
}

// ClearMaintainer clears the "maintainer" edge to the Maintainer entity.
func (asu *AssetScrapUpdate) ClearMaintainer() *AssetScrapUpdate {
	asu.mutation.ClearMaintainer()
	return asu
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (asu *AssetScrapUpdate) ClearAgent() *AssetScrapUpdate {
	asu.mutation.ClearAgent()
	return asu
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (asu *AssetScrapUpdate) ClearAsset() *AssetScrapUpdate {
	asu.mutation.ClearAsset()
	return asu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AssetScrapUpdate) Save(ctx context.Context) (int, error) {
	if err := asu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AssetScrapUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AssetScrapUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AssetScrapUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AssetScrapUpdate) defaults() error {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		if assetscrap.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetscrap.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetscrap.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (asu *AssetScrapUpdate) check() error {
	if _, ok := asu.mutation.AssetID(); asu.mutation.AssetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AssetScrap.asset"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AssetScrapUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetScrapUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AssetScrapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetscrap.Table, assetscrap.Columns, sqlgraph.NewFieldSpec(assetscrap.FieldID, field.TypeUint64))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetscrap.FieldUpdatedAt, field.TypeTime, value)
	}
	if asu.mutation.CreatorCleared() {
		_spec.ClearField(assetscrap.FieldCreator, field.TypeJSON)
	}
	if value, ok := asu.mutation.LastModifier(); ok {
		_spec.SetField(assetscrap.FieldLastModifier, field.TypeJSON, value)
	}
	if asu.mutation.LastModifierCleared() {
		_spec.ClearField(assetscrap.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := asu.mutation.Remark(); ok {
		_spec.SetField(assetscrap.FieldRemark, field.TypeString, value)
	}
	if asu.mutation.RemarkCleared() {
		_spec.ClearField(assetscrap.FieldRemark, field.TypeString)
	}
	if value, ok := asu.mutation.ScrapReasonType(); ok {
		_spec.SetField(assetscrap.FieldScrapReasonType, field.TypeUint8, value)
	}
	if value, ok := asu.mutation.AddedScrapReasonType(); ok {
		_spec.AddField(assetscrap.FieldScrapReasonType, field.TypeUint8, value)
	}
	if asu.mutation.ScrapReasonTypeCleared() {
		_spec.ClearField(assetscrap.FieldScrapReasonType, field.TypeUint8)
	}
	if value, ok := asu.mutation.ScrapAt(); ok {
		_spec.SetField(assetscrap.FieldScrapAt, field.TypeTime, value)
	}
	if asu.mutation.ScrapAtCleared() {
		_spec.ClearField(assetscrap.FieldScrapAt, field.TypeTime)
	}
	if value, ok := asu.mutation.ScrapOperateRoleType(); ok {
		_spec.SetField(assetscrap.FieldScrapOperateRoleType, field.TypeUint8, value)
	}
	if value, ok := asu.mutation.AddedScrapOperateRoleType(); ok {
		_spec.AddField(assetscrap.FieldScrapOperateRoleType, field.TypeUint8, value)
	}
	if asu.mutation.ScrapOperateRoleTypeCleared() {
		_spec.ClearField(assetscrap.FieldScrapOperateRoleType, field.TypeUint8)
	}
	if value, ok := asu.mutation.ScrapBatch(); ok {
		_spec.SetField(assetscrap.FieldScrapBatch, field.TypeString, value)
	}
	if asu.mutation.ScrapBatchCleared() {
		_spec.ClearField(assetscrap.FieldScrapBatch, field.TypeString)
	}
	if asu.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.ManagerTable,
			Columns: []string{assetscrap.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.ManagerTable,
			Columns: []string{assetscrap.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.EmployeeTable,
			Columns: []string{assetscrap.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.EmployeeTable,
			Columns: []string{assetscrap.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.MaintainerTable,
			Columns: []string{assetscrap.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.MaintainerTable,
			Columns: []string{assetscrap.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.AgentTable,
			Columns: []string{assetscrap.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.AgentTable,
			Columns: []string{assetscrap.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrap.AssetTable,
			Columns: []string{assetscrap.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrap.AssetTable,
			Columns: []string{assetscrap.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(asu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetscrap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AssetScrapUpdateOne is the builder for updating a single AssetScrap entity.
type AssetScrapUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetScrapMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AssetScrapUpdateOne) SetUpdatedAt(t time.Time) *AssetScrapUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetLastModifier sets the "last_modifier" field.
func (asuo *AssetScrapUpdateOne) SetLastModifier(m *model.Modifier) *AssetScrapUpdateOne {
	asuo.mutation.SetLastModifier(m)
	return asuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (asuo *AssetScrapUpdateOne) ClearLastModifier() *AssetScrapUpdateOne {
	asuo.mutation.ClearLastModifier()
	return asuo
}

// SetRemark sets the "remark" field.
func (asuo *AssetScrapUpdateOne) SetRemark(s string) *AssetScrapUpdateOne {
	asuo.mutation.SetRemark(s)
	return asuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableRemark(s *string) *AssetScrapUpdateOne {
	if s != nil {
		asuo.SetRemark(*s)
	}
	return asuo
}

// ClearRemark clears the value of the "remark" field.
func (asuo *AssetScrapUpdateOne) ClearRemark() *AssetScrapUpdateOne {
	asuo.mutation.ClearRemark()
	return asuo
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (asuo *AssetScrapUpdateOne) SetScrapReasonType(u uint8) *AssetScrapUpdateOne {
	asuo.mutation.ResetScrapReasonType()
	asuo.mutation.SetScrapReasonType(u)
	return asuo
}

// SetNillableScrapReasonType sets the "scrap_reason_type" field if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableScrapReasonType(u *uint8) *AssetScrapUpdateOne {
	if u != nil {
		asuo.SetScrapReasonType(*u)
	}
	return asuo
}

// AddScrapReasonType adds u to the "scrap_reason_type" field.
func (asuo *AssetScrapUpdateOne) AddScrapReasonType(u int8) *AssetScrapUpdateOne {
	asuo.mutation.AddScrapReasonType(u)
	return asuo
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (asuo *AssetScrapUpdateOne) ClearScrapReasonType() *AssetScrapUpdateOne {
	asuo.mutation.ClearScrapReasonType()
	return asuo
}

// SetScrapAt sets the "scrap_at" field.
func (asuo *AssetScrapUpdateOne) SetScrapAt(t time.Time) *AssetScrapUpdateOne {
	asuo.mutation.SetScrapAt(t)
	return asuo
}

// SetNillableScrapAt sets the "scrap_at" field if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableScrapAt(t *time.Time) *AssetScrapUpdateOne {
	if t != nil {
		asuo.SetScrapAt(*t)
	}
	return asuo
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (asuo *AssetScrapUpdateOne) ClearScrapAt() *AssetScrapUpdateOne {
	asuo.mutation.ClearScrapAt()
	return asuo
}

// SetScrapOperateID sets the "scrap_operate_id" field.
func (asuo *AssetScrapUpdateOne) SetScrapOperateID(u uint64) *AssetScrapUpdateOne {
	asuo.mutation.SetScrapOperateID(u)
	return asuo
}

// SetNillableScrapOperateID sets the "scrap_operate_id" field if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableScrapOperateID(u *uint64) *AssetScrapUpdateOne {
	if u != nil {
		asuo.SetScrapOperateID(*u)
	}
	return asuo
}

// ClearScrapOperateID clears the value of the "scrap_operate_id" field.
func (asuo *AssetScrapUpdateOne) ClearScrapOperateID() *AssetScrapUpdateOne {
	asuo.mutation.ClearScrapOperateID()
	return asuo
}

// SetScrapOperateRoleType sets the "scrap_operate_role_type" field.
func (asuo *AssetScrapUpdateOne) SetScrapOperateRoleType(u uint8) *AssetScrapUpdateOne {
	asuo.mutation.ResetScrapOperateRoleType()
	asuo.mutation.SetScrapOperateRoleType(u)
	return asuo
}

// SetNillableScrapOperateRoleType sets the "scrap_operate_role_type" field if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableScrapOperateRoleType(u *uint8) *AssetScrapUpdateOne {
	if u != nil {
		asuo.SetScrapOperateRoleType(*u)
	}
	return asuo
}

// AddScrapOperateRoleType adds u to the "scrap_operate_role_type" field.
func (asuo *AssetScrapUpdateOne) AddScrapOperateRoleType(u int8) *AssetScrapUpdateOne {
	asuo.mutation.AddScrapOperateRoleType(u)
	return asuo
}

// ClearScrapOperateRoleType clears the value of the "scrap_operate_role_type" field.
func (asuo *AssetScrapUpdateOne) ClearScrapOperateRoleType() *AssetScrapUpdateOne {
	asuo.mutation.ClearScrapOperateRoleType()
	return asuo
}

// SetScrapBatch sets the "scrap_batch" field.
func (asuo *AssetScrapUpdateOne) SetScrapBatch(s string) *AssetScrapUpdateOne {
	asuo.mutation.SetScrapBatch(s)
	return asuo
}

// SetNillableScrapBatch sets the "scrap_batch" field if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableScrapBatch(s *string) *AssetScrapUpdateOne {
	if s != nil {
		asuo.SetScrapBatch(*s)
	}
	return asuo
}

// ClearScrapBatch clears the value of the "scrap_batch" field.
func (asuo *AssetScrapUpdateOne) ClearScrapBatch() *AssetScrapUpdateOne {
	asuo.mutation.ClearScrapBatch()
	return asuo
}

// SetAssetID sets the "asset_id" field.
func (asuo *AssetScrapUpdateOne) SetAssetID(u uint64) *AssetScrapUpdateOne {
	asuo.mutation.SetAssetID(u)
	return asuo
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableAssetID(u *uint64) *AssetScrapUpdateOne {
	if u != nil {
		asuo.SetAssetID(*u)
	}
	return asuo
}

// SetManagerID sets the "manager" edge to the Manager entity by ID.
func (asuo *AssetScrapUpdateOne) SetManagerID(id uint64) *AssetScrapUpdateOne {
	asuo.mutation.SetManagerID(id)
	return asuo
}

// SetNillableManagerID sets the "manager" edge to the Manager entity by ID if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableManagerID(id *uint64) *AssetScrapUpdateOne {
	if id != nil {
		asuo = asuo.SetManagerID(*id)
	}
	return asuo
}

// SetManager sets the "manager" edge to the Manager entity.
func (asuo *AssetScrapUpdateOne) SetManager(m *Manager) *AssetScrapUpdateOne {
	return asuo.SetManagerID(m.ID)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (asuo *AssetScrapUpdateOne) SetEmployeeID(id uint64) *AssetScrapUpdateOne {
	asuo.mutation.SetEmployeeID(id)
	return asuo
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableEmployeeID(id *uint64) *AssetScrapUpdateOne {
	if id != nil {
		asuo = asuo.SetEmployeeID(*id)
	}
	return asuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (asuo *AssetScrapUpdateOne) SetEmployee(e *Employee) *AssetScrapUpdateOne {
	return asuo.SetEmployeeID(e.ID)
}

// SetMaintainerID sets the "maintainer" edge to the Maintainer entity by ID.
func (asuo *AssetScrapUpdateOne) SetMaintainerID(id uint64) *AssetScrapUpdateOne {
	asuo.mutation.SetMaintainerID(id)
	return asuo
}

// SetNillableMaintainerID sets the "maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableMaintainerID(id *uint64) *AssetScrapUpdateOne {
	if id != nil {
		asuo = asuo.SetMaintainerID(*id)
	}
	return asuo
}

// SetMaintainer sets the "maintainer" edge to the Maintainer entity.
func (asuo *AssetScrapUpdateOne) SetMaintainer(m *Maintainer) *AssetScrapUpdateOne {
	return asuo.SetMaintainerID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (asuo *AssetScrapUpdateOne) SetAgentID(id uint64) *AssetScrapUpdateOne {
	asuo.mutation.SetAgentID(id)
	return asuo
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (asuo *AssetScrapUpdateOne) SetNillableAgentID(id *uint64) *AssetScrapUpdateOne {
	if id != nil {
		asuo = asuo.SetAgentID(*id)
	}
	return asuo
}

// SetAgent sets the "agent" edge to the Agent entity.
func (asuo *AssetScrapUpdateOne) SetAgent(a *Agent) *AssetScrapUpdateOne {
	return asuo.SetAgentID(a.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (asuo *AssetScrapUpdateOne) SetAsset(a *Asset) *AssetScrapUpdateOne {
	return asuo.SetAssetID(a.ID)
}

// Mutation returns the AssetScrapMutation object of the builder.
func (asuo *AssetScrapUpdateOne) Mutation() *AssetScrapMutation {
	return asuo.mutation
}

// ClearManager clears the "manager" edge to the Manager entity.
func (asuo *AssetScrapUpdateOne) ClearManager() *AssetScrapUpdateOne {
	asuo.mutation.ClearManager()
	return asuo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (asuo *AssetScrapUpdateOne) ClearEmployee() *AssetScrapUpdateOne {
	asuo.mutation.ClearEmployee()
	return asuo
}

// ClearMaintainer clears the "maintainer" edge to the Maintainer entity.
func (asuo *AssetScrapUpdateOne) ClearMaintainer() *AssetScrapUpdateOne {
	asuo.mutation.ClearMaintainer()
	return asuo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (asuo *AssetScrapUpdateOne) ClearAgent() *AssetScrapUpdateOne {
	asuo.mutation.ClearAgent()
	return asuo
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (asuo *AssetScrapUpdateOne) ClearAsset() *AssetScrapUpdateOne {
	asuo.mutation.ClearAsset()
	return asuo
}

// Where appends a list predicates to the AssetScrapUpdate builder.
func (asuo *AssetScrapUpdateOne) Where(ps ...predicate.AssetScrap) *AssetScrapUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AssetScrapUpdateOne) Select(field string, fields ...string) *AssetScrapUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AssetScrap entity.
func (asuo *AssetScrapUpdateOne) Save(ctx context.Context) (*AssetScrap, error) {
	if err := asuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AssetScrapUpdateOne) SaveX(ctx context.Context) *AssetScrap {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AssetScrapUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AssetScrapUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AssetScrapUpdateOne) defaults() error {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		if assetscrap.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetscrap.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetscrap.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (asuo *AssetScrapUpdateOne) check() error {
	if _, ok := asuo.mutation.AssetID(); asuo.mutation.AssetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AssetScrap.asset"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AssetScrapUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetScrapUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AssetScrapUpdateOne) sqlSave(ctx context.Context) (_node *AssetScrap, err error) {
	if err := asuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetscrap.Table, assetscrap.Columns, sqlgraph.NewFieldSpec(assetscrap.FieldID, field.TypeUint64))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetScrap.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetscrap.FieldID)
		for _, f := range fields {
			if !assetscrap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetscrap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetscrap.FieldUpdatedAt, field.TypeTime, value)
	}
	if asuo.mutation.CreatorCleared() {
		_spec.ClearField(assetscrap.FieldCreator, field.TypeJSON)
	}
	if value, ok := asuo.mutation.LastModifier(); ok {
		_spec.SetField(assetscrap.FieldLastModifier, field.TypeJSON, value)
	}
	if asuo.mutation.LastModifierCleared() {
		_spec.ClearField(assetscrap.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := asuo.mutation.Remark(); ok {
		_spec.SetField(assetscrap.FieldRemark, field.TypeString, value)
	}
	if asuo.mutation.RemarkCleared() {
		_spec.ClearField(assetscrap.FieldRemark, field.TypeString)
	}
	if value, ok := asuo.mutation.ScrapReasonType(); ok {
		_spec.SetField(assetscrap.FieldScrapReasonType, field.TypeUint8, value)
	}
	if value, ok := asuo.mutation.AddedScrapReasonType(); ok {
		_spec.AddField(assetscrap.FieldScrapReasonType, field.TypeUint8, value)
	}
	if asuo.mutation.ScrapReasonTypeCleared() {
		_spec.ClearField(assetscrap.FieldScrapReasonType, field.TypeUint8)
	}
	if value, ok := asuo.mutation.ScrapAt(); ok {
		_spec.SetField(assetscrap.FieldScrapAt, field.TypeTime, value)
	}
	if asuo.mutation.ScrapAtCleared() {
		_spec.ClearField(assetscrap.FieldScrapAt, field.TypeTime)
	}
	if value, ok := asuo.mutation.ScrapOperateRoleType(); ok {
		_spec.SetField(assetscrap.FieldScrapOperateRoleType, field.TypeUint8, value)
	}
	if value, ok := asuo.mutation.AddedScrapOperateRoleType(); ok {
		_spec.AddField(assetscrap.FieldScrapOperateRoleType, field.TypeUint8, value)
	}
	if asuo.mutation.ScrapOperateRoleTypeCleared() {
		_spec.ClearField(assetscrap.FieldScrapOperateRoleType, field.TypeUint8)
	}
	if value, ok := asuo.mutation.ScrapBatch(); ok {
		_spec.SetField(assetscrap.FieldScrapBatch, field.TypeString, value)
	}
	if asuo.mutation.ScrapBatchCleared() {
		_spec.ClearField(assetscrap.FieldScrapBatch, field.TypeString)
	}
	if asuo.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.ManagerTable,
			Columns: []string{assetscrap.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.ManagerTable,
			Columns: []string{assetscrap.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.EmployeeTable,
			Columns: []string{assetscrap.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.EmployeeTable,
			Columns: []string{assetscrap.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.MaintainerTable,
			Columns: []string{assetscrap.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.MaintainerTable,
			Columns: []string{assetscrap.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.AgentTable,
			Columns: []string{assetscrap.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.AgentTable,
			Columns: []string{assetscrap.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asuo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrap.AssetTable,
			Columns: []string{assetscrap.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrap.AssetTable,
			Columns: []string{assetscrap.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(asuo.modifiers...)
	_node = &AssetScrap{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetscrap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
