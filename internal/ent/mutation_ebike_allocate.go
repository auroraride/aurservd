// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/ebikeallocate"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// EbikeAllocateMutation represents an operation that mutates the EbikeAllocate nodes in the graph.
type EbikeAllocateMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	status           *uint8
	addstatus        *int8
	info             **model.EbikeAllocate
	time             *time.Time
	clearedFields    map[string]struct{}
	employee         *uint64
	clearedemployee  bool
	store            *uint64
	clearedstore     bool
	ebike            *uint64
	clearedebike     bool
	brand            *uint64
	clearedbrand     bool
	subscribe        *uint64
	clearedsubscribe bool
	rider            *uint64
	clearedrider     bool
	contract         *uint64
	clearedcontract  bool
	done             bool
	oldValue         func(context.Context) (*EbikeAllocate, error)
	predicates       []predicate.EbikeAllocate
}

var _ ent.Mutation = (*EbikeAllocateMutation)(nil)

// ebikeallocateOption allows management of the mutation configuration using functional options.
type ebikeallocateOption func(*EbikeAllocateMutation)

// newEbikeAllocateMutation creates new mutation for the EbikeAllocate entity.
func newEbikeAllocateMutation(c config, op Op, opts ...ebikeallocateOption) *EbikeAllocateMutation {
	m := &EbikeAllocateMutation{
		config:        c,
		op:            op,
		typ:           TypeEbikeAllocate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEbikeAllocateID sets the ID field of the mutation.
func withEbikeAllocateID(id uint64) ebikeallocateOption {
	return func(m *EbikeAllocateMutation) {
		var (
			err   error
			once  sync.Once
			value *EbikeAllocate
		)
		m.oldValue = func(ctx context.Context) (*EbikeAllocate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EbikeAllocate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEbikeAllocate sets the old EbikeAllocate of the mutation.
func withEbikeAllocate(node *EbikeAllocate) ebikeallocateOption {
	return func(m *EbikeAllocateMutation) {
		m.oldValue = func(context.Context) (*EbikeAllocate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EbikeAllocateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EbikeAllocateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EbikeAllocateMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EbikeAllocateMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EbikeAllocate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEmployeeID sets the "employee_id" field.
func (m *EbikeAllocateMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *EbikeAllocateMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (m *EbikeAllocateMutation) ClearEmployeeID() {
	m.employee = nil
	m.clearedFields[ebikeallocate.FieldEmployeeID] = struct{}{}
}

// EmployeeIDCleared returns if the "employee_id" field was cleared in this mutation.
func (m *EbikeAllocateMutation) EmployeeIDCleared() bool {
	_, ok := m.clearedFields[ebikeallocate.FieldEmployeeID]
	return ok
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *EbikeAllocateMutation) ResetEmployeeID() {
	m.employee = nil
	delete(m.clearedFields, ebikeallocate.FieldEmployeeID)
}

// SetStoreID sets the "store_id" field.
func (m *EbikeAllocateMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *EbikeAllocateMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldStoreID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *EbikeAllocateMutation) ResetStoreID() {
	m.store = nil
}

// SetEbikeID sets the "ebike_id" field.
func (m *EbikeAllocateMutation) SetEbikeID(u uint64) {
	m.ebike = &u
}

// EbikeID returns the value of the "ebike_id" field in the mutation.
func (m *EbikeAllocateMutation) EbikeID() (r uint64, exists bool) {
	v := m.ebike
	if v == nil {
		return
	}
	return *v, true
}

// OldEbikeID returns the old "ebike_id" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldEbikeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEbikeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEbikeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEbikeID: %w", err)
	}
	return oldValue.EbikeID, nil
}

// ResetEbikeID resets all changes to the "ebike_id" field.
func (m *EbikeAllocateMutation) ResetEbikeID() {
	m.ebike = nil
}

// SetBrandID sets the "brand_id" field.
func (m *EbikeAllocateMutation) SetBrandID(u uint64) {
	m.brand = &u
}

// BrandID returns the value of the "brand_id" field in the mutation.
func (m *EbikeAllocateMutation) BrandID() (r uint64, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrandID returns the old "brand_id" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldBrandID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrandID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrandID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrandID: %w", err)
	}
	return oldValue.BrandID, nil
}

// ResetBrandID resets all changes to the "brand_id" field.
func (m *EbikeAllocateMutation) ResetBrandID() {
	m.brand = nil
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *EbikeAllocateMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *EbikeAllocateMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *EbikeAllocateMutation) ResetSubscribeID() {
	m.subscribe = nil
}

// SetRiderID sets the "rider_id" field.
func (m *EbikeAllocateMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *EbikeAllocateMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *EbikeAllocateMutation) ResetRiderID() {
	m.rider = nil
}

// SetStatus sets the "status" field.
func (m *EbikeAllocateMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *EbikeAllocateMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *EbikeAllocateMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *EbikeAllocateMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *EbikeAllocateMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetInfo sets the "info" field.
func (m *EbikeAllocateMutation) SetInfo(ma *model.EbikeAllocate) {
	m.info = &ma
}

// Info returns the value of the "info" field in the mutation.
func (m *EbikeAllocateMutation) Info() (r *model.EbikeAllocate, exists bool) {
	v := m.info
	if v == nil {
		return
	}
	return *v, true
}

// OldInfo returns the old "info" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldInfo(ctx context.Context) (v *model.EbikeAllocate, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfo: %w", err)
	}
	return oldValue.Info, nil
}

// ResetInfo resets all changes to the "info" field.
func (m *EbikeAllocateMutation) ResetInfo() {
	m.info = nil
}

// SetTime sets the "time" field.
func (m *EbikeAllocateMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *EbikeAllocateMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the EbikeAllocate entity.
// If the EbikeAllocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeAllocateMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *EbikeAllocateMutation) ResetTime() {
	m.time = nil
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *EbikeAllocateMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *EbikeAllocateMutation) EmployeeCleared() bool {
	return m.EmployeeIDCleared() || m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *EbikeAllocateMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *EbikeAllocateMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *EbikeAllocateMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *EbikeAllocateMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *EbikeAllocateMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *EbikeAllocateMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (m *EbikeAllocateMutation) ClearEbike() {
	m.clearedebike = true
}

// EbikeCleared reports if the "ebike" edge to the Ebike entity was cleared.
func (m *EbikeAllocateMutation) EbikeCleared() bool {
	return m.clearedebike
}

// EbikeIDs returns the "ebike" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EbikeID instead. It exists only for internal usage by the builders.
func (m *EbikeAllocateMutation) EbikeIDs() (ids []uint64) {
	if id := m.ebike; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEbike resets all changes to the "ebike" edge.
func (m *EbikeAllocateMutation) ResetEbike() {
	m.ebike = nil
	m.clearedebike = false
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (m *EbikeAllocateMutation) ClearBrand() {
	m.clearedbrand = true
}

// BrandCleared reports if the "brand" edge to the EbikeBrand entity was cleared.
func (m *EbikeAllocateMutation) BrandCleared() bool {
	return m.clearedbrand
}

// BrandIDs returns the "brand" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BrandID instead. It exists only for internal usage by the builders.
func (m *EbikeAllocateMutation) BrandIDs() (ids []uint64) {
	if id := m.brand; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBrand resets all changes to the "brand" edge.
func (m *EbikeAllocateMutation) ResetBrand() {
	m.brand = nil
	m.clearedbrand = false
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *EbikeAllocateMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *EbikeAllocateMutation) SubscribeCleared() bool {
	return m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *EbikeAllocateMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *EbikeAllocateMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *EbikeAllocateMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *EbikeAllocateMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *EbikeAllocateMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *EbikeAllocateMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// SetContractID sets the "contract" edge to the Contract entity by id.
func (m *EbikeAllocateMutation) SetContractID(id uint64) {
	m.contract = &id
}

// ClearContract clears the "contract" edge to the Contract entity.
func (m *EbikeAllocateMutation) ClearContract() {
	m.clearedcontract = true
}

// ContractCleared reports if the "contract" edge to the Contract entity was cleared.
func (m *EbikeAllocateMutation) ContractCleared() bool {
	return m.clearedcontract
}

// ContractID returns the "contract" edge ID in the mutation.
func (m *EbikeAllocateMutation) ContractID() (id uint64, exists bool) {
	if m.contract != nil {
		return *m.contract, true
	}
	return
}

// ContractIDs returns the "contract" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContractID instead. It exists only for internal usage by the builders.
func (m *EbikeAllocateMutation) ContractIDs() (ids []uint64) {
	if id := m.contract; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContract resets all changes to the "contract" edge.
func (m *EbikeAllocateMutation) ResetContract() {
	m.contract = nil
	m.clearedcontract = false
}

// Where appends a list predicates to the EbikeAllocateMutation builder.
func (m *EbikeAllocateMutation) Where(ps ...predicate.EbikeAllocate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EbikeAllocateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EbikeAllocate).
func (m *EbikeAllocateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EbikeAllocateMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.employee != nil {
		fields = append(fields, ebikeallocate.FieldEmployeeID)
	}
	if m.store != nil {
		fields = append(fields, ebikeallocate.FieldStoreID)
	}
	if m.ebike != nil {
		fields = append(fields, ebikeallocate.FieldEbikeID)
	}
	if m.brand != nil {
		fields = append(fields, ebikeallocate.FieldBrandID)
	}
	if m.subscribe != nil {
		fields = append(fields, ebikeallocate.FieldSubscribeID)
	}
	if m.rider != nil {
		fields = append(fields, ebikeallocate.FieldRiderID)
	}
	if m.status != nil {
		fields = append(fields, ebikeallocate.FieldStatus)
	}
	if m.info != nil {
		fields = append(fields, ebikeallocate.FieldInfo)
	}
	if m.time != nil {
		fields = append(fields, ebikeallocate.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EbikeAllocateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ebikeallocate.FieldEmployeeID:
		return m.EmployeeID()
	case ebikeallocate.FieldStoreID:
		return m.StoreID()
	case ebikeallocate.FieldEbikeID:
		return m.EbikeID()
	case ebikeallocate.FieldBrandID:
		return m.BrandID()
	case ebikeallocate.FieldSubscribeID:
		return m.SubscribeID()
	case ebikeallocate.FieldRiderID:
		return m.RiderID()
	case ebikeallocate.FieldStatus:
		return m.Status()
	case ebikeallocate.FieldInfo:
		return m.Info()
	case ebikeallocate.FieldTime:
		return m.Time()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EbikeAllocateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ebikeallocate.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case ebikeallocate.FieldStoreID:
		return m.OldStoreID(ctx)
	case ebikeallocate.FieldEbikeID:
		return m.OldEbikeID(ctx)
	case ebikeallocate.FieldBrandID:
		return m.OldBrandID(ctx)
	case ebikeallocate.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case ebikeallocate.FieldRiderID:
		return m.OldRiderID(ctx)
	case ebikeallocate.FieldStatus:
		return m.OldStatus(ctx)
	case ebikeallocate.FieldInfo:
		return m.OldInfo(ctx)
	case ebikeallocate.FieldTime:
		return m.OldTime(ctx)
	}
	return nil, fmt.Errorf("unknown EbikeAllocate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EbikeAllocateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ebikeallocate.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case ebikeallocate.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case ebikeallocate.FieldEbikeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEbikeID(v)
		return nil
	case ebikeallocate.FieldBrandID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrandID(v)
		return nil
	case ebikeallocate.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case ebikeallocate.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case ebikeallocate.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ebikeallocate.FieldInfo:
		v, ok := value.(*model.EbikeAllocate)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfo(v)
		return nil
	case ebikeallocate.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown EbikeAllocate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EbikeAllocateMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, ebikeallocate.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EbikeAllocateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ebikeallocate.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EbikeAllocateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ebikeallocate.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown EbikeAllocate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EbikeAllocateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ebikeallocate.FieldEmployeeID) {
		fields = append(fields, ebikeallocate.FieldEmployeeID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EbikeAllocateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EbikeAllocateMutation) ClearField(name string) error {
	switch name {
	case ebikeallocate.FieldEmployeeID:
		m.ClearEmployeeID()
		return nil
	}
	return fmt.Errorf("unknown EbikeAllocate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EbikeAllocateMutation) ResetField(name string) error {
	switch name {
	case ebikeallocate.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case ebikeallocate.FieldStoreID:
		m.ResetStoreID()
		return nil
	case ebikeallocate.FieldEbikeID:
		m.ResetEbikeID()
		return nil
	case ebikeallocate.FieldBrandID:
		m.ResetBrandID()
		return nil
	case ebikeallocate.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case ebikeallocate.FieldRiderID:
		m.ResetRiderID()
		return nil
	case ebikeallocate.FieldStatus:
		m.ResetStatus()
		return nil
	case ebikeallocate.FieldInfo:
		m.ResetInfo()
		return nil
	case ebikeallocate.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown EbikeAllocate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EbikeAllocateMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.employee != nil {
		edges = append(edges, ebikeallocate.EdgeEmployee)
	}
	if m.store != nil {
		edges = append(edges, ebikeallocate.EdgeStore)
	}
	if m.ebike != nil {
		edges = append(edges, ebikeallocate.EdgeEbike)
	}
	if m.brand != nil {
		edges = append(edges, ebikeallocate.EdgeBrand)
	}
	if m.subscribe != nil {
		edges = append(edges, ebikeallocate.EdgeSubscribe)
	}
	if m.rider != nil {
		edges = append(edges, ebikeallocate.EdgeRider)
	}
	if m.contract != nil {
		edges = append(edges, ebikeallocate.EdgeContract)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EbikeAllocateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ebikeallocate.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case ebikeallocate.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case ebikeallocate.EdgeEbike:
		if id := m.ebike; id != nil {
			return []ent.Value{*id}
		}
	case ebikeallocate.EdgeBrand:
		if id := m.brand; id != nil {
			return []ent.Value{*id}
		}
	case ebikeallocate.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	case ebikeallocate.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case ebikeallocate.EdgeContract:
		if id := m.contract; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EbikeAllocateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EbikeAllocateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EbikeAllocateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedemployee {
		edges = append(edges, ebikeallocate.EdgeEmployee)
	}
	if m.clearedstore {
		edges = append(edges, ebikeallocate.EdgeStore)
	}
	if m.clearedebike {
		edges = append(edges, ebikeallocate.EdgeEbike)
	}
	if m.clearedbrand {
		edges = append(edges, ebikeallocate.EdgeBrand)
	}
	if m.clearedsubscribe {
		edges = append(edges, ebikeallocate.EdgeSubscribe)
	}
	if m.clearedrider {
		edges = append(edges, ebikeallocate.EdgeRider)
	}
	if m.clearedcontract {
		edges = append(edges, ebikeallocate.EdgeContract)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EbikeAllocateMutation) EdgeCleared(name string) bool {
	switch name {
	case ebikeallocate.EdgeEmployee:
		return m.clearedemployee
	case ebikeallocate.EdgeStore:
		return m.clearedstore
	case ebikeallocate.EdgeEbike:
		return m.clearedebike
	case ebikeallocate.EdgeBrand:
		return m.clearedbrand
	case ebikeallocate.EdgeSubscribe:
		return m.clearedsubscribe
	case ebikeallocate.EdgeRider:
		return m.clearedrider
	case ebikeallocate.EdgeContract:
		return m.clearedcontract
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EbikeAllocateMutation) ClearEdge(name string) error {
	switch name {
	case ebikeallocate.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case ebikeallocate.EdgeStore:
		m.ClearStore()
		return nil
	case ebikeallocate.EdgeEbike:
		m.ClearEbike()
		return nil
	case ebikeallocate.EdgeBrand:
		m.ClearBrand()
		return nil
	case ebikeallocate.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	case ebikeallocate.EdgeRider:
		m.ClearRider()
		return nil
	case ebikeallocate.EdgeContract:
		m.ClearContract()
		return nil
	}
	return fmt.Errorf("unknown EbikeAllocate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EbikeAllocateMutation) ResetEdge(name string) error {
	switch name {
	case ebikeallocate.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case ebikeallocate.EdgeStore:
		m.ResetStore()
		return nil
	case ebikeallocate.EdgeEbike:
		m.ResetEbike()
		return nil
	case ebikeallocate.EdgeBrand:
		m.ResetBrand()
		return nil
	case ebikeallocate.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	case ebikeallocate.EdgeRider:
		m.ResetRider()
		return nil
	case ebikeallocate.EdgeContract:
		m.ResetContract()
		return nil
	}
	return fmt.Errorf("unknown EbikeAllocate edge %s", name)
}

