// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
)

// EnterpriseBatterySwapCreate is the builder for creating a EnterpriseBatterySwap entity.
type EnterpriseBatterySwapCreate struct {
	config
	mutation *EnterpriseBatterySwapMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ebsc *EnterpriseBatterySwapCreate) SetCreatedAt(t time.Time) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetCreatedAt(t)
	return ebsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ebsc *EnterpriseBatterySwapCreate) SetNillableCreatedAt(t *time.Time) *EnterpriseBatterySwapCreate {
	if t != nil {
		ebsc.SetCreatedAt(*t)
	}
	return ebsc
}

// SetUpdatedAt sets the "updated_at" field.
func (ebsc *EnterpriseBatterySwapCreate) SetUpdatedAt(t time.Time) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetUpdatedAt(t)
	return ebsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ebsc *EnterpriseBatterySwapCreate) SetNillableUpdatedAt(t *time.Time) *EnterpriseBatterySwapCreate {
	if t != nil {
		ebsc.SetUpdatedAt(*t)
	}
	return ebsc
}

// SetExchangeID sets the "exchange_id" field.
func (ebsc *EnterpriseBatterySwapCreate) SetExchangeID(u uint64) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetExchangeID(u)
	return ebsc
}

// SetCabinetID sets the "cabinet_id" field.
func (ebsc *EnterpriseBatterySwapCreate) SetCabinetID(u uint64) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetCabinetID(u)
	return ebsc
}

// SetPutinBatteryID sets the "putin_battery_id" field.
func (ebsc *EnterpriseBatterySwapCreate) SetPutinBatteryID(u uint64) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetPutinBatteryID(u)
	return ebsc
}

// SetPutinBatterySn sets the "putin_battery_sn" field.
func (ebsc *EnterpriseBatterySwapCreate) SetPutinBatterySn(s string) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetPutinBatterySn(s)
	return ebsc
}

// SetPutinEnterpriseID sets the "putin_enterprise_id" field.
func (ebsc *EnterpriseBatterySwapCreate) SetPutinEnterpriseID(u uint64) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetPutinEnterpriseID(u)
	return ebsc
}

// SetNillablePutinEnterpriseID sets the "putin_enterprise_id" field if the given value is not nil.
func (ebsc *EnterpriseBatterySwapCreate) SetNillablePutinEnterpriseID(u *uint64) *EnterpriseBatterySwapCreate {
	if u != nil {
		ebsc.SetPutinEnterpriseID(*u)
	}
	return ebsc
}

// SetPutinStationID sets the "putin_station_id" field.
func (ebsc *EnterpriseBatterySwapCreate) SetPutinStationID(u uint64) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetPutinStationID(u)
	return ebsc
}

// SetNillablePutinStationID sets the "putin_station_id" field if the given value is not nil.
func (ebsc *EnterpriseBatterySwapCreate) SetNillablePutinStationID(u *uint64) *EnterpriseBatterySwapCreate {
	if u != nil {
		ebsc.SetPutinStationID(*u)
	}
	return ebsc
}

// SetPutoutBatteryID sets the "putout_battery_id" field.
func (ebsc *EnterpriseBatterySwapCreate) SetPutoutBatteryID(u uint64) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetPutoutBatteryID(u)
	return ebsc
}

// SetPutoutBatterySn sets the "putout_battery_sn" field.
func (ebsc *EnterpriseBatterySwapCreate) SetPutoutBatterySn(s string) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetPutoutBatterySn(s)
	return ebsc
}

// SetPutoutEnterpriseID sets the "putout_enterprise_id" field.
func (ebsc *EnterpriseBatterySwapCreate) SetPutoutEnterpriseID(u uint64) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetPutoutEnterpriseID(u)
	return ebsc
}

// SetNillablePutoutEnterpriseID sets the "putout_enterprise_id" field if the given value is not nil.
func (ebsc *EnterpriseBatterySwapCreate) SetNillablePutoutEnterpriseID(u *uint64) *EnterpriseBatterySwapCreate {
	if u != nil {
		ebsc.SetPutoutEnterpriseID(*u)
	}
	return ebsc
}

// SetPutoutStationID sets the "putout_station_id" field.
func (ebsc *EnterpriseBatterySwapCreate) SetPutoutStationID(u uint64) *EnterpriseBatterySwapCreate {
	ebsc.mutation.SetPutoutStationID(u)
	return ebsc
}

// SetNillablePutoutStationID sets the "putout_station_id" field if the given value is not nil.
func (ebsc *EnterpriseBatterySwapCreate) SetNillablePutoutStationID(u *uint64) *EnterpriseBatterySwapCreate {
	if u != nil {
		ebsc.SetPutoutStationID(*u)
	}
	return ebsc
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (ebsc *EnterpriseBatterySwapCreate) SetExchange(e *Exchange) *EnterpriseBatterySwapCreate {
	return ebsc.SetExchangeID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ebsc *EnterpriseBatterySwapCreate) SetCabinet(c *Cabinet) *EnterpriseBatterySwapCreate {
	return ebsc.SetCabinetID(c.ID)
}

// SetPutinBattery sets the "putin_battery" edge to the Battery entity.
func (ebsc *EnterpriseBatterySwapCreate) SetPutinBattery(b *Battery) *EnterpriseBatterySwapCreate {
	return ebsc.SetPutinBatteryID(b.ID)
}

// SetPutinEnterprise sets the "putin_enterprise" edge to the Enterprise entity.
func (ebsc *EnterpriseBatterySwapCreate) SetPutinEnterprise(e *Enterprise) *EnterpriseBatterySwapCreate {
	return ebsc.SetPutinEnterpriseID(e.ID)
}

// SetPutinStation sets the "putin_station" edge to the EnterpriseStation entity.
func (ebsc *EnterpriseBatterySwapCreate) SetPutinStation(e *EnterpriseStation) *EnterpriseBatterySwapCreate {
	return ebsc.SetPutinStationID(e.ID)
}

// SetPutoutBattery sets the "putout_battery" edge to the Battery entity.
func (ebsc *EnterpriseBatterySwapCreate) SetPutoutBattery(b *Battery) *EnterpriseBatterySwapCreate {
	return ebsc.SetPutoutBatteryID(b.ID)
}

// SetPutoutEnterprise sets the "putout_enterprise" edge to the Enterprise entity.
func (ebsc *EnterpriseBatterySwapCreate) SetPutoutEnterprise(e *Enterprise) *EnterpriseBatterySwapCreate {
	return ebsc.SetPutoutEnterpriseID(e.ID)
}

// SetPutoutStation sets the "putout_station" edge to the EnterpriseStation entity.
func (ebsc *EnterpriseBatterySwapCreate) SetPutoutStation(e *EnterpriseStation) *EnterpriseBatterySwapCreate {
	return ebsc.SetPutoutStationID(e.ID)
}

// Mutation returns the EnterpriseBatterySwapMutation object of the builder.
func (ebsc *EnterpriseBatterySwapCreate) Mutation() *EnterpriseBatterySwapMutation {
	return ebsc.mutation
}

// Save creates the EnterpriseBatterySwap in the database.
func (ebsc *EnterpriseBatterySwapCreate) Save(ctx context.Context) (*EnterpriseBatterySwap, error) {
	ebsc.defaults()
	return withHooks(ctx, ebsc.sqlSave, ebsc.mutation, ebsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ebsc *EnterpriseBatterySwapCreate) SaveX(ctx context.Context) *EnterpriseBatterySwap {
	v, err := ebsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebsc *EnterpriseBatterySwapCreate) Exec(ctx context.Context) error {
	_, err := ebsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebsc *EnterpriseBatterySwapCreate) ExecX(ctx context.Context) {
	if err := ebsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebsc *EnterpriseBatterySwapCreate) defaults() {
	if _, ok := ebsc.mutation.CreatedAt(); !ok {
		v := enterprisebatteryswap.DefaultCreatedAt()
		ebsc.mutation.SetCreatedAt(v)
	}
	if _, ok := ebsc.mutation.UpdatedAt(); !ok {
		v := enterprisebatteryswap.DefaultUpdatedAt()
		ebsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ebsc *EnterpriseBatterySwapCreate) check() error {
	if _, ok := ebsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EnterpriseBatterySwap.created_at"`)}
	}
	if _, ok := ebsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EnterpriseBatterySwap.updated_at"`)}
	}
	if _, ok := ebsc.mutation.ExchangeID(); !ok {
		return &ValidationError{Name: "exchange_id", err: errors.New(`ent: missing required field "EnterpriseBatterySwap.exchange_id"`)}
	}
	if _, ok := ebsc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet_id", err: errors.New(`ent: missing required field "EnterpriseBatterySwap.cabinet_id"`)}
	}
	if _, ok := ebsc.mutation.PutinBatteryID(); !ok {
		return &ValidationError{Name: "putin_battery_id", err: errors.New(`ent: missing required field "EnterpriseBatterySwap.putin_battery_id"`)}
	}
	if _, ok := ebsc.mutation.PutinBatterySn(); !ok {
		return &ValidationError{Name: "putin_battery_sn", err: errors.New(`ent: missing required field "EnterpriseBatterySwap.putin_battery_sn"`)}
	}
	if _, ok := ebsc.mutation.PutoutBatteryID(); !ok {
		return &ValidationError{Name: "putout_battery_id", err: errors.New(`ent: missing required field "EnterpriseBatterySwap.putout_battery_id"`)}
	}
	if _, ok := ebsc.mutation.PutoutBatterySn(); !ok {
		return &ValidationError{Name: "putout_battery_sn", err: errors.New(`ent: missing required field "EnterpriseBatterySwap.putout_battery_sn"`)}
	}
	if _, ok := ebsc.mutation.ExchangeID(); !ok {
		return &ValidationError{Name: "exchange", err: errors.New(`ent: missing required edge "EnterpriseBatterySwap.exchange"`)}
	}
	if _, ok := ebsc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet", err: errors.New(`ent: missing required edge "EnterpriseBatterySwap.cabinet"`)}
	}
	if _, ok := ebsc.mutation.PutinBatteryID(); !ok {
		return &ValidationError{Name: "putin_battery", err: errors.New(`ent: missing required edge "EnterpriseBatterySwap.putin_battery"`)}
	}
	if _, ok := ebsc.mutation.PutoutBatteryID(); !ok {
		return &ValidationError{Name: "putout_battery", err: errors.New(`ent: missing required edge "EnterpriseBatterySwap.putout_battery"`)}
	}
	return nil
}

func (ebsc *EnterpriseBatterySwapCreate) sqlSave(ctx context.Context) (*EnterpriseBatterySwap, error) {
	if err := ebsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ebsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ebsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ebsc.mutation.id = &_node.ID
	ebsc.mutation.done = true
	return _node, nil
}

func (ebsc *EnterpriseBatterySwapCreate) createSpec() (*EnterpriseBatterySwap, *sqlgraph.CreateSpec) {
	var (
		_node = &EnterpriseBatterySwap{config: ebsc.config}
		_spec = sqlgraph.NewCreateSpec(enterprisebatteryswap.Table, sqlgraph.NewFieldSpec(enterprisebatteryswap.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ebsc.conflict
	if value, ok := ebsc.mutation.CreatedAt(); ok {
		_spec.SetField(enterprisebatteryswap.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ebsc.mutation.UpdatedAt(); ok {
		_spec.SetField(enterprisebatteryswap.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ebsc.mutation.PutinBatterySn(); ok {
		_spec.SetField(enterprisebatteryswap.FieldPutinBatterySn, field.TypeString, value)
		_node.PutinBatterySn = value
	}
	if value, ok := ebsc.mutation.PutoutBatterySn(); ok {
		_spec.SetField(enterprisebatteryswap.FieldPutoutBatterySn, field.TypeString, value)
		_node.PutoutBatterySn = value
	}
	if nodes := ebsc.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.ExchangeTable,
			Columns: []string{enterprisebatteryswap.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExchangeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebsc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.CabinetTable,
			Columns: []string{enterprisebatteryswap.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebsc.mutation.PutinBatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutinBatteryTable,
			Columns: []string{enterprisebatteryswap.PutinBatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PutinBatteryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebsc.mutation.PutinEnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutinEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PutinEnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebsc.mutation.PutinStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinStationTable,
			Columns: []string{enterprisebatteryswap.PutinStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PutinStationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebsc.mutation.PutoutBatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutoutBatteryTable,
			Columns: []string{enterprisebatteryswap.PutoutBatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PutoutBatteryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebsc.mutation.PutoutEnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutoutEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PutoutEnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebsc.mutation.PutoutStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutStationTable,
			Columns: []string{enterprisebatteryswap.PutoutStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PutoutStationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseBatterySwap.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseBatterySwapUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ebsc *EnterpriseBatterySwapCreate) OnConflict(opts ...sql.ConflictOption) *EnterpriseBatterySwapUpsertOne {
	ebsc.conflict = opts
	return &EnterpriseBatterySwapUpsertOne{
		create: ebsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseBatterySwap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ebsc *EnterpriseBatterySwapCreate) OnConflictColumns(columns ...string) *EnterpriseBatterySwapUpsertOne {
	ebsc.conflict = append(ebsc.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseBatterySwapUpsertOne{
		create: ebsc,
	}
}

type (
	// EnterpriseBatterySwapUpsertOne is the builder for "upsert"-ing
	//  one EnterpriseBatterySwap node.
	EnterpriseBatterySwapUpsertOne struct {
		create *EnterpriseBatterySwapCreate
	}

	// EnterpriseBatterySwapUpsert is the "OnConflict" setter.
	EnterpriseBatterySwapUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseBatterySwapUpsert) SetUpdatedAt(v time.Time) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdateUpdatedAt() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldUpdatedAt)
	return u
}

// SetExchangeID sets the "exchange_id" field.
func (u *EnterpriseBatterySwapUpsert) SetExchangeID(v uint64) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldExchangeID, v)
	return u
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdateExchangeID() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldExchangeID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *EnterpriseBatterySwapUpsert) SetCabinetID(v uint64) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdateCabinetID() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldCabinetID)
	return u
}

// SetPutinBatteryID sets the "putin_battery_id" field.
func (u *EnterpriseBatterySwapUpsert) SetPutinBatteryID(v uint64) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldPutinBatteryID, v)
	return u
}

// UpdatePutinBatteryID sets the "putin_battery_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdatePutinBatteryID() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldPutinBatteryID)
	return u
}

// SetPutinBatterySn sets the "putin_battery_sn" field.
func (u *EnterpriseBatterySwapUpsert) SetPutinBatterySn(v string) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldPutinBatterySn, v)
	return u
}

// UpdatePutinBatterySn sets the "putin_battery_sn" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdatePutinBatterySn() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldPutinBatterySn)
	return u
}

// SetPutinEnterpriseID sets the "putin_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsert) SetPutinEnterpriseID(v uint64) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldPutinEnterpriseID, v)
	return u
}

// UpdatePutinEnterpriseID sets the "putin_enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdatePutinEnterpriseID() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldPutinEnterpriseID)
	return u
}

// ClearPutinEnterpriseID clears the value of the "putin_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsert) ClearPutinEnterpriseID() *EnterpriseBatterySwapUpsert {
	u.SetNull(enterprisebatteryswap.FieldPutinEnterpriseID)
	return u
}

// SetPutinStationID sets the "putin_station_id" field.
func (u *EnterpriseBatterySwapUpsert) SetPutinStationID(v uint64) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldPutinStationID, v)
	return u
}

// UpdatePutinStationID sets the "putin_station_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdatePutinStationID() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldPutinStationID)
	return u
}

// ClearPutinStationID clears the value of the "putin_station_id" field.
func (u *EnterpriseBatterySwapUpsert) ClearPutinStationID() *EnterpriseBatterySwapUpsert {
	u.SetNull(enterprisebatteryswap.FieldPutinStationID)
	return u
}

// SetPutoutBatteryID sets the "putout_battery_id" field.
func (u *EnterpriseBatterySwapUpsert) SetPutoutBatteryID(v uint64) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldPutoutBatteryID, v)
	return u
}

// UpdatePutoutBatteryID sets the "putout_battery_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdatePutoutBatteryID() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldPutoutBatteryID)
	return u
}

// SetPutoutBatterySn sets the "putout_battery_sn" field.
func (u *EnterpriseBatterySwapUpsert) SetPutoutBatterySn(v string) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldPutoutBatterySn, v)
	return u
}

// UpdatePutoutBatterySn sets the "putout_battery_sn" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdatePutoutBatterySn() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldPutoutBatterySn)
	return u
}

// SetPutoutEnterpriseID sets the "putout_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsert) SetPutoutEnterpriseID(v uint64) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldPutoutEnterpriseID, v)
	return u
}

// UpdatePutoutEnterpriseID sets the "putout_enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdatePutoutEnterpriseID() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldPutoutEnterpriseID)
	return u
}

// ClearPutoutEnterpriseID clears the value of the "putout_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsert) ClearPutoutEnterpriseID() *EnterpriseBatterySwapUpsert {
	u.SetNull(enterprisebatteryswap.FieldPutoutEnterpriseID)
	return u
}

// SetPutoutStationID sets the "putout_station_id" field.
func (u *EnterpriseBatterySwapUpsert) SetPutoutStationID(v uint64) *EnterpriseBatterySwapUpsert {
	u.Set(enterprisebatteryswap.FieldPutoutStationID, v)
	return u
}

// UpdatePutoutStationID sets the "putout_station_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsert) UpdatePutoutStationID() *EnterpriseBatterySwapUpsert {
	u.SetExcluded(enterprisebatteryswap.FieldPutoutStationID)
	return u
}

// ClearPutoutStationID clears the value of the "putout_station_id" field.
func (u *EnterpriseBatterySwapUpsert) ClearPutoutStationID() *EnterpriseBatterySwapUpsert {
	u.SetNull(enterprisebatteryswap.FieldPutoutStationID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EnterpriseBatterySwap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EnterpriseBatterySwapUpsertOne) UpdateNewValues() *EnterpriseBatterySwapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(enterprisebatteryswap.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterpriseBatterySwap.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EnterpriseBatterySwapUpsertOne) Ignore() *EnterpriseBatterySwapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseBatterySwapUpsertOne) DoNothing() *EnterpriseBatterySwapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseBatterySwapCreate.OnConflict
// documentation for more info.
func (u *EnterpriseBatterySwapUpsertOne) Update(set func(*EnterpriseBatterySwapUpsert)) *EnterpriseBatterySwapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseBatterySwapUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseBatterySwapUpsertOne) SetUpdatedAt(v time.Time) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdateUpdatedAt() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetExchangeID sets the "exchange_id" field.
func (u *EnterpriseBatterySwapUpsertOne) SetExchangeID(v uint64) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetExchangeID(v)
	})
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdateExchangeID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdateExchangeID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *EnterpriseBatterySwapUpsertOne) SetCabinetID(v uint64) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdateCabinetID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdateCabinetID()
	})
}

// SetPutinBatteryID sets the "putin_battery_id" field.
func (u *EnterpriseBatterySwapUpsertOne) SetPutinBatteryID(v uint64) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutinBatteryID(v)
	})
}

// UpdatePutinBatteryID sets the "putin_battery_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdatePutinBatteryID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutinBatteryID()
	})
}

// SetPutinBatterySn sets the "putin_battery_sn" field.
func (u *EnterpriseBatterySwapUpsertOne) SetPutinBatterySn(v string) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutinBatterySn(v)
	})
}

// UpdatePutinBatterySn sets the "putin_battery_sn" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdatePutinBatterySn() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutinBatterySn()
	})
}

// SetPutinEnterpriseID sets the "putin_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsertOne) SetPutinEnterpriseID(v uint64) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutinEnterpriseID(v)
	})
}

// UpdatePutinEnterpriseID sets the "putin_enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdatePutinEnterpriseID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutinEnterpriseID()
	})
}

// ClearPutinEnterpriseID clears the value of the "putin_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsertOne) ClearPutinEnterpriseID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.ClearPutinEnterpriseID()
	})
}

// SetPutinStationID sets the "putin_station_id" field.
func (u *EnterpriseBatterySwapUpsertOne) SetPutinStationID(v uint64) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutinStationID(v)
	})
}

// UpdatePutinStationID sets the "putin_station_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdatePutinStationID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutinStationID()
	})
}

// ClearPutinStationID clears the value of the "putin_station_id" field.
func (u *EnterpriseBatterySwapUpsertOne) ClearPutinStationID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.ClearPutinStationID()
	})
}

// SetPutoutBatteryID sets the "putout_battery_id" field.
func (u *EnterpriseBatterySwapUpsertOne) SetPutoutBatteryID(v uint64) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutoutBatteryID(v)
	})
}

// UpdatePutoutBatteryID sets the "putout_battery_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdatePutoutBatteryID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutoutBatteryID()
	})
}

// SetPutoutBatterySn sets the "putout_battery_sn" field.
func (u *EnterpriseBatterySwapUpsertOne) SetPutoutBatterySn(v string) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutoutBatterySn(v)
	})
}

// UpdatePutoutBatterySn sets the "putout_battery_sn" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdatePutoutBatterySn() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutoutBatterySn()
	})
}

// SetPutoutEnterpriseID sets the "putout_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsertOne) SetPutoutEnterpriseID(v uint64) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutoutEnterpriseID(v)
	})
}

// UpdatePutoutEnterpriseID sets the "putout_enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdatePutoutEnterpriseID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutoutEnterpriseID()
	})
}

// ClearPutoutEnterpriseID clears the value of the "putout_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsertOne) ClearPutoutEnterpriseID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.ClearPutoutEnterpriseID()
	})
}

// SetPutoutStationID sets the "putout_station_id" field.
func (u *EnterpriseBatterySwapUpsertOne) SetPutoutStationID(v uint64) *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutoutStationID(v)
	})
}

// UpdatePutoutStationID sets the "putout_station_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertOne) UpdatePutoutStationID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutoutStationID()
	})
}

// ClearPutoutStationID clears the value of the "putout_station_id" field.
func (u *EnterpriseBatterySwapUpsertOne) ClearPutoutStationID() *EnterpriseBatterySwapUpsertOne {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.ClearPutoutStationID()
	})
}

// Exec executes the query.
func (u *EnterpriseBatterySwapUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseBatterySwapCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseBatterySwapUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnterpriseBatterySwapUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnterpriseBatterySwapUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnterpriseBatterySwapCreateBulk is the builder for creating many EnterpriseBatterySwap entities in bulk.
type EnterpriseBatterySwapCreateBulk struct {
	config
	builders []*EnterpriseBatterySwapCreate
	conflict []sql.ConflictOption
}

// Save creates the EnterpriseBatterySwap entities in the database.
func (ebscb *EnterpriseBatterySwapCreateBulk) Save(ctx context.Context) ([]*EnterpriseBatterySwap, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ebscb.builders))
	nodes := make([]*EnterpriseBatterySwap, len(ebscb.builders))
	mutators := make([]Mutator, len(ebscb.builders))
	for i := range ebscb.builders {
		func(i int, root context.Context) {
			builder := ebscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnterpriseBatterySwapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ebscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ebscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ebscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ebscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ebscb *EnterpriseBatterySwapCreateBulk) SaveX(ctx context.Context) []*EnterpriseBatterySwap {
	v, err := ebscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebscb *EnterpriseBatterySwapCreateBulk) Exec(ctx context.Context) error {
	_, err := ebscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebscb *EnterpriseBatterySwapCreateBulk) ExecX(ctx context.Context) {
	if err := ebscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseBatterySwap.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseBatterySwapUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ebscb *EnterpriseBatterySwapCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnterpriseBatterySwapUpsertBulk {
	ebscb.conflict = opts
	return &EnterpriseBatterySwapUpsertBulk{
		create: ebscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseBatterySwap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ebscb *EnterpriseBatterySwapCreateBulk) OnConflictColumns(columns ...string) *EnterpriseBatterySwapUpsertBulk {
	ebscb.conflict = append(ebscb.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseBatterySwapUpsertBulk{
		create: ebscb,
	}
}

// EnterpriseBatterySwapUpsertBulk is the builder for "upsert"-ing
// a bulk of EnterpriseBatterySwap nodes.
type EnterpriseBatterySwapUpsertBulk struct {
	create *EnterpriseBatterySwapCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnterpriseBatterySwap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EnterpriseBatterySwapUpsertBulk) UpdateNewValues() *EnterpriseBatterySwapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(enterprisebatteryswap.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterpriseBatterySwap.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EnterpriseBatterySwapUpsertBulk) Ignore() *EnterpriseBatterySwapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseBatterySwapUpsertBulk) DoNothing() *EnterpriseBatterySwapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseBatterySwapCreateBulk.OnConflict
// documentation for more info.
func (u *EnterpriseBatterySwapUpsertBulk) Update(set func(*EnterpriseBatterySwapUpsert)) *EnterpriseBatterySwapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseBatterySwapUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetUpdatedAt(v time.Time) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdateUpdatedAt() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetExchangeID sets the "exchange_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetExchangeID(v uint64) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetExchangeID(v)
	})
}

// UpdateExchangeID sets the "exchange_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdateExchangeID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdateExchangeID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetCabinetID(v uint64) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdateCabinetID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdateCabinetID()
	})
}

// SetPutinBatteryID sets the "putin_battery_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetPutinBatteryID(v uint64) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutinBatteryID(v)
	})
}

// UpdatePutinBatteryID sets the "putin_battery_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdatePutinBatteryID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutinBatteryID()
	})
}

// SetPutinBatterySn sets the "putin_battery_sn" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetPutinBatterySn(v string) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutinBatterySn(v)
	})
}

// UpdatePutinBatterySn sets the "putin_battery_sn" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdatePutinBatterySn() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutinBatterySn()
	})
}

// SetPutinEnterpriseID sets the "putin_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetPutinEnterpriseID(v uint64) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutinEnterpriseID(v)
	})
}

// UpdatePutinEnterpriseID sets the "putin_enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdatePutinEnterpriseID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutinEnterpriseID()
	})
}

// ClearPutinEnterpriseID clears the value of the "putin_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) ClearPutinEnterpriseID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.ClearPutinEnterpriseID()
	})
}

// SetPutinStationID sets the "putin_station_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetPutinStationID(v uint64) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutinStationID(v)
	})
}

// UpdatePutinStationID sets the "putin_station_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdatePutinStationID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutinStationID()
	})
}

// ClearPutinStationID clears the value of the "putin_station_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) ClearPutinStationID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.ClearPutinStationID()
	})
}

// SetPutoutBatteryID sets the "putout_battery_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetPutoutBatteryID(v uint64) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutoutBatteryID(v)
	})
}

// UpdatePutoutBatteryID sets the "putout_battery_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdatePutoutBatteryID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutoutBatteryID()
	})
}

// SetPutoutBatterySn sets the "putout_battery_sn" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetPutoutBatterySn(v string) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutoutBatterySn(v)
	})
}

// UpdatePutoutBatterySn sets the "putout_battery_sn" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdatePutoutBatterySn() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutoutBatterySn()
	})
}

// SetPutoutEnterpriseID sets the "putout_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetPutoutEnterpriseID(v uint64) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutoutEnterpriseID(v)
	})
}

// UpdatePutoutEnterpriseID sets the "putout_enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdatePutoutEnterpriseID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutoutEnterpriseID()
	})
}

// ClearPutoutEnterpriseID clears the value of the "putout_enterprise_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) ClearPutoutEnterpriseID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.ClearPutoutEnterpriseID()
	})
}

// SetPutoutStationID sets the "putout_station_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) SetPutoutStationID(v uint64) *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.SetPutoutStationID(v)
	})
}

// UpdatePutoutStationID sets the "putout_station_id" field to the value that was provided on create.
func (u *EnterpriseBatterySwapUpsertBulk) UpdatePutoutStationID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.UpdatePutoutStationID()
	})
}

// ClearPutoutStationID clears the value of the "putout_station_id" field.
func (u *EnterpriseBatterySwapUpsertBulk) ClearPutoutStationID() *EnterpriseBatterySwapUpsertBulk {
	return u.Update(func(s *EnterpriseBatterySwapUpsert) {
		s.ClearPutoutStationID()
	})
}

// Exec executes the query.
func (u *EnterpriseBatterySwapUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EnterpriseBatterySwapCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseBatterySwapCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseBatterySwapUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
