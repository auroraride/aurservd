// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// Ebike is the model entity for the Ebike schema.
type Ebike struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// BrandID holds the value of the "brand_id" field.
	BrandID uint64 `json:"brand_id,omitempty"`
	// 骑手ID
	RiderID *uint64 `json:"rider_id,omitempty"`
	// 门店ID
	StoreID *uint64 `json:"store_id,omitempty"`
	// 企业ID
	EnterpriseID *uint64 `json:"enterprise_id,omitempty"`
	// 站点ID
	StationID *uint64 `json:"station_id,omitempty"`
	// 状态
	Status model.EbikeStatus `json:"status,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// 车架号
	Sn string `json:"sn,omitempty"`
	// 车牌号
	Plate *string `json:"plate,omitempty"`
	// 终端编号
	Machine *string `json:"machine,omitempty"`
	// SIM卡号
	Sim *string `json:"sim,omitempty"`
	// 颜色
	Color string `json:"color,omitempty"`
	// 生产批次(出厂日期)
	ExFactory string `json:"ex_factory,omitempty"`
	// 以租代购骑手ID，生成后禁止修改
	RtoRiderID *uint64 `json:"rto_rider_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EbikeQuery when eager-loading is set.
	Edges        EbikeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EbikeEdges holds the relations/edges for other nodes in the graph.
type EbikeEdges struct {
	// Brand holds the value of the brand edge.
	Brand *EbikeBrand `json:"brand,omitempty"`
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Station holds the value of the station edge.
	Station *EnterpriseStation `json:"station,omitempty"`
	// Allocates holds the value of the allocates edge.
	Allocates []*Allocate `json:"allocates,omitempty"`
	// RtoRider holds the value of the rto_rider edge.
	RtoRider *Rider `json:"rto_rider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EbikeEdges) BrandOrErr() (*EbikeBrand, error) {
	if e.Brand != nil {
		return e.Brand, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ebikebrand.Label}
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EbikeEdges) RiderOrErr() (*Rider, error) {
	if e.Rider != nil {
		return e.Rider, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: rider.Label}
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EbikeEdges) StoreOrErr() (*Store, error) {
	if e.Store != nil {
		return e.Store, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: store.Label}
	}
	return nil, &NotLoadedError{edge: "store"}
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EbikeEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.Enterprise != nil {
		return e.Enterprise, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: enterprise.Label}
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EbikeEdges) StationOrErr() (*EnterpriseStation, error) {
	if e.Station != nil {
		return e.Station, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: enterprisestation.Label}
	}
	return nil, &NotLoadedError{edge: "station"}
}

// AllocatesOrErr returns the Allocates value or an error if the edge
// was not loaded in eager-loading.
func (e EbikeEdges) AllocatesOrErr() ([]*Allocate, error) {
	if e.loadedTypes[5] {
		return e.Allocates, nil
	}
	return nil, &NotLoadedError{edge: "allocates"}
}

// RtoRiderOrErr returns the RtoRider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EbikeEdges) RtoRiderOrErr() (*Rider, error) {
	if e.RtoRider != nil {
		return e.RtoRider, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: rider.Label}
	}
	return nil, &NotLoadedError{edge: "rto_rider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ebike) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ebike.FieldCreator, ebike.FieldLastModifier:
			values[i] = new([]byte)
		case ebike.FieldStatus:
			values[i] = new(model.EbikeStatus)
		case ebike.FieldEnable:
			values[i] = new(sql.NullBool)
		case ebike.FieldID, ebike.FieldBrandID, ebike.FieldRiderID, ebike.FieldStoreID, ebike.FieldEnterpriseID, ebike.FieldStationID, ebike.FieldRtoRiderID:
			values[i] = new(sql.NullInt64)
		case ebike.FieldRemark, ebike.FieldSn, ebike.FieldPlate, ebike.FieldMachine, ebike.FieldSim, ebike.FieldColor, ebike.FieldExFactory:
			values[i] = new(sql.NullString)
		case ebike.FieldCreatedAt, ebike.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ebike fields.
func (e *Ebike) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ebike.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case ebike.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case ebike.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case ebike.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case ebike.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case ebike.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				e.Remark = value.String
			}
		case ebike.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				e.BrandID = uint64(value.Int64)
			}
		case ebike.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				e.RiderID = new(uint64)
				*e.RiderID = uint64(value.Int64)
			}
		case ebike.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				e.StoreID = new(uint64)
				*e.StoreID = uint64(value.Int64)
			}
		case ebike.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				e.EnterpriseID = new(uint64)
				*e.EnterpriseID = uint64(value.Int64)
			}
		case ebike.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				e.StationID = new(uint64)
				*e.StationID = uint64(value.Int64)
			}
		case ebike.FieldStatus:
			if value, ok := values[i].(*model.EbikeStatus); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				e.Status = *value
			}
		case ebike.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				e.Enable = value.Bool
			}
		case ebike.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				e.Sn = value.String
			}
		case ebike.FieldPlate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plate", values[i])
			} else if value.Valid {
				e.Plate = new(string)
				*e.Plate = value.String
			}
		case ebike.FieldMachine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field machine", values[i])
			} else if value.Valid {
				e.Machine = new(string)
				*e.Machine = value.String
			}
		case ebike.FieldSim:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sim", values[i])
			} else if value.Valid {
				e.Sim = new(string)
				*e.Sim = value.String
			}
		case ebike.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				e.Color = value.String
			}
		case ebike.FieldExFactory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ex_factory", values[i])
			} else if value.Valid {
				e.ExFactory = value.String
			}
		case ebike.FieldRtoRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rto_rider_id", values[i])
			} else if value.Valid {
				e.RtoRiderID = new(uint64)
				*e.RtoRiderID = uint64(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ebike.
// This includes values selected through modifiers, order, etc.
func (e *Ebike) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryBrand queries the "brand" edge of the Ebike entity.
func (e *Ebike) QueryBrand() *EbikeBrandQuery {
	return NewEbikeClient(e.config).QueryBrand(e)
}

// QueryRider queries the "rider" edge of the Ebike entity.
func (e *Ebike) QueryRider() *RiderQuery {
	return NewEbikeClient(e.config).QueryRider(e)
}

// QueryStore queries the "store" edge of the Ebike entity.
func (e *Ebike) QueryStore() *StoreQuery {
	return NewEbikeClient(e.config).QueryStore(e)
}

// QueryEnterprise queries the "enterprise" edge of the Ebike entity.
func (e *Ebike) QueryEnterprise() *EnterpriseQuery {
	return NewEbikeClient(e.config).QueryEnterprise(e)
}

// QueryStation queries the "station" edge of the Ebike entity.
func (e *Ebike) QueryStation() *EnterpriseStationQuery {
	return NewEbikeClient(e.config).QueryStation(e)
}

// QueryAllocates queries the "allocates" edge of the Ebike entity.
func (e *Ebike) QueryAllocates() *AllocateQuery {
	return NewEbikeClient(e.config).QueryAllocates(e)
}

// QueryRtoRider queries the "rto_rider" edge of the Ebike entity.
func (e *Ebike) QueryRtoRider() *RiderQuery {
	return NewEbikeClient(e.config).QueryRtoRider(e)
}

// Update returns a builder for updating this Ebike.
// Note that you need to call Ebike.Unwrap() before calling this method if this Ebike
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Ebike) Update() *EbikeUpdateOne {
	return NewEbikeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Ebike entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Ebike) Unwrap() *Ebike {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ebike is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Ebike) String() string {
	var builder strings.Builder
	builder.WriteString("Ebike(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", e.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", e.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(e.Remark)
	builder.WriteString(", ")
	builder.WriteString("brand_id=")
	builder.WriteString(fmt.Sprintf("%v", e.BrandID))
	builder.WriteString(", ")
	if v := e.RiderID; v != nil {
		builder.WriteString("rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := e.StoreID; v != nil {
		builder.WriteString("store_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := e.EnterpriseID; v != nil {
		builder.WriteString("enterprise_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := e.StationID; v != nil {
		builder.WriteString("station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", e.Enable))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(e.Sn)
	builder.WriteString(", ")
	if v := e.Plate; v != nil {
		builder.WriteString("plate=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.Machine; v != nil {
		builder.WriteString("machine=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := e.Sim; v != nil {
		builder.WriteString("sim=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(e.Color)
	builder.WriteString(", ")
	builder.WriteString("ex_factory=")
	builder.WriteString(e.ExFactory)
	builder.WriteString(", ")
	if v := e.RtoRiderID; v != nil {
		builder.WriteString("rto_rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Ebikes is a parsable slice of Ebike.
type Ebikes []*Ebike
