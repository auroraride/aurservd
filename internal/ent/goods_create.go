// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/storegoods"
)

// GoodsCreate is the builder for creating a Goods entity.
type GoodsCreate struct {
	config
	mutation *GoodsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gc *GoodsCreate) SetCreatedAt(t time.Time) *GoodsCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GoodsCreate) SetNillableCreatedAt(t *time.Time) *GoodsCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GoodsCreate) SetUpdatedAt(t time.Time) *GoodsCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GoodsCreate) SetNillableUpdatedAt(t *time.Time) *GoodsCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetDeletedAt sets the "deleted_at" field.
func (gc *GoodsCreate) SetDeletedAt(t time.Time) *GoodsCreate {
	gc.mutation.SetDeletedAt(t)
	return gc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gc *GoodsCreate) SetNillableDeletedAt(t *time.Time) *GoodsCreate {
	if t != nil {
		gc.SetDeletedAt(*t)
	}
	return gc
}

// SetCreator sets the "creator" field.
func (gc *GoodsCreate) SetCreator(m *model.Modifier) *GoodsCreate {
	gc.mutation.SetCreator(m)
	return gc
}

// SetLastModifier sets the "last_modifier" field.
func (gc *GoodsCreate) SetLastModifier(m *model.Modifier) *GoodsCreate {
	gc.mutation.SetLastModifier(m)
	return gc
}

// SetRemark sets the "remark" field.
func (gc *GoodsCreate) SetRemark(s string) *GoodsCreate {
	gc.mutation.SetRemark(s)
	return gc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (gc *GoodsCreate) SetNillableRemark(s *string) *GoodsCreate {
	if s != nil {
		gc.SetRemark(*s)
	}
	return gc
}

// SetSn sets the "sn" field.
func (gc *GoodsCreate) SetSn(s string) *GoodsCreate {
	gc.mutation.SetSn(s)
	return gc
}

// SetName sets the "name" field.
func (gc *GoodsCreate) SetName(s string) *GoodsCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetType sets the "type" field.
func (gc *GoodsCreate) SetType(u uint8) *GoodsCreate {
	gc.mutation.SetType(u)
	return gc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gc *GoodsCreate) SetNillableType(u *uint8) *GoodsCreate {
	if u != nil {
		gc.SetType(*u)
	}
	return gc
}

// SetLables sets the "lables" field.
func (gc *GoodsCreate) SetLables(s []string) *GoodsCreate {
	gc.mutation.SetLables(s)
	return gc
}

// SetPrice sets the "price" field.
func (gc *GoodsCreate) SetPrice(f float64) *GoodsCreate {
	gc.mutation.SetPrice(f)
	return gc
}

// SetWeight sets the "weight" field.
func (gc *GoodsCreate) SetWeight(i int) *GoodsCreate {
	gc.mutation.SetWeight(i)
	return gc
}

// SetHeadPic sets the "head_pic" field.
func (gc *GoodsCreate) SetHeadPic(s string) *GoodsCreate {
	gc.mutation.SetHeadPic(s)
	return gc
}

// SetPhotos sets the "photos" field.
func (gc *GoodsCreate) SetPhotos(s []string) *GoodsCreate {
	gc.mutation.SetPhotos(s)
	return gc
}

// SetIntro sets the "intro" field.
func (gc *GoodsCreate) SetIntro(s []string) *GoodsCreate {
	gc.mutation.SetIntro(s)
	return gc
}

// SetStatus sets the "status" field.
func (gc *GoodsCreate) SetStatus(u uint8) *GoodsCreate {
	gc.mutation.SetStatus(u)
	return gc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gc *GoodsCreate) SetNillableStatus(u *uint8) *GoodsCreate {
	if u != nil {
		gc.SetStatus(*u)
	}
	return gc
}

// SetInstallment sets the "installment" field.
func (gc *GoodsCreate) SetInstallment(f [][]float64) *GoodsCreate {
	gc.mutation.SetInstallment(f)
	return gc
}

// AddStoreIDs adds the "stores" edge to the StoreGoods entity by IDs.
func (gc *GoodsCreate) AddStoreIDs(ids ...uint64) *GoodsCreate {
	gc.mutation.AddStoreIDs(ids...)
	return gc
}

// AddStores adds the "stores" edges to the StoreGoods entity.
func (gc *GoodsCreate) AddStores(s ...*StoreGoods) *GoodsCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gc.AddStoreIDs(ids...)
}

// Mutation returns the GoodsMutation object of the builder.
func (gc *GoodsCreate) Mutation() *GoodsMutation {
	return gc.mutation
}

// Save creates the Goods in the database.
func (gc *GoodsCreate) Save(ctx context.Context) (*Goods, error) {
	if err := gc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GoodsCreate) SaveX(ctx context.Context) *Goods {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GoodsCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GoodsCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GoodsCreate) defaults() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		if goods.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized goods.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := goods.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		if goods.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goods.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goods.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.GetType(); !ok {
		v := goods.DefaultType
		gc.mutation.SetType(v)
	}
	if _, ok := gc.mutation.Status(); !ok {
		v := goods.DefaultStatus
		gc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gc *GoodsCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Goods.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Goods.updated_at"`)}
	}
	if _, ok := gc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Goods.sn"`)}
	}
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Goods.name"`)}
	}
	if _, ok := gc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Goods.type"`)}
	}
	if _, ok := gc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Goods.price"`)}
	}
	if _, ok := gc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`ent: missing required field "Goods.weight"`)}
	}
	if _, ok := gc.mutation.HeadPic(); !ok {
		return &ValidationError{Name: "head_pic", err: errors.New(`ent: missing required field "Goods.head_pic"`)}
	}
	if _, ok := gc.mutation.Photos(); !ok {
		return &ValidationError{Name: "photos", err: errors.New(`ent: missing required field "Goods.photos"`)}
	}
	if _, ok := gc.mutation.Intro(); !ok {
		return &ValidationError{Name: "intro", err: errors.New(`ent: missing required field "Goods.intro"`)}
	}
	if _, ok := gc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Goods.status"`)}
	}
	return nil
}

func (gc *GoodsCreate) sqlSave(ctx context.Context) (*Goods, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GoodsCreate) createSpec() (*Goods, *sqlgraph.CreateSpec) {
	var (
		_node = &Goods{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(goods.Table, sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = gc.conflict
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(goods.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(goods.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.DeletedAt(); ok {
		_spec.SetField(goods.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := gc.mutation.Creator(); ok {
		_spec.SetField(goods.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := gc.mutation.LastModifier(); ok {
		_spec.SetField(goods.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := gc.mutation.Remark(); ok {
		_spec.SetField(goods.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := gc.mutation.Sn(); ok {
		_spec.SetField(goods.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(goods.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.GetType(); ok {
		_spec.SetField(goods.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := gc.mutation.Lables(); ok {
		_spec.SetField(goods.FieldLables, field.TypeJSON, value)
		_node.Lables = value
	}
	if value, ok := gc.mutation.Price(); ok {
		_spec.SetField(goods.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := gc.mutation.Weight(); ok {
		_spec.SetField(goods.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := gc.mutation.HeadPic(); ok {
		_spec.SetField(goods.FieldHeadPic, field.TypeString, value)
		_node.HeadPic = value
	}
	if value, ok := gc.mutation.Photos(); ok {
		_spec.SetField(goods.FieldPhotos, field.TypeJSON, value)
		_node.Photos = value
	}
	if value, ok := gc.mutation.Intro(); ok {
		_spec.SetField(goods.FieldIntro, field.TypeJSON, value)
		_node.Intro = value
	}
	if value, ok := gc.mutation.Status(); ok {
		_spec.SetField(goods.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := gc.mutation.Installment(); ok {
		_spec.SetField(goods.FieldInstallment, field.TypeJSON, value)
		_node.Installment = value
	}
	if nodes := gc.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   goods.StoresTable,
			Columns: []string{goods.StoresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Goods.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gc *GoodsCreate) OnConflict(opts ...sql.ConflictOption) *GoodsUpsertOne {
	gc.conflict = opts
	return &GoodsUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Goods.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GoodsCreate) OnConflictColumns(columns ...string) *GoodsUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GoodsUpsertOne{
		create: gc,
	}
}

type (
	// GoodsUpsertOne is the builder for "upsert"-ing
	//  one Goods node.
	GoodsUpsertOne struct {
		create *GoodsCreate
	}

	// GoodsUpsert is the "OnConflict" setter.
	GoodsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodsUpsert) SetUpdatedAt(v time.Time) *GoodsUpsert {
	u.Set(goods.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateUpdatedAt() *GoodsUpsert {
	u.SetExcluded(goods.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodsUpsert) SetDeletedAt(v time.Time) *GoodsUpsert {
	u.Set(goods.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateDeletedAt() *GoodsUpsert {
	u.SetExcluded(goods.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GoodsUpsert) ClearDeletedAt() *GoodsUpsert {
	u.SetNull(goods.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *GoodsUpsert) SetLastModifier(v *model.Modifier) *GoodsUpsert {
	u.Set(goods.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateLastModifier() *GoodsUpsert {
	u.SetExcluded(goods.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *GoodsUpsert) ClearLastModifier() *GoodsUpsert {
	u.SetNull(goods.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *GoodsUpsert) SetRemark(v string) *GoodsUpsert {
	u.Set(goods.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateRemark() *GoodsUpsert {
	u.SetExcluded(goods.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *GoodsUpsert) ClearRemark() *GoodsUpsert {
	u.SetNull(goods.FieldRemark)
	return u
}

// SetSn sets the "sn" field.
func (u *GoodsUpsert) SetSn(v string) *GoodsUpsert {
	u.Set(goods.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateSn() *GoodsUpsert {
	u.SetExcluded(goods.FieldSn)
	return u
}

// SetName sets the "name" field.
func (u *GoodsUpsert) SetName(v string) *GoodsUpsert {
	u.Set(goods.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateName() *GoodsUpsert {
	u.SetExcluded(goods.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *GoodsUpsert) SetType(v uint8) *GoodsUpsert {
	u.Set(goods.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateType() *GoodsUpsert {
	u.SetExcluded(goods.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *GoodsUpsert) AddType(v uint8) *GoodsUpsert {
	u.Add(goods.FieldType, v)
	return u
}

// SetLables sets the "lables" field.
func (u *GoodsUpsert) SetLables(v []string) *GoodsUpsert {
	u.Set(goods.FieldLables, v)
	return u
}

// UpdateLables sets the "lables" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateLables() *GoodsUpsert {
	u.SetExcluded(goods.FieldLables)
	return u
}

// ClearLables clears the value of the "lables" field.
func (u *GoodsUpsert) ClearLables() *GoodsUpsert {
	u.SetNull(goods.FieldLables)
	return u
}

// SetPrice sets the "price" field.
func (u *GoodsUpsert) SetPrice(v float64) *GoodsUpsert {
	u.Set(goods.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *GoodsUpsert) UpdatePrice() *GoodsUpsert {
	u.SetExcluded(goods.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *GoodsUpsert) AddPrice(v float64) *GoodsUpsert {
	u.Add(goods.FieldPrice, v)
	return u
}

// SetWeight sets the "weight" field.
func (u *GoodsUpsert) SetWeight(v int) *GoodsUpsert {
	u.Set(goods.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateWeight() *GoodsUpsert {
	u.SetExcluded(goods.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *GoodsUpsert) AddWeight(v int) *GoodsUpsert {
	u.Add(goods.FieldWeight, v)
	return u
}

// SetHeadPic sets the "head_pic" field.
func (u *GoodsUpsert) SetHeadPic(v string) *GoodsUpsert {
	u.Set(goods.FieldHeadPic, v)
	return u
}

// UpdateHeadPic sets the "head_pic" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateHeadPic() *GoodsUpsert {
	u.SetExcluded(goods.FieldHeadPic)
	return u
}

// SetPhotos sets the "photos" field.
func (u *GoodsUpsert) SetPhotos(v []string) *GoodsUpsert {
	u.Set(goods.FieldPhotos, v)
	return u
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *GoodsUpsert) UpdatePhotos() *GoodsUpsert {
	u.SetExcluded(goods.FieldPhotos)
	return u
}

// SetIntro sets the "intro" field.
func (u *GoodsUpsert) SetIntro(v []string) *GoodsUpsert {
	u.Set(goods.FieldIntro, v)
	return u
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateIntro() *GoodsUpsert {
	u.SetExcluded(goods.FieldIntro)
	return u
}

// SetStatus sets the "status" field.
func (u *GoodsUpsert) SetStatus(v uint8) *GoodsUpsert {
	u.Set(goods.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateStatus() *GoodsUpsert {
	u.SetExcluded(goods.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *GoodsUpsert) AddStatus(v uint8) *GoodsUpsert {
	u.Add(goods.FieldStatus, v)
	return u
}

// SetInstallment sets the "installment" field.
func (u *GoodsUpsert) SetInstallment(v [][]float64) *GoodsUpsert {
	u.Set(goods.FieldInstallment, v)
	return u
}

// UpdateInstallment sets the "installment" field to the value that was provided on create.
func (u *GoodsUpsert) UpdateInstallment() *GoodsUpsert {
	u.SetExcluded(goods.FieldInstallment)
	return u
}

// ClearInstallment clears the value of the "installment" field.
func (u *GoodsUpsert) ClearInstallment() *GoodsUpsert {
	u.SetNull(goods.FieldInstallment)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Goods.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GoodsUpsertOne) UpdateNewValues() *GoodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(goods.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(goods.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Goods.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GoodsUpsertOne) Ignore() *GoodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodsUpsertOne) DoNothing() *GoodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodsCreate.OnConflict
// documentation for more info.
func (u *GoodsUpsertOne) Update(set func(*GoodsUpsert)) *GoodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodsUpsertOne) SetUpdatedAt(v time.Time) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateUpdatedAt() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodsUpsertOne) SetDeletedAt(v time.Time) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateDeletedAt() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GoodsUpsertOne) ClearDeletedAt() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *GoodsUpsertOne) SetLastModifier(v *model.Modifier) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateLastModifier() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *GoodsUpsertOne) ClearLastModifier() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *GoodsUpsertOne) SetRemark(v string) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateRemark() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *GoodsUpsertOne) ClearRemark() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearRemark()
	})
}

// SetSn sets the "sn" field.
func (u *GoodsUpsertOne) SetSn(v string) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateSn() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateSn()
	})
}

// SetName sets the "name" field.
func (u *GoodsUpsertOne) SetName(v string) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateName() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *GoodsUpsertOne) SetType(v uint8) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *GoodsUpsertOne) AddType(v uint8) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateType() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateType()
	})
}

// SetLables sets the "lables" field.
func (u *GoodsUpsertOne) SetLables(v []string) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetLables(v)
	})
}

// UpdateLables sets the "lables" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateLables() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateLables()
	})
}

// ClearLables clears the value of the "lables" field.
func (u *GoodsUpsertOne) ClearLables() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearLables()
	})
}

// SetPrice sets the "price" field.
func (u *GoodsUpsertOne) SetPrice(v float64) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *GoodsUpsertOne) AddPrice(v float64) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdatePrice() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdatePrice()
	})
}

// SetWeight sets the "weight" field.
func (u *GoodsUpsertOne) SetWeight(v int) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *GoodsUpsertOne) AddWeight(v int) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateWeight() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateWeight()
	})
}

// SetHeadPic sets the "head_pic" field.
func (u *GoodsUpsertOne) SetHeadPic(v string) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetHeadPic(v)
	})
}

// UpdateHeadPic sets the "head_pic" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateHeadPic() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateHeadPic()
	})
}

// SetPhotos sets the "photos" field.
func (u *GoodsUpsertOne) SetPhotos(v []string) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetPhotos(v)
	})
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdatePhotos() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdatePhotos()
	})
}

// SetIntro sets the "intro" field.
func (u *GoodsUpsertOne) SetIntro(v []string) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetIntro(v)
	})
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateIntro() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateIntro()
	})
}

// SetStatus sets the "status" field.
func (u *GoodsUpsertOne) SetStatus(v uint8) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *GoodsUpsertOne) AddStatus(v uint8) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateStatus() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateStatus()
	})
}

// SetInstallment sets the "installment" field.
func (u *GoodsUpsertOne) SetInstallment(v [][]float64) *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.SetInstallment(v)
	})
}

// UpdateInstallment sets the "installment" field to the value that was provided on create.
func (u *GoodsUpsertOne) UpdateInstallment() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateInstallment()
	})
}

// ClearInstallment clears the value of the "installment" field.
func (u *GoodsUpsertOne) ClearInstallment() *GoodsUpsertOne {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearInstallment()
	})
}

// Exec executes the query.
func (u *GoodsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GoodsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GoodsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GoodsCreateBulk is the builder for creating many Goods entities in bulk.
type GoodsCreateBulk struct {
	config
	err      error
	builders []*GoodsCreate
	conflict []sql.ConflictOption
}

// Save creates the Goods entities in the database.
func (gcb *GoodsCreateBulk) Save(ctx context.Context) ([]*Goods, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Goods, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoodsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GoodsCreateBulk) SaveX(ctx context.Context) []*Goods {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GoodsCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GoodsCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Goods.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GoodsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gcb *GoodsCreateBulk) OnConflict(opts ...sql.ConflictOption) *GoodsUpsertBulk {
	gcb.conflict = opts
	return &GoodsUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Goods.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GoodsCreateBulk) OnConflictColumns(columns ...string) *GoodsUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GoodsUpsertBulk{
		create: gcb,
	}
}

// GoodsUpsertBulk is the builder for "upsert"-ing
// a bulk of Goods nodes.
type GoodsUpsertBulk struct {
	create *GoodsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Goods.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GoodsUpsertBulk) UpdateNewValues() *GoodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(goods.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(goods.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Goods.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GoodsUpsertBulk) Ignore() *GoodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GoodsUpsertBulk) DoNothing() *GoodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GoodsCreateBulk.OnConflict
// documentation for more info.
func (u *GoodsUpsertBulk) Update(set func(*GoodsUpsert)) *GoodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GoodsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GoodsUpsertBulk) SetUpdatedAt(v time.Time) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateUpdatedAt() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GoodsUpsertBulk) SetDeletedAt(v time.Time) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateDeletedAt() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GoodsUpsertBulk) ClearDeletedAt() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *GoodsUpsertBulk) SetLastModifier(v *model.Modifier) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateLastModifier() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *GoodsUpsertBulk) ClearLastModifier() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *GoodsUpsertBulk) SetRemark(v string) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateRemark() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *GoodsUpsertBulk) ClearRemark() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearRemark()
	})
}

// SetSn sets the "sn" field.
func (u *GoodsUpsertBulk) SetSn(v string) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateSn() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateSn()
	})
}

// SetName sets the "name" field.
func (u *GoodsUpsertBulk) SetName(v string) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateName() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *GoodsUpsertBulk) SetType(v uint8) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *GoodsUpsertBulk) AddType(v uint8) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateType() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateType()
	})
}

// SetLables sets the "lables" field.
func (u *GoodsUpsertBulk) SetLables(v []string) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetLables(v)
	})
}

// UpdateLables sets the "lables" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateLables() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateLables()
	})
}

// ClearLables clears the value of the "lables" field.
func (u *GoodsUpsertBulk) ClearLables() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearLables()
	})
}

// SetPrice sets the "price" field.
func (u *GoodsUpsertBulk) SetPrice(v float64) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *GoodsUpsertBulk) AddPrice(v float64) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdatePrice() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdatePrice()
	})
}

// SetWeight sets the "weight" field.
func (u *GoodsUpsertBulk) SetWeight(v int) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *GoodsUpsertBulk) AddWeight(v int) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateWeight() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateWeight()
	})
}

// SetHeadPic sets the "head_pic" field.
func (u *GoodsUpsertBulk) SetHeadPic(v string) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetHeadPic(v)
	})
}

// UpdateHeadPic sets the "head_pic" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateHeadPic() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateHeadPic()
	})
}

// SetPhotos sets the "photos" field.
func (u *GoodsUpsertBulk) SetPhotos(v []string) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetPhotos(v)
	})
}

// UpdatePhotos sets the "photos" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdatePhotos() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdatePhotos()
	})
}

// SetIntro sets the "intro" field.
func (u *GoodsUpsertBulk) SetIntro(v []string) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetIntro(v)
	})
}

// UpdateIntro sets the "intro" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateIntro() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateIntro()
	})
}

// SetStatus sets the "status" field.
func (u *GoodsUpsertBulk) SetStatus(v uint8) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *GoodsUpsertBulk) AddStatus(v uint8) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateStatus() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateStatus()
	})
}

// SetInstallment sets the "installment" field.
func (u *GoodsUpsertBulk) SetInstallment(v [][]float64) *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.SetInstallment(v)
	})
}

// UpdateInstallment sets the "installment" field to the value that was provided on create.
func (u *GoodsUpsertBulk) UpdateInstallment() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.UpdateInstallment()
	})
}

// ClearInstallment clears the value of the "installment" field.
func (u *GoodsUpsertBulk) ClearInstallment() *GoodsUpsertBulk {
	return u.Update(func(s *GoodsUpsert) {
		s.ClearInstallment()
	})
}

// Exec executes the query.
func (u *GoodsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GoodsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GoodsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GoodsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
