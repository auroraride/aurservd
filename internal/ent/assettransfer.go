// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
)

// AssetTransfer is the model entity for the AssetTransfer schema.
type AssetTransfer struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 调拨状态 1:配送中 2:已入库 3:已取消
	Status uint8 `json:"status,omitempty"`
	// 调拨单号
	Sn string `json:"sn,omitempty"`
	// 开始位置类型 1:仓库 2:门店 3:站点 4:运维
	FromLocationType uint8 `json:"from_location_type,omitempty"`
	// 开始位置ID
	FromLocationID uint64 `json:"from_location_id,omitempty"`
	// 目标位置类型 1:仓库 2:门店 3:站点 4:运维
	ToLocationType uint8 `json:"to_location_type,omitempty"`
	// 目标位置ID
	ToLocationID uint64 `json:"to_location_id,omitempty"`
	// 调出数量
	OutNum uint `json:"out_num,omitempty"`
	// 调入数量
	InNum uint `json:"in_num,omitempty"`
	// 出库人id
	OutUserID uint64 `json:"out_user_id,omitempty"`
	// 出库角色类型 1:资产后台管理员 2:运维人员 3:代理管理员 4:门店店员
	OutRoleType uint8 `json:"out_role_type,omitempty"`
	// 入库人id
	InUserID uint64 `json:"in_user_id,omitempty"`
	// 入库角色类型 1:资产后台管理员 2:运维人员 3:代理管理员 4:门店店员
	InRoleType uint8 `json:"in_role_type,omitempty"`
	// 出库时间
	OutTimeAt time.Time `json:"out_time_at,omitempty"`
	// 入库时间
	InTimeAt time.Time `json:"in_time_at,omitempty"`
	// 调拨类型 1:初始入库 2:平台调拨 3:门店调拨 4:代理调拨 5:运维调拨 6:系统业务自动调拨
	TransferType uint8 `json:"transfer_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetTransferQuery when eager-loading is set.
	Edges        AssetTransferEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetTransferEdges holds the relations/edges for other nodes in the graph.
type AssetTransferEdges struct {
	// Details holds the value of the details edge.
	Details []*AssetTransferDetails `json:"details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DetailsOrErr returns the Details value or an error if the edge
// was not loaded in eager-loading.
func (e AssetTransferEdges) DetailsOrErr() ([]*AssetTransferDetails, error) {
	if e.loadedTypes[0] {
		return e.Details, nil
	}
	return nil, &NotLoadedError{edge: "details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetTransfer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assettransfer.FieldCreator, assettransfer.FieldLastModifier:
			values[i] = new([]byte)
		case assettransfer.FieldID, assettransfer.FieldStatus, assettransfer.FieldFromLocationType, assettransfer.FieldFromLocationID, assettransfer.FieldToLocationType, assettransfer.FieldToLocationID, assettransfer.FieldOutNum, assettransfer.FieldInNum, assettransfer.FieldOutUserID, assettransfer.FieldOutRoleType, assettransfer.FieldInUserID, assettransfer.FieldInRoleType, assettransfer.FieldTransferType:
			values[i] = new(sql.NullInt64)
		case assettransfer.FieldRemark, assettransfer.FieldSn:
			values[i] = new(sql.NullString)
		case assettransfer.FieldCreatedAt, assettransfer.FieldUpdatedAt, assettransfer.FieldDeletedAt, assettransfer.FieldOutTimeAt, assettransfer.FieldInTimeAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetTransfer fields.
func (at *AssetTransfer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assettransfer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = uint64(value.Int64)
		case assettransfer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				at.CreatedAt = value.Time
			}
		case assettransfer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				at.UpdatedAt = value.Time
			}
		case assettransfer.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				at.DeletedAt = new(time.Time)
				*at.DeletedAt = value.Time
			}
		case assettransfer.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &at.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case assettransfer.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &at.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case assettransfer.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				at.Remark = value.String
			}
		case assettransfer.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				at.Status = uint8(value.Int64)
			}
		case assettransfer.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				at.Sn = value.String
			}
		case assettransfer.FieldFromLocationType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_location_type", values[i])
			} else if value.Valid {
				at.FromLocationType = uint8(value.Int64)
			}
		case assettransfer.FieldFromLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_location_id", values[i])
			} else if value.Valid {
				at.FromLocationID = uint64(value.Int64)
			}
		case assettransfer.FieldToLocationType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_location_type", values[i])
			} else if value.Valid {
				at.ToLocationType = uint8(value.Int64)
			}
		case assettransfer.FieldToLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_location_id", values[i])
			} else if value.Valid {
				at.ToLocationID = uint64(value.Int64)
			}
		case assettransfer.FieldOutNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field out_num", values[i])
			} else if value.Valid {
				at.OutNum = uint(value.Int64)
			}
		case assettransfer.FieldInNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field in_num", values[i])
			} else if value.Valid {
				at.InNum = uint(value.Int64)
			}
		case assettransfer.FieldOutUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field out_user_id", values[i])
			} else if value.Valid {
				at.OutUserID = uint64(value.Int64)
			}
		case assettransfer.FieldOutRoleType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field out_role_type", values[i])
			} else if value.Valid {
				at.OutRoleType = uint8(value.Int64)
			}
		case assettransfer.FieldInUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field in_user_id", values[i])
			} else if value.Valid {
				at.InUserID = uint64(value.Int64)
			}
		case assettransfer.FieldInRoleType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field in_role_type", values[i])
			} else if value.Valid {
				at.InRoleType = uint8(value.Int64)
			}
		case assettransfer.FieldOutTimeAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field out_time_at", values[i])
			} else if value.Valid {
				at.OutTimeAt = value.Time
			}
		case assettransfer.FieldInTimeAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field in_time_at", values[i])
			} else if value.Valid {
				at.InTimeAt = value.Time
			}
		case assettransfer.FieldTransferType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transfer_type", values[i])
			} else if value.Valid {
				at.TransferType = uint8(value.Int64)
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetTransfer.
// This includes values selected through modifiers, order, etc.
func (at *AssetTransfer) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryDetails queries the "details" edge of the AssetTransfer entity.
func (at *AssetTransfer) QueryDetails() *AssetTransferDetailsQuery {
	return NewAssetTransferClient(at.config).QueryDetails(at)
}

// Update returns a builder for updating this AssetTransfer.
// Note that you need to call AssetTransfer.Unwrap() before calling this method if this AssetTransfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AssetTransfer) Update() *AssetTransferUpdateOne {
	return NewAssetTransferClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AssetTransfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AssetTransfer) Unwrap() *AssetTransfer {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetTransfer is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AssetTransfer) String() string {
	var builder strings.Builder
	builder.WriteString("AssetTransfer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("created_at=")
	builder.WriteString(at.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(at.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := at.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", at.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", at.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(at.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", at.Status))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(at.Sn)
	builder.WriteString(", ")
	builder.WriteString("from_location_type=")
	builder.WriteString(fmt.Sprintf("%v", at.FromLocationType))
	builder.WriteString(", ")
	builder.WriteString("from_location_id=")
	builder.WriteString(fmt.Sprintf("%v", at.FromLocationID))
	builder.WriteString(", ")
	builder.WriteString("to_location_type=")
	builder.WriteString(fmt.Sprintf("%v", at.ToLocationType))
	builder.WriteString(", ")
	builder.WriteString("to_location_id=")
	builder.WriteString(fmt.Sprintf("%v", at.ToLocationID))
	builder.WriteString(", ")
	builder.WriteString("out_num=")
	builder.WriteString(fmt.Sprintf("%v", at.OutNum))
	builder.WriteString(", ")
	builder.WriteString("in_num=")
	builder.WriteString(fmt.Sprintf("%v", at.InNum))
	builder.WriteString(", ")
	builder.WriteString("out_user_id=")
	builder.WriteString(fmt.Sprintf("%v", at.OutUserID))
	builder.WriteString(", ")
	builder.WriteString("out_role_type=")
	builder.WriteString(fmt.Sprintf("%v", at.OutRoleType))
	builder.WriteString(", ")
	builder.WriteString("in_user_id=")
	builder.WriteString(fmt.Sprintf("%v", at.InUserID))
	builder.WriteString(", ")
	builder.WriteString("in_role_type=")
	builder.WriteString(fmt.Sprintf("%v", at.InRoleType))
	builder.WriteString(", ")
	builder.WriteString("out_time_at=")
	builder.WriteString(at.OutTimeAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("in_time_at=")
	builder.WriteString(at.InTimeAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("transfer_type=")
	builder.WriteString(fmt.Sprintf("%v", at.TransferType))
	builder.WriteByte(')')
	return builder.String()
}

// AssetTransfers is a parsable slice of AssetTransfer.
type AssetTransfers []*AssetTransfer
