// Code generated by entc, DO NOT EDIT.

package stock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// ManagerID applies equality check predicate on the "manager_id" field. It's identical to ManagerIDEQ.
func ManagerID(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManagerID), v))
	})
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCabinetID), v))
	})
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNum), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// ManagerIDEQ applies the EQ predicate on the "manager_id" field.
func ManagerIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldManagerID), v))
	})
}

// ManagerIDNEQ applies the NEQ predicate on the "manager_id" field.
func ManagerIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldManagerID), v))
	})
}

// ManagerIDIn applies the In predicate on the "manager_id" field.
func ManagerIDIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldManagerID), v...))
	})
}

// ManagerIDNotIn applies the NotIn predicate on the "manager_id" field.
func ManagerIDNotIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldManagerID), v...))
	})
}

// ManagerIDIsNil applies the IsNil predicate on the "manager_id" field.
func ManagerIDIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldManagerID)))
	})
}

// ManagerIDNotNil applies the NotNil predicate on the "manager_id" field.
func ManagerIDNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldManagerID)))
	})
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCityID), v))
	})
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCityID), v...))
	})
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCityID), v...))
	})
}

// CityIDIsNil applies the IsNil predicate on the "city_id" field.
func CityIDIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCityID)))
	})
}

// CityIDNotNil applies the NotNil predicate on the "city_id" field.
func CityIDNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCityID)))
	})
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSn), v))
	})
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSn), v...))
	})
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSn), v...))
	})
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSn), v))
	})
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSn), v))
	})
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSn), v))
	})
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSn), v))
	})
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSn), v))
	})
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSn), v))
	})
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSn), v))
	})
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSn), v))
	})
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSn), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreID), v))
	})
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStoreID), v...))
	})
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStoreID), v...))
	})
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreID)))
	})
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreID)))
	})
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCabinetID), v))
	})
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCabinetID), v))
	})
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCabinetID), v...))
	})
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCabinetID), v...))
	})
}

// CabinetIDIsNil applies the IsNil predicate on the "cabinet_id" field.
func CabinetIDIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCabinetID)))
	})
}

// CabinetIDNotNil applies the NotNil predicate on the "cabinet_id" field.
func CabinetIDNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCabinetID)))
	})
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRiderID), v))
	})
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRiderID), v...))
	})
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRiderID), v...))
	})
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRiderID)))
	})
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRiderID)))
	})
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...uint64) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDIsNil applies the IsNil predicate on the "employee_id" field.
func EmployeeIDIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmployeeID)))
	})
}

// EmployeeIDNotNil applies the NotNil predicate on the "employee_id" field.
func EmployeeIDNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmployeeID)))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModel), v))
	})
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldModel), v...))
	})
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldModel), v...))
	})
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModel), v))
	})
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModel), v))
	})
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModel), v))
	})
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModel), v))
	})
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModel), v))
	})
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModel), v))
	})
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModel), v))
	})
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldModel)))
	})
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldModel)))
	})
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModel), v))
	})
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModel), v))
	})
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNum), v))
	})
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNum), v))
	})
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNum), v...))
	})
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNum), v...))
	})
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNum), v))
	})
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNum), v))
	})
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNum), v))
	})
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNum), v))
	})
}

// MaterialEQ applies the EQ predicate on the "material" field.
func MaterialEQ(v Material) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMaterial), v))
	})
}

// MaterialNEQ applies the NEQ predicate on the "material" field.
func MaterialNEQ(v Material) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMaterial), v))
	})
}

// MaterialIn applies the In predicate on the "material" field.
func MaterialIn(vs ...Material) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMaterial), v...))
	})
}

// MaterialNotIn applies the NotIn predicate on the "material" field.
func MaterialNotIn(vs ...Material) predicate.Stock {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Stock(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMaterial), v...))
	})
}

// HasManager applies the HasEdge predicate on the "manager" edge.
func HasManager() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ManagerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ManagerTable, ManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagerWith applies the HasEdge predicate on the "manager" edge with a given conditions (other predicates).
func HasManagerWith(preds ...predicate.Manager) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ManagerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ManagerTable, ManagerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CabinetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CabinetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSpouse applies the HasEdge predicate on the "spouse" edge.
func HasSpouse() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SpouseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SpouseTable, SpouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpouseWith applies the HasEdge predicate on the "spouse" edge with a given conditions (other predicates).
func HasSpouseWith(preds ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SpouseTable, SpouseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		p(s.Not())
	})
}
