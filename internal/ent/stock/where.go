// Code generated by ent, DO NOT EDIT.

package stock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldUpdatedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldRemark, v))
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCityID, v))
}

// SubscribeID applies equality check predicate on the "subscribe_id" field. It's identical to SubscribeIDEQ.
func SubscribeID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSubscribeID, v))
}

// EbikeID applies equality check predicate on the "ebike_id" field. It's identical to EbikeIDEQ.
func EbikeID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldEbikeID, v))
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldBrandID, v))
}

// BatteryID applies equality check predicate on the "battery_id" field. It's identical to BatteryIDEQ.
func BatteryID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldBatteryID, v))
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldAgentID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldParentID, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSn, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldType, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStoreID, v))
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCabinetID, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldRiderID, v))
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldEmployeeID, v))
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldEnterpriseID, v))
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStationID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldName, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldModel, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldNum, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContainsFold(FieldRemark, v))
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCityID, v))
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldCityID, v))
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldCityID, vs...))
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldCityID, vs...))
}

// CityIDIsNil applies the IsNil predicate on the "city_id" field.
func CityIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldCityID))
}

// CityIDNotNil applies the NotNil predicate on the "city_id" field.
func CityIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldCityID))
}

// SubscribeIDEQ applies the EQ predicate on the "subscribe_id" field.
func SubscribeIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSubscribeID, v))
}

// SubscribeIDNEQ applies the NEQ predicate on the "subscribe_id" field.
func SubscribeIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldSubscribeID, v))
}

// SubscribeIDIn applies the In predicate on the "subscribe_id" field.
func SubscribeIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldSubscribeID, vs...))
}

// SubscribeIDNotIn applies the NotIn predicate on the "subscribe_id" field.
func SubscribeIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldSubscribeID, vs...))
}

// SubscribeIDIsNil applies the IsNil predicate on the "subscribe_id" field.
func SubscribeIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldSubscribeID))
}

// SubscribeIDNotNil applies the NotNil predicate on the "subscribe_id" field.
func SubscribeIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldSubscribeID))
}

// EbikeIDEQ applies the EQ predicate on the "ebike_id" field.
func EbikeIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldEbikeID, v))
}

// EbikeIDNEQ applies the NEQ predicate on the "ebike_id" field.
func EbikeIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldEbikeID, v))
}

// EbikeIDIn applies the In predicate on the "ebike_id" field.
func EbikeIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldEbikeID, vs...))
}

// EbikeIDNotIn applies the NotIn predicate on the "ebike_id" field.
func EbikeIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldEbikeID, vs...))
}

// EbikeIDIsNil applies the IsNil predicate on the "ebike_id" field.
func EbikeIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldEbikeID))
}

// EbikeIDNotNil applies the NotNil predicate on the "ebike_id" field.
func EbikeIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldEbikeID))
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldBrandID, v))
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldBrandID, v))
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldBrandID, vs...))
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldBrandID, vs...))
}

// BrandIDIsNil applies the IsNil predicate on the "brand_id" field.
func BrandIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldBrandID))
}

// BrandIDNotNil applies the NotNil predicate on the "brand_id" field.
func BrandIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldBrandID))
}

// BatteryIDEQ applies the EQ predicate on the "battery_id" field.
func BatteryIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldBatteryID, v))
}

// BatteryIDNEQ applies the NEQ predicate on the "battery_id" field.
func BatteryIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldBatteryID, v))
}

// BatteryIDIn applies the In predicate on the "battery_id" field.
func BatteryIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldBatteryID, vs...))
}

// BatteryIDNotIn applies the NotIn predicate on the "battery_id" field.
func BatteryIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldBatteryID, vs...))
}

// BatteryIDIsNil applies the IsNil predicate on the "battery_id" field.
func BatteryIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldBatteryID))
}

// BatteryIDNotNil applies the NotNil predicate on the "battery_id" field.
func BatteryIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldBatteryID))
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldAgentID, v))
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldAgentID, v))
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldAgentID, vs...))
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldAgentID, vs...))
}

// AgentIDIsNil applies the IsNil predicate on the "agent_id" field.
func AgentIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldAgentID))
}

// AgentIDNotNil applies the NotNil predicate on the "agent_id" field.
func AgentIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldAgentID))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldParentID))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContainsFold(FieldSn, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldType, v))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldStoreID))
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldStoreID))
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCabinetID, v))
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldCabinetID, v))
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldCabinetID, vs...))
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldCabinetID, vs...))
}

// CabinetIDIsNil applies the IsNil predicate on the "cabinet_id" field.
func CabinetIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldCabinetID))
}

// CabinetIDNotNil applies the NotNil predicate on the "cabinet_id" field.
func CabinetIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldCabinetID))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldRiderID))
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDIsNil applies the IsNil predicate on the "employee_id" field.
func EmployeeIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldEmployeeID))
}

// EmployeeIDNotNil applies the NotNil predicate on the "employee_id" field.
func EmployeeIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldEmployeeID))
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldEnterpriseID, v))
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldEnterpriseID, v))
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDIsNil applies the IsNil predicate on the "enterprise_id" field.
func EnterpriseIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldEnterpriseID))
}

// EnterpriseIDNotNil applies the NotNil predicate on the "enterprise_id" field.
func EnterpriseIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldEnterpriseID))
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStationID, v))
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldStationID, v))
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldStationID, vs...))
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...uint64) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldStationID, vs...))
}

// StationIDIsNil applies the IsNil predicate on the "station_id" field.
func StationIDIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldStationID))
}

// StationIDNotNil applies the NotNil predicate on the "station_id" field.
func StationIDNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldStationID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContainsFold(FieldName, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContainsFold(FieldModel, v))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldNum, v))
}

// MaterialEQ applies the EQ predicate on the "material" field.
func MaterialEQ(v Material) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldMaterial, v))
}

// MaterialNEQ applies the NEQ predicate on the "material" field.
func MaterialNEQ(v Material) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldMaterial, v))
}

// MaterialIn applies the In predicate on the "material" field.
func MaterialIn(vs ...Material) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldMaterial, vs...))
}

// MaterialNotIn applies the NotIn predicate on the "material" field.
func MaterialNotIn(vs ...Material) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldMaterial, vs...))
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newCityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribe applies the HasEdge predicate on the "subscribe" edge.
func HasSubscribe() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribeWith applies the HasEdge predicate on the "subscribe" edge with a given conditions (other predicates).
func HasSubscribeWith(preds ...predicate.Subscribe) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newSubscribeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEbike applies the HasEdge predicate on the "ebike" edge.
func HasEbike() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EbikeTable, EbikeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEbikeWith applies the HasEdge predicate on the "ebike" edge with a given conditions (other predicates).
func HasEbikeWith(preds ...predicate.Ebike) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newEbikeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.EbikeBrand) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBattery applies the HasEdge predicate on the "battery" edge.
func HasBattery() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BatteryTable, BatteryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBatteryWith applies the HasEdge predicate on the "battery" edge with a given conditions (other predicates).
func HasBatteryWith(preds ...predicate.Battery) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newBatteryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgent applies the HasEdge predicate on the "agent" edge.
func HasAgent() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentWith applies the HasEdge predicate on the "agent" edge with a given conditions (other predicates).
func HasAgentWith(preds ...predicate.Agent) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSpouse applies the HasEdge predicate on the "spouse" edge.
func HasSpouse() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SpouseTable, SpouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSpouseWith applies the HasEdge predicate on the "spouse" edge with a given conditions (other predicates).
func HasSpouseWith(preds ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newSpouseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.EnterpriseStation) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stock) predicate.Stock {
	return predicate.Stock(func(s *sql.Selector) {
		p(s.Not())
	})
}
