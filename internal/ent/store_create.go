// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// StoreCreate is the builder for creating a Store entity.
type StoreCreate struct {
	config
	mutation *StoreMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *StoreCreate) SetCreatedAt(t time.Time) *StoreCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableCreatedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StoreCreate) SetUpdatedAt(t time.Time) *StoreCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableUpdatedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StoreCreate) SetDeletedAt(t time.Time) *StoreCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StoreCreate) SetNillableDeletedAt(t *time.Time) *StoreCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetCreator sets the "creator" field.
func (sc *StoreCreate) SetCreator(m *model.Modifier) *StoreCreate {
	sc.mutation.SetCreator(m)
	return sc
}

// SetLastModifier sets the "last_modifier" field.
func (sc *StoreCreate) SetLastModifier(m *model.Modifier) *StoreCreate {
	sc.mutation.SetLastModifier(m)
	return sc
}

// SetRemark sets the "remark" field.
func (sc *StoreCreate) SetRemark(s string) *StoreCreate {
	sc.mutation.SetRemark(s)
	return sc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sc *StoreCreate) SetNillableRemark(s *string) *StoreCreate {
	if s != nil {
		sc.SetRemark(*s)
	}
	return sc
}

// SetEmployeeID sets the "employee_id" field.
func (sc *StoreCreate) SetEmployeeID(u uint64) *StoreCreate {
	sc.mutation.SetEmployeeID(u)
	return sc
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (sc *StoreCreate) SetNillableEmployeeID(u *uint64) *StoreCreate {
	if u != nil {
		sc.SetEmployeeID(*u)
	}
	return sc
}

// SetBranchID sets the "branch_id" field.
func (sc *StoreCreate) SetBranchID(u uint64) *StoreCreate {
	sc.mutation.SetBranchID(u)
	return sc
}

// SetSn sets the "sn" field.
func (sc *StoreCreate) SetSn(s string) *StoreCreate {
	sc.mutation.SetSn(s)
	return sc
}

// SetName sets the "name" field.
func (sc *StoreCreate) SetName(s string) *StoreCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *StoreCreate) SetStatus(u uint8) *StoreCreate {
	sc.mutation.SetStatus(u)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *StoreCreate) SetNillableStatus(u *uint8) *StoreCreate {
	if u != nil {
		sc.SetStatus(*u)
	}
	return sc
}

// SetBranch sets the "branch" edge to the Branch entity.
func (sc *StoreCreate) SetBranch(b *Branch) *StoreCreate {
	return sc.SetBranchID(b.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (sc *StoreCreate) SetEmployee(e *Employee) *StoreCreate {
	return sc.SetEmployeeID(e.ID)
}

// Mutation returns the StoreMutation object of the builder.
func (sc *StoreCreate) Mutation() *StoreMutation {
	return sc.mutation
}

// Save creates the Store in the database.
func (sc *StoreCreate) Save(ctx context.Context) (*Store, error) {
	var (
		err  error
		node *Store
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Store)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StoreMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StoreCreate) SaveX(ctx context.Context) *Store {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StoreCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StoreCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StoreCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if store.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized store.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := store.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if store.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized store.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := store.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := store.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *StoreCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Store.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Store.updated_at"`)}
	}
	if _, ok := sc.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branch_id", err: errors.New(`ent: missing required field "Store.branch_id"`)}
	}
	if _, ok := sc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Store.sn"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Store.name"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Store.status"`)}
	}
	if _, ok := sc.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required edge "Store.branch"`)}
	}
	return nil
}

func (sc *StoreCreate) sqlSave(ctx context.Context) (*Store, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (sc *StoreCreate) createSpec() (*Store, *sqlgraph.CreateSpec) {
	var (
		_node = &Store{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: store.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: store.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := sc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: store.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := sc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: store.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := sc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := sc.mutation.Sn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldSn,
		})
		_node.Sn = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: store.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := sc.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BranchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Store.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *StoreCreate) OnConflict(opts ...sql.ConflictOption) *StoreUpsertOne {
	sc.conflict = opts
	return &StoreUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *StoreCreate) OnConflictColumns(columns ...string) *StoreUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StoreUpsertOne{
		create: sc,
	}
}

type (
	// StoreUpsertOne is the builder for "upsert"-ing
	//  one Store node.
	StoreUpsertOne struct {
		create *StoreCreate
	}

	// StoreUpsert is the "OnConflict" setter.
	StoreUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *StoreUpsert) SetCreatedAt(v time.Time) *StoreUpsert {
	u.Set(store.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StoreUpsert) UpdateCreatedAt() *StoreUpsert {
	u.SetExcluded(store.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsert) SetUpdatedAt(v time.Time) *StoreUpsert {
	u.Set(store.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsert) UpdateUpdatedAt() *StoreUpsert {
	u.SetExcluded(store.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreUpsert) SetDeletedAt(v time.Time) *StoreUpsert {
	u.Set(store.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreUpsert) UpdateDeletedAt() *StoreUpsert {
	u.SetExcluded(store.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreUpsert) ClearDeletedAt() *StoreUpsert {
	u.SetNull(store.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *StoreUpsert) SetCreator(v *model.Modifier) *StoreUpsert {
	u.Set(store.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *StoreUpsert) UpdateCreator() *StoreUpsert {
	u.SetExcluded(store.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *StoreUpsert) ClearCreator() *StoreUpsert {
	u.SetNull(store.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *StoreUpsert) SetLastModifier(v *model.Modifier) *StoreUpsert {
	u.Set(store.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StoreUpsert) UpdateLastModifier() *StoreUpsert {
	u.SetExcluded(store.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StoreUpsert) ClearLastModifier() *StoreUpsert {
	u.SetNull(store.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *StoreUpsert) SetRemark(v string) *StoreUpsert {
	u.Set(store.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StoreUpsert) UpdateRemark() *StoreUpsert {
	u.SetExcluded(store.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *StoreUpsert) ClearRemark() *StoreUpsert {
	u.SetNull(store.FieldRemark)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *StoreUpsert) SetEmployeeID(v uint64) *StoreUpsert {
	u.Set(store.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *StoreUpsert) UpdateEmployeeID() *StoreUpsert {
	u.SetExcluded(store.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *StoreUpsert) ClearEmployeeID() *StoreUpsert {
	u.SetNull(store.FieldEmployeeID)
	return u
}

// SetBranchID sets the "branch_id" field.
func (u *StoreUpsert) SetBranchID(v uint64) *StoreUpsert {
	u.Set(store.FieldBranchID, v)
	return u
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *StoreUpsert) UpdateBranchID() *StoreUpsert {
	u.SetExcluded(store.FieldBranchID)
	return u
}

// SetSn sets the "sn" field.
func (u *StoreUpsert) SetSn(v string) *StoreUpsert {
	u.Set(store.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *StoreUpsert) UpdateSn() *StoreUpsert {
	u.SetExcluded(store.FieldSn)
	return u
}

// SetName sets the "name" field.
func (u *StoreUpsert) SetName(v string) *StoreUpsert {
	u.Set(store.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreUpsert) UpdateName() *StoreUpsert {
	u.SetExcluded(store.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *StoreUpsert) SetStatus(v uint8) *StoreUpsert {
	u.Set(store.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StoreUpsert) UpdateStatus() *StoreUpsert {
	u.SetExcluded(store.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *StoreUpsert) AddStatus(v uint8) *StoreUpsert {
	u.Add(store.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *StoreUpsertOne) UpdateNewValues() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(store.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(store.FieldCreator)
		}
		if _, exists := u.create.mutation.Sn(); exists {
			s.SetIgnore(store.FieldSn)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Store.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StoreUpsertOne) Ignore() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreUpsertOne) DoNothing() *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreCreate.OnConflict
// documentation for more info.
func (u *StoreUpsertOne) Update(set func(*StoreUpsert)) *StoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StoreUpsertOne) SetCreatedAt(v time.Time) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateCreatedAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsertOne) SetUpdatedAt(v time.Time) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateUpdatedAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreUpsertOne) SetDeletedAt(v time.Time) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateDeletedAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreUpsertOne) ClearDeletedAt() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *StoreUpsertOne) SetCreator(v *model.Modifier) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateCreator() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *StoreUpsertOne) ClearCreator() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *StoreUpsertOne) SetLastModifier(v *model.Modifier) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateLastModifier() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StoreUpsertOne) ClearLastModifier() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *StoreUpsertOne) SetRemark(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateRemark() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *StoreUpsertOne) ClearRemark() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearRemark()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *StoreUpsertOne) SetEmployeeID(v uint64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateEmployeeID() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *StoreUpsertOne) ClearEmployeeID() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.ClearEmployeeID()
	})
}

// SetBranchID sets the "branch_id" field.
func (u *StoreUpsertOne) SetBranchID(v uint64) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetBranchID(v)
	})
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateBranchID() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateBranchID()
	})
}

// SetSn sets the "sn" field.
func (u *StoreUpsertOne) SetSn(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateSn() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateSn()
	})
}

// SetName sets the "name" field.
func (u *StoreUpsertOne) SetName(v string) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateName() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *StoreUpsertOne) SetStatus(v uint8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *StoreUpsertOne) AddStatus(v uint8) *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StoreUpsertOne) UpdateStatus() *StoreUpsertOne {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *StoreUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StoreCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StoreUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StoreUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StoreCreateBulk is the builder for creating many Store entities in bulk.
type StoreCreateBulk struct {
	config
	builders []*StoreCreate
	conflict []sql.ConflictOption
}

// Save creates the Store entities in the database.
func (scb *StoreCreateBulk) Save(ctx context.Context) ([]*Store, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Store, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StoreCreateBulk) SaveX(ctx context.Context) []*Store {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StoreCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StoreCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Store.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *StoreCreateBulk) OnConflict(opts ...sql.ConflictOption) *StoreUpsertBulk {
	scb.conflict = opts
	return &StoreUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *StoreCreateBulk) OnConflictColumns(columns ...string) *StoreUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StoreUpsertBulk{
		create: scb,
	}
}

// StoreUpsertBulk is the builder for "upsert"-ing
// a bulk of Store nodes.
type StoreUpsertBulk struct {
	create *StoreCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *StoreUpsertBulk) UpdateNewValues() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(store.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(store.FieldCreator)
			}
			if _, exists := b.mutation.Sn(); exists {
				s.SetIgnore(store.FieldSn)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Store.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StoreUpsertBulk) Ignore() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreUpsertBulk) DoNothing() *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreCreateBulk.OnConflict
// documentation for more info.
func (u *StoreUpsertBulk) Update(set func(*StoreUpsert)) *StoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StoreUpsertBulk) SetCreatedAt(v time.Time) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateCreatedAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreUpsertBulk) SetUpdatedAt(v time.Time) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateUpdatedAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreUpsertBulk) SetDeletedAt(v time.Time) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateDeletedAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreUpsertBulk) ClearDeletedAt() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *StoreUpsertBulk) SetCreator(v *model.Modifier) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateCreator() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *StoreUpsertBulk) ClearCreator() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *StoreUpsertBulk) SetLastModifier(v *model.Modifier) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateLastModifier() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StoreUpsertBulk) ClearLastModifier() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *StoreUpsertBulk) SetRemark(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateRemark() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *StoreUpsertBulk) ClearRemark() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearRemark()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *StoreUpsertBulk) SetEmployeeID(v uint64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateEmployeeID() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *StoreUpsertBulk) ClearEmployeeID() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.ClearEmployeeID()
	})
}

// SetBranchID sets the "branch_id" field.
func (u *StoreUpsertBulk) SetBranchID(v uint64) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetBranchID(v)
	})
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateBranchID() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateBranchID()
	})
}

// SetSn sets the "sn" field.
func (u *StoreUpsertBulk) SetSn(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateSn() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateSn()
	})
}

// SetName sets the "name" field.
func (u *StoreUpsertBulk) SetName(v string) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateName() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *StoreUpsertBulk) SetStatus(v uint8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *StoreUpsertBulk) AddStatus(v uint8) *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StoreUpsertBulk) UpdateStatus() *StoreUpsertBulk {
	return u.Update(func(s *StoreUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *StoreUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StoreCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StoreCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
