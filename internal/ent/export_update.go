// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/export"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ExportUpdate is the builder for updating Export entities.
type ExportUpdate struct {
	config
	hooks    []Hook
	mutation *ExportMutation
}

// Where appends a list predicates to the ExportUpdate builder.
func (eu *ExportUpdate) Where(ps ...predicate.Export) *ExportUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *ExportUpdate) SetUpdatedAt(t time.Time) *ExportUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *ExportUpdate) SetDeletedAt(t time.Time) *ExportUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *ExportUpdate) SetNillableDeletedAt(t *time.Time) *ExportUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *ExportUpdate) ClearDeletedAt() *ExportUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetManagerID sets the "manager_id" field.
func (eu *ExportUpdate) SetManagerID(u uint64) *ExportUpdate {
	eu.mutation.SetManagerID(u)
	return eu
}

// SetTaxonomy sets the "taxonomy" field.
func (eu *ExportUpdate) SetTaxonomy(s string) *ExportUpdate {
	eu.mutation.SetTaxonomy(s)
	return eu
}

// SetSn sets the "sn" field.
func (eu *ExportUpdate) SetSn(s string) *ExportUpdate {
	eu.mutation.SetSn(s)
	return eu
}

// SetStatus sets the "status" field.
func (eu *ExportUpdate) SetStatus(u uint8) *ExportUpdate {
	eu.mutation.ResetStatus()
	eu.mutation.SetStatus(u)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *ExportUpdate) SetNillableStatus(u *uint8) *ExportUpdate {
	if u != nil {
		eu.SetStatus(*u)
	}
	return eu
}

// AddStatus adds u to the "status" field.
func (eu *ExportUpdate) AddStatus(u int8) *ExportUpdate {
	eu.mutation.AddStatus(u)
	return eu
}

// SetPath sets the "path" field.
func (eu *ExportUpdate) SetPath(s string) *ExportUpdate {
	eu.mutation.SetPath(s)
	return eu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (eu *ExportUpdate) SetNillablePath(s *string) *ExportUpdate {
	if s != nil {
		eu.SetPath(*s)
	}
	return eu
}

// ClearPath clears the value of the "path" field.
func (eu *ExportUpdate) ClearPath() *ExportUpdate {
	eu.mutation.ClearPath()
	return eu
}

// SetMessage sets the "message" field.
func (eu *ExportUpdate) SetMessage(s string) *ExportUpdate {
	eu.mutation.SetMessage(s)
	return eu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (eu *ExportUpdate) SetNillableMessage(s *string) *ExportUpdate {
	if s != nil {
		eu.SetMessage(*s)
	}
	return eu
}

// ClearMessage clears the value of the "message" field.
func (eu *ExportUpdate) ClearMessage() *ExportUpdate {
	eu.mutation.ClearMessage()
	return eu
}

// SetFinishAt sets the "finish_at" field.
func (eu *ExportUpdate) SetFinishAt(t time.Time) *ExportUpdate {
	eu.mutation.SetFinishAt(t)
	return eu
}

// SetNillableFinishAt sets the "finish_at" field if the given value is not nil.
func (eu *ExportUpdate) SetNillableFinishAt(t *time.Time) *ExportUpdate {
	if t != nil {
		eu.SetFinishAt(*t)
	}
	return eu
}

// ClearFinishAt clears the value of the "finish_at" field.
func (eu *ExportUpdate) ClearFinishAt() *ExportUpdate {
	eu.mutation.ClearFinishAt()
	return eu
}

// SetDuration sets the "duration" field.
func (eu *ExportUpdate) SetDuration(i int64) *ExportUpdate {
	eu.mutation.ResetDuration()
	eu.mutation.SetDuration(i)
	return eu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (eu *ExportUpdate) SetNillableDuration(i *int64) *ExportUpdate {
	if i != nil {
		eu.SetDuration(*i)
	}
	return eu
}

// AddDuration adds i to the "duration" field.
func (eu *ExportUpdate) AddDuration(i int64) *ExportUpdate {
	eu.mutation.AddDuration(i)
	return eu
}

// ClearDuration clears the value of the "duration" field.
func (eu *ExportUpdate) ClearDuration() *ExportUpdate {
	eu.mutation.ClearDuration()
	return eu
}

// SetCondition sets the "condition" field.
func (eu *ExportUpdate) SetCondition(jm json.RawMessage) *ExportUpdate {
	eu.mutation.SetCondition(jm)
	return eu
}

// SetInfo sets the "info" field.
func (eu *ExportUpdate) SetInfo(m map[string]interface{}) *ExportUpdate {
	eu.mutation.SetInfo(m)
	return eu
}

// ClearInfo clears the value of the "info" field.
func (eu *ExportUpdate) ClearInfo() *ExportUpdate {
	eu.mutation.ClearInfo()
	return eu
}

// SetRemark sets the "remark" field.
func (eu *ExportUpdate) SetRemark(s string) *ExportUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetManager sets the "manager" edge to the Manager entity.
func (eu *ExportUpdate) SetManager(m *Manager) *ExportUpdate {
	return eu.SetManagerID(m.ID)
}

// Mutation returns the ExportMutation object of the builder.
func (eu *ExportUpdate) Mutation() *ExportMutation {
	return eu.mutation
}

// ClearManager clears the "manager" edge to the Manager entity.
func (eu *ExportUpdate) ClearManager() *ExportUpdate {
	eu.mutation.ClearManager()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExportUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	eu.defaults()
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExportUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExportUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExportUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExportUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := export.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExportUpdate) check() error {
	if _, ok := eu.mutation.ManagerID(); eu.mutation.ManagerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Export.manager"`)
	}
	return nil
}

func (eu *ExportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   export.Table,
			Columns: export.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: export.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: export.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: export.FieldDeletedAt,
		})
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: export.FieldDeletedAt,
		})
	}
	if value, ok := eu.mutation.Taxonomy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldTaxonomy,
		})
	}
	if value, ok := eu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldSn,
		})
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: export.FieldStatus,
		})
	}
	if value, ok := eu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: export.FieldStatus,
		})
	}
	if value, ok := eu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldPath,
		})
	}
	if eu.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: export.FieldPath,
		})
	}
	if value, ok := eu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldMessage,
		})
	}
	if eu.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: export.FieldMessage,
		})
	}
	if value, ok := eu.mutation.FinishAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: export.FieldFinishAt,
		})
	}
	if eu.mutation.FinishAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: export.FieldFinishAt,
		})
	}
	if value, ok := eu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: export.FieldDuration,
		})
	}
	if value, ok := eu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: export.FieldDuration,
		})
	}
	if eu.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: export.FieldDuration,
		})
	}
	if value, ok := eu.mutation.Condition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: export.FieldCondition,
		})
	}
	if value, ok := eu.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: export.FieldInfo,
		})
	}
	if eu.mutation.InfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: export.FieldInfo,
		})
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldRemark,
		})
	}
	if eu.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   export.ManagerTable,
			Columns: []string{export.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   export.ManagerTable,
			Columns: []string{export.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{export.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ExportUpdateOne is the builder for updating a single Export entity.
type ExportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExportMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *ExportUpdateOne) SetUpdatedAt(t time.Time) *ExportUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *ExportUpdateOne) SetDeletedAt(t time.Time) *ExportUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *ExportUpdateOne) SetNillableDeletedAt(t *time.Time) *ExportUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *ExportUpdateOne) ClearDeletedAt() *ExportUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetManagerID sets the "manager_id" field.
func (euo *ExportUpdateOne) SetManagerID(u uint64) *ExportUpdateOne {
	euo.mutation.SetManagerID(u)
	return euo
}

// SetTaxonomy sets the "taxonomy" field.
func (euo *ExportUpdateOne) SetTaxonomy(s string) *ExportUpdateOne {
	euo.mutation.SetTaxonomy(s)
	return euo
}

// SetSn sets the "sn" field.
func (euo *ExportUpdateOne) SetSn(s string) *ExportUpdateOne {
	euo.mutation.SetSn(s)
	return euo
}

// SetStatus sets the "status" field.
func (euo *ExportUpdateOne) SetStatus(u uint8) *ExportUpdateOne {
	euo.mutation.ResetStatus()
	euo.mutation.SetStatus(u)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *ExportUpdateOne) SetNillableStatus(u *uint8) *ExportUpdateOne {
	if u != nil {
		euo.SetStatus(*u)
	}
	return euo
}

// AddStatus adds u to the "status" field.
func (euo *ExportUpdateOne) AddStatus(u int8) *ExportUpdateOne {
	euo.mutation.AddStatus(u)
	return euo
}

// SetPath sets the "path" field.
func (euo *ExportUpdateOne) SetPath(s string) *ExportUpdateOne {
	euo.mutation.SetPath(s)
	return euo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (euo *ExportUpdateOne) SetNillablePath(s *string) *ExportUpdateOne {
	if s != nil {
		euo.SetPath(*s)
	}
	return euo
}

// ClearPath clears the value of the "path" field.
func (euo *ExportUpdateOne) ClearPath() *ExportUpdateOne {
	euo.mutation.ClearPath()
	return euo
}

// SetMessage sets the "message" field.
func (euo *ExportUpdateOne) SetMessage(s string) *ExportUpdateOne {
	euo.mutation.SetMessage(s)
	return euo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (euo *ExportUpdateOne) SetNillableMessage(s *string) *ExportUpdateOne {
	if s != nil {
		euo.SetMessage(*s)
	}
	return euo
}

// ClearMessage clears the value of the "message" field.
func (euo *ExportUpdateOne) ClearMessage() *ExportUpdateOne {
	euo.mutation.ClearMessage()
	return euo
}

// SetFinishAt sets the "finish_at" field.
func (euo *ExportUpdateOne) SetFinishAt(t time.Time) *ExportUpdateOne {
	euo.mutation.SetFinishAt(t)
	return euo
}

// SetNillableFinishAt sets the "finish_at" field if the given value is not nil.
func (euo *ExportUpdateOne) SetNillableFinishAt(t *time.Time) *ExportUpdateOne {
	if t != nil {
		euo.SetFinishAt(*t)
	}
	return euo
}

// ClearFinishAt clears the value of the "finish_at" field.
func (euo *ExportUpdateOne) ClearFinishAt() *ExportUpdateOne {
	euo.mutation.ClearFinishAt()
	return euo
}

// SetDuration sets the "duration" field.
func (euo *ExportUpdateOne) SetDuration(i int64) *ExportUpdateOne {
	euo.mutation.ResetDuration()
	euo.mutation.SetDuration(i)
	return euo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (euo *ExportUpdateOne) SetNillableDuration(i *int64) *ExportUpdateOne {
	if i != nil {
		euo.SetDuration(*i)
	}
	return euo
}

// AddDuration adds i to the "duration" field.
func (euo *ExportUpdateOne) AddDuration(i int64) *ExportUpdateOne {
	euo.mutation.AddDuration(i)
	return euo
}

// ClearDuration clears the value of the "duration" field.
func (euo *ExportUpdateOne) ClearDuration() *ExportUpdateOne {
	euo.mutation.ClearDuration()
	return euo
}

// SetCondition sets the "condition" field.
func (euo *ExportUpdateOne) SetCondition(jm json.RawMessage) *ExportUpdateOne {
	euo.mutation.SetCondition(jm)
	return euo
}

// SetInfo sets the "info" field.
func (euo *ExportUpdateOne) SetInfo(m map[string]interface{}) *ExportUpdateOne {
	euo.mutation.SetInfo(m)
	return euo
}

// ClearInfo clears the value of the "info" field.
func (euo *ExportUpdateOne) ClearInfo() *ExportUpdateOne {
	euo.mutation.ClearInfo()
	return euo
}

// SetRemark sets the "remark" field.
func (euo *ExportUpdateOne) SetRemark(s string) *ExportUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetManager sets the "manager" edge to the Manager entity.
func (euo *ExportUpdateOne) SetManager(m *Manager) *ExportUpdateOne {
	return euo.SetManagerID(m.ID)
}

// Mutation returns the ExportMutation object of the builder.
func (euo *ExportUpdateOne) Mutation() *ExportMutation {
	return euo.mutation
}

// ClearManager clears the "manager" edge to the Manager entity.
func (euo *ExportUpdateOne) ClearManager() *ExportUpdateOne {
	euo.mutation.ClearManager()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExportUpdateOne) Select(field string, fields ...string) *ExportUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Export entity.
func (euo *ExportUpdateOne) Save(ctx context.Context) (*Export, error) {
	var (
		err  error
		node *Export
	)
	euo.defaults()
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Export)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExportMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExportUpdateOne) SaveX(ctx context.Context) *Export {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExportUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExportUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExportUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := export.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExportUpdateOne) check() error {
	if _, ok := euo.mutation.ManagerID(); euo.mutation.ManagerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Export.manager"`)
	}
	return nil
}

func (euo *ExportUpdateOne) sqlSave(ctx context.Context) (_node *Export, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   export.Table,
			Columns: export.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: export.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Export.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, export.FieldID)
		for _, f := range fields {
			if !export.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != export.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: export.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: export.FieldDeletedAt,
		})
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: export.FieldDeletedAt,
		})
	}
	if value, ok := euo.mutation.Taxonomy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldTaxonomy,
		})
	}
	if value, ok := euo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldSn,
		})
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: export.FieldStatus,
		})
	}
	if value, ok := euo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: export.FieldStatus,
		})
	}
	if value, ok := euo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldPath,
		})
	}
	if euo.mutation.PathCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: export.FieldPath,
		})
	}
	if value, ok := euo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldMessage,
		})
	}
	if euo.mutation.MessageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: export.FieldMessage,
		})
	}
	if value, ok := euo.mutation.FinishAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: export.FieldFinishAt,
		})
	}
	if euo.mutation.FinishAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: export.FieldFinishAt,
		})
	}
	if value, ok := euo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: export.FieldDuration,
		})
	}
	if value, ok := euo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: export.FieldDuration,
		})
	}
	if euo.mutation.DurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: export.FieldDuration,
		})
	}
	if value, ok := euo.mutation.Condition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: export.FieldCondition,
		})
	}
	if value, ok := euo.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: export.FieldInfo,
		})
	}
	if euo.mutation.InfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: export.FieldInfo,
		})
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: export.FieldRemark,
		})
	}
	if euo.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   export.ManagerTable,
			Columns: []string{export.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   export.ManagerTable,
			Columns: []string{export.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Export{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{export.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
