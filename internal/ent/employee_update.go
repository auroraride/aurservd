// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
	"github.com/google/uuid"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks     []Hook
	mutation  *EmployeeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmployeeUpdate) SetUpdatedAt(t time.Time) *EmployeeUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EmployeeUpdate) SetDeletedAt(t time.Time) *EmployeeUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDeletedAt(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EmployeeUpdate) ClearDeletedAt() *EmployeeUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetLastModifier sets the "last_modifier" field.
func (eu *EmployeeUpdate) SetLastModifier(m *model.Modifier) *EmployeeUpdate {
	eu.mutation.SetLastModifier(m)
	return eu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (eu *EmployeeUpdate) ClearLastModifier() *EmployeeUpdate {
	eu.mutation.ClearLastModifier()
	return eu
}

// SetRemark sets the "remark" field.
func (eu *EmployeeUpdate) SetRemark(s string) *EmployeeUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableRemark(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetRemark(*s)
	}
	return eu
}

// ClearRemark clears the value of the "remark" field.
func (eu *EmployeeUpdate) ClearRemark() *EmployeeUpdate {
	eu.mutation.ClearRemark()
	return eu
}

// SetCityID sets the "city_id" field.
func (eu *EmployeeUpdate) SetCityID(u uint64) *EmployeeUpdate {
	eu.mutation.SetCityID(u)
	return eu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableCityID(u *uint64) *EmployeeUpdate {
	if u != nil {
		eu.SetCityID(*u)
	}
	return eu
}

// SetGroupID sets the "group_id" field.
func (eu *EmployeeUpdate) SetGroupID(u uint64) *EmployeeUpdate {
	eu.mutation.SetGroupID(u)
	return eu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableGroupID(u *uint64) *EmployeeUpdate {
	if u != nil {
		eu.SetGroupID(*u)
	}
	return eu
}

// ClearGroupID clears the value of the "group_id" field.
func (eu *EmployeeUpdate) ClearGroupID() *EmployeeUpdate {
	eu.mutation.ClearGroupID()
	return eu
}

// SetSn sets the "sn" field.
func (eu *EmployeeUpdate) SetSn(u uuid.UUID) *EmployeeUpdate {
	eu.mutation.SetSn(u)
	return eu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableSn(u *uuid.UUID) *EmployeeUpdate {
	if u != nil {
		eu.SetSn(*u)
	}
	return eu
}

// ClearSn clears the value of the "sn" field.
func (eu *EmployeeUpdate) ClearSn() *EmployeeUpdate {
	eu.mutation.ClearSn()
	return eu
}

// SetName sets the "name" field.
func (eu *EmployeeUpdate) SetName(s string) *EmployeeUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableName(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// SetPhone sets the "phone" field.
func (eu *EmployeeUpdate) SetPhone(s string) *EmployeeUpdate {
	eu.mutation.SetPhone(s)
	return eu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePhone(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetPhone(*s)
	}
	return eu
}

// SetEnable sets the "enable" field.
func (eu *EmployeeUpdate) SetEnable(b bool) *EmployeeUpdate {
	eu.mutation.SetEnable(b)
	return eu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableEnable(b *bool) *EmployeeUpdate {
	if b != nil {
		eu.SetEnable(*b)
	}
	return eu
}

// SetPassword sets the "password" field.
func (eu *EmployeeUpdate) SetPassword(s string) *EmployeeUpdate {
	eu.mutation.SetPassword(s)
	return eu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePassword(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetPassword(*s)
	}
	return eu
}

// ClearPassword clears the value of the "password" field.
func (eu *EmployeeUpdate) ClearPassword() *EmployeeUpdate {
	eu.mutation.ClearPassword()
	return eu
}

// SetLimit sets the "limit" field.
func (eu *EmployeeUpdate) SetLimit(u uint) *EmployeeUpdate {
	eu.mutation.ResetLimit()
	eu.mutation.SetLimit(u)
	return eu
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableLimit(u *uint) *EmployeeUpdate {
	if u != nil {
		eu.SetLimit(*u)
	}
	return eu
}

// AddLimit adds u to the "limit" field.
func (eu *EmployeeUpdate) AddLimit(u int) *EmployeeUpdate {
	eu.mutation.AddLimit(u)
	return eu
}

// SetDutyStoreID sets the "duty_store_id" field.
func (eu *EmployeeUpdate) SetDutyStoreID(u uint64) *EmployeeUpdate {
	eu.mutation.SetDutyStoreID(u)
	return eu
}

// SetNillableDutyStoreID sets the "duty_store_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableDutyStoreID(u *uint64) *EmployeeUpdate {
	if u != nil {
		eu.SetDutyStoreID(*u)
	}
	return eu
}

// ClearDutyStoreID clears the value of the "duty_store_id" field.
func (eu *EmployeeUpdate) ClearDutyStoreID() *EmployeeUpdate {
	eu.mutation.ClearDutyStoreID()
	return eu
}

// SetCity sets the "city" edge to the City entity.
func (eu *EmployeeUpdate) SetCity(c *City) *EmployeeUpdate {
	return eu.SetCityID(c.ID)
}

// SetGroup sets the "group" edge to the StoreGroup entity.
func (eu *EmployeeUpdate) SetGroup(s *StoreGroup) *EmployeeUpdate {
	return eu.SetGroupID(s.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (eu *EmployeeUpdate) SetStoreID(id uint64) *EmployeeUpdate {
	eu.mutation.SetStoreID(id)
	return eu
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableStoreID(id *uint64) *EmployeeUpdate {
	if id != nil {
		eu = eu.SetStoreID(*id)
	}
	return eu
}

// SetStore sets the "store" edge to the Store entity.
func (eu *EmployeeUpdate) SetStore(s *Store) *EmployeeUpdate {
	return eu.SetStoreID(s.ID)
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (eu *EmployeeUpdate) AddAttendanceIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.AddAttendanceIDs(ids...)
	return eu
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (eu *EmployeeUpdate) AddAttendances(a ...*Attendance) *EmployeeUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddAttendanceIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (eu *EmployeeUpdate) AddStockIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.AddStockIDs(ids...)
	return eu
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (eu *EmployeeUpdate) AddStocks(s ...*Stock) *EmployeeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddStockIDs(ids...)
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (eu *EmployeeUpdate) AddExchangeIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.AddExchangeIDs(ids...)
	return eu
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (eu *EmployeeUpdate) AddExchanges(e ...*Exchange) *EmployeeUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddExchangeIDs(ids...)
}

// AddCommissionIDs adds the "commissions" edge to the Commission entity by IDs.
func (eu *EmployeeUpdate) AddCommissionIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.AddCommissionIDs(ids...)
	return eu
}

// AddCommissions adds the "commissions" edges to the Commission entity.
func (eu *EmployeeUpdate) AddCommissions(c ...*Commission) *EmployeeUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCommissionIDs(ids...)
}

// AddAssistanceIDs adds the "assistances" edge to the Assistance entity by IDs.
func (eu *EmployeeUpdate) AddAssistanceIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.AddAssistanceIDs(ids...)
	return eu
}

// AddAssistances adds the "assistances" edges to the Assistance entity.
func (eu *EmployeeUpdate) AddAssistances(a ...*Assistance) *EmployeeUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddAssistanceIDs(ids...)
}

// AddStoreIDs adds the "stores" edge to the Store entity by IDs.
func (eu *EmployeeUpdate) AddStoreIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.AddStoreIDs(ids...)
	return eu
}

// AddStores adds the "stores" edges to the Store entity.
func (eu *EmployeeUpdate) AddStores(s ...*Store) *EmployeeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddStoreIDs(ids...)
}

// SetDutyStore sets the "duty_store" edge to the Store entity.
func (eu *EmployeeUpdate) SetDutyStore(s *Store) *EmployeeUpdate {
	return eu.SetDutyStoreID(s.ID)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (eu *EmployeeUpdate) ClearCity() *EmployeeUpdate {
	eu.mutation.ClearCity()
	return eu
}

// ClearGroup clears the "group" edge to the StoreGroup entity.
func (eu *EmployeeUpdate) ClearGroup() *EmployeeUpdate {
	eu.mutation.ClearGroup()
	return eu
}

// ClearStore clears the "store" edge to the Store entity.
func (eu *EmployeeUpdate) ClearStore() *EmployeeUpdate {
	eu.mutation.ClearStore()
	return eu
}

// ClearAttendances clears all "attendances" edges to the Attendance entity.
func (eu *EmployeeUpdate) ClearAttendances() *EmployeeUpdate {
	eu.mutation.ClearAttendances()
	return eu
}

// RemoveAttendanceIDs removes the "attendances" edge to Attendance entities by IDs.
func (eu *EmployeeUpdate) RemoveAttendanceIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.RemoveAttendanceIDs(ids...)
	return eu
}

// RemoveAttendances removes "attendances" edges to Attendance entities.
func (eu *EmployeeUpdate) RemoveAttendances(a ...*Attendance) *EmployeeUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveAttendanceIDs(ids...)
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (eu *EmployeeUpdate) ClearStocks() *EmployeeUpdate {
	eu.mutation.ClearStocks()
	return eu
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (eu *EmployeeUpdate) RemoveStockIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.RemoveStockIDs(ids...)
	return eu
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (eu *EmployeeUpdate) RemoveStocks(s ...*Stock) *EmployeeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveStockIDs(ids...)
}

// ClearExchanges clears all "exchanges" edges to the Exchange entity.
func (eu *EmployeeUpdate) ClearExchanges() *EmployeeUpdate {
	eu.mutation.ClearExchanges()
	return eu
}

// RemoveExchangeIDs removes the "exchanges" edge to Exchange entities by IDs.
func (eu *EmployeeUpdate) RemoveExchangeIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.RemoveExchangeIDs(ids...)
	return eu
}

// RemoveExchanges removes "exchanges" edges to Exchange entities.
func (eu *EmployeeUpdate) RemoveExchanges(e ...*Exchange) *EmployeeUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveExchangeIDs(ids...)
}

// ClearCommissions clears all "commissions" edges to the Commission entity.
func (eu *EmployeeUpdate) ClearCommissions() *EmployeeUpdate {
	eu.mutation.ClearCommissions()
	return eu
}

// RemoveCommissionIDs removes the "commissions" edge to Commission entities by IDs.
func (eu *EmployeeUpdate) RemoveCommissionIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.RemoveCommissionIDs(ids...)
	return eu
}

// RemoveCommissions removes "commissions" edges to Commission entities.
func (eu *EmployeeUpdate) RemoveCommissions(c ...*Commission) *EmployeeUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCommissionIDs(ids...)
}

// ClearAssistances clears all "assistances" edges to the Assistance entity.
func (eu *EmployeeUpdate) ClearAssistances() *EmployeeUpdate {
	eu.mutation.ClearAssistances()
	return eu
}

// RemoveAssistanceIDs removes the "assistances" edge to Assistance entities by IDs.
func (eu *EmployeeUpdate) RemoveAssistanceIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.RemoveAssistanceIDs(ids...)
	return eu
}

// RemoveAssistances removes "assistances" edges to Assistance entities.
func (eu *EmployeeUpdate) RemoveAssistances(a ...*Assistance) *EmployeeUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveAssistanceIDs(ids...)
}

// ClearStores clears all "stores" edges to the Store entity.
func (eu *EmployeeUpdate) ClearStores() *EmployeeUpdate {
	eu.mutation.ClearStores()
	return eu
}

// RemoveStoreIDs removes the "stores" edge to Store entities by IDs.
func (eu *EmployeeUpdate) RemoveStoreIDs(ids ...uint64) *EmployeeUpdate {
	eu.mutation.RemoveStoreIDs(ids...)
	return eu
}

// RemoveStores removes "stores" edges to Store entities.
func (eu *EmployeeUpdate) RemoveStores(s ...*Store) *EmployeeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveStoreIDs(ids...)
}

// ClearDutyStore clears the "duty_store" edge to the Store entity.
func (eu *EmployeeUpdate) ClearDutyStore() *EmployeeUpdate {
	eu.mutation.ClearDutyStore()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmployeeUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if employee.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized employee.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := employee.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if eu.mutation.CityCleared() && len(eu.mutation.CityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EmployeeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EmployeeUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.SetField(employee.FieldDeletedAt, field.TypeTime, value)
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.ClearField(employee.FieldDeletedAt, field.TypeTime)
	}
	if eu.mutation.CreatorCleared() {
		_spec.ClearField(employee.FieldCreator, field.TypeJSON)
	}
	if value, ok := eu.mutation.LastModifier(); ok {
		_spec.SetField(employee.FieldLastModifier, field.TypeJSON, value)
	}
	if eu.mutation.LastModifierCleared() {
		_spec.ClearField(employee.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.SetField(employee.FieldRemark, field.TypeString, value)
	}
	if eu.mutation.RemarkCleared() {
		_spec.ClearField(employee.FieldRemark, field.TypeString)
	}
	if value, ok := eu.mutation.Sn(); ok {
		_spec.SetField(employee.FieldSn, field.TypeUUID, value)
	}
	if eu.mutation.SnCleared() {
		_spec.ClearField(employee.FieldSn, field.TypeUUID)
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.SetField(employee.FieldName, field.TypeString, value)
	}
	if value, ok := eu.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeString, value)
	}
	if value, ok := eu.mutation.Enable(); ok {
		_spec.SetField(employee.FieldEnable, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Password(); ok {
		_spec.SetField(employee.FieldPassword, field.TypeString, value)
	}
	if eu.mutation.PasswordCleared() {
		_spec.ClearField(employee.FieldPassword, field.TypeString)
	}
	if value, ok := eu.mutation.Limit(); ok {
		_spec.SetField(employee.FieldLimit, field.TypeUint, value)
	}
	if value, ok := eu.mutation.AddedLimit(); ok {
		_spec.AddField(employee.FieldLimit, field.TypeUint, value)
	}
	if eu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CityTable,
			Columns: []string{employee.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CityTable,
			Columns: []string{employee.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.GroupTable,
			Columns: []string{employee.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.GroupTable,
			Columns: []string{employee.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.StoreTable,
			Columns: []string{employee.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.StoreTable,
			Columns: []string{employee.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAttendancesIDs(); len(nodes) > 0 && !eu.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedStocksIDs(); len(nodes) > 0 && !eu.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedExchangesIDs(); len(nodes) > 0 && !eu.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCommissionsIDs(); len(nodes) > 0 && !eu.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CommissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AssistancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assistance.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAssistancesIDs(); len(nodes) > 0 && !eu.mutation.AssistancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assistance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AssistancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assistance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.StoresTable,
			Columns: employee.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedStoresIDs(); len(nodes) > 0 && !eu.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.StoresTable,
			Columns: employee.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.StoresTable,
			Columns: employee.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DutyStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DutyStoreTable,
			Columns: []string{employee.DutyStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DutyStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DutyStoreTable,
			Columns: []string{employee.DutyStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EmployeeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmployeeUpdateOne) SetUpdatedAt(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EmployeeUpdateOne) SetDeletedAt(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDeletedAt(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EmployeeUpdateOne) ClearDeletedAt() *EmployeeUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetLastModifier sets the "last_modifier" field.
func (euo *EmployeeUpdateOne) SetLastModifier(m *model.Modifier) *EmployeeUpdateOne {
	euo.mutation.SetLastModifier(m)
	return euo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (euo *EmployeeUpdateOne) ClearLastModifier() *EmployeeUpdateOne {
	euo.mutation.ClearLastModifier()
	return euo
}

// SetRemark sets the "remark" field.
func (euo *EmployeeUpdateOne) SetRemark(s string) *EmployeeUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableRemark(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetRemark(*s)
	}
	return euo
}

// ClearRemark clears the value of the "remark" field.
func (euo *EmployeeUpdateOne) ClearRemark() *EmployeeUpdateOne {
	euo.mutation.ClearRemark()
	return euo
}

// SetCityID sets the "city_id" field.
func (euo *EmployeeUpdateOne) SetCityID(u uint64) *EmployeeUpdateOne {
	euo.mutation.SetCityID(u)
	return euo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableCityID(u *uint64) *EmployeeUpdateOne {
	if u != nil {
		euo.SetCityID(*u)
	}
	return euo
}

// SetGroupID sets the "group_id" field.
func (euo *EmployeeUpdateOne) SetGroupID(u uint64) *EmployeeUpdateOne {
	euo.mutation.SetGroupID(u)
	return euo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableGroupID(u *uint64) *EmployeeUpdateOne {
	if u != nil {
		euo.SetGroupID(*u)
	}
	return euo
}

// ClearGroupID clears the value of the "group_id" field.
func (euo *EmployeeUpdateOne) ClearGroupID() *EmployeeUpdateOne {
	euo.mutation.ClearGroupID()
	return euo
}

// SetSn sets the "sn" field.
func (euo *EmployeeUpdateOne) SetSn(u uuid.UUID) *EmployeeUpdateOne {
	euo.mutation.SetSn(u)
	return euo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableSn(u *uuid.UUID) *EmployeeUpdateOne {
	if u != nil {
		euo.SetSn(*u)
	}
	return euo
}

// ClearSn clears the value of the "sn" field.
func (euo *EmployeeUpdateOne) ClearSn() *EmployeeUpdateOne {
	euo.mutation.ClearSn()
	return euo
}

// SetName sets the "name" field.
func (euo *EmployeeUpdateOne) SetName(s string) *EmployeeUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableName(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// SetPhone sets the "phone" field.
func (euo *EmployeeUpdateOne) SetPhone(s string) *EmployeeUpdateOne {
	euo.mutation.SetPhone(s)
	return euo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePhone(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetPhone(*s)
	}
	return euo
}

// SetEnable sets the "enable" field.
func (euo *EmployeeUpdateOne) SetEnable(b bool) *EmployeeUpdateOne {
	euo.mutation.SetEnable(b)
	return euo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableEnable(b *bool) *EmployeeUpdateOne {
	if b != nil {
		euo.SetEnable(*b)
	}
	return euo
}

// SetPassword sets the "password" field.
func (euo *EmployeeUpdateOne) SetPassword(s string) *EmployeeUpdateOne {
	euo.mutation.SetPassword(s)
	return euo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePassword(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetPassword(*s)
	}
	return euo
}

// ClearPassword clears the value of the "password" field.
func (euo *EmployeeUpdateOne) ClearPassword() *EmployeeUpdateOne {
	euo.mutation.ClearPassword()
	return euo
}

// SetLimit sets the "limit" field.
func (euo *EmployeeUpdateOne) SetLimit(u uint) *EmployeeUpdateOne {
	euo.mutation.ResetLimit()
	euo.mutation.SetLimit(u)
	return euo
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableLimit(u *uint) *EmployeeUpdateOne {
	if u != nil {
		euo.SetLimit(*u)
	}
	return euo
}

// AddLimit adds u to the "limit" field.
func (euo *EmployeeUpdateOne) AddLimit(u int) *EmployeeUpdateOne {
	euo.mutation.AddLimit(u)
	return euo
}

// SetDutyStoreID sets the "duty_store_id" field.
func (euo *EmployeeUpdateOne) SetDutyStoreID(u uint64) *EmployeeUpdateOne {
	euo.mutation.SetDutyStoreID(u)
	return euo
}

// SetNillableDutyStoreID sets the "duty_store_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableDutyStoreID(u *uint64) *EmployeeUpdateOne {
	if u != nil {
		euo.SetDutyStoreID(*u)
	}
	return euo
}

// ClearDutyStoreID clears the value of the "duty_store_id" field.
func (euo *EmployeeUpdateOne) ClearDutyStoreID() *EmployeeUpdateOne {
	euo.mutation.ClearDutyStoreID()
	return euo
}

// SetCity sets the "city" edge to the City entity.
func (euo *EmployeeUpdateOne) SetCity(c *City) *EmployeeUpdateOne {
	return euo.SetCityID(c.ID)
}

// SetGroup sets the "group" edge to the StoreGroup entity.
func (euo *EmployeeUpdateOne) SetGroup(s *StoreGroup) *EmployeeUpdateOne {
	return euo.SetGroupID(s.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (euo *EmployeeUpdateOne) SetStoreID(id uint64) *EmployeeUpdateOne {
	euo.mutation.SetStoreID(id)
	return euo
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableStoreID(id *uint64) *EmployeeUpdateOne {
	if id != nil {
		euo = euo.SetStoreID(*id)
	}
	return euo
}

// SetStore sets the "store" edge to the Store entity.
func (euo *EmployeeUpdateOne) SetStore(s *Store) *EmployeeUpdateOne {
	return euo.SetStoreID(s.ID)
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (euo *EmployeeUpdateOne) AddAttendanceIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.AddAttendanceIDs(ids...)
	return euo
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (euo *EmployeeUpdateOne) AddAttendances(a ...*Attendance) *EmployeeUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddAttendanceIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (euo *EmployeeUpdateOne) AddStockIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.AddStockIDs(ids...)
	return euo
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (euo *EmployeeUpdateOne) AddStocks(s ...*Stock) *EmployeeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddStockIDs(ids...)
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (euo *EmployeeUpdateOne) AddExchangeIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.AddExchangeIDs(ids...)
	return euo
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (euo *EmployeeUpdateOne) AddExchanges(e ...*Exchange) *EmployeeUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddExchangeIDs(ids...)
}

// AddCommissionIDs adds the "commissions" edge to the Commission entity by IDs.
func (euo *EmployeeUpdateOne) AddCommissionIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.AddCommissionIDs(ids...)
	return euo
}

// AddCommissions adds the "commissions" edges to the Commission entity.
func (euo *EmployeeUpdateOne) AddCommissions(c ...*Commission) *EmployeeUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCommissionIDs(ids...)
}

// AddAssistanceIDs adds the "assistances" edge to the Assistance entity by IDs.
func (euo *EmployeeUpdateOne) AddAssistanceIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.AddAssistanceIDs(ids...)
	return euo
}

// AddAssistances adds the "assistances" edges to the Assistance entity.
func (euo *EmployeeUpdateOne) AddAssistances(a ...*Assistance) *EmployeeUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddAssistanceIDs(ids...)
}

// AddStoreIDs adds the "stores" edge to the Store entity by IDs.
func (euo *EmployeeUpdateOne) AddStoreIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.AddStoreIDs(ids...)
	return euo
}

// AddStores adds the "stores" edges to the Store entity.
func (euo *EmployeeUpdateOne) AddStores(s ...*Store) *EmployeeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddStoreIDs(ids...)
}

// SetDutyStore sets the "duty_store" edge to the Store entity.
func (euo *EmployeeUpdateOne) SetDutyStore(s *Store) *EmployeeUpdateOne {
	return euo.SetDutyStoreID(s.ID)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (euo *EmployeeUpdateOne) ClearCity() *EmployeeUpdateOne {
	euo.mutation.ClearCity()
	return euo
}

// ClearGroup clears the "group" edge to the StoreGroup entity.
func (euo *EmployeeUpdateOne) ClearGroup() *EmployeeUpdateOne {
	euo.mutation.ClearGroup()
	return euo
}

// ClearStore clears the "store" edge to the Store entity.
func (euo *EmployeeUpdateOne) ClearStore() *EmployeeUpdateOne {
	euo.mutation.ClearStore()
	return euo
}

// ClearAttendances clears all "attendances" edges to the Attendance entity.
func (euo *EmployeeUpdateOne) ClearAttendances() *EmployeeUpdateOne {
	euo.mutation.ClearAttendances()
	return euo
}

// RemoveAttendanceIDs removes the "attendances" edge to Attendance entities by IDs.
func (euo *EmployeeUpdateOne) RemoveAttendanceIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.RemoveAttendanceIDs(ids...)
	return euo
}

// RemoveAttendances removes "attendances" edges to Attendance entities.
func (euo *EmployeeUpdateOne) RemoveAttendances(a ...*Attendance) *EmployeeUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveAttendanceIDs(ids...)
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (euo *EmployeeUpdateOne) ClearStocks() *EmployeeUpdateOne {
	euo.mutation.ClearStocks()
	return euo
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (euo *EmployeeUpdateOne) RemoveStockIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.RemoveStockIDs(ids...)
	return euo
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (euo *EmployeeUpdateOne) RemoveStocks(s ...*Stock) *EmployeeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveStockIDs(ids...)
}

// ClearExchanges clears all "exchanges" edges to the Exchange entity.
func (euo *EmployeeUpdateOne) ClearExchanges() *EmployeeUpdateOne {
	euo.mutation.ClearExchanges()
	return euo
}

// RemoveExchangeIDs removes the "exchanges" edge to Exchange entities by IDs.
func (euo *EmployeeUpdateOne) RemoveExchangeIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.RemoveExchangeIDs(ids...)
	return euo
}

// RemoveExchanges removes "exchanges" edges to Exchange entities.
func (euo *EmployeeUpdateOne) RemoveExchanges(e ...*Exchange) *EmployeeUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveExchangeIDs(ids...)
}

// ClearCommissions clears all "commissions" edges to the Commission entity.
func (euo *EmployeeUpdateOne) ClearCommissions() *EmployeeUpdateOne {
	euo.mutation.ClearCommissions()
	return euo
}

// RemoveCommissionIDs removes the "commissions" edge to Commission entities by IDs.
func (euo *EmployeeUpdateOne) RemoveCommissionIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.RemoveCommissionIDs(ids...)
	return euo
}

// RemoveCommissions removes "commissions" edges to Commission entities.
func (euo *EmployeeUpdateOne) RemoveCommissions(c ...*Commission) *EmployeeUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCommissionIDs(ids...)
}

// ClearAssistances clears all "assistances" edges to the Assistance entity.
func (euo *EmployeeUpdateOne) ClearAssistances() *EmployeeUpdateOne {
	euo.mutation.ClearAssistances()
	return euo
}

// RemoveAssistanceIDs removes the "assistances" edge to Assistance entities by IDs.
func (euo *EmployeeUpdateOne) RemoveAssistanceIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.RemoveAssistanceIDs(ids...)
	return euo
}

// RemoveAssistances removes "assistances" edges to Assistance entities.
func (euo *EmployeeUpdateOne) RemoveAssistances(a ...*Assistance) *EmployeeUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveAssistanceIDs(ids...)
}

// ClearStores clears all "stores" edges to the Store entity.
func (euo *EmployeeUpdateOne) ClearStores() *EmployeeUpdateOne {
	euo.mutation.ClearStores()
	return euo
}

// RemoveStoreIDs removes the "stores" edge to Store entities by IDs.
func (euo *EmployeeUpdateOne) RemoveStoreIDs(ids ...uint64) *EmployeeUpdateOne {
	euo.mutation.RemoveStoreIDs(ids...)
	return euo
}

// RemoveStores removes "stores" edges to Store entities.
func (euo *EmployeeUpdateOne) RemoveStores(s ...*Store) *EmployeeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveStoreIDs(ids...)
}

// ClearDutyStore clears the "duty_store" edge to the Store entity.
func (euo *EmployeeUpdateOne) ClearDutyStore() *EmployeeUpdateOne {
	euo.mutation.ClearDutyStore()
	return euo
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (euo *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmployeeUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if employee.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized employee.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := employee.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if euo.mutation.CityCleared() && len(euo.mutation.CityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EmployeeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EmployeeUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.SetField(employee.FieldDeletedAt, field.TypeTime, value)
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.ClearField(employee.FieldDeletedAt, field.TypeTime)
	}
	if euo.mutation.CreatorCleared() {
		_spec.ClearField(employee.FieldCreator, field.TypeJSON)
	}
	if value, ok := euo.mutation.LastModifier(); ok {
		_spec.SetField(employee.FieldLastModifier, field.TypeJSON, value)
	}
	if euo.mutation.LastModifierCleared() {
		_spec.ClearField(employee.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.SetField(employee.FieldRemark, field.TypeString, value)
	}
	if euo.mutation.RemarkCleared() {
		_spec.ClearField(employee.FieldRemark, field.TypeString)
	}
	if value, ok := euo.mutation.Sn(); ok {
		_spec.SetField(employee.FieldSn, field.TypeUUID, value)
	}
	if euo.mutation.SnCleared() {
		_spec.ClearField(employee.FieldSn, field.TypeUUID)
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.SetField(employee.FieldName, field.TypeString, value)
	}
	if value, ok := euo.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeString, value)
	}
	if value, ok := euo.mutation.Enable(); ok {
		_spec.SetField(employee.FieldEnable, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Password(); ok {
		_spec.SetField(employee.FieldPassword, field.TypeString, value)
	}
	if euo.mutation.PasswordCleared() {
		_spec.ClearField(employee.FieldPassword, field.TypeString)
	}
	if value, ok := euo.mutation.Limit(); ok {
		_spec.SetField(employee.FieldLimit, field.TypeUint, value)
	}
	if value, ok := euo.mutation.AddedLimit(); ok {
		_spec.AddField(employee.FieldLimit, field.TypeUint, value)
	}
	if euo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CityTable,
			Columns: []string{employee.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CityTable,
			Columns: []string{employee.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.GroupTable,
			Columns: []string{employee.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.GroupTable,
			Columns: []string{employee.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.StoreTable,
			Columns: []string{employee.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.StoreTable,
			Columns: []string{employee.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAttendancesIDs(); len(nodes) > 0 && !euo.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedStocksIDs(); len(nodes) > 0 && !euo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedExchangesIDs(); len(nodes) > 0 && !euo.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCommissionsIDs(); len(nodes) > 0 && !euo.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CommissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AssistancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assistance.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAssistancesIDs(); len(nodes) > 0 && !euo.mutation.AssistancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assistance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AssistancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assistance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.StoresTable,
			Columns: employee.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedStoresIDs(); len(nodes) > 0 && !euo.mutation.StoresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.StoresTable,
			Columns: employee.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.StoresTable,
			Columns: employee.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DutyStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DutyStoreTable,
			Columns: []string{employee.DutyStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DutyStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DutyStoreTable,
			Columns: []string{employee.DutyStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(euo.modifiers...)
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
