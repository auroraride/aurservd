// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
	"github.com/google/uuid"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *EmployeeCreate) SetCreatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableCreatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EmployeeCreate) SetUpdatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableUpdatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *EmployeeCreate) SetDeletedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableDeletedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetCreator sets the "creator" field.
func (ec *EmployeeCreate) SetCreator(m *model.Modifier) *EmployeeCreate {
	ec.mutation.SetCreator(m)
	return ec
}

// SetLastModifier sets the "last_modifier" field.
func (ec *EmployeeCreate) SetLastModifier(m *model.Modifier) *EmployeeCreate {
	ec.mutation.SetLastModifier(m)
	return ec
}

// SetRemark sets the "remark" field.
func (ec *EmployeeCreate) SetRemark(s string) *EmployeeCreate {
	ec.mutation.SetRemark(s)
	return ec
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableRemark(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetRemark(*s)
	}
	return ec
}

// SetCityID sets the "city_id" field.
func (ec *EmployeeCreate) SetCityID(u uint64) *EmployeeCreate {
	ec.mutation.SetCityID(u)
	return ec
}

// SetGroupID sets the "group_id" field.
func (ec *EmployeeCreate) SetGroupID(u uint64) *EmployeeCreate {
	ec.mutation.SetGroupID(u)
	return ec
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableGroupID(u *uint64) *EmployeeCreate {
	if u != nil {
		ec.SetGroupID(*u)
	}
	return ec
}

// SetSn sets the "sn" field.
func (ec *EmployeeCreate) SetSn(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetSn(u)
	return ec
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableSn(u *uuid.UUID) *EmployeeCreate {
	if u != nil {
		ec.SetSn(*u)
	}
	return ec
}

// SetName sets the "name" field.
func (ec *EmployeeCreate) SetName(s string) *EmployeeCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetPhone sets the "phone" field.
func (ec *EmployeeCreate) SetPhone(s string) *EmployeeCreate {
	ec.mutation.SetPhone(s)
	return ec
}

// SetEnable sets the "enable" field.
func (ec *EmployeeCreate) SetEnable(b bool) *EmployeeCreate {
	ec.mutation.SetEnable(b)
	return ec
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableEnable(b *bool) *EmployeeCreate {
	if b != nil {
		ec.SetEnable(*b)
	}
	return ec
}

// SetPassword sets the "password" field.
func (ec *EmployeeCreate) SetPassword(s string) *EmployeeCreate {
	ec.mutation.SetPassword(s)
	return ec
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillablePassword(s *string) *EmployeeCreate {
	if s != nil {
		ec.SetPassword(*s)
	}
	return ec
}

// SetLimit sets the "limit" field.
func (ec *EmployeeCreate) SetLimit(u uint) *EmployeeCreate {
	ec.mutation.SetLimit(u)
	return ec
}

// SetNillableLimit sets the "limit" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableLimit(u *uint) *EmployeeCreate {
	if u != nil {
		ec.SetLimit(*u)
	}
	return ec
}

// SetCity sets the "city" edge to the City entity.
func (ec *EmployeeCreate) SetCity(c *City) *EmployeeCreate {
	return ec.SetCityID(c.ID)
}

// SetGroup sets the "group" edge to the StoreGroup entity.
func (ec *EmployeeCreate) SetGroup(s *StoreGroup) *EmployeeCreate {
	return ec.SetGroupID(s.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (ec *EmployeeCreate) SetStoreID(id uint64) *EmployeeCreate {
	ec.mutation.SetStoreID(id)
	return ec
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (ec *EmployeeCreate) SetNillableStoreID(id *uint64) *EmployeeCreate {
	if id != nil {
		ec = ec.SetStoreID(*id)
	}
	return ec
}

// SetStore sets the "store" edge to the Store entity.
func (ec *EmployeeCreate) SetStore(s *Store) *EmployeeCreate {
	return ec.SetStoreID(s.ID)
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (ec *EmployeeCreate) AddAttendanceIDs(ids ...uint64) *EmployeeCreate {
	ec.mutation.AddAttendanceIDs(ids...)
	return ec
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (ec *EmployeeCreate) AddAttendances(a ...*Attendance) *EmployeeCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddAttendanceIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (ec *EmployeeCreate) AddStockIDs(ids ...uint64) *EmployeeCreate {
	ec.mutation.AddStockIDs(ids...)
	return ec
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (ec *EmployeeCreate) AddStocks(s ...*Stock) *EmployeeCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddStockIDs(ids...)
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (ec *EmployeeCreate) AddExchangeIDs(ids ...uint64) *EmployeeCreate {
	ec.mutation.AddExchangeIDs(ids...)
	return ec
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (ec *EmployeeCreate) AddExchanges(e ...*Exchange) *EmployeeCreate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ec.AddExchangeIDs(ids...)
}

// AddCommissionIDs adds the "commissions" edge to the Commission entity by IDs.
func (ec *EmployeeCreate) AddCommissionIDs(ids ...uint64) *EmployeeCreate {
	ec.mutation.AddCommissionIDs(ids...)
	return ec
}

// AddCommissions adds the "commissions" edges to the Commission entity.
func (ec *EmployeeCreate) AddCommissions(c ...*Commission) *EmployeeCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ec.AddCommissionIDs(ids...)
}

// AddAssistanceIDs adds the "assistances" edge to the Assistance entity by IDs.
func (ec *EmployeeCreate) AddAssistanceIDs(ids ...uint64) *EmployeeCreate {
	ec.mutation.AddAssistanceIDs(ids...)
	return ec
}

// AddAssistances adds the "assistances" edges to the Assistance entity.
func (ec *EmployeeCreate) AddAssistances(a ...*Assistance) *EmployeeCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddAssistanceIDs(ids...)
}

// AddStoreIDs adds the "stores" edge to the Store entity by IDs.
func (ec *EmployeeCreate) AddStoreIDs(ids ...uint64) *EmployeeCreate {
	ec.mutation.AddStoreIDs(ids...)
	return ec
}

// AddStores adds the "stores" edges to the Store entity.
func (ec *EmployeeCreate) AddStores(s ...*Store) *EmployeeCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ec.AddStoreIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	if err := ec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmployeeCreate) defaults() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		if employee.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized employee.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := employee.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		if employee.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized employee.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := employee.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Enable(); !ok {
		v := employee.DefaultEnable
		ec.mutation.SetEnable(v)
	}
	if _, ok := ec.mutation.Limit(); !ok {
		v := employee.DefaultLimit
		ec.mutation.SetLimit(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeeCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Employee.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Employee.updated_at"`)}
	}
	if _, ok := ec.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Employee.city_id"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Employee.name"`)}
	}
	if _, ok := ec.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Employee.phone"`)}
	}
	if _, ok := ec.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Employee.enable"`)}
	}
	if _, ok := ec.mutation.Limit(); !ok {
		return &ValidationError{Name: "limit", err: errors.New(`ent: missing required field "Employee.limit"`)}
	}
	if _, ok := ec.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Employee.city"`)}
	}
	return nil
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		_node = &Employee{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employee.Table, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(employee.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.SetField(employee.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Creator(); ok {
		_spec.SetField(employee.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ec.mutation.LastModifier(); ok {
		_spec.SetField(employee.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ec.mutation.Remark(); ok {
		_spec.SetField(employee.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ec.mutation.Sn(); ok {
		_spec.SetField(employee.FieldSn, field.TypeUUID, value)
		_node.Sn = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(employee.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Phone(); ok {
		_spec.SetField(employee.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := ec.mutation.Enable(); ok {
		_spec.SetField(employee.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := ec.mutation.Password(); ok {
		_spec.SetField(employee.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ec.mutation.Limit(); ok {
		_spec.SetField(employee.FieldLimit, field.TypeUint, value)
		_node.Limit = value
	}
	if nodes := ec.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.CityTable,
			Columns: []string{employee.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   employee.GroupTable,
			Columns: []string{employee.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.StoreTable,
			Columns: []string{employee.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AttendancesTable,
			Columns: []string{employee.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.StocksTable,
			Columns: []string{employee.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.ExchangesTable,
			Columns: []string{employee.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CommissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CommissionsTable,
			Columns: []string{employee.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AssistancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AssistancesTable,
			Columns: []string{employee.AssistancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assistance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.StoresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.StoresTable,
			Columns: employee.StoresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Employee.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmployeeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ec *EmployeeCreate) OnConflict(opts ...sql.ConflictOption) *EmployeeUpsertOne {
	ec.conflict = opts
	return &EmployeeUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EmployeeCreate) OnConflictColumns(columns ...string) *EmployeeUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EmployeeUpsertOne{
		create: ec,
	}
}

type (
	// EmployeeUpsertOne is the builder for "upsert"-ing
	//  one Employee node.
	EmployeeUpsertOne struct {
		create *EmployeeCreate
	}

	// EmployeeUpsert is the "OnConflict" setter.
	EmployeeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EmployeeUpsert) SetUpdatedAt(v time.Time) *EmployeeUpsert {
	u.Set(employee.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateUpdatedAt() *EmployeeUpsert {
	u.SetExcluded(employee.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmployeeUpsert) SetDeletedAt(v time.Time) *EmployeeUpsert {
	u.Set(employee.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateDeletedAt() *EmployeeUpsert {
	u.SetExcluded(employee.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EmployeeUpsert) ClearDeletedAt() *EmployeeUpsert {
	u.SetNull(employee.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EmployeeUpsert) SetLastModifier(v *model.Modifier) *EmployeeUpsert {
	u.Set(employee.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateLastModifier() *EmployeeUpsert {
	u.SetExcluded(employee.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EmployeeUpsert) ClearLastModifier() *EmployeeUpsert {
	u.SetNull(employee.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EmployeeUpsert) SetRemark(v string) *EmployeeUpsert {
	u.Set(employee.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateRemark() *EmployeeUpsert {
	u.SetExcluded(employee.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EmployeeUpsert) ClearRemark() *EmployeeUpsert {
	u.SetNull(employee.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *EmployeeUpsert) SetCityID(v uint64) *EmployeeUpsert {
	u.Set(employee.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateCityID() *EmployeeUpsert {
	u.SetExcluded(employee.FieldCityID)
	return u
}

// SetGroupID sets the "group_id" field.
func (u *EmployeeUpsert) SetGroupID(v uint64) *EmployeeUpsert {
	u.Set(employee.FieldGroupID, v)
	return u
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateGroupID() *EmployeeUpsert {
	u.SetExcluded(employee.FieldGroupID)
	return u
}

// ClearGroupID clears the value of the "group_id" field.
func (u *EmployeeUpsert) ClearGroupID() *EmployeeUpsert {
	u.SetNull(employee.FieldGroupID)
	return u
}

// SetSn sets the "sn" field.
func (u *EmployeeUpsert) SetSn(v uuid.UUID) *EmployeeUpsert {
	u.Set(employee.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateSn() *EmployeeUpsert {
	u.SetExcluded(employee.FieldSn)
	return u
}

// ClearSn clears the value of the "sn" field.
func (u *EmployeeUpsert) ClearSn() *EmployeeUpsert {
	u.SetNull(employee.FieldSn)
	return u
}

// SetName sets the "name" field.
func (u *EmployeeUpsert) SetName(v string) *EmployeeUpsert {
	u.Set(employee.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateName() *EmployeeUpsert {
	u.SetExcluded(employee.FieldName)
	return u
}

// SetPhone sets the "phone" field.
func (u *EmployeeUpsert) SetPhone(v string) *EmployeeUpsert {
	u.Set(employee.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdatePhone() *EmployeeUpsert {
	u.SetExcluded(employee.FieldPhone)
	return u
}

// SetEnable sets the "enable" field.
func (u *EmployeeUpsert) SetEnable(v bool) *EmployeeUpsert {
	u.Set(employee.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateEnable() *EmployeeUpsert {
	u.SetExcluded(employee.FieldEnable)
	return u
}

// SetPassword sets the "password" field.
func (u *EmployeeUpsert) SetPassword(v string) *EmployeeUpsert {
	u.Set(employee.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdatePassword() *EmployeeUpsert {
	u.SetExcluded(employee.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *EmployeeUpsert) ClearPassword() *EmployeeUpsert {
	u.SetNull(employee.FieldPassword)
	return u
}

// SetLimit sets the "limit" field.
func (u *EmployeeUpsert) SetLimit(v uint) *EmployeeUpsert {
	u.Set(employee.FieldLimit, v)
	return u
}

// UpdateLimit sets the "limit" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateLimit() *EmployeeUpsert {
	u.SetExcluded(employee.FieldLimit)
	return u
}

// AddLimit adds v to the "limit" field.
func (u *EmployeeUpsert) AddLimit(v uint) *EmployeeUpsert {
	u.Add(employee.FieldLimit, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EmployeeUpsertOne) UpdateNewValues() *EmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(employee.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(employee.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Employee.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EmployeeUpsertOne) Ignore() *EmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmployeeUpsertOne) DoNothing() *EmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmployeeCreate.OnConflict
// documentation for more info.
func (u *EmployeeUpsertOne) Update(set func(*EmployeeUpsert)) *EmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmployeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmployeeUpsertOne) SetUpdatedAt(v time.Time) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateUpdatedAt() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmployeeUpsertOne) SetDeletedAt(v time.Time) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateDeletedAt() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EmployeeUpsertOne) ClearDeletedAt() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EmployeeUpsertOne) SetLastModifier(v *model.Modifier) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateLastModifier() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EmployeeUpsertOne) ClearLastModifier() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EmployeeUpsertOne) SetRemark(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateRemark() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EmployeeUpsertOne) ClearRemark() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *EmployeeUpsertOne) SetCityID(v uint64) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateCityID() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateCityID()
	})
}

// SetGroupID sets the "group_id" field.
func (u *EmployeeUpsertOne) SetGroupID(v uint64) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateGroupID() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateGroupID()
	})
}

// ClearGroupID clears the value of the "group_id" field.
func (u *EmployeeUpsertOne) ClearGroupID() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearGroupID()
	})
}

// SetSn sets the "sn" field.
func (u *EmployeeUpsertOne) SetSn(v uuid.UUID) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateSn() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateSn()
	})
}

// ClearSn clears the value of the "sn" field.
func (u *EmployeeUpsertOne) ClearSn() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearSn()
	})
}

// SetName sets the "name" field.
func (u *EmployeeUpsertOne) SetName(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateName() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *EmployeeUpsertOne) SetPhone(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdatePhone() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdatePhone()
	})
}

// SetEnable sets the "enable" field.
func (u *EmployeeUpsertOne) SetEnable(v bool) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateEnable() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateEnable()
	})
}

// SetPassword sets the "password" field.
func (u *EmployeeUpsertOne) SetPassword(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdatePassword() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *EmployeeUpsertOne) ClearPassword() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearPassword()
	})
}

// SetLimit sets the "limit" field.
func (u *EmployeeUpsertOne) SetLimit(v uint) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetLimit(v)
	})
}

// AddLimit adds v to the "limit" field.
func (u *EmployeeUpsertOne) AddLimit(v uint) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.AddLimit(v)
	})
}

// UpdateLimit sets the "limit" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateLimit() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateLimit()
	})
}

// Exec executes the query.
func (u *EmployeeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmployeeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmployeeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmployeeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmployeeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmployeeCreateBulk is the builder for creating many Employee entities in bulk.
type EmployeeCreateBulk struct {
	config
	err      error
	builders []*EmployeeCreate
	conflict []sql.ConflictOption
}

// Save creates the Employee entities in the database.
func (ecb *EmployeeCreateBulk) Save(ctx context.Context) ([]*Employee, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employee, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) SaveX(ctx context.Context) []*Employee {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Employee.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmployeeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ecb *EmployeeCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmployeeUpsertBulk {
	ecb.conflict = opts
	return &EmployeeUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EmployeeCreateBulk) OnConflictColumns(columns ...string) *EmployeeUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EmployeeUpsertBulk{
		create: ecb,
	}
}

// EmployeeUpsertBulk is the builder for "upsert"-ing
// a bulk of Employee nodes.
type EmployeeUpsertBulk struct {
	create *EmployeeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EmployeeUpsertBulk) UpdateNewValues() *EmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(employee.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(employee.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EmployeeUpsertBulk) Ignore() *EmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmployeeUpsertBulk) DoNothing() *EmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmployeeCreateBulk.OnConflict
// documentation for more info.
func (u *EmployeeUpsertBulk) Update(set func(*EmployeeUpsert)) *EmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmployeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EmployeeUpsertBulk) SetUpdatedAt(v time.Time) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateUpdatedAt() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EmployeeUpsertBulk) SetDeletedAt(v time.Time) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateDeletedAt() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EmployeeUpsertBulk) ClearDeletedAt() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EmployeeUpsertBulk) SetLastModifier(v *model.Modifier) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateLastModifier() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EmployeeUpsertBulk) ClearLastModifier() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EmployeeUpsertBulk) SetRemark(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateRemark() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EmployeeUpsertBulk) ClearRemark() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *EmployeeUpsertBulk) SetCityID(v uint64) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateCityID() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateCityID()
	})
}

// SetGroupID sets the "group_id" field.
func (u *EmployeeUpsertBulk) SetGroupID(v uint64) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateGroupID() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateGroupID()
	})
}

// ClearGroupID clears the value of the "group_id" field.
func (u *EmployeeUpsertBulk) ClearGroupID() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearGroupID()
	})
}

// SetSn sets the "sn" field.
func (u *EmployeeUpsertBulk) SetSn(v uuid.UUID) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateSn() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateSn()
	})
}

// ClearSn clears the value of the "sn" field.
func (u *EmployeeUpsertBulk) ClearSn() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearSn()
	})
}

// SetName sets the "name" field.
func (u *EmployeeUpsertBulk) SetName(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateName() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *EmployeeUpsertBulk) SetPhone(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdatePhone() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdatePhone()
	})
}

// SetEnable sets the "enable" field.
func (u *EmployeeUpsertBulk) SetEnable(v bool) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateEnable() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateEnable()
	})
}

// SetPassword sets the "password" field.
func (u *EmployeeUpsertBulk) SetPassword(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdatePassword() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *EmployeeUpsertBulk) ClearPassword() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearPassword()
	})
}

// SetLimit sets the "limit" field.
func (u *EmployeeUpsertBulk) SetLimit(v uint) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetLimit(v)
	})
}

// AddLimit adds v to the "limit" field.
func (u *EmployeeUpsertBulk) AddLimit(v uint) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.AddLimit(v)
	})
}

// UpdateLimit sets the "limit" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateLimit() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateLimit()
	})
}

// Exec executes the query.
func (u *EmployeeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmployeeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmployeeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmployeeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
