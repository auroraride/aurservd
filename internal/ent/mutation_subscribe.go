// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/subscribe"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// SubscribeMutation represents an operation that mutates the Subscribe nodes in the graph.
type SubscribeMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uint64
	created_at           *time.Time
	updated_at           *time.Time
	deleted_at           *time.Time
	creator              **model.Modifier
	last_modifier        **model.Modifier
	remark               *string
	status               *uint8
	addstatus            *int8
	_type                *uint
	add_type             *int
	model                *string
	initial_days         *int
	addinitial_days      *int
	alter_days           *int
	addalter_days        *int
	pause_days           *int
	addpause_days        *int
	renewal_days         *int
	addrenewal_days      *int
	overdue_days         *int
	addoverdue_days      *int
	remaining            *int
	addremaining         *int
	paused_at            *time.Time
	start_at             *time.Time
	end_at               *time.Time
	refund_at            *time.Time
	unsubscribe_reason   *string
	last_bill_date       *time.Time
	pause_overdue        *bool
	clearedFields        map[string]struct{}
	plan                 *uint64
	clearedplan          bool
	employee             *uint64
	clearedemployee      bool
	city                 *uint64
	clearedcity          bool
	station              *uint64
	clearedstation       bool
	store                *uint64
	clearedstore         bool
	cabinet              *uint64
	clearedcabinet       bool
	rider                *uint64
	clearedrider         bool
	enterprise           *uint64
	clearedenterprise    bool
	pauses               map[uint64]struct{}
	removedpauses        map[uint64]struct{}
	clearedpauses        bool
	alters               map[uint64]struct{}
	removedalters        map[uint64]struct{}
	clearedalters        bool
	orders               map[uint64]struct{}
	removedorders        map[uint64]struct{}
	clearedorders        bool
	initial_order        *uint64
	clearedinitial_order bool
	bills                map[uint64]struct{}
	removedbills         map[uint64]struct{}
	clearedbills         bool
	done                 bool
	oldValue             func(context.Context) (*Subscribe, error)
	predicates           []predicate.Subscribe
}

var _ ent.Mutation = (*SubscribeMutation)(nil)

// subscribeOption allows management of the mutation configuration using functional options.
type subscribeOption func(*SubscribeMutation)

// newSubscribeMutation creates new mutation for the Subscribe entity.
func newSubscribeMutation(c config, op Op, opts ...subscribeOption) *SubscribeMutation {
	m := &SubscribeMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscribe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscribeID sets the ID field of the mutation.
func withSubscribeID(id uint64) subscribeOption {
	return func(m *SubscribeMutation) {
		var (
			err   error
			once  sync.Once
			value *Subscribe
		)
		m.oldValue = func(ctx context.Context) (*Subscribe, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subscribe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscribe sets the old Subscribe of the mutation.
func withSubscribe(node *Subscribe) subscribeOption {
	return func(m *SubscribeMutation) {
		m.oldValue = func(context.Context) (*Subscribe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscribeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscribeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscribeMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscribeMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subscribe.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscribeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscribeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscribeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscribeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscribeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscribeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SubscribeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SubscribeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SubscribeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[subscribe.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SubscribeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SubscribeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, subscribe.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *SubscribeMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *SubscribeMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *SubscribeMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[subscribe.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *SubscribeMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *SubscribeMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, subscribe.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *SubscribeMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *SubscribeMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *SubscribeMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[subscribe.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *SubscribeMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *SubscribeMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, subscribe.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *SubscribeMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SubscribeMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SubscribeMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[subscribe.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SubscribeMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SubscribeMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, subscribe.FieldRemark)
}

// SetPlanID sets the "plan_id" field.
func (m *SubscribeMutation) SetPlanID(u uint64) {
	m.plan = &u
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *SubscribeMutation) PlanID() (r uint64, exists bool) {
	v := m.plan
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldPlanID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ClearPlanID clears the value of the "plan_id" field.
func (m *SubscribeMutation) ClearPlanID() {
	m.plan = nil
	m.clearedFields[subscribe.FieldPlanID] = struct{}{}
}

// PlanIDCleared returns if the "plan_id" field was cleared in this mutation.
func (m *SubscribeMutation) PlanIDCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldPlanID]
	return ok
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *SubscribeMutation) ResetPlanID() {
	m.plan = nil
	delete(m.clearedFields, subscribe.FieldPlanID)
}

// SetEmployeeID sets the "employee_id" field.
func (m *SubscribeMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *SubscribeMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (m *SubscribeMutation) ClearEmployeeID() {
	m.employee = nil
	m.clearedFields[subscribe.FieldEmployeeID] = struct{}{}
}

// EmployeeIDCleared returns if the "employee_id" field was cleared in this mutation.
func (m *SubscribeMutation) EmployeeIDCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldEmployeeID]
	return ok
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *SubscribeMutation) ResetEmployeeID() {
	m.employee = nil
	delete(m.clearedFields, subscribe.FieldEmployeeID)
}

// SetCityID sets the "city_id" field.
func (m *SubscribeMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *SubscribeMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *SubscribeMutation) ResetCityID() {
	m.city = nil
}

// SetStationID sets the "station_id" field.
func (m *SubscribeMutation) SetStationID(u uint64) {
	m.station = &u
}

// StationID returns the value of the "station_id" field in the mutation.
func (m *SubscribeMutation) StationID() (r uint64, exists bool) {
	v := m.station
	if v == nil {
		return
	}
	return *v, true
}

// OldStationID returns the old "station_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldStationID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStationID: %w", err)
	}
	return oldValue.StationID, nil
}

// ClearStationID clears the value of the "station_id" field.
func (m *SubscribeMutation) ClearStationID() {
	m.station = nil
	m.clearedFields[subscribe.FieldStationID] = struct{}{}
}

// StationIDCleared returns if the "station_id" field was cleared in this mutation.
func (m *SubscribeMutation) StationIDCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldStationID]
	return ok
}

// ResetStationID resets all changes to the "station_id" field.
func (m *SubscribeMutation) ResetStationID() {
	m.station = nil
	delete(m.clearedFields, subscribe.FieldStationID)
}

// SetStoreID sets the "store_id" field.
func (m *SubscribeMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *SubscribeMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldStoreID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ClearStoreID clears the value of the "store_id" field.
func (m *SubscribeMutation) ClearStoreID() {
	m.store = nil
	m.clearedFields[subscribe.FieldStoreID] = struct{}{}
}

// StoreIDCleared returns if the "store_id" field was cleared in this mutation.
func (m *SubscribeMutation) StoreIDCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldStoreID]
	return ok
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *SubscribeMutation) ResetStoreID() {
	m.store = nil
	delete(m.clearedFields, subscribe.FieldStoreID)
}

// SetCabinetID sets the "cabinet_id" field.
func (m *SubscribeMutation) SetCabinetID(u uint64) {
	m.cabinet = &u
}

// CabinetID returns the value of the "cabinet_id" field in the mutation.
func (m *SubscribeMutation) CabinetID() (r uint64, exists bool) {
	v := m.cabinet
	if v == nil {
		return
	}
	return *v, true
}

// OldCabinetID returns the old "cabinet_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldCabinetID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCabinetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCabinetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCabinetID: %w", err)
	}
	return oldValue.CabinetID, nil
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (m *SubscribeMutation) ClearCabinetID() {
	m.cabinet = nil
	m.clearedFields[subscribe.FieldCabinetID] = struct{}{}
}

// CabinetIDCleared returns if the "cabinet_id" field was cleared in this mutation.
func (m *SubscribeMutation) CabinetIDCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldCabinetID]
	return ok
}

// ResetCabinetID resets all changes to the "cabinet_id" field.
func (m *SubscribeMutation) ResetCabinetID() {
	m.cabinet = nil
	delete(m.clearedFields, subscribe.FieldCabinetID)
}

// SetRiderID sets the "rider_id" field.
func (m *SubscribeMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *SubscribeMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *SubscribeMutation) ResetRiderID() {
	m.rider = nil
}

// SetInitialOrderID sets the "initial_order_id" field.
func (m *SubscribeMutation) SetInitialOrderID(u uint64) {
	m.initial_order = &u
}

// InitialOrderID returns the value of the "initial_order_id" field in the mutation.
func (m *SubscribeMutation) InitialOrderID() (r uint64, exists bool) {
	v := m.initial_order
	if v == nil {
		return
	}
	return *v, true
}

// OldInitialOrderID returns the old "initial_order_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldInitialOrderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInitialOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInitialOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInitialOrderID: %w", err)
	}
	return oldValue.InitialOrderID, nil
}

// ClearInitialOrderID clears the value of the "initial_order_id" field.
func (m *SubscribeMutation) ClearInitialOrderID() {
	m.initial_order = nil
	m.clearedFields[subscribe.FieldInitialOrderID] = struct{}{}
}

// InitialOrderIDCleared returns if the "initial_order_id" field was cleared in this mutation.
func (m *SubscribeMutation) InitialOrderIDCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldInitialOrderID]
	return ok
}

// ResetInitialOrderID resets all changes to the "initial_order_id" field.
func (m *SubscribeMutation) ResetInitialOrderID() {
	m.initial_order = nil
	delete(m.clearedFields, subscribe.FieldInitialOrderID)
}

// SetEnterpriseID sets the "enterprise_id" field.
func (m *SubscribeMutation) SetEnterpriseID(u uint64) {
	m.enterprise = &u
}

// EnterpriseID returns the value of the "enterprise_id" field in the mutation.
func (m *SubscribeMutation) EnterpriseID() (r uint64, exists bool) {
	v := m.enterprise
	if v == nil {
		return
	}
	return *v, true
}

// OldEnterpriseID returns the old "enterprise_id" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldEnterpriseID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnterpriseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnterpriseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnterpriseID: %w", err)
	}
	return oldValue.EnterpriseID, nil
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (m *SubscribeMutation) ClearEnterpriseID() {
	m.enterprise = nil
	m.clearedFields[subscribe.FieldEnterpriseID] = struct{}{}
}

// EnterpriseIDCleared returns if the "enterprise_id" field was cleared in this mutation.
func (m *SubscribeMutation) EnterpriseIDCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldEnterpriseID]
	return ok
}

// ResetEnterpriseID resets all changes to the "enterprise_id" field.
func (m *SubscribeMutation) ResetEnterpriseID() {
	m.enterprise = nil
	delete(m.clearedFields, subscribe.FieldEnterpriseID)
}

// SetStatus sets the "status" field.
func (m *SubscribeMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *SubscribeMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *SubscribeMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *SubscribeMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *SubscribeMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetType sets the "type" field.
func (m *SubscribeMutation) SetType(u uint) {
	m._type = &u
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *SubscribeMutation) GetType() (r uint, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldType(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds u to the "type" field.
func (m *SubscribeMutation) AddType(u int) {
	if m.add_type != nil {
		*m.add_type += u
	} else {
		m.add_type = &u
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *SubscribeMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *SubscribeMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetModel sets the "model" field.
func (m *SubscribeMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *SubscribeMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *SubscribeMutation) ResetModel() {
	m.model = nil
}

// SetInitialDays sets the "initial_days" field.
func (m *SubscribeMutation) SetInitialDays(i int) {
	m.initial_days = &i
	m.addinitial_days = nil
}

// InitialDays returns the value of the "initial_days" field in the mutation.
func (m *SubscribeMutation) InitialDays() (r int, exists bool) {
	v := m.initial_days
	if v == nil {
		return
	}
	return *v, true
}

// OldInitialDays returns the old "initial_days" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldInitialDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInitialDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInitialDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInitialDays: %w", err)
	}
	return oldValue.InitialDays, nil
}

// AddInitialDays adds i to the "initial_days" field.
func (m *SubscribeMutation) AddInitialDays(i int) {
	if m.addinitial_days != nil {
		*m.addinitial_days += i
	} else {
		m.addinitial_days = &i
	}
}

// AddedInitialDays returns the value that was added to the "initial_days" field in this mutation.
func (m *SubscribeMutation) AddedInitialDays() (r int, exists bool) {
	v := m.addinitial_days
	if v == nil {
		return
	}
	return *v, true
}

// ClearInitialDays clears the value of the "initial_days" field.
func (m *SubscribeMutation) ClearInitialDays() {
	m.initial_days = nil
	m.addinitial_days = nil
	m.clearedFields[subscribe.FieldInitialDays] = struct{}{}
}

// InitialDaysCleared returns if the "initial_days" field was cleared in this mutation.
func (m *SubscribeMutation) InitialDaysCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldInitialDays]
	return ok
}

// ResetInitialDays resets all changes to the "initial_days" field.
func (m *SubscribeMutation) ResetInitialDays() {
	m.initial_days = nil
	m.addinitial_days = nil
	delete(m.clearedFields, subscribe.FieldInitialDays)
}

// SetAlterDays sets the "alter_days" field.
func (m *SubscribeMutation) SetAlterDays(i int) {
	m.alter_days = &i
	m.addalter_days = nil
}

// AlterDays returns the value of the "alter_days" field in the mutation.
func (m *SubscribeMutation) AlterDays() (r int, exists bool) {
	v := m.alter_days
	if v == nil {
		return
	}
	return *v, true
}

// OldAlterDays returns the old "alter_days" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldAlterDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlterDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlterDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlterDays: %w", err)
	}
	return oldValue.AlterDays, nil
}

// AddAlterDays adds i to the "alter_days" field.
func (m *SubscribeMutation) AddAlterDays(i int) {
	if m.addalter_days != nil {
		*m.addalter_days += i
	} else {
		m.addalter_days = &i
	}
}

// AddedAlterDays returns the value that was added to the "alter_days" field in this mutation.
func (m *SubscribeMutation) AddedAlterDays() (r int, exists bool) {
	v := m.addalter_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetAlterDays resets all changes to the "alter_days" field.
func (m *SubscribeMutation) ResetAlterDays() {
	m.alter_days = nil
	m.addalter_days = nil
}

// SetPauseDays sets the "pause_days" field.
func (m *SubscribeMutation) SetPauseDays(i int) {
	m.pause_days = &i
	m.addpause_days = nil
}

// PauseDays returns the value of the "pause_days" field in the mutation.
func (m *SubscribeMutation) PauseDays() (r int, exists bool) {
	v := m.pause_days
	if v == nil {
		return
	}
	return *v, true
}

// OldPauseDays returns the old "pause_days" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldPauseDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPauseDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPauseDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPauseDays: %w", err)
	}
	return oldValue.PauseDays, nil
}

// AddPauseDays adds i to the "pause_days" field.
func (m *SubscribeMutation) AddPauseDays(i int) {
	if m.addpause_days != nil {
		*m.addpause_days += i
	} else {
		m.addpause_days = &i
	}
}

// AddedPauseDays returns the value that was added to the "pause_days" field in this mutation.
func (m *SubscribeMutation) AddedPauseDays() (r int, exists bool) {
	v := m.addpause_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetPauseDays resets all changes to the "pause_days" field.
func (m *SubscribeMutation) ResetPauseDays() {
	m.pause_days = nil
	m.addpause_days = nil
}

// SetRenewalDays sets the "renewal_days" field.
func (m *SubscribeMutation) SetRenewalDays(i int) {
	m.renewal_days = &i
	m.addrenewal_days = nil
}

// RenewalDays returns the value of the "renewal_days" field in the mutation.
func (m *SubscribeMutation) RenewalDays() (r int, exists bool) {
	v := m.renewal_days
	if v == nil {
		return
	}
	return *v, true
}

// OldRenewalDays returns the old "renewal_days" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldRenewalDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenewalDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenewalDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenewalDays: %w", err)
	}
	return oldValue.RenewalDays, nil
}

// AddRenewalDays adds i to the "renewal_days" field.
func (m *SubscribeMutation) AddRenewalDays(i int) {
	if m.addrenewal_days != nil {
		*m.addrenewal_days += i
	} else {
		m.addrenewal_days = &i
	}
}

// AddedRenewalDays returns the value that was added to the "renewal_days" field in this mutation.
func (m *SubscribeMutation) AddedRenewalDays() (r int, exists bool) {
	v := m.addrenewal_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetRenewalDays resets all changes to the "renewal_days" field.
func (m *SubscribeMutation) ResetRenewalDays() {
	m.renewal_days = nil
	m.addrenewal_days = nil
}

// SetOverdueDays sets the "overdue_days" field.
func (m *SubscribeMutation) SetOverdueDays(i int) {
	m.overdue_days = &i
	m.addoverdue_days = nil
}

// OverdueDays returns the value of the "overdue_days" field in the mutation.
func (m *SubscribeMutation) OverdueDays() (r int, exists bool) {
	v := m.overdue_days
	if v == nil {
		return
	}
	return *v, true
}

// OldOverdueDays returns the old "overdue_days" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldOverdueDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverdueDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverdueDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverdueDays: %w", err)
	}
	return oldValue.OverdueDays, nil
}

// AddOverdueDays adds i to the "overdue_days" field.
func (m *SubscribeMutation) AddOverdueDays(i int) {
	if m.addoverdue_days != nil {
		*m.addoverdue_days += i
	} else {
		m.addoverdue_days = &i
	}
}

// AddedOverdueDays returns the value that was added to the "overdue_days" field in this mutation.
func (m *SubscribeMutation) AddedOverdueDays() (r int, exists bool) {
	v := m.addoverdue_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetOverdueDays resets all changes to the "overdue_days" field.
func (m *SubscribeMutation) ResetOverdueDays() {
	m.overdue_days = nil
	m.addoverdue_days = nil
}

// SetRemaining sets the "remaining" field.
func (m *SubscribeMutation) SetRemaining(i int) {
	m.remaining = &i
	m.addremaining = nil
}

// Remaining returns the value of the "remaining" field in the mutation.
func (m *SubscribeMutation) Remaining() (r int, exists bool) {
	v := m.remaining
	if v == nil {
		return
	}
	return *v, true
}

// OldRemaining returns the old "remaining" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldRemaining(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemaining is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemaining requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemaining: %w", err)
	}
	return oldValue.Remaining, nil
}

// AddRemaining adds i to the "remaining" field.
func (m *SubscribeMutation) AddRemaining(i int) {
	if m.addremaining != nil {
		*m.addremaining += i
	} else {
		m.addremaining = &i
	}
}

// AddedRemaining returns the value that was added to the "remaining" field in this mutation.
func (m *SubscribeMutation) AddedRemaining() (r int, exists bool) {
	v := m.addremaining
	if v == nil {
		return
	}
	return *v, true
}

// ResetRemaining resets all changes to the "remaining" field.
func (m *SubscribeMutation) ResetRemaining() {
	m.remaining = nil
	m.addremaining = nil
}

// SetPausedAt sets the "paused_at" field.
func (m *SubscribeMutation) SetPausedAt(t time.Time) {
	m.paused_at = &t
}

// PausedAt returns the value of the "paused_at" field in the mutation.
func (m *SubscribeMutation) PausedAt() (r time.Time, exists bool) {
	v := m.paused_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPausedAt returns the old "paused_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldPausedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPausedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPausedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPausedAt: %w", err)
	}
	return oldValue.PausedAt, nil
}

// ClearPausedAt clears the value of the "paused_at" field.
func (m *SubscribeMutation) ClearPausedAt() {
	m.paused_at = nil
	m.clearedFields[subscribe.FieldPausedAt] = struct{}{}
}

// PausedAtCleared returns if the "paused_at" field was cleared in this mutation.
func (m *SubscribeMutation) PausedAtCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldPausedAt]
	return ok
}

// ResetPausedAt resets all changes to the "paused_at" field.
func (m *SubscribeMutation) ResetPausedAt() {
	m.paused_at = nil
	delete(m.clearedFields, subscribe.FieldPausedAt)
}

// SetStartAt sets the "start_at" field.
func (m *SubscribeMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *SubscribeMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldStartAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ClearStartAt clears the value of the "start_at" field.
func (m *SubscribeMutation) ClearStartAt() {
	m.start_at = nil
	m.clearedFields[subscribe.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *SubscribeMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *SubscribeMutation) ResetStartAt() {
	m.start_at = nil
	delete(m.clearedFields, subscribe.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *SubscribeMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *SubscribeMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldEndAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ClearEndAt clears the value of the "end_at" field.
func (m *SubscribeMutation) ClearEndAt() {
	m.end_at = nil
	m.clearedFields[subscribe.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *SubscribeMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *SubscribeMutation) ResetEndAt() {
	m.end_at = nil
	delete(m.clearedFields, subscribe.FieldEndAt)
}

// SetRefundAt sets the "refund_at" field.
func (m *SubscribeMutation) SetRefundAt(t time.Time) {
	m.refund_at = &t
}

// RefundAt returns the value of the "refund_at" field in the mutation.
func (m *SubscribeMutation) RefundAt() (r time.Time, exists bool) {
	v := m.refund_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundAt returns the old "refund_at" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldRefundAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundAt: %w", err)
	}
	return oldValue.RefundAt, nil
}

// ClearRefundAt clears the value of the "refund_at" field.
func (m *SubscribeMutation) ClearRefundAt() {
	m.refund_at = nil
	m.clearedFields[subscribe.FieldRefundAt] = struct{}{}
}

// RefundAtCleared returns if the "refund_at" field was cleared in this mutation.
func (m *SubscribeMutation) RefundAtCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldRefundAt]
	return ok
}

// ResetRefundAt resets all changes to the "refund_at" field.
func (m *SubscribeMutation) ResetRefundAt() {
	m.refund_at = nil
	delete(m.clearedFields, subscribe.FieldRefundAt)
}

// SetUnsubscribeReason sets the "unsubscribe_reason" field.
func (m *SubscribeMutation) SetUnsubscribeReason(s string) {
	m.unsubscribe_reason = &s
}

// UnsubscribeReason returns the value of the "unsubscribe_reason" field in the mutation.
func (m *SubscribeMutation) UnsubscribeReason() (r string, exists bool) {
	v := m.unsubscribe_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldUnsubscribeReason returns the old "unsubscribe_reason" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldUnsubscribeReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnsubscribeReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnsubscribeReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnsubscribeReason: %w", err)
	}
	return oldValue.UnsubscribeReason, nil
}

// ClearUnsubscribeReason clears the value of the "unsubscribe_reason" field.
func (m *SubscribeMutation) ClearUnsubscribeReason() {
	m.unsubscribe_reason = nil
	m.clearedFields[subscribe.FieldUnsubscribeReason] = struct{}{}
}

// UnsubscribeReasonCleared returns if the "unsubscribe_reason" field was cleared in this mutation.
func (m *SubscribeMutation) UnsubscribeReasonCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldUnsubscribeReason]
	return ok
}

// ResetUnsubscribeReason resets all changes to the "unsubscribe_reason" field.
func (m *SubscribeMutation) ResetUnsubscribeReason() {
	m.unsubscribe_reason = nil
	delete(m.clearedFields, subscribe.FieldUnsubscribeReason)
}

// SetLastBillDate sets the "last_bill_date" field.
func (m *SubscribeMutation) SetLastBillDate(t time.Time) {
	m.last_bill_date = &t
}

// LastBillDate returns the value of the "last_bill_date" field in the mutation.
func (m *SubscribeMutation) LastBillDate() (r time.Time, exists bool) {
	v := m.last_bill_date
	if v == nil {
		return
	}
	return *v, true
}

// OldLastBillDate returns the old "last_bill_date" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldLastBillDate(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastBillDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastBillDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastBillDate: %w", err)
	}
	return oldValue.LastBillDate, nil
}

// ClearLastBillDate clears the value of the "last_bill_date" field.
func (m *SubscribeMutation) ClearLastBillDate() {
	m.last_bill_date = nil
	m.clearedFields[subscribe.FieldLastBillDate] = struct{}{}
}

// LastBillDateCleared returns if the "last_bill_date" field was cleared in this mutation.
func (m *SubscribeMutation) LastBillDateCleared() bool {
	_, ok := m.clearedFields[subscribe.FieldLastBillDate]
	return ok
}

// ResetLastBillDate resets all changes to the "last_bill_date" field.
func (m *SubscribeMutation) ResetLastBillDate() {
	m.last_bill_date = nil
	delete(m.clearedFields, subscribe.FieldLastBillDate)
}

// SetPauseOverdue sets the "pause_overdue" field.
func (m *SubscribeMutation) SetPauseOverdue(b bool) {
	m.pause_overdue = &b
}

// PauseOverdue returns the value of the "pause_overdue" field in the mutation.
func (m *SubscribeMutation) PauseOverdue() (r bool, exists bool) {
	v := m.pause_overdue
	if v == nil {
		return
	}
	return *v, true
}

// OldPauseOverdue returns the old "pause_overdue" field's value of the Subscribe entity.
// If the Subscribe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeMutation) OldPauseOverdue(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPauseOverdue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPauseOverdue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPauseOverdue: %w", err)
	}
	return oldValue.PauseOverdue, nil
}

// ResetPauseOverdue resets all changes to the "pause_overdue" field.
func (m *SubscribeMutation) ResetPauseOverdue() {
	m.pause_overdue = nil
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *SubscribeMutation) ClearPlan() {
	m.clearedplan = true
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *SubscribeMutation) PlanCleared() bool {
	return m.PlanIDCleared() || m.clearedplan
}

// PlanIDs returns the "plan" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlanID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) PlanIDs() (ids []uint64) {
	if id := m.plan; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *SubscribeMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *SubscribeMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *SubscribeMutation) EmployeeCleared() bool {
	return m.EmployeeIDCleared() || m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *SubscribeMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// ClearCity clears the "city" edge to the City entity.
func (m *SubscribeMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *SubscribeMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *SubscribeMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (m *SubscribeMutation) ClearStation() {
	m.clearedstation = true
}

// StationCleared reports if the "station" edge to the EnterpriseStation entity was cleared.
func (m *SubscribeMutation) StationCleared() bool {
	return m.StationIDCleared() || m.clearedstation
}

// StationIDs returns the "station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StationID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) StationIDs() (ids []uint64) {
	if id := m.station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStation resets all changes to the "station" edge.
func (m *SubscribeMutation) ResetStation() {
	m.station = nil
	m.clearedstation = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *SubscribeMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *SubscribeMutation) StoreCleared() bool {
	return m.StoreIDCleared() || m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *SubscribeMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (m *SubscribeMutation) ClearCabinet() {
	m.clearedcabinet = true
}

// CabinetCleared reports if the "cabinet" edge to the Cabinet entity was cleared.
func (m *SubscribeMutation) CabinetCleared() bool {
	return m.CabinetIDCleared() || m.clearedcabinet
}

// CabinetIDs returns the "cabinet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CabinetID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) CabinetIDs() (ids []uint64) {
	if id := m.cabinet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCabinet resets all changes to the "cabinet" edge.
func (m *SubscribeMutation) ResetCabinet() {
	m.cabinet = nil
	m.clearedcabinet = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *SubscribeMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *SubscribeMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *SubscribeMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (m *SubscribeMutation) ClearEnterprise() {
	m.clearedenterprise = true
}

// EnterpriseCleared reports if the "enterprise" edge to the Enterprise entity was cleared.
func (m *SubscribeMutation) EnterpriseCleared() bool {
	return m.EnterpriseIDCleared() || m.clearedenterprise
}

// EnterpriseIDs returns the "enterprise" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnterpriseID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) EnterpriseIDs() (ids []uint64) {
	if id := m.enterprise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnterprise resets all changes to the "enterprise" edge.
func (m *SubscribeMutation) ResetEnterprise() {
	m.enterprise = nil
	m.clearedenterprise = false
}

// AddPauseIDs adds the "pauses" edge to the SubscribePause entity by ids.
func (m *SubscribeMutation) AddPauseIDs(ids ...uint64) {
	if m.pauses == nil {
		m.pauses = make(map[uint64]struct{})
	}
	for i := range ids {
		m.pauses[ids[i]] = struct{}{}
	}
}

// ClearPauses clears the "pauses" edge to the SubscribePause entity.
func (m *SubscribeMutation) ClearPauses() {
	m.clearedpauses = true
}

// PausesCleared reports if the "pauses" edge to the SubscribePause entity was cleared.
func (m *SubscribeMutation) PausesCleared() bool {
	return m.clearedpauses
}

// RemovePauseIDs removes the "pauses" edge to the SubscribePause entity by IDs.
func (m *SubscribeMutation) RemovePauseIDs(ids ...uint64) {
	if m.removedpauses == nil {
		m.removedpauses = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.pauses, ids[i])
		m.removedpauses[ids[i]] = struct{}{}
	}
}

// RemovedPauses returns the removed IDs of the "pauses" edge to the SubscribePause entity.
func (m *SubscribeMutation) RemovedPausesIDs() (ids []uint64) {
	for id := range m.removedpauses {
		ids = append(ids, id)
	}
	return
}

// PausesIDs returns the "pauses" edge IDs in the mutation.
func (m *SubscribeMutation) PausesIDs() (ids []uint64) {
	for id := range m.pauses {
		ids = append(ids, id)
	}
	return
}

// ResetPauses resets all changes to the "pauses" edge.
func (m *SubscribeMutation) ResetPauses() {
	m.pauses = nil
	m.clearedpauses = false
	m.removedpauses = nil
}

// AddAlterIDs adds the "alters" edge to the SubscribeAlter entity by ids.
func (m *SubscribeMutation) AddAlterIDs(ids ...uint64) {
	if m.alters == nil {
		m.alters = make(map[uint64]struct{})
	}
	for i := range ids {
		m.alters[ids[i]] = struct{}{}
	}
}

// ClearAlters clears the "alters" edge to the SubscribeAlter entity.
func (m *SubscribeMutation) ClearAlters() {
	m.clearedalters = true
}

// AltersCleared reports if the "alters" edge to the SubscribeAlter entity was cleared.
func (m *SubscribeMutation) AltersCleared() bool {
	return m.clearedalters
}

// RemoveAlterIDs removes the "alters" edge to the SubscribeAlter entity by IDs.
func (m *SubscribeMutation) RemoveAlterIDs(ids ...uint64) {
	if m.removedalters == nil {
		m.removedalters = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.alters, ids[i])
		m.removedalters[ids[i]] = struct{}{}
	}
}

// RemovedAlters returns the removed IDs of the "alters" edge to the SubscribeAlter entity.
func (m *SubscribeMutation) RemovedAltersIDs() (ids []uint64) {
	for id := range m.removedalters {
		ids = append(ids, id)
	}
	return
}

// AltersIDs returns the "alters" edge IDs in the mutation.
func (m *SubscribeMutation) AltersIDs() (ids []uint64) {
	for id := range m.alters {
		ids = append(ids, id)
	}
	return
}

// ResetAlters resets all changes to the "alters" edge.
func (m *SubscribeMutation) ResetAlters() {
	m.alters = nil
	m.clearedalters = false
	m.removedalters = nil
}

// AddOrderIDs adds the "orders" edge to the Order entity by ids.
func (m *SubscribeMutation) AddOrderIDs(ids ...uint64) {
	if m.orders == nil {
		m.orders = make(map[uint64]struct{})
	}
	for i := range ids {
		m.orders[ids[i]] = struct{}{}
	}
}

// ClearOrders clears the "orders" edge to the Order entity.
func (m *SubscribeMutation) ClearOrders() {
	m.clearedorders = true
}

// OrdersCleared reports if the "orders" edge to the Order entity was cleared.
func (m *SubscribeMutation) OrdersCleared() bool {
	return m.clearedorders
}

// RemoveOrderIDs removes the "orders" edge to the Order entity by IDs.
func (m *SubscribeMutation) RemoveOrderIDs(ids ...uint64) {
	if m.removedorders == nil {
		m.removedorders = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.orders, ids[i])
		m.removedorders[ids[i]] = struct{}{}
	}
}

// RemovedOrders returns the removed IDs of the "orders" edge to the Order entity.
func (m *SubscribeMutation) RemovedOrdersIDs() (ids []uint64) {
	for id := range m.removedorders {
		ids = append(ids, id)
	}
	return
}

// OrdersIDs returns the "orders" edge IDs in the mutation.
func (m *SubscribeMutation) OrdersIDs() (ids []uint64) {
	for id := range m.orders {
		ids = append(ids, id)
	}
	return
}

// ResetOrders resets all changes to the "orders" edge.
func (m *SubscribeMutation) ResetOrders() {
	m.orders = nil
	m.clearedorders = false
	m.removedorders = nil
}

// ClearInitialOrder clears the "initial_order" edge to the Order entity.
func (m *SubscribeMutation) ClearInitialOrder() {
	m.clearedinitial_order = true
}

// InitialOrderCleared reports if the "initial_order" edge to the Order entity was cleared.
func (m *SubscribeMutation) InitialOrderCleared() bool {
	return m.InitialOrderIDCleared() || m.clearedinitial_order
}

// InitialOrderIDs returns the "initial_order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// InitialOrderID instead. It exists only for internal usage by the builders.
func (m *SubscribeMutation) InitialOrderIDs() (ids []uint64) {
	if id := m.initial_order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetInitialOrder resets all changes to the "initial_order" edge.
func (m *SubscribeMutation) ResetInitialOrder() {
	m.initial_order = nil
	m.clearedinitial_order = false
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by ids.
func (m *SubscribeMutation) AddBillIDs(ids ...uint64) {
	if m.bills == nil {
		m.bills = make(map[uint64]struct{})
	}
	for i := range ids {
		m.bills[ids[i]] = struct{}{}
	}
}

// ClearBills clears the "bills" edge to the EnterpriseBill entity.
func (m *SubscribeMutation) ClearBills() {
	m.clearedbills = true
}

// BillsCleared reports if the "bills" edge to the EnterpriseBill entity was cleared.
func (m *SubscribeMutation) BillsCleared() bool {
	return m.clearedbills
}

// RemoveBillIDs removes the "bills" edge to the EnterpriseBill entity by IDs.
func (m *SubscribeMutation) RemoveBillIDs(ids ...uint64) {
	if m.removedbills == nil {
		m.removedbills = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.bills, ids[i])
		m.removedbills[ids[i]] = struct{}{}
	}
}

// RemovedBills returns the removed IDs of the "bills" edge to the EnterpriseBill entity.
func (m *SubscribeMutation) RemovedBillsIDs() (ids []uint64) {
	for id := range m.removedbills {
		ids = append(ids, id)
	}
	return
}

// BillsIDs returns the "bills" edge IDs in the mutation.
func (m *SubscribeMutation) BillsIDs() (ids []uint64) {
	for id := range m.bills {
		ids = append(ids, id)
	}
	return
}

// ResetBills resets all changes to the "bills" edge.
func (m *SubscribeMutation) ResetBills() {
	m.bills = nil
	m.clearedbills = false
	m.removedbills = nil
}

// Where appends a list predicates to the SubscribeMutation builder.
func (m *SubscribeMutation) Where(ps ...predicate.Subscribe) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SubscribeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Subscribe).
func (m *SubscribeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscribeMutation) Fields() []string {
	fields := make([]string, 0, 31)
	if m.created_at != nil {
		fields = append(fields, subscribe.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscribe.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, subscribe.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, subscribe.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, subscribe.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, subscribe.FieldRemark)
	}
	if m.plan != nil {
		fields = append(fields, subscribe.FieldPlanID)
	}
	if m.employee != nil {
		fields = append(fields, subscribe.FieldEmployeeID)
	}
	if m.city != nil {
		fields = append(fields, subscribe.FieldCityID)
	}
	if m.station != nil {
		fields = append(fields, subscribe.FieldStationID)
	}
	if m.store != nil {
		fields = append(fields, subscribe.FieldStoreID)
	}
	if m.cabinet != nil {
		fields = append(fields, subscribe.FieldCabinetID)
	}
	if m.rider != nil {
		fields = append(fields, subscribe.FieldRiderID)
	}
	if m.initial_order != nil {
		fields = append(fields, subscribe.FieldInitialOrderID)
	}
	if m.enterprise != nil {
		fields = append(fields, subscribe.FieldEnterpriseID)
	}
	if m.status != nil {
		fields = append(fields, subscribe.FieldStatus)
	}
	if m._type != nil {
		fields = append(fields, subscribe.FieldType)
	}
	if m.model != nil {
		fields = append(fields, subscribe.FieldModel)
	}
	if m.initial_days != nil {
		fields = append(fields, subscribe.FieldInitialDays)
	}
	if m.alter_days != nil {
		fields = append(fields, subscribe.FieldAlterDays)
	}
	if m.pause_days != nil {
		fields = append(fields, subscribe.FieldPauseDays)
	}
	if m.renewal_days != nil {
		fields = append(fields, subscribe.FieldRenewalDays)
	}
	if m.overdue_days != nil {
		fields = append(fields, subscribe.FieldOverdueDays)
	}
	if m.remaining != nil {
		fields = append(fields, subscribe.FieldRemaining)
	}
	if m.paused_at != nil {
		fields = append(fields, subscribe.FieldPausedAt)
	}
	if m.start_at != nil {
		fields = append(fields, subscribe.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, subscribe.FieldEndAt)
	}
	if m.refund_at != nil {
		fields = append(fields, subscribe.FieldRefundAt)
	}
	if m.unsubscribe_reason != nil {
		fields = append(fields, subscribe.FieldUnsubscribeReason)
	}
	if m.last_bill_date != nil {
		fields = append(fields, subscribe.FieldLastBillDate)
	}
	if m.pause_overdue != nil {
		fields = append(fields, subscribe.FieldPauseOverdue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscribeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscribe.FieldCreatedAt:
		return m.CreatedAt()
	case subscribe.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscribe.FieldDeletedAt:
		return m.DeletedAt()
	case subscribe.FieldCreator:
		return m.Creator()
	case subscribe.FieldLastModifier:
		return m.LastModifier()
	case subscribe.FieldRemark:
		return m.Remark()
	case subscribe.FieldPlanID:
		return m.PlanID()
	case subscribe.FieldEmployeeID:
		return m.EmployeeID()
	case subscribe.FieldCityID:
		return m.CityID()
	case subscribe.FieldStationID:
		return m.StationID()
	case subscribe.FieldStoreID:
		return m.StoreID()
	case subscribe.FieldCabinetID:
		return m.CabinetID()
	case subscribe.FieldRiderID:
		return m.RiderID()
	case subscribe.FieldInitialOrderID:
		return m.InitialOrderID()
	case subscribe.FieldEnterpriseID:
		return m.EnterpriseID()
	case subscribe.FieldStatus:
		return m.Status()
	case subscribe.FieldType:
		return m.GetType()
	case subscribe.FieldModel:
		return m.Model()
	case subscribe.FieldInitialDays:
		return m.InitialDays()
	case subscribe.FieldAlterDays:
		return m.AlterDays()
	case subscribe.FieldPauseDays:
		return m.PauseDays()
	case subscribe.FieldRenewalDays:
		return m.RenewalDays()
	case subscribe.FieldOverdueDays:
		return m.OverdueDays()
	case subscribe.FieldRemaining:
		return m.Remaining()
	case subscribe.FieldPausedAt:
		return m.PausedAt()
	case subscribe.FieldStartAt:
		return m.StartAt()
	case subscribe.FieldEndAt:
		return m.EndAt()
	case subscribe.FieldRefundAt:
		return m.RefundAt()
	case subscribe.FieldUnsubscribeReason:
		return m.UnsubscribeReason()
	case subscribe.FieldLastBillDate:
		return m.LastBillDate()
	case subscribe.FieldPauseOverdue:
		return m.PauseOverdue()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscribeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscribe.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscribe.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscribe.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case subscribe.FieldCreator:
		return m.OldCreator(ctx)
	case subscribe.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case subscribe.FieldRemark:
		return m.OldRemark(ctx)
	case subscribe.FieldPlanID:
		return m.OldPlanID(ctx)
	case subscribe.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case subscribe.FieldCityID:
		return m.OldCityID(ctx)
	case subscribe.FieldStationID:
		return m.OldStationID(ctx)
	case subscribe.FieldStoreID:
		return m.OldStoreID(ctx)
	case subscribe.FieldCabinetID:
		return m.OldCabinetID(ctx)
	case subscribe.FieldRiderID:
		return m.OldRiderID(ctx)
	case subscribe.FieldInitialOrderID:
		return m.OldInitialOrderID(ctx)
	case subscribe.FieldEnterpriseID:
		return m.OldEnterpriseID(ctx)
	case subscribe.FieldStatus:
		return m.OldStatus(ctx)
	case subscribe.FieldType:
		return m.OldType(ctx)
	case subscribe.FieldModel:
		return m.OldModel(ctx)
	case subscribe.FieldInitialDays:
		return m.OldInitialDays(ctx)
	case subscribe.FieldAlterDays:
		return m.OldAlterDays(ctx)
	case subscribe.FieldPauseDays:
		return m.OldPauseDays(ctx)
	case subscribe.FieldRenewalDays:
		return m.OldRenewalDays(ctx)
	case subscribe.FieldOverdueDays:
		return m.OldOverdueDays(ctx)
	case subscribe.FieldRemaining:
		return m.OldRemaining(ctx)
	case subscribe.FieldPausedAt:
		return m.OldPausedAt(ctx)
	case subscribe.FieldStartAt:
		return m.OldStartAt(ctx)
	case subscribe.FieldEndAt:
		return m.OldEndAt(ctx)
	case subscribe.FieldRefundAt:
		return m.OldRefundAt(ctx)
	case subscribe.FieldUnsubscribeReason:
		return m.OldUnsubscribeReason(ctx)
	case subscribe.FieldLastBillDate:
		return m.OldLastBillDate(ctx)
	case subscribe.FieldPauseOverdue:
		return m.OldPauseOverdue(ctx)
	}
	return nil, fmt.Errorf("unknown Subscribe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscribe.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscribe.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscribe.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case subscribe.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case subscribe.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case subscribe.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case subscribe.FieldPlanID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case subscribe.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case subscribe.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case subscribe.FieldStationID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStationID(v)
		return nil
	case subscribe.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case subscribe.FieldCabinetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCabinetID(v)
		return nil
	case subscribe.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case subscribe.FieldInitialOrderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInitialOrderID(v)
		return nil
	case subscribe.FieldEnterpriseID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnterpriseID(v)
		return nil
	case subscribe.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case subscribe.FieldType:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case subscribe.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case subscribe.FieldInitialDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInitialDays(v)
		return nil
	case subscribe.FieldAlterDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlterDays(v)
		return nil
	case subscribe.FieldPauseDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPauseDays(v)
		return nil
	case subscribe.FieldRenewalDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenewalDays(v)
		return nil
	case subscribe.FieldOverdueDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverdueDays(v)
		return nil
	case subscribe.FieldRemaining:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemaining(v)
		return nil
	case subscribe.FieldPausedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPausedAt(v)
		return nil
	case subscribe.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case subscribe.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case subscribe.FieldRefundAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundAt(v)
		return nil
	case subscribe.FieldUnsubscribeReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnsubscribeReason(v)
		return nil
	case subscribe.FieldLastBillDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastBillDate(v)
		return nil
	case subscribe.FieldPauseOverdue:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPauseOverdue(v)
		return nil
	}
	return fmt.Errorf("unknown Subscribe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscribeMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, subscribe.FieldStatus)
	}
	if m.add_type != nil {
		fields = append(fields, subscribe.FieldType)
	}
	if m.addinitial_days != nil {
		fields = append(fields, subscribe.FieldInitialDays)
	}
	if m.addalter_days != nil {
		fields = append(fields, subscribe.FieldAlterDays)
	}
	if m.addpause_days != nil {
		fields = append(fields, subscribe.FieldPauseDays)
	}
	if m.addrenewal_days != nil {
		fields = append(fields, subscribe.FieldRenewalDays)
	}
	if m.addoverdue_days != nil {
		fields = append(fields, subscribe.FieldOverdueDays)
	}
	if m.addremaining != nil {
		fields = append(fields, subscribe.FieldRemaining)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscribeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscribe.FieldStatus:
		return m.AddedStatus()
	case subscribe.FieldType:
		return m.AddedType()
	case subscribe.FieldInitialDays:
		return m.AddedInitialDays()
	case subscribe.FieldAlterDays:
		return m.AddedAlterDays()
	case subscribe.FieldPauseDays:
		return m.AddedPauseDays()
	case subscribe.FieldRenewalDays:
		return m.AddedRenewalDays()
	case subscribe.FieldOverdueDays:
		return m.AddedOverdueDays()
	case subscribe.FieldRemaining:
		return m.AddedRemaining()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscribe.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case subscribe.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case subscribe.FieldInitialDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInitialDays(v)
		return nil
	case subscribe.FieldAlterDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAlterDays(v)
		return nil
	case subscribe.FieldPauseDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPauseDays(v)
		return nil
	case subscribe.FieldRenewalDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRenewalDays(v)
		return nil
	case subscribe.FieldOverdueDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOverdueDays(v)
		return nil
	case subscribe.FieldRemaining:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRemaining(v)
		return nil
	}
	return fmt.Errorf("unknown Subscribe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscribeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscribe.FieldDeletedAt) {
		fields = append(fields, subscribe.FieldDeletedAt)
	}
	if m.FieldCleared(subscribe.FieldCreator) {
		fields = append(fields, subscribe.FieldCreator)
	}
	if m.FieldCleared(subscribe.FieldLastModifier) {
		fields = append(fields, subscribe.FieldLastModifier)
	}
	if m.FieldCleared(subscribe.FieldRemark) {
		fields = append(fields, subscribe.FieldRemark)
	}
	if m.FieldCleared(subscribe.FieldPlanID) {
		fields = append(fields, subscribe.FieldPlanID)
	}
	if m.FieldCleared(subscribe.FieldEmployeeID) {
		fields = append(fields, subscribe.FieldEmployeeID)
	}
	if m.FieldCleared(subscribe.FieldStationID) {
		fields = append(fields, subscribe.FieldStationID)
	}
	if m.FieldCleared(subscribe.FieldStoreID) {
		fields = append(fields, subscribe.FieldStoreID)
	}
	if m.FieldCleared(subscribe.FieldCabinetID) {
		fields = append(fields, subscribe.FieldCabinetID)
	}
	if m.FieldCleared(subscribe.FieldInitialOrderID) {
		fields = append(fields, subscribe.FieldInitialOrderID)
	}
	if m.FieldCleared(subscribe.FieldEnterpriseID) {
		fields = append(fields, subscribe.FieldEnterpriseID)
	}
	if m.FieldCleared(subscribe.FieldInitialDays) {
		fields = append(fields, subscribe.FieldInitialDays)
	}
	if m.FieldCleared(subscribe.FieldPausedAt) {
		fields = append(fields, subscribe.FieldPausedAt)
	}
	if m.FieldCleared(subscribe.FieldStartAt) {
		fields = append(fields, subscribe.FieldStartAt)
	}
	if m.FieldCleared(subscribe.FieldEndAt) {
		fields = append(fields, subscribe.FieldEndAt)
	}
	if m.FieldCleared(subscribe.FieldRefundAt) {
		fields = append(fields, subscribe.FieldRefundAt)
	}
	if m.FieldCleared(subscribe.FieldUnsubscribeReason) {
		fields = append(fields, subscribe.FieldUnsubscribeReason)
	}
	if m.FieldCleared(subscribe.FieldLastBillDate) {
		fields = append(fields, subscribe.FieldLastBillDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscribeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscribeMutation) ClearField(name string) error {
	switch name {
	case subscribe.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case subscribe.FieldCreator:
		m.ClearCreator()
		return nil
	case subscribe.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case subscribe.FieldRemark:
		m.ClearRemark()
		return nil
	case subscribe.FieldPlanID:
		m.ClearPlanID()
		return nil
	case subscribe.FieldEmployeeID:
		m.ClearEmployeeID()
		return nil
	case subscribe.FieldStationID:
		m.ClearStationID()
		return nil
	case subscribe.FieldStoreID:
		m.ClearStoreID()
		return nil
	case subscribe.FieldCabinetID:
		m.ClearCabinetID()
		return nil
	case subscribe.FieldInitialOrderID:
		m.ClearInitialOrderID()
		return nil
	case subscribe.FieldEnterpriseID:
		m.ClearEnterpriseID()
		return nil
	case subscribe.FieldInitialDays:
		m.ClearInitialDays()
		return nil
	case subscribe.FieldPausedAt:
		m.ClearPausedAt()
		return nil
	case subscribe.FieldStartAt:
		m.ClearStartAt()
		return nil
	case subscribe.FieldEndAt:
		m.ClearEndAt()
		return nil
	case subscribe.FieldRefundAt:
		m.ClearRefundAt()
		return nil
	case subscribe.FieldUnsubscribeReason:
		m.ClearUnsubscribeReason()
		return nil
	case subscribe.FieldLastBillDate:
		m.ClearLastBillDate()
		return nil
	}
	return fmt.Errorf("unknown Subscribe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscribeMutation) ResetField(name string) error {
	switch name {
	case subscribe.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscribe.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscribe.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case subscribe.FieldCreator:
		m.ResetCreator()
		return nil
	case subscribe.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case subscribe.FieldRemark:
		m.ResetRemark()
		return nil
	case subscribe.FieldPlanID:
		m.ResetPlanID()
		return nil
	case subscribe.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case subscribe.FieldCityID:
		m.ResetCityID()
		return nil
	case subscribe.FieldStationID:
		m.ResetStationID()
		return nil
	case subscribe.FieldStoreID:
		m.ResetStoreID()
		return nil
	case subscribe.FieldCabinetID:
		m.ResetCabinetID()
		return nil
	case subscribe.FieldRiderID:
		m.ResetRiderID()
		return nil
	case subscribe.FieldInitialOrderID:
		m.ResetInitialOrderID()
		return nil
	case subscribe.FieldEnterpriseID:
		m.ResetEnterpriseID()
		return nil
	case subscribe.FieldStatus:
		m.ResetStatus()
		return nil
	case subscribe.FieldType:
		m.ResetType()
		return nil
	case subscribe.FieldModel:
		m.ResetModel()
		return nil
	case subscribe.FieldInitialDays:
		m.ResetInitialDays()
		return nil
	case subscribe.FieldAlterDays:
		m.ResetAlterDays()
		return nil
	case subscribe.FieldPauseDays:
		m.ResetPauseDays()
		return nil
	case subscribe.FieldRenewalDays:
		m.ResetRenewalDays()
		return nil
	case subscribe.FieldOverdueDays:
		m.ResetOverdueDays()
		return nil
	case subscribe.FieldRemaining:
		m.ResetRemaining()
		return nil
	case subscribe.FieldPausedAt:
		m.ResetPausedAt()
		return nil
	case subscribe.FieldStartAt:
		m.ResetStartAt()
		return nil
	case subscribe.FieldEndAt:
		m.ResetEndAt()
		return nil
	case subscribe.FieldRefundAt:
		m.ResetRefundAt()
		return nil
	case subscribe.FieldUnsubscribeReason:
		m.ResetUnsubscribeReason()
		return nil
	case subscribe.FieldLastBillDate:
		m.ResetLastBillDate()
		return nil
	case subscribe.FieldPauseOverdue:
		m.ResetPauseOverdue()
		return nil
	}
	return fmt.Errorf("unknown Subscribe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscribeMutation) AddedEdges() []string {
	edges := make([]string, 0, 13)
	if m.plan != nil {
		edges = append(edges, subscribe.EdgePlan)
	}
	if m.employee != nil {
		edges = append(edges, subscribe.EdgeEmployee)
	}
	if m.city != nil {
		edges = append(edges, subscribe.EdgeCity)
	}
	if m.station != nil {
		edges = append(edges, subscribe.EdgeStation)
	}
	if m.store != nil {
		edges = append(edges, subscribe.EdgeStore)
	}
	if m.cabinet != nil {
		edges = append(edges, subscribe.EdgeCabinet)
	}
	if m.rider != nil {
		edges = append(edges, subscribe.EdgeRider)
	}
	if m.enterprise != nil {
		edges = append(edges, subscribe.EdgeEnterprise)
	}
	if m.pauses != nil {
		edges = append(edges, subscribe.EdgePauses)
	}
	if m.alters != nil {
		edges = append(edges, subscribe.EdgeAlters)
	}
	if m.orders != nil {
		edges = append(edges, subscribe.EdgeOrders)
	}
	if m.initial_order != nil {
		edges = append(edges, subscribe.EdgeInitialOrder)
	}
	if m.bills != nil {
		edges = append(edges, subscribe.EdgeBills)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscribeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscribe.EdgePlan:
		if id := m.plan; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgeStation:
		if id := m.station; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgeCabinet:
		if id := m.cabinet; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgeEnterprise:
		if id := m.enterprise; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgePauses:
		ids := make([]ent.Value, 0, len(m.pauses))
		for id := range m.pauses {
			ids = append(ids, id)
		}
		return ids
	case subscribe.EdgeAlters:
		ids := make([]ent.Value, 0, len(m.alters))
		for id := range m.alters {
			ids = append(ids, id)
		}
		return ids
	case subscribe.EdgeOrders:
		ids := make([]ent.Value, 0, len(m.orders))
		for id := range m.orders {
			ids = append(ids, id)
		}
		return ids
	case subscribe.EdgeInitialOrder:
		if id := m.initial_order; id != nil {
			return []ent.Value{*id}
		}
	case subscribe.EdgeBills:
		ids := make([]ent.Value, 0, len(m.bills))
		for id := range m.bills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscribeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 13)
	if m.removedpauses != nil {
		edges = append(edges, subscribe.EdgePauses)
	}
	if m.removedalters != nil {
		edges = append(edges, subscribe.EdgeAlters)
	}
	if m.removedorders != nil {
		edges = append(edges, subscribe.EdgeOrders)
	}
	if m.removedbills != nil {
		edges = append(edges, subscribe.EdgeBills)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscribeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case subscribe.EdgePauses:
		ids := make([]ent.Value, 0, len(m.removedpauses))
		for id := range m.removedpauses {
			ids = append(ids, id)
		}
		return ids
	case subscribe.EdgeAlters:
		ids := make([]ent.Value, 0, len(m.removedalters))
		for id := range m.removedalters {
			ids = append(ids, id)
		}
		return ids
	case subscribe.EdgeOrders:
		ids := make([]ent.Value, 0, len(m.removedorders))
		for id := range m.removedorders {
			ids = append(ids, id)
		}
		return ids
	case subscribe.EdgeBills:
		ids := make([]ent.Value, 0, len(m.removedbills))
		for id := range m.removedbills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscribeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 13)
	if m.clearedplan {
		edges = append(edges, subscribe.EdgePlan)
	}
	if m.clearedemployee {
		edges = append(edges, subscribe.EdgeEmployee)
	}
	if m.clearedcity {
		edges = append(edges, subscribe.EdgeCity)
	}
	if m.clearedstation {
		edges = append(edges, subscribe.EdgeStation)
	}
	if m.clearedstore {
		edges = append(edges, subscribe.EdgeStore)
	}
	if m.clearedcabinet {
		edges = append(edges, subscribe.EdgeCabinet)
	}
	if m.clearedrider {
		edges = append(edges, subscribe.EdgeRider)
	}
	if m.clearedenterprise {
		edges = append(edges, subscribe.EdgeEnterprise)
	}
	if m.clearedpauses {
		edges = append(edges, subscribe.EdgePauses)
	}
	if m.clearedalters {
		edges = append(edges, subscribe.EdgeAlters)
	}
	if m.clearedorders {
		edges = append(edges, subscribe.EdgeOrders)
	}
	if m.clearedinitial_order {
		edges = append(edges, subscribe.EdgeInitialOrder)
	}
	if m.clearedbills {
		edges = append(edges, subscribe.EdgeBills)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscribeMutation) EdgeCleared(name string) bool {
	switch name {
	case subscribe.EdgePlan:
		return m.clearedplan
	case subscribe.EdgeEmployee:
		return m.clearedemployee
	case subscribe.EdgeCity:
		return m.clearedcity
	case subscribe.EdgeStation:
		return m.clearedstation
	case subscribe.EdgeStore:
		return m.clearedstore
	case subscribe.EdgeCabinet:
		return m.clearedcabinet
	case subscribe.EdgeRider:
		return m.clearedrider
	case subscribe.EdgeEnterprise:
		return m.clearedenterprise
	case subscribe.EdgePauses:
		return m.clearedpauses
	case subscribe.EdgeAlters:
		return m.clearedalters
	case subscribe.EdgeOrders:
		return m.clearedorders
	case subscribe.EdgeInitialOrder:
		return m.clearedinitial_order
	case subscribe.EdgeBills:
		return m.clearedbills
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscribeMutation) ClearEdge(name string) error {
	switch name {
	case subscribe.EdgePlan:
		m.ClearPlan()
		return nil
	case subscribe.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case subscribe.EdgeCity:
		m.ClearCity()
		return nil
	case subscribe.EdgeStation:
		m.ClearStation()
		return nil
	case subscribe.EdgeStore:
		m.ClearStore()
		return nil
	case subscribe.EdgeCabinet:
		m.ClearCabinet()
		return nil
	case subscribe.EdgeRider:
		m.ClearRider()
		return nil
	case subscribe.EdgeEnterprise:
		m.ClearEnterprise()
		return nil
	case subscribe.EdgeInitialOrder:
		m.ClearInitialOrder()
		return nil
	}
	return fmt.Errorf("unknown Subscribe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscribeMutation) ResetEdge(name string) error {
	switch name {
	case subscribe.EdgePlan:
		m.ResetPlan()
		return nil
	case subscribe.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case subscribe.EdgeCity:
		m.ResetCity()
		return nil
	case subscribe.EdgeStation:
		m.ResetStation()
		return nil
	case subscribe.EdgeStore:
		m.ResetStore()
		return nil
	case subscribe.EdgeCabinet:
		m.ResetCabinet()
		return nil
	case subscribe.EdgeRider:
		m.ResetRider()
		return nil
	case subscribe.EdgeEnterprise:
		m.ResetEnterprise()
		return nil
	case subscribe.EdgePauses:
		m.ResetPauses()
		return nil
	case subscribe.EdgeAlters:
		m.ResetAlters()
		return nil
	case subscribe.EdgeOrders:
		m.ResetOrders()
		return nil
	case subscribe.EdgeInitialOrder:
		m.ResetInitialOrder()
		return nil
	case subscribe.EdgeBills:
		m.ResetBills()
		return nil
	}
	return fmt.Errorf("unknown Subscribe edge %s", name)
}

