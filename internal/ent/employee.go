// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/google/uuid"
)

// Employee is the model entity for the Employee schema.
type Employee struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// Sn holds the value of the "sn" field.
	Sn uuid.UUID `json:"sn,omitempty"`
	// 姓名
	Name string `json:"name,omitempty"`
	// 电话
	Phone string `json:"phone,omitempty"`
	// 启用状态
	Enable bool `json:"enable,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeQuery when eager-loading is set.
	Edges EmployeeEdges `json:"edges"`
}

// EmployeeEdges holds the relations/edges for other nodes in the graph.
type EmployeeEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// Attendances holds the value of the attendances edge.
	Attendances []*Attendance `json:"attendances,omitempty"`
	// Stocks holds the value of the stocks edge.
	Stocks []*Stock `json:"stocks,omitempty"`
	// Exchanges holds the value of the exchanges edge.
	Exchanges []*Exchange `json:"exchanges,omitempty"`
	// Commissions holds the value of the commissions edge.
	Commissions []*Commission `json:"commissions,omitempty"`
	// Assistances holds the value of the assistances edge.
	Assistances []*Assistance `json:"assistances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[1] {
		if e.Store == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// AttendancesOrErr returns the Attendances value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) AttendancesOrErr() ([]*Attendance, error) {
	if e.loadedTypes[2] {
		return e.Attendances, nil
	}
	return nil, &NotLoadedError{edge: "attendances"}
}

// StocksOrErr returns the Stocks value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) StocksOrErr() ([]*Stock, error) {
	if e.loadedTypes[3] {
		return e.Stocks, nil
	}
	return nil, &NotLoadedError{edge: "stocks"}
}

// ExchangesOrErr returns the Exchanges value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) ExchangesOrErr() ([]*Exchange, error) {
	if e.loadedTypes[4] {
		return e.Exchanges, nil
	}
	return nil, &NotLoadedError{edge: "exchanges"}
}

// CommissionsOrErr returns the Commissions value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) CommissionsOrErr() ([]*Commission, error) {
	if e.loadedTypes[5] {
		return e.Commissions, nil
	}
	return nil, &NotLoadedError{edge: "commissions"}
}

// AssistancesOrErr returns the Assistances value or an error if the edge
// was not loaded in eager-loading.
func (e EmployeeEdges) AssistancesOrErr() ([]*Assistance, error) {
	if e.loadedTypes[6] {
		return e.Assistances, nil
	}
	return nil, &NotLoadedError{edge: "assistances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employee.FieldCreator, employee.FieldLastModifier:
			values[i] = new([]byte)
		case employee.FieldEnable:
			values[i] = new(sql.NullBool)
		case employee.FieldID, employee.FieldCityID:
			values[i] = new(sql.NullInt64)
		case employee.FieldRemark, employee.FieldName, employee.FieldPhone:
			values[i] = new(sql.NullString)
		case employee.FieldCreatedAt, employee.FieldUpdatedAt, employee.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case employee.FieldSn:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Employee", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employee fields.
func (e *Employee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case employee.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case employee.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case employee.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = new(time.Time)
				*e.DeletedAt = value.Time
			}
		case employee.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case employee.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case employee.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				e.Remark = value.String
			}
		case employee.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				e.CityID = uint64(value.Int64)
			}
		case employee.FieldSn:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value != nil {
				e.Sn = *value
			}
		case employee.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case employee.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				e.Phone = value.String
			}
		case employee.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				e.Enable = value.Bool
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the Employee entity.
func (e *Employee) QueryCity() *CityQuery {
	return NewEmployeeClient(e.config).QueryCity(e)
}

// QueryStore queries the "store" edge of the Employee entity.
func (e *Employee) QueryStore() *StoreQuery {
	return NewEmployeeClient(e.config).QueryStore(e)
}

// QueryAttendances queries the "attendances" edge of the Employee entity.
func (e *Employee) QueryAttendances() *AttendanceQuery {
	return NewEmployeeClient(e.config).QueryAttendances(e)
}

// QueryStocks queries the "stocks" edge of the Employee entity.
func (e *Employee) QueryStocks() *StockQuery {
	return NewEmployeeClient(e.config).QueryStocks(e)
}

// QueryExchanges queries the "exchanges" edge of the Employee entity.
func (e *Employee) QueryExchanges() *ExchangeQuery {
	return NewEmployeeClient(e.config).QueryExchanges(e)
}

// QueryCommissions queries the "commissions" edge of the Employee entity.
func (e *Employee) QueryCommissions() *CommissionQuery {
	return NewEmployeeClient(e.config).QueryCommissions(e)
}

// QueryAssistances queries the "assistances" edge of the Employee entity.
func (e *Employee) QueryAssistances() *AssistanceQuery {
	return NewEmployeeClient(e.config).QueryAssistances(e)
}

// Update returns a builder for updating this Employee.
// Note that you need to call Employee.Unwrap() before calling this method if this Employee
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Employee) Update() *EmployeeUpdateOne {
	return NewEmployeeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Employee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Employee) Unwrap() *Employee {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Employee is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Employee) String() string {
	var builder strings.Builder
	builder.WriteString("Employee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := e.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", e.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", e.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(e.Remark)
	builder.WriteString(", ")
	builder.WriteString("city_id=")
	builder.WriteString(fmt.Sprintf("%v", e.CityID))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(fmt.Sprintf("%v", e.Sn))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(e.Name)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(e.Phone)
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", e.Enable))
	builder.WriteByte(')')
	return builder.String()
}

// Employees is a parsable slice of Employee.
type Employees []*Employee
