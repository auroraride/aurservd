// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterpriseContractUpdate is the builder for updating EnterpriseContract entities.
type EnterpriseContractUpdate struct {
	config
	hooks    []Hook
	mutation *EnterpriseContractMutation
}

// Where appends a list predicates to the EnterpriseContractUpdate builder.
func (ecu *EnterpriseContractUpdate) Where(ps ...predicate.EnterpriseContract) *EnterpriseContractUpdate {
	ecu.mutation.Where(ps...)
	return ecu
}

// SetUpdatedAt sets the "updated_at" field.
func (ecu *EnterpriseContractUpdate) SetUpdatedAt(t time.Time) *EnterpriseContractUpdate {
	ecu.mutation.SetUpdatedAt(t)
	return ecu
}

// SetDeletedAt sets the "deleted_at" field.
func (ecu *EnterpriseContractUpdate) SetDeletedAt(t time.Time) *EnterpriseContractUpdate {
	ecu.mutation.SetDeletedAt(t)
	return ecu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecu *EnterpriseContractUpdate) SetNillableDeletedAt(t *time.Time) *EnterpriseContractUpdate {
	if t != nil {
		ecu.SetDeletedAt(*t)
	}
	return ecu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ecu *EnterpriseContractUpdate) ClearDeletedAt() *EnterpriseContractUpdate {
	ecu.mutation.ClearDeletedAt()
	return ecu
}

// SetLastModifier sets the "last_modifier" field.
func (ecu *EnterpriseContractUpdate) SetLastModifier(m *model.Modifier) *EnterpriseContractUpdate {
	ecu.mutation.SetLastModifier(m)
	return ecu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ecu *EnterpriseContractUpdate) ClearLastModifier() *EnterpriseContractUpdate {
	ecu.mutation.ClearLastModifier()
	return ecu
}

// SetRemark sets the "remark" field.
func (ecu *EnterpriseContractUpdate) SetRemark(s string) *EnterpriseContractUpdate {
	ecu.mutation.SetRemark(s)
	return ecu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ecu *EnterpriseContractUpdate) SetNillableRemark(s *string) *EnterpriseContractUpdate {
	if s != nil {
		ecu.SetRemark(*s)
	}
	return ecu
}

// ClearRemark clears the value of the "remark" field.
func (ecu *EnterpriseContractUpdate) ClearRemark() *EnterpriseContractUpdate {
	ecu.mutation.ClearRemark()
	return ecu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ecu *EnterpriseContractUpdate) SetEnterpriseID(u uint64) *EnterpriseContractUpdate {
	ecu.mutation.SetEnterpriseID(u)
	return ecu
}

// SetStart sets the "start" field.
func (ecu *EnterpriseContractUpdate) SetStart(t time.Time) *EnterpriseContractUpdate {
	ecu.mutation.SetStart(t)
	return ecu
}

// SetEnd sets the "end" field.
func (ecu *EnterpriseContractUpdate) SetEnd(t time.Time) *EnterpriseContractUpdate {
	ecu.mutation.SetEnd(t)
	return ecu
}

// SetFile sets the "file" field.
func (ecu *EnterpriseContractUpdate) SetFile(s string) *EnterpriseContractUpdate {
	ecu.mutation.SetFile(s)
	return ecu
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ecu *EnterpriseContractUpdate) SetEnterprise(e *Enterprise) *EnterpriseContractUpdate {
	return ecu.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterpriseContractMutation object of the builder.
func (ecu *EnterpriseContractUpdate) Mutation() *EnterpriseContractMutation {
	return ecu.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (ecu *EnterpriseContractUpdate) ClearEnterprise() *EnterpriseContractUpdate {
	ecu.mutation.ClearEnterprise()
	return ecu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ecu *EnterpriseContractUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ecu.defaults(); err != nil {
		return 0, err
	}
	if len(ecu.hooks) == 0 {
		if err = ecu.check(); err != nil {
			return 0, err
		}
		affected, err = ecu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecu.check(); err != nil {
				return 0, err
			}
			ecu.mutation = mutation
			affected, err = ecu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ecu.hooks) - 1; i >= 0; i-- {
			if ecu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ecu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ecu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ecu *EnterpriseContractUpdate) SaveX(ctx context.Context) int {
	affected, err := ecu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ecu *EnterpriseContractUpdate) Exec(ctx context.Context) error {
	_, err := ecu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecu *EnterpriseContractUpdate) ExecX(ctx context.Context) {
	if err := ecu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecu *EnterpriseContractUpdate) defaults() error {
	if _, ok := ecu.mutation.UpdatedAt(); !ok {
		if enterprisecontract.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisecontract.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisecontract.UpdateDefaultUpdatedAt()
		ecu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ecu *EnterpriseContractUpdate) check() error {
	if _, ok := ecu.mutation.EnterpriseID(); ecu.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseContract.enterprise"`)
	}
	return nil
}

func (ecu *EnterpriseContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisecontract.Table,
			Columns: enterprisecontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisecontract.FieldID,
			},
		},
	}
	if ps := ecu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisecontract.FieldUpdatedAt,
		})
	}
	if value, ok := ecu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisecontract.FieldDeletedAt,
		})
	}
	if ecu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisecontract.FieldDeletedAt,
		})
	}
	if ecu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisecontract.FieldCreator,
		})
	}
	if value, ok := ecu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisecontract.FieldLastModifier,
		})
	}
	if ecu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisecontract.FieldLastModifier,
		})
	}
	if value, ok := ecu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisecontract.FieldRemark,
		})
	}
	if ecu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprisecontract.FieldRemark,
		})
	}
	if value, ok := ecu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisecontract.FieldStart,
		})
	}
	if value, ok := ecu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisecontract.FieldEnd,
		})
	}
	if value, ok := ecu.mutation.File(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisecontract.FieldFile,
		})
	}
	if ecu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisecontract.EnterpriseTable,
			Columns: []string{enterprisecontract.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisecontract.EnterpriseTable,
			Columns: []string{enterprisecontract.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ecu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisecontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EnterpriseContractUpdateOne is the builder for updating a single EnterpriseContract entity.
type EnterpriseContractUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnterpriseContractMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ecuo *EnterpriseContractUpdateOne) SetUpdatedAt(t time.Time) *EnterpriseContractUpdateOne {
	ecuo.mutation.SetUpdatedAt(t)
	return ecuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ecuo *EnterpriseContractUpdateOne) SetDeletedAt(t time.Time) *EnterpriseContractUpdateOne {
	ecuo.mutation.SetDeletedAt(t)
	return ecuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ecuo *EnterpriseContractUpdateOne) SetNillableDeletedAt(t *time.Time) *EnterpriseContractUpdateOne {
	if t != nil {
		ecuo.SetDeletedAt(*t)
	}
	return ecuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ecuo *EnterpriseContractUpdateOne) ClearDeletedAt() *EnterpriseContractUpdateOne {
	ecuo.mutation.ClearDeletedAt()
	return ecuo
}

// SetLastModifier sets the "last_modifier" field.
func (ecuo *EnterpriseContractUpdateOne) SetLastModifier(m *model.Modifier) *EnterpriseContractUpdateOne {
	ecuo.mutation.SetLastModifier(m)
	return ecuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ecuo *EnterpriseContractUpdateOne) ClearLastModifier() *EnterpriseContractUpdateOne {
	ecuo.mutation.ClearLastModifier()
	return ecuo
}

// SetRemark sets the "remark" field.
func (ecuo *EnterpriseContractUpdateOne) SetRemark(s string) *EnterpriseContractUpdateOne {
	ecuo.mutation.SetRemark(s)
	return ecuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ecuo *EnterpriseContractUpdateOne) SetNillableRemark(s *string) *EnterpriseContractUpdateOne {
	if s != nil {
		ecuo.SetRemark(*s)
	}
	return ecuo
}

// ClearRemark clears the value of the "remark" field.
func (ecuo *EnterpriseContractUpdateOne) ClearRemark() *EnterpriseContractUpdateOne {
	ecuo.mutation.ClearRemark()
	return ecuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ecuo *EnterpriseContractUpdateOne) SetEnterpriseID(u uint64) *EnterpriseContractUpdateOne {
	ecuo.mutation.SetEnterpriseID(u)
	return ecuo
}

// SetStart sets the "start" field.
func (ecuo *EnterpriseContractUpdateOne) SetStart(t time.Time) *EnterpriseContractUpdateOne {
	ecuo.mutation.SetStart(t)
	return ecuo
}

// SetEnd sets the "end" field.
func (ecuo *EnterpriseContractUpdateOne) SetEnd(t time.Time) *EnterpriseContractUpdateOne {
	ecuo.mutation.SetEnd(t)
	return ecuo
}

// SetFile sets the "file" field.
func (ecuo *EnterpriseContractUpdateOne) SetFile(s string) *EnterpriseContractUpdateOne {
	ecuo.mutation.SetFile(s)
	return ecuo
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ecuo *EnterpriseContractUpdateOne) SetEnterprise(e *Enterprise) *EnterpriseContractUpdateOne {
	return ecuo.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterpriseContractMutation object of the builder.
func (ecuo *EnterpriseContractUpdateOne) Mutation() *EnterpriseContractMutation {
	return ecuo.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (ecuo *EnterpriseContractUpdateOne) ClearEnterprise() *EnterpriseContractUpdateOne {
	ecuo.mutation.ClearEnterprise()
	return ecuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ecuo *EnterpriseContractUpdateOne) Select(field string, fields ...string) *EnterpriseContractUpdateOne {
	ecuo.fields = append([]string{field}, fields...)
	return ecuo
}

// Save executes the query and returns the updated EnterpriseContract entity.
func (ecuo *EnterpriseContractUpdateOne) Save(ctx context.Context) (*EnterpriseContract, error) {
	var (
		err  error
		node *EnterpriseContract
	)
	if err := ecuo.defaults(); err != nil {
		return nil, err
	}
	if len(ecuo.hooks) == 0 {
		if err = ecuo.check(); err != nil {
			return nil, err
		}
		node, err = ecuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ecuo.check(); err != nil {
				return nil, err
			}
			ecuo.mutation = mutation
			node, err = ecuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ecuo.hooks) - 1; i >= 0; i-- {
			if ecuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ecuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ecuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnterpriseContract)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseContractMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ecuo *EnterpriseContractUpdateOne) SaveX(ctx context.Context) *EnterpriseContract {
	node, err := ecuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ecuo *EnterpriseContractUpdateOne) Exec(ctx context.Context) error {
	_, err := ecuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecuo *EnterpriseContractUpdateOne) ExecX(ctx context.Context) {
	if err := ecuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecuo *EnterpriseContractUpdateOne) defaults() error {
	if _, ok := ecuo.mutation.UpdatedAt(); !ok {
		if enterprisecontract.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisecontract.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisecontract.UpdateDefaultUpdatedAt()
		ecuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ecuo *EnterpriseContractUpdateOne) check() error {
	if _, ok := ecuo.mutation.EnterpriseID(); ecuo.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseContract.enterprise"`)
	}
	return nil
}

func (ecuo *EnterpriseContractUpdateOne) sqlSave(ctx context.Context) (_node *EnterpriseContract, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisecontract.Table,
			Columns: enterprisecontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisecontract.FieldID,
			},
		},
	}
	id, ok := ecuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnterpriseContract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ecuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisecontract.FieldID)
		for _, f := range fields {
			if !enterprisecontract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterprisecontract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ecuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ecuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisecontract.FieldUpdatedAt,
		})
	}
	if value, ok := ecuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisecontract.FieldDeletedAt,
		})
	}
	if ecuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisecontract.FieldDeletedAt,
		})
	}
	if ecuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisecontract.FieldCreator,
		})
	}
	if value, ok := ecuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisecontract.FieldLastModifier,
		})
	}
	if ecuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisecontract.FieldLastModifier,
		})
	}
	if value, ok := ecuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisecontract.FieldRemark,
		})
	}
	if ecuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprisecontract.FieldRemark,
		})
	}
	if value, ok := ecuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisecontract.FieldStart,
		})
	}
	if value, ok := ecuo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisecontract.FieldEnd,
		})
	}
	if value, ok := ecuo.mutation.File(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisecontract.FieldFile,
		})
	}
	if ecuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisecontract.EnterpriseTable,
			Columns: []string{enterprisecontract.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ecuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisecontract.EnterpriseTable,
			Columns: []string{enterprisecontract.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EnterpriseContract{config: ecuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ecuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisecontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
