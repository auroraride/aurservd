// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/app/model/promotion"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionCommission is the model entity for the PromotionCommission schema.
type PromotionCommission struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// MemberID holds the value of the "member_id" field.
	MemberID *uint64 `json:"member_id,omitempty"`
	// 类型 0:全局 1:通用 2:个人
	Type *uint8 `json:"type,omitempty"`
	// 方案名
	Name string `json:"name,omitempty"`
	// 返佣方案规则
	Rule *promotion.CommissionRule `json:"rule,omitempty"`
	// 启用状态 0:禁用 1:启用
	Enable bool `json:"enable,omitempty"`
	// 累计返佣金额
	AmountSum float64 `json:"amount_sum,omitempty"`
	// 返佣说明
	Desc *string `json:"desc,omitempty"`
	// 历史记录id
	HistoryID []uint64 `json:"history_id,omitempty"`
	// 开始时间
	StartAt *time.Time `json:"start_at,omitempty"`
	// 结束时间
	EndAt *time.Time `json:"end_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionCommissionQuery when eager-loading is set.
	Edges        PromotionCommissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionCommissionEdges holds the relations/edges for other nodes in the graph.
type PromotionCommissionEdges struct {
	// Member holds the value of the member edge.
	Member *PromotionMember `json:"member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionCommissionEdges) MemberOrErr() (*PromotionMember, error) {
	if e.loadedTypes[0] {
		if e.Member == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: promotionmember.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionCommission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotioncommission.FieldCreator, promotioncommission.FieldLastModifier, promotioncommission.FieldRule, promotioncommission.FieldHistoryID:
			values[i] = new([]byte)
		case promotioncommission.FieldEnable:
			values[i] = new(sql.NullBool)
		case promotioncommission.FieldAmountSum:
			values[i] = new(sql.NullFloat64)
		case promotioncommission.FieldID, promotioncommission.FieldMemberID, promotioncommission.FieldType:
			values[i] = new(sql.NullInt64)
		case promotioncommission.FieldRemark, promotioncommission.FieldName, promotioncommission.FieldDesc:
			values[i] = new(sql.NullString)
		case promotioncommission.FieldCreatedAt, promotioncommission.FieldUpdatedAt, promotioncommission.FieldDeletedAt, promotioncommission.FieldStartAt, promotioncommission.FieldEndAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionCommission fields.
func (pc *PromotionCommission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotioncommission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = uint64(value.Int64)
		case promotioncommission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pc.CreatedAt = value.Time
			}
		case promotioncommission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pc.UpdatedAt = value.Time
			}
		case promotioncommission.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pc.DeletedAt = new(time.Time)
				*pc.DeletedAt = value.Time
			}
		case promotioncommission.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotioncommission.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotioncommission.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pc.Remark = value.String
			}
		case promotioncommission.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				pc.MemberID = new(uint64)
				*pc.MemberID = uint64(value.Int64)
			}
		case promotioncommission.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pc.Type = new(uint8)
				*pc.Type = uint8(value.Int64)
			}
		case promotioncommission.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case promotioncommission.FieldRule:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rule", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.Rule); err != nil {
					return fmt.Errorf("unmarshal field rule: %w", err)
				}
			}
		case promotioncommission.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				pc.Enable = value.Bool
			}
		case promotioncommission.FieldAmountSum:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_sum", values[i])
			} else if value.Valid {
				pc.AmountSum = value.Float64
			}
		case promotioncommission.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				pc.Desc = new(string)
				*pc.Desc = value.String
			}
		case promotioncommission.FieldHistoryID:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field history_id", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pc.HistoryID); err != nil {
					return fmt.Errorf("unmarshal field history_id: %w", err)
				}
			}
		case promotioncommission.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				pc.StartAt = new(time.Time)
				*pc.StartAt = value.Time
			}
		case promotioncommission.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				pc.EndAt = new(time.Time)
				*pc.EndAt = value.Time
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionCommission.
// This includes values selected through modifiers, order, etc.
func (pc *PromotionCommission) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryMember queries the "member" edge of the PromotionCommission entity.
func (pc *PromotionCommission) QueryMember() *PromotionMemberQuery {
	return NewPromotionCommissionClient(pc.config).QueryMember(pc)
}

// Update returns a builder for updating this PromotionCommission.
// Note that you need to call PromotionCommission.Unwrap() before calling this method if this PromotionCommission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *PromotionCommission) Update() *PromotionCommissionUpdateOne {
	return NewPromotionCommissionClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the PromotionCommission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *PromotionCommission) Unwrap() *PromotionCommission {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionCommission is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *PromotionCommission) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionCommission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pc.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pc.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pc.Remark)
	builder.WriteString(", ")
	if v := pc.MemberID; v != nil {
		builder.WriteString("member_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pc.Type; v != nil {
		builder.WriteString("type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", ")
	builder.WriteString("rule=")
	builder.WriteString(fmt.Sprintf("%v", pc.Rule))
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", pc.Enable))
	builder.WriteString(", ")
	builder.WriteString("amount_sum=")
	builder.WriteString(fmt.Sprintf("%v", pc.AmountSum))
	builder.WriteString(", ")
	if v := pc.Desc; v != nil {
		builder.WriteString("desc=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("history_id=")
	builder.WriteString(fmt.Sprintf("%v", pc.HistoryID))
	builder.WriteString(", ")
	if v := pc.StartAt; v != nil {
		builder.WriteString("start_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pc.EndAt; v != nil {
		builder.WriteString("end_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PromotionCommissions is a parsable slice of PromotionCommission.
type PromotionCommissions []*PromotionCommission
