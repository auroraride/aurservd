// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/export"
    "encoding/json"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// ExportMutation represents an operation that mutates the Export nodes in the graph.
type ExportMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	taxonomy       *string
	sn             *string
	status         *uint8
	addstatus      *int8
	_path          *string
	message        *string
	finish_at      *time.Time
	duration       *int64
	addduration    *int64
	condition      *json.RawMessage
	info           *map[string]interface{}
	remark         *string
	clearedFields  map[string]struct{}
	manager        *uint64
	clearedmanager bool
	done           bool
	oldValue       func(context.Context) (*Export, error)
	predicates     []predicate.Export
}

var _ ent.Mutation = (*ExportMutation)(nil)

// exportOption allows management of the mutation configuration using functional options.
type exportOption func(*ExportMutation)

// newExportMutation creates new mutation for the Export entity.
func newExportMutation(c config, op Op, opts ...exportOption) *ExportMutation {
	m := &ExportMutation{
		config:        c,
		op:            op,
		typ:           TypeExport,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExportID sets the ID field of the mutation.
func withExportID(id uint64) exportOption {
	return func(m *ExportMutation) {
		var (
			err   error
			once  sync.Once
			value *Export
		)
		m.oldValue = func(ctx context.Context) (*Export, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Export.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExport sets the old Export of the mutation.
func withExport(node *Export) exportOption {
	return func(m *ExportMutation) {
		m.oldValue = func(context.Context) (*Export, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExportMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExportMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExportMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExportMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Export.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExportMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExportMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExportMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExportMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExportMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExportMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExportMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExportMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ExportMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[export.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ExportMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[export.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExportMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, export.FieldDeletedAt)
}

// SetManagerID sets the "manager_id" field.
func (m *ExportMutation) SetManagerID(u uint64) {
	m.manager = &u
}

// ManagerID returns the value of the "manager_id" field in the mutation.
func (m *ExportMutation) ManagerID() (r uint64, exists bool) {
	v := m.manager
	if v == nil {
		return
	}
	return *v, true
}

// OldManagerID returns the old "manager_id" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldManagerID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManagerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManagerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManagerID: %w", err)
	}
	return oldValue.ManagerID, nil
}

// ResetManagerID resets all changes to the "manager_id" field.
func (m *ExportMutation) ResetManagerID() {
	m.manager = nil
}

// SetTaxonomy sets the "taxonomy" field.
func (m *ExportMutation) SetTaxonomy(s string) {
	m.taxonomy = &s
}

// Taxonomy returns the value of the "taxonomy" field in the mutation.
func (m *ExportMutation) Taxonomy() (r string, exists bool) {
	v := m.taxonomy
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxonomy returns the old "taxonomy" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldTaxonomy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaxonomy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaxonomy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxonomy: %w", err)
	}
	return oldValue.Taxonomy, nil
}

// ResetTaxonomy resets all changes to the "taxonomy" field.
func (m *ExportMutation) ResetTaxonomy() {
	m.taxonomy = nil
}

// SetSn sets the "sn" field.
func (m *ExportMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *ExportMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *ExportMutation) ResetSn() {
	m.sn = nil
}

// SetStatus sets the "status" field.
func (m *ExportMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ExportMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ExportMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ExportMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ExportMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetPath sets the "path" field.
func (m *ExportMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *ExportMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ClearPath clears the value of the "path" field.
func (m *ExportMutation) ClearPath() {
	m._path = nil
	m.clearedFields[export.FieldPath] = struct{}{}
}

// PathCleared returns if the "path" field was cleared in this mutation.
func (m *ExportMutation) PathCleared() bool {
	_, ok := m.clearedFields[export.FieldPath]
	return ok
}

// ResetPath resets all changes to the "path" field.
func (m *ExportMutation) ResetPath() {
	m._path = nil
	delete(m.clearedFields, export.FieldPath)
}

// SetMessage sets the "message" field.
func (m *ExportMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *ExportMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *ExportMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[export.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *ExportMutation) MessageCleared() bool {
	_, ok := m.clearedFields[export.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *ExportMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, export.FieldMessage)
}

// SetFinishAt sets the "finish_at" field.
func (m *ExportMutation) SetFinishAt(t time.Time) {
	m.finish_at = &t
}

// FinishAt returns the value of the "finish_at" field in the mutation.
func (m *ExportMutation) FinishAt() (r time.Time, exists bool) {
	v := m.finish_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishAt returns the old "finish_at" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldFinishAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishAt: %w", err)
	}
	return oldValue.FinishAt, nil
}

// ClearFinishAt clears the value of the "finish_at" field.
func (m *ExportMutation) ClearFinishAt() {
	m.finish_at = nil
	m.clearedFields[export.FieldFinishAt] = struct{}{}
}

// FinishAtCleared returns if the "finish_at" field was cleared in this mutation.
func (m *ExportMutation) FinishAtCleared() bool {
	_, ok := m.clearedFields[export.FieldFinishAt]
	return ok
}

// ResetFinishAt resets all changes to the "finish_at" field.
func (m *ExportMutation) ResetFinishAt() {
	m.finish_at = nil
	delete(m.clearedFields, export.FieldFinishAt)
}

// SetDuration sets the "duration" field.
func (m *ExportMutation) SetDuration(i int64) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *ExportMutation) Duration() (r int64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldDuration(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *ExportMutation) AddDuration(i int64) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *ExportMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *ExportMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[export.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *ExportMutation) DurationCleared() bool {
	_, ok := m.clearedFields[export.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *ExportMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, export.FieldDuration)
}

// SetCondition sets the "condition" field.
func (m *ExportMutation) SetCondition(jm json.RawMessage) {
	m.condition = &jm
}

// Condition returns the value of the "condition" field in the mutation.
func (m *ExportMutation) Condition() (r json.RawMessage, exists bool) {
	v := m.condition
	if v == nil {
		return
	}
	return *v, true
}

// OldCondition returns the old "condition" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldCondition(ctx context.Context) (v json.RawMessage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCondition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCondition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCondition: %w", err)
	}
	return oldValue.Condition, nil
}

// ResetCondition resets all changes to the "condition" field.
func (m *ExportMutation) ResetCondition() {
	m.condition = nil
}

// SetInfo sets the "info" field.
func (m *ExportMutation) SetInfo(value map[string]interface{}) {
	m.info = &value
}

// Info returns the value of the "info" field in the mutation.
func (m *ExportMutation) Info() (r map[string]interface{}, exists bool) {
	v := m.info
	if v == nil {
		return
	}
	return *v, true
}

// OldInfo returns the old "info" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldInfo(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfo: %w", err)
	}
	return oldValue.Info, nil
}

// ClearInfo clears the value of the "info" field.
func (m *ExportMutation) ClearInfo() {
	m.info = nil
	m.clearedFields[export.FieldInfo] = struct{}{}
}

// InfoCleared returns if the "info" field was cleared in this mutation.
func (m *ExportMutation) InfoCleared() bool {
	_, ok := m.clearedFields[export.FieldInfo]
	return ok
}

// ResetInfo resets all changes to the "info" field.
func (m *ExportMutation) ResetInfo() {
	m.info = nil
	delete(m.clearedFields, export.FieldInfo)
}

// SetRemark sets the "remark" field.
func (m *ExportMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ExportMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Export entity.
// If the Export object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExportMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *ExportMutation) ResetRemark() {
	m.remark = nil
}

// ClearManager clears the "manager" edge to the Manager entity.
func (m *ExportMutation) ClearManager() {
	m.clearedmanager = true
}

// ManagerCleared reports if the "manager" edge to the Manager entity was cleared.
func (m *ExportMutation) ManagerCleared() bool {
	return m.clearedmanager
}

// ManagerIDs returns the "manager" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ManagerID instead. It exists only for internal usage by the builders.
func (m *ExportMutation) ManagerIDs() (ids []uint64) {
	if id := m.manager; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetManager resets all changes to the "manager" edge.
func (m *ExportMutation) ResetManager() {
	m.manager = nil
	m.clearedmanager = false
}

// Where appends a list predicates to the ExportMutation builder.
func (m *ExportMutation) Where(ps ...predicate.Export) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ExportMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Export).
func (m *ExportMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExportMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, export.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, export.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, export.FieldDeletedAt)
	}
	if m.manager != nil {
		fields = append(fields, export.FieldManagerID)
	}
	if m.taxonomy != nil {
		fields = append(fields, export.FieldTaxonomy)
	}
	if m.sn != nil {
		fields = append(fields, export.FieldSn)
	}
	if m.status != nil {
		fields = append(fields, export.FieldStatus)
	}
	if m._path != nil {
		fields = append(fields, export.FieldPath)
	}
	if m.message != nil {
		fields = append(fields, export.FieldMessage)
	}
	if m.finish_at != nil {
		fields = append(fields, export.FieldFinishAt)
	}
	if m.duration != nil {
		fields = append(fields, export.FieldDuration)
	}
	if m.condition != nil {
		fields = append(fields, export.FieldCondition)
	}
	if m.info != nil {
		fields = append(fields, export.FieldInfo)
	}
	if m.remark != nil {
		fields = append(fields, export.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExportMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case export.FieldCreatedAt:
		return m.CreatedAt()
	case export.FieldUpdatedAt:
		return m.UpdatedAt()
	case export.FieldDeletedAt:
		return m.DeletedAt()
	case export.FieldManagerID:
		return m.ManagerID()
	case export.FieldTaxonomy:
		return m.Taxonomy()
	case export.FieldSn:
		return m.Sn()
	case export.FieldStatus:
		return m.Status()
	case export.FieldPath:
		return m.Path()
	case export.FieldMessage:
		return m.Message()
	case export.FieldFinishAt:
		return m.FinishAt()
	case export.FieldDuration:
		return m.Duration()
	case export.FieldCondition:
		return m.Condition()
	case export.FieldInfo:
		return m.Info()
	case export.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExportMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case export.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case export.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case export.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case export.FieldManagerID:
		return m.OldManagerID(ctx)
	case export.FieldTaxonomy:
		return m.OldTaxonomy(ctx)
	case export.FieldSn:
		return m.OldSn(ctx)
	case export.FieldStatus:
		return m.OldStatus(ctx)
	case export.FieldPath:
		return m.OldPath(ctx)
	case export.FieldMessage:
		return m.OldMessage(ctx)
	case export.FieldFinishAt:
		return m.OldFinishAt(ctx)
	case export.FieldDuration:
		return m.OldDuration(ctx)
	case export.FieldCondition:
		return m.OldCondition(ctx)
	case export.FieldInfo:
		return m.OldInfo(ctx)
	case export.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown Export field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExportMutation) SetField(name string, value ent.Value) error {
	switch name {
	case export.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case export.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case export.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case export.FieldManagerID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManagerID(v)
		return nil
	case export.FieldTaxonomy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxonomy(v)
		return nil
	case export.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case export.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case export.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case export.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case export.FieldFinishAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishAt(v)
		return nil
	case export.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case export.FieldCondition:
		v, ok := value.(json.RawMessage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCondition(v)
		return nil
	case export.FieldInfo:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfo(v)
		return nil
	case export.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown Export field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExportMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, export.FieldStatus)
	}
	if m.addduration != nil {
		fields = append(fields, export.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExportMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case export.FieldStatus:
		return m.AddedStatus()
	case export.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExportMutation) AddField(name string, value ent.Value) error {
	switch name {
	case export.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case export.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Export numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExportMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(export.FieldDeletedAt) {
		fields = append(fields, export.FieldDeletedAt)
	}
	if m.FieldCleared(export.FieldPath) {
		fields = append(fields, export.FieldPath)
	}
	if m.FieldCleared(export.FieldMessage) {
		fields = append(fields, export.FieldMessage)
	}
	if m.FieldCleared(export.FieldFinishAt) {
		fields = append(fields, export.FieldFinishAt)
	}
	if m.FieldCleared(export.FieldDuration) {
		fields = append(fields, export.FieldDuration)
	}
	if m.FieldCleared(export.FieldInfo) {
		fields = append(fields, export.FieldInfo)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExportMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExportMutation) ClearField(name string) error {
	switch name {
	case export.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case export.FieldPath:
		m.ClearPath()
		return nil
	case export.FieldMessage:
		m.ClearMessage()
		return nil
	case export.FieldFinishAt:
		m.ClearFinishAt()
		return nil
	case export.FieldDuration:
		m.ClearDuration()
		return nil
	case export.FieldInfo:
		m.ClearInfo()
		return nil
	}
	return fmt.Errorf("unknown Export nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExportMutation) ResetField(name string) error {
	switch name {
	case export.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case export.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case export.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case export.FieldManagerID:
		m.ResetManagerID()
		return nil
	case export.FieldTaxonomy:
		m.ResetTaxonomy()
		return nil
	case export.FieldSn:
		m.ResetSn()
		return nil
	case export.FieldStatus:
		m.ResetStatus()
		return nil
	case export.FieldPath:
		m.ResetPath()
		return nil
	case export.FieldMessage:
		m.ResetMessage()
		return nil
	case export.FieldFinishAt:
		m.ResetFinishAt()
		return nil
	case export.FieldDuration:
		m.ResetDuration()
		return nil
	case export.FieldCondition:
		m.ResetCondition()
		return nil
	case export.FieldInfo:
		m.ResetInfo()
		return nil
	case export.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown Export field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExportMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.manager != nil {
		edges = append(edges, export.EdgeManager)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExportMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case export.EdgeManager:
		if id := m.manager; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExportMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExportMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExportMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmanager {
		edges = append(edges, export.EdgeManager)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExportMutation) EdgeCleared(name string) bool {
	switch name {
	case export.EdgeManager:
		return m.clearedmanager
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExportMutation) ClearEdge(name string) error {
	switch name {
	case export.EdgeManager:
		m.ClearManager()
		return nil
	}
	return fmt.Errorf("unknown Export unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExportMutation) ResetEdge(name string) error {
	switch name {
	case export.EdgeManager:
		m.ResetManager()
		return nil
	}
	return fmt.Errorf("unknown Export edge %s", name)
}

