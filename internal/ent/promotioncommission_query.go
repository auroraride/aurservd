// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionCommissionQuery is the builder for querying PromotionCommission entities.
type PromotionCommissionQuery struct {
	config
	ctx        *QueryContext
	order      []promotioncommission.OrderOption
	inters     []Interceptor
	predicates []predicate.PromotionCommission
	withMember *PromotionMemberQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PromotionCommissionQuery builder.
func (pcq *PromotionCommissionQuery) Where(ps ...predicate.PromotionCommission) *PromotionCommissionQuery {
	pcq.predicates = append(pcq.predicates, ps...)
	return pcq
}

// Limit the number of records to be returned by this query.
func (pcq *PromotionCommissionQuery) Limit(limit int) *PromotionCommissionQuery {
	pcq.ctx.Limit = &limit
	return pcq
}

// Offset to start from.
func (pcq *PromotionCommissionQuery) Offset(offset int) *PromotionCommissionQuery {
	pcq.ctx.Offset = &offset
	return pcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcq *PromotionCommissionQuery) Unique(unique bool) *PromotionCommissionQuery {
	pcq.ctx.Unique = &unique
	return pcq
}

// Order specifies how the records should be ordered.
func (pcq *PromotionCommissionQuery) Order(o ...promotioncommission.OrderOption) *PromotionCommissionQuery {
	pcq.order = append(pcq.order, o...)
	return pcq
}

// QueryMember chains the current query on the "member" edge.
func (pcq *PromotionCommissionQuery) QueryMember() *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: pcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommission.Table, promotioncommission.FieldID, selector),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotioncommission.MemberTable, promotioncommission.MemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PromotionCommission entity from the query.
// Returns a *NotFoundError when no PromotionCommission was found.
func (pcq *PromotionCommissionQuery) First(ctx context.Context) (*PromotionCommission, error) {
	nodes, err := pcq.Limit(1).All(setContextOp(ctx, pcq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{promotioncommission.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcq *PromotionCommissionQuery) FirstX(ctx context.Context) *PromotionCommission {
	node, err := pcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PromotionCommission ID from the query.
// Returns a *NotFoundError when no PromotionCommission ID was found.
func (pcq *PromotionCommissionQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pcq.Limit(1).IDs(setContextOp(ctx, pcq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{promotioncommission.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcq *PromotionCommissionQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := pcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PromotionCommission entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PromotionCommission entity is found.
// Returns a *NotFoundError when no PromotionCommission entities are found.
func (pcq *PromotionCommissionQuery) Only(ctx context.Context) (*PromotionCommission, error) {
	nodes, err := pcq.Limit(2).All(setContextOp(ctx, pcq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{promotioncommission.Label}
	default:
		return nil, &NotSingularError{promotioncommission.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcq *PromotionCommissionQuery) OnlyX(ctx context.Context) *PromotionCommission {
	node, err := pcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PromotionCommission ID in the query.
// Returns a *NotSingularError when more than one PromotionCommission ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcq *PromotionCommissionQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pcq.Limit(2).IDs(setContextOp(ctx, pcq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{promotioncommission.Label}
	default:
		err = &NotSingularError{promotioncommission.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcq *PromotionCommissionQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := pcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PromotionCommissions.
func (pcq *PromotionCommissionQuery) All(ctx context.Context) ([]*PromotionCommission, error) {
	ctx = setContextOp(ctx, pcq.ctx, "All")
	if err := pcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PromotionCommission, *PromotionCommissionQuery]()
	return withInterceptors[[]*PromotionCommission](ctx, pcq, qr, pcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pcq *PromotionCommissionQuery) AllX(ctx context.Context) []*PromotionCommission {
	nodes, err := pcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PromotionCommission IDs.
func (pcq *PromotionCommissionQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if pcq.ctx.Unique == nil && pcq.path != nil {
		pcq.Unique(true)
	}
	ctx = setContextOp(ctx, pcq.ctx, "IDs")
	if err = pcq.Select(promotioncommission.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcq *PromotionCommissionQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := pcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcq *PromotionCommissionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pcq.ctx, "Count")
	if err := pcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pcq, querierCount[*PromotionCommissionQuery](), pcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pcq *PromotionCommissionQuery) CountX(ctx context.Context) int {
	count, err := pcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcq *PromotionCommissionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pcq.ctx, "Exist")
	switch _, err := pcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pcq *PromotionCommissionQuery) ExistX(ctx context.Context) bool {
	exist, err := pcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PromotionCommissionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcq *PromotionCommissionQuery) Clone() *PromotionCommissionQuery {
	if pcq == nil {
		return nil
	}
	return &PromotionCommissionQuery{
		config:     pcq.config,
		ctx:        pcq.ctx.Clone(),
		order:      append([]promotioncommission.OrderOption{}, pcq.order...),
		inters:     append([]Interceptor{}, pcq.inters...),
		predicates: append([]predicate.PromotionCommission{}, pcq.predicates...),
		withMember: pcq.withMember.Clone(),
		// clone intermediate query.
		sql:  pcq.sql.Clone(),
		path: pcq.path,
	}
}

// WithMember tells the query-builder to eager-load the nodes that are connected to
// the "member" edge. The optional arguments are used to configure the query builder of the edge.
func (pcq *PromotionCommissionQuery) WithMember(opts ...func(*PromotionMemberQuery)) *PromotionCommissionQuery {
	query := (&PromotionMemberClient{config: pcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcq.withMember = query
	return pcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PromotionCommission.Query().
//		GroupBy(promotioncommission.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pcq *PromotionCommissionQuery) GroupBy(field string, fields ...string) *PromotionCommissionGroupBy {
	pcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PromotionCommissionGroupBy{build: pcq}
	grbuild.flds = &pcq.ctx.Fields
	grbuild.label = promotioncommission.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PromotionCommission.Query().
//		Select(promotioncommission.FieldCreatedAt).
//		Scan(ctx, &v)
func (pcq *PromotionCommissionQuery) Select(fields ...string) *PromotionCommissionSelect {
	pcq.ctx.Fields = append(pcq.ctx.Fields, fields...)
	sbuild := &PromotionCommissionSelect{PromotionCommissionQuery: pcq}
	sbuild.label = promotioncommission.Label
	sbuild.flds, sbuild.scan = &pcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PromotionCommissionSelect configured with the given aggregations.
func (pcq *PromotionCommissionQuery) Aggregate(fns ...AggregateFunc) *PromotionCommissionSelect {
	return pcq.Select().Aggregate(fns...)
}

func (pcq *PromotionCommissionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pcq); err != nil {
				return err
			}
		}
	}
	for _, f := range pcq.ctx.Fields {
		if !promotioncommission.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pcq.path != nil {
		prev, err := pcq.path(ctx)
		if err != nil {
			return err
		}
		pcq.sql = prev
	}
	return nil
}

func (pcq *PromotionCommissionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PromotionCommission, error) {
	var (
		nodes       = []*PromotionCommission{}
		_spec       = pcq.querySpec()
		loadedTypes = [1]bool{
			pcq.withMember != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PromotionCommission).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PromotionCommission{config: pcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pcq.modifiers) > 0 {
		_spec.Modifiers = pcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pcq.withMember; query != nil {
		if err := pcq.loadMember(ctx, query, nodes, nil,
			func(n *PromotionCommission, e *PromotionMember) { n.Edges.Member = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pcq *PromotionCommissionQuery) loadMember(ctx context.Context, query *PromotionMemberQuery, nodes []*PromotionCommission, init func(*PromotionCommission), assign func(*PromotionCommission, *PromotionMember)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionCommission)
	for i := range nodes {
		if nodes[i].MemberID == nil {
			continue
		}
		fk := *nodes[i].MemberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(promotionmember.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "member_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pcq *PromotionCommissionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcq.querySpec()
	if len(pcq.modifiers) > 0 {
		_spec.Modifiers = pcq.modifiers
	}
	_spec.Node.Columns = pcq.ctx.Fields
	if len(pcq.ctx.Fields) > 0 {
		_spec.Unique = pcq.ctx.Unique != nil && *pcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pcq.driver, _spec)
}

func (pcq *PromotionCommissionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(promotioncommission.Table, promotioncommission.Columns, sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64))
	_spec.From = pcq.sql
	if unique := pcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pcq.path != nil {
		_spec.Unique = true
	}
	if fields := pcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotioncommission.FieldID)
		for i := range fields {
			if fields[i] != promotioncommission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pcq.withMember != nil {
			_spec.Node.AddColumnOnce(promotioncommission.FieldMemberID)
		}
	}
	if ps := pcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcq *PromotionCommissionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcq.driver.Dialect())
	t1 := builder.Table(promotioncommission.Table)
	columns := pcq.ctx.Fields
	if len(columns) == 0 {
		columns = promotioncommission.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcq.sql != nil {
		selector = pcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcq.ctx.Unique != nil && *pcq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pcq.modifiers {
		m(selector)
	}
	for _, p := range pcq.predicates {
		p(selector)
	}
	for _, p := range pcq.order {
		p(selector)
	}
	if offset := pcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pcq *PromotionCommissionQuery) Modify(modifiers ...func(s *sql.Selector)) *PromotionCommissionSelect {
	pcq.modifiers = append(pcq.modifiers, modifiers...)
	return pcq.Select()
}

type PromotionCommissionQueryWith string

var (
	PromotionCommissionQueryWithMember PromotionCommissionQueryWith = "Member"
)

func (pcq *PromotionCommissionQuery) With(withEdges ...PromotionCommissionQueryWith) *PromotionCommissionQuery {
	for _, v := range withEdges {
		switch v {
		case PromotionCommissionQueryWithMember:
			pcq.WithMember()
		}
	}
	return pcq
}

// PromotionCommissionGroupBy is the group-by builder for PromotionCommission entities.
type PromotionCommissionGroupBy struct {
	selector
	build *PromotionCommissionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcgb *PromotionCommissionGroupBy) Aggregate(fns ...AggregateFunc) *PromotionCommissionGroupBy {
	pcgb.fns = append(pcgb.fns, fns...)
	return pcgb
}

// Scan applies the selector query and scans the result into the given value.
func (pcgb *PromotionCommissionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcgb.build.ctx, "GroupBy")
	if err := pcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionCommissionQuery, *PromotionCommissionGroupBy](ctx, pcgb.build, pcgb, pcgb.build.inters, v)
}

func (pcgb *PromotionCommissionGroupBy) sqlScan(ctx context.Context, root *PromotionCommissionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pcgb.fns))
	for _, fn := range pcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pcgb.flds)+len(pcgb.fns))
		for _, f := range *pcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PromotionCommissionSelect is the builder for selecting fields of PromotionCommission entities.
type PromotionCommissionSelect struct {
	*PromotionCommissionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pcs *PromotionCommissionSelect) Aggregate(fns ...AggregateFunc) *PromotionCommissionSelect {
	pcs.fns = append(pcs.fns, fns...)
	return pcs
}

// Scan applies the selector query and scans the result into the given value.
func (pcs *PromotionCommissionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcs.ctx, "Select")
	if err := pcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionCommissionQuery, *PromotionCommissionSelect](ctx, pcs.PromotionCommissionQuery, pcs, pcs.inters, v)
}

func (pcs *PromotionCommissionSelect) sqlScan(ctx context.Context, root *PromotionCommissionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pcs.fns))
	for _, fn := range pcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pcs *PromotionCommissionSelect) Modify(modifiers ...func(s *sql.Selector)) *PromotionCommissionSelect {
	pcs.modifiers = append(pcs.modifiers, modifiers...)
	return pcs
}
