// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprepayment"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterprisePrepaymentUpdate is the builder for updating EnterprisePrepayment entities.
type EnterprisePrepaymentUpdate struct {
	config
	hooks     []Hook
	mutation  *EnterprisePrepaymentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EnterprisePrepaymentUpdate builder.
func (epu *EnterprisePrepaymentUpdate) Where(ps ...predicate.EnterprisePrepayment) *EnterprisePrepaymentUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetUpdatedAt sets the "updated_at" field.
func (epu *EnterprisePrepaymentUpdate) SetUpdatedAt(t time.Time) *EnterprisePrepaymentUpdate {
	epu.mutation.SetUpdatedAt(t)
	return epu
}

// SetLastModifier sets the "last_modifier" field.
func (epu *EnterprisePrepaymentUpdate) SetLastModifier(m *model.Modifier) *EnterprisePrepaymentUpdate {
	epu.mutation.SetLastModifier(m)
	return epu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (epu *EnterprisePrepaymentUpdate) ClearLastModifier() *EnterprisePrepaymentUpdate {
	epu.mutation.ClearLastModifier()
	return epu
}

// SetRemark sets the "remark" field.
func (epu *EnterprisePrepaymentUpdate) SetRemark(s string) *EnterprisePrepaymentUpdate {
	epu.mutation.SetRemark(s)
	return epu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (epu *EnterprisePrepaymentUpdate) SetNillableRemark(s *string) *EnterprisePrepaymentUpdate {
	if s != nil {
		epu.SetRemark(*s)
	}
	return epu
}

// ClearRemark clears the value of the "remark" field.
func (epu *EnterprisePrepaymentUpdate) ClearRemark() *EnterprisePrepaymentUpdate {
	epu.mutation.ClearRemark()
	return epu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (epu *EnterprisePrepaymentUpdate) SetEnterpriseID(u uint64) *EnterprisePrepaymentUpdate {
	epu.mutation.SetEnterpriseID(u)
	return epu
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (epu *EnterprisePrepaymentUpdate) SetNillableEnterpriseID(u *uint64) *EnterprisePrepaymentUpdate {
	if u != nil {
		epu.SetEnterpriseID(*u)
	}
	return epu
}

// SetAgentID sets the "agent_id" field.
func (epu *EnterprisePrepaymentUpdate) SetAgentID(u uint64) *EnterprisePrepaymentUpdate {
	epu.mutation.SetAgentID(u)
	return epu
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (epu *EnterprisePrepaymentUpdate) SetNillableAgentID(u *uint64) *EnterprisePrepaymentUpdate {
	if u != nil {
		epu.SetAgentID(*u)
	}
	return epu
}

// ClearAgentID clears the value of the "agent_id" field.
func (epu *EnterprisePrepaymentUpdate) ClearAgentID() *EnterprisePrepaymentUpdate {
	epu.mutation.ClearAgentID()
	return epu
}

// SetPayway sets the "payway" field.
func (epu *EnterprisePrepaymentUpdate) SetPayway(m model.Payway) *EnterprisePrepaymentUpdate {
	epu.mutation.SetPayway(m)
	return epu
}

// SetNillablePayway sets the "payway" field if the given value is not nil.
func (epu *EnterprisePrepaymentUpdate) SetNillablePayway(m *model.Payway) *EnterprisePrepaymentUpdate {
	if m != nil {
		epu.SetPayway(*m)
	}
	return epu
}

// SetTradeNo sets the "trade_no" field.
func (epu *EnterprisePrepaymentUpdate) SetTradeNo(s string) *EnterprisePrepaymentUpdate {
	epu.mutation.SetTradeNo(s)
	return epu
}

// SetNillableTradeNo sets the "trade_no" field if the given value is not nil.
func (epu *EnterprisePrepaymentUpdate) SetNillableTradeNo(s *string) *EnterprisePrepaymentUpdate {
	if s != nil {
		epu.SetTradeNo(*s)
	}
	return epu
}

// ClearTradeNo clears the value of the "trade_no" field.
func (epu *EnterprisePrepaymentUpdate) ClearTradeNo() *EnterprisePrepaymentUpdate {
	epu.mutation.ClearTradeNo()
	return epu
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (epu *EnterprisePrepaymentUpdate) SetEnterprise(e *Enterprise) *EnterprisePrepaymentUpdate {
	return epu.SetEnterpriseID(e.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (epu *EnterprisePrepaymentUpdate) SetAgent(a *Agent) *EnterprisePrepaymentUpdate {
	return epu.SetAgentID(a.ID)
}

// Mutation returns the EnterprisePrepaymentMutation object of the builder.
func (epu *EnterprisePrepaymentUpdate) Mutation() *EnterprisePrepaymentMutation {
	return epu.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (epu *EnterprisePrepaymentUpdate) ClearEnterprise() *EnterprisePrepaymentUpdate {
	epu.mutation.ClearEnterprise()
	return epu
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (epu *EnterprisePrepaymentUpdate) ClearAgent() *EnterprisePrepaymentUpdate {
	epu.mutation.ClearAgent()
	return epu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EnterprisePrepaymentUpdate) Save(ctx context.Context) (int, error) {
	if err := epu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EnterprisePrepaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EnterprisePrepaymentUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EnterprisePrepaymentUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epu *EnterprisePrepaymentUpdate) defaults() error {
	if _, ok := epu.mutation.UpdatedAt(); !ok {
		if enterpriseprepayment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseprepayment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseprepayment.UpdateDefaultUpdatedAt()
		epu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epu *EnterprisePrepaymentUpdate) check() error {
	if epu.mutation.EnterpriseCleared() && len(epu.mutation.EnterpriseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EnterprisePrepayment.enterprise"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epu *EnterprisePrepaymentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnterprisePrepaymentUpdate {
	epu.modifiers = append(epu.modifiers, modifiers...)
	return epu
}

func (epu *EnterprisePrepaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enterpriseprepayment.Table, enterpriseprepayment.Columns, sqlgraph.NewFieldSpec(enterpriseprepayment.FieldID, field.TypeUint64))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.UpdatedAt(); ok {
		_spec.SetField(enterpriseprepayment.FieldUpdatedAt, field.TypeTime, value)
	}
	if epu.mutation.CreatorCleared() {
		_spec.ClearField(enterpriseprepayment.FieldCreator, field.TypeJSON)
	}
	if value, ok := epu.mutation.LastModifier(); ok {
		_spec.SetField(enterpriseprepayment.FieldLastModifier, field.TypeJSON, value)
	}
	if epu.mutation.LastModifierCleared() {
		_spec.ClearField(enterpriseprepayment.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := epu.mutation.Remark(); ok {
		_spec.SetField(enterpriseprepayment.FieldRemark, field.TypeString, value)
	}
	if epu.mutation.RemarkCleared() {
		_spec.ClearField(enterpriseprepayment.FieldRemark, field.TypeString)
	}
	if value, ok := epu.mutation.Payway(); ok {
		_spec.SetField(enterpriseprepayment.FieldPayway, field.TypeOther, value)
	}
	if value, ok := epu.mutation.TradeNo(); ok {
		_spec.SetField(enterpriseprepayment.FieldTradeNo, field.TypeString, value)
	}
	if epu.mutation.TradeNoCleared() {
		_spec.ClearField(enterpriseprepayment.FieldTradeNo, field.TypeString)
	}
	if epu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.EnterpriseTable,
			Columns: []string{enterpriseprepayment.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.EnterpriseTable,
			Columns: []string{enterpriseprepayment.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.AgentTable,
			Columns: []string{enterpriseprepayment.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.AgentTable,
			Columns: []string{enterpriseprepayment.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(epu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterpriseprepayment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// EnterprisePrepaymentUpdateOne is the builder for updating a single EnterprisePrepayment entity.
type EnterprisePrepaymentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EnterprisePrepaymentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (epuo *EnterprisePrepaymentUpdateOne) SetUpdatedAt(t time.Time) *EnterprisePrepaymentUpdateOne {
	epuo.mutation.SetUpdatedAt(t)
	return epuo
}

// SetLastModifier sets the "last_modifier" field.
func (epuo *EnterprisePrepaymentUpdateOne) SetLastModifier(m *model.Modifier) *EnterprisePrepaymentUpdateOne {
	epuo.mutation.SetLastModifier(m)
	return epuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (epuo *EnterprisePrepaymentUpdateOne) ClearLastModifier() *EnterprisePrepaymentUpdateOne {
	epuo.mutation.ClearLastModifier()
	return epuo
}

// SetRemark sets the "remark" field.
func (epuo *EnterprisePrepaymentUpdateOne) SetRemark(s string) *EnterprisePrepaymentUpdateOne {
	epuo.mutation.SetRemark(s)
	return epuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (epuo *EnterprisePrepaymentUpdateOne) SetNillableRemark(s *string) *EnterprisePrepaymentUpdateOne {
	if s != nil {
		epuo.SetRemark(*s)
	}
	return epuo
}

// ClearRemark clears the value of the "remark" field.
func (epuo *EnterprisePrepaymentUpdateOne) ClearRemark() *EnterprisePrepaymentUpdateOne {
	epuo.mutation.ClearRemark()
	return epuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (epuo *EnterprisePrepaymentUpdateOne) SetEnterpriseID(u uint64) *EnterprisePrepaymentUpdateOne {
	epuo.mutation.SetEnterpriseID(u)
	return epuo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (epuo *EnterprisePrepaymentUpdateOne) SetNillableEnterpriseID(u *uint64) *EnterprisePrepaymentUpdateOne {
	if u != nil {
		epuo.SetEnterpriseID(*u)
	}
	return epuo
}

// SetAgentID sets the "agent_id" field.
func (epuo *EnterprisePrepaymentUpdateOne) SetAgentID(u uint64) *EnterprisePrepaymentUpdateOne {
	epuo.mutation.SetAgentID(u)
	return epuo
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (epuo *EnterprisePrepaymentUpdateOne) SetNillableAgentID(u *uint64) *EnterprisePrepaymentUpdateOne {
	if u != nil {
		epuo.SetAgentID(*u)
	}
	return epuo
}

// ClearAgentID clears the value of the "agent_id" field.
func (epuo *EnterprisePrepaymentUpdateOne) ClearAgentID() *EnterprisePrepaymentUpdateOne {
	epuo.mutation.ClearAgentID()
	return epuo
}

// SetPayway sets the "payway" field.
func (epuo *EnterprisePrepaymentUpdateOne) SetPayway(m model.Payway) *EnterprisePrepaymentUpdateOne {
	epuo.mutation.SetPayway(m)
	return epuo
}

// SetNillablePayway sets the "payway" field if the given value is not nil.
func (epuo *EnterprisePrepaymentUpdateOne) SetNillablePayway(m *model.Payway) *EnterprisePrepaymentUpdateOne {
	if m != nil {
		epuo.SetPayway(*m)
	}
	return epuo
}

// SetTradeNo sets the "trade_no" field.
func (epuo *EnterprisePrepaymentUpdateOne) SetTradeNo(s string) *EnterprisePrepaymentUpdateOne {
	epuo.mutation.SetTradeNo(s)
	return epuo
}

// SetNillableTradeNo sets the "trade_no" field if the given value is not nil.
func (epuo *EnterprisePrepaymentUpdateOne) SetNillableTradeNo(s *string) *EnterprisePrepaymentUpdateOne {
	if s != nil {
		epuo.SetTradeNo(*s)
	}
	return epuo
}

// ClearTradeNo clears the value of the "trade_no" field.
func (epuo *EnterprisePrepaymentUpdateOne) ClearTradeNo() *EnterprisePrepaymentUpdateOne {
	epuo.mutation.ClearTradeNo()
	return epuo
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (epuo *EnterprisePrepaymentUpdateOne) SetEnterprise(e *Enterprise) *EnterprisePrepaymentUpdateOne {
	return epuo.SetEnterpriseID(e.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (epuo *EnterprisePrepaymentUpdateOne) SetAgent(a *Agent) *EnterprisePrepaymentUpdateOne {
	return epuo.SetAgentID(a.ID)
}

// Mutation returns the EnterprisePrepaymentMutation object of the builder.
func (epuo *EnterprisePrepaymentUpdateOne) Mutation() *EnterprisePrepaymentMutation {
	return epuo.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (epuo *EnterprisePrepaymentUpdateOne) ClearEnterprise() *EnterprisePrepaymentUpdateOne {
	epuo.mutation.ClearEnterprise()
	return epuo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (epuo *EnterprisePrepaymentUpdateOne) ClearAgent() *EnterprisePrepaymentUpdateOne {
	epuo.mutation.ClearAgent()
	return epuo
}

// Where appends a list predicates to the EnterprisePrepaymentUpdate builder.
func (epuo *EnterprisePrepaymentUpdateOne) Where(ps ...predicate.EnterprisePrepayment) *EnterprisePrepaymentUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EnterprisePrepaymentUpdateOne) Select(field string, fields ...string) *EnterprisePrepaymentUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EnterprisePrepayment entity.
func (epuo *EnterprisePrepaymentUpdateOne) Save(ctx context.Context) (*EnterprisePrepayment, error) {
	if err := epuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EnterprisePrepaymentUpdateOne) SaveX(ctx context.Context) *EnterprisePrepayment {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EnterprisePrepaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EnterprisePrepaymentUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epuo *EnterprisePrepaymentUpdateOne) defaults() error {
	if _, ok := epuo.mutation.UpdatedAt(); !ok {
		if enterpriseprepayment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseprepayment.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseprepayment.UpdateDefaultUpdatedAt()
		epuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epuo *EnterprisePrepaymentUpdateOne) check() error {
	if epuo.mutation.EnterpriseCleared() && len(epuo.mutation.EnterpriseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EnterprisePrepayment.enterprise"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epuo *EnterprisePrepaymentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnterprisePrepaymentUpdateOne {
	epuo.modifiers = append(epuo.modifiers, modifiers...)
	return epuo
}

func (epuo *EnterprisePrepaymentUpdateOne) sqlSave(ctx context.Context) (_node *EnterprisePrepayment, err error) {
	if err := epuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enterpriseprepayment.Table, enterpriseprepayment.Columns, sqlgraph.NewFieldSpec(enterpriseprepayment.FieldID, field.TypeUint64))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnterprisePrepayment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterpriseprepayment.FieldID)
		for _, f := range fields {
			if !enterpriseprepayment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterpriseprepayment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enterpriseprepayment.FieldUpdatedAt, field.TypeTime, value)
	}
	if epuo.mutation.CreatorCleared() {
		_spec.ClearField(enterpriseprepayment.FieldCreator, field.TypeJSON)
	}
	if value, ok := epuo.mutation.LastModifier(); ok {
		_spec.SetField(enterpriseprepayment.FieldLastModifier, field.TypeJSON, value)
	}
	if epuo.mutation.LastModifierCleared() {
		_spec.ClearField(enterpriseprepayment.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := epuo.mutation.Remark(); ok {
		_spec.SetField(enterpriseprepayment.FieldRemark, field.TypeString, value)
	}
	if epuo.mutation.RemarkCleared() {
		_spec.ClearField(enterpriseprepayment.FieldRemark, field.TypeString)
	}
	if value, ok := epuo.mutation.Payway(); ok {
		_spec.SetField(enterpriseprepayment.FieldPayway, field.TypeOther, value)
	}
	if value, ok := epuo.mutation.TradeNo(); ok {
		_spec.SetField(enterpriseprepayment.FieldTradeNo, field.TypeString, value)
	}
	if epuo.mutation.TradeNoCleared() {
		_spec.ClearField(enterpriseprepayment.FieldTradeNo, field.TypeString)
	}
	if epuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.EnterpriseTable,
			Columns: []string{enterpriseprepayment.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.EnterpriseTable,
			Columns: []string{enterpriseprepayment.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.AgentTable,
			Columns: []string{enterpriseprepayment.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprepayment.AgentTable,
			Columns: []string{enterpriseprepayment.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(epuo.modifiers...)
	_node = &EnterprisePrepayment{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterpriseprepayment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
