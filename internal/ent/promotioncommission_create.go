// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/app/model/promotion"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionCommissionCreate is the builder for creating a PromotionCommission entity.
type PromotionCommissionCreate struct {
	config
	mutation *PromotionCommissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PromotionCommissionCreate) SetCreatedAt(t time.Time) *PromotionCommissionCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableCreatedAt(t *time.Time) *PromotionCommissionCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PromotionCommissionCreate) SetUpdatedAt(t time.Time) *PromotionCommissionCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableUpdatedAt(t *time.Time) *PromotionCommissionCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetDeletedAt sets the "deleted_at" field.
func (pcc *PromotionCommissionCreate) SetDeletedAt(t time.Time) *PromotionCommissionCreate {
	pcc.mutation.SetDeletedAt(t)
	return pcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableDeletedAt(t *time.Time) *PromotionCommissionCreate {
	if t != nil {
		pcc.SetDeletedAt(*t)
	}
	return pcc
}

// SetCreator sets the "creator" field.
func (pcc *PromotionCommissionCreate) SetCreator(m *model.Modifier) *PromotionCommissionCreate {
	pcc.mutation.SetCreator(m)
	return pcc
}

// SetLastModifier sets the "last_modifier" field.
func (pcc *PromotionCommissionCreate) SetLastModifier(m *model.Modifier) *PromotionCommissionCreate {
	pcc.mutation.SetLastModifier(m)
	return pcc
}

// SetRemark sets the "remark" field.
func (pcc *PromotionCommissionCreate) SetRemark(s string) *PromotionCommissionCreate {
	pcc.mutation.SetRemark(s)
	return pcc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableRemark(s *string) *PromotionCommissionCreate {
	if s != nil {
		pcc.SetRemark(*s)
	}
	return pcc
}

// SetMemberID sets the "member_id" field.
func (pcc *PromotionCommissionCreate) SetMemberID(u uint64) *PromotionCommissionCreate {
	pcc.mutation.SetMemberID(u)
	return pcc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableMemberID(u *uint64) *PromotionCommissionCreate {
	if u != nil {
		pcc.SetMemberID(*u)
	}
	return pcc
}

// SetType sets the "type" field.
func (pcc *PromotionCommissionCreate) SetType(u uint8) *PromotionCommissionCreate {
	pcc.mutation.SetType(u)
	return pcc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableType(u *uint8) *PromotionCommissionCreate {
	if u != nil {
		pcc.SetType(*u)
	}
	return pcc
}

// SetName sets the "name" field.
func (pcc *PromotionCommissionCreate) SetName(s string) *PromotionCommissionCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetRule sets the "rule" field.
func (pcc *PromotionCommissionCreate) SetRule(pr *promotion.CommissionRule) *PromotionCommissionCreate {
	pcc.mutation.SetRule(pr)
	return pcc
}

// SetEnable sets the "enable" field.
func (pcc *PromotionCommissionCreate) SetEnable(b bool) *PromotionCommissionCreate {
	pcc.mutation.SetEnable(b)
	return pcc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableEnable(b *bool) *PromotionCommissionCreate {
	if b != nil {
		pcc.SetEnable(*b)
	}
	return pcc
}

// SetAmountSum sets the "amount_sum" field.
func (pcc *PromotionCommissionCreate) SetAmountSum(f float64) *PromotionCommissionCreate {
	pcc.mutation.SetAmountSum(f)
	return pcc
}

// SetNillableAmountSum sets the "amount_sum" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableAmountSum(f *float64) *PromotionCommissionCreate {
	if f != nil {
		pcc.SetAmountSum(*f)
	}
	return pcc
}

// SetFirstNewNum sets the "first_new_num" field.
func (pcc *PromotionCommissionCreate) SetFirstNewNum(u uint64) *PromotionCommissionCreate {
	pcc.mutation.SetFirstNewNum(u)
	return pcc
}

// SetNillableFirstNewNum sets the "first_new_num" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableFirstNewNum(u *uint64) *PromotionCommissionCreate {
	if u != nil {
		pcc.SetFirstNewNum(*u)
	}
	return pcc
}

// SetSecondNewNum sets the "second_new_num" field.
func (pcc *PromotionCommissionCreate) SetSecondNewNum(u uint64) *PromotionCommissionCreate {
	pcc.mutation.SetSecondNewNum(u)
	return pcc
}

// SetNillableSecondNewNum sets the "second_new_num" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableSecondNewNum(u *uint64) *PromotionCommissionCreate {
	if u != nil {
		pcc.SetSecondNewNum(*u)
	}
	return pcc
}

// SetFirstRenewNum sets the "first_renew_num" field.
func (pcc *PromotionCommissionCreate) SetFirstRenewNum(u uint64) *PromotionCommissionCreate {
	pcc.mutation.SetFirstRenewNum(u)
	return pcc
}

// SetNillableFirstRenewNum sets the "first_renew_num" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableFirstRenewNum(u *uint64) *PromotionCommissionCreate {
	if u != nil {
		pcc.SetFirstRenewNum(*u)
	}
	return pcc
}

// SetSecondRenewNum sets the "second_renew_num" field.
func (pcc *PromotionCommissionCreate) SetSecondRenewNum(u uint64) *PromotionCommissionCreate {
	pcc.mutation.SetSecondRenewNum(u)
	return pcc
}

// SetNillableSecondRenewNum sets the "second_renew_num" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableSecondRenewNum(u *uint64) *PromotionCommissionCreate {
	if u != nil {
		pcc.SetSecondRenewNum(*u)
	}
	return pcc
}

// SetFirstNewAmountSum sets the "first_new_amount_sum" field.
func (pcc *PromotionCommissionCreate) SetFirstNewAmountSum(f float64) *PromotionCommissionCreate {
	pcc.mutation.SetFirstNewAmountSum(f)
	return pcc
}

// SetNillableFirstNewAmountSum sets the "first_new_amount_sum" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableFirstNewAmountSum(f *float64) *PromotionCommissionCreate {
	if f != nil {
		pcc.SetFirstNewAmountSum(*f)
	}
	return pcc
}

// SetSecondNewAmountSum sets the "second_new_amount_sum" field.
func (pcc *PromotionCommissionCreate) SetSecondNewAmountSum(f float64) *PromotionCommissionCreate {
	pcc.mutation.SetSecondNewAmountSum(f)
	return pcc
}

// SetNillableSecondNewAmountSum sets the "second_new_amount_sum" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableSecondNewAmountSum(f *float64) *PromotionCommissionCreate {
	if f != nil {
		pcc.SetSecondNewAmountSum(*f)
	}
	return pcc
}

// SetFirstRenewAmountSum sets the "first_renew_amount_sum" field.
func (pcc *PromotionCommissionCreate) SetFirstRenewAmountSum(f float64) *PromotionCommissionCreate {
	pcc.mutation.SetFirstRenewAmountSum(f)
	return pcc
}

// SetNillableFirstRenewAmountSum sets the "first_renew_amount_sum" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableFirstRenewAmountSum(f *float64) *PromotionCommissionCreate {
	if f != nil {
		pcc.SetFirstRenewAmountSum(*f)
	}
	return pcc
}

// SetSecondRenewAmountSum sets the "second_renew_amount_sum" field.
func (pcc *PromotionCommissionCreate) SetSecondRenewAmountSum(f float64) *PromotionCommissionCreate {
	pcc.mutation.SetSecondRenewAmountSum(f)
	return pcc
}

// SetNillableSecondRenewAmountSum sets the "second_renew_amount_sum" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableSecondRenewAmountSum(f *float64) *PromotionCommissionCreate {
	if f != nil {
		pcc.SetSecondRenewAmountSum(*f)
	}
	return pcc
}

// SetDesc sets the "desc" field.
func (pcc *PromotionCommissionCreate) SetDesc(s string) *PromotionCommissionCreate {
	pcc.mutation.SetDesc(s)
	return pcc
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableDesc(s *string) *PromotionCommissionCreate {
	if s != nil {
		pcc.SetDesc(*s)
	}
	return pcc
}

// SetHistoryID sets the "history_id" field.
func (pcc *PromotionCommissionCreate) SetHistoryID(u []uint64) *PromotionCommissionCreate {
	pcc.mutation.SetHistoryID(u)
	return pcc
}

// SetStartAt sets the "start_at" field.
func (pcc *PromotionCommissionCreate) SetStartAt(t time.Time) *PromotionCommissionCreate {
	pcc.mutation.SetStartAt(t)
	return pcc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableStartAt(t *time.Time) *PromotionCommissionCreate {
	if t != nil {
		pcc.SetStartAt(*t)
	}
	return pcc
}

// SetEndAt sets the "end_at" field.
func (pcc *PromotionCommissionCreate) SetEndAt(t time.Time) *PromotionCommissionCreate {
	pcc.mutation.SetEndAt(t)
	return pcc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (pcc *PromotionCommissionCreate) SetNillableEndAt(t *time.Time) *PromotionCommissionCreate {
	if t != nil {
		pcc.SetEndAt(*t)
	}
	return pcc
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pcc *PromotionCommissionCreate) SetMember(p *PromotionMember) *PromotionCommissionCreate {
	return pcc.SetMemberID(p.ID)
}

// AddPlanIDs adds the "plans" edge to the PromotionCommissionPlan entity by IDs.
func (pcc *PromotionCommissionCreate) AddPlanIDs(ids ...uint64) *PromotionCommissionCreate {
	pcc.mutation.AddPlanIDs(ids...)
	return pcc
}

// AddPlans adds the "plans" edges to the PromotionCommissionPlan entity.
func (pcc *PromotionCommissionCreate) AddPlans(p ...*PromotionCommissionPlan) *PromotionCommissionCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddPlanIDs(ids...)
}

// Mutation returns the PromotionCommissionMutation object of the builder.
func (pcc *PromotionCommissionCreate) Mutation() *PromotionCommissionMutation {
	return pcc.mutation
}

// Save creates the PromotionCommission in the database.
func (pcc *PromotionCommissionCreate) Save(ctx context.Context) (*PromotionCommission, error) {
	if err := pcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PromotionCommissionCreate) SaveX(ctx context.Context) *PromotionCommission {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PromotionCommissionCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PromotionCommissionCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PromotionCommissionCreate) defaults() error {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		if promotioncommission.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotioncommission.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotioncommission.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		if promotioncommission.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotioncommission.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotioncommission.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.GetType(); !ok {
		v := promotioncommission.DefaultType
		pcc.mutation.SetType(v)
	}
	if _, ok := pcc.mutation.Enable(); !ok {
		v := promotioncommission.DefaultEnable
		pcc.mutation.SetEnable(v)
	}
	if _, ok := pcc.mutation.AmountSum(); !ok {
		v := promotioncommission.DefaultAmountSum
		pcc.mutation.SetAmountSum(v)
	}
	if _, ok := pcc.mutation.FirstNewNum(); !ok {
		v := promotioncommission.DefaultFirstNewNum
		pcc.mutation.SetFirstNewNum(v)
	}
	if _, ok := pcc.mutation.SecondNewNum(); !ok {
		v := promotioncommission.DefaultSecondNewNum
		pcc.mutation.SetSecondNewNum(v)
	}
	if _, ok := pcc.mutation.FirstRenewNum(); !ok {
		v := promotioncommission.DefaultFirstRenewNum
		pcc.mutation.SetFirstRenewNum(v)
	}
	if _, ok := pcc.mutation.SecondRenewNum(); !ok {
		v := promotioncommission.DefaultSecondRenewNum
		pcc.mutation.SetSecondRenewNum(v)
	}
	if _, ok := pcc.mutation.FirstNewAmountSum(); !ok {
		v := promotioncommission.DefaultFirstNewAmountSum
		pcc.mutation.SetFirstNewAmountSum(v)
	}
	if _, ok := pcc.mutation.SecondNewAmountSum(); !ok {
		v := promotioncommission.DefaultSecondNewAmountSum
		pcc.mutation.SetSecondNewAmountSum(v)
	}
	if _, ok := pcc.mutation.FirstRenewAmountSum(); !ok {
		v := promotioncommission.DefaultFirstRenewAmountSum
		pcc.mutation.SetFirstRenewAmountSum(v)
	}
	if _, ok := pcc.mutation.SecondRenewAmountSum(); !ok {
		v := promotioncommission.DefaultSecondRenewAmountSum
		pcc.mutation.SetSecondRenewAmountSum(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PromotionCommissionCreate) check() error {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionCommission.created_at"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionCommission.updated_at"`)}
	}
	if _, ok := pcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PromotionCommission.type"`)}
	}
	if _, ok := pcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PromotionCommission.name"`)}
	}
	if _, ok := pcc.mutation.Rule(); !ok {
		return &ValidationError{Name: "rule", err: errors.New(`ent: missing required field "PromotionCommission.rule"`)}
	}
	if _, ok := pcc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "PromotionCommission.enable"`)}
	}
	if _, ok := pcc.mutation.AmountSum(); !ok {
		return &ValidationError{Name: "amount_sum", err: errors.New(`ent: missing required field "PromotionCommission.amount_sum"`)}
	}
	if _, ok := pcc.mutation.FirstNewNum(); !ok {
		return &ValidationError{Name: "first_new_num", err: errors.New(`ent: missing required field "PromotionCommission.first_new_num"`)}
	}
	if _, ok := pcc.mutation.SecondNewNum(); !ok {
		return &ValidationError{Name: "second_new_num", err: errors.New(`ent: missing required field "PromotionCommission.second_new_num"`)}
	}
	if _, ok := pcc.mutation.FirstRenewNum(); !ok {
		return &ValidationError{Name: "first_renew_num", err: errors.New(`ent: missing required field "PromotionCommission.first_renew_num"`)}
	}
	if _, ok := pcc.mutation.SecondRenewNum(); !ok {
		return &ValidationError{Name: "second_renew_num", err: errors.New(`ent: missing required field "PromotionCommission.second_renew_num"`)}
	}
	if _, ok := pcc.mutation.FirstNewAmountSum(); !ok {
		return &ValidationError{Name: "first_new_amount_sum", err: errors.New(`ent: missing required field "PromotionCommission.first_new_amount_sum"`)}
	}
	if _, ok := pcc.mutation.SecondNewAmountSum(); !ok {
		return &ValidationError{Name: "second_new_amount_sum", err: errors.New(`ent: missing required field "PromotionCommission.second_new_amount_sum"`)}
	}
	if _, ok := pcc.mutation.FirstRenewAmountSum(); !ok {
		return &ValidationError{Name: "first_renew_amount_sum", err: errors.New(`ent: missing required field "PromotionCommission.first_renew_amount_sum"`)}
	}
	if _, ok := pcc.mutation.SecondRenewAmountSum(); !ok {
		return &ValidationError{Name: "second_renew_amount_sum", err: errors.New(`ent: missing required field "PromotionCommission.second_renew_amount_sum"`)}
	}
	return nil
}

func (pcc *PromotionCommissionCreate) sqlSave(ctx context.Context) (*PromotionCommission, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PromotionCommissionCreate) createSpec() (*PromotionCommission, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionCommission{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(promotioncommission.Table, sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pcc.conflict
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(promotioncommission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotioncommission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcc.mutation.DeletedAt(); ok {
		_spec.SetField(promotioncommission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pcc.mutation.Creator(); ok {
		_spec.SetField(promotioncommission.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pcc.mutation.LastModifier(); ok {
		_spec.SetField(promotioncommission.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pcc.mutation.Remark(); ok {
		_spec.SetField(promotioncommission.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pcc.mutation.GetType(); ok {
		_spec.SetField(promotioncommission.FieldType, field.TypeUint8, value)
		_node.Type = &value
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.SetField(promotioncommission.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pcc.mutation.Rule(); ok {
		_spec.SetField(promotioncommission.FieldRule, field.TypeJSON, value)
		_node.Rule = value
	}
	if value, ok := pcc.mutation.Enable(); ok {
		_spec.SetField(promotioncommission.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := pcc.mutation.AmountSum(); ok {
		_spec.SetField(promotioncommission.FieldAmountSum, field.TypeFloat64, value)
		_node.AmountSum = value
	}
	if value, ok := pcc.mutation.FirstNewNum(); ok {
		_spec.SetField(promotioncommission.FieldFirstNewNum, field.TypeUint64, value)
		_node.FirstNewNum = value
	}
	if value, ok := pcc.mutation.SecondNewNum(); ok {
		_spec.SetField(promotioncommission.FieldSecondNewNum, field.TypeUint64, value)
		_node.SecondNewNum = value
	}
	if value, ok := pcc.mutation.FirstRenewNum(); ok {
		_spec.SetField(promotioncommission.FieldFirstRenewNum, field.TypeUint64, value)
		_node.FirstRenewNum = value
	}
	if value, ok := pcc.mutation.SecondRenewNum(); ok {
		_spec.SetField(promotioncommission.FieldSecondRenewNum, field.TypeUint64, value)
		_node.SecondRenewNum = value
	}
	if value, ok := pcc.mutation.FirstNewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldFirstNewAmountSum, field.TypeFloat64, value)
		_node.FirstNewAmountSum = value
	}
	if value, ok := pcc.mutation.SecondNewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldSecondNewAmountSum, field.TypeFloat64, value)
		_node.SecondNewAmountSum = value
	}
	if value, ok := pcc.mutation.FirstRenewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldFirstRenewAmountSum, field.TypeFloat64, value)
		_node.FirstRenewAmountSum = value
	}
	if value, ok := pcc.mutation.SecondRenewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldSecondRenewAmountSum, field.TypeFloat64, value)
		_node.SecondRenewAmountSum = value
	}
	if value, ok := pcc.mutation.Desc(); ok {
		_spec.SetField(promotioncommission.FieldDesc, field.TypeString, value)
		_node.Desc = &value
	}
	if value, ok := pcc.mutation.HistoryID(); ok {
		_spec.SetField(promotioncommission.FieldHistoryID, field.TypeJSON, value)
		_node.HistoryID = value
	}
	if value, ok := pcc.mutation.StartAt(); ok {
		_spec.SetField(promotioncommission.FieldStartAt, field.TypeTime, value)
		_node.StartAt = &value
	}
	if value, ok := pcc.mutation.EndAt(); ok {
		_spec.SetField(promotioncommission.FieldEndAt, field.TypeTime, value)
		_node.EndAt = &value
	}
	if nodes := pcc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotioncommission.MemberTable,
			Columns: []string{promotioncommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pcc.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotioncommission.PlansTable,
			Columns: []string{promotioncommission.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionCommission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionCommissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcc *PromotionCommissionCreate) OnConflict(opts ...sql.ConflictOption) *PromotionCommissionUpsertOne {
	pcc.conflict = opts
	return &PromotionCommissionUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionCommission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcc *PromotionCommissionCreate) OnConflictColumns(columns ...string) *PromotionCommissionUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &PromotionCommissionUpsertOne{
		create: pcc,
	}
}

type (
	// PromotionCommissionUpsertOne is the builder for "upsert"-ing
	//  one PromotionCommission node.
	PromotionCommissionUpsertOne struct {
		create *PromotionCommissionCreate
	}

	// PromotionCommissionUpsert is the "OnConflict" setter.
	PromotionCommissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionCommissionUpsert) SetUpdatedAt(v time.Time) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateUpdatedAt() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionCommissionUpsert) SetDeletedAt(v time.Time) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateDeletedAt() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionCommissionUpsert) ClearDeletedAt() *PromotionCommissionUpsert {
	u.SetNull(promotioncommission.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionCommissionUpsert) SetLastModifier(v *model.Modifier) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateLastModifier() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionCommissionUpsert) ClearLastModifier() *PromotionCommissionUpsert {
	u.SetNull(promotioncommission.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionCommissionUpsert) SetRemark(v string) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateRemark() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionCommissionUpsert) ClearRemark() *PromotionCommissionUpsert {
	u.SetNull(promotioncommission.FieldRemark)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *PromotionCommissionUpsert) SetMemberID(v uint64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateMemberID() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldMemberID)
	return u
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionCommissionUpsert) ClearMemberID() *PromotionCommissionUpsert {
	u.SetNull(promotioncommission.FieldMemberID)
	return u
}

// SetType sets the "type" field.
func (u *PromotionCommissionUpsert) SetType(v uint8) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateType() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *PromotionCommissionUpsert) AddType(v uint8) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldType, v)
	return u
}

// SetName sets the "name" field.
func (u *PromotionCommissionUpsert) SetName(v string) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateName() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldName)
	return u
}

// SetRule sets the "rule" field.
func (u *PromotionCommissionUpsert) SetRule(v *promotion.CommissionRule) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldRule, v)
	return u
}

// UpdateRule sets the "rule" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateRule() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldRule)
	return u
}

// SetEnable sets the "enable" field.
func (u *PromotionCommissionUpsert) SetEnable(v bool) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateEnable() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldEnable)
	return u
}

// SetAmountSum sets the "amount_sum" field.
func (u *PromotionCommissionUpsert) SetAmountSum(v float64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldAmountSum, v)
	return u
}

// UpdateAmountSum sets the "amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateAmountSum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldAmountSum)
	return u
}

// AddAmountSum adds v to the "amount_sum" field.
func (u *PromotionCommissionUpsert) AddAmountSum(v float64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldAmountSum, v)
	return u
}

// SetFirstNewNum sets the "first_new_num" field.
func (u *PromotionCommissionUpsert) SetFirstNewNum(v uint64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldFirstNewNum, v)
	return u
}

// UpdateFirstNewNum sets the "first_new_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateFirstNewNum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldFirstNewNum)
	return u
}

// AddFirstNewNum adds v to the "first_new_num" field.
func (u *PromotionCommissionUpsert) AddFirstNewNum(v uint64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldFirstNewNum, v)
	return u
}

// SetSecondNewNum sets the "second_new_num" field.
func (u *PromotionCommissionUpsert) SetSecondNewNum(v uint64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldSecondNewNum, v)
	return u
}

// UpdateSecondNewNum sets the "second_new_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateSecondNewNum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldSecondNewNum)
	return u
}

// AddSecondNewNum adds v to the "second_new_num" field.
func (u *PromotionCommissionUpsert) AddSecondNewNum(v uint64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldSecondNewNum, v)
	return u
}

// SetFirstRenewNum sets the "first_renew_num" field.
func (u *PromotionCommissionUpsert) SetFirstRenewNum(v uint64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldFirstRenewNum, v)
	return u
}

// UpdateFirstRenewNum sets the "first_renew_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateFirstRenewNum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldFirstRenewNum)
	return u
}

// AddFirstRenewNum adds v to the "first_renew_num" field.
func (u *PromotionCommissionUpsert) AddFirstRenewNum(v uint64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldFirstRenewNum, v)
	return u
}

// SetSecondRenewNum sets the "second_renew_num" field.
func (u *PromotionCommissionUpsert) SetSecondRenewNum(v uint64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldSecondRenewNum, v)
	return u
}

// UpdateSecondRenewNum sets the "second_renew_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateSecondRenewNum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldSecondRenewNum)
	return u
}

// AddSecondRenewNum adds v to the "second_renew_num" field.
func (u *PromotionCommissionUpsert) AddSecondRenewNum(v uint64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldSecondRenewNum, v)
	return u
}

// SetFirstNewAmountSum sets the "first_new_amount_sum" field.
func (u *PromotionCommissionUpsert) SetFirstNewAmountSum(v float64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldFirstNewAmountSum, v)
	return u
}

// UpdateFirstNewAmountSum sets the "first_new_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateFirstNewAmountSum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldFirstNewAmountSum)
	return u
}

// AddFirstNewAmountSum adds v to the "first_new_amount_sum" field.
func (u *PromotionCommissionUpsert) AddFirstNewAmountSum(v float64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldFirstNewAmountSum, v)
	return u
}

// SetSecondNewAmountSum sets the "second_new_amount_sum" field.
func (u *PromotionCommissionUpsert) SetSecondNewAmountSum(v float64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldSecondNewAmountSum, v)
	return u
}

// UpdateSecondNewAmountSum sets the "second_new_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateSecondNewAmountSum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldSecondNewAmountSum)
	return u
}

// AddSecondNewAmountSum adds v to the "second_new_amount_sum" field.
func (u *PromotionCommissionUpsert) AddSecondNewAmountSum(v float64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldSecondNewAmountSum, v)
	return u
}

// SetFirstRenewAmountSum sets the "first_renew_amount_sum" field.
func (u *PromotionCommissionUpsert) SetFirstRenewAmountSum(v float64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldFirstRenewAmountSum, v)
	return u
}

// UpdateFirstRenewAmountSum sets the "first_renew_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateFirstRenewAmountSum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldFirstRenewAmountSum)
	return u
}

// AddFirstRenewAmountSum adds v to the "first_renew_amount_sum" field.
func (u *PromotionCommissionUpsert) AddFirstRenewAmountSum(v float64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldFirstRenewAmountSum, v)
	return u
}

// SetSecondRenewAmountSum sets the "second_renew_amount_sum" field.
func (u *PromotionCommissionUpsert) SetSecondRenewAmountSum(v float64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldSecondRenewAmountSum, v)
	return u
}

// UpdateSecondRenewAmountSum sets the "second_renew_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateSecondRenewAmountSum() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldSecondRenewAmountSum)
	return u
}

// AddSecondRenewAmountSum adds v to the "second_renew_amount_sum" field.
func (u *PromotionCommissionUpsert) AddSecondRenewAmountSum(v float64) *PromotionCommissionUpsert {
	u.Add(promotioncommission.FieldSecondRenewAmountSum, v)
	return u
}

// SetDesc sets the "desc" field.
func (u *PromotionCommissionUpsert) SetDesc(v string) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldDesc, v)
	return u
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateDesc() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldDesc)
	return u
}

// ClearDesc clears the value of the "desc" field.
func (u *PromotionCommissionUpsert) ClearDesc() *PromotionCommissionUpsert {
	u.SetNull(promotioncommission.FieldDesc)
	return u
}

// SetHistoryID sets the "history_id" field.
func (u *PromotionCommissionUpsert) SetHistoryID(v []uint64) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldHistoryID, v)
	return u
}

// UpdateHistoryID sets the "history_id" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateHistoryID() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldHistoryID)
	return u
}

// ClearHistoryID clears the value of the "history_id" field.
func (u *PromotionCommissionUpsert) ClearHistoryID() *PromotionCommissionUpsert {
	u.SetNull(promotioncommission.FieldHistoryID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *PromotionCommissionUpsert) SetStartAt(v time.Time) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateStartAt() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldStartAt)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *PromotionCommissionUpsert) ClearStartAt() *PromotionCommissionUpsert {
	u.SetNull(promotioncommission.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *PromotionCommissionUpsert) SetEndAt(v time.Time) *PromotionCommissionUpsert {
	u.Set(promotioncommission.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsert) UpdateEndAt() *PromotionCommissionUpsert {
	u.SetExcluded(promotioncommission.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *PromotionCommissionUpsert) ClearEndAt() *PromotionCommissionUpsert {
	u.SetNull(promotioncommission.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionCommission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionCommissionUpsertOne) UpdateNewValues() *PromotionCommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotioncommission.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotioncommission.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionCommission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionCommissionUpsertOne) Ignore() *PromotionCommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionCommissionUpsertOne) DoNothing() *PromotionCommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionCommissionCreate.OnConflict
// documentation for more info.
func (u *PromotionCommissionUpsertOne) Update(set func(*PromotionCommissionUpsert)) *PromotionCommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionCommissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionCommissionUpsertOne) SetUpdatedAt(v time.Time) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateUpdatedAt() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionCommissionUpsertOne) SetDeletedAt(v time.Time) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateDeletedAt() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionCommissionUpsertOne) ClearDeletedAt() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionCommissionUpsertOne) SetLastModifier(v *model.Modifier) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateLastModifier() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionCommissionUpsertOne) ClearLastModifier() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionCommissionUpsertOne) SetRemark(v string) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateRemark() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionCommissionUpsertOne) ClearRemark() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearRemark()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionCommissionUpsertOne) SetMemberID(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateMemberID() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionCommissionUpsertOne) ClearMemberID() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearMemberID()
	})
}

// SetType sets the "type" field.
func (u *PromotionCommissionUpsertOne) SetType(v uint8) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PromotionCommissionUpsertOne) AddType(v uint8) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateType() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *PromotionCommissionUpsertOne) SetName(v string) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateName() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateName()
	})
}

// SetRule sets the "rule" field.
func (u *PromotionCommissionUpsertOne) SetRule(v *promotion.CommissionRule) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetRule(v)
	})
}

// UpdateRule sets the "rule" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateRule() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateRule()
	})
}

// SetEnable sets the "enable" field.
func (u *PromotionCommissionUpsertOne) SetEnable(v bool) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateEnable() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateEnable()
	})
}

// SetAmountSum sets the "amount_sum" field.
func (u *PromotionCommissionUpsertOne) SetAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetAmountSum(v)
	})
}

// AddAmountSum adds v to the "amount_sum" field.
func (u *PromotionCommissionUpsertOne) AddAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddAmountSum(v)
	})
}

// UpdateAmountSum sets the "amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateAmountSum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateAmountSum()
	})
}

// SetFirstNewNum sets the "first_new_num" field.
func (u *PromotionCommissionUpsertOne) SetFirstNewNum(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetFirstNewNum(v)
	})
}

// AddFirstNewNum adds v to the "first_new_num" field.
func (u *PromotionCommissionUpsertOne) AddFirstNewNum(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddFirstNewNum(v)
	})
}

// UpdateFirstNewNum sets the "first_new_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateFirstNewNum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateFirstNewNum()
	})
}

// SetSecondNewNum sets the "second_new_num" field.
func (u *PromotionCommissionUpsertOne) SetSecondNewNum(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetSecondNewNum(v)
	})
}

// AddSecondNewNum adds v to the "second_new_num" field.
func (u *PromotionCommissionUpsertOne) AddSecondNewNum(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddSecondNewNum(v)
	})
}

// UpdateSecondNewNum sets the "second_new_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateSecondNewNum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateSecondNewNum()
	})
}

// SetFirstRenewNum sets the "first_renew_num" field.
func (u *PromotionCommissionUpsertOne) SetFirstRenewNum(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetFirstRenewNum(v)
	})
}

// AddFirstRenewNum adds v to the "first_renew_num" field.
func (u *PromotionCommissionUpsertOne) AddFirstRenewNum(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddFirstRenewNum(v)
	})
}

// UpdateFirstRenewNum sets the "first_renew_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateFirstRenewNum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateFirstRenewNum()
	})
}

// SetSecondRenewNum sets the "second_renew_num" field.
func (u *PromotionCommissionUpsertOne) SetSecondRenewNum(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetSecondRenewNum(v)
	})
}

// AddSecondRenewNum adds v to the "second_renew_num" field.
func (u *PromotionCommissionUpsertOne) AddSecondRenewNum(v uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddSecondRenewNum(v)
	})
}

// UpdateSecondRenewNum sets the "second_renew_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateSecondRenewNum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateSecondRenewNum()
	})
}

// SetFirstNewAmountSum sets the "first_new_amount_sum" field.
func (u *PromotionCommissionUpsertOne) SetFirstNewAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetFirstNewAmountSum(v)
	})
}

// AddFirstNewAmountSum adds v to the "first_new_amount_sum" field.
func (u *PromotionCommissionUpsertOne) AddFirstNewAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddFirstNewAmountSum(v)
	})
}

// UpdateFirstNewAmountSum sets the "first_new_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateFirstNewAmountSum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateFirstNewAmountSum()
	})
}

// SetSecondNewAmountSum sets the "second_new_amount_sum" field.
func (u *PromotionCommissionUpsertOne) SetSecondNewAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetSecondNewAmountSum(v)
	})
}

// AddSecondNewAmountSum adds v to the "second_new_amount_sum" field.
func (u *PromotionCommissionUpsertOne) AddSecondNewAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddSecondNewAmountSum(v)
	})
}

// UpdateSecondNewAmountSum sets the "second_new_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateSecondNewAmountSum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateSecondNewAmountSum()
	})
}

// SetFirstRenewAmountSum sets the "first_renew_amount_sum" field.
func (u *PromotionCommissionUpsertOne) SetFirstRenewAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetFirstRenewAmountSum(v)
	})
}

// AddFirstRenewAmountSum adds v to the "first_renew_amount_sum" field.
func (u *PromotionCommissionUpsertOne) AddFirstRenewAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddFirstRenewAmountSum(v)
	})
}

// UpdateFirstRenewAmountSum sets the "first_renew_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateFirstRenewAmountSum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateFirstRenewAmountSum()
	})
}

// SetSecondRenewAmountSum sets the "second_renew_amount_sum" field.
func (u *PromotionCommissionUpsertOne) SetSecondRenewAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetSecondRenewAmountSum(v)
	})
}

// AddSecondRenewAmountSum adds v to the "second_renew_amount_sum" field.
func (u *PromotionCommissionUpsertOne) AddSecondRenewAmountSum(v float64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddSecondRenewAmountSum(v)
	})
}

// UpdateSecondRenewAmountSum sets the "second_renew_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateSecondRenewAmountSum() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateSecondRenewAmountSum()
	})
}

// SetDesc sets the "desc" field.
func (u *PromotionCommissionUpsertOne) SetDesc(v string) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateDesc() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *PromotionCommissionUpsertOne) ClearDesc() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearDesc()
	})
}

// SetHistoryID sets the "history_id" field.
func (u *PromotionCommissionUpsertOne) SetHistoryID(v []uint64) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetHistoryID(v)
	})
}

// UpdateHistoryID sets the "history_id" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateHistoryID() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateHistoryID()
	})
}

// ClearHistoryID clears the value of the "history_id" field.
func (u *PromotionCommissionUpsertOne) ClearHistoryID() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearHistoryID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *PromotionCommissionUpsertOne) SetStartAt(v time.Time) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateStartAt() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *PromotionCommissionUpsertOne) ClearStartAt() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *PromotionCommissionUpsertOne) SetEndAt(v time.Time) *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsertOne) UpdateEndAt() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *PromotionCommissionUpsertOne) ClearEndAt() *PromotionCommissionUpsertOne {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *PromotionCommissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionCommissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionCommissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionCommissionUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionCommissionUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionCommissionCreateBulk is the builder for creating many PromotionCommission entities in bulk.
type PromotionCommissionCreateBulk struct {
	config
	err      error
	builders []*PromotionCommissionCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionCommission entities in the database.
func (pccb *PromotionCommissionCreateBulk) Save(ctx context.Context) ([]*PromotionCommission, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PromotionCommission, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionCommissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PromotionCommissionCreateBulk) SaveX(ctx context.Context) []*PromotionCommission {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PromotionCommissionCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PromotionCommissionCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionCommission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionCommissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pccb *PromotionCommissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionCommissionUpsertBulk {
	pccb.conflict = opts
	return &PromotionCommissionUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionCommission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pccb *PromotionCommissionCreateBulk) OnConflictColumns(columns ...string) *PromotionCommissionUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &PromotionCommissionUpsertBulk{
		create: pccb,
	}
}

// PromotionCommissionUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionCommission nodes.
type PromotionCommissionUpsertBulk struct {
	create *PromotionCommissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionCommission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionCommissionUpsertBulk) UpdateNewValues() *PromotionCommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotioncommission.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotioncommission.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionCommission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionCommissionUpsertBulk) Ignore() *PromotionCommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionCommissionUpsertBulk) DoNothing() *PromotionCommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionCommissionCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionCommissionUpsertBulk) Update(set func(*PromotionCommissionUpsert)) *PromotionCommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionCommissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionCommissionUpsertBulk) SetUpdatedAt(v time.Time) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateUpdatedAt() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionCommissionUpsertBulk) SetDeletedAt(v time.Time) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateDeletedAt() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionCommissionUpsertBulk) ClearDeletedAt() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionCommissionUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateLastModifier() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionCommissionUpsertBulk) ClearLastModifier() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionCommissionUpsertBulk) SetRemark(v string) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateRemark() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionCommissionUpsertBulk) ClearRemark() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearRemark()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionCommissionUpsertBulk) SetMemberID(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateMemberID() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionCommissionUpsertBulk) ClearMemberID() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearMemberID()
	})
}

// SetType sets the "type" field.
func (u *PromotionCommissionUpsertBulk) SetType(v uint8) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PromotionCommissionUpsertBulk) AddType(v uint8) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateType() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *PromotionCommissionUpsertBulk) SetName(v string) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateName() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateName()
	})
}

// SetRule sets the "rule" field.
func (u *PromotionCommissionUpsertBulk) SetRule(v *promotion.CommissionRule) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetRule(v)
	})
}

// UpdateRule sets the "rule" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateRule() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateRule()
	})
}

// SetEnable sets the "enable" field.
func (u *PromotionCommissionUpsertBulk) SetEnable(v bool) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateEnable() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateEnable()
	})
}

// SetAmountSum sets the "amount_sum" field.
func (u *PromotionCommissionUpsertBulk) SetAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetAmountSum(v)
	})
}

// AddAmountSum adds v to the "amount_sum" field.
func (u *PromotionCommissionUpsertBulk) AddAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddAmountSum(v)
	})
}

// UpdateAmountSum sets the "amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateAmountSum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateAmountSum()
	})
}

// SetFirstNewNum sets the "first_new_num" field.
func (u *PromotionCommissionUpsertBulk) SetFirstNewNum(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetFirstNewNum(v)
	})
}

// AddFirstNewNum adds v to the "first_new_num" field.
func (u *PromotionCommissionUpsertBulk) AddFirstNewNum(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddFirstNewNum(v)
	})
}

// UpdateFirstNewNum sets the "first_new_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateFirstNewNum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateFirstNewNum()
	})
}

// SetSecondNewNum sets the "second_new_num" field.
func (u *PromotionCommissionUpsertBulk) SetSecondNewNum(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetSecondNewNum(v)
	})
}

// AddSecondNewNum adds v to the "second_new_num" field.
func (u *PromotionCommissionUpsertBulk) AddSecondNewNum(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddSecondNewNum(v)
	})
}

// UpdateSecondNewNum sets the "second_new_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateSecondNewNum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateSecondNewNum()
	})
}

// SetFirstRenewNum sets the "first_renew_num" field.
func (u *PromotionCommissionUpsertBulk) SetFirstRenewNum(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetFirstRenewNum(v)
	})
}

// AddFirstRenewNum adds v to the "first_renew_num" field.
func (u *PromotionCommissionUpsertBulk) AddFirstRenewNum(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddFirstRenewNum(v)
	})
}

// UpdateFirstRenewNum sets the "first_renew_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateFirstRenewNum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateFirstRenewNum()
	})
}

// SetSecondRenewNum sets the "second_renew_num" field.
func (u *PromotionCommissionUpsertBulk) SetSecondRenewNum(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetSecondRenewNum(v)
	})
}

// AddSecondRenewNum adds v to the "second_renew_num" field.
func (u *PromotionCommissionUpsertBulk) AddSecondRenewNum(v uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddSecondRenewNum(v)
	})
}

// UpdateSecondRenewNum sets the "second_renew_num" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateSecondRenewNum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateSecondRenewNum()
	})
}

// SetFirstNewAmountSum sets the "first_new_amount_sum" field.
func (u *PromotionCommissionUpsertBulk) SetFirstNewAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetFirstNewAmountSum(v)
	})
}

// AddFirstNewAmountSum adds v to the "first_new_amount_sum" field.
func (u *PromotionCommissionUpsertBulk) AddFirstNewAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddFirstNewAmountSum(v)
	})
}

// UpdateFirstNewAmountSum sets the "first_new_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateFirstNewAmountSum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateFirstNewAmountSum()
	})
}

// SetSecondNewAmountSum sets the "second_new_amount_sum" field.
func (u *PromotionCommissionUpsertBulk) SetSecondNewAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetSecondNewAmountSum(v)
	})
}

// AddSecondNewAmountSum adds v to the "second_new_amount_sum" field.
func (u *PromotionCommissionUpsertBulk) AddSecondNewAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddSecondNewAmountSum(v)
	})
}

// UpdateSecondNewAmountSum sets the "second_new_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateSecondNewAmountSum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateSecondNewAmountSum()
	})
}

// SetFirstRenewAmountSum sets the "first_renew_amount_sum" field.
func (u *PromotionCommissionUpsertBulk) SetFirstRenewAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetFirstRenewAmountSum(v)
	})
}

// AddFirstRenewAmountSum adds v to the "first_renew_amount_sum" field.
func (u *PromotionCommissionUpsertBulk) AddFirstRenewAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddFirstRenewAmountSum(v)
	})
}

// UpdateFirstRenewAmountSum sets the "first_renew_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateFirstRenewAmountSum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateFirstRenewAmountSum()
	})
}

// SetSecondRenewAmountSum sets the "second_renew_amount_sum" field.
func (u *PromotionCommissionUpsertBulk) SetSecondRenewAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetSecondRenewAmountSum(v)
	})
}

// AddSecondRenewAmountSum adds v to the "second_renew_amount_sum" field.
func (u *PromotionCommissionUpsertBulk) AddSecondRenewAmountSum(v float64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.AddSecondRenewAmountSum(v)
	})
}

// UpdateSecondRenewAmountSum sets the "second_renew_amount_sum" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateSecondRenewAmountSum() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateSecondRenewAmountSum()
	})
}

// SetDesc sets the "desc" field.
func (u *PromotionCommissionUpsertBulk) SetDesc(v string) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetDesc(v)
	})
}

// UpdateDesc sets the "desc" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateDesc() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateDesc()
	})
}

// ClearDesc clears the value of the "desc" field.
func (u *PromotionCommissionUpsertBulk) ClearDesc() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearDesc()
	})
}

// SetHistoryID sets the "history_id" field.
func (u *PromotionCommissionUpsertBulk) SetHistoryID(v []uint64) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetHistoryID(v)
	})
}

// UpdateHistoryID sets the "history_id" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateHistoryID() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateHistoryID()
	})
}

// ClearHistoryID clears the value of the "history_id" field.
func (u *PromotionCommissionUpsertBulk) ClearHistoryID() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearHistoryID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *PromotionCommissionUpsertBulk) SetStartAt(v time.Time) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateStartAt() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *PromotionCommissionUpsertBulk) ClearStartAt() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *PromotionCommissionUpsertBulk) SetEndAt(v time.Time) *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *PromotionCommissionUpsertBulk) UpdateEndAt() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *PromotionCommissionUpsertBulk) ClearEndAt() *PromotionCommissionUpsertBulk {
	return u.Update(func(s *PromotionCommissionUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *PromotionCommissionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionCommissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionCommissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionCommissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
