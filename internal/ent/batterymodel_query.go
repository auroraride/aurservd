// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryModelQuery is the builder for querying BatteryModel entities.
type BatteryModelQuery struct {
	config
	ctx          *QueryContext
	order        []batterymodel.OrderOption
	inters       []Interceptor
	predicates   []predicate.BatteryModel
	withCabinets *CabinetQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BatteryModelQuery builder.
func (bmq *BatteryModelQuery) Where(ps ...predicate.BatteryModel) *BatteryModelQuery {
	bmq.predicates = append(bmq.predicates, ps...)
	return bmq
}

// Limit the number of records to be returned by this query.
func (bmq *BatteryModelQuery) Limit(limit int) *BatteryModelQuery {
	bmq.ctx.Limit = &limit
	return bmq
}

// Offset to start from.
func (bmq *BatteryModelQuery) Offset(offset int) *BatteryModelQuery {
	bmq.ctx.Offset = &offset
	return bmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bmq *BatteryModelQuery) Unique(unique bool) *BatteryModelQuery {
	bmq.ctx.Unique = &unique
	return bmq
}

// Order specifies how the records should be ordered.
func (bmq *BatteryModelQuery) Order(o ...batterymodel.OrderOption) *BatteryModelQuery {
	bmq.order = append(bmq.order, o...)
	return bmq
}

// QueryCabinets chains the current query on the "cabinets" edge.
func (bmq *BatteryModelQuery) QueryCabinets() *CabinetQuery {
	query := (&CabinetClient{config: bmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(batterymodel.Table, batterymodel.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, batterymodel.CabinetsTable, batterymodel.CabinetsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(bmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BatteryModel entity from the query.
// Returns a *NotFoundError when no BatteryModel was found.
func (bmq *BatteryModelQuery) First(ctx context.Context) (*BatteryModel, error) {
	nodes, err := bmq.Limit(1).All(setContextOp(ctx, bmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{batterymodel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bmq *BatteryModelQuery) FirstX(ctx context.Context) *BatteryModel {
	node, err := bmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BatteryModel ID from the query.
// Returns a *NotFoundError when no BatteryModel ID was found.
func (bmq *BatteryModelQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bmq.Limit(1).IDs(setContextOp(ctx, bmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{batterymodel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bmq *BatteryModelQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := bmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BatteryModel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BatteryModel entity is found.
// Returns a *NotFoundError when no BatteryModel entities are found.
func (bmq *BatteryModelQuery) Only(ctx context.Context) (*BatteryModel, error) {
	nodes, err := bmq.Limit(2).All(setContextOp(ctx, bmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{batterymodel.Label}
	default:
		return nil, &NotSingularError{batterymodel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bmq *BatteryModelQuery) OnlyX(ctx context.Context) *BatteryModel {
	node, err := bmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BatteryModel ID in the query.
// Returns a *NotSingularError when more than one BatteryModel ID is found.
// Returns a *NotFoundError when no entities are found.
func (bmq *BatteryModelQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bmq.Limit(2).IDs(setContextOp(ctx, bmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{batterymodel.Label}
	default:
		err = &NotSingularError{batterymodel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bmq *BatteryModelQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := bmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BatteryModels.
func (bmq *BatteryModelQuery) All(ctx context.Context) ([]*BatteryModel, error) {
	ctx = setContextOp(ctx, bmq.ctx, ent.OpQueryAll)
	if err := bmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BatteryModel, *BatteryModelQuery]()
	return withInterceptors[[]*BatteryModel](ctx, bmq, qr, bmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bmq *BatteryModelQuery) AllX(ctx context.Context) []*BatteryModel {
	nodes, err := bmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BatteryModel IDs.
func (bmq *BatteryModelQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if bmq.ctx.Unique == nil && bmq.path != nil {
		bmq.Unique(true)
	}
	ctx = setContextOp(ctx, bmq.ctx, ent.OpQueryIDs)
	if err = bmq.Select(batterymodel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bmq *BatteryModelQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := bmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bmq *BatteryModelQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bmq.ctx, ent.OpQueryCount)
	if err := bmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bmq, querierCount[*BatteryModelQuery](), bmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bmq *BatteryModelQuery) CountX(ctx context.Context) int {
	count, err := bmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bmq *BatteryModelQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bmq.ctx, ent.OpQueryExist)
	switch _, err := bmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bmq *BatteryModelQuery) ExistX(ctx context.Context) bool {
	exist, err := bmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BatteryModelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bmq *BatteryModelQuery) Clone() *BatteryModelQuery {
	if bmq == nil {
		return nil
	}
	return &BatteryModelQuery{
		config:       bmq.config,
		ctx:          bmq.ctx.Clone(),
		order:        append([]batterymodel.OrderOption{}, bmq.order...),
		inters:       append([]Interceptor{}, bmq.inters...),
		predicates:   append([]predicate.BatteryModel{}, bmq.predicates...),
		withCabinets: bmq.withCabinets.Clone(),
		// clone intermediate query.
		sql:       bmq.sql.Clone(),
		path:      bmq.path,
		modifiers: append([]func(*sql.Selector){}, bmq.modifiers...),
	}
}

// WithCabinets tells the query-builder to eager-load the nodes that are connected to
// the "cabinets" edge. The optional arguments are used to configure the query builder of the edge.
func (bmq *BatteryModelQuery) WithCabinets(opts ...func(*CabinetQuery)) *BatteryModelQuery {
	query := (&CabinetClient{config: bmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bmq.withCabinets = query
	return bmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Model string `json:"model,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BatteryModel.Query().
//		GroupBy(batterymodel.FieldModel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bmq *BatteryModelQuery) GroupBy(field string, fields ...string) *BatteryModelGroupBy {
	bmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BatteryModelGroupBy{build: bmq}
	grbuild.flds = &bmq.ctx.Fields
	grbuild.label = batterymodel.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Model string `json:"model,omitempty"`
//	}
//
//	client.BatteryModel.Query().
//		Select(batterymodel.FieldModel).
//		Scan(ctx, &v)
func (bmq *BatteryModelQuery) Select(fields ...string) *BatteryModelSelect {
	bmq.ctx.Fields = append(bmq.ctx.Fields, fields...)
	sbuild := &BatteryModelSelect{BatteryModelQuery: bmq}
	sbuild.label = batterymodel.Label
	sbuild.flds, sbuild.scan = &bmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BatteryModelSelect configured with the given aggregations.
func (bmq *BatteryModelQuery) Aggregate(fns ...AggregateFunc) *BatteryModelSelect {
	return bmq.Select().Aggregate(fns...)
}

func (bmq *BatteryModelQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bmq); err != nil {
				return err
			}
		}
	}
	for _, f := range bmq.ctx.Fields {
		if !batterymodel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bmq.path != nil {
		prev, err := bmq.path(ctx)
		if err != nil {
			return err
		}
		bmq.sql = prev
	}
	return nil
}

func (bmq *BatteryModelQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BatteryModel, error) {
	var (
		nodes       = []*BatteryModel{}
		_spec       = bmq.querySpec()
		loadedTypes = [1]bool{
			bmq.withCabinets != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BatteryModel).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BatteryModel{config: bmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bmq.modifiers) > 0 {
		_spec.Modifiers = bmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bmq.withCabinets; query != nil {
		if err := bmq.loadCabinets(ctx, query, nodes,
			func(n *BatteryModel) { n.Edges.Cabinets = []*Cabinet{} },
			func(n *BatteryModel, e *Cabinet) { n.Edges.Cabinets = append(n.Edges.Cabinets, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bmq *BatteryModelQuery) loadCabinets(ctx context.Context, query *CabinetQuery, nodes []*BatteryModel, init func(*BatteryModel), assign func(*BatteryModel, *Cabinet)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*BatteryModel)
	nids := make(map[uint64]map[*BatteryModel]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(batterymodel.CabinetsTable)
		s.Join(joinT).On(s.C(cabinet.FieldID), joinT.C(batterymodel.CabinetsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(batterymodel.CabinetsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(batterymodel.CabinetsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*BatteryModel]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Cabinet](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "cabinets" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (bmq *BatteryModelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bmq.querySpec()
	if len(bmq.modifiers) > 0 {
		_spec.Modifiers = bmq.modifiers
	}
	_spec.Node.Columns = bmq.ctx.Fields
	if len(bmq.ctx.Fields) > 0 {
		_spec.Unique = bmq.ctx.Unique != nil && *bmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bmq.driver, _spec)
}

func (bmq *BatteryModelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(batterymodel.Table, batterymodel.Columns, sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64))
	_spec.From = bmq.sql
	if unique := bmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bmq.path != nil {
		_spec.Unique = true
	}
	if fields := bmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batterymodel.FieldID)
		for i := range fields {
			if fields[i] != batterymodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bmq *BatteryModelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bmq.driver.Dialect())
	t1 := builder.Table(batterymodel.Table)
	columns := bmq.ctx.Fields
	if len(columns) == 0 {
		columns = batterymodel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bmq.sql != nil {
		selector = bmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bmq.ctx.Unique != nil && *bmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range bmq.modifiers {
		m(selector)
	}
	for _, p := range bmq.predicates {
		p(selector)
	}
	for _, p := range bmq.order {
		p(selector)
	}
	if offset := bmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bmq *BatteryModelQuery) Modify(modifiers ...func(s *sql.Selector)) *BatteryModelSelect {
	bmq.modifiers = append(bmq.modifiers, modifiers...)
	return bmq.Select()
}

type BatteryModelQueryWith string

var (
	BatteryModelQueryWithCabinets BatteryModelQueryWith = "Cabinets"
)

func (bmq *BatteryModelQuery) With(withEdges ...BatteryModelQueryWith) *BatteryModelQuery {
	for _, v := range withEdges {
		switch v {
		case BatteryModelQueryWithCabinets:
			bmq.WithCabinets()
		}
	}
	return bmq
}

// BatteryModelGroupBy is the group-by builder for BatteryModel entities.
type BatteryModelGroupBy struct {
	selector
	build *BatteryModelQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bmgb *BatteryModelGroupBy) Aggregate(fns ...AggregateFunc) *BatteryModelGroupBy {
	bmgb.fns = append(bmgb.fns, fns...)
	return bmgb
}

// Scan applies the selector query and scans the result into the given value.
func (bmgb *BatteryModelGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bmgb.build.ctx, ent.OpQueryGroupBy)
	if err := bmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BatteryModelQuery, *BatteryModelGroupBy](ctx, bmgb.build, bmgb, bmgb.build.inters, v)
}

func (bmgb *BatteryModelGroupBy) sqlScan(ctx context.Context, root *BatteryModelQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bmgb.fns))
	for _, fn := range bmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bmgb.flds)+len(bmgb.fns))
		for _, f := range *bmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BatteryModelSelect is the builder for selecting fields of BatteryModel entities.
type BatteryModelSelect struct {
	*BatteryModelQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bms *BatteryModelSelect) Aggregate(fns ...AggregateFunc) *BatteryModelSelect {
	bms.fns = append(bms.fns, fns...)
	return bms
}

// Scan applies the selector query and scans the result into the given value.
func (bms *BatteryModelSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bms.ctx, ent.OpQuerySelect)
	if err := bms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BatteryModelQuery, *BatteryModelSelect](ctx, bms.BatteryModelQuery, bms, bms.inters, v)
}

func (bms *BatteryModelSelect) sqlScan(ctx context.Context, root *BatteryModelQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bms.fns))
	for _, fn := range bms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bms *BatteryModelSelect) Modify(modifiers ...func(s *sql.Selector)) *BatteryModelSelect {
	bms.modifiers = append(bms.modifiers, modifiers...)
	return bms
}
