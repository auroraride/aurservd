// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseinvoice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// EnterpriseInvoice is the model entity for the EnterpriseInvoice schema.
type EnterpriseInvoice struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// StationID holds the value of the "station_id" field.
	// 站点ID
	StationID uint64 `json:"station_id,omitempty"`
	// EnterpriseID holds the value of the "enterprise_id" field.
	// 企业ID
	EnterpriseID uint64 `json:"enterprise_id,omitempty"`
	// RiderID holds the value of the "rider_id" field.
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// Price holds the value of the "price" field.
	// 单价
	Price float64 `json:"price,omitempty"`
	// StatementID holds the value of the "statement_id" field.
	// 团签结账对账单ID
	StatementID uint64 `json:"statement_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterpriseInvoiceQuery when eager-loading is set.
	Edges EnterpriseInvoiceEdges `json:"edges"`
}

// EnterpriseInvoiceEdges holds the relations/edges for other nodes in the graph.
type EnterpriseInvoiceEdges struct {
	// Station holds the value of the station edge.
	Station *EnterpriseStation `json:"station,omitempty"`
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Statement holds the value of the statement edge.
	Statement *EnterpriseStatement `json:"statement,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseInvoiceEdges) StationOrErr() (*EnterpriseStation, error) {
	if e.loadedTypes[0] {
		if e.Station == nil {
			// The edge station was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enterprisestation.Label}
		}
		return e.Station, nil
	}
	return nil, &NotLoadedError{edge: "station"}
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseInvoiceEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[1] {
		if e.Enterprise == nil {
			// The edge enterprise was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseInvoiceEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[2] {
		if e.Rider == nil {
			// The edge rider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// StatementOrErr returns the Statement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseInvoiceEdges) StatementOrErr() (*EnterpriseStatement, error) {
	if e.loadedTypes[3] {
		if e.Statement == nil {
			// The edge statement was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: enterprisestatement.Label}
		}
		return e.Statement, nil
	}
	return nil, &NotLoadedError{edge: "statement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnterpriseInvoice) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterpriseinvoice.FieldCreator, enterpriseinvoice.FieldLastModifier:
			values[i] = new([]byte)
		case enterpriseinvoice.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case enterpriseinvoice.FieldID, enterpriseinvoice.FieldStationID, enterpriseinvoice.FieldEnterpriseID, enterpriseinvoice.FieldRiderID, enterpriseinvoice.FieldStatementID:
			values[i] = new(sql.NullInt64)
		case enterpriseinvoice.FieldRemark:
			values[i] = new(sql.NullString)
		case enterpriseinvoice.FieldCreatedAt, enterpriseinvoice.FieldUpdatedAt, enterpriseinvoice.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EnterpriseInvoice", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnterpriseInvoice fields.
func (ei *EnterpriseInvoice) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterpriseinvoice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ei.ID = uint64(value.Int64)
		case enterpriseinvoice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ei.CreatedAt = value.Time
			}
		case enterpriseinvoice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ei.UpdatedAt = value.Time
			}
		case enterpriseinvoice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ei.DeletedAt = new(time.Time)
				*ei.DeletedAt = value.Time
			}
		case enterpriseinvoice.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ei.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterpriseinvoice.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ei.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterpriseinvoice.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ei.Remark = value.String
			}
		case enterpriseinvoice.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				ei.StationID = uint64(value.Int64)
			}
		case enterpriseinvoice.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				ei.EnterpriseID = uint64(value.Int64)
			}
		case enterpriseinvoice.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				ei.RiderID = uint64(value.Int64)
			}
		case enterpriseinvoice.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ei.Price = value.Float64
			}
		case enterpriseinvoice.FieldStatementID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field statement_id", values[i])
			} else if value.Valid {
				ei.StatementID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryStation queries the "station" edge of the EnterpriseInvoice entity.
func (ei *EnterpriseInvoice) QueryStation() *EnterpriseStationQuery {
	return (&EnterpriseInvoiceClient{config: ei.config}).QueryStation(ei)
}

// QueryEnterprise queries the "enterprise" edge of the EnterpriseInvoice entity.
func (ei *EnterpriseInvoice) QueryEnterprise() *EnterpriseQuery {
	return (&EnterpriseInvoiceClient{config: ei.config}).QueryEnterprise(ei)
}

// QueryRider queries the "rider" edge of the EnterpriseInvoice entity.
func (ei *EnterpriseInvoice) QueryRider() *RiderQuery {
	return (&EnterpriseInvoiceClient{config: ei.config}).QueryRider(ei)
}

// QueryStatement queries the "statement" edge of the EnterpriseInvoice entity.
func (ei *EnterpriseInvoice) QueryStatement() *EnterpriseStatementQuery {
	return (&EnterpriseInvoiceClient{config: ei.config}).QueryStatement(ei)
}

// Update returns a builder for updating this EnterpriseInvoice.
// Note that you need to call EnterpriseInvoice.Unwrap() before calling this method if this EnterpriseInvoice
// was returned from a transaction, and the transaction was committed or rolled back.
func (ei *EnterpriseInvoice) Update() *EnterpriseInvoiceUpdateOne {
	return (&EnterpriseInvoiceClient{config: ei.config}).UpdateOne(ei)
}

// Unwrap unwraps the EnterpriseInvoice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ei *EnterpriseInvoice) Unwrap() *EnterpriseInvoice {
	tx, ok := ei.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnterpriseInvoice is not a transactional entity")
	}
	ei.config.driver = tx.drv
	return ei
}

// String implements the fmt.Stringer.
func (ei *EnterpriseInvoice) String() string {
	var builder strings.Builder
	builder.WriteString("EnterpriseInvoice(")
	builder.WriteString(fmt.Sprintf("id=%v", ei.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ei.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ei.UpdatedAt.Format(time.ANSIC))
	if v := ei.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", ei.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ei.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(ei.Remark)
	builder.WriteString(", station_id=")
	builder.WriteString(fmt.Sprintf("%v", ei.StationID))
	builder.WriteString(", enterprise_id=")
	builder.WriteString(fmt.Sprintf("%v", ei.EnterpriseID))
	builder.WriteString(", rider_id=")
	builder.WriteString(fmt.Sprintf("%v", ei.RiderID))
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", ei.Price))
	builder.WriteString(", statement_id=")
	builder.WriteString(fmt.Sprintf("%v", ei.StatementID))
	builder.WriteByte(')')
	return builder.String()
}

// EnterpriseInvoices is a parsable slice of EnterpriseInvoice.
type EnterpriseInvoices []*EnterpriseInvoice

func (ei EnterpriseInvoices) config(cfg config) {
	for _i := range ei {
		ei[_i].config = cfg
	}
}
