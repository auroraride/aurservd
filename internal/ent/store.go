// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
)

// Store is the model entity for the Store schema.
type Store struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// 城市ID
	GroupID *uint64 `json:"group_id,omitempty"`
	// 上班员工ID
	EmployeeID *uint64 `json:"employee_id,omitempty"`
	// 网点ID
	BranchID uint64 `json:"branch_id,omitempty"`
	// 门店编号
	Sn string `json:"sn,omitempty"`
	// 门店名称
	Name string `json:"name,omitempty"`
	// 门店状态 0维护 1营业 2休息 3隐藏
	Status uint8 `json:"status,omitempty"`
	// 经度
	Lng float64 `json:"lng,omitempty"`
	// 纬度
	Lat float64 `json:"lat,omitempty"`
	// 详细地址
	Address string `json:"address,omitempty"`
	// 是否可以领取车辆(租车)
	EbikeObtain bool `json:"ebike_obtain,omitempty"`
	// 是否可以维修车辆
	EbikeRepair bool `json:"ebike_repair,omitempty"`
	// 是否可以购买车辆
	EbikeSale bool `json:"ebike_sale,omitempty"`
	// 是否拥有驿站
	Rest bool `json:"rest,omitempty"`
	// 营业时间
	BusinessHours string `json:"business_hours,omitempty"`
	// 门店照片
	Photos []string `json:"photos,omitempty"`
	// 门店电话
	Phone string `json:"phone,omitempty"`
	// 门店头图
	HeadPic string `json:"head_pic,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StoreQuery when eager-loading is set.
	Edges        StoreEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StoreEdges holds the relations/edges for other nodes in the graph.
type StoreEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Group holds the value of the group edge.
	Group *StoreGroup `json:"group,omitempty"`
	// Branch holds the value of the branch edge.
	Branch *Branch `json:"branch,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// Asset holds the value of the asset edge.
	Asset []*Asset `json:"asset,omitempty"`
	// Attendances holds the value of the attendances edge.
	Attendances []*Attendance `json:"attendances,omitempty"`
	// Exceptions holds the value of the exceptions edge.
	Exceptions []*Exception `json:"exceptions,omitempty"`
	// Goods holds the value of the goods edge.
	Goods []*StoreGoods `json:"goods,omitempty"`
	// Employees holds the value of the employees edge.
	Employees []*Employee `json:"employees,omitempty"`
	// DutyEmployees holds the value of the duty_employees edge.
	DutyEmployees []*Employee `json:"duty_employees,omitempty"`
	// Stocks holds the value of the stocks edge.
	Stocks []*Stock `json:"stocks,omitempty"`
	// RentAsset holds the value of the rent_asset edge.
	RentAsset []*Asset `json:"rent_asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [12]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoreEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoreEdges) GroupOrErr() (*StoreGroup, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: storegroup.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// BranchOrErr returns the Branch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoreEdges) BranchOrErr() (*Branch, error) {
	if e.Branch != nil {
		return e.Branch, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: branch.Label}
	}
	return nil, &NotLoadedError{edge: "branch"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StoreEdges) EmployeeOrErr() (*Employee, error) {
	if e.Employee != nil {
		return e.Employee, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: employee.Label}
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) AssetOrErr() ([]*Asset, error) {
	if e.loadedTypes[4] {
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// AttendancesOrErr returns the Attendances value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) AttendancesOrErr() ([]*Attendance, error) {
	if e.loadedTypes[5] {
		return e.Attendances, nil
	}
	return nil, &NotLoadedError{edge: "attendances"}
}

// ExceptionsOrErr returns the Exceptions value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) ExceptionsOrErr() ([]*Exception, error) {
	if e.loadedTypes[6] {
		return e.Exceptions, nil
	}
	return nil, &NotLoadedError{edge: "exceptions"}
}

// GoodsOrErr returns the Goods value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) GoodsOrErr() ([]*StoreGoods, error) {
	if e.loadedTypes[7] {
		return e.Goods, nil
	}
	return nil, &NotLoadedError{edge: "goods"}
}

// EmployeesOrErr returns the Employees value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) EmployeesOrErr() ([]*Employee, error) {
	if e.loadedTypes[8] {
		return e.Employees, nil
	}
	return nil, &NotLoadedError{edge: "employees"}
}

// DutyEmployeesOrErr returns the DutyEmployees value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) DutyEmployeesOrErr() ([]*Employee, error) {
	if e.loadedTypes[9] {
		return e.DutyEmployees, nil
	}
	return nil, &NotLoadedError{edge: "duty_employees"}
}

// StocksOrErr returns the Stocks value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) StocksOrErr() ([]*Stock, error) {
	if e.loadedTypes[10] {
		return e.Stocks, nil
	}
	return nil, &NotLoadedError{edge: "stocks"}
}

// RentAssetOrErr returns the RentAsset value or an error if the edge
// was not loaded in eager-loading.
func (e StoreEdges) RentAssetOrErr() ([]*Asset, error) {
	if e.loadedTypes[11] {
		return e.RentAsset, nil
	}
	return nil, &NotLoadedError{edge: "rent_asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Store) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case store.FieldCreator, store.FieldLastModifier, store.FieldPhotos:
			values[i] = new([]byte)
		case store.FieldEbikeObtain, store.FieldEbikeRepair, store.FieldEbikeSale, store.FieldRest:
			values[i] = new(sql.NullBool)
		case store.FieldLng, store.FieldLat:
			values[i] = new(sql.NullFloat64)
		case store.FieldID, store.FieldCityID, store.FieldGroupID, store.FieldEmployeeID, store.FieldBranchID, store.FieldStatus:
			values[i] = new(sql.NullInt64)
		case store.FieldRemark, store.FieldSn, store.FieldName, store.FieldAddress, store.FieldBusinessHours, store.FieldPhone, store.FieldHeadPic:
			values[i] = new(sql.NullString)
		case store.FieldCreatedAt, store.FieldUpdatedAt, store.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Store fields.
func (s *Store) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case store.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case store.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case store.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case store.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case store.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case store.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case store.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				s.Remark = value.String
			}
		case store.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				s.CityID = uint64(value.Int64)
			}
		case store.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				s.GroupID = new(uint64)
				*s.GroupID = uint64(value.Int64)
			}
		case store.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				s.EmployeeID = new(uint64)
				*s.EmployeeID = uint64(value.Int64)
			}
		case store.FieldBranchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field branch_id", values[i])
			} else if value.Valid {
				s.BranchID = uint64(value.Int64)
			}
		case store.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				s.Sn = value.String
			}
		case store.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case store.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = uint8(value.Int64)
			}
		case store.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				s.Lng = value.Float64
			}
		case store.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				s.Lat = value.Float64
			}
		case store.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				s.Address = value.String
			}
		case store.FieldEbikeObtain:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ebike_obtain", values[i])
			} else if value.Valid {
				s.EbikeObtain = value.Bool
			}
		case store.FieldEbikeRepair:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ebike_repair", values[i])
			} else if value.Valid {
				s.EbikeRepair = value.Bool
			}
		case store.FieldEbikeSale:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field ebike_sale", values[i])
			} else if value.Valid {
				s.EbikeSale = value.Bool
			}
		case store.FieldRest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field rest", values[i])
			} else if value.Valid {
				s.Rest = value.Bool
			}
		case store.FieldBusinessHours:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field business_hours", values[i])
			} else if value.Valid {
				s.BusinessHours = value.String
			}
		case store.FieldPhotos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Photos); err != nil {
					return fmt.Errorf("unmarshal field photos: %w", err)
				}
			}
		case store.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				s.Phone = value.String
			}
		case store.FieldHeadPic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field head_pic", values[i])
			} else if value.Valid {
				s.HeadPic = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Store.
// This includes values selected through modifiers, order, etc.
func (s *Store) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryCity queries the "city" edge of the Store entity.
func (s *Store) QueryCity() *CityQuery {
	return NewStoreClient(s.config).QueryCity(s)
}

// QueryGroup queries the "group" edge of the Store entity.
func (s *Store) QueryGroup() *StoreGroupQuery {
	return NewStoreClient(s.config).QueryGroup(s)
}

// QueryBranch queries the "branch" edge of the Store entity.
func (s *Store) QueryBranch() *BranchQuery {
	return NewStoreClient(s.config).QueryBranch(s)
}

// QueryEmployee queries the "employee" edge of the Store entity.
func (s *Store) QueryEmployee() *EmployeeQuery {
	return NewStoreClient(s.config).QueryEmployee(s)
}

// QueryAsset queries the "asset" edge of the Store entity.
func (s *Store) QueryAsset() *AssetQuery {
	return NewStoreClient(s.config).QueryAsset(s)
}

// QueryAttendances queries the "attendances" edge of the Store entity.
func (s *Store) QueryAttendances() *AttendanceQuery {
	return NewStoreClient(s.config).QueryAttendances(s)
}

// QueryExceptions queries the "exceptions" edge of the Store entity.
func (s *Store) QueryExceptions() *ExceptionQuery {
	return NewStoreClient(s.config).QueryExceptions(s)
}

// QueryGoods queries the "goods" edge of the Store entity.
func (s *Store) QueryGoods() *StoreGoodsQuery {
	return NewStoreClient(s.config).QueryGoods(s)
}

// QueryEmployees queries the "employees" edge of the Store entity.
func (s *Store) QueryEmployees() *EmployeeQuery {
	return NewStoreClient(s.config).QueryEmployees(s)
}

// QueryDutyEmployees queries the "duty_employees" edge of the Store entity.
func (s *Store) QueryDutyEmployees() *EmployeeQuery {
	return NewStoreClient(s.config).QueryDutyEmployees(s)
}

// QueryStocks queries the "stocks" edge of the Store entity.
func (s *Store) QueryStocks() *StockQuery {
	return NewStoreClient(s.config).QueryStocks(s)
}

// QueryRentAsset queries the "rent_asset" edge of the Store entity.
func (s *Store) QueryRentAsset() *AssetQuery {
	return NewStoreClient(s.config).QueryRentAsset(s)
}

// Update returns a builder for updating this Store.
// Note that you need to call Store.Unwrap() before calling this method if this Store
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Store) Update() *StoreUpdateOne {
	return NewStoreClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Store entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Store) Unwrap() *Store {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Store is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Store) String() string {
	var builder strings.Builder
	builder.WriteString("Store(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", s.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", s.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(s.Remark)
	builder.WriteString(", ")
	builder.WriteString("city_id=")
	builder.WriteString(fmt.Sprintf("%v", s.CityID))
	builder.WriteString(", ")
	if v := s.GroupID; v != nil {
		builder.WriteString("group_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.EmployeeID; v != nil {
		builder.WriteString("employee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("branch_id=")
	builder.WriteString(fmt.Sprintf("%v", s.BranchID))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(s.Sn)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("lng=")
	builder.WriteString(fmt.Sprintf("%v", s.Lng))
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", s.Lat))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(s.Address)
	builder.WriteString(", ")
	builder.WriteString("ebike_obtain=")
	builder.WriteString(fmt.Sprintf("%v", s.EbikeObtain))
	builder.WriteString(", ")
	builder.WriteString("ebike_repair=")
	builder.WriteString(fmt.Sprintf("%v", s.EbikeRepair))
	builder.WriteString(", ")
	builder.WriteString("ebike_sale=")
	builder.WriteString(fmt.Sprintf("%v", s.EbikeSale))
	builder.WriteString(", ")
	builder.WriteString("rest=")
	builder.WriteString(fmt.Sprintf("%v", s.Rest))
	builder.WriteString(", ")
	builder.WriteString("business_hours=")
	builder.WriteString(s.BusinessHours)
	builder.WriteString(", ")
	builder.WriteString("photos=")
	builder.WriteString(fmt.Sprintf("%v", s.Photos))
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(s.Phone)
	builder.WriteString(", ")
	builder.WriteString("head_pic=")
	builder.WriteString(s.HeadPic)
	builder.WriteByte(')')
	return builder.String()
}

// Stores is a parsable slice of Store.
type Stores []*Store
