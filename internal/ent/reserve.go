// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/reserve"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// Reserve is the model entity for the Reserve schema.
type Reserve struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// CabinetID holds the value of the "cabinet_id" field.
	// 电柜ID
	CabinetID uint64 `json:"cabinet_id,omitempty"`
	// RiderID holds the value of the "rider_id" field.
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// BusinessID holds the value of the "business_id" field.
	BusinessID *uint64 `json:"business_id,omitempty"`
	// Status holds the value of the "status" field.
	// 预约状态
	Status uint8 `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	// 业务类型
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReserveQuery when eager-loading is set.
	Edges ReserveEdges `json:"edges"`
}

// ReserveEdges holds the relations/edges for other nodes in the graph.
type ReserveEdges struct {
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Business holds the value of the business edge.
	Business *Business `json:"business,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReserveEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[0] {
		if e.Cabinet == nil {
			// The edge cabinet was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReserveEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[1] {
		if e.Rider == nil {
			// The edge rider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// BusinessOrErr returns the Business value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReserveEdges) BusinessOrErr() (*Business, error) {
	if e.loadedTypes[2] {
		if e.Business == nil {
			// The edge business was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: business.Label}
		}
		return e.Business, nil
	}
	return nil, &NotLoadedError{edge: "business"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reserve) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case reserve.FieldCreator, reserve.FieldLastModifier:
			values[i] = new([]byte)
		case reserve.FieldID, reserve.FieldCabinetID, reserve.FieldRiderID, reserve.FieldBusinessID, reserve.FieldStatus:
			values[i] = new(sql.NullInt64)
		case reserve.FieldRemark, reserve.FieldType:
			values[i] = new(sql.NullString)
		case reserve.FieldCreatedAt, reserve.FieldUpdatedAt, reserve.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Reserve", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reserve fields.
func (r *Reserve) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reserve.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = uint64(value.Int64)
		case reserve.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case reserve.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case reserve.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = new(time.Time)
				*r.DeletedAt = value.Time
			}
		case reserve.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case reserve.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case reserve.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				r.Remark = value.String
			}
		case reserve.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				r.CabinetID = uint64(value.Int64)
			}
		case reserve.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				r.RiderID = uint64(value.Int64)
			}
		case reserve.FieldBusinessID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field business_id", values[i])
			} else if value.Valid {
				r.BusinessID = new(uint64)
				*r.BusinessID = uint64(value.Int64)
			}
		case reserve.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = uint8(value.Int64)
			}
		case reserve.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = value.String
			}
		}
	}
	return nil
}

// QueryCabinet queries the "cabinet" edge of the Reserve entity.
func (r *Reserve) QueryCabinet() *CabinetQuery {
	return (&ReserveClient{config: r.config}).QueryCabinet(r)
}

// QueryRider queries the "rider" edge of the Reserve entity.
func (r *Reserve) QueryRider() *RiderQuery {
	return (&ReserveClient{config: r.config}).QueryRider(r)
}

// QueryBusiness queries the "business" edge of the Reserve entity.
func (r *Reserve) QueryBusiness() *BusinessQuery {
	return (&ReserveClient{config: r.config}).QueryBusiness(r)
}

// Update returns a builder for updating this Reserve.
// Note that you need to call Reserve.Unwrap() before calling this method if this Reserve
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reserve) Update() *ReserveUpdateOne {
	return (&ReserveClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Reserve entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reserve) Unwrap() *Reserve {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reserve is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reserve) String() string {
	var builder strings.Builder
	builder.WriteString("Reserve(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	if v := r.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", r.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", r.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(r.Remark)
	builder.WriteString(", cabinet_id=")
	builder.WriteString(fmt.Sprintf("%v", r.CabinetID))
	builder.WriteString(", rider_id=")
	builder.WriteString(fmt.Sprintf("%v", r.RiderID))
	if v := r.BusinessID; v != nil {
		builder.WriteString(", business_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", type=")
	builder.WriteString(r.Type)
	builder.WriteByte(')')
	return builder.String()
}

// Reserves is a parsable slice of Reserve.
type Reserves []*Reserve

func (r Reserves) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
