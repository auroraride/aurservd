// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// RiderQuery is the builder for querying Rider entities.
type RiderQuery struct {
	config
	limit          *int
	offset         *int
	unique         *bool
	order          []OrderFunc
	fields         []string
	inters         []Interceptor
	predicates     []predicate.Rider
	withStation    *EnterpriseStationQuery
	withPerson     *PersonQuery
	withEnterprise *EnterpriseQuery
	withContracts  *ContractQuery
	withFaults     *CabinetFaultQuery
	withOrders     *OrderQuery
	withExchanges  *ExchangeQuery
	withSubscribes *SubscribeQuery
	withStocks     *StockQuery
	withFollowups  *RiderFollowUpQuery
	withBattery    *BatteryQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RiderQuery builder.
func (rq *RiderQuery) Where(ps ...predicate.Rider) *RiderQuery {
	rq.predicates = append(rq.predicates, ps...)
	return rq
}

// Limit the number of records to be returned by this query.
func (rq *RiderQuery) Limit(limit int) *RiderQuery {
	rq.limit = &limit
	return rq
}

// Offset to start from.
func (rq *RiderQuery) Offset(offset int) *RiderQuery {
	rq.offset = &offset
	return rq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rq *RiderQuery) Unique(unique bool) *RiderQuery {
	rq.unique = &unique
	return rq
}

// Order specifies how the records should be ordered.
func (rq *RiderQuery) Order(o ...OrderFunc) *RiderQuery {
	rq.order = append(rq.order, o...)
	return rq
}

// QueryStation chains the current query on the "station" edge.
func (rq *RiderQuery) QueryStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rider.StationTable, rider.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPerson chains the current query on the "person" edge.
func (rq *RiderQuery) QueryPerson() *PersonQuery {
	query := (&PersonClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rider.PersonTable, rider.PersonColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (rq *RiderQuery) QueryEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rider.EnterpriseTable, rider.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContracts chains the current query on the "contracts" edge.
func (rq *RiderQuery) QueryContracts() *ContractQuery {
	query := (&ContractClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.ContractsTable, rider.ContractsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFaults chains the current query on the "faults" edge.
func (rq *RiderQuery) QueryFaults() *CabinetFaultQuery {
	query := (&CabinetFaultClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(cabinetfault.Table, cabinetfault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.FaultsTable, rider.FaultsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (rq *RiderQuery) QueryOrders() *OrderQuery {
	query := (&OrderClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.OrdersTable, rider.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExchanges chains the current query on the "exchanges" edge.
func (rq *RiderQuery) QueryExchanges() *ExchangeQuery {
	query := (&ExchangeClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.ExchangesTable, rider.ExchangesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribes chains the current query on the "subscribes" edge.
func (rq *RiderQuery) QuerySubscribes() *SubscribeQuery {
	query := (&SubscribeClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.SubscribesTable, rider.SubscribesColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStocks chains the current query on the "stocks" edge.
func (rq *RiderQuery) QueryStocks() *StockQuery {
	query := (&StockClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.StocksTable, rider.StocksColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowups chains the current query on the "followups" edge.
func (rq *RiderQuery) QueryFollowups() *RiderFollowUpQuery {
	query := (&RiderFollowUpClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(riderfollowup.Table, riderfollowup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.FollowupsTable, rider.FollowupsColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBattery chains the current query on the "battery" edge.
func (rq *RiderQuery) QueryBattery() *BatteryQuery {
	query := (&BatteryClient{config: rq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, selector),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, rider.BatteryTable, rider.BatteryColumn),
		)
		fromU = sqlgraph.SetNeighbors(rq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Rider entity from the query.
// Returns a *NotFoundError when no Rider was found.
func (rq *RiderQuery) First(ctx context.Context) (*Rider, error) {
	nodes, err := rq.Limit(1).All(newQueryContext(ctx, TypeRider, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{rider.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rq *RiderQuery) FirstX(ctx context.Context) *Rider {
	node, err := rq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Rider ID from the query.
// Returns a *NotFoundError when no Rider ID was found.
func (rq *RiderQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = rq.Limit(1).IDs(newQueryContext(ctx, TypeRider, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{rider.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rq *RiderQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := rq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Rider entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Rider entity is found.
// Returns a *NotFoundError when no Rider entities are found.
func (rq *RiderQuery) Only(ctx context.Context) (*Rider, error) {
	nodes, err := rq.Limit(2).All(newQueryContext(ctx, TypeRider, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{rider.Label}
	default:
		return nil, &NotSingularError{rider.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rq *RiderQuery) OnlyX(ctx context.Context) *Rider {
	node, err := rq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Rider ID in the query.
// Returns a *NotSingularError when more than one Rider ID is found.
// Returns a *NotFoundError when no entities are found.
func (rq *RiderQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = rq.Limit(2).IDs(newQueryContext(ctx, TypeRider, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{rider.Label}
	default:
		err = &NotSingularError{rider.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rq *RiderQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := rq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Riders.
func (rq *RiderQuery) All(ctx context.Context) ([]*Rider, error) {
	ctx = newQueryContext(ctx, TypeRider, "All")
	if err := rq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Rider, *RiderQuery]()
	return withInterceptors[[]*Rider](ctx, rq, qr, rq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rq *RiderQuery) AllX(ctx context.Context) []*Rider {
	nodes, err := rq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Rider IDs.
func (rq *RiderQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	ctx = newQueryContext(ctx, TypeRider, "IDs")
	if err := rq.Select(rider.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rq *RiderQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := rq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rq *RiderQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeRider, "Count")
	if err := rq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rq, querierCount[*RiderQuery](), rq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rq *RiderQuery) CountX(ctx context.Context) int {
	count, err := rq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rq *RiderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeRider, "Exist")
	switch _, err := rq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rq *RiderQuery) ExistX(ctx context.Context) bool {
	exist, err := rq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RiderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rq *RiderQuery) Clone() *RiderQuery {
	if rq == nil {
		return nil
	}
	return &RiderQuery{
		config:         rq.config,
		limit:          rq.limit,
		offset:         rq.offset,
		order:          append([]OrderFunc{}, rq.order...),
		predicates:     append([]predicate.Rider{}, rq.predicates...),
		withStation:    rq.withStation.Clone(),
		withPerson:     rq.withPerson.Clone(),
		withEnterprise: rq.withEnterprise.Clone(),
		withContracts:  rq.withContracts.Clone(),
		withFaults:     rq.withFaults.Clone(),
		withOrders:     rq.withOrders.Clone(),
		withExchanges:  rq.withExchanges.Clone(),
		withSubscribes: rq.withSubscribes.Clone(),
		withStocks:     rq.withStocks.Clone(),
		withFollowups:  rq.withFollowups.Clone(),
		withBattery:    rq.withBattery.Clone(),
		// clone intermediate query.
		sql:    rq.sql.Clone(),
		path:   rq.path,
		unique: rq.unique,
	}
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithStation(opts ...func(*EnterpriseStationQuery)) *RiderQuery {
	query := (&EnterpriseStationClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withStation = query
	return rq
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithPerson(opts ...func(*PersonQuery)) *RiderQuery {
	query := (&PersonClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withPerson = query
	return rq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *RiderQuery {
	query := (&EnterpriseClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withEnterprise = query
	return rq
}

// WithContracts tells the query-builder to eager-load the nodes that are connected to
// the "contracts" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithContracts(opts ...func(*ContractQuery)) *RiderQuery {
	query := (&ContractClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withContracts = query
	return rq
}

// WithFaults tells the query-builder to eager-load the nodes that are connected to
// the "faults" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithFaults(opts ...func(*CabinetFaultQuery)) *RiderQuery {
	query := (&CabinetFaultClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withFaults = query
	return rq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithOrders(opts ...func(*OrderQuery)) *RiderQuery {
	query := (&OrderClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withOrders = query
	return rq
}

// WithExchanges tells the query-builder to eager-load the nodes that are connected to
// the "exchanges" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithExchanges(opts ...func(*ExchangeQuery)) *RiderQuery {
	query := (&ExchangeClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withExchanges = query
	return rq
}

// WithSubscribes tells the query-builder to eager-load the nodes that are connected to
// the "subscribes" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithSubscribes(opts ...func(*SubscribeQuery)) *RiderQuery {
	query := (&SubscribeClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withSubscribes = query
	return rq
}

// WithStocks tells the query-builder to eager-load the nodes that are connected to
// the "stocks" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithStocks(opts ...func(*StockQuery)) *RiderQuery {
	query := (&StockClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withStocks = query
	return rq
}

// WithFollowups tells the query-builder to eager-load the nodes that are connected to
// the "followups" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithFollowups(opts ...func(*RiderFollowUpQuery)) *RiderQuery {
	query := (&RiderFollowUpClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withFollowups = query
	return rq
}

// WithBattery tells the query-builder to eager-load the nodes that are connected to
// the "battery" edge. The optional arguments are used to configure the query builder of the edge.
func (rq *RiderQuery) WithBattery(opts ...func(*BatteryQuery)) *RiderQuery {
	query := (&BatteryClient{config: rq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rq.withBattery = query
	return rq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Rider.Query().
//		GroupBy(rider.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rq *RiderQuery) GroupBy(field string, fields ...string) *RiderGroupBy {
	rq.fields = append([]string{field}, fields...)
	grbuild := &RiderGroupBy{build: rq}
	grbuild.flds = &rq.fields
	grbuild.label = rider.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Rider.Query().
//		Select(rider.FieldCreatedAt).
//		Scan(ctx, &v)
func (rq *RiderQuery) Select(fields ...string) *RiderSelect {
	rq.fields = append(rq.fields, fields...)
	sbuild := &RiderSelect{RiderQuery: rq}
	sbuild.label = rider.Label
	sbuild.flds, sbuild.scan = &rq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RiderSelect configured with the given aggregations.
func (rq *RiderQuery) Aggregate(fns ...AggregateFunc) *RiderSelect {
	return rq.Select().Aggregate(fns...)
}

func (rq *RiderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rq); err != nil {
				return err
			}
		}
	}
	for _, f := range rq.fields {
		if !rider.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rq.path != nil {
		prev, err := rq.path(ctx)
		if err != nil {
			return err
		}
		rq.sql = prev
	}
	return nil
}

func (rq *RiderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Rider, error) {
	var (
		nodes       = []*Rider{}
		_spec       = rq.querySpec()
		loadedTypes = [11]bool{
			rq.withStation != nil,
			rq.withPerson != nil,
			rq.withEnterprise != nil,
			rq.withContracts != nil,
			rq.withFaults != nil,
			rq.withOrders != nil,
			rq.withExchanges != nil,
			rq.withSubscribes != nil,
			rq.withStocks != nil,
			rq.withFollowups != nil,
			rq.withBattery != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Rider).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Rider{config: rq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rq.withStation; query != nil {
		if err := rq.loadStation(ctx, query, nodes, nil,
			func(n *Rider, e *EnterpriseStation) { n.Edges.Station = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withPerson; query != nil {
		if err := rq.loadPerson(ctx, query, nodes, nil,
			func(n *Rider, e *Person) { n.Edges.Person = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withEnterprise; query != nil {
		if err := rq.loadEnterprise(ctx, query, nodes, nil,
			func(n *Rider, e *Enterprise) { n.Edges.Enterprise = e }); err != nil {
			return nil, err
		}
	}
	if query := rq.withContracts; query != nil {
		if err := rq.loadContracts(ctx, query, nodes,
			func(n *Rider) { n.Edges.Contracts = []*Contract{} },
			func(n *Rider, e *Contract) { n.Edges.Contracts = append(n.Edges.Contracts, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withFaults; query != nil {
		if err := rq.loadFaults(ctx, query, nodes,
			func(n *Rider) { n.Edges.Faults = []*CabinetFault{} },
			func(n *Rider, e *CabinetFault) { n.Edges.Faults = append(n.Edges.Faults, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withOrders; query != nil {
		if err := rq.loadOrders(ctx, query, nodes,
			func(n *Rider) { n.Edges.Orders = []*Order{} },
			func(n *Rider, e *Order) { n.Edges.Orders = append(n.Edges.Orders, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withExchanges; query != nil {
		if err := rq.loadExchanges(ctx, query, nodes,
			func(n *Rider) { n.Edges.Exchanges = []*Exchange{} },
			func(n *Rider, e *Exchange) { n.Edges.Exchanges = append(n.Edges.Exchanges, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withSubscribes; query != nil {
		if err := rq.loadSubscribes(ctx, query, nodes,
			func(n *Rider) { n.Edges.Subscribes = []*Subscribe{} },
			func(n *Rider, e *Subscribe) { n.Edges.Subscribes = append(n.Edges.Subscribes, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withStocks; query != nil {
		if err := rq.loadStocks(ctx, query, nodes,
			func(n *Rider) { n.Edges.Stocks = []*Stock{} },
			func(n *Rider, e *Stock) { n.Edges.Stocks = append(n.Edges.Stocks, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withFollowups; query != nil {
		if err := rq.loadFollowups(ctx, query, nodes,
			func(n *Rider) { n.Edges.Followups = []*RiderFollowUp{} },
			func(n *Rider, e *RiderFollowUp) { n.Edges.Followups = append(n.Edges.Followups, e) }); err != nil {
			return nil, err
		}
	}
	if query := rq.withBattery; query != nil {
		if err := rq.loadBattery(ctx, query, nodes, nil,
			func(n *Rider, e *Battery) { n.Edges.Battery = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rq *RiderQuery) loadStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Rider)
	for i := range nodes {
		if nodes[i].StationID == nil {
			continue
		}
		fk := *nodes[i].StationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "station_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiderQuery) loadPerson(ctx context.Context, query *PersonQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *Person)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Rider)
	for i := range nodes {
		if nodes[i].PersonID == nil {
			continue
		}
		fk := *nodes[i].PersonID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(person.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "person_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiderQuery) loadEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Rider)
	for i := range nodes {
		if nodes[i].EnterpriseID == nil {
			continue
		}
		fk := *nodes[i].EnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rq *RiderQuery) loadContracts(ctx context.Context, query *ContractQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *Contract)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Rider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.InValues(rider.ContractsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RiderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RiderQuery) loadFaults(ctx context.Context, query *CabinetFaultQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *CabinetFault)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Rider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CabinetFault(func(s *sql.Selector) {
		s.Where(sql.InValues(rider.FaultsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RiderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RiderQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Rider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(rider.OrdersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RiderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RiderQuery) loadExchanges(ctx context.Context, query *ExchangeQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *Exchange)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Rider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.InValues(rider.ExchangesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RiderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RiderQuery) loadSubscribes(ctx context.Context, query *SubscribeQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *Subscribe)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Rider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.InValues(rider.SubscribesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RiderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RiderQuery) loadStocks(ctx context.Context, query *StockQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *Stock)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Rider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.InValues(rider.StocksColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RiderID
		if fk == nil {
			return fmt.Errorf(`foreign-key "rider_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RiderQuery) loadFollowups(ctx context.Context, query *RiderFollowUpQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *RiderFollowUp)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Rider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.RiderFollowUp(func(s *sql.Selector) {
		s.Where(sql.InValues(rider.FollowupsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RiderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (rq *RiderQuery) loadBattery(ctx context.Context, query *BatteryQuery, nodes []*Rider, init func(*Rider), assign func(*Rider, *Battery)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Rider)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.Where(predicate.Battery(func(s *sql.Selector) {
		s.Where(sql.InValues(rider.BatteryColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RiderID
		if fk == nil {
			return fmt.Errorf(`foreign-key "rider_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (rq *RiderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rq.querySpec()
	if len(rq.modifiers) > 0 {
		_spec.Modifiers = rq.modifiers
	}
	_spec.Node.Columns = rq.fields
	if len(rq.fields) > 0 {
		_spec.Unique = rq.unique != nil && *rq.unique
	}
	return sqlgraph.CountNodes(ctx, rq.driver, _spec)
}

func (rq *RiderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
		From:   rq.sql,
		Unique: true,
	}
	if unique := rq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rider.FieldID)
		for i := range fields {
			if fields[i] != rider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rq *RiderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rq.driver.Dialect())
	t1 := builder.Table(rider.Table)
	columns := rq.fields
	if len(columns) == 0 {
		columns = rider.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rq.sql != nil {
		selector = rq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rq.unique != nil && *rq.unique {
		selector.Distinct()
	}
	for _, m := range rq.modifiers {
		m(selector)
	}
	for _, p := range rq.predicates {
		p(selector)
	}
	for _, p := range rq.order {
		p(selector)
	}
	if offset := rq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rq *RiderQuery) Modify(modifiers ...func(s *sql.Selector)) *RiderSelect {
	rq.modifiers = append(rq.modifiers, modifiers...)
	return rq.Select()
}

type RiderQueryWith string

var (
	RiderQueryWithStation    RiderQueryWith = "Station"
	RiderQueryWithPerson     RiderQueryWith = "Person"
	RiderQueryWithEnterprise RiderQueryWith = "Enterprise"
	RiderQueryWithContracts  RiderQueryWith = "Contracts"
	RiderQueryWithFaults     RiderQueryWith = "Faults"
	RiderQueryWithOrders     RiderQueryWith = "Orders"
	RiderQueryWithExchanges  RiderQueryWith = "Exchanges"
	RiderQueryWithSubscribes RiderQueryWith = "Subscribes"
	RiderQueryWithStocks     RiderQueryWith = "Stocks"
	RiderQueryWithFollowups  RiderQueryWith = "Followups"
	RiderQueryWithBattery    RiderQueryWith = "Battery"
)

func (rq *RiderQuery) With(withEdges ...RiderQueryWith) *RiderQuery {
	for _, v := range withEdges {
		switch v {
		case RiderQueryWithStation:
			rq.WithStation()
		case RiderQueryWithPerson:
			rq.WithPerson()
		case RiderQueryWithEnterprise:
			rq.WithEnterprise()
		case RiderQueryWithContracts:
			rq.WithContracts()
		case RiderQueryWithFaults:
			rq.WithFaults()
		case RiderQueryWithOrders:
			rq.WithOrders()
		case RiderQueryWithExchanges:
			rq.WithExchanges()
		case RiderQueryWithSubscribes:
			rq.WithSubscribes()
		case RiderQueryWithStocks:
			rq.WithStocks()
		case RiderQueryWithFollowups:
			rq.WithFollowups()
		case RiderQueryWithBattery:
			rq.WithBattery()
		}
	}
	return rq
}

// RiderGroupBy is the group-by builder for Rider entities.
type RiderGroupBy struct {
	selector
	build *RiderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rgb *RiderGroupBy) Aggregate(fns ...AggregateFunc) *RiderGroupBy {
	rgb.fns = append(rgb.fns, fns...)
	return rgb
}

// Scan applies the selector query and scans the result into the given value.
func (rgb *RiderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeRider, "GroupBy")
	if err := rgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RiderQuery, *RiderGroupBy](ctx, rgb.build, rgb, rgb.build.inters, v)
}

func (rgb *RiderGroupBy) sqlScan(ctx context.Context, root *RiderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rgb.fns))
	for _, fn := range rgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rgb.flds)+len(rgb.fns))
		for _, f := range *rgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RiderSelect is the builder for selecting fields of Rider entities.
type RiderSelect struct {
	*RiderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rs *RiderSelect) Aggregate(fns ...AggregateFunc) *RiderSelect {
	rs.fns = append(rs.fns, fns...)
	return rs
}

// Scan applies the selector query and scans the result into the given value.
func (rs *RiderSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeRider, "Select")
	if err := rs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RiderQuery, *RiderSelect](ctx, rs.RiderQuery, rs, rs.inters, v)
}

func (rs *RiderSelect) sqlScan(ctx context.Context, root *RiderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rs.fns))
	for _, fn := range rs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rs *RiderSelect) Modify(modifiers ...func(s *sql.Selector)) *RiderSelect {
	rs.modifiers = append(rs.modifiers, modifiers...)
	return rs
}
