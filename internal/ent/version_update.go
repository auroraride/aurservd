// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/version"
)

// VersionUpdate is the builder for updating Version entities.
type VersionUpdate struct {
	config
	hooks     []Hook
	mutation  *VersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VersionUpdate builder.
func (vu *VersionUpdate) Where(ps ...predicate.Version) *VersionUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VersionUpdate) SetUpdatedAt(t time.Time) *VersionUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VersionUpdate) SetDeletedAt(t time.Time) *VersionUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableDeletedAt(t *time.Time) *VersionUpdate {
	if t != nil {
		vu.SetDeletedAt(*t)
	}
	return vu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vu *VersionUpdate) ClearDeletedAt() *VersionUpdate {
	vu.mutation.ClearDeletedAt()
	return vu
}

// SetLastModifier sets the "last_modifier" field.
func (vu *VersionUpdate) SetLastModifier(m *model.Modifier) *VersionUpdate {
	vu.mutation.SetLastModifier(m)
	return vu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (vu *VersionUpdate) ClearLastModifier() *VersionUpdate {
	vu.mutation.ClearLastModifier()
	return vu
}

// SetRemark sets the "remark" field.
func (vu *VersionUpdate) SetRemark(s string) *VersionUpdate {
	vu.mutation.SetRemark(s)
	return vu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableRemark(s *string) *VersionUpdate {
	if s != nil {
		vu.SetRemark(*s)
	}
	return vu
}

// ClearRemark clears the value of the "remark" field.
func (vu *VersionUpdate) ClearRemark() *VersionUpdate {
	vu.mutation.ClearRemark()
	return vu
}

// SetPlatform sets the "platform" field.
func (vu *VersionUpdate) SetPlatform(m model.Platform) *VersionUpdate {
	vu.mutation.SetPlatform(m)
	return vu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (vu *VersionUpdate) SetNillablePlatform(m *model.Platform) *VersionUpdate {
	if m != nil {
		vu.SetPlatform(*m)
	}
	return vu
}

// SetVersion sets the "version" field.
func (vu *VersionUpdate) SetVersion(s string) *VersionUpdate {
	vu.mutation.SetVersion(s)
	return vu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableVersion(s *string) *VersionUpdate {
	if s != nil {
		vu.SetVersion(*s)
	}
	return vu
}

// SetContent sets the "content" field.
func (vu *VersionUpdate) SetContent(s string) *VersionUpdate {
	vu.mutation.SetContent(s)
	return vu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableContent(s *string) *VersionUpdate {
	if s != nil {
		vu.SetContent(*s)
	}
	return vu
}

// SetForce sets the "force" field.
func (vu *VersionUpdate) SetForce(b bool) *VersionUpdate {
	vu.mutation.SetForce(b)
	return vu
}

// SetNillableForce sets the "force" field if the given value is not nil.
func (vu *VersionUpdate) SetNillableForce(b *bool) *VersionUpdate {
	if b != nil {
		vu.SetForce(*b)
	}
	return vu
}

// Mutation returns the VersionMutation object of the builder.
func (vu *VersionUpdate) Mutation() *VersionMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VersionUpdate) Save(ctx context.Context) (int, error) {
	if err := vu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VersionUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VersionUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VersionUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VersionUpdate) defaults() error {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		if version.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized version.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := version.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vu *VersionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VersionUpdate {
	vu.modifiers = append(vu.modifiers, modifiers...)
	return vu
}

func (vu *VersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(version.Table, version.Columns, sqlgraph.NewFieldSpec(version.FieldID, field.TypeUint64))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(version.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(version.FieldDeletedAt, field.TypeTime, value)
	}
	if vu.mutation.DeletedAtCleared() {
		_spec.ClearField(version.FieldDeletedAt, field.TypeTime)
	}
	if vu.mutation.CreatorCleared() {
		_spec.ClearField(version.FieldCreator, field.TypeJSON)
	}
	if value, ok := vu.mutation.LastModifier(); ok {
		_spec.SetField(version.FieldLastModifier, field.TypeJSON, value)
	}
	if vu.mutation.LastModifierCleared() {
		_spec.ClearField(version.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := vu.mutation.Remark(); ok {
		_spec.SetField(version.FieldRemark, field.TypeString, value)
	}
	if vu.mutation.RemarkCleared() {
		_spec.ClearField(version.FieldRemark, field.TypeString)
	}
	if value, ok := vu.mutation.Platform(); ok {
		_spec.SetField(version.FieldPlatform, field.TypeOther, value)
	}
	if value, ok := vu.mutation.Version(); ok {
		_spec.SetField(version.FieldVersion, field.TypeString, value)
	}
	if value, ok := vu.mutation.Content(); ok {
		_spec.SetField(version.FieldContent, field.TypeString, value)
	}
	if value, ok := vu.mutation.Force(); ok {
		_spec.SetField(version.FieldForce, field.TypeBool, value)
	}
	_spec.AddModifiers(vu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// VersionUpdateOne is the builder for updating a single Version entity.
type VersionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VersionUpdateOne) SetUpdatedAt(t time.Time) *VersionUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VersionUpdateOne) SetDeletedAt(t time.Time) *VersionUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableDeletedAt(t *time.Time) *VersionUpdateOne {
	if t != nil {
		vuo.SetDeletedAt(*t)
	}
	return vuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (vuo *VersionUpdateOne) ClearDeletedAt() *VersionUpdateOne {
	vuo.mutation.ClearDeletedAt()
	return vuo
}

// SetLastModifier sets the "last_modifier" field.
func (vuo *VersionUpdateOne) SetLastModifier(m *model.Modifier) *VersionUpdateOne {
	vuo.mutation.SetLastModifier(m)
	return vuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (vuo *VersionUpdateOne) ClearLastModifier() *VersionUpdateOne {
	vuo.mutation.ClearLastModifier()
	return vuo
}

// SetRemark sets the "remark" field.
func (vuo *VersionUpdateOne) SetRemark(s string) *VersionUpdateOne {
	vuo.mutation.SetRemark(s)
	return vuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableRemark(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetRemark(*s)
	}
	return vuo
}

// ClearRemark clears the value of the "remark" field.
func (vuo *VersionUpdateOne) ClearRemark() *VersionUpdateOne {
	vuo.mutation.ClearRemark()
	return vuo
}

// SetPlatform sets the "platform" field.
func (vuo *VersionUpdateOne) SetPlatform(m model.Platform) *VersionUpdateOne {
	vuo.mutation.SetPlatform(m)
	return vuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillablePlatform(m *model.Platform) *VersionUpdateOne {
	if m != nil {
		vuo.SetPlatform(*m)
	}
	return vuo
}

// SetVersion sets the "version" field.
func (vuo *VersionUpdateOne) SetVersion(s string) *VersionUpdateOne {
	vuo.mutation.SetVersion(s)
	return vuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableVersion(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetVersion(*s)
	}
	return vuo
}

// SetContent sets the "content" field.
func (vuo *VersionUpdateOne) SetContent(s string) *VersionUpdateOne {
	vuo.mutation.SetContent(s)
	return vuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableContent(s *string) *VersionUpdateOne {
	if s != nil {
		vuo.SetContent(*s)
	}
	return vuo
}

// SetForce sets the "force" field.
func (vuo *VersionUpdateOne) SetForce(b bool) *VersionUpdateOne {
	vuo.mutation.SetForce(b)
	return vuo
}

// SetNillableForce sets the "force" field if the given value is not nil.
func (vuo *VersionUpdateOne) SetNillableForce(b *bool) *VersionUpdateOne {
	if b != nil {
		vuo.SetForce(*b)
	}
	return vuo
}

// Mutation returns the VersionMutation object of the builder.
func (vuo *VersionUpdateOne) Mutation() *VersionMutation {
	return vuo.mutation
}

// Where appends a list predicates to the VersionUpdate builder.
func (vuo *VersionUpdateOne) Where(ps ...predicate.Version) *VersionUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VersionUpdateOne) Select(field string, fields ...string) *VersionUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Version entity.
func (vuo *VersionUpdateOne) Save(ctx context.Context) (*Version, error) {
	if err := vuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VersionUpdateOne) SaveX(ctx context.Context) *Version {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VersionUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VersionUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VersionUpdateOne) defaults() error {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		if version.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized version.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := version.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vuo *VersionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VersionUpdateOne {
	vuo.modifiers = append(vuo.modifiers, modifiers...)
	return vuo
}

func (vuo *VersionUpdateOne) sqlSave(ctx context.Context) (_node *Version, err error) {
	_spec := sqlgraph.NewUpdateSpec(version.Table, version.Columns, sqlgraph.NewFieldSpec(version.FieldID, field.TypeUint64))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Version.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, version.FieldID)
		for _, f := range fields {
			if !version.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != version.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(version.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(version.FieldDeletedAt, field.TypeTime, value)
	}
	if vuo.mutation.DeletedAtCleared() {
		_spec.ClearField(version.FieldDeletedAt, field.TypeTime)
	}
	if vuo.mutation.CreatorCleared() {
		_spec.ClearField(version.FieldCreator, field.TypeJSON)
	}
	if value, ok := vuo.mutation.LastModifier(); ok {
		_spec.SetField(version.FieldLastModifier, field.TypeJSON, value)
	}
	if vuo.mutation.LastModifierCleared() {
		_spec.ClearField(version.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := vuo.mutation.Remark(); ok {
		_spec.SetField(version.FieldRemark, field.TypeString, value)
	}
	if vuo.mutation.RemarkCleared() {
		_spec.ClearField(version.FieldRemark, field.TypeString)
	}
	if value, ok := vuo.mutation.Platform(); ok {
		_spec.SetField(version.FieldPlatform, field.TypeOther, value)
	}
	if value, ok := vuo.mutation.Version(); ok {
		_spec.SetField(version.FieldVersion, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Content(); ok {
		_spec.SetField(version.FieldContent, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Force(); ok {
		_spec.SetField(version.FieldForce, field.TypeBool, value)
	}
	_spec.AddModifiers(vuo.modifiers...)
	_node = &Version{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{version.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
