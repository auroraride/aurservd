// Code generated by ent, DO NOT EDIT.

package cabinet

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/adapter"
)

const (
	// Label holds the string label denoting the cabinet type in the database.
	Label = "cabinet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldBranchID holds the string denoting the branch_id field in the database.
	FieldBranchID = "branch_id"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDoors holds the string denoting the doors field in the database.
	FieldDoors = "doors"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldGeom holds the string denoting the geom field in the database.
	FieldGeom = "geom"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldSimSn holds the string denoting the sim_sn field in the database.
	FieldSimSn = "sim_sn"
	// FieldSimDate holds the string denoting the sim_date field in the database.
	FieldSimDate = "sim_date"
	// FieldTransferred holds the string denoting the transferred field in the database.
	FieldTransferred = "transferred"
	// FieldIntelligent holds the string denoting the intelligent field in the database.
	FieldIntelligent = "intelligent"
	// FieldHealth holds the string denoting the health field in the database.
	FieldHealth = "health"
	// FieldBin holds the string denoting the bin field in the database.
	FieldBin = "bin"
	// FieldBatteryNum holds the string denoting the battery_num field in the database.
	FieldBatteryNum = "battery_num"
	// FieldBatteryFullNum holds the string denoting the battery_full_num field in the database.
	FieldBatteryFullNum = "battery_full_num"
	// FieldBatteryChargingNum holds the string denoting the battery_charging_num field in the database.
	FieldBatteryChargingNum = "battery_charging_num"
	// FieldEmptyBinNum holds the string denoting the empty_bin_num field in the database.
	FieldEmptyBinNum = "empty_bin_num"
	// FieldLockedBinNum holds the string denoting the locked_bin_num field in the database.
	FieldLockedBinNum = "locked_bin_num"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeBranch holds the string denoting the branch edge name in mutations.
	EdgeBranch = "branch"
	// EdgeModels holds the string denoting the models edge name in mutations.
	EdgeModels = "models"
	// EdgeFaults holds the string denoting the faults edge name in mutations.
	EdgeFaults = "faults"
	// EdgeExchanges holds the string denoting the exchanges edge name in mutations.
	EdgeExchanges = "exchanges"
	// EdgeStocks holds the string denoting the stocks edge name in mutations.
	EdgeStocks = "stocks"
	// EdgeBatteries holds the string denoting the batteries edge name in mutations.
	EdgeBatteries = "batteries"
	// EdgeBatteryFlows holds the string denoting the battery_flows edge name in mutations.
	EdgeBatteryFlows = "battery_flows"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// Table holds the table name of the cabinet in the database.
	Table = "cabinet"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "cabinet"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// BranchTable is the table that holds the branch relation/edge.
	BranchTable = "cabinet"
	// BranchInverseTable is the table name for the Branch entity.
	// It exists in this package in order to avoid circular dependency with the "branch" package.
	BranchInverseTable = "branch"
	// BranchColumn is the table column denoting the branch relation/edge.
	BranchColumn = "branch_id"
	// ModelsTable is the table that holds the models relation/edge. The primary key declared below.
	ModelsTable = "cabinet_models"
	// ModelsInverseTable is the table name for the BatteryModel entity.
	// It exists in this package in order to avoid circular dependency with the "batterymodel" package.
	ModelsInverseTable = "battery_model"
	// FaultsTable is the table that holds the faults relation/edge.
	FaultsTable = "cabinet_fault"
	// FaultsInverseTable is the table name for the CabinetFault entity.
	// It exists in this package in order to avoid circular dependency with the "cabinetfault" package.
	FaultsInverseTable = "cabinet_fault"
	// FaultsColumn is the table column denoting the faults relation/edge.
	FaultsColumn = "cabinet_id"
	// ExchangesTable is the table that holds the exchanges relation/edge.
	ExchangesTable = "exchange"
	// ExchangesInverseTable is the table name for the Exchange entity.
	// It exists in this package in order to avoid circular dependency with the "exchange" package.
	ExchangesInverseTable = "exchange"
	// ExchangesColumn is the table column denoting the exchanges relation/edge.
	ExchangesColumn = "cabinet_id"
	// StocksTable is the table that holds the stocks relation/edge.
	StocksTable = "stock"
	// StocksInverseTable is the table name for the Stock entity.
	// It exists in this package in order to avoid circular dependency with the "stock" package.
	StocksInverseTable = "stock"
	// StocksColumn is the table column denoting the stocks relation/edge.
	StocksColumn = "cabinet_id"
	// BatteriesTable is the table that holds the batteries relation/edge.
	BatteriesTable = "battery"
	// BatteriesInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteriesInverseTable = "battery"
	// BatteriesColumn is the table column denoting the batteries relation/edge.
	BatteriesColumn = "cabinet_id"
	// BatteryFlowsTable is the table that holds the battery_flows relation/edge.
	BatteryFlowsTable = "battery_flow"
	// BatteryFlowsInverseTable is the table name for the BatteryFlow entity.
	// It exists in this package in order to avoid circular dependency with the "batteryflow" package.
	BatteryFlowsInverseTable = "battery_flow"
	// BatteryFlowsColumn is the table column denoting the battery_flows relation/edge.
	BatteryFlowsColumn = "cabinet_id"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "cabinet"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "cabinet"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
)

// Columns holds all SQL columns for cabinet fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldBranchID,
	FieldEnterpriseID,
	FieldStationID,
	FieldSn,
	FieldBrand,
	FieldSerial,
	FieldName,
	FieldDoors,
	FieldStatus,
	FieldLng,
	FieldLat,
	FieldGeom,
	FieldAddress,
	FieldSimSn,
	FieldSimDate,
	FieldTransferred,
	FieldIntelligent,
	FieldHealth,
	FieldBin,
	FieldBatteryNum,
	FieldBatteryFullNum,
	FieldBatteryChargingNum,
	FieldEmptyBinNum,
	FieldLockedBinNum,
}

var (
	// ModelsPrimaryKey and ModelsColumn2 are the table columns denoting the
	// primary key for the models relation (M2M).
	ModelsPrimaryKey = []string{"cabinet_id", "battery_model_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultBrand holds the default value on creation for the "brand" field.
	DefaultBrand adapter.CabinetBrand
	// DefaultTransferred holds the default value on creation for the "transferred" field.
	DefaultTransferred bool
	// DefaultIntelligent holds the default value on creation for the "intelligent" field.
	DefaultIntelligent bool
	// DefaultHealth holds the default value on creation for the "health" field.
	DefaultHealth uint8
	// DefaultBatteryNum holds the default value on creation for the "battery_num" field.
	DefaultBatteryNum int
	// DefaultBatteryFullNum holds the default value on creation for the "battery_full_num" field.
	DefaultBatteryFullNum int
	// DefaultBatteryChargingNum holds the default value on creation for the "battery_charging_num" field.
	DefaultBatteryChargingNum int
	// DefaultEmptyBinNum holds the default value on creation for the "empty_bin_num" field.
	DefaultEmptyBinNum int
	// DefaultLockedBinNum holds the default value on creation for the "locked_bin_num" field.
	DefaultLockedBinNum int
)

// OrderOption defines the ordering options for the Cabinet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByBranchID orders the results by the branch_id field.
func ByBranchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranchID, opts...).ToFunc()
}

// ByEnterpriseID orders the results by the enterprise_id field.
func ByEnterpriseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterpriseID, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDoors orders the results by the doors field.
func ByDoors(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoors, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLng orders the results by the lng field.
func ByLng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLng, opts...).ToFunc()
}

// ByLat orders the results by the lat field.
func ByLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLat, opts...).ToFunc()
}

// ByGeom orders the results by the geom field.
func ByGeom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeom, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// BySimSn orders the results by the sim_sn field.
func BySimSn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimSn, opts...).ToFunc()
}

// BySimDate orders the results by the sim_date field.
func BySimDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSimDate, opts...).ToFunc()
}

// ByTransferred orders the results by the transferred field.
func ByTransferred(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferred, opts...).ToFunc()
}

// ByIntelligent orders the results by the intelligent field.
func ByIntelligent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntelligent, opts...).ToFunc()
}

// ByHealth orders the results by the health field.
func ByHealth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHealth, opts...).ToFunc()
}

// ByBatteryNum orders the results by the battery_num field.
func ByBatteryNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryNum, opts...).ToFunc()
}

// ByBatteryFullNum orders the results by the battery_full_num field.
func ByBatteryFullNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryFullNum, opts...).ToFunc()
}

// ByBatteryChargingNum orders the results by the battery_charging_num field.
func ByBatteryChargingNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryChargingNum, opts...).ToFunc()
}

// ByEmptyBinNum orders the results by the empty_bin_num field.
func ByEmptyBinNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmptyBinNum, opts...).ToFunc()
}

// ByLockedBinNum orders the results by the locked_bin_num field.
func ByLockedBinNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedBinNum, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByBranchField orders the results by branch field.
func ByBranchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBranchStep(), sql.OrderByField(field, opts...))
	}
}

// ByModelsCount orders the results by models count.
func ByModelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModelsStep(), opts...)
	}
}

// ByModels orders the results by models terms.
func ByModels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFaultsCount orders the results by faults count.
func ByFaultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFaultsStep(), opts...)
	}
}

// ByFaults orders the results by faults terms.
func ByFaults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFaultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExchangesCount orders the results by exchanges count.
func ByExchangesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExchangesStep(), opts...)
	}
}

// ByExchanges orders the results by exchanges terms.
func ByExchanges(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExchangesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStocksCount orders the results by stocks count.
func ByStocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStocksStep(), opts...)
	}
}

// ByStocks orders the results by stocks terms.
func ByStocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBatteriesCount orders the results by batteries count.
func ByBatteriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBatteriesStep(), opts...)
	}
}

// ByBatteries orders the results by batteries terms.
func ByBatteries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBatteryFlowsCount orders the results by battery_flows count.
func ByBatteryFlowsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBatteryFlowsStep(), opts...)
	}
}

// ByBatteryFlows orders the results by battery_flows terms.
func ByBatteryFlows(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteryFlowsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnterpriseField orders the results by enterprise field.
func ByEnterpriseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnterpriseStep(), sql.OrderByField(field, opts...))
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newBranchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BranchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BranchTable, BranchColumn),
	)
}
func newModelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ModelsTable, ModelsPrimaryKey...),
	)
}
func newFaultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FaultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FaultsTable, FaultsColumn),
	)
}
func newExchangesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExchangesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExchangesTable, ExchangesColumn),
	)
}
func newStocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StocksTable, StocksColumn),
	)
}
func newBatteriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BatteriesTable, BatteriesColumn),
	)
}
func newBatteryFlowsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteryFlowsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BatteryFlowsTable, BatteryFlowsColumn),
	)
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StationTable, StationColumn),
	)
}
func newEnterpriseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnterpriseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
	)
}
