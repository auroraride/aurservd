// Code generated by ent, DO NOT EDIT.

package cabinet

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// BranchID applies equality check predicate on the "branch_id" field. It's identical to BranchIDEQ.
func BranchID(v uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBranchID), v))
	})
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrand), v))
	})
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Doors applies equality check predicate on the "doors" field. It's identical to DoorsEQ.
func Doors(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoors), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Lng applies equality check predicate on the "lng" field. It's identical to LngEQ.
func Lng(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLng), v))
	})
}

// Lat applies equality check predicate on the "lat" field. It's identical to LatEQ.
func Lat(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLat), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// SimSn applies equality check predicate on the "sim_sn" field. It's identical to SimSnEQ.
func SimSn(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimSn), v))
	})
}

// SimDate applies equality check predicate on the "sim_date" field. It's identical to SimDateEQ.
func SimDate(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimDate), v))
	})
}

// Transferred applies equality check predicate on the "transferred" field. It's identical to TransferredEQ.
func Transferred(v bool) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransferred), v))
	})
}

// Intelligent applies equality check predicate on the "intelligent" field. It's identical to IntelligentEQ.
func Intelligent(v bool) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntelligent), v))
	})
}

// Health applies equality check predicate on the "health" field. It's identical to HealthEQ.
func Health(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHealth), v))
	})
}

// BatteryNum applies equality check predicate on the "battery_num" field. It's identical to BatteryNumEQ.
func BatteryNum(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBatteryNum), v))
	})
}

// BatteryFullNum applies equality check predicate on the "battery_full_num" field. It's identical to BatteryFullNumEQ.
func BatteryFullNum(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBatteryFullNum), v))
	})
}

// BatteryChargingNum applies equality check predicate on the "battery_charging_num" field. It's identical to BatteryChargingNumEQ.
func BatteryChargingNum(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBatteryChargingNum), v))
	})
}

// EmptyBinNum applies equality check predicate on the "empty_bin_num" field. It's identical to EmptyBinNumEQ.
func EmptyBinNum(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmptyBinNum), v))
	})
}

// LockedBinNum applies equality check predicate on the "locked_bin_num" field. It's identical to LockedBinNumEQ.
func LockedBinNum(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLockedBinNum), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCityID), v))
	})
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCityID), v...))
	})
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCityID), v...))
	})
}

// CityIDIsNil applies the IsNil predicate on the "city_id" field.
func CityIDIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCityID)))
	})
}

// CityIDNotNil applies the NotNil predicate on the "city_id" field.
func CityIDNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCityID)))
	})
}

// BranchIDEQ applies the EQ predicate on the "branch_id" field.
func BranchIDEQ(v uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBranchID), v))
	})
}

// BranchIDNEQ applies the NEQ predicate on the "branch_id" field.
func BranchIDNEQ(v uint64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBranchID), v))
	})
}

// BranchIDIn applies the In predicate on the "branch_id" field.
func BranchIDIn(vs ...uint64) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBranchID), v...))
	})
}

// BranchIDNotIn applies the NotIn predicate on the "branch_id" field.
func BranchIDNotIn(vs ...uint64) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBranchID), v...))
	})
}

// BranchIDIsNil applies the IsNil predicate on the "branch_id" field.
func BranchIDIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBranchID)))
	})
}

// BranchIDNotNil applies the NotNil predicate on the "branch_id" field.
func BranchIDNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBranchID)))
	})
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSn), v))
	})
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSn), v...))
	})
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSn), v...))
	})
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSn), v))
	})
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSn), v))
	})
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSn), v))
	})
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSn), v))
	})
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSn), v))
	})
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSn), v))
	})
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSn), v))
	})
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSn), v))
	})
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSn), v))
	})
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrand), v))
	})
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrand), v))
	})
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBrand), v...))
	})
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBrand), v...))
	})
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrand), v))
	})
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrand), v))
	})
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrand), v))
	})
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrand), v))
	})
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrand), v))
	})
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrand), v))
	})
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrand), v))
	})
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrand), v))
	})
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrand), v))
	})
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSerial), v))
	})
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSerial), v...))
	})
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSerial), v...))
	})
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSerial), v))
	})
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSerial), v))
	})
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSerial), v))
	})
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSerial), v))
	})
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSerial), v))
	})
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSerial), v))
	})
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSerial), v))
	})
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSerial), v))
	})
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSerial), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DoorsEQ applies the EQ predicate on the "doors" field.
func DoorsEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDoors), v))
	})
}

// DoorsNEQ applies the NEQ predicate on the "doors" field.
func DoorsNEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDoors), v))
	})
}

// DoorsIn applies the In predicate on the "doors" field.
func DoorsIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDoors), v...))
	})
}

// DoorsNotIn applies the NotIn predicate on the "doors" field.
func DoorsNotIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDoors), v...))
	})
}

// DoorsGT applies the GT predicate on the "doors" field.
func DoorsGT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDoors), v))
	})
}

// DoorsGTE applies the GTE predicate on the "doors" field.
func DoorsGTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDoors), v))
	})
}

// DoorsLT applies the LT predicate on the "doors" field.
func DoorsLT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDoors), v))
	})
}

// DoorsLTE applies the LTE predicate on the "doors" field.
func DoorsLTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDoors), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// LngEQ applies the EQ predicate on the "lng" field.
func LngEQ(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLng), v))
	})
}

// LngNEQ applies the NEQ predicate on the "lng" field.
func LngNEQ(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLng), v))
	})
}

// LngIn applies the In predicate on the "lng" field.
func LngIn(vs ...float64) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLng), v...))
	})
}

// LngNotIn applies the NotIn predicate on the "lng" field.
func LngNotIn(vs ...float64) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLng), v...))
	})
}

// LngGT applies the GT predicate on the "lng" field.
func LngGT(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLng), v))
	})
}

// LngGTE applies the GTE predicate on the "lng" field.
func LngGTE(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLng), v))
	})
}

// LngLT applies the LT predicate on the "lng" field.
func LngLT(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLng), v))
	})
}

// LngLTE applies the LTE predicate on the "lng" field.
func LngLTE(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLng), v))
	})
}

// LngIsNil applies the IsNil predicate on the "lng" field.
func LngIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLng)))
	})
}

// LngNotNil applies the NotNil predicate on the "lng" field.
func LngNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLng)))
	})
}

// LatEQ applies the EQ predicate on the "lat" field.
func LatEQ(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLat), v))
	})
}

// LatNEQ applies the NEQ predicate on the "lat" field.
func LatNEQ(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLat), v))
	})
}

// LatIn applies the In predicate on the "lat" field.
func LatIn(vs ...float64) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLat), v...))
	})
}

// LatNotIn applies the NotIn predicate on the "lat" field.
func LatNotIn(vs ...float64) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLat), v...))
	})
}

// LatGT applies the GT predicate on the "lat" field.
func LatGT(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLat), v))
	})
}

// LatGTE applies the GTE predicate on the "lat" field.
func LatGTE(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLat), v))
	})
}

// LatLT applies the LT predicate on the "lat" field.
func LatLT(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLat), v))
	})
}

// LatLTE applies the LTE predicate on the "lat" field.
func LatLTE(v float64) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLat), v))
	})
}

// LatIsNil applies the IsNil predicate on the "lat" field.
func LatIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLat)))
	})
}

// LatNotNil applies the NotNil predicate on the "lat" field.
func LatNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLat)))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAddress)))
	})
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAddress)))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// SimSnEQ applies the EQ predicate on the "sim_sn" field.
func SimSnEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimSn), v))
	})
}

// SimSnNEQ applies the NEQ predicate on the "sim_sn" field.
func SimSnNEQ(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSimSn), v))
	})
}

// SimSnIn applies the In predicate on the "sim_sn" field.
func SimSnIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSimSn), v...))
	})
}

// SimSnNotIn applies the NotIn predicate on the "sim_sn" field.
func SimSnNotIn(vs ...string) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSimSn), v...))
	})
}

// SimSnGT applies the GT predicate on the "sim_sn" field.
func SimSnGT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSimSn), v))
	})
}

// SimSnGTE applies the GTE predicate on the "sim_sn" field.
func SimSnGTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSimSn), v))
	})
}

// SimSnLT applies the LT predicate on the "sim_sn" field.
func SimSnLT(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSimSn), v))
	})
}

// SimSnLTE applies the LTE predicate on the "sim_sn" field.
func SimSnLTE(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSimSn), v))
	})
}

// SimSnContains applies the Contains predicate on the "sim_sn" field.
func SimSnContains(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSimSn), v))
	})
}

// SimSnHasPrefix applies the HasPrefix predicate on the "sim_sn" field.
func SimSnHasPrefix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSimSn), v))
	})
}

// SimSnHasSuffix applies the HasSuffix predicate on the "sim_sn" field.
func SimSnHasSuffix(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSimSn), v))
	})
}

// SimSnIsNil applies the IsNil predicate on the "sim_sn" field.
func SimSnIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSimSn)))
	})
}

// SimSnNotNil applies the NotNil predicate on the "sim_sn" field.
func SimSnNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSimSn)))
	})
}

// SimSnEqualFold applies the EqualFold predicate on the "sim_sn" field.
func SimSnEqualFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSimSn), v))
	})
}

// SimSnContainsFold applies the ContainsFold predicate on the "sim_sn" field.
func SimSnContainsFold(v string) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSimSn), v))
	})
}

// SimDateEQ applies the EQ predicate on the "sim_date" field.
func SimDateEQ(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSimDate), v))
	})
}

// SimDateNEQ applies the NEQ predicate on the "sim_date" field.
func SimDateNEQ(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSimDate), v))
	})
}

// SimDateIn applies the In predicate on the "sim_date" field.
func SimDateIn(vs ...time.Time) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSimDate), v...))
	})
}

// SimDateNotIn applies the NotIn predicate on the "sim_date" field.
func SimDateNotIn(vs ...time.Time) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSimDate), v...))
	})
}

// SimDateGT applies the GT predicate on the "sim_date" field.
func SimDateGT(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSimDate), v))
	})
}

// SimDateGTE applies the GTE predicate on the "sim_date" field.
func SimDateGTE(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSimDate), v))
	})
}

// SimDateLT applies the LT predicate on the "sim_date" field.
func SimDateLT(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSimDate), v))
	})
}

// SimDateLTE applies the LTE predicate on the "sim_date" field.
func SimDateLTE(v time.Time) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSimDate), v))
	})
}

// SimDateIsNil applies the IsNil predicate on the "sim_date" field.
func SimDateIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSimDate)))
	})
}

// SimDateNotNil applies the NotNil predicate on the "sim_date" field.
func SimDateNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSimDate)))
	})
}

// TransferredEQ applies the EQ predicate on the "transferred" field.
func TransferredEQ(v bool) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransferred), v))
	})
}

// TransferredNEQ applies the NEQ predicate on the "transferred" field.
func TransferredNEQ(v bool) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransferred), v))
	})
}

// IntelligentEQ applies the EQ predicate on the "intelligent" field.
func IntelligentEQ(v bool) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntelligent), v))
	})
}

// IntelligentNEQ applies the NEQ predicate on the "intelligent" field.
func IntelligentNEQ(v bool) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntelligent), v))
	})
}

// HealthEQ applies the EQ predicate on the "health" field.
func HealthEQ(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHealth), v))
	})
}

// HealthNEQ applies the NEQ predicate on the "health" field.
func HealthNEQ(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHealth), v))
	})
}

// HealthIn applies the In predicate on the "health" field.
func HealthIn(vs ...uint8) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHealth), v...))
	})
}

// HealthNotIn applies the NotIn predicate on the "health" field.
func HealthNotIn(vs ...uint8) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHealth), v...))
	})
}

// HealthGT applies the GT predicate on the "health" field.
func HealthGT(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHealth), v))
	})
}

// HealthGTE applies the GTE predicate on the "health" field.
func HealthGTE(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHealth), v))
	})
}

// HealthLT applies the LT predicate on the "health" field.
func HealthLT(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHealth), v))
	})
}

// HealthLTE applies the LTE predicate on the "health" field.
func HealthLTE(v uint8) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHealth), v))
	})
}

// BinIsNil applies the IsNil predicate on the "bin" field.
func BinIsNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBin)))
	})
}

// BinNotNil applies the NotNil predicate on the "bin" field.
func BinNotNil() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBin)))
	})
}

// BatteryNumEQ applies the EQ predicate on the "battery_num" field.
func BatteryNumEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBatteryNum), v))
	})
}

// BatteryNumNEQ applies the NEQ predicate on the "battery_num" field.
func BatteryNumNEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBatteryNum), v))
	})
}

// BatteryNumIn applies the In predicate on the "battery_num" field.
func BatteryNumIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBatteryNum), v...))
	})
}

// BatteryNumNotIn applies the NotIn predicate on the "battery_num" field.
func BatteryNumNotIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBatteryNum), v...))
	})
}

// BatteryNumGT applies the GT predicate on the "battery_num" field.
func BatteryNumGT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBatteryNum), v))
	})
}

// BatteryNumGTE applies the GTE predicate on the "battery_num" field.
func BatteryNumGTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBatteryNum), v))
	})
}

// BatteryNumLT applies the LT predicate on the "battery_num" field.
func BatteryNumLT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBatteryNum), v))
	})
}

// BatteryNumLTE applies the LTE predicate on the "battery_num" field.
func BatteryNumLTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBatteryNum), v))
	})
}

// BatteryFullNumEQ applies the EQ predicate on the "battery_full_num" field.
func BatteryFullNumEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBatteryFullNum), v))
	})
}

// BatteryFullNumNEQ applies the NEQ predicate on the "battery_full_num" field.
func BatteryFullNumNEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBatteryFullNum), v))
	})
}

// BatteryFullNumIn applies the In predicate on the "battery_full_num" field.
func BatteryFullNumIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBatteryFullNum), v...))
	})
}

// BatteryFullNumNotIn applies the NotIn predicate on the "battery_full_num" field.
func BatteryFullNumNotIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBatteryFullNum), v...))
	})
}

// BatteryFullNumGT applies the GT predicate on the "battery_full_num" field.
func BatteryFullNumGT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBatteryFullNum), v))
	})
}

// BatteryFullNumGTE applies the GTE predicate on the "battery_full_num" field.
func BatteryFullNumGTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBatteryFullNum), v))
	})
}

// BatteryFullNumLT applies the LT predicate on the "battery_full_num" field.
func BatteryFullNumLT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBatteryFullNum), v))
	})
}

// BatteryFullNumLTE applies the LTE predicate on the "battery_full_num" field.
func BatteryFullNumLTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBatteryFullNum), v))
	})
}

// BatteryChargingNumEQ applies the EQ predicate on the "battery_charging_num" field.
func BatteryChargingNumEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBatteryChargingNum), v))
	})
}

// BatteryChargingNumNEQ applies the NEQ predicate on the "battery_charging_num" field.
func BatteryChargingNumNEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBatteryChargingNum), v))
	})
}

// BatteryChargingNumIn applies the In predicate on the "battery_charging_num" field.
func BatteryChargingNumIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBatteryChargingNum), v...))
	})
}

// BatteryChargingNumNotIn applies the NotIn predicate on the "battery_charging_num" field.
func BatteryChargingNumNotIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBatteryChargingNum), v...))
	})
}

// BatteryChargingNumGT applies the GT predicate on the "battery_charging_num" field.
func BatteryChargingNumGT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBatteryChargingNum), v))
	})
}

// BatteryChargingNumGTE applies the GTE predicate on the "battery_charging_num" field.
func BatteryChargingNumGTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBatteryChargingNum), v))
	})
}

// BatteryChargingNumLT applies the LT predicate on the "battery_charging_num" field.
func BatteryChargingNumLT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBatteryChargingNum), v))
	})
}

// BatteryChargingNumLTE applies the LTE predicate on the "battery_charging_num" field.
func BatteryChargingNumLTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBatteryChargingNum), v))
	})
}

// EmptyBinNumEQ applies the EQ predicate on the "empty_bin_num" field.
func EmptyBinNumEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmptyBinNum), v))
	})
}

// EmptyBinNumNEQ applies the NEQ predicate on the "empty_bin_num" field.
func EmptyBinNumNEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmptyBinNum), v))
	})
}

// EmptyBinNumIn applies the In predicate on the "empty_bin_num" field.
func EmptyBinNumIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmptyBinNum), v...))
	})
}

// EmptyBinNumNotIn applies the NotIn predicate on the "empty_bin_num" field.
func EmptyBinNumNotIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmptyBinNum), v...))
	})
}

// EmptyBinNumGT applies the GT predicate on the "empty_bin_num" field.
func EmptyBinNumGT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmptyBinNum), v))
	})
}

// EmptyBinNumGTE applies the GTE predicate on the "empty_bin_num" field.
func EmptyBinNumGTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmptyBinNum), v))
	})
}

// EmptyBinNumLT applies the LT predicate on the "empty_bin_num" field.
func EmptyBinNumLT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmptyBinNum), v))
	})
}

// EmptyBinNumLTE applies the LTE predicate on the "empty_bin_num" field.
func EmptyBinNumLTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmptyBinNum), v))
	})
}

// LockedBinNumEQ applies the EQ predicate on the "locked_bin_num" field.
func LockedBinNumEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLockedBinNum), v))
	})
}

// LockedBinNumNEQ applies the NEQ predicate on the "locked_bin_num" field.
func LockedBinNumNEQ(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLockedBinNum), v))
	})
}

// LockedBinNumIn applies the In predicate on the "locked_bin_num" field.
func LockedBinNumIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLockedBinNum), v...))
	})
}

// LockedBinNumNotIn applies the NotIn predicate on the "locked_bin_num" field.
func LockedBinNumNotIn(vs ...int) predicate.Cabinet {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLockedBinNum), v...))
	})
}

// LockedBinNumGT applies the GT predicate on the "locked_bin_num" field.
func LockedBinNumGT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLockedBinNum), v))
	})
}

// LockedBinNumGTE applies the GTE predicate on the "locked_bin_num" field.
func LockedBinNumGTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLockedBinNum), v))
	})
}

// LockedBinNumLT applies the LT predicate on the "locked_bin_num" field.
func LockedBinNumLT(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLockedBinNum), v))
	})
}

// LockedBinNumLTE applies the LTE predicate on the "locked_bin_num" field.
func LockedBinNumLTE(v int) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLockedBinNum), v))
	})
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBranch applies the HasEdge predicate on the "branch" edge.
func HasBranch() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BranchTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BranchTable, BranchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBranchWith applies the HasEdge predicate on the "branch" edge with a given conditions (other predicates).
func HasBranchWith(preds ...predicate.Branch) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BranchInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BranchTable, BranchColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModels applies the HasEdge predicate on the "models" edge.
func HasModels() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModelsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ModelsTable, ModelsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelsWith applies the HasEdge predicate on the "models" edge with a given conditions (other predicates).
func HasModelsWith(preds ...predicate.BatteryModel) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModelsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ModelsTable, ModelsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFaults applies the HasEdge predicate on the "faults" edge.
func HasFaults() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FaultsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FaultsTable, FaultsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFaultsWith applies the HasEdge predicate on the "faults" edge with a given conditions (other predicates).
func HasFaultsWith(preds ...predicate.CabinetFault) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FaultsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FaultsTable, FaultsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExchanges applies the HasEdge predicate on the "exchanges" edge.
func HasExchanges() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExchangesTable, ExchangesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExchangesWith applies the HasEdge predicate on the "exchanges" edge with a given conditions (other predicates).
func HasExchangesWith(preds ...predicate.Exchange) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ExchangesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExchangesTable, ExchangesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStocks applies the HasEdge predicate on the "stocks" edge.
func HasStocks() predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StocksTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StocksTable, StocksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStocksWith applies the HasEdge predicate on the "stocks" edge with a given conditions (other predicates).
func HasStocksWith(preds ...predicate.Stock) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StocksInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StocksTable, StocksColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Cabinet) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Cabinet) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Cabinet) predicate.Cabinet {
	return predicate.Cabinet(func(s *sql.Selector) {
		p(s.Not())
	})
}
