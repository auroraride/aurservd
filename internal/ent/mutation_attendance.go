// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/attendance"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// AttendanceMutation represents an operation that mutates the Attendance nodes in the graph.
type AttendanceMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	creator         **model.Modifier
	last_modifier   **model.Modifier
	remark          *string
	inventory       *[]model.AttendanceInventory
	photo           *string
	duty            *bool
	date            *time.Time
	lng             *float64
	addlng          *float64
	lat             *float64
	addlat          *float64
	address         *string
	distance        *float64
	adddistance     *float64
	clearedFields   map[string]struct{}
	store           *uint64
	clearedstore    bool
	employee        *uint64
	clearedemployee bool
	done            bool
	oldValue        func(context.Context) (*Attendance, error)
	predicates      []predicate.Attendance
}

var _ ent.Mutation = (*AttendanceMutation)(nil)

// attendanceOption allows management of the mutation configuration using functional options.
type attendanceOption func(*AttendanceMutation)

// newAttendanceMutation creates new mutation for the Attendance entity.
func newAttendanceMutation(c config, op Op, opts ...attendanceOption) *AttendanceMutation {
	m := &AttendanceMutation{
		config:        c,
		op:            op,
		typ:           TypeAttendance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttendanceID sets the ID field of the mutation.
func withAttendanceID(id uint64) attendanceOption {
	return func(m *AttendanceMutation) {
		var (
			err   error
			once  sync.Once
			value *Attendance
		)
		m.oldValue = func(ctx context.Context) (*Attendance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attendance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttendance sets the old Attendance of the mutation.
func withAttendance(node *Attendance) attendanceOption {
	return func(m *AttendanceMutation) {
		m.oldValue = func(context.Context) (*Attendance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttendanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttendanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttendanceMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttendanceMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attendance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AttendanceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AttendanceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AttendanceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AttendanceMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AttendanceMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AttendanceMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AttendanceMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AttendanceMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AttendanceMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[attendance.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AttendanceMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[attendance.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AttendanceMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, attendance.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *AttendanceMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *AttendanceMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *AttendanceMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[attendance.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *AttendanceMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[attendance.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *AttendanceMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, attendance.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *AttendanceMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *AttendanceMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *AttendanceMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[attendance.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *AttendanceMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[attendance.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *AttendanceMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, attendance.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *AttendanceMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *AttendanceMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *AttendanceMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[attendance.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *AttendanceMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[attendance.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *AttendanceMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, attendance.FieldRemark)
}

// SetStoreID sets the "store_id" field.
func (m *AttendanceMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *AttendanceMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldStoreID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *AttendanceMutation) ResetStoreID() {
	m.store = nil
}

// SetEmployeeID sets the "employee_id" field.
func (m *AttendanceMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *AttendanceMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldEmployeeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *AttendanceMutation) ResetEmployeeID() {
	m.employee = nil
}

// SetInventory sets the "inventory" field.
func (m *AttendanceMutation) SetInventory(mi []model.AttendanceInventory) {
	m.inventory = &mi
}

// Inventory returns the value of the "inventory" field in the mutation.
func (m *AttendanceMutation) Inventory() (r []model.AttendanceInventory, exists bool) {
	v := m.inventory
	if v == nil {
		return
	}
	return *v, true
}

// OldInventory returns the old "inventory" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldInventory(ctx context.Context) (v []model.AttendanceInventory, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInventory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInventory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInventory: %w", err)
	}
	return oldValue.Inventory, nil
}

// ClearInventory clears the value of the "inventory" field.
func (m *AttendanceMutation) ClearInventory() {
	m.inventory = nil
	m.clearedFields[attendance.FieldInventory] = struct{}{}
}

// InventoryCleared returns if the "inventory" field was cleared in this mutation.
func (m *AttendanceMutation) InventoryCleared() bool {
	_, ok := m.clearedFields[attendance.FieldInventory]
	return ok
}

// ResetInventory resets all changes to the "inventory" field.
func (m *AttendanceMutation) ResetInventory() {
	m.inventory = nil
	delete(m.clearedFields, attendance.FieldInventory)
}

// SetPhoto sets the "photo" field.
func (m *AttendanceMutation) SetPhoto(s string) {
	m.photo = &s
}

// Photo returns the value of the "photo" field in the mutation.
func (m *AttendanceMutation) Photo() (r string, exists bool) {
	v := m.photo
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoto returns the old "photo" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldPhoto(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoto is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoto: %w", err)
	}
	return oldValue.Photo, nil
}

// ClearPhoto clears the value of the "photo" field.
func (m *AttendanceMutation) ClearPhoto() {
	m.photo = nil
	m.clearedFields[attendance.FieldPhoto] = struct{}{}
}

// PhotoCleared returns if the "photo" field was cleared in this mutation.
func (m *AttendanceMutation) PhotoCleared() bool {
	_, ok := m.clearedFields[attendance.FieldPhoto]
	return ok
}

// ResetPhoto resets all changes to the "photo" field.
func (m *AttendanceMutation) ResetPhoto() {
	m.photo = nil
	delete(m.clearedFields, attendance.FieldPhoto)
}

// SetDuty sets the "duty" field.
func (m *AttendanceMutation) SetDuty(b bool) {
	m.duty = &b
}

// Duty returns the value of the "duty" field in the mutation.
func (m *AttendanceMutation) Duty() (r bool, exists bool) {
	v := m.duty
	if v == nil {
		return
	}
	return *v, true
}

// OldDuty returns the old "duty" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldDuty(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuty is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuty requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuty: %w", err)
	}
	return oldValue.Duty, nil
}

// ResetDuty resets all changes to the "duty" field.
func (m *AttendanceMutation) ResetDuty() {
	m.duty = nil
}

// SetDate sets the "date" field.
func (m *AttendanceMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *AttendanceMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *AttendanceMutation) ResetDate() {
	m.date = nil
}

// SetLng sets the "lng" field.
func (m *AttendanceMutation) SetLng(f float64) {
	m.lng = &f
	m.addlng = nil
}

// Lng returns the value of the "lng" field in the mutation.
func (m *AttendanceMutation) Lng() (r float64, exists bool) {
	v := m.lng
	if v == nil {
		return
	}
	return *v, true
}

// OldLng returns the old "lng" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldLng(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLng: %w", err)
	}
	return oldValue.Lng, nil
}

// AddLng adds f to the "lng" field.
func (m *AttendanceMutation) AddLng(f float64) {
	if m.addlng != nil {
		*m.addlng += f
	} else {
		m.addlng = &f
	}
}

// AddedLng returns the value that was added to the "lng" field in this mutation.
func (m *AttendanceMutation) AddedLng() (r float64, exists bool) {
	v := m.addlng
	if v == nil {
		return
	}
	return *v, true
}

// ClearLng clears the value of the "lng" field.
func (m *AttendanceMutation) ClearLng() {
	m.lng = nil
	m.addlng = nil
	m.clearedFields[attendance.FieldLng] = struct{}{}
}

// LngCleared returns if the "lng" field was cleared in this mutation.
func (m *AttendanceMutation) LngCleared() bool {
	_, ok := m.clearedFields[attendance.FieldLng]
	return ok
}

// ResetLng resets all changes to the "lng" field.
func (m *AttendanceMutation) ResetLng() {
	m.lng = nil
	m.addlng = nil
	delete(m.clearedFields, attendance.FieldLng)
}

// SetLat sets the "lat" field.
func (m *AttendanceMutation) SetLat(f float64) {
	m.lat = &f
	m.addlat = nil
}

// Lat returns the value of the "lat" field in the mutation.
func (m *AttendanceMutation) Lat() (r float64, exists bool) {
	v := m.lat
	if v == nil {
		return
	}
	return *v, true
}

// OldLat returns the old "lat" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldLat(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLat: %w", err)
	}
	return oldValue.Lat, nil
}

// AddLat adds f to the "lat" field.
func (m *AttendanceMutation) AddLat(f float64) {
	if m.addlat != nil {
		*m.addlat += f
	} else {
		m.addlat = &f
	}
}

// AddedLat returns the value that was added to the "lat" field in this mutation.
func (m *AttendanceMutation) AddedLat() (r float64, exists bool) {
	v := m.addlat
	if v == nil {
		return
	}
	return *v, true
}

// ClearLat clears the value of the "lat" field.
func (m *AttendanceMutation) ClearLat() {
	m.lat = nil
	m.addlat = nil
	m.clearedFields[attendance.FieldLat] = struct{}{}
}

// LatCleared returns if the "lat" field was cleared in this mutation.
func (m *AttendanceMutation) LatCleared() bool {
	_, ok := m.clearedFields[attendance.FieldLat]
	return ok
}

// ResetLat resets all changes to the "lat" field.
func (m *AttendanceMutation) ResetLat() {
	m.lat = nil
	m.addlat = nil
	delete(m.clearedFields, attendance.FieldLat)
}

// SetAddress sets the "address" field.
func (m *AttendanceMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *AttendanceMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *AttendanceMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[attendance.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *AttendanceMutation) AddressCleared() bool {
	_, ok := m.clearedFields[attendance.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *AttendanceMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, attendance.FieldAddress)
}

// SetDistance sets the "distance" field.
func (m *AttendanceMutation) SetDistance(f float64) {
	m.distance = &f
	m.adddistance = nil
}

// Distance returns the value of the "distance" field in the mutation.
func (m *AttendanceMutation) Distance() (r float64, exists bool) {
	v := m.distance
	if v == nil {
		return
	}
	return *v, true
}

// OldDistance returns the old "distance" field's value of the Attendance entity.
// If the Attendance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendanceMutation) OldDistance(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDistance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDistance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDistance: %w", err)
	}
	return oldValue.Distance, nil
}

// AddDistance adds f to the "distance" field.
func (m *AttendanceMutation) AddDistance(f float64) {
	if m.adddistance != nil {
		*m.adddistance += f
	} else {
		m.adddistance = &f
	}
}

// AddedDistance returns the value that was added to the "distance" field in this mutation.
func (m *AttendanceMutation) AddedDistance() (r float64, exists bool) {
	v := m.adddistance
	if v == nil {
		return
	}
	return *v, true
}

// ClearDistance clears the value of the "distance" field.
func (m *AttendanceMutation) ClearDistance() {
	m.distance = nil
	m.adddistance = nil
	m.clearedFields[attendance.FieldDistance] = struct{}{}
}

// DistanceCleared returns if the "distance" field was cleared in this mutation.
func (m *AttendanceMutation) DistanceCleared() bool {
	_, ok := m.clearedFields[attendance.FieldDistance]
	return ok
}

// ResetDistance resets all changes to the "distance" field.
func (m *AttendanceMutation) ResetDistance() {
	m.distance = nil
	m.adddistance = nil
	delete(m.clearedFields, attendance.FieldDistance)
}

// ClearStore clears the "store" edge to the Store entity.
func (m *AttendanceMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *AttendanceMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *AttendanceMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *AttendanceMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *AttendanceMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *AttendanceMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *AttendanceMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *AttendanceMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// Where appends a list predicates to the AttendanceMutation builder.
func (m *AttendanceMutation) Where(ps ...predicate.Attendance) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AttendanceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Attendance).
func (m *AttendanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttendanceMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, attendance.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, attendance.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, attendance.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, attendance.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, attendance.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, attendance.FieldRemark)
	}
	if m.store != nil {
		fields = append(fields, attendance.FieldStoreID)
	}
	if m.employee != nil {
		fields = append(fields, attendance.FieldEmployeeID)
	}
	if m.inventory != nil {
		fields = append(fields, attendance.FieldInventory)
	}
	if m.photo != nil {
		fields = append(fields, attendance.FieldPhoto)
	}
	if m.duty != nil {
		fields = append(fields, attendance.FieldDuty)
	}
	if m.date != nil {
		fields = append(fields, attendance.FieldDate)
	}
	if m.lng != nil {
		fields = append(fields, attendance.FieldLng)
	}
	if m.lat != nil {
		fields = append(fields, attendance.FieldLat)
	}
	if m.address != nil {
		fields = append(fields, attendance.FieldAddress)
	}
	if m.distance != nil {
		fields = append(fields, attendance.FieldDistance)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttendanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attendance.FieldCreatedAt:
		return m.CreatedAt()
	case attendance.FieldUpdatedAt:
		return m.UpdatedAt()
	case attendance.FieldDeletedAt:
		return m.DeletedAt()
	case attendance.FieldCreator:
		return m.Creator()
	case attendance.FieldLastModifier:
		return m.LastModifier()
	case attendance.FieldRemark:
		return m.Remark()
	case attendance.FieldStoreID:
		return m.StoreID()
	case attendance.FieldEmployeeID:
		return m.EmployeeID()
	case attendance.FieldInventory:
		return m.Inventory()
	case attendance.FieldPhoto:
		return m.Photo()
	case attendance.FieldDuty:
		return m.Duty()
	case attendance.FieldDate:
		return m.Date()
	case attendance.FieldLng:
		return m.Lng()
	case attendance.FieldLat:
		return m.Lat()
	case attendance.FieldAddress:
		return m.Address()
	case attendance.FieldDistance:
		return m.Distance()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttendanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attendance.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case attendance.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case attendance.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case attendance.FieldCreator:
		return m.OldCreator(ctx)
	case attendance.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case attendance.FieldRemark:
		return m.OldRemark(ctx)
	case attendance.FieldStoreID:
		return m.OldStoreID(ctx)
	case attendance.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case attendance.FieldInventory:
		return m.OldInventory(ctx)
	case attendance.FieldPhoto:
		return m.OldPhoto(ctx)
	case attendance.FieldDuty:
		return m.OldDuty(ctx)
	case attendance.FieldDate:
		return m.OldDate(ctx)
	case attendance.FieldLng:
		return m.OldLng(ctx)
	case attendance.FieldLat:
		return m.OldLat(ctx)
	case attendance.FieldAddress:
		return m.OldAddress(ctx)
	case attendance.FieldDistance:
		return m.OldDistance(ctx)
	}
	return nil, fmt.Errorf("unknown Attendance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttendanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attendance.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case attendance.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case attendance.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case attendance.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case attendance.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case attendance.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case attendance.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case attendance.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case attendance.FieldInventory:
		v, ok := value.([]model.AttendanceInventory)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInventory(v)
		return nil
	case attendance.FieldPhoto:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoto(v)
		return nil
	case attendance.FieldDuty:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuty(v)
		return nil
	case attendance.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case attendance.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLng(v)
		return nil
	case attendance.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLat(v)
		return nil
	case attendance.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case attendance.FieldDistance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDistance(v)
		return nil
	}
	return fmt.Errorf("unknown Attendance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttendanceMutation) AddedFields() []string {
	var fields []string
	if m.addlng != nil {
		fields = append(fields, attendance.FieldLng)
	}
	if m.addlat != nil {
		fields = append(fields, attendance.FieldLat)
	}
	if m.adddistance != nil {
		fields = append(fields, attendance.FieldDistance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttendanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case attendance.FieldLng:
		return m.AddedLng()
	case attendance.FieldLat:
		return m.AddedLat()
	case attendance.FieldDistance:
		return m.AddedDistance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttendanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case attendance.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLng(v)
		return nil
	case attendance.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLat(v)
		return nil
	case attendance.FieldDistance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDistance(v)
		return nil
	}
	return fmt.Errorf("unknown Attendance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttendanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(attendance.FieldDeletedAt) {
		fields = append(fields, attendance.FieldDeletedAt)
	}
	if m.FieldCleared(attendance.FieldCreator) {
		fields = append(fields, attendance.FieldCreator)
	}
	if m.FieldCleared(attendance.FieldLastModifier) {
		fields = append(fields, attendance.FieldLastModifier)
	}
	if m.FieldCleared(attendance.FieldRemark) {
		fields = append(fields, attendance.FieldRemark)
	}
	if m.FieldCleared(attendance.FieldInventory) {
		fields = append(fields, attendance.FieldInventory)
	}
	if m.FieldCleared(attendance.FieldPhoto) {
		fields = append(fields, attendance.FieldPhoto)
	}
	if m.FieldCleared(attendance.FieldLng) {
		fields = append(fields, attendance.FieldLng)
	}
	if m.FieldCleared(attendance.FieldLat) {
		fields = append(fields, attendance.FieldLat)
	}
	if m.FieldCleared(attendance.FieldAddress) {
		fields = append(fields, attendance.FieldAddress)
	}
	if m.FieldCleared(attendance.FieldDistance) {
		fields = append(fields, attendance.FieldDistance)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttendanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttendanceMutation) ClearField(name string) error {
	switch name {
	case attendance.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case attendance.FieldCreator:
		m.ClearCreator()
		return nil
	case attendance.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case attendance.FieldRemark:
		m.ClearRemark()
		return nil
	case attendance.FieldInventory:
		m.ClearInventory()
		return nil
	case attendance.FieldPhoto:
		m.ClearPhoto()
		return nil
	case attendance.FieldLng:
		m.ClearLng()
		return nil
	case attendance.FieldLat:
		m.ClearLat()
		return nil
	case attendance.FieldAddress:
		m.ClearAddress()
		return nil
	case attendance.FieldDistance:
		m.ClearDistance()
		return nil
	}
	return fmt.Errorf("unknown Attendance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttendanceMutation) ResetField(name string) error {
	switch name {
	case attendance.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case attendance.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case attendance.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case attendance.FieldCreator:
		m.ResetCreator()
		return nil
	case attendance.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case attendance.FieldRemark:
		m.ResetRemark()
		return nil
	case attendance.FieldStoreID:
		m.ResetStoreID()
		return nil
	case attendance.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case attendance.FieldInventory:
		m.ResetInventory()
		return nil
	case attendance.FieldPhoto:
		m.ResetPhoto()
		return nil
	case attendance.FieldDuty:
		m.ResetDuty()
		return nil
	case attendance.FieldDate:
		m.ResetDate()
		return nil
	case attendance.FieldLng:
		m.ResetLng()
		return nil
	case attendance.FieldLat:
		m.ResetLat()
		return nil
	case attendance.FieldAddress:
		m.ResetAddress()
		return nil
	case attendance.FieldDistance:
		m.ResetDistance()
		return nil
	}
	return fmt.Errorf("unknown Attendance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttendanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.store != nil {
		edges = append(edges, attendance.EdgeStore)
	}
	if m.employee != nil {
		edges = append(edges, attendance.EdgeEmployee)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttendanceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attendance.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case attendance.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttendanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttendanceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttendanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedstore {
		edges = append(edges, attendance.EdgeStore)
	}
	if m.clearedemployee {
		edges = append(edges, attendance.EdgeEmployee)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttendanceMutation) EdgeCleared(name string) bool {
	switch name {
	case attendance.EdgeStore:
		return m.clearedstore
	case attendance.EdgeEmployee:
		return m.clearedemployee
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttendanceMutation) ClearEdge(name string) error {
	switch name {
	case attendance.EdgeStore:
		m.ClearStore()
		return nil
	case attendance.EdgeEmployee:
		m.ClearEmployee()
		return nil
	}
	return fmt.Errorf("unknown Attendance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttendanceMutation) ResetEdge(name string) error {
	switch name {
	case attendance.EdgeStore:
		m.ResetStore()
		return nil
	case attendance.EdgeEmployee:
		m.ResetEmployee()
		return nil
	}
	return fmt.Errorf("unknown Attendance edge %s", name)
}

