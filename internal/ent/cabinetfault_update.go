// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CabinetFaultUpdate is the builder for updating CabinetFault entities.
type CabinetFaultUpdate struct {
	config
	hooks     []Hook
	mutation  *CabinetFaultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CabinetFaultUpdate builder.
func (cfu *CabinetFaultUpdate) Where(ps ...predicate.CabinetFault) *CabinetFaultUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetUpdatedAt sets the "updated_at" field.
func (cfu *CabinetFaultUpdate) SetUpdatedAt(t time.Time) *CabinetFaultUpdate {
	cfu.mutation.SetUpdatedAt(t)
	return cfu
}

// SetDeletedAt sets the "deleted_at" field.
func (cfu *CabinetFaultUpdate) SetDeletedAt(t time.Time) *CabinetFaultUpdate {
	cfu.mutation.SetDeletedAt(t)
	return cfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableDeletedAt(t *time.Time) *CabinetFaultUpdate {
	if t != nil {
		cfu.SetDeletedAt(*t)
	}
	return cfu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cfu *CabinetFaultUpdate) ClearDeletedAt() *CabinetFaultUpdate {
	cfu.mutation.ClearDeletedAt()
	return cfu
}

// SetLastModifier sets the "last_modifier" field.
func (cfu *CabinetFaultUpdate) SetLastModifier(m *model.Modifier) *CabinetFaultUpdate {
	cfu.mutation.SetLastModifier(m)
	return cfu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cfu *CabinetFaultUpdate) ClearLastModifier() *CabinetFaultUpdate {
	cfu.mutation.ClearLastModifier()
	return cfu
}

// SetRemark sets the "remark" field.
func (cfu *CabinetFaultUpdate) SetRemark(s string) *CabinetFaultUpdate {
	cfu.mutation.SetRemark(s)
	return cfu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableRemark(s *string) *CabinetFaultUpdate {
	if s != nil {
		cfu.SetRemark(*s)
	}
	return cfu
}

// ClearRemark clears the value of the "remark" field.
func (cfu *CabinetFaultUpdate) ClearRemark() *CabinetFaultUpdate {
	cfu.mutation.ClearRemark()
	return cfu
}

// SetCityID sets the "city_id" field.
func (cfu *CabinetFaultUpdate) SetCityID(u uint64) *CabinetFaultUpdate {
	cfu.mutation.SetCityID(u)
	return cfu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableCityID(u *uint64) *CabinetFaultUpdate {
	if u != nil {
		cfu.SetCityID(*u)
	}
	return cfu
}

// SetStatus sets the "status" field.
func (cfu *CabinetFaultUpdate) SetStatus(u uint8) *CabinetFaultUpdate {
	cfu.mutation.ResetStatus()
	cfu.mutation.SetStatus(u)
	return cfu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableStatus(u *uint8) *CabinetFaultUpdate {
	if u != nil {
		cfu.SetStatus(*u)
	}
	return cfu
}

// AddStatus adds u to the "status" field.
func (cfu *CabinetFaultUpdate) AddStatus(u int8) *CabinetFaultUpdate {
	cfu.mutation.AddStatus(u)
	return cfu
}

// SetBranchID sets the "branch_id" field.
func (cfu *CabinetFaultUpdate) SetBranchID(u uint64) *CabinetFaultUpdate {
	cfu.mutation.SetBranchID(u)
	return cfu
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableBranchID(u *uint64) *CabinetFaultUpdate {
	if u != nil {
		cfu.SetBranchID(*u)
	}
	return cfu
}

// SetCabinetID sets the "cabinet_id" field.
func (cfu *CabinetFaultUpdate) SetCabinetID(u uint64) *CabinetFaultUpdate {
	cfu.mutation.SetCabinetID(u)
	return cfu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableCabinetID(u *uint64) *CabinetFaultUpdate {
	if u != nil {
		cfu.SetCabinetID(*u)
	}
	return cfu
}

// SetRiderID sets the "rider_id" field.
func (cfu *CabinetFaultUpdate) SetRiderID(u uint64) *CabinetFaultUpdate {
	cfu.mutation.SetRiderID(u)
	return cfu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableRiderID(u *uint64) *CabinetFaultUpdate {
	if u != nil {
		cfu.SetRiderID(*u)
	}
	return cfu
}

// SetFault sets the "fault" field.
func (cfu *CabinetFaultUpdate) SetFault(s string) *CabinetFaultUpdate {
	cfu.mutation.SetFault(s)
	return cfu
}

// SetNillableFault sets the "fault" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableFault(s *string) *CabinetFaultUpdate {
	if s != nil {
		cfu.SetFault(*s)
	}
	return cfu
}

// ClearFault clears the value of the "fault" field.
func (cfu *CabinetFaultUpdate) ClearFault() *CabinetFaultUpdate {
	cfu.mutation.ClearFault()
	return cfu
}

// SetAttachments sets the "attachments" field.
func (cfu *CabinetFaultUpdate) SetAttachments(s []string) *CabinetFaultUpdate {
	cfu.mutation.SetAttachments(s)
	return cfu
}

// AppendAttachments appends s to the "attachments" field.
func (cfu *CabinetFaultUpdate) AppendAttachments(s []string) *CabinetFaultUpdate {
	cfu.mutation.AppendAttachments(s)
	return cfu
}

// ClearAttachments clears the value of the "attachments" field.
func (cfu *CabinetFaultUpdate) ClearAttachments() *CabinetFaultUpdate {
	cfu.mutation.ClearAttachments()
	return cfu
}

// SetDescription sets the "description" field.
func (cfu *CabinetFaultUpdate) SetDescription(s string) *CabinetFaultUpdate {
	cfu.mutation.SetDescription(s)
	return cfu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cfu *CabinetFaultUpdate) SetNillableDescription(s *string) *CabinetFaultUpdate {
	if s != nil {
		cfu.SetDescription(*s)
	}
	return cfu
}

// ClearDescription clears the value of the "description" field.
func (cfu *CabinetFaultUpdate) ClearDescription() *CabinetFaultUpdate {
	cfu.mutation.ClearDescription()
	return cfu
}

// SetCity sets the "city" edge to the City entity.
func (cfu *CabinetFaultUpdate) SetCity(c *City) *CabinetFaultUpdate {
	return cfu.SetCityID(c.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (cfu *CabinetFaultUpdate) SetBranch(b *Branch) *CabinetFaultUpdate {
	return cfu.SetBranchID(b.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (cfu *CabinetFaultUpdate) SetCabinet(c *Cabinet) *CabinetFaultUpdate {
	return cfu.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (cfu *CabinetFaultUpdate) SetRider(r *Rider) *CabinetFaultUpdate {
	return cfu.SetRiderID(r.ID)
}

// Mutation returns the CabinetFaultMutation object of the builder.
func (cfu *CabinetFaultUpdate) Mutation() *CabinetFaultMutation {
	return cfu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (cfu *CabinetFaultUpdate) ClearCity() *CabinetFaultUpdate {
	cfu.mutation.ClearCity()
	return cfu
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (cfu *CabinetFaultUpdate) ClearBranch() *CabinetFaultUpdate {
	cfu.mutation.ClearBranch()
	return cfu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (cfu *CabinetFaultUpdate) ClearCabinet() *CabinetFaultUpdate {
	cfu.mutation.ClearCabinet()
	return cfu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cfu *CabinetFaultUpdate) ClearRider() *CabinetFaultUpdate {
	cfu.mutation.ClearRider()
	return cfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CabinetFaultUpdate) Save(ctx context.Context) (int, error) {
	if err := cfu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cfu.sqlSave, cfu.mutation, cfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CabinetFaultUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CabinetFaultUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CabinetFaultUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfu *CabinetFaultUpdate) defaults() error {
	if _, ok := cfu.mutation.UpdatedAt(); !ok {
		if cabinetfault.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinetfault.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cabinetfault.UpdateDefaultUpdatedAt()
		cfu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cfu *CabinetFaultUpdate) check() error {
	if _, ok := cfu.mutation.CityID(); cfu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetFault.city"`)
	}
	if _, ok := cfu.mutation.BranchID(); cfu.mutation.BranchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetFault.branch"`)
	}
	if _, ok := cfu.mutation.CabinetID(); cfu.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetFault.cabinet"`)
	}
	if _, ok := cfu.mutation.RiderID(); cfu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetFault.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cfu *CabinetFaultUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CabinetFaultUpdate {
	cfu.modifiers = append(cfu.modifiers, modifiers...)
	return cfu
}

func (cfu *CabinetFaultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cabinetfault.Table, cabinetfault.Columns, sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64))
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.UpdatedAt(); ok {
		_spec.SetField(cabinetfault.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cfu.mutation.DeletedAt(); ok {
		_spec.SetField(cabinetfault.FieldDeletedAt, field.TypeTime, value)
	}
	if cfu.mutation.DeletedAtCleared() {
		_spec.ClearField(cabinetfault.FieldDeletedAt, field.TypeTime)
	}
	if cfu.mutation.CreatorCleared() {
		_spec.ClearField(cabinetfault.FieldCreator, field.TypeJSON)
	}
	if value, ok := cfu.mutation.LastModifier(); ok {
		_spec.SetField(cabinetfault.FieldLastModifier, field.TypeJSON, value)
	}
	if cfu.mutation.LastModifierCleared() {
		_spec.ClearField(cabinetfault.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cfu.mutation.Remark(); ok {
		_spec.SetField(cabinetfault.FieldRemark, field.TypeString, value)
	}
	if cfu.mutation.RemarkCleared() {
		_spec.ClearField(cabinetfault.FieldRemark, field.TypeString)
	}
	if value, ok := cfu.mutation.Status(); ok {
		_spec.SetField(cabinetfault.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cfu.mutation.AddedStatus(); ok {
		_spec.AddField(cabinetfault.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cfu.mutation.Fault(); ok {
		_spec.SetField(cabinetfault.FieldFault, field.TypeString, value)
	}
	if cfu.mutation.FaultCleared() {
		_spec.ClearField(cabinetfault.FieldFault, field.TypeString)
	}
	if value, ok := cfu.mutation.Attachments(); ok {
		_spec.SetField(cabinetfault.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := cfu.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cabinetfault.FieldAttachments, value)
		})
	}
	if cfu.mutation.AttachmentsCleared() {
		_spec.ClearField(cabinetfault.FieldAttachments, field.TypeJSON)
	}
	if value, ok := cfu.mutation.Description(); ok {
		_spec.SetField(cabinetfault.FieldDescription, field.TypeString, value)
	}
	if cfu.mutation.DescriptionCleared() {
		_spec.ClearField(cabinetfault.FieldDescription, field.TypeString)
	}
	if cfu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetfault.CityTable,
			Columns: []string{cabinetfault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetfault.CityTable,
			Columns: []string{cabinetfault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfu.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.BranchTable,
			Columns: []string{cabinetfault.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.BranchTable,
			Columns: []string{cabinetfault.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.CabinetTable,
			Columns: []string{cabinetfault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.CabinetTable,
			Columns: []string{cabinetfault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.RiderTable,
			Columns: []string{cabinetfault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.RiderTable,
			Columns: []string{cabinetfault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cabinetfault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cfu.mutation.done = true
	return n, nil
}

// CabinetFaultUpdateOne is the builder for updating a single CabinetFault entity.
type CabinetFaultUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CabinetFaultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cfuo *CabinetFaultUpdateOne) SetUpdatedAt(t time.Time) *CabinetFaultUpdateOne {
	cfuo.mutation.SetUpdatedAt(t)
	return cfuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cfuo *CabinetFaultUpdateOne) SetDeletedAt(t time.Time) *CabinetFaultUpdateOne {
	cfuo.mutation.SetDeletedAt(t)
	return cfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableDeletedAt(t *time.Time) *CabinetFaultUpdateOne {
	if t != nil {
		cfuo.SetDeletedAt(*t)
	}
	return cfuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cfuo *CabinetFaultUpdateOne) ClearDeletedAt() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearDeletedAt()
	return cfuo
}

// SetLastModifier sets the "last_modifier" field.
func (cfuo *CabinetFaultUpdateOne) SetLastModifier(m *model.Modifier) *CabinetFaultUpdateOne {
	cfuo.mutation.SetLastModifier(m)
	return cfuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cfuo *CabinetFaultUpdateOne) ClearLastModifier() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearLastModifier()
	return cfuo
}

// SetRemark sets the "remark" field.
func (cfuo *CabinetFaultUpdateOne) SetRemark(s string) *CabinetFaultUpdateOne {
	cfuo.mutation.SetRemark(s)
	return cfuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableRemark(s *string) *CabinetFaultUpdateOne {
	if s != nil {
		cfuo.SetRemark(*s)
	}
	return cfuo
}

// ClearRemark clears the value of the "remark" field.
func (cfuo *CabinetFaultUpdateOne) ClearRemark() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearRemark()
	return cfuo
}

// SetCityID sets the "city_id" field.
func (cfuo *CabinetFaultUpdateOne) SetCityID(u uint64) *CabinetFaultUpdateOne {
	cfuo.mutation.SetCityID(u)
	return cfuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableCityID(u *uint64) *CabinetFaultUpdateOne {
	if u != nil {
		cfuo.SetCityID(*u)
	}
	return cfuo
}

// SetStatus sets the "status" field.
func (cfuo *CabinetFaultUpdateOne) SetStatus(u uint8) *CabinetFaultUpdateOne {
	cfuo.mutation.ResetStatus()
	cfuo.mutation.SetStatus(u)
	return cfuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableStatus(u *uint8) *CabinetFaultUpdateOne {
	if u != nil {
		cfuo.SetStatus(*u)
	}
	return cfuo
}

// AddStatus adds u to the "status" field.
func (cfuo *CabinetFaultUpdateOne) AddStatus(u int8) *CabinetFaultUpdateOne {
	cfuo.mutation.AddStatus(u)
	return cfuo
}

// SetBranchID sets the "branch_id" field.
func (cfuo *CabinetFaultUpdateOne) SetBranchID(u uint64) *CabinetFaultUpdateOne {
	cfuo.mutation.SetBranchID(u)
	return cfuo
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableBranchID(u *uint64) *CabinetFaultUpdateOne {
	if u != nil {
		cfuo.SetBranchID(*u)
	}
	return cfuo
}

// SetCabinetID sets the "cabinet_id" field.
func (cfuo *CabinetFaultUpdateOne) SetCabinetID(u uint64) *CabinetFaultUpdateOne {
	cfuo.mutation.SetCabinetID(u)
	return cfuo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableCabinetID(u *uint64) *CabinetFaultUpdateOne {
	if u != nil {
		cfuo.SetCabinetID(*u)
	}
	return cfuo
}

// SetRiderID sets the "rider_id" field.
func (cfuo *CabinetFaultUpdateOne) SetRiderID(u uint64) *CabinetFaultUpdateOne {
	cfuo.mutation.SetRiderID(u)
	return cfuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableRiderID(u *uint64) *CabinetFaultUpdateOne {
	if u != nil {
		cfuo.SetRiderID(*u)
	}
	return cfuo
}

// SetFault sets the "fault" field.
func (cfuo *CabinetFaultUpdateOne) SetFault(s string) *CabinetFaultUpdateOne {
	cfuo.mutation.SetFault(s)
	return cfuo
}

// SetNillableFault sets the "fault" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableFault(s *string) *CabinetFaultUpdateOne {
	if s != nil {
		cfuo.SetFault(*s)
	}
	return cfuo
}

// ClearFault clears the value of the "fault" field.
func (cfuo *CabinetFaultUpdateOne) ClearFault() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearFault()
	return cfuo
}

// SetAttachments sets the "attachments" field.
func (cfuo *CabinetFaultUpdateOne) SetAttachments(s []string) *CabinetFaultUpdateOne {
	cfuo.mutation.SetAttachments(s)
	return cfuo
}

// AppendAttachments appends s to the "attachments" field.
func (cfuo *CabinetFaultUpdateOne) AppendAttachments(s []string) *CabinetFaultUpdateOne {
	cfuo.mutation.AppendAttachments(s)
	return cfuo
}

// ClearAttachments clears the value of the "attachments" field.
func (cfuo *CabinetFaultUpdateOne) ClearAttachments() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearAttachments()
	return cfuo
}

// SetDescription sets the "description" field.
func (cfuo *CabinetFaultUpdateOne) SetDescription(s string) *CabinetFaultUpdateOne {
	cfuo.mutation.SetDescription(s)
	return cfuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cfuo *CabinetFaultUpdateOne) SetNillableDescription(s *string) *CabinetFaultUpdateOne {
	if s != nil {
		cfuo.SetDescription(*s)
	}
	return cfuo
}

// ClearDescription clears the value of the "description" field.
func (cfuo *CabinetFaultUpdateOne) ClearDescription() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearDescription()
	return cfuo
}

// SetCity sets the "city" edge to the City entity.
func (cfuo *CabinetFaultUpdateOne) SetCity(c *City) *CabinetFaultUpdateOne {
	return cfuo.SetCityID(c.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (cfuo *CabinetFaultUpdateOne) SetBranch(b *Branch) *CabinetFaultUpdateOne {
	return cfuo.SetBranchID(b.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (cfuo *CabinetFaultUpdateOne) SetCabinet(c *Cabinet) *CabinetFaultUpdateOne {
	return cfuo.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (cfuo *CabinetFaultUpdateOne) SetRider(r *Rider) *CabinetFaultUpdateOne {
	return cfuo.SetRiderID(r.ID)
}

// Mutation returns the CabinetFaultMutation object of the builder.
func (cfuo *CabinetFaultUpdateOne) Mutation() *CabinetFaultMutation {
	return cfuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (cfuo *CabinetFaultUpdateOne) ClearCity() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearCity()
	return cfuo
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (cfuo *CabinetFaultUpdateOne) ClearBranch() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearBranch()
	return cfuo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (cfuo *CabinetFaultUpdateOne) ClearCabinet() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearCabinet()
	return cfuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cfuo *CabinetFaultUpdateOne) ClearRider() *CabinetFaultUpdateOne {
	cfuo.mutation.ClearRider()
	return cfuo
}

// Where appends a list predicates to the CabinetFaultUpdate builder.
func (cfuo *CabinetFaultUpdateOne) Where(ps ...predicate.CabinetFault) *CabinetFaultUpdateOne {
	cfuo.mutation.Where(ps...)
	return cfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *CabinetFaultUpdateOne) Select(field string, fields ...string) *CabinetFaultUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated CabinetFault entity.
func (cfuo *CabinetFaultUpdateOne) Save(ctx context.Context) (*CabinetFault, error) {
	if err := cfuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cfuo.sqlSave, cfuo.mutation, cfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CabinetFaultUpdateOne) SaveX(ctx context.Context) *CabinetFault {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CabinetFaultUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CabinetFaultUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfuo *CabinetFaultUpdateOne) defaults() error {
	if _, ok := cfuo.mutation.UpdatedAt(); !ok {
		if cabinetfault.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinetfault.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cabinetfault.UpdateDefaultUpdatedAt()
		cfuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cfuo *CabinetFaultUpdateOne) check() error {
	if _, ok := cfuo.mutation.CityID(); cfuo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetFault.city"`)
	}
	if _, ok := cfuo.mutation.BranchID(); cfuo.mutation.BranchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetFault.branch"`)
	}
	if _, ok := cfuo.mutation.CabinetID(); cfuo.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetFault.cabinet"`)
	}
	if _, ok := cfuo.mutation.RiderID(); cfuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetFault.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cfuo *CabinetFaultUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CabinetFaultUpdateOne {
	cfuo.modifiers = append(cfuo.modifiers, modifiers...)
	return cfuo
}

func (cfuo *CabinetFaultUpdateOne) sqlSave(ctx context.Context) (_node *CabinetFault, err error) {
	if err := cfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cabinetfault.Table, cabinetfault.Columns, sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64))
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CabinetFault.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cabinetfault.FieldID)
		for _, f := range fields {
			if !cabinetfault.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cabinetfault.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cabinetfault.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cfuo.mutation.DeletedAt(); ok {
		_spec.SetField(cabinetfault.FieldDeletedAt, field.TypeTime, value)
	}
	if cfuo.mutation.DeletedAtCleared() {
		_spec.ClearField(cabinetfault.FieldDeletedAt, field.TypeTime)
	}
	if cfuo.mutation.CreatorCleared() {
		_spec.ClearField(cabinetfault.FieldCreator, field.TypeJSON)
	}
	if value, ok := cfuo.mutation.LastModifier(); ok {
		_spec.SetField(cabinetfault.FieldLastModifier, field.TypeJSON, value)
	}
	if cfuo.mutation.LastModifierCleared() {
		_spec.ClearField(cabinetfault.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cfuo.mutation.Remark(); ok {
		_spec.SetField(cabinetfault.FieldRemark, field.TypeString, value)
	}
	if cfuo.mutation.RemarkCleared() {
		_spec.ClearField(cabinetfault.FieldRemark, field.TypeString)
	}
	if value, ok := cfuo.mutation.Status(); ok {
		_spec.SetField(cabinetfault.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cfuo.mutation.AddedStatus(); ok {
		_spec.AddField(cabinetfault.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cfuo.mutation.Fault(); ok {
		_spec.SetField(cabinetfault.FieldFault, field.TypeString, value)
	}
	if cfuo.mutation.FaultCleared() {
		_spec.ClearField(cabinetfault.FieldFault, field.TypeString)
	}
	if value, ok := cfuo.mutation.Attachments(); ok {
		_spec.SetField(cabinetfault.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := cfuo.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cabinetfault.FieldAttachments, value)
		})
	}
	if cfuo.mutation.AttachmentsCleared() {
		_spec.ClearField(cabinetfault.FieldAttachments, field.TypeJSON)
	}
	if value, ok := cfuo.mutation.Description(); ok {
		_spec.SetField(cabinetfault.FieldDescription, field.TypeString, value)
	}
	if cfuo.mutation.DescriptionCleared() {
		_spec.ClearField(cabinetfault.FieldDescription, field.TypeString)
	}
	if cfuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetfault.CityTable,
			Columns: []string{cabinetfault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetfault.CityTable,
			Columns: []string{cabinetfault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfuo.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.BranchTable,
			Columns: []string{cabinetfault.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.BranchTable,
			Columns: []string{cabinetfault.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfuo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.CabinetTable,
			Columns: []string{cabinetfault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.CabinetTable,
			Columns: []string{cabinetfault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cfuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.RiderTable,
			Columns: []string{cabinetfault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cfuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.RiderTable,
			Columns: []string{cabinetfault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cfuo.modifiers...)
	_node = &CabinetFault{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cabinetfault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cfuo.mutation.done = true
	return _node, nil
}
