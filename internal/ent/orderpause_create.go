// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderpause"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// OrderPauseCreate is the builder for creating a OrderPause entity.
type OrderPauseCreate struct {
	config
	mutation *OrderPauseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (opc *OrderPauseCreate) SetCreatedAt(t time.Time) *OrderPauseCreate {
	opc.mutation.SetCreatedAt(t)
	return opc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (opc *OrderPauseCreate) SetNillableCreatedAt(t *time.Time) *OrderPauseCreate {
	if t != nil {
		opc.SetCreatedAt(*t)
	}
	return opc
}

// SetUpdatedAt sets the "updated_at" field.
func (opc *OrderPauseCreate) SetUpdatedAt(t time.Time) *OrderPauseCreate {
	opc.mutation.SetUpdatedAt(t)
	return opc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (opc *OrderPauseCreate) SetNillableUpdatedAt(t *time.Time) *OrderPauseCreate {
	if t != nil {
		opc.SetUpdatedAt(*t)
	}
	return opc
}

// SetDeletedAt sets the "deleted_at" field.
func (opc *OrderPauseCreate) SetDeletedAt(t time.Time) *OrderPauseCreate {
	opc.mutation.SetDeletedAt(t)
	return opc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opc *OrderPauseCreate) SetNillableDeletedAt(t *time.Time) *OrderPauseCreate {
	if t != nil {
		opc.SetDeletedAt(*t)
	}
	return opc
}

// SetCreator sets the "creator" field.
func (opc *OrderPauseCreate) SetCreator(m *model.Modifier) *OrderPauseCreate {
	opc.mutation.SetCreator(m)
	return opc
}

// SetLastModifier sets the "last_modifier" field.
func (opc *OrderPauseCreate) SetLastModifier(m *model.Modifier) *OrderPauseCreate {
	opc.mutation.SetLastModifier(m)
	return opc
}

// SetRemark sets the "remark" field.
func (opc *OrderPauseCreate) SetRemark(s string) *OrderPauseCreate {
	opc.mutation.SetRemark(s)
	return opc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (opc *OrderPauseCreate) SetNillableRemark(s *string) *OrderPauseCreate {
	if s != nil {
		opc.SetRemark(*s)
	}
	return opc
}

// SetRiderID sets the "rider_id" field.
func (opc *OrderPauseCreate) SetRiderID(u uint64) *OrderPauseCreate {
	opc.mutation.SetRiderID(u)
	return opc
}

// SetOrderID sets the "order_id" field.
func (opc *OrderPauseCreate) SetOrderID(u uint64) *OrderPauseCreate {
	opc.mutation.SetOrderID(u)
	return opc
}

// SetStartAt sets the "start_at" field.
func (opc *OrderPauseCreate) SetStartAt(t time.Time) *OrderPauseCreate {
	opc.mutation.SetStartAt(t)
	return opc
}

// SetEndAt sets the "end_at" field.
func (opc *OrderPauseCreate) SetEndAt(t time.Time) *OrderPauseCreate {
	opc.mutation.SetEndAt(t)
	return opc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (opc *OrderPauseCreate) SetNillableEndAt(t *time.Time) *OrderPauseCreate {
	if t != nil {
		opc.SetEndAt(*t)
	}
	return opc
}

// SetDays sets the "days" field.
func (opc *OrderPauseCreate) SetDays(i int) *OrderPauseCreate {
	opc.mutation.SetDays(i)
	return opc
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (opc *OrderPauseCreate) SetNillableDays(i *int) *OrderPauseCreate {
	if i != nil {
		opc.SetDays(*i)
	}
	return opc
}

// SetRider sets the "rider" edge to the Rider entity.
func (opc *OrderPauseCreate) SetRider(r *Rider) *OrderPauseCreate {
	return opc.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (opc *OrderPauseCreate) SetOrder(o *Order) *OrderPauseCreate {
	return opc.SetOrderID(o.ID)
}

// Mutation returns the OrderPauseMutation object of the builder.
func (opc *OrderPauseCreate) Mutation() *OrderPauseMutation {
	return opc.mutation
}

// Save creates the OrderPause in the database.
func (opc *OrderPauseCreate) Save(ctx context.Context) (*OrderPause, error) {
	var (
		err  error
		node *OrderPause
	)
	if err := opc.defaults(); err != nil {
		return nil, err
	}
	if len(opc.hooks) == 0 {
		if err = opc.check(); err != nil {
			return nil, err
		}
		node, err = opc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPauseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = opc.check(); err != nil {
				return nil, err
			}
			opc.mutation = mutation
			if node, err = opc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(opc.hooks) - 1; i >= 0; i-- {
			if opc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPause)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPauseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (opc *OrderPauseCreate) SaveX(ctx context.Context) *OrderPause {
	v, err := opc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opc *OrderPauseCreate) Exec(ctx context.Context) error {
	_, err := opc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opc *OrderPauseCreate) ExecX(ctx context.Context) {
	if err := opc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opc *OrderPauseCreate) defaults() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		if orderpause.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpause.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderpause.DefaultCreatedAt()
		opc.mutation.SetCreatedAt(v)
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		if orderpause.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpause.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpause.DefaultUpdatedAt()
		opc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opc *OrderPauseCreate) check() error {
	if _, ok := opc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderPause.created_at"`)}
	}
	if _, ok := opc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderPause.updated_at"`)}
	}
	if _, ok := opc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "OrderPause.rider_id"`)}
	}
	if _, ok := opc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderPause.order_id"`)}
	}
	if _, ok := opc.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "OrderPause.start_at"`)}
	}
	if _, ok := opc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "OrderPause.rider"`)}
	}
	if _, ok := opc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderPause.order"`)}
	}
	return nil
}

func (opc *OrderPauseCreate) sqlSave(ctx context.Context) (*OrderPause, error) {
	_node, _spec := opc.createSpec()
	if err := sqlgraph.CreateNode(ctx, opc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (opc *OrderPauseCreate) createSpec() (*OrderPause, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderPause{config: opc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderpause.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderpause.FieldID,
			},
		}
	)
	_spec.OnConflict = opc.conflict
	if value, ok := opc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := opc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := opc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := opc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderpause.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := opc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderpause.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := opc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpause.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := opc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := opc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := opc.mutation.Days(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpause.FieldDays,
		})
		_node.Days = value
	}
	if nodes := opc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.RiderTable,
			Columns: []string{orderpause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := opc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.OrderTable,
			Columns: []string{orderpause.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPause.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPauseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (opc *OrderPauseCreate) OnConflict(opts ...sql.ConflictOption) *OrderPauseUpsertOne {
	opc.conflict = opts
	return &OrderPauseUpsertOne{
		create: opc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPause.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (opc *OrderPauseCreate) OnConflictColumns(columns ...string) *OrderPauseUpsertOne {
	opc.conflict = append(opc.conflict, sql.ConflictColumns(columns...))
	return &OrderPauseUpsertOne{
		create: opc,
	}
}

type (
	// OrderPauseUpsertOne is the builder for "upsert"-ing
	//  one OrderPause node.
	OrderPauseUpsertOne struct {
		create *OrderPauseCreate
	}

	// OrderPauseUpsert is the "OnConflict" setter.
	OrderPauseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderPauseUpsert) SetCreatedAt(v time.Time) *OrderPauseUpsert {
	u.Set(orderpause.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateCreatedAt() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPauseUpsert) SetUpdatedAt(v time.Time) *OrderPauseUpsert {
	u.Set(orderpause.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateUpdatedAt() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPauseUpsert) SetDeletedAt(v time.Time) *OrderPauseUpsert {
	u.Set(orderpause.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateDeletedAt() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderPauseUpsert) ClearDeletedAt() *OrderPauseUpsert {
	u.SetNull(orderpause.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *OrderPauseUpsert) SetCreator(v *model.Modifier) *OrderPauseUpsert {
	u.Set(orderpause.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateCreator() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderPauseUpsert) ClearCreator() *OrderPauseUpsert {
	u.SetNull(orderpause.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderPauseUpsert) SetLastModifier(v *model.Modifier) *OrderPauseUpsert {
	u.Set(orderpause.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateLastModifier() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderPauseUpsert) ClearLastModifier() *OrderPauseUpsert {
	u.SetNull(orderpause.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *OrderPauseUpsert) SetRemark(v string) *OrderPauseUpsert {
	u.Set(orderpause.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateRemark() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderPauseUpsert) ClearRemark() *OrderPauseUpsert {
	u.SetNull(orderpause.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *OrderPauseUpsert) SetRiderID(v uint64) *OrderPauseUpsert {
	u.Set(orderpause.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateRiderID() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldRiderID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderPauseUpsert) SetOrderID(v uint64) *OrderPauseUpsert {
	u.Set(orderpause.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateOrderID() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldOrderID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *OrderPauseUpsert) SetStartAt(v time.Time) *OrderPauseUpsert {
	u.Set(orderpause.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateStartAt() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *OrderPauseUpsert) SetEndAt(v time.Time) *OrderPauseUpsert {
	u.Set(orderpause.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateEndAt() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderPauseUpsert) ClearEndAt() *OrderPauseUpsert {
	u.SetNull(orderpause.FieldEndAt)
	return u
}

// SetDays sets the "days" field.
func (u *OrderPauseUpsert) SetDays(v int) *OrderPauseUpsert {
	u.Set(orderpause.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *OrderPauseUpsert) UpdateDays() *OrderPauseUpsert {
	u.SetExcluded(orderpause.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *OrderPauseUpsert) AddDays(v int) *OrderPauseUpsert {
	u.Add(orderpause.FieldDays, v)
	return u
}

// ClearDays clears the value of the "days" field.
func (u *OrderPauseUpsert) ClearDays() *OrderPauseUpsert {
	u.SetNull(orderpause.FieldDays)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrderPause.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderPauseUpsertOne) UpdateNewValues() *OrderPauseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderpause.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(orderpause.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderPause.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderPauseUpsertOne) Ignore() *OrderPauseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPauseUpsertOne) DoNothing() *OrderPauseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPauseCreate.OnConflict
// documentation for more info.
func (u *OrderPauseUpsertOne) Update(set func(*OrderPauseUpsert)) *OrderPauseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPauseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPauseUpsertOne) SetCreatedAt(v time.Time) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateCreatedAt() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPauseUpsertOne) SetUpdatedAt(v time.Time) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateUpdatedAt() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPauseUpsertOne) SetDeletedAt(v time.Time) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateDeletedAt() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderPauseUpsertOne) ClearDeletedAt() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *OrderPauseUpsertOne) SetCreator(v *model.Modifier) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateCreator() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderPauseUpsertOne) ClearCreator() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderPauseUpsertOne) SetLastModifier(v *model.Modifier) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateLastModifier() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderPauseUpsertOne) ClearLastModifier() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderPauseUpsertOne) SetRemark(v string) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateRemark() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderPauseUpsertOne) ClearRemark() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *OrderPauseUpsertOne) SetRiderID(v uint64) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateRiderID() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPauseUpsertOne) SetOrderID(v uint64) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateOrderID() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateOrderID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OrderPauseUpsertOne) SetStartAt(v time.Time) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateStartAt() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OrderPauseUpsertOne) SetEndAt(v time.Time) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateEndAt() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderPauseUpsertOne) ClearEndAt() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearEndAt()
	})
}

// SetDays sets the "days" field.
func (u *OrderPauseUpsertOne) SetDays(v int) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *OrderPauseUpsertOne) AddDays(v int) *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *OrderPauseUpsertOne) UpdateDays() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateDays()
	})
}

// ClearDays clears the value of the "days" field.
func (u *OrderPauseUpsertOne) ClearDays() *OrderPauseUpsertOne {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearDays()
	})
}

// Exec executes the query.
func (u *OrderPauseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPauseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPauseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderPauseUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderPauseUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderPauseCreateBulk is the builder for creating many OrderPause entities in bulk.
type OrderPauseCreateBulk struct {
	config
	builders []*OrderPauseCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderPause entities in the database.
func (opcb *OrderPauseCreateBulk) Save(ctx context.Context) ([]*OrderPause, error) {
	specs := make([]*sqlgraph.CreateSpec, len(opcb.builders))
	nodes := make([]*OrderPause, len(opcb.builders))
	mutators := make([]Mutator, len(opcb.builders))
	for i := range opcb.builders {
		func(i int, root context.Context) {
			builder := opcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderPauseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, opcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = opcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, opcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, opcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (opcb *OrderPauseCreateBulk) SaveX(ctx context.Context) []*OrderPause {
	v, err := opcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (opcb *OrderPauseCreateBulk) Exec(ctx context.Context) error {
	_, err := opcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opcb *OrderPauseCreateBulk) ExecX(ctx context.Context) {
	if err := opcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderPause.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderPauseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (opcb *OrderPauseCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderPauseUpsertBulk {
	opcb.conflict = opts
	return &OrderPauseUpsertBulk{
		create: opcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderPause.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (opcb *OrderPauseCreateBulk) OnConflictColumns(columns ...string) *OrderPauseUpsertBulk {
	opcb.conflict = append(opcb.conflict, sql.ConflictColumns(columns...))
	return &OrderPauseUpsertBulk{
		create: opcb,
	}
}

// OrderPauseUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderPause nodes.
type OrderPauseUpsertBulk struct {
	create *OrderPauseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderPause.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderPauseUpsertBulk) UpdateNewValues() *OrderPauseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderpause.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(orderpause.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderPause.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderPauseUpsertBulk) Ignore() *OrderPauseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderPauseUpsertBulk) DoNothing() *OrderPauseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderPauseCreateBulk.OnConflict
// documentation for more info.
func (u *OrderPauseUpsertBulk) Update(set func(*OrderPauseUpsert)) *OrderPauseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderPauseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderPauseUpsertBulk) SetCreatedAt(v time.Time) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateCreatedAt() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderPauseUpsertBulk) SetUpdatedAt(v time.Time) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateUpdatedAt() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderPauseUpsertBulk) SetDeletedAt(v time.Time) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateDeletedAt() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderPauseUpsertBulk) ClearDeletedAt() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *OrderPauseUpsertBulk) SetCreator(v *model.Modifier) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateCreator() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderPauseUpsertBulk) ClearCreator() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderPauseUpsertBulk) SetLastModifier(v *model.Modifier) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateLastModifier() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderPauseUpsertBulk) ClearLastModifier() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderPauseUpsertBulk) SetRemark(v string) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateRemark() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderPauseUpsertBulk) ClearRemark() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *OrderPauseUpsertBulk) SetRiderID(v uint64) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateRiderID() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderPauseUpsertBulk) SetOrderID(v uint64) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateOrderID() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateOrderID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *OrderPauseUpsertBulk) SetStartAt(v time.Time) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateStartAt() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *OrderPauseUpsertBulk) SetEndAt(v time.Time) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateEndAt() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *OrderPauseUpsertBulk) ClearEndAt() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearEndAt()
	})
}

// SetDays sets the "days" field.
func (u *OrderPauseUpsertBulk) SetDays(v int) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *OrderPauseUpsertBulk) AddDays(v int) *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *OrderPauseUpsertBulk) UpdateDays() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.UpdateDays()
	})
}

// ClearDays clears the value of the "days" field.
func (u *OrderPauseUpsertBulk) ClearDays() *OrderPauseUpsertBulk {
	return u.Update(func(s *OrderPauseUpsert) {
		s.ClearDays()
	})
}

// Exec executes the query.
func (u *OrderPauseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderPauseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderPauseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderPauseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
