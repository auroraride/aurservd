// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/manager"
)

// ManagerCreate is the builder for creating a Manager entity.
type ManagerCreate struct {
	config
	mutation *ManagerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *ManagerCreate) SetCreatedAt(t time.Time) *ManagerCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *ManagerCreate) SetNillableCreatedAt(t *time.Time) *ManagerCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *ManagerCreate) SetUpdatedAt(t time.Time) *ManagerCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *ManagerCreate) SetNillableUpdatedAt(t *time.Time) *ManagerCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *ManagerCreate) SetDeletedAt(t time.Time) *ManagerCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *ManagerCreate) SetNillableDeletedAt(t *time.Time) *ManagerCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetLastModify sets the "last_modify" field.
func (mc *ManagerCreate) SetLastModify(t time.Time) *ManagerCreate {
	mc.mutation.SetLastModify(t)
	return mc
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (mc *ManagerCreate) SetNillableLastModify(t *time.Time) *ManagerCreate {
	if t != nil {
		mc.SetLastModify(*t)
	}
	return mc
}

// SetRemark sets the "remark" field.
func (mc *ManagerCreate) SetRemark(s string) *ManagerCreate {
	mc.mutation.SetRemark(s)
	return mc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mc *ManagerCreate) SetNillableRemark(s *string) *ManagerCreate {
	if s != nil {
		mc.SetRemark(*s)
	}
	return mc
}

// Mutation returns the ManagerMutation object of the builder.
func (mc *ManagerCreate) Mutation() *ManagerMutation {
	return mc.mutation
}

// Save creates the Manager in the database.
func (mc *ManagerCreate) Save(ctx context.Context) (*Manager, error) {
	var (
		err  error
		node *Manager
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ManagerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ManagerCreate) SaveX(ctx context.Context) *Manager {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ManagerCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ManagerCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *ManagerCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := manager.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := manager.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *ManagerCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (mc *ManagerCreate) sqlSave(ctx context.Context) (*Manager, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (mc *ManagerCreate) createSpec() (*Manager, *sqlgraph.CreateSpec) {
	var (
		_node = &Manager{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: manager.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: manager.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: manager.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: manager.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: manager.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := mc.mutation.LastModify(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: manager.FieldLastModify,
		})
		_node.LastModify = &value
	}
	if value, ok := mc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: manager.FieldRemark,
		})
		_node.Remark = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Manager.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManagerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mc *ManagerCreate) OnConflict(opts ...sql.ConflictOption) *ManagerUpsertOne {
	mc.conflict = opts
	return &ManagerUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Manager.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mc *ManagerCreate) OnConflictColumns(columns ...string) *ManagerUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &ManagerUpsertOne{
		create: mc,
	}
}

type (
	// ManagerUpsertOne is the builder for "upsert"-ing
	//  one Manager node.
	ManagerUpsertOne struct {
		create *ManagerCreate
	}

	// ManagerUpsert is the "OnConflict" setter.
	ManagerUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ManagerUpsert) SetCreatedAt(v time.Time) *ManagerUpsert {
	u.Set(manager.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ManagerUpsert) UpdateCreatedAt() *ManagerUpsert {
	u.SetExcluded(manager.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ManagerUpsert) SetUpdatedAt(v time.Time) *ManagerUpsert {
	u.Set(manager.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ManagerUpsert) UpdateUpdatedAt() *ManagerUpsert {
	u.SetExcluded(manager.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ManagerUpsert) SetDeletedAt(v time.Time) *ManagerUpsert {
	u.Set(manager.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ManagerUpsert) UpdateDeletedAt() *ManagerUpsert {
	u.SetExcluded(manager.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ManagerUpsert) ClearDeletedAt() *ManagerUpsert {
	u.SetNull(manager.FieldDeletedAt)
	return u
}

// SetLastModify sets the "last_modify" field.
func (u *ManagerUpsert) SetLastModify(v time.Time) *ManagerUpsert {
	u.Set(manager.FieldLastModify, v)
	return u
}

// UpdateLastModify sets the "last_modify" field to the value that was provided on create.
func (u *ManagerUpsert) UpdateLastModify() *ManagerUpsert {
	u.SetExcluded(manager.FieldLastModify)
	return u
}

// ClearLastModify clears the value of the "last_modify" field.
func (u *ManagerUpsert) ClearLastModify() *ManagerUpsert {
	u.SetNull(manager.FieldLastModify)
	return u
}

// SetRemark sets the "remark" field.
func (u *ManagerUpsert) SetRemark(v string) *ManagerUpsert {
	u.Set(manager.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ManagerUpsert) UpdateRemark() *ManagerUpsert {
	u.SetExcluded(manager.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *ManagerUpsert) ClearRemark() *ManagerUpsert {
	u.SetNull(manager.FieldRemark)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Manager.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ManagerUpsertOne) UpdateNewValues() *ManagerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Manager.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ManagerUpsertOne) Ignore() *ManagerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManagerUpsertOne) DoNothing() *ManagerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManagerCreate.OnConflict
// documentation for more info.
func (u *ManagerUpsertOne) Update(set func(*ManagerUpsert)) *ManagerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManagerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ManagerUpsertOne) SetCreatedAt(v time.Time) *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ManagerUpsertOne) UpdateCreatedAt() *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ManagerUpsertOne) SetUpdatedAt(v time.Time) *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ManagerUpsertOne) UpdateUpdatedAt() *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ManagerUpsertOne) SetDeletedAt(v time.Time) *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ManagerUpsertOne) UpdateDeletedAt() *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ManagerUpsertOne) ClearDeletedAt() *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModify sets the "last_modify" field.
func (u *ManagerUpsertOne) SetLastModify(v time.Time) *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.SetLastModify(v)
	})
}

// UpdateLastModify sets the "last_modify" field to the value that was provided on create.
func (u *ManagerUpsertOne) UpdateLastModify() *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateLastModify()
	})
}

// ClearLastModify clears the value of the "last_modify" field.
func (u *ManagerUpsertOne) ClearLastModify() *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.ClearLastModify()
	})
}

// SetRemark sets the "remark" field.
func (u *ManagerUpsertOne) SetRemark(v string) *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ManagerUpsertOne) UpdateRemark() *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ManagerUpsertOne) ClearRemark() *ManagerUpsertOne {
	return u.Update(func(s *ManagerUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *ManagerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManagerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManagerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ManagerUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ManagerUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ManagerCreateBulk is the builder for creating many Manager entities in bulk.
type ManagerCreateBulk struct {
	config
	builders []*ManagerCreate
	conflict []sql.ConflictOption
}

// Save creates the Manager entities in the database.
func (mcb *ManagerCreateBulk) Save(ctx context.Context) ([]*Manager, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Manager, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ManagerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ManagerCreateBulk) SaveX(ctx context.Context) []*Manager {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ManagerCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ManagerCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Manager.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ManagerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (mcb *ManagerCreateBulk) OnConflict(opts ...sql.ConflictOption) *ManagerUpsertBulk {
	mcb.conflict = opts
	return &ManagerUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Manager.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (mcb *ManagerCreateBulk) OnConflictColumns(columns ...string) *ManagerUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &ManagerUpsertBulk{
		create: mcb,
	}
}

// ManagerUpsertBulk is the builder for "upsert"-ing
// a bulk of Manager nodes.
type ManagerUpsertBulk struct {
	create *ManagerCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Manager.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ManagerUpsertBulk) UpdateNewValues() *ManagerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Manager.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ManagerUpsertBulk) Ignore() *ManagerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ManagerUpsertBulk) DoNothing() *ManagerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ManagerCreateBulk.OnConflict
// documentation for more info.
func (u *ManagerUpsertBulk) Update(set func(*ManagerUpsert)) *ManagerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ManagerUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ManagerUpsertBulk) SetCreatedAt(v time.Time) *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ManagerUpsertBulk) UpdateCreatedAt() *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ManagerUpsertBulk) SetUpdatedAt(v time.Time) *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ManagerUpsertBulk) UpdateUpdatedAt() *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ManagerUpsertBulk) SetDeletedAt(v time.Time) *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ManagerUpsertBulk) UpdateDeletedAt() *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ManagerUpsertBulk) ClearDeletedAt() *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModify sets the "last_modify" field.
func (u *ManagerUpsertBulk) SetLastModify(v time.Time) *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.SetLastModify(v)
	})
}

// UpdateLastModify sets the "last_modify" field to the value that was provided on create.
func (u *ManagerUpsertBulk) UpdateLastModify() *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateLastModify()
	})
}

// ClearLastModify clears the value of the "last_modify" field.
func (u *ManagerUpsertBulk) ClearLastModify() *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.ClearLastModify()
	})
}

// SetRemark sets the "remark" field.
func (u *ManagerUpsertBulk) SetRemark(v string) *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ManagerUpsertBulk) UpdateRemark() *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ManagerUpsertBulk) ClearRemark() *ManagerUpsertBulk {
	return u.Update(func(s *ManagerUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *ManagerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ManagerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ManagerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ManagerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
