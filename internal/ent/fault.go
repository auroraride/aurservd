// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/fault"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// Fault is the model entity for the Fault schema.
type Fault struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// 电柜ID
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// 骑手ID
	RiderID *uint64 `json:"rider_id,omitempty"`
	// 故障状态 0未处理 1已处理
	Status uint8 `json:"status,omitempty"`
	// 故障留言
	Description string `json:"description,omitempty"`
	// 附件
	Attachments []string `json:"attachments,omitempty"`
	// 故障类型 1:电柜故障 2:电池故障 3:车辆故障 4:其他
	Type uint8 `json:"type,omitempty"`
	// 故障内容
	Fault []string `json:"fault,omitempty"`
	// 电车ID
	EbikeID *uint64 `json:"ebike_id,omitempty"`
	// 电池ID
	BatteryID *uint64 `json:"battery_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FaultQuery when eager-loading is set.
	Edges        FaultEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FaultEdges holds the relations/edges for other nodes in the graph.
type FaultEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// Ebike holds the value of the ebike edge.
	Ebike *Asset `json:"ebike,omitempty"`
	// Battery holds the value of the battery edge.
	Battery *Asset `json:"battery,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaultEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaultEdges) CabinetOrErr() (*Cabinet, error) {
	if e.Cabinet != nil {
		return e.Cabinet, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: cabinet.Label}
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaultEdges) RiderOrErr() (*Rider, error) {
	if e.Rider != nil {
		return e.Rider, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: rider.Label}
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// EbikeOrErr returns the Ebike value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaultEdges) EbikeOrErr() (*Asset, error) {
	if e.Ebike != nil {
		return e.Ebike, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "ebike"}
}

// BatteryOrErr returns the Battery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FaultEdges) BatteryOrErr() (*Asset, error) {
	if e.Battery != nil {
		return e.Battery, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "battery"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fault) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fault.FieldCreator, fault.FieldLastModifier, fault.FieldAttachments, fault.FieldFault:
			values[i] = new([]byte)
		case fault.FieldID, fault.FieldCityID, fault.FieldCabinetID, fault.FieldRiderID, fault.FieldStatus, fault.FieldType, fault.FieldEbikeID, fault.FieldBatteryID:
			values[i] = new(sql.NullInt64)
		case fault.FieldRemark, fault.FieldDescription:
			values[i] = new(sql.NullString)
		case fault.FieldCreatedAt, fault.FieldUpdatedAt, fault.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fault fields.
func (f *Fault) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fault.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = uint64(value.Int64)
		case fault.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case fault.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case fault.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				f.DeletedAt = new(time.Time)
				*f.DeletedAt = value.Time
			}
		case fault.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case fault.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case fault.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				f.Remark = value.String
			}
		case fault.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				f.CityID = uint64(value.Int64)
			}
		case fault.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				f.CabinetID = new(uint64)
				*f.CabinetID = uint64(value.Int64)
			}
		case fault.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				f.RiderID = new(uint64)
				*f.RiderID = uint64(value.Int64)
			}
		case fault.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = uint8(value.Int64)
			}
		case fault.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				f.Description = value.String
			}
		case fault.FieldAttachments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Attachments); err != nil {
					return fmt.Errorf("unmarshal field attachments: %w", err)
				}
			}
		case fault.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				f.Type = uint8(value.Int64)
			}
		case fault.FieldFault:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field fault", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.Fault); err != nil {
					return fmt.Errorf("unmarshal field fault: %w", err)
				}
			}
		case fault.FieldEbikeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ebike_id", values[i])
			} else if value.Valid {
				f.EbikeID = new(uint64)
				*f.EbikeID = uint64(value.Int64)
			}
		case fault.FieldBatteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_id", values[i])
			} else if value.Valid {
				f.BatteryID = new(uint64)
				*f.BatteryID = uint64(value.Int64)
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Fault.
// This includes values selected through modifiers, order, etc.
func (f *Fault) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryCity queries the "city" edge of the Fault entity.
func (f *Fault) QueryCity() *CityQuery {
	return NewFaultClient(f.config).QueryCity(f)
}

// QueryCabinet queries the "cabinet" edge of the Fault entity.
func (f *Fault) QueryCabinet() *CabinetQuery {
	return NewFaultClient(f.config).QueryCabinet(f)
}

// QueryRider queries the "rider" edge of the Fault entity.
func (f *Fault) QueryRider() *RiderQuery {
	return NewFaultClient(f.config).QueryRider(f)
}

// QueryEbike queries the "ebike" edge of the Fault entity.
func (f *Fault) QueryEbike() *AssetQuery {
	return NewFaultClient(f.config).QueryEbike(f)
}

// QueryBattery queries the "battery" edge of the Fault entity.
func (f *Fault) QueryBattery() *AssetQuery {
	return NewFaultClient(f.config).QueryBattery(f)
}

// Update returns a builder for updating this Fault.
// Note that you need to call Fault.Unwrap() before calling this method if this Fault
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fault) Update() *FaultUpdateOne {
	return NewFaultClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Fault entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fault) Unwrap() *Fault {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fault is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fault) String() string {
	var builder strings.Builder
	builder.WriteString("Fault(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := f.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", f.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", f.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(f.Remark)
	builder.WriteString(", ")
	builder.WriteString("city_id=")
	builder.WriteString(fmt.Sprintf("%v", f.CityID))
	builder.WriteString(", ")
	if v := f.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.RiderID; v != nil {
		builder.WriteString("rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", f.Status))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(f.Description)
	builder.WriteString(", ")
	builder.WriteString("attachments=")
	builder.WriteString(fmt.Sprintf("%v", f.Attachments))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", f.Type))
	builder.WriteString(", ")
	builder.WriteString("fault=")
	builder.WriteString(fmt.Sprintf("%v", f.Fault))
	builder.WriteString(", ")
	if v := f.EbikeID; v != nil {
		builder.WriteString("ebike_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.BatteryID; v != nil {
		builder.WriteString("battery_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Faults is a parsable slice of Fault.
type Faults []*Fault
