// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/citynew"
)

// CityNewCreate is the builder for creating a CityNew entity.
type CityNewCreate struct {
	config
	mutation *CityNewMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cnc *CityNewCreate) SetCreatedAt(t time.Time) *CityNewCreate {
	cnc.mutation.SetCreatedAt(t)
	return cnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cnc *CityNewCreate) SetNillableCreatedAt(t *time.Time) *CityNewCreate {
	if t != nil {
		cnc.SetCreatedAt(*t)
	}
	return cnc
}

// SetUpdatedAt sets the "updated_at" field.
func (cnc *CityNewCreate) SetUpdatedAt(t time.Time) *CityNewCreate {
	cnc.mutation.SetUpdatedAt(t)
	return cnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cnc *CityNewCreate) SetNillableUpdatedAt(t *time.Time) *CityNewCreate {
	if t != nil {
		cnc.SetUpdatedAt(*t)
	}
	return cnc
}

// SetDeletedAt sets the "deleted_at" field.
func (cnc *CityNewCreate) SetDeletedAt(t time.Time) *CityNewCreate {
	cnc.mutation.SetDeletedAt(t)
	return cnc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cnc *CityNewCreate) SetNillableDeletedAt(t *time.Time) *CityNewCreate {
	if t != nil {
		cnc.SetDeletedAt(*t)
	}
	return cnc
}

// SetCreator sets the "creator" field.
func (cnc *CityNewCreate) SetCreator(m *model.Modifier) *CityNewCreate {
	cnc.mutation.SetCreator(m)
	return cnc
}

// SetLastModifier sets the "last_modifier" field.
func (cnc *CityNewCreate) SetLastModifier(m *model.Modifier) *CityNewCreate {
	cnc.mutation.SetLastModifier(m)
	return cnc
}

// SetRemark sets the "remark" field.
func (cnc *CityNewCreate) SetRemark(s string) *CityNewCreate {
	cnc.mutation.SetRemark(s)
	return cnc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cnc *CityNewCreate) SetNillableRemark(s *string) *CityNewCreate {
	if s != nil {
		cnc.SetRemark(*s)
	}
	return cnc
}

// SetOpen sets the "open" field.
func (cnc *CityNewCreate) SetOpen(b bool) *CityNewCreate {
	cnc.mutation.SetOpen(b)
	return cnc
}

// SetNillableOpen sets the "open" field if the given value is not nil.
func (cnc *CityNewCreate) SetNillableOpen(b *bool) *CityNewCreate {
	if b != nil {
		cnc.SetOpen(*b)
	}
	return cnc
}

// SetName sets the "name" field.
func (cnc *CityNewCreate) SetName(s string) *CityNewCreate {
	cnc.mutation.SetName(s)
	return cnc
}

// SetCode sets the "code" field.
func (cnc *CityNewCreate) SetCode(s string) *CityNewCreate {
	cnc.mutation.SetCode(s)
	return cnc
}

// SetParentID sets the "parent_id" field.
func (cnc *CityNewCreate) SetParentID(u uint64) *CityNewCreate {
	cnc.mutation.SetParentID(u)
	return cnc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cnc *CityNewCreate) SetNillableParentID(u *uint64) *CityNewCreate {
	if u != nil {
		cnc.SetParentID(*u)
	}
	return cnc
}

// SetLng sets the "lng" field.
func (cnc *CityNewCreate) SetLng(f float64) *CityNewCreate {
	cnc.mutation.SetLng(f)
	return cnc
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (cnc *CityNewCreate) SetNillableLng(f *float64) *CityNewCreate {
	if f != nil {
		cnc.SetLng(*f)
	}
	return cnc
}

// SetLat sets the "lat" field.
func (cnc *CityNewCreate) SetLat(f float64) *CityNewCreate {
	cnc.mutation.SetLat(f)
	return cnc
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (cnc *CityNewCreate) SetNillableLat(f *float64) *CityNewCreate {
	if f != nil {
		cnc.SetLat(*f)
	}
	return cnc
}

// SetID sets the "id" field.
func (cnc *CityNewCreate) SetID(u uint64) *CityNewCreate {
	cnc.mutation.SetID(u)
	return cnc
}

// Mutation returns the CityNewMutation object of the builder.
func (cnc *CityNewCreate) Mutation() *CityNewMutation {
	return cnc.mutation
}

// Save creates the CityNew in the database.
func (cnc *CityNewCreate) Save(ctx context.Context) (*CityNew, error) {
	if err := cnc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cnc.sqlSave, cnc.mutation, cnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cnc *CityNewCreate) SaveX(ctx context.Context) *CityNew {
	v, err := cnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cnc *CityNewCreate) Exec(ctx context.Context) error {
	_, err := cnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnc *CityNewCreate) ExecX(ctx context.Context) {
	if err := cnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnc *CityNewCreate) defaults() error {
	if _, ok := cnc.mutation.CreatedAt(); !ok {
		if citynew.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized citynew.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := citynew.DefaultCreatedAt()
		cnc.mutation.SetCreatedAt(v)
	}
	if _, ok := cnc.mutation.UpdatedAt(); !ok {
		if citynew.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized citynew.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := citynew.DefaultUpdatedAt()
		cnc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cnc *CityNewCreate) check() error {
	if _, ok := cnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CityNew.created_at"`)}
	}
	if _, ok := cnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CityNew.updated_at"`)}
	}
	if _, ok := cnc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CityNew.name"`)}
	}
	if v, ok := cnc.mutation.Name(); ok {
		if err := citynew.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CityNew.name": %w`, err)}
		}
	}
	if _, ok := cnc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "CityNew.code"`)}
	}
	if v, ok := cnc.mutation.Code(); ok {
		if err := citynew.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "CityNew.code": %w`, err)}
		}
	}
	return nil
}

func (cnc *CityNewCreate) sqlSave(ctx context.Context) (*CityNew, error) {
	if err := cnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	cnc.mutation.id = &_node.ID
	cnc.mutation.done = true
	return _node, nil
}

func (cnc *CityNewCreate) createSpec() (*CityNew, *sqlgraph.CreateSpec) {
	var (
		_node = &CityNew{config: cnc.config}
		_spec = sqlgraph.NewCreateSpec(citynew.Table, sqlgraph.NewFieldSpec(citynew.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = cnc.conflict
	if id, ok := cnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cnc.mutation.CreatedAt(); ok {
		_spec.SetField(citynew.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cnc.mutation.UpdatedAt(); ok {
		_spec.SetField(citynew.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cnc.mutation.DeletedAt(); ok {
		_spec.SetField(citynew.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cnc.mutation.Creator(); ok {
		_spec.SetField(citynew.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := cnc.mutation.LastModifier(); ok {
		_spec.SetField(citynew.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := cnc.mutation.Remark(); ok {
		_spec.SetField(citynew.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := cnc.mutation.Open(); ok {
		_spec.SetField(citynew.FieldOpen, field.TypeBool, value)
		_node.Open = &value
	}
	if value, ok := cnc.mutation.Name(); ok {
		_spec.SetField(citynew.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cnc.mutation.Code(); ok {
		_spec.SetField(citynew.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cnc.mutation.ParentID(); ok {
		_spec.SetField(citynew.FieldParentID, field.TypeUint64, value)
		_node.ParentID = &value
	}
	if value, ok := cnc.mutation.Lng(); ok {
		_spec.SetField(citynew.FieldLng, field.TypeFloat64, value)
		_node.Lng = value
	}
	if value, ok := cnc.mutation.Lat(); ok {
		_spec.SetField(citynew.FieldLat, field.TypeFloat64, value)
		_node.Lat = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CityNew.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CityNewUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cnc *CityNewCreate) OnConflict(opts ...sql.ConflictOption) *CityNewUpsertOne {
	cnc.conflict = opts
	return &CityNewUpsertOne{
		create: cnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CityNew.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cnc *CityNewCreate) OnConflictColumns(columns ...string) *CityNewUpsertOne {
	cnc.conflict = append(cnc.conflict, sql.ConflictColumns(columns...))
	return &CityNewUpsertOne{
		create: cnc,
	}
}

type (
	// CityNewUpsertOne is the builder for "upsert"-ing
	//  one CityNew node.
	CityNewUpsertOne struct {
		create *CityNewCreate
	}

	// CityNewUpsert is the "OnConflict" setter.
	CityNewUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CityNewUpsert) SetUpdatedAt(v time.Time) *CityNewUpsert {
	u.Set(citynew.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateUpdatedAt() *CityNewUpsert {
	u.SetExcluded(citynew.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CityNewUpsert) SetDeletedAt(v time.Time) *CityNewUpsert {
	u.Set(citynew.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateDeletedAt() *CityNewUpsert {
	u.SetExcluded(citynew.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CityNewUpsert) ClearDeletedAt() *CityNewUpsert {
	u.SetNull(citynew.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CityNewUpsert) SetLastModifier(v *model.Modifier) *CityNewUpsert {
	u.Set(citynew.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateLastModifier() *CityNewUpsert {
	u.SetExcluded(citynew.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CityNewUpsert) ClearLastModifier() *CityNewUpsert {
	u.SetNull(citynew.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CityNewUpsert) SetRemark(v string) *CityNewUpsert {
	u.Set(citynew.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateRemark() *CityNewUpsert {
	u.SetExcluded(citynew.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CityNewUpsert) ClearRemark() *CityNewUpsert {
	u.SetNull(citynew.FieldRemark)
	return u
}

// SetOpen sets the "open" field.
func (u *CityNewUpsert) SetOpen(v bool) *CityNewUpsert {
	u.Set(citynew.FieldOpen, v)
	return u
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateOpen() *CityNewUpsert {
	u.SetExcluded(citynew.FieldOpen)
	return u
}

// ClearOpen clears the value of the "open" field.
func (u *CityNewUpsert) ClearOpen() *CityNewUpsert {
	u.SetNull(citynew.FieldOpen)
	return u
}

// SetName sets the "name" field.
func (u *CityNewUpsert) SetName(v string) *CityNewUpsert {
	u.Set(citynew.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateName() *CityNewUpsert {
	u.SetExcluded(citynew.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *CityNewUpsert) SetCode(v string) *CityNewUpsert {
	u.Set(citynew.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateCode() *CityNewUpsert {
	u.SetExcluded(citynew.FieldCode)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *CityNewUpsert) SetParentID(v uint64) *CityNewUpsert {
	u.Set(citynew.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateParentID() *CityNewUpsert {
	u.SetExcluded(citynew.FieldParentID)
	return u
}

// AddParentID adds v to the "parent_id" field.
func (u *CityNewUpsert) AddParentID(v uint64) *CityNewUpsert {
	u.Add(citynew.FieldParentID, v)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CityNewUpsert) ClearParentID() *CityNewUpsert {
	u.SetNull(citynew.FieldParentID)
	return u
}

// SetLng sets the "lng" field.
func (u *CityNewUpsert) SetLng(v float64) *CityNewUpsert {
	u.Set(citynew.FieldLng, v)
	return u
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateLng() *CityNewUpsert {
	u.SetExcluded(citynew.FieldLng)
	return u
}

// AddLng adds v to the "lng" field.
func (u *CityNewUpsert) AddLng(v float64) *CityNewUpsert {
	u.Add(citynew.FieldLng, v)
	return u
}

// ClearLng clears the value of the "lng" field.
func (u *CityNewUpsert) ClearLng() *CityNewUpsert {
	u.SetNull(citynew.FieldLng)
	return u
}

// SetLat sets the "lat" field.
func (u *CityNewUpsert) SetLat(v float64) *CityNewUpsert {
	u.Set(citynew.FieldLat, v)
	return u
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CityNewUpsert) UpdateLat() *CityNewUpsert {
	u.SetExcluded(citynew.FieldLat)
	return u
}

// AddLat adds v to the "lat" field.
func (u *CityNewUpsert) AddLat(v float64) *CityNewUpsert {
	u.Add(citynew.FieldLat, v)
	return u
}

// ClearLat clears the value of the "lat" field.
func (u *CityNewUpsert) ClearLat() *CityNewUpsert {
	u.SetNull(citynew.FieldLat)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CityNew.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(citynew.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CityNewUpsertOne) UpdateNewValues() *CityNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(citynew.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(citynew.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(citynew.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CityNew.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CityNewUpsertOne) Ignore() *CityNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CityNewUpsertOne) DoNothing() *CityNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CityNewCreate.OnConflict
// documentation for more info.
func (u *CityNewUpsertOne) Update(set func(*CityNewUpsert)) *CityNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CityNewUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CityNewUpsertOne) SetUpdatedAt(v time.Time) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateUpdatedAt() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CityNewUpsertOne) SetDeletedAt(v time.Time) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateDeletedAt() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CityNewUpsertOne) ClearDeletedAt() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CityNewUpsertOne) SetLastModifier(v *model.Modifier) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateLastModifier() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CityNewUpsertOne) ClearLastModifier() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CityNewUpsertOne) SetRemark(v string) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateRemark() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CityNewUpsertOne) ClearRemark() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearRemark()
	})
}

// SetOpen sets the "open" field.
func (u *CityNewUpsertOne) SetOpen(v bool) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateOpen() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateOpen()
	})
}

// ClearOpen clears the value of the "open" field.
func (u *CityNewUpsertOne) ClearOpen() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearOpen()
	})
}

// SetName sets the "name" field.
func (u *CityNewUpsertOne) SetName(v string) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateName() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *CityNewUpsertOne) SetCode(v string) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateCode() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateCode()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CityNewUpsertOne) SetParentID(v uint64) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *CityNewUpsertOne) AddParentID(v uint64) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateParentID() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CityNewUpsertOne) ClearParentID() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearParentID()
	})
}

// SetLng sets the "lng" field.
func (u *CityNewUpsertOne) SetLng(v float64) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *CityNewUpsertOne) AddLng(v float64) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateLng() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *CityNewUpsertOne) ClearLng() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearLng()
	})
}

// SetLat sets the "lat" field.
func (u *CityNewUpsertOne) SetLat(v float64) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *CityNewUpsertOne) AddLat(v float64) *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CityNewUpsertOne) UpdateLat() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *CityNewUpsertOne) ClearLat() *CityNewUpsertOne {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearLat()
	})
}

// Exec executes the query.
func (u *CityNewUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CityNewCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CityNewUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CityNewUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CityNewUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CityNewCreateBulk is the builder for creating many CityNew entities in bulk.
type CityNewCreateBulk struct {
	config
	err      error
	builders []*CityNewCreate
	conflict []sql.ConflictOption
}

// Save creates the CityNew entities in the database.
func (cncb *CityNewCreateBulk) Save(ctx context.Context) ([]*CityNew, error) {
	if cncb.err != nil {
		return nil, cncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cncb.builders))
	nodes := make([]*CityNew, len(cncb.builders))
	mutators := make([]Mutator, len(cncb.builders))
	for i := range cncb.builders {
		func(i int, root context.Context) {
			builder := cncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CityNewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cncb *CityNewCreateBulk) SaveX(ctx context.Context) []*CityNew {
	v, err := cncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cncb *CityNewCreateBulk) Exec(ctx context.Context) error {
	_, err := cncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cncb *CityNewCreateBulk) ExecX(ctx context.Context) {
	if err := cncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CityNew.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CityNewUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cncb *CityNewCreateBulk) OnConflict(opts ...sql.ConflictOption) *CityNewUpsertBulk {
	cncb.conflict = opts
	return &CityNewUpsertBulk{
		create: cncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CityNew.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cncb *CityNewCreateBulk) OnConflictColumns(columns ...string) *CityNewUpsertBulk {
	cncb.conflict = append(cncb.conflict, sql.ConflictColumns(columns...))
	return &CityNewUpsertBulk{
		create: cncb,
	}
}

// CityNewUpsertBulk is the builder for "upsert"-ing
// a bulk of CityNew nodes.
type CityNewUpsertBulk struct {
	create *CityNewCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CityNew.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(citynew.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CityNewUpsertBulk) UpdateNewValues() *CityNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(citynew.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(citynew.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(citynew.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CityNew.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CityNewUpsertBulk) Ignore() *CityNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CityNewUpsertBulk) DoNothing() *CityNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CityNewCreateBulk.OnConflict
// documentation for more info.
func (u *CityNewUpsertBulk) Update(set func(*CityNewUpsert)) *CityNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CityNewUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CityNewUpsertBulk) SetUpdatedAt(v time.Time) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateUpdatedAt() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CityNewUpsertBulk) SetDeletedAt(v time.Time) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateDeletedAt() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CityNewUpsertBulk) ClearDeletedAt() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CityNewUpsertBulk) SetLastModifier(v *model.Modifier) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateLastModifier() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CityNewUpsertBulk) ClearLastModifier() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CityNewUpsertBulk) SetRemark(v string) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateRemark() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CityNewUpsertBulk) ClearRemark() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearRemark()
	})
}

// SetOpen sets the "open" field.
func (u *CityNewUpsertBulk) SetOpen(v bool) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateOpen() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateOpen()
	})
}

// ClearOpen clears the value of the "open" field.
func (u *CityNewUpsertBulk) ClearOpen() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearOpen()
	})
}

// SetName sets the "name" field.
func (u *CityNewUpsertBulk) SetName(v string) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateName() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *CityNewUpsertBulk) SetCode(v string) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateCode() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateCode()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CityNewUpsertBulk) SetParentID(v uint64) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetParentID(v)
	})
}

// AddParentID adds v to the "parent_id" field.
func (u *CityNewUpsertBulk) AddParentID(v uint64) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.AddParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateParentID() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CityNewUpsertBulk) ClearParentID() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearParentID()
	})
}

// SetLng sets the "lng" field.
func (u *CityNewUpsertBulk) SetLng(v float64) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *CityNewUpsertBulk) AddLng(v float64) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateLng() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *CityNewUpsertBulk) ClearLng() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearLng()
	})
}

// SetLat sets the "lat" field.
func (u *CityNewUpsertBulk) SetLat(v float64) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *CityNewUpsertBulk) AddLat(v float64) *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CityNewUpsertBulk) UpdateLat() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *CityNewUpsertBulk) ClearLat() *CityNewUpsertBulk {
	return u.Update(func(s *CityNewUpsert) {
		s.ClearLat()
	})
}

// Exec executes the query.
func (u *CityNewUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CityNewCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CityNewCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CityNewUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
