// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// Allocate is the model entity for the Allocate schema.
type Allocate struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// SubscribeID holds the value of the "subscribe_id" field.
	SubscribeID uint64 `json:"subscribe_id,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 店员ID
	EmployeeID *uint64 `json:"employee_id,omitempty"`
	// 电柜ID
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// 门店ID
	StoreID *uint64 `json:"store_id,omitempty"`
	// BrandID holds the value of the "brand_id" field.
	BrandID *uint64 `json:"brand_id,omitempty"`
	// BatteryID holds the value of the "battery_id" field.
	BatteryID *uint64 `json:"battery_id,omitempty"`
	// 站点ID
	StationID *uint64 `json:"station_id,omitempty"`
	// AgentID holds the value of the "agent_id" field.
	AgentID *uint64 `json:"agent_id,omitempty"`
	// 分配类型
	Type allocate.Type `json:"type,omitempty"`
	// 分配状态
	Status uint8 `json:"status,omitempty"`
	// 分配时间
	Time time.Time `json:"time,omitempty"`
	// 电池型号
	Model string `json:"model,omitempty"`
	// 电车ID
	EbikeID *uint64 `json:"ebike_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AllocateQuery when eager-loading is set.
	Edges        AllocateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AllocateEdges holds the relations/edges for other nodes in the graph.
type AllocateEdges struct {
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// Subscribe holds the value of the subscribe edge.
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// Brand holds the value of the brand edge.
	Brand *EbikeBrand `json:"brand,omitempty"`
	// Battery holds the value of the battery edge.
	Battery *Battery `json:"battery,omitempty"`
	// Station holds the value of the station edge.
	Station *EnterpriseStation `json:"station,omitempty"`
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// Contract holds the value of the contract edge.
	Contract *Contract `json:"contract,omitempty"`
	// Ebike holds the value of the ebike edge.
	Ebike *Asset `json:"ebike,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) RiderOrErr() (*Rider, error) {
	if e.Rider != nil {
		return e.Rider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: rider.Label}
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.Subscribe != nil {
		return e.Subscribe, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscribe.Label}
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) EmployeeOrErr() (*Employee, error) {
	if e.Employee != nil {
		return e.Employee, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: employee.Label}
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) CabinetOrErr() (*Cabinet, error) {
	if e.Cabinet != nil {
		return e.Cabinet, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: cabinet.Label}
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) StoreOrErr() (*Store, error) {
	if e.Store != nil {
		return e.Store, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: store.Label}
	}
	return nil, &NotLoadedError{edge: "store"}
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) BrandOrErr() (*EbikeBrand, error) {
	if e.Brand != nil {
		return e.Brand, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: ebikebrand.Label}
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// BatteryOrErr returns the Battery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) BatteryOrErr() (*Battery, error) {
	if e.Battery != nil {
		return e.Battery, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: battery.Label}
	}
	return nil, &NotLoadedError{edge: "battery"}
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) StationOrErr() (*EnterpriseStation, error) {
	if e.Station != nil {
		return e.Station, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: enterprisestation.Label}
	}
	return nil, &NotLoadedError{edge: "station"}
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) AgentOrErr() (*Agent, error) {
	if e.Agent != nil {
		return e.Agent, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// ContractOrErr returns the Contract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) ContractOrErr() (*Contract, error) {
	if e.Contract != nil {
		return e.Contract, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: contract.Label}
	}
	return nil, &NotLoadedError{edge: "contract"}
}

// EbikeOrErr returns the Ebike value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AllocateEdges) EbikeOrErr() (*Asset, error) {
	if e.Ebike != nil {
		return e.Ebike, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "ebike"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Allocate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case allocate.FieldCreator, allocate.FieldLastModifier:
			values[i] = new([]byte)
		case allocate.FieldID, allocate.FieldRiderID, allocate.FieldSubscribeID, allocate.FieldEmployeeID, allocate.FieldCabinetID, allocate.FieldStoreID, allocate.FieldBrandID, allocate.FieldBatteryID, allocate.FieldStationID, allocate.FieldAgentID, allocate.FieldStatus, allocate.FieldEbikeID:
			values[i] = new(sql.NullInt64)
		case allocate.FieldRemark, allocate.FieldType, allocate.FieldModel:
			values[i] = new(sql.NullString)
		case allocate.FieldCreatedAt, allocate.FieldUpdatedAt, allocate.FieldTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Allocate fields.
func (a *Allocate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case allocate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case allocate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = new(time.Time)
				*a.CreatedAt = value.Time
			}
		case allocate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = new(time.Time)
				*a.UpdatedAt = value.Time
			}
		case allocate.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				a.RiderID = uint64(value.Int64)
			}
		case allocate.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				a.SubscribeID = uint64(value.Int64)
			}
		case allocate.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case allocate.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case allocate.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				a.Remark = value.String
			}
		case allocate.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				a.EmployeeID = new(uint64)
				*a.EmployeeID = uint64(value.Int64)
			}
		case allocate.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				a.CabinetID = new(uint64)
				*a.CabinetID = uint64(value.Int64)
			}
		case allocate.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				a.StoreID = new(uint64)
				*a.StoreID = uint64(value.Int64)
			}
		case allocate.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				a.BrandID = new(uint64)
				*a.BrandID = uint64(value.Int64)
			}
		case allocate.FieldBatteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_id", values[i])
			} else if value.Valid {
				a.BatteryID = new(uint64)
				*a.BatteryID = uint64(value.Int64)
			}
		case allocate.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				a.StationID = new(uint64)
				*a.StationID = uint64(value.Int64)
			}
		case allocate.FieldAgentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				a.AgentID = new(uint64)
				*a.AgentID = uint64(value.Int64)
			}
		case allocate.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = allocate.Type(value.String)
			}
		case allocate.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = uint8(value.Int64)
			}
		case allocate.FieldTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				a.Time = value.Time
			}
		case allocate.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				a.Model = value.String
			}
		case allocate.FieldEbikeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ebike_id", values[i])
			} else if value.Valid {
				a.EbikeID = new(uint64)
				*a.EbikeID = uint64(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Allocate.
// This includes values selected through modifiers, order, etc.
func (a *Allocate) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryRider queries the "rider" edge of the Allocate entity.
func (a *Allocate) QueryRider() *RiderQuery {
	return NewAllocateClient(a.config).QueryRider(a)
}

// QuerySubscribe queries the "subscribe" edge of the Allocate entity.
func (a *Allocate) QuerySubscribe() *SubscribeQuery {
	return NewAllocateClient(a.config).QuerySubscribe(a)
}

// QueryEmployee queries the "employee" edge of the Allocate entity.
func (a *Allocate) QueryEmployee() *EmployeeQuery {
	return NewAllocateClient(a.config).QueryEmployee(a)
}

// QueryCabinet queries the "cabinet" edge of the Allocate entity.
func (a *Allocate) QueryCabinet() *CabinetQuery {
	return NewAllocateClient(a.config).QueryCabinet(a)
}

// QueryStore queries the "store" edge of the Allocate entity.
func (a *Allocate) QueryStore() *StoreQuery {
	return NewAllocateClient(a.config).QueryStore(a)
}

// QueryBrand queries the "brand" edge of the Allocate entity.
func (a *Allocate) QueryBrand() *EbikeBrandQuery {
	return NewAllocateClient(a.config).QueryBrand(a)
}

// QueryBattery queries the "battery" edge of the Allocate entity.
func (a *Allocate) QueryBattery() *BatteryQuery {
	return NewAllocateClient(a.config).QueryBattery(a)
}

// QueryStation queries the "station" edge of the Allocate entity.
func (a *Allocate) QueryStation() *EnterpriseStationQuery {
	return NewAllocateClient(a.config).QueryStation(a)
}

// QueryAgent queries the "agent" edge of the Allocate entity.
func (a *Allocate) QueryAgent() *AgentQuery {
	return NewAllocateClient(a.config).QueryAgent(a)
}

// QueryContract queries the "contract" edge of the Allocate entity.
func (a *Allocate) QueryContract() *ContractQuery {
	return NewAllocateClient(a.config).QueryContract(a)
}

// QueryEbike queries the "ebike" edge of the Allocate entity.
func (a *Allocate) QueryEbike() *AssetQuery {
	return NewAllocateClient(a.config).QueryEbike(a)
}

// Update returns a builder for updating this Allocate.
// Note that you need to call Allocate.Unwrap() before calling this method if this Allocate
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Allocate) Update() *AllocateUpdateOne {
	return NewAllocateClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Allocate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Allocate) Unwrap() *Allocate {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Allocate is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Allocate) String() string {
	var builder strings.Builder
	builder.WriteString("Allocate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	if v := a.CreatedAt; v != nil {
		builder.WriteString("created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := a.UpdatedAt; v != nil {
		builder.WriteString("updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", a.RiderID))
	builder.WriteString(", ")
	builder.WriteString("subscribe_id=")
	builder.WriteString(fmt.Sprintf("%v", a.SubscribeID))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", a.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", a.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(a.Remark)
	builder.WriteString(", ")
	if v := a.EmployeeID; v != nil {
		builder.WriteString("employee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.StoreID; v != nil {
		builder.WriteString("store_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.BrandID; v != nil {
		builder.WriteString("brand_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.BatteryID; v != nil {
		builder.WriteString("battery_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.StationID; v != nil {
		builder.WriteString("station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.AgentID; v != nil {
		builder.WriteString("agent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(a.Time.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(a.Model)
	builder.WriteString(", ")
	if v := a.EbikeID; v != nil {
		builder.WriteString("ebike_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Allocates is a parsable slice of Allocate.
type Allocates []*Allocate
