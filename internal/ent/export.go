// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/export"
)

// Export is the model entity for the Export schema.
type Export struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// Taxonomy holds the value of the "taxonomy" field.
	// 分类
	Taxonomy string `json:"taxonomy,omitempty"`
	// Sn holds the value of the "sn" field.
	// 编号
	Sn string `json:"sn,omitempty"`
	// Status holds the value of the "status" field.
	// 状态
	Status uint8 `json:"status,omitempty"`
	// Path holds the value of the "path" field.
	// 文件路径
	Path string `json:"path,omitempty"`
	// Message holds the value of the "message" field.
	// 失败原因
	Message string `json:"message,omitempty"`
	// FinishAt holds the value of the "finish_at" field.
	// 生成时间
	FinishAt time.Time `json:"finish_at,omitempty"`
	// Duration holds the value of the "duration" field.
	// 耗时
	Duration int64 `json:"duration,omitempty"`
	// Condition holds the value of the "condition" field.
	// 筛选条件
	Condition json.RawMessage `json:"condition,omitempty"`
	// Info holds the value of the "info" field.
	// 详细信息
	Info map[string]interface{} `json:"info,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Export) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case export.FieldCreator, export.FieldLastModifier, export.FieldCondition, export.FieldInfo:
			values[i] = new([]byte)
		case export.FieldID, export.FieldStatus, export.FieldDuration:
			values[i] = new(sql.NullInt64)
		case export.FieldRemark, export.FieldTaxonomy, export.FieldSn, export.FieldPath, export.FieldMessage:
			values[i] = new(sql.NullString)
		case export.FieldCreatedAt, export.FieldUpdatedAt, export.FieldDeletedAt, export.FieldFinishAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Export", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Export fields.
func (e *Export) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case export.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case export.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case export.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case export.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = new(time.Time)
				*e.DeletedAt = value.Time
			}
		case export.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case export.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case export.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				e.Remark = value.String
			}
		case export.FieldTaxonomy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field taxonomy", values[i])
			} else if value.Valid {
				e.Taxonomy = value.String
			}
		case export.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				e.Sn = value.String
			}
		case export.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = uint8(value.Int64)
			}
		case export.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				e.Path = value.String
			}
		case export.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				e.Message = value.String
			}
		case export.FieldFinishAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finish_at", values[i])
			} else if value.Valid {
				e.FinishAt = value.Time
			}
		case export.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				e.Duration = value.Int64
			}
		case export.FieldCondition:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Condition); err != nil {
					return fmt.Errorf("unmarshal field condition: %w", err)
				}
			}
		case export.FieldInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Info); err != nil {
					return fmt.Errorf("unmarshal field info: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Export.
// Note that you need to call Export.Unwrap() before calling this method if this Export
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Export) Update() *ExportUpdateOne {
	return (&ExportClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Export entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Export) Unwrap() *Export {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Export is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Export) String() string {
	var builder strings.Builder
	builder.WriteString("Export(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	if v := e.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", e.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", e.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(e.Remark)
	builder.WriteString(", taxonomy=")
	builder.WriteString(e.Taxonomy)
	builder.WriteString(", sn=")
	builder.WriteString(e.Sn)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", path=")
	builder.WriteString(e.Path)
	builder.WriteString(", message=")
	builder.WriteString(e.Message)
	builder.WriteString(", finish_at=")
	builder.WriteString(e.FinishAt.Format(time.ANSIC))
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", e.Duration))
	builder.WriteString(", condition=")
	builder.WriteString(fmt.Sprintf("%v", e.Condition))
	builder.WriteString(", info=")
	builder.WriteString(fmt.Sprintf("%v", e.Info))
	builder.WriteByte(')')
	return builder.String()
}

// Exports is a parsable slice of Export.
type Exports []*Export

func (e Exports) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
