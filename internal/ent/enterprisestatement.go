// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
)

// EnterpriseStatement is the model entity for the EnterpriseStatement schema.
type EnterpriseStatement struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 企业ID
	EnterpriseID uint64 `json:"enterprise_id,omitempty"`
	// 账单金额
	Cost float64 `json:"cost,omitempty"`
	// 结账时间
	SettledAt *time.Time `json:"settled_at,omitempty"`
	// 账期内使用总天数
	Days int `json:"days,omitempty"`
	// 账期内使用总人数
	RiderNumber int `json:"rider_number,omitempty"`
	// 对账单计算日期(包含当日)
	Date *time.Time `json:"date,omitempty"`
	// 账单开始日期
	Start time.Time `json:"start,omitempty"`
	// 账单结束日期
	End *time.Time `json:"end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterpriseStatementQuery when eager-loading is set.
	Edges EnterpriseStatementEdges `json:"edges"`
}

// EnterpriseStatementEdges holds the relations/edges for other nodes in the graph.
type EnterpriseStatementEdges struct {
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Bills holds the value of the bills edge.
	Bills []*EnterpriseBill `json:"bills,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseStatementEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[0] {
		if e.Enterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// BillsOrErr returns the Bills value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseStatementEdges) BillsOrErr() ([]*EnterpriseBill, error) {
	if e.loadedTypes[1] {
		return e.Bills, nil
	}
	return nil, &NotLoadedError{edge: "bills"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnterpriseStatement) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterprisestatement.FieldCreator, enterprisestatement.FieldLastModifier:
			values[i] = new([]byte)
		case enterprisestatement.FieldCost:
			values[i] = new(sql.NullFloat64)
		case enterprisestatement.FieldID, enterprisestatement.FieldEnterpriseID, enterprisestatement.FieldDays, enterprisestatement.FieldRiderNumber:
			values[i] = new(sql.NullInt64)
		case enterprisestatement.FieldRemark:
			values[i] = new(sql.NullString)
		case enterprisestatement.FieldCreatedAt, enterprisestatement.FieldUpdatedAt, enterprisestatement.FieldDeletedAt, enterprisestatement.FieldSettledAt, enterprisestatement.FieldDate, enterprisestatement.FieldStart, enterprisestatement.FieldEnd:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EnterpriseStatement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnterpriseStatement fields.
func (es *EnterpriseStatement) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterprisestatement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			es.ID = uint64(value.Int64)
		case enterprisestatement.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				es.CreatedAt = value.Time
			}
		case enterprisestatement.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				es.UpdatedAt = value.Time
			}
		case enterprisestatement.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				es.DeletedAt = new(time.Time)
				*es.DeletedAt = value.Time
			}
		case enterprisestatement.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &es.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterprisestatement.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &es.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterprisestatement.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				es.Remark = value.String
			}
		case enterprisestatement.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				es.EnterpriseID = uint64(value.Int64)
			}
		case enterprisestatement.FieldCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				es.Cost = value.Float64
			}
		case enterprisestatement.FieldSettledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field settled_at", values[i])
			} else if value.Valid {
				es.SettledAt = new(time.Time)
				*es.SettledAt = value.Time
			}
		case enterprisestatement.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				es.Days = int(value.Int64)
			}
		case enterprisestatement.FieldRiderNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_number", values[i])
			} else if value.Valid {
				es.RiderNumber = int(value.Int64)
			}
		case enterprisestatement.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				es.Date = new(time.Time)
				*es.Date = value.Time
			}
		case enterprisestatement.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				es.Start = value.Time
			}
		case enterprisestatement.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				es.End = new(time.Time)
				*es.End = value.Time
			}
		}
	}
	return nil
}

// QueryEnterprise queries the "enterprise" edge of the EnterpriseStatement entity.
func (es *EnterpriseStatement) QueryEnterprise() *EnterpriseQuery {
	return (&EnterpriseStatementClient{config: es.config}).QueryEnterprise(es)
}

// QueryBills queries the "bills" edge of the EnterpriseStatement entity.
func (es *EnterpriseStatement) QueryBills() *EnterpriseBillQuery {
	return (&EnterpriseStatementClient{config: es.config}).QueryBills(es)
}

// Update returns a builder for updating this EnterpriseStatement.
// Note that you need to call EnterpriseStatement.Unwrap() before calling this method if this EnterpriseStatement
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *EnterpriseStatement) Update() *EnterpriseStatementUpdateOne {
	return (&EnterpriseStatementClient{config: es.config}).UpdateOne(es)
}

// Unwrap unwraps the EnterpriseStatement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *EnterpriseStatement) Unwrap() *EnterpriseStatement {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnterpriseStatement is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *EnterpriseStatement) String() string {
	var builder strings.Builder
	builder.WriteString("EnterpriseStatement(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("created_at=")
	builder.WriteString(es.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(es.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := es.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", es.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", es.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(es.Remark)
	builder.WriteString(", ")
	builder.WriteString("enterprise_id=")
	builder.WriteString(fmt.Sprintf("%v", es.EnterpriseID))
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", es.Cost))
	builder.WriteString(", ")
	if v := es.SettledAt; v != nil {
		builder.WriteString("settled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("days=")
	builder.WriteString(fmt.Sprintf("%v", es.Days))
	builder.WriteString(", ")
	builder.WriteString("rider_number=")
	builder.WriteString(fmt.Sprintf("%v", es.RiderNumber))
	builder.WriteString(", ")
	if v := es.Date; v != nil {
		builder.WriteString("date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(es.Start.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := es.End; v != nil {
		builder.WriteString("end=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// EnterpriseStatements is a parsable slice of EnterpriseStatement.
type EnterpriseStatements []*EnterpriseStatement

func (es EnterpriseStatements) config(cfg config) {
	for _i := range es {
		es[_i].config = cfg
	}
}
