// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/contracttemplate"
)

// ContractTemplate is the model entity for the ContractTemplate schema.
type ContractTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 模板名称
	Name string `json:"name,omitempty"`
	// 模板文件地址
	URL string `json:"url,omitempty"`
	// 用户类型 1:个签 2:团签
	Aimed uint8 `json:"aimed,omitempty"`
	// 套餐类型 1:单电 2:车电
	PlanType uint8 `json:"plan_type,omitempty"`
	// 模板hash
	Hash string `json:"hash,omitempty"`
	// 是否启用
	Enable       bool `json:"enable,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContractTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contracttemplate.FieldCreator, contracttemplate.FieldLastModifier:
			values[i] = new([]byte)
		case contracttemplate.FieldEnable:
			values[i] = new(sql.NullBool)
		case contracttemplate.FieldID, contracttemplate.FieldAimed, contracttemplate.FieldPlanType:
			values[i] = new(sql.NullInt64)
		case contracttemplate.FieldRemark, contracttemplate.FieldName, contracttemplate.FieldURL, contracttemplate.FieldHash:
			values[i] = new(sql.NullString)
		case contracttemplate.FieldCreatedAt, contracttemplate.FieldUpdatedAt, contracttemplate.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContractTemplate fields.
func (ct *ContractTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contracttemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = uint64(value.Int64)
		case contracttemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case contracttemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		case contracttemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ct.DeletedAt = new(time.Time)
				*ct.DeletedAt = value.Time
			}
		case contracttemplate.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case contracttemplate.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case contracttemplate.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ct.Remark = value.String
			}
		case contracttemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ct.Name = value.String
			}
		case contracttemplate.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				ct.URL = value.String
			}
		case contracttemplate.FieldAimed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field aimed", values[i])
			} else if value.Valid {
				ct.Aimed = uint8(value.Int64)
			}
		case contracttemplate.FieldPlanType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plan_type", values[i])
			} else if value.Valid {
				ct.PlanType = uint8(value.Int64)
			}
		case contracttemplate.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				ct.Hash = value.String
			}
		case contracttemplate.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				ct.Enable = value.Bool
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ContractTemplate.
// This includes values selected through modifiers, order, etc.
func (ct *ContractTemplate) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// Update returns a builder for updating this ContractTemplate.
// Note that you need to call ContractTemplate.Unwrap() before calling this method if this ContractTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *ContractTemplate) Update() *ContractTemplateUpdateOne {
	return NewContractTemplateClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the ContractTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *ContractTemplate) Unwrap() *ContractTemplate {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContractTemplate is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *ContractTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("ContractTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ct.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", ct.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ct.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ct.Remark)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ct.Name)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(ct.URL)
	builder.WriteString(", ")
	builder.WriteString("aimed=")
	builder.WriteString(fmt.Sprintf("%v", ct.Aimed))
	builder.WriteString(", ")
	builder.WriteString("plan_type=")
	builder.WriteString(fmt.Sprintf("%v", ct.PlanType))
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(ct.Hash)
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", ct.Enable))
	builder.WriteByte(')')
	return builder.String()
}

// ContractTemplates is a parsable slice of ContractTemplate.
type ContractTemplates []*ContractTemplate
