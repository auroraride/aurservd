// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// GoodsUpdate is the builder for updating Goods entities.
type GoodsUpdate struct {
	config
	hooks     []Hook
	mutation  *GoodsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoodsUpdate builder.
func (gu *GoodsUpdate) Where(ps ...predicate.Goods) *GoodsUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GoodsUpdate) SetUpdatedAt(t time.Time) *GoodsUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GoodsUpdate) SetDeletedAt(t time.Time) *GoodsUpdate {
	gu.mutation.SetDeletedAt(t)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableDeletedAt(t *time.Time) *GoodsUpdate {
	if t != nil {
		gu.SetDeletedAt(*t)
	}
	return gu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gu *GoodsUpdate) ClearDeletedAt() *GoodsUpdate {
	gu.mutation.ClearDeletedAt()
	return gu
}

// SetLastModifier sets the "last_modifier" field.
func (gu *GoodsUpdate) SetLastModifier(m *model.Modifier) *GoodsUpdate {
	gu.mutation.SetLastModifier(m)
	return gu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (gu *GoodsUpdate) ClearLastModifier() *GoodsUpdate {
	gu.mutation.ClearLastModifier()
	return gu
}

// SetRemark sets the "remark" field.
func (gu *GoodsUpdate) SetRemark(s string) *GoodsUpdate {
	gu.mutation.SetRemark(s)
	return gu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableRemark(s *string) *GoodsUpdate {
	if s != nil {
		gu.SetRemark(*s)
	}
	return gu
}

// ClearRemark clears the value of the "remark" field.
func (gu *GoodsUpdate) ClearRemark() *GoodsUpdate {
	gu.mutation.ClearRemark()
	return gu
}

// SetSn sets the "sn" field.
func (gu *GoodsUpdate) SetSn(s string) *GoodsUpdate {
	gu.mutation.SetSn(s)
	return gu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableSn(s *string) *GoodsUpdate {
	if s != nil {
		gu.SetSn(*s)
	}
	return gu
}

// SetName sets the "name" field.
func (gu *GoodsUpdate) SetName(s string) *GoodsUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableName(s *string) *GoodsUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetType sets the "type" field.
func (gu *GoodsUpdate) SetType(u uint8) *GoodsUpdate {
	gu.mutation.ResetType()
	gu.mutation.SetType(u)
	return gu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableType(u *uint8) *GoodsUpdate {
	if u != nil {
		gu.SetType(*u)
	}
	return gu
}

// AddType adds u to the "type" field.
func (gu *GoodsUpdate) AddType(u int8) *GoodsUpdate {
	gu.mutation.AddType(u)
	return gu
}

// SetLables sets the "lables" field.
func (gu *GoodsUpdate) SetLables(s []string) *GoodsUpdate {
	gu.mutation.SetLables(s)
	return gu
}

// AppendLables appends s to the "lables" field.
func (gu *GoodsUpdate) AppendLables(s []string) *GoodsUpdate {
	gu.mutation.AppendLables(s)
	return gu
}

// ClearLables clears the value of the "lables" field.
func (gu *GoodsUpdate) ClearLables() *GoodsUpdate {
	gu.mutation.ClearLables()
	return gu
}

// SetPrice sets the "price" field.
func (gu *GoodsUpdate) SetPrice(f float64) *GoodsUpdate {
	gu.mutation.ResetPrice()
	gu.mutation.SetPrice(f)
	return gu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillablePrice(f *float64) *GoodsUpdate {
	if f != nil {
		gu.SetPrice(*f)
	}
	return gu
}

// AddPrice adds f to the "price" field.
func (gu *GoodsUpdate) AddPrice(f float64) *GoodsUpdate {
	gu.mutation.AddPrice(f)
	return gu
}

// SetWeight sets the "weight" field.
func (gu *GoodsUpdate) SetWeight(i int) *GoodsUpdate {
	gu.mutation.ResetWeight()
	gu.mutation.SetWeight(i)
	return gu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableWeight(i *int) *GoodsUpdate {
	if i != nil {
		gu.SetWeight(*i)
	}
	return gu
}

// AddWeight adds i to the "weight" field.
func (gu *GoodsUpdate) AddWeight(i int) *GoodsUpdate {
	gu.mutation.AddWeight(i)
	return gu
}

// SetHeadPic sets the "head_pic" field.
func (gu *GoodsUpdate) SetHeadPic(s string) *GoodsUpdate {
	gu.mutation.SetHeadPic(s)
	return gu
}

// SetNillableHeadPic sets the "head_pic" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableHeadPic(s *string) *GoodsUpdate {
	if s != nil {
		gu.SetHeadPic(*s)
	}
	return gu
}

// SetPhotos sets the "photos" field.
func (gu *GoodsUpdate) SetPhotos(s []string) *GoodsUpdate {
	gu.mutation.SetPhotos(s)
	return gu
}

// AppendPhotos appends s to the "photos" field.
func (gu *GoodsUpdate) AppendPhotos(s []string) *GoodsUpdate {
	gu.mutation.AppendPhotos(s)
	return gu
}

// SetIntro sets the "intro" field.
func (gu *GoodsUpdate) SetIntro(s []string) *GoodsUpdate {
	gu.mutation.SetIntro(s)
	return gu
}

// AppendIntro appends s to the "intro" field.
func (gu *GoodsUpdate) AppendIntro(s []string) *GoodsUpdate {
	gu.mutation.AppendIntro(s)
	return gu
}

// SetStoreIds sets the "store_ids" field.
func (gu *GoodsUpdate) SetStoreIds(u []uint64) *GoodsUpdate {
	gu.mutation.SetStoreIds(u)
	return gu
}

// AppendStoreIds appends u to the "store_ids" field.
func (gu *GoodsUpdate) AppendStoreIds(u []uint64) *GoodsUpdate {
	gu.mutation.AppendStoreIds(u)
	return gu
}

// SetStatus sets the "status" field.
func (gu *GoodsUpdate) SetStatus(u uint8) *GoodsUpdate {
	gu.mutation.ResetStatus()
	gu.mutation.SetStatus(u)
	return gu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (gu *GoodsUpdate) SetNillableStatus(u *uint8) *GoodsUpdate {
	if u != nil {
		gu.SetStatus(*u)
	}
	return gu
}

// AddStatus adds u to the "status" field.
func (gu *GoodsUpdate) AddStatus(u int8) *GoodsUpdate {
	gu.mutation.AddStatus(u)
	return gu
}

// Mutation returns the GoodsMutation object of the builder.
func (gu *GoodsUpdate) Mutation() *GoodsMutation {
	return gu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GoodsUpdate) Save(ctx context.Context) (int, error) {
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GoodsUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GoodsUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GoodsUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GoodsUpdate) defaults() error {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		if goods.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goods.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goods.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gu *GoodsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodsUpdate {
	gu.modifiers = append(gu.modifiers, modifiers...)
	return gu
}

func (gu *GoodsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(goods.Table, goods.Columns, sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(goods.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.SetField(goods.FieldDeletedAt, field.TypeTime, value)
	}
	if gu.mutation.DeletedAtCleared() {
		_spec.ClearField(goods.FieldDeletedAt, field.TypeTime)
	}
	if gu.mutation.CreatorCleared() {
		_spec.ClearField(goods.FieldCreator, field.TypeJSON)
	}
	if value, ok := gu.mutation.LastModifier(); ok {
		_spec.SetField(goods.FieldLastModifier, field.TypeJSON, value)
	}
	if gu.mutation.LastModifierCleared() {
		_spec.ClearField(goods.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := gu.mutation.Remark(); ok {
		_spec.SetField(goods.FieldRemark, field.TypeString, value)
	}
	if gu.mutation.RemarkCleared() {
		_spec.ClearField(goods.FieldRemark, field.TypeString)
	}
	if value, ok := gu.mutation.Sn(); ok {
		_spec.SetField(goods.FieldSn, field.TypeString, value)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(goods.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.GetType(); ok {
		_spec.SetField(goods.FieldType, field.TypeUint8, value)
	}
	if value, ok := gu.mutation.AddedType(); ok {
		_spec.AddField(goods.FieldType, field.TypeUint8, value)
	}
	if value, ok := gu.mutation.Lables(); ok {
		_spec.SetField(goods.FieldLables, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedLables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, goods.FieldLables, value)
		})
	}
	if gu.mutation.LablesCleared() {
		_spec.ClearField(goods.FieldLables, field.TypeJSON)
	}
	if value, ok := gu.mutation.Price(); ok {
		_spec.SetField(goods.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.AddedPrice(); ok {
		_spec.AddField(goods.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := gu.mutation.Weight(); ok {
		_spec.SetField(goods.FieldWeight, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedWeight(); ok {
		_spec.AddField(goods.FieldWeight, field.TypeInt, value)
	}
	if value, ok := gu.mutation.HeadPic(); ok {
		_spec.SetField(goods.FieldHeadPic, field.TypeString, value)
	}
	if value, ok := gu.mutation.Photos(); ok {
		_spec.SetField(goods.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, goods.FieldPhotos, value)
		})
	}
	if value, ok := gu.mutation.Intro(); ok {
		_spec.SetField(goods.FieldIntro, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedIntro(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, goods.FieldIntro, value)
		})
	}
	if value, ok := gu.mutation.StoreIds(); ok {
		_spec.SetField(goods.FieldStoreIds, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedStoreIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, goods.FieldStoreIds, value)
		})
	}
	if value, ok := gu.mutation.Status(); ok {
		_spec.SetField(goods.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := gu.mutation.AddedStatus(); ok {
		_spec.AddField(goods.FieldStatus, field.TypeUint8, value)
	}
	_spec.AddModifiers(gu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goods.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GoodsUpdateOne is the builder for updating a single Goods entity.
type GoodsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoodsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GoodsUpdateOne) SetUpdatedAt(t time.Time) *GoodsUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GoodsUpdateOne) SetDeletedAt(t time.Time) *GoodsUpdateOne {
	guo.mutation.SetDeletedAt(t)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableDeletedAt(t *time.Time) *GoodsUpdateOne {
	if t != nil {
		guo.SetDeletedAt(*t)
	}
	return guo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guo *GoodsUpdateOne) ClearDeletedAt() *GoodsUpdateOne {
	guo.mutation.ClearDeletedAt()
	return guo
}

// SetLastModifier sets the "last_modifier" field.
func (guo *GoodsUpdateOne) SetLastModifier(m *model.Modifier) *GoodsUpdateOne {
	guo.mutation.SetLastModifier(m)
	return guo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (guo *GoodsUpdateOne) ClearLastModifier() *GoodsUpdateOne {
	guo.mutation.ClearLastModifier()
	return guo
}

// SetRemark sets the "remark" field.
func (guo *GoodsUpdateOne) SetRemark(s string) *GoodsUpdateOne {
	guo.mutation.SetRemark(s)
	return guo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableRemark(s *string) *GoodsUpdateOne {
	if s != nil {
		guo.SetRemark(*s)
	}
	return guo
}

// ClearRemark clears the value of the "remark" field.
func (guo *GoodsUpdateOne) ClearRemark() *GoodsUpdateOne {
	guo.mutation.ClearRemark()
	return guo
}

// SetSn sets the "sn" field.
func (guo *GoodsUpdateOne) SetSn(s string) *GoodsUpdateOne {
	guo.mutation.SetSn(s)
	return guo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableSn(s *string) *GoodsUpdateOne {
	if s != nil {
		guo.SetSn(*s)
	}
	return guo
}

// SetName sets the "name" field.
func (guo *GoodsUpdateOne) SetName(s string) *GoodsUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableName(s *string) *GoodsUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetType sets the "type" field.
func (guo *GoodsUpdateOne) SetType(u uint8) *GoodsUpdateOne {
	guo.mutation.ResetType()
	guo.mutation.SetType(u)
	return guo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableType(u *uint8) *GoodsUpdateOne {
	if u != nil {
		guo.SetType(*u)
	}
	return guo
}

// AddType adds u to the "type" field.
func (guo *GoodsUpdateOne) AddType(u int8) *GoodsUpdateOne {
	guo.mutation.AddType(u)
	return guo
}

// SetLables sets the "lables" field.
func (guo *GoodsUpdateOne) SetLables(s []string) *GoodsUpdateOne {
	guo.mutation.SetLables(s)
	return guo
}

// AppendLables appends s to the "lables" field.
func (guo *GoodsUpdateOne) AppendLables(s []string) *GoodsUpdateOne {
	guo.mutation.AppendLables(s)
	return guo
}

// ClearLables clears the value of the "lables" field.
func (guo *GoodsUpdateOne) ClearLables() *GoodsUpdateOne {
	guo.mutation.ClearLables()
	return guo
}

// SetPrice sets the "price" field.
func (guo *GoodsUpdateOne) SetPrice(f float64) *GoodsUpdateOne {
	guo.mutation.ResetPrice()
	guo.mutation.SetPrice(f)
	return guo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillablePrice(f *float64) *GoodsUpdateOne {
	if f != nil {
		guo.SetPrice(*f)
	}
	return guo
}

// AddPrice adds f to the "price" field.
func (guo *GoodsUpdateOne) AddPrice(f float64) *GoodsUpdateOne {
	guo.mutation.AddPrice(f)
	return guo
}

// SetWeight sets the "weight" field.
func (guo *GoodsUpdateOne) SetWeight(i int) *GoodsUpdateOne {
	guo.mutation.ResetWeight()
	guo.mutation.SetWeight(i)
	return guo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableWeight(i *int) *GoodsUpdateOne {
	if i != nil {
		guo.SetWeight(*i)
	}
	return guo
}

// AddWeight adds i to the "weight" field.
func (guo *GoodsUpdateOne) AddWeight(i int) *GoodsUpdateOne {
	guo.mutation.AddWeight(i)
	return guo
}

// SetHeadPic sets the "head_pic" field.
func (guo *GoodsUpdateOne) SetHeadPic(s string) *GoodsUpdateOne {
	guo.mutation.SetHeadPic(s)
	return guo
}

// SetNillableHeadPic sets the "head_pic" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableHeadPic(s *string) *GoodsUpdateOne {
	if s != nil {
		guo.SetHeadPic(*s)
	}
	return guo
}

// SetPhotos sets the "photos" field.
func (guo *GoodsUpdateOne) SetPhotos(s []string) *GoodsUpdateOne {
	guo.mutation.SetPhotos(s)
	return guo
}

// AppendPhotos appends s to the "photos" field.
func (guo *GoodsUpdateOne) AppendPhotos(s []string) *GoodsUpdateOne {
	guo.mutation.AppendPhotos(s)
	return guo
}

// SetIntro sets the "intro" field.
func (guo *GoodsUpdateOne) SetIntro(s []string) *GoodsUpdateOne {
	guo.mutation.SetIntro(s)
	return guo
}

// AppendIntro appends s to the "intro" field.
func (guo *GoodsUpdateOne) AppendIntro(s []string) *GoodsUpdateOne {
	guo.mutation.AppendIntro(s)
	return guo
}

// SetStoreIds sets the "store_ids" field.
func (guo *GoodsUpdateOne) SetStoreIds(u []uint64) *GoodsUpdateOne {
	guo.mutation.SetStoreIds(u)
	return guo
}

// AppendStoreIds appends u to the "store_ids" field.
func (guo *GoodsUpdateOne) AppendStoreIds(u []uint64) *GoodsUpdateOne {
	guo.mutation.AppendStoreIds(u)
	return guo
}

// SetStatus sets the "status" field.
func (guo *GoodsUpdateOne) SetStatus(u uint8) *GoodsUpdateOne {
	guo.mutation.ResetStatus()
	guo.mutation.SetStatus(u)
	return guo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (guo *GoodsUpdateOne) SetNillableStatus(u *uint8) *GoodsUpdateOne {
	if u != nil {
		guo.SetStatus(*u)
	}
	return guo
}

// AddStatus adds u to the "status" field.
func (guo *GoodsUpdateOne) AddStatus(u int8) *GoodsUpdateOne {
	guo.mutation.AddStatus(u)
	return guo
}

// Mutation returns the GoodsMutation object of the builder.
func (guo *GoodsUpdateOne) Mutation() *GoodsMutation {
	return guo.mutation
}

// Where appends a list predicates to the GoodsUpdate builder.
func (guo *GoodsUpdateOne) Where(ps ...predicate.Goods) *GoodsUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GoodsUpdateOne) Select(field string, fields ...string) *GoodsUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Goods entity.
func (guo *GoodsUpdateOne) Save(ctx context.Context) (*Goods, error) {
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GoodsUpdateOne) SaveX(ctx context.Context) *Goods {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GoodsUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GoodsUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GoodsUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		if goods.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized goods.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := goods.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (guo *GoodsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoodsUpdateOne {
	guo.modifiers = append(guo.modifiers, modifiers...)
	return guo
}

func (guo *GoodsUpdateOne) sqlSave(ctx context.Context) (_node *Goods, err error) {
	_spec := sqlgraph.NewUpdateSpec(goods.Table, goods.Columns, sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Goods.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goods.FieldID)
		for _, f := range fields {
			if !goods.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != goods.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(goods.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.SetField(goods.FieldDeletedAt, field.TypeTime, value)
	}
	if guo.mutation.DeletedAtCleared() {
		_spec.ClearField(goods.FieldDeletedAt, field.TypeTime)
	}
	if guo.mutation.CreatorCleared() {
		_spec.ClearField(goods.FieldCreator, field.TypeJSON)
	}
	if value, ok := guo.mutation.LastModifier(); ok {
		_spec.SetField(goods.FieldLastModifier, field.TypeJSON, value)
	}
	if guo.mutation.LastModifierCleared() {
		_spec.ClearField(goods.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := guo.mutation.Remark(); ok {
		_spec.SetField(goods.FieldRemark, field.TypeString, value)
	}
	if guo.mutation.RemarkCleared() {
		_spec.ClearField(goods.FieldRemark, field.TypeString)
	}
	if value, ok := guo.mutation.Sn(); ok {
		_spec.SetField(goods.FieldSn, field.TypeString, value)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(goods.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.GetType(); ok {
		_spec.SetField(goods.FieldType, field.TypeUint8, value)
	}
	if value, ok := guo.mutation.AddedType(); ok {
		_spec.AddField(goods.FieldType, field.TypeUint8, value)
	}
	if value, ok := guo.mutation.Lables(); ok {
		_spec.SetField(goods.FieldLables, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedLables(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, goods.FieldLables, value)
		})
	}
	if guo.mutation.LablesCleared() {
		_spec.ClearField(goods.FieldLables, field.TypeJSON)
	}
	if value, ok := guo.mutation.Price(); ok {
		_spec.SetField(goods.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.AddedPrice(); ok {
		_spec.AddField(goods.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := guo.mutation.Weight(); ok {
		_spec.SetField(goods.FieldWeight, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedWeight(); ok {
		_spec.AddField(goods.FieldWeight, field.TypeInt, value)
	}
	if value, ok := guo.mutation.HeadPic(); ok {
		_spec.SetField(goods.FieldHeadPic, field.TypeString, value)
	}
	if value, ok := guo.mutation.Photos(); ok {
		_spec.SetField(goods.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, goods.FieldPhotos, value)
		})
	}
	if value, ok := guo.mutation.Intro(); ok {
		_spec.SetField(goods.FieldIntro, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedIntro(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, goods.FieldIntro, value)
		})
	}
	if value, ok := guo.mutation.StoreIds(); ok {
		_spec.SetField(goods.FieldStoreIds, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedStoreIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, goods.FieldStoreIds, value)
		})
	}
	if value, ok := guo.mutation.Status(); ok {
		_spec.SetField(goods.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := guo.mutation.AddedStatus(); ok {
		_spec.AddField(goods.FieldStatus, field.TypeUint8, value)
	}
	_spec.AddModifiers(guo.modifiers...)
	_node = &Goods{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{goods.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
