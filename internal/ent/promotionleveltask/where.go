// Code generated by ent, DO NOT EDIT.

package promotionleveltask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldUpdatedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldRemark, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldDescription, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldType, v))
}

// GrowthValue applies equality check predicate on the "growth_value" field. It's identical to GrowthValueEQ.
func GrowthValue(v uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldGrowthValue, v))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldContainsFold(FieldRemark, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldType, v))
}

// GrowthValueEQ applies the EQ predicate on the "growth_value" field.
func GrowthValueEQ(v uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldGrowthValue, v))
}

// GrowthValueNEQ applies the NEQ predicate on the "growth_value" field.
func GrowthValueNEQ(v uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldGrowthValue, v))
}

// GrowthValueIn applies the In predicate on the "growth_value" field.
func GrowthValueIn(vs ...uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldGrowthValue, vs...))
}

// GrowthValueNotIn applies the NotIn predicate on the "growth_value" field.
func GrowthValueNotIn(vs ...uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldGrowthValue, vs...))
}

// GrowthValueGT applies the GT predicate on the "growth_value" field.
func GrowthValueGT(v uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldGrowthValue, v))
}

// GrowthValueGTE applies the GTE predicate on the "growth_value" field.
func GrowthValueGTE(v uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldGrowthValue, v))
}

// GrowthValueLT applies the LT predicate on the "growth_value" field.
func GrowthValueLT(v uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldGrowthValue, v))
}

// GrowthValueLTE applies the LTE predicate on the "growth_value" field.
func GrowthValueLTE(v uint64) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldGrowthValue, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldLTE(FieldKey, v))
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldContains(FieldKey, v))
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldHasPrefix(FieldKey, v))
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldHasSuffix(FieldKey, v))
}

// KeyIsNil applies the IsNil predicate on the "key" field.
func KeyIsNil() predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldIsNull(FieldKey))
}

// KeyNotNil applies the NotNil predicate on the "key" field.
func KeyNotNil() predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldNotNull(FieldKey))
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldEqualFold(FieldKey, v))
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.FieldContainsFold(FieldKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PromotionLevelTask) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PromotionLevelTask) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PromotionLevelTask) predicate.PromotionLevelTask {
	return predicate.PromotionLevelTask(sql.NotPredicates(p))
}
