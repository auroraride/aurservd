// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionperson"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PromotionMember is the model entity for the PromotionMember schema.
type PromotionMember struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 骑手ID
	RiderID *uint64 `json:"rider_id,omitempty"`
	// LevelID holds the value of the "level_id" field.
	LevelID *uint64 `json:"level_id,omitempty"`
	// 会员手机号
	Phone string `json:"phone,omitempty"`
	// 会员姓名
	Name string `json:"name,omitempty"`
	// 钱包余额
	Balance float64 `json:"balance,omitempty"`
	// 钱包冻结金额
	Frozen float64 `json:"frozen,omitempty"`
	// 总成长值
	TotalGrowthValue uint64 `json:"total_growth_value,omitempty"`
	// 当前等级成长值
	CurrentGrowthValue uint64 `json:"current_growth_value,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// 实名认证ID
	PersonID *uint64 `json:"person_id,omitempty"`
	// 头像url
	AvatarURL string `json:"avatar_url,omitempty"`
	// 新签次数
	NewSignCount uint64 `json:"new_sign_count,omitempty"`
	// 续费次数
	RenewCount uint64 `json:"renew_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionMemberQuery when eager-loading is set.
	Edges        PromotionMemberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionMemberEdges holds the relations/edges for other nodes in the graph.
type PromotionMemberEdges struct {
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// Level holds the value of the level edge.
	Level *PromotionLevel `json:"level,omitempty"`
	// Referring holds the value of the referring edge.
	Referring []*PromotionReferrals `json:"referring,omitempty"`
	// Referred holds the value of the referred edge.
	Referred *PromotionReferrals `json:"referred,omitempty"`
	// Person holds the value of the person edge.
	Person *PromotionPerson `json:"person,omitempty"`
	// Cards holds the value of the cards edge.
	Cards []*PromotionBankCard `json:"cards,omitempty"`
	// Commissions holds the value of the commissions edge.
	Commissions []*PromotionMemberCommission `json:"commissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionMemberEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[0] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// LevelOrErr returns the Level value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionMemberEdges) LevelOrErr() (*PromotionLevel, error) {
	if e.loadedTypes[1] {
		if e.Level == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: promotionlevel.Label}
		}
		return e.Level, nil
	}
	return nil, &NotLoadedError{edge: "level"}
}

// ReferringOrErr returns the Referring value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionMemberEdges) ReferringOrErr() ([]*PromotionReferrals, error) {
	if e.loadedTypes[2] {
		return e.Referring, nil
	}
	return nil, &NotLoadedError{edge: "referring"}
}

// ReferredOrErr returns the Referred value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionMemberEdges) ReferredOrErr() (*PromotionReferrals, error) {
	if e.loadedTypes[3] {
		if e.Referred == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: promotionreferrals.Label}
		}
		return e.Referred, nil
	}
	return nil, &NotLoadedError{edge: "referred"}
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionMemberEdges) PersonOrErr() (*PromotionPerson, error) {
	if e.loadedTypes[4] {
		if e.Person == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: promotionperson.Label}
		}
		return e.Person, nil
	}
	return nil, &NotLoadedError{edge: "person"}
}

// CardsOrErr returns the Cards value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionMemberEdges) CardsOrErr() ([]*PromotionBankCard, error) {
	if e.loadedTypes[5] {
		return e.Cards, nil
	}
	return nil, &NotLoadedError{edge: "cards"}
}

// CommissionsOrErr returns the Commissions value or an error if the edge
// was not loaded in eager-loading.
func (e PromotionMemberEdges) CommissionsOrErr() ([]*PromotionMemberCommission, error) {
	if e.loadedTypes[6] {
		return e.Commissions, nil
	}
	return nil, &NotLoadedError{edge: "commissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionmember.FieldCreator, promotionmember.FieldLastModifier:
			values[i] = new([]byte)
		case promotionmember.FieldEnable:
			values[i] = new(sql.NullBool)
		case promotionmember.FieldBalance, promotionmember.FieldFrozen:
			values[i] = new(sql.NullFloat64)
		case promotionmember.FieldID, promotionmember.FieldRiderID, promotionmember.FieldLevelID, promotionmember.FieldTotalGrowthValue, promotionmember.FieldCurrentGrowthValue, promotionmember.FieldPersonID, promotionmember.FieldNewSignCount, promotionmember.FieldRenewCount:
			values[i] = new(sql.NullInt64)
		case promotionmember.FieldRemark, promotionmember.FieldPhone, promotionmember.FieldName, promotionmember.FieldAvatarURL:
			values[i] = new(sql.NullString)
		case promotionmember.FieldCreatedAt, promotionmember.FieldUpdatedAt, promotionmember.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionMember fields.
func (pm *PromotionMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pm.ID = uint64(value.Int64)
		case promotionmember.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case promotionmember.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pm.UpdatedAt = value.Time
			}
		case promotionmember.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pm.DeletedAt = new(time.Time)
				*pm.DeletedAt = value.Time
			}
		case promotionmember.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pm.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotionmember.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pm.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotionmember.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pm.Remark = value.String
			}
		case promotionmember.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				pm.RiderID = new(uint64)
				*pm.RiderID = uint64(value.Int64)
			}
		case promotionmember.FieldLevelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level_id", values[i])
			} else if value.Valid {
				pm.LevelID = new(uint64)
				*pm.LevelID = uint64(value.Int64)
			}
		case promotionmember.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				pm.Phone = value.String
			}
		case promotionmember.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pm.Name = value.String
			}
		case promotionmember.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				pm.Balance = value.Float64
			}
		case promotionmember.FieldFrozen:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field frozen", values[i])
			} else if value.Valid {
				pm.Frozen = value.Float64
			}
		case promotionmember.FieldTotalGrowthValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total_growth_value", values[i])
			} else if value.Valid {
				pm.TotalGrowthValue = uint64(value.Int64)
			}
		case promotionmember.FieldCurrentGrowthValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_growth_value", values[i])
			} else if value.Valid {
				pm.CurrentGrowthValue = uint64(value.Int64)
			}
		case promotionmember.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				pm.Enable = value.Bool
			}
		case promotionmember.FieldPersonID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field person_id", values[i])
			} else if value.Valid {
				pm.PersonID = new(uint64)
				*pm.PersonID = uint64(value.Int64)
			}
		case promotionmember.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				pm.AvatarURL = value.String
			}
		case promotionmember.FieldNewSignCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field new_sign_count", values[i])
			} else if value.Valid {
				pm.NewSignCount = uint64(value.Int64)
			}
		case promotionmember.FieldRenewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field renew_count", values[i])
			} else if value.Valid {
				pm.RenewCount = uint64(value.Int64)
			}
		default:
			pm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionMember.
// This includes values selected through modifiers, order, etc.
func (pm *PromotionMember) Value(name string) (ent.Value, error) {
	return pm.selectValues.Get(name)
}

// QueryRider queries the "rider" edge of the PromotionMember entity.
func (pm *PromotionMember) QueryRider() *RiderQuery {
	return NewPromotionMemberClient(pm.config).QueryRider(pm)
}

// QueryLevel queries the "level" edge of the PromotionMember entity.
func (pm *PromotionMember) QueryLevel() *PromotionLevelQuery {
	return NewPromotionMemberClient(pm.config).QueryLevel(pm)
}

// QueryReferring queries the "referring" edge of the PromotionMember entity.
func (pm *PromotionMember) QueryReferring() *PromotionReferralsQuery {
	return NewPromotionMemberClient(pm.config).QueryReferring(pm)
}

// QueryReferred queries the "referred" edge of the PromotionMember entity.
func (pm *PromotionMember) QueryReferred() *PromotionReferralsQuery {
	return NewPromotionMemberClient(pm.config).QueryReferred(pm)
}

// QueryPerson queries the "person" edge of the PromotionMember entity.
func (pm *PromotionMember) QueryPerson() *PromotionPersonQuery {
	return NewPromotionMemberClient(pm.config).QueryPerson(pm)
}

// QueryCards queries the "cards" edge of the PromotionMember entity.
func (pm *PromotionMember) QueryCards() *PromotionBankCardQuery {
	return NewPromotionMemberClient(pm.config).QueryCards(pm)
}

// QueryCommissions queries the "commissions" edge of the PromotionMember entity.
func (pm *PromotionMember) QueryCommissions() *PromotionMemberCommissionQuery {
	return NewPromotionMemberClient(pm.config).QueryCommissions(pm)
}

// Update returns a builder for updating this PromotionMember.
// Note that you need to call PromotionMember.Unwrap() before calling this method if this PromotionMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PromotionMember) Update() *PromotionMemberUpdateOne {
	return NewPromotionMemberClient(pm.config).UpdateOne(pm)
}

// Unwrap unwraps the PromotionMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PromotionMember) Unwrap() *PromotionMember {
	_tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionMember is not a transactional entity")
	}
	pm.config.driver = _tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PromotionMember) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pm.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pm.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pm.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pm.Remark)
	builder.WriteString(", ")
	if v := pm.RiderID; v != nil {
		builder.WriteString("rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pm.LevelID; v != nil {
		builder.WriteString("level_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(pm.Phone)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pm.Name)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", pm.Balance))
	builder.WriteString(", ")
	builder.WriteString("frozen=")
	builder.WriteString(fmt.Sprintf("%v", pm.Frozen))
	builder.WriteString(", ")
	builder.WriteString("total_growth_value=")
	builder.WriteString(fmt.Sprintf("%v", pm.TotalGrowthValue))
	builder.WriteString(", ")
	builder.WriteString("current_growth_value=")
	builder.WriteString(fmt.Sprintf("%v", pm.CurrentGrowthValue))
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", pm.Enable))
	builder.WriteString(", ")
	if v := pm.PersonID; v != nil {
		builder.WriteString("person_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("avatar_url=")
	builder.WriteString(pm.AvatarURL)
	builder.WriteString(", ")
	builder.WriteString("new_sign_count=")
	builder.WriteString(fmt.Sprintf("%v", pm.NewSignCount))
	builder.WriteString(", ")
	builder.WriteString("renew_count=")
	builder.WriteString(fmt.Sprintf("%v", pm.RenewCount))
	builder.WriteByte(')')
	return builder.String()
}

// PromotionMembers is a parsable slice of PromotionMember.
type PromotionMembers []*PromotionMember
