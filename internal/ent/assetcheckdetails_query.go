// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetcheck"
	"github.com/auroraride/aurservd/internal/ent/assetcheckdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetCheckDetailsQuery is the builder for querying AssetCheckDetails entities.
type AssetCheckDetailsQuery struct {
	config
	ctx               *QueryContext
	order             []assetcheckdetails.OrderOption
	inters            []Interceptor
	predicates        []predicate.AssetCheckDetails
	withMaintainer    *MaintainerQuery
	withAsset         *AssetQuery
	withCheck         *AssetCheckQuery
	withWarehouse     *WarehouseQuery
	withStore         *StoreQuery
	withCabinet       *CabinetQuery
	withStation       *EnterpriseStationQuery
	withRider         *RiderQuery
	withOperator      *MaintainerQuery
	withRealWarehouse *WarehouseQuery
	withRealStore     *StoreQuery
	withRealCabinet   *CabinetQuery
	withRealStation   *EnterpriseStationQuery
	withRealRider     *RiderQuery
	withRealOperator  *MaintainerQuery
	modifiers         []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetCheckDetailsQuery builder.
func (acdq *AssetCheckDetailsQuery) Where(ps ...predicate.AssetCheckDetails) *AssetCheckDetailsQuery {
	acdq.predicates = append(acdq.predicates, ps...)
	return acdq
}

// Limit the number of records to be returned by this query.
func (acdq *AssetCheckDetailsQuery) Limit(limit int) *AssetCheckDetailsQuery {
	acdq.ctx.Limit = &limit
	return acdq
}

// Offset to start from.
func (acdq *AssetCheckDetailsQuery) Offset(offset int) *AssetCheckDetailsQuery {
	acdq.ctx.Offset = &offset
	return acdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (acdq *AssetCheckDetailsQuery) Unique(unique bool) *AssetCheckDetailsQuery {
	acdq.ctx.Unique = &unique
	return acdq
}

// Order specifies how the records should be ordered.
func (acdq *AssetCheckDetailsQuery) Order(o ...assetcheckdetails.OrderOption) *AssetCheckDetailsQuery {
	acdq.order = append(acdq.order, o...)
	return acdq
}

// QueryMaintainer chains the current query on the "maintainer" edge.
func (acdq *AssetCheckDetailsQuery) QueryMaintainer() *MaintainerQuery {
	query := (&MaintainerClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.MaintainerTable, assetcheckdetails.MaintainerColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (acdq *AssetCheckDetailsQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetcheckdetails.AssetTable, assetcheckdetails.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCheck chains the current query on the "check" edge.
func (acdq *AssetCheckDetailsQuery) QueryCheck() *AssetCheckQuery {
	query := (&AssetCheckClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(assetcheck.Table, assetcheck.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetcheckdetails.CheckTable, assetcheckdetails.CheckColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWarehouse chains the current query on the "warehouse" edge.
func (acdq *AssetCheckDetailsQuery) QueryWarehouse() *WarehouseQuery {
	query := (&WarehouseClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.WarehouseTable, assetcheckdetails.WarehouseColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (acdq *AssetCheckDetailsQuery) QueryStore() *StoreQuery {
	query := (&StoreClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.StoreTable, assetcheckdetails.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinet chains the current query on the "cabinet" edge.
func (acdq *AssetCheckDetailsQuery) QueryCabinet() *CabinetQuery {
	query := (&CabinetClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.CabinetTable, assetcheckdetails.CabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStation chains the current query on the "station" edge.
func (acdq *AssetCheckDetailsQuery) QueryStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.StationTable, assetcheckdetails.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (acdq *AssetCheckDetailsQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RiderTable, assetcheckdetails.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOperator chains the current query on the "operator" edge.
func (acdq *AssetCheckDetailsQuery) QueryOperator() *MaintainerQuery {
	query := (&MaintainerClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.OperatorTable, assetcheckdetails.OperatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRealWarehouse chains the current query on the "real_warehouse" edge.
func (acdq *AssetCheckDetailsQuery) QueryRealWarehouse() *WarehouseQuery {
	query := (&WarehouseClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealWarehouseTable, assetcheckdetails.RealWarehouseColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRealStore chains the current query on the "real_store" edge.
func (acdq *AssetCheckDetailsQuery) QueryRealStore() *StoreQuery {
	query := (&StoreClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealStoreTable, assetcheckdetails.RealStoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRealCabinet chains the current query on the "real_cabinet" edge.
func (acdq *AssetCheckDetailsQuery) QueryRealCabinet() *CabinetQuery {
	query := (&CabinetClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealCabinetTable, assetcheckdetails.RealCabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRealStation chains the current query on the "real_station" edge.
func (acdq *AssetCheckDetailsQuery) QueryRealStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealStationTable, assetcheckdetails.RealStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRealRider chains the current query on the "real_rider" edge.
func (acdq *AssetCheckDetailsQuery) QueryRealRider() *RiderQuery {
	query := (&RiderClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealRiderTable, assetcheckdetails.RealRiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRealOperator chains the current query on the "real_operator" edge.
func (acdq *AssetCheckDetailsQuery) QueryRealOperator() *MaintainerQuery {
	query := (&MaintainerClient{config: acdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := acdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := acdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealOperatorTable, assetcheckdetails.RealOperatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(acdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssetCheckDetails entity from the query.
// Returns a *NotFoundError when no AssetCheckDetails was found.
func (acdq *AssetCheckDetailsQuery) First(ctx context.Context) (*AssetCheckDetails, error) {
	nodes, err := acdq.Limit(1).All(setContextOp(ctx, acdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assetcheckdetails.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (acdq *AssetCheckDetailsQuery) FirstX(ctx context.Context) *AssetCheckDetails {
	node, err := acdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssetCheckDetails ID from the query.
// Returns a *NotFoundError when no AssetCheckDetails ID was found.
func (acdq *AssetCheckDetailsQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = acdq.Limit(1).IDs(setContextOp(ctx, acdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assetcheckdetails.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (acdq *AssetCheckDetailsQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := acdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssetCheckDetails entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssetCheckDetails entity is found.
// Returns a *NotFoundError when no AssetCheckDetails entities are found.
func (acdq *AssetCheckDetailsQuery) Only(ctx context.Context) (*AssetCheckDetails, error) {
	nodes, err := acdq.Limit(2).All(setContextOp(ctx, acdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assetcheckdetails.Label}
	default:
		return nil, &NotSingularError{assetcheckdetails.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (acdq *AssetCheckDetailsQuery) OnlyX(ctx context.Context) *AssetCheckDetails {
	node, err := acdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssetCheckDetails ID in the query.
// Returns a *NotSingularError when more than one AssetCheckDetails ID is found.
// Returns a *NotFoundError when no entities are found.
func (acdq *AssetCheckDetailsQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = acdq.Limit(2).IDs(setContextOp(ctx, acdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assetcheckdetails.Label}
	default:
		err = &NotSingularError{assetcheckdetails.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (acdq *AssetCheckDetailsQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := acdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssetCheckDetailsSlice.
func (acdq *AssetCheckDetailsQuery) All(ctx context.Context) ([]*AssetCheckDetails, error) {
	ctx = setContextOp(ctx, acdq.ctx, "All")
	if err := acdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssetCheckDetails, *AssetCheckDetailsQuery]()
	return withInterceptors[[]*AssetCheckDetails](ctx, acdq, qr, acdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (acdq *AssetCheckDetailsQuery) AllX(ctx context.Context) []*AssetCheckDetails {
	nodes, err := acdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssetCheckDetails IDs.
func (acdq *AssetCheckDetailsQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if acdq.ctx.Unique == nil && acdq.path != nil {
		acdq.Unique(true)
	}
	ctx = setContextOp(ctx, acdq.ctx, "IDs")
	if err = acdq.Select(assetcheckdetails.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (acdq *AssetCheckDetailsQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := acdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (acdq *AssetCheckDetailsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, acdq.ctx, "Count")
	if err := acdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, acdq, querierCount[*AssetCheckDetailsQuery](), acdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (acdq *AssetCheckDetailsQuery) CountX(ctx context.Context) int {
	count, err := acdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (acdq *AssetCheckDetailsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, acdq.ctx, "Exist")
	switch _, err := acdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (acdq *AssetCheckDetailsQuery) ExistX(ctx context.Context) bool {
	exist, err := acdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetCheckDetailsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (acdq *AssetCheckDetailsQuery) Clone() *AssetCheckDetailsQuery {
	if acdq == nil {
		return nil
	}
	return &AssetCheckDetailsQuery{
		config:            acdq.config,
		ctx:               acdq.ctx.Clone(),
		order:             append([]assetcheckdetails.OrderOption{}, acdq.order...),
		inters:            append([]Interceptor{}, acdq.inters...),
		predicates:        append([]predicate.AssetCheckDetails{}, acdq.predicates...),
		withMaintainer:    acdq.withMaintainer.Clone(),
		withAsset:         acdq.withAsset.Clone(),
		withCheck:         acdq.withCheck.Clone(),
		withWarehouse:     acdq.withWarehouse.Clone(),
		withStore:         acdq.withStore.Clone(),
		withCabinet:       acdq.withCabinet.Clone(),
		withStation:       acdq.withStation.Clone(),
		withRider:         acdq.withRider.Clone(),
		withOperator:      acdq.withOperator.Clone(),
		withRealWarehouse: acdq.withRealWarehouse.Clone(),
		withRealStore:     acdq.withRealStore.Clone(),
		withRealCabinet:   acdq.withRealCabinet.Clone(),
		withRealStation:   acdq.withRealStation.Clone(),
		withRealRider:     acdq.withRealRider.Clone(),
		withRealOperator:  acdq.withRealOperator.Clone(),
		// clone intermediate query.
		sql:  acdq.sql.Clone(),
		path: acdq.path,
	}
}

// WithMaintainer tells the query-builder to eager-load the nodes that are connected to
// the "maintainer" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithMaintainer(opts ...func(*MaintainerQuery)) *AssetCheckDetailsQuery {
	query := (&MaintainerClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withMaintainer = query
	return acdq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithAsset(opts ...func(*AssetQuery)) *AssetCheckDetailsQuery {
	query := (&AssetClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withAsset = query
	return acdq
}

// WithCheck tells the query-builder to eager-load the nodes that are connected to
// the "check" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithCheck(opts ...func(*AssetCheckQuery)) *AssetCheckDetailsQuery {
	query := (&AssetCheckClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withCheck = query
	return acdq
}

// WithWarehouse tells the query-builder to eager-load the nodes that are connected to
// the "warehouse" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithWarehouse(opts ...func(*WarehouseQuery)) *AssetCheckDetailsQuery {
	query := (&WarehouseClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withWarehouse = query
	return acdq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithStore(opts ...func(*StoreQuery)) *AssetCheckDetailsQuery {
	query := (&StoreClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withStore = query
	return acdq
}

// WithCabinet tells the query-builder to eager-load the nodes that are connected to
// the "cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithCabinet(opts ...func(*CabinetQuery)) *AssetCheckDetailsQuery {
	query := (&CabinetClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withCabinet = query
	return acdq
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithStation(opts ...func(*EnterpriseStationQuery)) *AssetCheckDetailsQuery {
	query := (&EnterpriseStationClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withStation = query
	return acdq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithRider(opts ...func(*RiderQuery)) *AssetCheckDetailsQuery {
	query := (&RiderClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withRider = query
	return acdq
}

// WithOperator tells the query-builder to eager-load the nodes that are connected to
// the "operator" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithOperator(opts ...func(*MaintainerQuery)) *AssetCheckDetailsQuery {
	query := (&MaintainerClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withOperator = query
	return acdq
}

// WithRealWarehouse tells the query-builder to eager-load the nodes that are connected to
// the "real_warehouse" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithRealWarehouse(opts ...func(*WarehouseQuery)) *AssetCheckDetailsQuery {
	query := (&WarehouseClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withRealWarehouse = query
	return acdq
}

// WithRealStore tells the query-builder to eager-load the nodes that are connected to
// the "real_store" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithRealStore(opts ...func(*StoreQuery)) *AssetCheckDetailsQuery {
	query := (&StoreClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withRealStore = query
	return acdq
}

// WithRealCabinet tells the query-builder to eager-load the nodes that are connected to
// the "real_cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithRealCabinet(opts ...func(*CabinetQuery)) *AssetCheckDetailsQuery {
	query := (&CabinetClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withRealCabinet = query
	return acdq
}

// WithRealStation tells the query-builder to eager-load the nodes that are connected to
// the "real_station" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithRealStation(opts ...func(*EnterpriseStationQuery)) *AssetCheckDetailsQuery {
	query := (&EnterpriseStationClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withRealStation = query
	return acdq
}

// WithRealRider tells the query-builder to eager-load the nodes that are connected to
// the "real_rider" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithRealRider(opts ...func(*RiderQuery)) *AssetCheckDetailsQuery {
	query := (&RiderClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withRealRider = query
	return acdq
}

// WithRealOperator tells the query-builder to eager-load the nodes that are connected to
// the "real_operator" edge. The optional arguments are used to configure the query builder of the edge.
func (acdq *AssetCheckDetailsQuery) WithRealOperator(opts ...func(*MaintainerQuery)) *AssetCheckDetailsQuery {
	query := (&MaintainerClient{config: acdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	acdq.withRealOperator = query
	return acdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssetCheckDetails.Query().
//		GroupBy(assetcheckdetails.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (acdq *AssetCheckDetailsQuery) GroupBy(field string, fields ...string) *AssetCheckDetailsGroupBy {
	acdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetCheckDetailsGroupBy{build: acdq}
	grbuild.flds = &acdq.ctx.Fields
	grbuild.label = assetcheckdetails.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AssetCheckDetails.Query().
//		Select(assetcheckdetails.FieldCreatedAt).
//		Scan(ctx, &v)
func (acdq *AssetCheckDetailsQuery) Select(fields ...string) *AssetCheckDetailsSelect {
	acdq.ctx.Fields = append(acdq.ctx.Fields, fields...)
	sbuild := &AssetCheckDetailsSelect{AssetCheckDetailsQuery: acdq}
	sbuild.label = assetcheckdetails.Label
	sbuild.flds, sbuild.scan = &acdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetCheckDetailsSelect configured with the given aggregations.
func (acdq *AssetCheckDetailsQuery) Aggregate(fns ...AggregateFunc) *AssetCheckDetailsSelect {
	return acdq.Select().Aggregate(fns...)
}

func (acdq *AssetCheckDetailsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range acdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, acdq); err != nil {
				return err
			}
		}
	}
	for _, f := range acdq.ctx.Fields {
		if !assetcheckdetails.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if acdq.path != nil {
		prev, err := acdq.path(ctx)
		if err != nil {
			return err
		}
		acdq.sql = prev
	}
	return nil
}

func (acdq *AssetCheckDetailsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssetCheckDetails, error) {
	var (
		nodes       = []*AssetCheckDetails{}
		_spec       = acdq.querySpec()
		loadedTypes = [15]bool{
			acdq.withMaintainer != nil,
			acdq.withAsset != nil,
			acdq.withCheck != nil,
			acdq.withWarehouse != nil,
			acdq.withStore != nil,
			acdq.withCabinet != nil,
			acdq.withStation != nil,
			acdq.withRider != nil,
			acdq.withOperator != nil,
			acdq.withRealWarehouse != nil,
			acdq.withRealStore != nil,
			acdq.withRealCabinet != nil,
			acdq.withRealStation != nil,
			acdq.withRealRider != nil,
			acdq.withRealOperator != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssetCheckDetails).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssetCheckDetails{config: acdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(acdq.modifiers) > 0 {
		_spec.Modifiers = acdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, acdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := acdq.withMaintainer; query != nil {
		if err := acdq.loadMaintainer(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Maintainer) { n.Edges.Maintainer = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withAsset; query != nil {
		if err := acdq.loadAsset(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Asset) { n.Edges.Asset = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withCheck; query != nil {
		if err := acdq.loadCheck(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *AssetCheck) { n.Edges.Check = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withWarehouse; query != nil {
		if err := acdq.loadWarehouse(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Warehouse) { n.Edges.Warehouse = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withStore; query != nil {
		if err := acdq.loadStore(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withCabinet; query != nil {
		if err := acdq.loadCabinet(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Cabinet) { n.Edges.Cabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withStation; query != nil {
		if err := acdq.loadStation(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *EnterpriseStation) { n.Edges.Station = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withRider; query != nil {
		if err := acdq.loadRider(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withOperator; query != nil {
		if err := acdq.loadOperator(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Maintainer) { n.Edges.Operator = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withRealWarehouse; query != nil {
		if err := acdq.loadRealWarehouse(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Warehouse) { n.Edges.RealWarehouse = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withRealStore; query != nil {
		if err := acdq.loadRealStore(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Store) { n.Edges.RealStore = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withRealCabinet; query != nil {
		if err := acdq.loadRealCabinet(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Cabinet) { n.Edges.RealCabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withRealStation; query != nil {
		if err := acdq.loadRealStation(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *EnterpriseStation) { n.Edges.RealStation = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withRealRider; query != nil {
		if err := acdq.loadRealRider(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Rider) { n.Edges.RealRider = e }); err != nil {
			return nil, err
		}
	}
	if query := acdq.withRealOperator; query != nil {
		if err := acdq.loadRealOperator(ctx, query, nodes, nil,
			func(n *AssetCheckDetails, e *Maintainer) { n.Edges.RealOperator = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (acdq *AssetCheckDetailsQuery) loadMaintainer(ctx context.Context, query *MaintainerQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		if nodes[i].MaintainerID == nil {
			continue
		}
		fk := *nodes[i].MaintainerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "maintainer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Asset)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].AssetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(asset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "asset_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadCheck(ctx context.Context, query *AssetCheckQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *AssetCheck)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].CheckID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(assetcheck.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "check_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadWarehouse(ctx context.Context, query *WarehouseQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Warehouse)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(warehouse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadCabinet(ctx context.Context, query *CabinetQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadOperator(ctx context.Context, query *MaintainerQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadRealWarehouse(ctx context.Context, query *WarehouseQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Warehouse)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].RealLocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(warehouse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "real_locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadRealStore(ctx context.Context, query *StoreQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].RealLocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "real_locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadRealCabinet(ctx context.Context, query *CabinetQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].RealLocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "real_locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadRealStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].RealLocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "real_locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadRealRider(ctx context.Context, query *RiderQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].RealLocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "real_locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (acdq *AssetCheckDetailsQuery) loadRealOperator(ctx context.Context, query *MaintainerQuery, nodes []*AssetCheckDetails, init func(*AssetCheckDetails), assign func(*AssetCheckDetails, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetCheckDetails)
	for i := range nodes {
		fk := nodes[i].RealLocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "real_locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (acdq *AssetCheckDetailsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := acdq.querySpec()
	if len(acdq.modifiers) > 0 {
		_spec.Modifiers = acdq.modifiers
	}
	_spec.Node.Columns = acdq.ctx.Fields
	if len(acdq.ctx.Fields) > 0 {
		_spec.Unique = acdq.ctx.Unique != nil && *acdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, acdq.driver, _spec)
}

func (acdq *AssetCheckDetailsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assetcheckdetails.Table, assetcheckdetails.Columns, sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64))
	_spec.From = acdq.sql
	if unique := acdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if acdq.path != nil {
		_spec.Unique = true
	}
	if fields := acdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetcheckdetails.FieldID)
		for i := range fields {
			if fields[i] != assetcheckdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if acdq.withMaintainer != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldMaintainerID)
		}
		if acdq.withAsset != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldAssetID)
		}
		if acdq.withCheck != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldCheckID)
		}
		if acdq.withWarehouse != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldLocationsID)
		}
		if acdq.withStore != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldLocationsID)
		}
		if acdq.withCabinet != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldLocationsID)
		}
		if acdq.withStation != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldLocationsID)
		}
		if acdq.withRider != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldLocationsID)
		}
		if acdq.withOperator != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldLocationsID)
		}
		if acdq.withRealWarehouse != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldRealLocationsID)
		}
		if acdq.withRealStore != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldRealLocationsID)
		}
		if acdq.withRealCabinet != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldRealLocationsID)
		}
		if acdq.withRealStation != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldRealLocationsID)
		}
		if acdq.withRealRider != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldRealLocationsID)
		}
		if acdq.withRealOperator != nil {
			_spec.Node.AddColumnOnce(assetcheckdetails.FieldRealLocationsID)
		}
	}
	if ps := acdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := acdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := acdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := acdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (acdq *AssetCheckDetailsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(acdq.driver.Dialect())
	t1 := builder.Table(assetcheckdetails.Table)
	columns := acdq.ctx.Fields
	if len(columns) == 0 {
		columns = assetcheckdetails.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if acdq.sql != nil {
		selector = acdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if acdq.ctx.Unique != nil && *acdq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range acdq.modifiers {
		m(selector)
	}
	for _, p := range acdq.predicates {
		p(selector)
	}
	for _, p := range acdq.order {
		p(selector)
	}
	if offset := acdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := acdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (acdq *AssetCheckDetailsQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetCheckDetailsSelect {
	acdq.modifiers = append(acdq.modifiers, modifiers...)
	return acdq.Select()
}

type AssetCheckDetailsQueryWith string

var (
	AssetCheckDetailsQueryWithMaintainer    AssetCheckDetailsQueryWith = "Maintainer"
	AssetCheckDetailsQueryWithAsset         AssetCheckDetailsQueryWith = "Asset"
	AssetCheckDetailsQueryWithCheck         AssetCheckDetailsQueryWith = "Check"
	AssetCheckDetailsQueryWithWarehouse     AssetCheckDetailsQueryWith = "Warehouse"
	AssetCheckDetailsQueryWithStore         AssetCheckDetailsQueryWith = "Store"
	AssetCheckDetailsQueryWithCabinet       AssetCheckDetailsQueryWith = "Cabinet"
	AssetCheckDetailsQueryWithStation       AssetCheckDetailsQueryWith = "Station"
	AssetCheckDetailsQueryWithRider         AssetCheckDetailsQueryWith = "Rider"
	AssetCheckDetailsQueryWithOperator      AssetCheckDetailsQueryWith = "Operator"
	AssetCheckDetailsQueryWithRealWarehouse AssetCheckDetailsQueryWith = "RealWarehouse"
	AssetCheckDetailsQueryWithRealStore     AssetCheckDetailsQueryWith = "RealStore"
	AssetCheckDetailsQueryWithRealCabinet   AssetCheckDetailsQueryWith = "RealCabinet"
	AssetCheckDetailsQueryWithRealStation   AssetCheckDetailsQueryWith = "RealStation"
	AssetCheckDetailsQueryWithRealRider     AssetCheckDetailsQueryWith = "RealRider"
	AssetCheckDetailsQueryWithRealOperator  AssetCheckDetailsQueryWith = "RealOperator"
)

func (acdq *AssetCheckDetailsQuery) With(withEdges ...AssetCheckDetailsQueryWith) *AssetCheckDetailsQuery {
	for _, v := range withEdges {
		switch v {
		case AssetCheckDetailsQueryWithMaintainer:
			acdq.WithMaintainer()
		case AssetCheckDetailsQueryWithAsset:
			acdq.WithAsset()
		case AssetCheckDetailsQueryWithCheck:
			acdq.WithCheck()
		case AssetCheckDetailsQueryWithWarehouse:
			acdq.WithWarehouse()
		case AssetCheckDetailsQueryWithStore:
			acdq.WithStore()
		case AssetCheckDetailsQueryWithCabinet:
			acdq.WithCabinet()
		case AssetCheckDetailsQueryWithStation:
			acdq.WithStation()
		case AssetCheckDetailsQueryWithRider:
			acdq.WithRider()
		case AssetCheckDetailsQueryWithOperator:
			acdq.WithOperator()
		case AssetCheckDetailsQueryWithRealWarehouse:
			acdq.WithRealWarehouse()
		case AssetCheckDetailsQueryWithRealStore:
			acdq.WithRealStore()
		case AssetCheckDetailsQueryWithRealCabinet:
			acdq.WithRealCabinet()
		case AssetCheckDetailsQueryWithRealStation:
			acdq.WithRealStation()
		case AssetCheckDetailsQueryWithRealRider:
			acdq.WithRealRider()
		case AssetCheckDetailsQueryWithRealOperator:
			acdq.WithRealOperator()
		}
	}
	return acdq
}

// AssetCheckDetailsGroupBy is the group-by builder for AssetCheckDetails entities.
type AssetCheckDetailsGroupBy struct {
	selector
	build *AssetCheckDetailsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (acdgb *AssetCheckDetailsGroupBy) Aggregate(fns ...AggregateFunc) *AssetCheckDetailsGroupBy {
	acdgb.fns = append(acdgb.fns, fns...)
	return acdgb
}

// Scan applies the selector query and scans the result into the given value.
func (acdgb *AssetCheckDetailsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, acdgb.build.ctx, "GroupBy")
	if err := acdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetCheckDetailsQuery, *AssetCheckDetailsGroupBy](ctx, acdgb.build, acdgb, acdgb.build.inters, v)
}

func (acdgb *AssetCheckDetailsGroupBy) sqlScan(ctx context.Context, root *AssetCheckDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(acdgb.fns))
	for _, fn := range acdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*acdgb.flds)+len(acdgb.fns))
		for _, f := range *acdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*acdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := acdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetCheckDetailsSelect is the builder for selecting fields of AssetCheckDetails entities.
type AssetCheckDetailsSelect struct {
	*AssetCheckDetailsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (acds *AssetCheckDetailsSelect) Aggregate(fns ...AggregateFunc) *AssetCheckDetailsSelect {
	acds.fns = append(acds.fns, fns...)
	return acds
}

// Scan applies the selector query and scans the result into the given value.
func (acds *AssetCheckDetailsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, acds.ctx, "Select")
	if err := acds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetCheckDetailsQuery, *AssetCheckDetailsSelect](ctx, acds.AssetCheckDetailsQuery, acds, acds.inters, v)
}

func (acds *AssetCheckDetailsSelect) sqlScan(ctx context.Context, root *AssetCheckDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(acds.fns))
	for _, fn := range acds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*acds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := acds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (acds *AssetCheckDetailsSelect) Modify(modifiers ...func(s *sql.Selector)) *AssetCheckDetailsSelect {
	acds.modifiers = append(acds.modifiers, modifiers...)
	return acds
}
