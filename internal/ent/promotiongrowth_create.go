// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotiongrowth"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionGrowthCreate is the builder for creating a PromotionGrowth entity.
type PromotionGrowthCreate struct {
	config
	mutation *PromotionGrowthMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pgc *PromotionGrowthCreate) SetCreatedAt(t time.Time) *PromotionGrowthCreate {
	pgc.mutation.SetCreatedAt(t)
	return pgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pgc *PromotionGrowthCreate) SetNillableCreatedAt(t *time.Time) *PromotionGrowthCreate {
	if t != nil {
		pgc.SetCreatedAt(*t)
	}
	return pgc
}

// SetUpdatedAt sets the "updated_at" field.
func (pgc *PromotionGrowthCreate) SetUpdatedAt(t time.Time) *PromotionGrowthCreate {
	pgc.mutation.SetUpdatedAt(t)
	return pgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pgc *PromotionGrowthCreate) SetNillableUpdatedAt(t *time.Time) *PromotionGrowthCreate {
	if t != nil {
		pgc.SetUpdatedAt(*t)
	}
	return pgc
}

// SetDeletedAt sets the "deleted_at" field.
func (pgc *PromotionGrowthCreate) SetDeletedAt(t time.Time) *PromotionGrowthCreate {
	pgc.mutation.SetDeletedAt(t)
	return pgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pgc *PromotionGrowthCreate) SetNillableDeletedAt(t *time.Time) *PromotionGrowthCreate {
	if t != nil {
		pgc.SetDeletedAt(*t)
	}
	return pgc
}

// SetCreator sets the "creator" field.
func (pgc *PromotionGrowthCreate) SetCreator(m *model.Modifier) *PromotionGrowthCreate {
	pgc.mutation.SetCreator(m)
	return pgc
}

// SetLastModifier sets the "last_modifier" field.
func (pgc *PromotionGrowthCreate) SetLastModifier(m *model.Modifier) *PromotionGrowthCreate {
	pgc.mutation.SetLastModifier(m)
	return pgc
}

// SetRemark sets the "remark" field.
func (pgc *PromotionGrowthCreate) SetRemark(s string) *PromotionGrowthCreate {
	pgc.mutation.SetRemark(s)
	return pgc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pgc *PromotionGrowthCreate) SetNillableRemark(s *string) *PromotionGrowthCreate {
	if s != nil {
		pgc.SetRemark(*s)
	}
	return pgc
}

// SetMemberID sets the "member_id" field.
func (pgc *PromotionGrowthCreate) SetMemberID(u uint64) *PromotionGrowthCreate {
	pgc.mutation.SetMemberID(u)
	return pgc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pgc *PromotionGrowthCreate) SetNillableMemberID(u *uint64) *PromotionGrowthCreate {
	if u != nil {
		pgc.SetMemberID(*u)
	}
	return pgc
}

// SetTaskID sets the "task_id" field.
func (pgc *PromotionGrowthCreate) SetTaskID(u uint64) *PromotionGrowthCreate {
	pgc.mutation.SetTaskID(u)
	return pgc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pgc *PromotionGrowthCreate) SetNillableTaskID(u *uint64) *PromotionGrowthCreate {
	if u != nil {
		pgc.SetTaskID(*u)
	}
	return pgc
}

// SetStatus sets the "status" field.
func (pgc *PromotionGrowthCreate) SetStatus(u uint8) *PromotionGrowthCreate {
	pgc.mutation.SetStatus(u)
	return pgc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pgc *PromotionGrowthCreate) SetNillableStatus(u *uint8) *PromotionGrowthCreate {
	if u != nil {
		pgc.SetStatus(*u)
	}
	return pgc
}

// SetGrowthValue sets the "growth_value" field.
func (pgc *PromotionGrowthCreate) SetGrowthValue(u uint64) *PromotionGrowthCreate {
	pgc.mutation.SetGrowthValue(u)
	return pgc
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pgc *PromotionGrowthCreate) SetMember(p *PromotionMember) *PromotionGrowthCreate {
	return pgc.SetMemberID(p.ID)
}

// SetTask sets the "task" edge to the PromotionLevelTask entity.
func (pgc *PromotionGrowthCreate) SetTask(p *PromotionLevelTask) *PromotionGrowthCreate {
	return pgc.SetTaskID(p.ID)
}

// Mutation returns the PromotionGrowthMutation object of the builder.
func (pgc *PromotionGrowthCreate) Mutation() *PromotionGrowthMutation {
	return pgc.mutation
}

// Save creates the PromotionGrowth in the database.
func (pgc *PromotionGrowthCreate) Save(ctx context.Context) (*PromotionGrowth, error) {
	if err := pgc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pgc.sqlSave, pgc.mutation, pgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pgc *PromotionGrowthCreate) SaveX(ctx context.Context) *PromotionGrowth {
	v, err := pgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgc *PromotionGrowthCreate) Exec(ctx context.Context) error {
	_, err := pgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgc *PromotionGrowthCreate) ExecX(ctx context.Context) {
	if err := pgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgc *PromotionGrowthCreate) defaults() error {
	if _, ok := pgc.mutation.CreatedAt(); !ok {
		if promotiongrowth.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotiongrowth.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotiongrowth.DefaultCreatedAt()
		pgc.mutation.SetCreatedAt(v)
	}
	if _, ok := pgc.mutation.UpdatedAt(); !ok {
		if promotiongrowth.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotiongrowth.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotiongrowth.DefaultUpdatedAt()
		pgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pgc.mutation.Status(); !ok {
		v := promotiongrowth.DefaultStatus
		pgc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pgc *PromotionGrowthCreate) check() error {
	if _, ok := pgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionGrowth.created_at"`)}
	}
	if _, ok := pgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionGrowth.updated_at"`)}
	}
	if _, ok := pgc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PromotionGrowth.status"`)}
	}
	if _, ok := pgc.mutation.GrowthValue(); !ok {
		return &ValidationError{Name: "growth_value", err: errors.New(`ent: missing required field "PromotionGrowth.growth_value"`)}
	}
	return nil
}

func (pgc *PromotionGrowthCreate) sqlSave(ctx context.Context) (*PromotionGrowth, error) {
	if err := pgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pgc.mutation.id = &_node.ID
	pgc.mutation.done = true
	return _node, nil
}

func (pgc *PromotionGrowthCreate) createSpec() (*PromotionGrowth, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionGrowth{config: pgc.config}
		_spec = sqlgraph.NewCreateSpec(promotiongrowth.Table, sqlgraph.NewFieldSpec(promotiongrowth.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pgc.conflict
	if value, ok := pgc.mutation.CreatedAt(); ok {
		_spec.SetField(promotiongrowth.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pgc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotiongrowth.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pgc.mutation.DeletedAt(); ok {
		_spec.SetField(promotiongrowth.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pgc.mutation.Creator(); ok {
		_spec.SetField(promotiongrowth.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pgc.mutation.LastModifier(); ok {
		_spec.SetField(promotiongrowth.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pgc.mutation.Remark(); ok {
		_spec.SetField(promotiongrowth.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pgc.mutation.Status(); ok {
		_spec.SetField(promotiongrowth.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := pgc.mutation.GrowthValue(); ok {
		_spec.SetField(promotiongrowth.FieldGrowthValue, field.TypeUint64, value)
		_node.GrowthValue = value
	}
	if nodes := pgc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.MemberTable,
			Columns: []string{promotiongrowth.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pgc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.TaskTable,
			Columns: []string{promotiongrowth.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionGrowth.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionGrowthUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pgc *PromotionGrowthCreate) OnConflict(opts ...sql.ConflictOption) *PromotionGrowthUpsertOne {
	pgc.conflict = opts
	return &PromotionGrowthUpsertOne{
		create: pgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionGrowth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pgc *PromotionGrowthCreate) OnConflictColumns(columns ...string) *PromotionGrowthUpsertOne {
	pgc.conflict = append(pgc.conflict, sql.ConflictColumns(columns...))
	return &PromotionGrowthUpsertOne{
		create: pgc,
	}
}

type (
	// PromotionGrowthUpsertOne is the builder for "upsert"-ing
	//  one PromotionGrowth node.
	PromotionGrowthUpsertOne struct {
		create *PromotionGrowthCreate
	}

	// PromotionGrowthUpsert is the "OnConflict" setter.
	PromotionGrowthUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionGrowthUpsert) SetUpdatedAt(v time.Time) *PromotionGrowthUpsert {
	u.Set(promotiongrowth.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionGrowthUpsert) UpdateUpdatedAt() *PromotionGrowthUpsert {
	u.SetExcluded(promotiongrowth.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionGrowthUpsert) SetDeletedAt(v time.Time) *PromotionGrowthUpsert {
	u.Set(promotiongrowth.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionGrowthUpsert) UpdateDeletedAt() *PromotionGrowthUpsert {
	u.SetExcluded(promotiongrowth.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionGrowthUpsert) ClearDeletedAt() *PromotionGrowthUpsert {
	u.SetNull(promotiongrowth.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionGrowthUpsert) SetLastModifier(v *model.Modifier) *PromotionGrowthUpsert {
	u.Set(promotiongrowth.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionGrowthUpsert) UpdateLastModifier() *PromotionGrowthUpsert {
	u.SetExcluded(promotiongrowth.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionGrowthUpsert) ClearLastModifier() *PromotionGrowthUpsert {
	u.SetNull(promotiongrowth.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionGrowthUpsert) SetRemark(v string) *PromotionGrowthUpsert {
	u.Set(promotiongrowth.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionGrowthUpsert) UpdateRemark() *PromotionGrowthUpsert {
	u.SetExcluded(promotiongrowth.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionGrowthUpsert) ClearRemark() *PromotionGrowthUpsert {
	u.SetNull(promotiongrowth.FieldRemark)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *PromotionGrowthUpsert) SetMemberID(v uint64) *PromotionGrowthUpsert {
	u.Set(promotiongrowth.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionGrowthUpsert) UpdateMemberID() *PromotionGrowthUpsert {
	u.SetExcluded(promotiongrowth.FieldMemberID)
	return u
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionGrowthUpsert) ClearMemberID() *PromotionGrowthUpsert {
	u.SetNull(promotiongrowth.FieldMemberID)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *PromotionGrowthUpsert) SetTaskID(v uint64) *PromotionGrowthUpsert {
	u.Set(promotiongrowth.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *PromotionGrowthUpsert) UpdateTaskID() *PromotionGrowthUpsert {
	u.SetExcluded(promotiongrowth.FieldTaskID)
	return u
}

// ClearTaskID clears the value of the "task_id" field.
func (u *PromotionGrowthUpsert) ClearTaskID() *PromotionGrowthUpsert {
	u.SetNull(promotiongrowth.FieldTaskID)
	return u
}

// SetStatus sets the "status" field.
func (u *PromotionGrowthUpsert) SetStatus(v uint8) *PromotionGrowthUpsert {
	u.Set(promotiongrowth.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionGrowthUpsert) UpdateStatus() *PromotionGrowthUpsert {
	u.SetExcluded(promotiongrowth.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PromotionGrowthUpsert) AddStatus(v uint8) *PromotionGrowthUpsert {
	u.Add(promotiongrowth.FieldStatus, v)
	return u
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionGrowthUpsert) SetGrowthValue(v uint64) *PromotionGrowthUpsert {
	u.Set(promotiongrowth.FieldGrowthValue, v)
	return u
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionGrowthUpsert) UpdateGrowthValue() *PromotionGrowthUpsert {
	u.SetExcluded(promotiongrowth.FieldGrowthValue)
	return u
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionGrowthUpsert) AddGrowthValue(v uint64) *PromotionGrowthUpsert {
	u.Add(promotiongrowth.FieldGrowthValue, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionGrowth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionGrowthUpsertOne) UpdateNewValues() *PromotionGrowthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotiongrowth.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotiongrowth.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionGrowth.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionGrowthUpsertOne) Ignore() *PromotionGrowthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionGrowthUpsertOne) DoNothing() *PromotionGrowthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionGrowthCreate.OnConflict
// documentation for more info.
func (u *PromotionGrowthUpsertOne) Update(set func(*PromotionGrowthUpsert)) *PromotionGrowthUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionGrowthUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionGrowthUpsertOne) SetUpdatedAt(v time.Time) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionGrowthUpsertOne) UpdateUpdatedAt() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionGrowthUpsertOne) SetDeletedAt(v time.Time) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionGrowthUpsertOne) UpdateDeletedAt() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionGrowthUpsertOne) ClearDeletedAt() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionGrowthUpsertOne) SetLastModifier(v *model.Modifier) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionGrowthUpsertOne) UpdateLastModifier() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionGrowthUpsertOne) ClearLastModifier() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionGrowthUpsertOne) SetRemark(v string) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionGrowthUpsertOne) UpdateRemark() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionGrowthUpsertOne) ClearRemark() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearRemark()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionGrowthUpsertOne) SetMemberID(v uint64) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionGrowthUpsertOne) UpdateMemberID() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionGrowthUpsertOne) ClearMemberID() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearMemberID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *PromotionGrowthUpsertOne) SetTaskID(v uint64) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *PromotionGrowthUpsertOne) UpdateTaskID() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *PromotionGrowthUpsertOne) ClearTaskID() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearTaskID()
	})
}

// SetStatus sets the "status" field.
func (u *PromotionGrowthUpsertOne) SetStatus(v uint8) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PromotionGrowthUpsertOne) AddStatus(v uint8) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionGrowthUpsertOne) UpdateStatus() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateStatus()
	})
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionGrowthUpsertOne) SetGrowthValue(v uint64) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetGrowthValue(v)
	})
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionGrowthUpsertOne) AddGrowthValue(v uint64) *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.AddGrowthValue(v)
	})
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionGrowthUpsertOne) UpdateGrowthValue() *PromotionGrowthUpsertOne {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateGrowthValue()
	})
}

// Exec executes the query.
func (u *PromotionGrowthUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionGrowthCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionGrowthUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionGrowthUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionGrowthUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionGrowthCreateBulk is the builder for creating many PromotionGrowth entities in bulk.
type PromotionGrowthCreateBulk struct {
	config
	builders []*PromotionGrowthCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionGrowth entities in the database.
func (pgcb *PromotionGrowthCreateBulk) Save(ctx context.Context) ([]*PromotionGrowth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pgcb.builders))
	nodes := make([]*PromotionGrowth, len(pgcb.builders))
	mutators := make([]Mutator, len(pgcb.builders))
	for i := range pgcb.builders {
		func(i int, root context.Context) {
			builder := pgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionGrowthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pgcb *PromotionGrowthCreateBulk) SaveX(ctx context.Context) []*PromotionGrowth {
	v, err := pgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pgcb *PromotionGrowthCreateBulk) Exec(ctx context.Context) error {
	_, err := pgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgcb *PromotionGrowthCreateBulk) ExecX(ctx context.Context) {
	if err := pgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionGrowth.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionGrowthUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pgcb *PromotionGrowthCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionGrowthUpsertBulk {
	pgcb.conflict = opts
	return &PromotionGrowthUpsertBulk{
		create: pgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionGrowth.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pgcb *PromotionGrowthCreateBulk) OnConflictColumns(columns ...string) *PromotionGrowthUpsertBulk {
	pgcb.conflict = append(pgcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionGrowthUpsertBulk{
		create: pgcb,
	}
}

// PromotionGrowthUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionGrowth nodes.
type PromotionGrowthUpsertBulk struct {
	create *PromotionGrowthCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionGrowth.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionGrowthUpsertBulk) UpdateNewValues() *PromotionGrowthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotiongrowth.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotiongrowth.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionGrowth.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionGrowthUpsertBulk) Ignore() *PromotionGrowthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionGrowthUpsertBulk) DoNothing() *PromotionGrowthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionGrowthCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionGrowthUpsertBulk) Update(set func(*PromotionGrowthUpsert)) *PromotionGrowthUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionGrowthUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionGrowthUpsertBulk) SetUpdatedAt(v time.Time) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionGrowthUpsertBulk) UpdateUpdatedAt() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionGrowthUpsertBulk) SetDeletedAt(v time.Time) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionGrowthUpsertBulk) UpdateDeletedAt() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionGrowthUpsertBulk) ClearDeletedAt() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionGrowthUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionGrowthUpsertBulk) UpdateLastModifier() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionGrowthUpsertBulk) ClearLastModifier() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionGrowthUpsertBulk) SetRemark(v string) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionGrowthUpsertBulk) UpdateRemark() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionGrowthUpsertBulk) ClearRemark() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearRemark()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionGrowthUpsertBulk) SetMemberID(v uint64) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionGrowthUpsertBulk) UpdateMemberID() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionGrowthUpsertBulk) ClearMemberID() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearMemberID()
	})
}

// SetTaskID sets the "task_id" field.
func (u *PromotionGrowthUpsertBulk) SetTaskID(v uint64) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *PromotionGrowthUpsertBulk) UpdateTaskID() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *PromotionGrowthUpsertBulk) ClearTaskID() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.ClearTaskID()
	})
}

// SetStatus sets the "status" field.
func (u *PromotionGrowthUpsertBulk) SetStatus(v uint8) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PromotionGrowthUpsertBulk) AddStatus(v uint8) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionGrowthUpsertBulk) UpdateStatus() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateStatus()
	})
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionGrowthUpsertBulk) SetGrowthValue(v uint64) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.SetGrowthValue(v)
	})
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionGrowthUpsertBulk) AddGrowthValue(v uint64) *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.AddGrowthValue(v)
	})
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionGrowthUpsertBulk) UpdateGrowthValue() *PromotionGrowthUpsertBulk {
	return u.Update(func(s *PromotionGrowthUpsert) {
		s.UpdateGrowthValue()
	})
}

// Exec executes the query.
func (u *PromotionGrowthUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionGrowthCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionGrowthCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionGrowthUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
