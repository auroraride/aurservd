// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/instructions"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// InstructionsUpdate is the builder for updating Instructions entities.
type InstructionsUpdate struct {
	config
	hooks     []Hook
	mutation  *InstructionsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InstructionsUpdate builder.
func (iu *InstructionsUpdate) Where(ps ...predicate.Instructions) *InstructionsUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InstructionsUpdate) SetUpdatedAt(t time.Time) *InstructionsUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *InstructionsUpdate) SetDeletedAt(t time.Time) *InstructionsUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *InstructionsUpdate) SetNillableDeletedAt(t *time.Time) *InstructionsUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *InstructionsUpdate) ClearDeletedAt() *InstructionsUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetLastModifier sets the "last_modifier" field.
func (iu *InstructionsUpdate) SetLastModifier(m *model.Modifier) *InstructionsUpdate {
	iu.mutation.SetLastModifier(m)
	return iu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (iu *InstructionsUpdate) ClearLastModifier() *InstructionsUpdate {
	iu.mutation.ClearLastModifier()
	return iu
}

// SetRemark sets the "remark" field.
func (iu *InstructionsUpdate) SetRemark(s string) *InstructionsUpdate {
	iu.mutation.SetRemark(s)
	return iu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (iu *InstructionsUpdate) SetNillableRemark(s *string) *InstructionsUpdate {
	if s != nil {
		iu.SetRemark(*s)
	}
	return iu
}

// ClearRemark clears the value of the "remark" field.
func (iu *InstructionsUpdate) ClearRemark() *InstructionsUpdate {
	iu.mutation.ClearRemark()
	return iu
}

// SetTitle sets the "title" field.
func (iu *InstructionsUpdate) SetTitle(s string) *InstructionsUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *InstructionsUpdate) SetNillableTitle(s *string) *InstructionsUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// SetContent sets the "content" field.
func (iu *InstructionsUpdate) SetContent(i *interface{}) *InstructionsUpdate {
	iu.mutation.SetContent(i)
	return iu
}

// SetKey sets the "key" field.
func (iu *InstructionsUpdate) SetKey(s string) *InstructionsUpdate {
	iu.mutation.SetKey(s)
	return iu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (iu *InstructionsUpdate) SetNillableKey(s *string) *InstructionsUpdate {
	if s != nil {
		iu.SetKey(*s)
	}
	return iu
}

// Mutation returns the InstructionsMutation object of the builder.
func (iu *InstructionsUpdate) Mutation() *InstructionsMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InstructionsUpdate) Save(ctx context.Context) (int, error) {
	if err := iu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InstructionsUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InstructionsUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InstructionsUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InstructionsUpdate) defaults() error {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		if instructions.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized instructions.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := instructions.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InstructionsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InstructionsUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InstructionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(instructions.Table, instructions.Columns, sqlgraph.NewFieldSpec(instructions.FieldID, field.TypeUint64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(instructions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(instructions.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(instructions.FieldDeletedAt, field.TypeTime)
	}
	if iu.mutation.CreatorCleared() {
		_spec.ClearField(instructions.FieldCreator, field.TypeJSON)
	}
	if value, ok := iu.mutation.LastModifier(); ok {
		_spec.SetField(instructions.FieldLastModifier, field.TypeJSON, value)
	}
	if iu.mutation.LastModifierCleared() {
		_spec.ClearField(instructions.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := iu.mutation.Remark(); ok {
		_spec.SetField(instructions.FieldRemark, field.TypeString, value)
	}
	if iu.mutation.RemarkCleared() {
		_spec.ClearField(instructions.FieldRemark, field.TypeString)
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(instructions.FieldTitle, field.TypeString, value)
	}
	if value, ok := iu.mutation.Content(); ok {
		_spec.SetField(instructions.FieldContent, field.TypeJSON, value)
	}
	if value, ok := iu.mutation.Key(); ok {
		_spec.SetField(instructions.FieldKey, field.TypeString, value)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instructions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InstructionsUpdateOne is the builder for updating a single Instructions entity.
type InstructionsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InstructionsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InstructionsUpdateOne) SetUpdatedAt(t time.Time) *InstructionsUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *InstructionsUpdateOne) SetDeletedAt(t time.Time) *InstructionsUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *InstructionsUpdateOne) SetNillableDeletedAt(t *time.Time) *InstructionsUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *InstructionsUpdateOne) ClearDeletedAt() *InstructionsUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetLastModifier sets the "last_modifier" field.
func (iuo *InstructionsUpdateOne) SetLastModifier(m *model.Modifier) *InstructionsUpdateOne {
	iuo.mutation.SetLastModifier(m)
	return iuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (iuo *InstructionsUpdateOne) ClearLastModifier() *InstructionsUpdateOne {
	iuo.mutation.ClearLastModifier()
	return iuo
}

// SetRemark sets the "remark" field.
func (iuo *InstructionsUpdateOne) SetRemark(s string) *InstructionsUpdateOne {
	iuo.mutation.SetRemark(s)
	return iuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (iuo *InstructionsUpdateOne) SetNillableRemark(s *string) *InstructionsUpdateOne {
	if s != nil {
		iuo.SetRemark(*s)
	}
	return iuo
}

// ClearRemark clears the value of the "remark" field.
func (iuo *InstructionsUpdateOne) ClearRemark() *InstructionsUpdateOne {
	iuo.mutation.ClearRemark()
	return iuo
}

// SetTitle sets the "title" field.
func (iuo *InstructionsUpdateOne) SetTitle(s string) *InstructionsUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *InstructionsUpdateOne) SetNillableTitle(s *string) *InstructionsUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// SetContent sets the "content" field.
func (iuo *InstructionsUpdateOne) SetContent(i *interface{}) *InstructionsUpdateOne {
	iuo.mutation.SetContent(i)
	return iuo
}

// SetKey sets the "key" field.
func (iuo *InstructionsUpdateOne) SetKey(s string) *InstructionsUpdateOne {
	iuo.mutation.SetKey(s)
	return iuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (iuo *InstructionsUpdateOne) SetNillableKey(s *string) *InstructionsUpdateOne {
	if s != nil {
		iuo.SetKey(*s)
	}
	return iuo
}

// Mutation returns the InstructionsMutation object of the builder.
func (iuo *InstructionsUpdateOne) Mutation() *InstructionsMutation {
	return iuo.mutation
}

// Where appends a list predicates to the InstructionsUpdate builder.
func (iuo *InstructionsUpdateOne) Where(ps ...predicate.Instructions) *InstructionsUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InstructionsUpdateOne) Select(field string, fields ...string) *InstructionsUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Instructions entity.
func (iuo *InstructionsUpdateOne) Save(ctx context.Context) (*Instructions, error) {
	if err := iuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InstructionsUpdateOne) SaveX(ctx context.Context) *Instructions {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InstructionsUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InstructionsUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InstructionsUpdateOne) defaults() error {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		if instructions.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized instructions.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := instructions.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InstructionsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InstructionsUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InstructionsUpdateOne) sqlSave(ctx context.Context) (_node *Instructions, err error) {
	_spec := sqlgraph.NewUpdateSpec(instructions.Table, instructions.Columns, sqlgraph.NewFieldSpec(instructions.FieldID, field.TypeUint64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Instructions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instructions.FieldID)
		for _, f := range fields {
			if !instructions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != instructions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(instructions.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(instructions.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(instructions.FieldDeletedAt, field.TypeTime)
	}
	if iuo.mutation.CreatorCleared() {
		_spec.ClearField(instructions.FieldCreator, field.TypeJSON)
	}
	if value, ok := iuo.mutation.LastModifier(); ok {
		_spec.SetField(instructions.FieldLastModifier, field.TypeJSON, value)
	}
	if iuo.mutation.LastModifierCleared() {
		_spec.ClearField(instructions.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := iuo.mutation.Remark(); ok {
		_spec.SetField(instructions.FieldRemark, field.TypeString, value)
	}
	if iuo.mutation.RemarkCleared() {
		_spec.ClearField(instructions.FieldRemark, field.TypeString)
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(instructions.FieldTitle, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Content(); ok {
		_spec.SetField(instructions.FieldContent, field.TypeJSON, value)
	}
	if value, ok := iuo.mutation.Key(); ok {
		_spec.SetField(instructions.FieldKey, field.TypeString, value)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Instructions{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instructions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
