// Code generated by ent, DO NOT EDIT.

package branchcontract

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// BranchID applies equality check predicate on the "branch_id" field. It's identical to BranchIDEQ.
func BranchID(v uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBranchID), v))
	})
}

// LandlordName applies equality check predicate on the "landlord_name" field. It's identical to LandlordNameEQ.
func LandlordName(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLandlordName), v))
	})
}

// IDCardNumber applies equality check predicate on the "id_card_number" field. It's identical to IDCardNumberEQ.
func IDCardNumber(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDCardNumber), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// BankNumber applies equality check predicate on the "bank_number" field. It's identical to BankNumberEQ.
func BankNumber(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankNumber), v))
	})
}

// Pledge applies equality check predicate on the "pledge" field. It's identical to PledgeEQ.
func Pledge(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPledge), v))
	})
}

// Rent applies equality check predicate on the "rent" field. It's identical to RentEQ.
func Rent(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRent), v))
	})
}

// Lease applies equality check predicate on the "lease" field. It's identical to LeaseEQ.
func Lease(v uint) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLease), v))
	})
}

// ElectricityPledge applies equality check predicate on the "electricity_pledge" field. It's identical to ElectricityPledgeEQ.
func ElectricityPledge(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectricityPledge), v))
	})
}

// Electricity applies equality check predicate on the "electricity" field. It's identical to ElectricityEQ.
func Electricity(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectricity), v))
	})
}

// Area applies equality check predicate on the "area" field. It's identical to AreaEQ.
func Area(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArea), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// File applies equality check predicate on the "file" field. It's identical to FileEQ.
func File(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFile), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// BranchIDEQ applies the EQ predicate on the "branch_id" field.
func BranchIDEQ(v uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBranchID), v))
	})
}

// BranchIDNEQ applies the NEQ predicate on the "branch_id" field.
func BranchIDNEQ(v uint64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBranchID), v))
	})
}

// BranchIDIn applies the In predicate on the "branch_id" field.
func BranchIDIn(vs ...uint64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBranchID), v...))
	})
}

// BranchIDNotIn applies the NotIn predicate on the "branch_id" field.
func BranchIDNotIn(vs ...uint64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBranchID), v...))
	})
}

// LandlordNameEQ applies the EQ predicate on the "landlord_name" field.
func LandlordNameEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLandlordName), v))
	})
}

// LandlordNameNEQ applies the NEQ predicate on the "landlord_name" field.
func LandlordNameNEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLandlordName), v))
	})
}

// LandlordNameIn applies the In predicate on the "landlord_name" field.
func LandlordNameIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLandlordName), v...))
	})
}

// LandlordNameNotIn applies the NotIn predicate on the "landlord_name" field.
func LandlordNameNotIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLandlordName), v...))
	})
}

// LandlordNameGT applies the GT predicate on the "landlord_name" field.
func LandlordNameGT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLandlordName), v))
	})
}

// LandlordNameGTE applies the GTE predicate on the "landlord_name" field.
func LandlordNameGTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLandlordName), v))
	})
}

// LandlordNameLT applies the LT predicate on the "landlord_name" field.
func LandlordNameLT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLandlordName), v))
	})
}

// LandlordNameLTE applies the LTE predicate on the "landlord_name" field.
func LandlordNameLTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLandlordName), v))
	})
}

// LandlordNameContains applies the Contains predicate on the "landlord_name" field.
func LandlordNameContains(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLandlordName), v))
	})
}

// LandlordNameHasPrefix applies the HasPrefix predicate on the "landlord_name" field.
func LandlordNameHasPrefix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLandlordName), v))
	})
}

// LandlordNameHasSuffix applies the HasSuffix predicate on the "landlord_name" field.
func LandlordNameHasSuffix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLandlordName), v))
	})
}

// LandlordNameEqualFold applies the EqualFold predicate on the "landlord_name" field.
func LandlordNameEqualFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLandlordName), v))
	})
}

// LandlordNameContainsFold applies the ContainsFold predicate on the "landlord_name" field.
func LandlordNameContainsFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLandlordName), v))
	})
}

// IDCardNumberEQ applies the EQ predicate on the "id_card_number" field.
func IDCardNumberEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberNEQ applies the NEQ predicate on the "id_card_number" field.
func IDCardNumberNEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberIn applies the In predicate on the "id_card_number" field.
func IDCardNumberIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIDCardNumber), v...))
	})
}

// IDCardNumberNotIn applies the NotIn predicate on the "id_card_number" field.
func IDCardNumberNotIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIDCardNumber), v...))
	})
}

// IDCardNumberGT applies the GT predicate on the "id_card_number" field.
func IDCardNumberGT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberGTE applies the GTE predicate on the "id_card_number" field.
func IDCardNumberGTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberLT applies the LT predicate on the "id_card_number" field.
func IDCardNumberLT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberLTE applies the LTE predicate on the "id_card_number" field.
func IDCardNumberLTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberContains applies the Contains predicate on the "id_card_number" field.
func IDCardNumberContains(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberHasPrefix applies the HasPrefix predicate on the "id_card_number" field.
func IDCardNumberHasPrefix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberHasSuffix applies the HasSuffix predicate on the "id_card_number" field.
func IDCardNumberHasSuffix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberEqualFold applies the EqualFold predicate on the "id_card_number" field.
func IDCardNumberEqualFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIDCardNumber), v))
	})
}

// IDCardNumberContainsFold applies the ContainsFold predicate on the "id_card_number" field.
func IDCardNumberContainsFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIDCardNumber), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// BankNumberEQ applies the EQ predicate on the "bank_number" field.
func BankNumberEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBankNumber), v))
	})
}

// BankNumberNEQ applies the NEQ predicate on the "bank_number" field.
func BankNumberNEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBankNumber), v))
	})
}

// BankNumberIn applies the In predicate on the "bank_number" field.
func BankNumberIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBankNumber), v...))
	})
}

// BankNumberNotIn applies the NotIn predicate on the "bank_number" field.
func BankNumberNotIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBankNumber), v...))
	})
}

// BankNumberGT applies the GT predicate on the "bank_number" field.
func BankNumberGT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBankNumber), v))
	})
}

// BankNumberGTE applies the GTE predicate on the "bank_number" field.
func BankNumberGTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBankNumber), v))
	})
}

// BankNumberLT applies the LT predicate on the "bank_number" field.
func BankNumberLT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBankNumber), v))
	})
}

// BankNumberLTE applies the LTE predicate on the "bank_number" field.
func BankNumberLTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBankNumber), v))
	})
}

// BankNumberContains applies the Contains predicate on the "bank_number" field.
func BankNumberContains(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBankNumber), v))
	})
}

// BankNumberHasPrefix applies the HasPrefix predicate on the "bank_number" field.
func BankNumberHasPrefix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBankNumber), v))
	})
}

// BankNumberHasSuffix applies the HasSuffix predicate on the "bank_number" field.
func BankNumberHasSuffix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBankNumber), v))
	})
}

// BankNumberEqualFold applies the EqualFold predicate on the "bank_number" field.
func BankNumberEqualFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBankNumber), v))
	})
}

// BankNumberContainsFold applies the ContainsFold predicate on the "bank_number" field.
func BankNumberContainsFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBankNumber), v))
	})
}

// PledgeEQ applies the EQ predicate on the "pledge" field.
func PledgeEQ(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPledge), v))
	})
}

// PledgeNEQ applies the NEQ predicate on the "pledge" field.
func PledgeNEQ(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPledge), v))
	})
}

// PledgeIn applies the In predicate on the "pledge" field.
func PledgeIn(vs ...float64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPledge), v...))
	})
}

// PledgeNotIn applies the NotIn predicate on the "pledge" field.
func PledgeNotIn(vs ...float64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPledge), v...))
	})
}

// PledgeGT applies the GT predicate on the "pledge" field.
func PledgeGT(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPledge), v))
	})
}

// PledgeGTE applies the GTE predicate on the "pledge" field.
func PledgeGTE(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPledge), v))
	})
}

// PledgeLT applies the LT predicate on the "pledge" field.
func PledgeLT(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPledge), v))
	})
}

// PledgeLTE applies the LTE predicate on the "pledge" field.
func PledgeLTE(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPledge), v))
	})
}

// RentEQ applies the EQ predicate on the "rent" field.
func RentEQ(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRent), v))
	})
}

// RentNEQ applies the NEQ predicate on the "rent" field.
func RentNEQ(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRent), v))
	})
}

// RentIn applies the In predicate on the "rent" field.
func RentIn(vs ...float64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRent), v...))
	})
}

// RentNotIn applies the NotIn predicate on the "rent" field.
func RentNotIn(vs ...float64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRent), v...))
	})
}

// RentGT applies the GT predicate on the "rent" field.
func RentGT(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRent), v))
	})
}

// RentGTE applies the GTE predicate on the "rent" field.
func RentGTE(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRent), v))
	})
}

// RentLT applies the LT predicate on the "rent" field.
func RentLT(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRent), v))
	})
}

// RentLTE applies the LTE predicate on the "rent" field.
func RentLTE(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRent), v))
	})
}

// LeaseEQ applies the EQ predicate on the "lease" field.
func LeaseEQ(v uint) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLease), v))
	})
}

// LeaseNEQ applies the NEQ predicate on the "lease" field.
func LeaseNEQ(v uint) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLease), v))
	})
}

// LeaseIn applies the In predicate on the "lease" field.
func LeaseIn(vs ...uint) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLease), v...))
	})
}

// LeaseNotIn applies the NotIn predicate on the "lease" field.
func LeaseNotIn(vs ...uint) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLease), v...))
	})
}

// LeaseGT applies the GT predicate on the "lease" field.
func LeaseGT(v uint) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLease), v))
	})
}

// LeaseGTE applies the GTE predicate on the "lease" field.
func LeaseGTE(v uint) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLease), v))
	})
}

// LeaseLT applies the LT predicate on the "lease" field.
func LeaseLT(v uint) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLease), v))
	})
}

// LeaseLTE applies the LTE predicate on the "lease" field.
func LeaseLTE(v uint) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLease), v))
	})
}

// ElectricityPledgeEQ applies the EQ predicate on the "electricity_pledge" field.
func ElectricityPledgeEQ(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectricityPledge), v))
	})
}

// ElectricityPledgeNEQ applies the NEQ predicate on the "electricity_pledge" field.
func ElectricityPledgeNEQ(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldElectricityPledge), v))
	})
}

// ElectricityPledgeIn applies the In predicate on the "electricity_pledge" field.
func ElectricityPledgeIn(vs ...float64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldElectricityPledge), v...))
	})
}

// ElectricityPledgeNotIn applies the NotIn predicate on the "electricity_pledge" field.
func ElectricityPledgeNotIn(vs ...float64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldElectricityPledge), v...))
	})
}

// ElectricityPledgeGT applies the GT predicate on the "electricity_pledge" field.
func ElectricityPledgeGT(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldElectricityPledge), v))
	})
}

// ElectricityPledgeGTE applies the GTE predicate on the "electricity_pledge" field.
func ElectricityPledgeGTE(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldElectricityPledge), v))
	})
}

// ElectricityPledgeLT applies the LT predicate on the "electricity_pledge" field.
func ElectricityPledgeLT(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldElectricityPledge), v))
	})
}

// ElectricityPledgeLTE applies the LTE predicate on the "electricity_pledge" field.
func ElectricityPledgeLTE(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldElectricityPledge), v))
	})
}

// ElectricityEQ applies the EQ predicate on the "electricity" field.
func ElectricityEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldElectricity), v))
	})
}

// ElectricityNEQ applies the NEQ predicate on the "electricity" field.
func ElectricityNEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldElectricity), v))
	})
}

// ElectricityIn applies the In predicate on the "electricity" field.
func ElectricityIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldElectricity), v...))
	})
}

// ElectricityNotIn applies the NotIn predicate on the "electricity" field.
func ElectricityNotIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldElectricity), v...))
	})
}

// ElectricityGT applies the GT predicate on the "electricity" field.
func ElectricityGT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldElectricity), v))
	})
}

// ElectricityGTE applies the GTE predicate on the "electricity" field.
func ElectricityGTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldElectricity), v))
	})
}

// ElectricityLT applies the LT predicate on the "electricity" field.
func ElectricityLT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldElectricity), v))
	})
}

// ElectricityLTE applies the LTE predicate on the "electricity" field.
func ElectricityLTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldElectricity), v))
	})
}

// ElectricityContains applies the Contains predicate on the "electricity" field.
func ElectricityContains(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldElectricity), v))
	})
}

// ElectricityHasPrefix applies the HasPrefix predicate on the "electricity" field.
func ElectricityHasPrefix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldElectricity), v))
	})
}

// ElectricityHasSuffix applies the HasSuffix predicate on the "electricity" field.
func ElectricityHasSuffix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldElectricity), v))
	})
}

// ElectricityEqualFold applies the EqualFold predicate on the "electricity" field.
func ElectricityEqualFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldElectricity), v))
	})
}

// ElectricityContainsFold applies the ContainsFold predicate on the "electricity" field.
func ElectricityContainsFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldElectricity), v))
	})
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArea), v))
	})
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArea), v))
	})
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...float64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldArea), v...))
	})
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...float64) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldArea), v...))
	})
}

// AreaGT applies the GT predicate on the "area" field.
func AreaGT(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArea), v))
	})
}

// AreaGTE applies the GTE predicate on the "area" field.
func AreaGTE(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArea), v))
	})
}

// AreaLT applies the LT predicate on the "area" field.
func AreaLT(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArea), v))
	})
}

// AreaLTE applies the LTE predicate on the "area" field.
func AreaLTE(v float64) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArea), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// FileEQ applies the EQ predicate on the "file" field.
func FileEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFile), v))
	})
}

// FileNEQ applies the NEQ predicate on the "file" field.
func FileNEQ(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFile), v))
	})
}

// FileIn applies the In predicate on the "file" field.
func FileIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFile), v...))
	})
}

// FileNotIn applies the NotIn predicate on the "file" field.
func FileNotIn(vs ...string) predicate.BranchContract {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFile), v...))
	})
}

// FileGT applies the GT predicate on the "file" field.
func FileGT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFile), v))
	})
}

// FileGTE applies the GTE predicate on the "file" field.
func FileGTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFile), v))
	})
}

// FileLT applies the LT predicate on the "file" field.
func FileLT(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFile), v))
	})
}

// FileLTE applies the LTE predicate on the "file" field.
func FileLTE(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFile), v))
	})
}

// FileContains applies the Contains predicate on the "file" field.
func FileContains(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFile), v))
	})
}

// FileHasPrefix applies the HasPrefix predicate on the "file" field.
func FileHasPrefix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFile), v))
	})
}

// FileHasSuffix applies the HasSuffix predicate on the "file" field.
func FileHasSuffix(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFile), v))
	})
}

// FileEqualFold applies the EqualFold predicate on the "file" field.
func FileEqualFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFile), v))
	})
}

// FileContainsFold applies the ContainsFold predicate on the "file" field.
func FileContainsFold(v string) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFile), v))
	})
}

// HasBranch applies the HasEdge predicate on the "branch" edge.
func HasBranch() predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BranchTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BranchTable, BranchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBranchWith applies the HasEdge predicate on the "branch" edge with a given conditions (other predicates).
func HasBranchWith(preds ...predicate.Branch) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BranchInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BranchTable, BranchColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BranchContract) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BranchContract) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BranchContract) predicate.BranchContract {
	return predicate.BranchContract(func(s *sql.Selector) {
		p(s.Not())
	})
}
