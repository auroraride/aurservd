// Code generated by ent, DO NOT EDIT.

package branchcontract

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the branchcontract type in the database.
	Label = "branch_contract"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldBranchID holds the string denoting the branch_id field in the database.
	FieldBranchID = "branch_id"
	// FieldLandlordName holds the string denoting the landlord_name field in the database.
	FieldLandlordName = "landlord_name"
	// FieldIDCardNumber holds the string denoting the id_card_number field in the database.
	FieldIDCardNumber = "id_card_number"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldBankNumber holds the string denoting the bank_number field in the database.
	FieldBankNumber = "bank_number"
	// FieldPledge holds the string denoting the pledge field in the database.
	FieldPledge = "pledge"
	// FieldRent holds the string denoting the rent field in the database.
	FieldRent = "rent"
	// FieldLease holds the string denoting the lease field in the database.
	FieldLease = "lease"
	// FieldElectricityPledge holds the string denoting the electricity_pledge field in the database.
	FieldElectricityPledge = "electricity_pledge"
	// FieldElectricity holds the string denoting the electricity field in the database.
	FieldElectricity = "electricity"
	// FieldArea holds the string denoting the area field in the database.
	FieldArea = "area"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldFile holds the string denoting the file field in the database.
	FieldFile = "file"
	// FieldSheets holds the string denoting the sheets field in the database.
	FieldSheets = "sheets"
	// EdgeBranch holds the string denoting the branch edge name in mutations.
	EdgeBranch = "branch"
	// Table holds the table name of the branchcontract in the database.
	Table = "branch_contract"
	// BranchTable is the table that holds the branch relation/edge.
	BranchTable = "branch_contract"
	// BranchInverseTable is the table name for the Branch entity.
	// It exists in this package in order to avoid circular dependency with the "branch" package.
	BranchInverseTable = "branch"
	// BranchColumn is the table column denoting the branch relation/edge.
	BranchColumn = "branch_id"
)

// Columns holds all SQL columns for branchcontract fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldBranchID,
	FieldLandlordName,
	FieldIDCardNumber,
	FieldPhone,
	FieldBankNumber,
	FieldPledge,
	FieldRent,
	FieldLease,
	FieldElectricityPledge,
	FieldElectricity,
	FieldArea,
	FieldStartTime,
	FieldEndTime,
	FieldFile,
	FieldSheets,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the BranchContract queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByBranchID orders the results by the branch_id field.
func ByBranchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranchID, opts...).ToFunc()
}

// ByLandlordName orders the results by the landlord_name field.
func ByLandlordName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLandlordName, opts...).ToFunc()
}

// ByIDCardNumber orders the results by the id_card_number field.
func ByIDCardNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCardNumber, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByBankNumber orders the results by the bank_number field.
func ByBankNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankNumber, opts...).ToFunc()
}

// ByPledge orders the results by the pledge field.
func ByPledge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPledge, opts...).ToFunc()
}

// ByRent orders the results by the rent field.
func ByRent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRent, opts...).ToFunc()
}

// ByLease orders the results by the lease field.
func ByLease(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLease, opts...).ToFunc()
}

// ByElectricityPledge orders the results by the electricity_pledge field.
func ByElectricityPledge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElectricityPledge, opts...).ToFunc()
}

// ByElectricity orders the results by the electricity field.
func ByElectricity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElectricity, opts...).ToFunc()
}

// ByArea orders the results by the area field.
func ByArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArea, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByFile orders the results by the file field.
func ByFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFile, opts...).ToFunc()
}

// ByBranchField orders the results by branch field.
func ByBranchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBranchStep(), sql.OrderByField(field, opts...))
	}
}
func newBranchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BranchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BranchTable, BranchColumn),
	)
}
