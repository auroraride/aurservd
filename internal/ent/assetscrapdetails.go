// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetscrap"
	"github.com/auroraride/aurservd/internal/ent/assetscrapdetails"
	"github.com/auroraride/aurservd/internal/ent/material"
)

// AssetScrapDetails is the model entity for the AssetScrapDetails schema.
type AssetScrapDetails struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 物资ID
	MaterialID *uint64 `json:"material_id,omitempty"`
	// 资产ID
	AssetID uint64 `json:"asset_id,omitempty"`
	// 报废ID
	ScrapID uint64 `json:"scrap_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetScrapDetailsQuery when eager-loading is set.
	Edges        AssetScrapDetailsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetScrapDetailsEdges holds the relations/edges for other nodes in the graph.
type AssetScrapDetailsEdges struct {
	// Material holds the value of the material edge.
	Material *Material `json:"material,omitempty"`
	// Asset holds the value of the asset edge.
	Asset *Asset `json:"asset,omitempty"`
	// Scrap holds the value of the scrap edge.
	Scrap *AssetScrap `json:"scrap,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MaterialOrErr returns the Material value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetScrapDetailsEdges) MaterialOrErr() (*Material, error) {
	if e.Material != nil {
		return e.Material, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: material.Label}
	}
	return nil, &NotLoadedError{edge: "material"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetScrapDetailsEdges) AssetOrErr() (*Asset, error) {
	if e.Asset != nil {
		return e.Asset, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// ScrapOrErr returns the Scrap value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetScrapDetailsEdges) ScrapOrErr() (*AssetScrap, error) {
	if e.Scrap != nil {
		return e.Scrap, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: assetscrap.Label}
	}
	return nil, &NotLoadedError{edge: "scrap"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetScrapDetails) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetscrapdetails.FieldID, assetscrapdetails.FieldMaterialID, assetscrapdetails.FieldAssetID, assetscrapdetails.FieldScrapID:
			values[i] = new(sql.NullInt64)
		case assetscrapdetails.FieldCreatedAt, assetscrapdetails.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetScrapDetails fields.
func (asd *AssetScrapDetails) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetscrapdetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			asd.ID = uint64(value.Int64)
		case assetscrapdetails.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				asd.CreatedAt = value.Time
			}
		case assetscrapdetails.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				asd.UpdatedAt = value.Time
			}
		case assetscrapdetails.FieldMaterialID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field material_id", values[i])
			} else if value.Valid {
				asd.MaterialID = new(uint64)
				*asd.MaterialID = uint64(value.Int64)
			}
		case assetscrapdetails.FieldAssetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_id", values[i])
			} else if value.Valid {
				asd.AssetID = uint64(value.Int64)
			}
		case assetscrapdetails.FieldScrapID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scrap_id", values[i])
			} else if value.Valid {
				asd.ScrapID = uint64(value.Int64)
			}
		default:
			asd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetScrapDetails.
// This includes values selected through modifiers, order, etc.
func (asd *AssetScrapDetails) Value(name string) (ent.Value, error) {
	return asd.selectValues.Get(name)
}

// QueryMaterial queries the "material" edge of the AssetScrapDetails entity.
func (asd *AssetScrapDetails) QueryMaterial() *MaterialQuery {
	return NewAssetScrapDetailsClient(asd.config).QueryMaterial(asd)
}

// QueryAsset queries the "asset" edge of the AssetScrapDetails entity.
func (asd *AssetScrapDetails) QueryAsset() *AssetQuery {
	return NewAssetScrapDetailsClient(asd.config).QueryAsset(asd)
}

// QueryScrap queries the "scrap" edge of the AssetScrapDetails entity.
func (asd *AssetScrapDetails) QueryScrap() *AssetScrapQuery {
	return NewAssetScrapDetailsClient(asd.config).QueryScrap(asd)
}

// Update returns a builder for updating this AssetScrapDetails.
// Note that you need to call AssetScrapDetails.Unwrap() before calling this method if this AssetScrapDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (asd *AssetScrapDetails) Update() *AssetScrapDetailsUpdateOne {
	return NewAssetScrapDetailsClient(asd.config).UpdateOne(asd)
}

// Unwrap unwraps the AssetScrapDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (asd *AssetScrapDetails) Unwrap() *AssetScrapDetails {
	_tx, ok := asd.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetScrapDetails is not a transactional entity")
	}
	asd.config.driver = _tx.drv
	return asd
}

// String implements the fmt.Stringer.
func (asd *AssetScrapDetails) String() string {
	var builder strings.Builder
	builder.WriteString("AssetScrapDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", asd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(asd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(asd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := asd.MaterialID; v != nil {
		builder.WriteString("material_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("asset_id=")
	builder.WriteString(fmt.Sprintf("%v", asd.AssetID))
	builder.WriteString(", ")
	builder.WriteString("scrap_id=")
	builder.WriteString(fmt.Sprintf("%v", asd.ScrapID))
	builder.WriteByte(')')
	return builder.String()
}

// AssetScrapDetailsSlice is a parsable slice of AssetScrapDetails.
type AssetScrapDetailsSlice []*AssetScrapDetails
