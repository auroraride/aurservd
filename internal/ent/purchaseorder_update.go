// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
	"github.com/auroraride/aurservd/internal/ent/purchasepayment"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PurchaseOrderUpdate is the builder for updating PurchaseOrder entities.
type PurchaseOrderUpdate struct {
	config
	hooks     []Hook
	mutation  *PurchaseOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PurchaseOrderUpdate builder.
func (pou *PurchaseOrderUpdate) Where(ps ...predicate.PurchaseOrder) *PurchaseOrderUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetUpdatedAt sets the "updated_at" field.
func (pou *PurchaseOrderUpdate) SetUpdatedAt(t time.Time) *PurchaseOrderUpdate {
	pou.mutation.SetUpdatedAt(t)
	return pou
}

// SetDeletedAt sets the "deleted_at" field.
func (pou *PurchaseOrderUpdate) SetDeletedAt(t time.Time) *PurchaseOrderUpdate {
	pou.mutation.SetDeletedAt(t)
	return pou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableDeletedAt(t *time.Time) *PurchaseOrderUpdate {
	if t != nil {
		pou.SetDeletedAt(*t)
	}
	return pou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pou *PurchaseOrderUpdate) ClearDeletedAt() *PurchaseOrderUpdate {
	pou.mutation.ClearDeletedAt()
	return pou
}

// SetLastModifier sets the "last_modifier" field.
func (pou *PurchaseOrderUpdate) SetLastModifier(m *model.Modifier) *PurchaseOrderUpdate {
	pou.mutation.SetLastModifier(m)
	return pou
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pou *PurchaseOrderUpdate) ClearLastModifier() *PurchaseOrderUpdate {
	pou.mutation.ClearLastModifier()
	return pou
}

// SetRemark sets the "remark" field.
func (pou *PurchaseOrderUpdate) SetRemark(s string) *PurchaseOrderUpdate {
	pou.mutation.SetRemark(s)
	return pou
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableRemark(s *string) *PurchaseOrderUpdate {
	if s != nil {
		pou.SetRemark(*s)
	}
	return pou
}

// ClearRemark clears the value of the "remark" field.
func (pou *PurchaseOrderUpdate) ClearRemark() *PurchaseOrderUpdate {
	pou.mutation.ClearRemark()
	return pou
}

// SetRiderID sets the "rider_id" field.
func (pou *PurchaseOrderUpdate) SetRiderID(u uint64) *PurchaseOrderUpdate {
	pou.mutation.SetRiderID(u)
	return pou
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableRiderID(u *uint64) *PurchaseOrderUpdate {
	if u != nil {
		pou.SetRiderID(*u)
	}
	return pou
}

// SetGoodsID sets the "goods_id" field.
func (pou *PurchaseOrderUpdate) SetGoodsID(u uint64) *PurchaseOrderUpdate {
	pou.mutation.SetGoodsID(u)
	return pou
}

// SetNillableGoodsID sets the "goods_id" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableGoodsID(u *uint64) *PurchaseOrderUpdate {
	if u != nil {
		pou.SetGoodsID(*u)
	}
	return pou
}

// SetSn sets the "sn" field.
func (pou *PurchaseOrderUpdate) SetSn(s string) *PurchaseOrderUpdate {
	pou.mutation.SetSn(s)
	return pou
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableSn(s *string) *PurchaseOrderUpdate {
	if s != nil {
		pou.SetSn(*s)
	}
	return pou
}

// SetStatus sets the "status" field.
func (pou *PurchaseOrderUpdate) SetStatus(pu purchaseorder.Status) *PurchaseOrderUpdate {
	pou.mutation.SetStatus(pu)
	return pou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableStatus(pu *purchaseorder.Status) *PurchaseOrderUpdate {
	if pu != nil {
		pou.SetStatus(*pu)
	}
	return pou
}

// SetContractURL sets the "contract_url" field.
func (pou *PurchaseOrderUpdate) SetContractURL(s string) *PurchaseOrderUpdate {
	pou.mutation.SetContractURL(s)
	return pou
}

// SetNillableContractURL sets the "contract_url" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableContractURL(s *string) *PurchaseOrderUpdate {
	if s != nil {
		pou.SetContractURL(*s)
	}
	return pou
}

// ClearContractURL clears the value of the "contract_url" field.
func (pou *PurchaseOrderUpdate) ClearContractURL() *PurchaseOrderUpdate {
	pou.mutation.ClearContractURL()
	return pou
}

// SetInstallmentIndex sets the "installment_index" field.
func (pou *PurchaseOrderUpdate) SetInstallmentIndex(i int) *PurchaseOrderUpdate {
	pou.mutation.ResetInstallmentIndex()
	pou.mutation.SetInstallmentIndex(i)
	return pou
}

// SetNillableInstallmentIndex sets the "installment_index" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableInstallmentIndex(i *int) *PurchaseOrderUpdate {
	if i != nil {
		pou.SetInstallmentIndex(*i)
	}
	return pou
}

// AddInstallmentIndex adds i to the "installment_index" field.
func (pou *PurchaseOrderUpdate) AddInstallmentIndex(i int) *PurchaseOrderUpdate {
	pou.mutation.AddInstallmentIndex(i)
	return pou
}

// SetInstallmentTotal sets the "installment_total" field.
func (pou *PurchaseOrderUpdate) SetInstallmentTotal(i int) *PurchaseOrderUpdate {
	pou.mutation.ResetInstallmentTotal()
	pou.mutation.SetInstallmentTotal(i)
	return pou
}

// SetNillableInstallmentTotal sets the "installment_total" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableInstallmentTotal(i *int) *PurchaseOrderUpdate {
	if i != nil {
		pou.SetInstallmentTotal(*i)
	}
	return pou
}

// AddInstallmentTotal adds i to the "installment_total" field.
func (pou *PurchaseOrderUpdate) AddInstallmentTotal(i int) *PurchaseOrderUpdate {
	pou.mutation.AddInstallmentTotal(i)
	return pou
}

// SetInstallments sets the "installments" field.
func (pou *PurchaseOrderUpdate) SetInstallments(f []float64) *PurchaseOrderUpdate {
	pou.mutation.SetInstallments(f)
	return pou
}

// AppendInstallments appends f to the "installments" field.
func (pou *PurchaseOrderUpdate) AppendInstallments(f []float64) *PurchaseOrderUpdate {
	pou.mutation.AppendInstallments(f)
	return pou
}

// SetStartDate sets the "start_date" field.
func (pou *PurchaseOrderUpdate) SetStartDate(t time.Time) *PurchaseOrderUpdate {
	pou.mutation.SetStartDate(t)
	return pou
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableStartDate(t *time.Time) *PurchaseOrderUpdate {
	if t != nil {
		pou.SetStartDate(*t)
	}
	return pou
}

// SetNextDate sets the "next_date" field.
func (pou *PurchaseOrderUpdate) SetNextDate(t time.Time) *PurchaseOrderUpdate {
	pou.mutation.SetNextDate(t)
	return pou
}

// SetNillableNextDate sets the "next_date" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableNextDate(t *time.Time) *PurchaseOrderUpdate {
	if t != nil {
		pou.SetNextDate(*t)
	}
	return pou
}

// ClearNextDate clears the value of the "next_date" field.
func (pou *PurchaseOrderUpdate) ClearNextDate() *PurchaseOrderUpdate {
	pou.mutation.ClearNextDate()
	return pou
}

// SetStore sets the "store" field.
func (pou *PurchaseOrderUpdate) SetStore(s string) *PurchaseOrderUpdate {
	pou.mutation.SetStore(s)
	return pou
}

// SetNillableStore sets the "store" field if the given value is not nil.
func (pou *PurchaseOrderUpdate) SetNillableStore(s *string) *PurchaseOrderUpdate {
	if s != nil {
		pou.SetStore(*s)
	}
	return pou
}

// ClearStore clears the value of the "store" field.
func (pou *PurchaseOrderUpdate) ClearStore() *PurchaseOrderUpdate {
	pou.mutation.ClearStore()
	return pou
}

// SetImages sets the "images" field.
func (pou *PurchaseOrderUpdate) SetImages(s []string) *PurchaseOrderUpdate {
	pou.mutation.SetImages(s)
	return pou
}

// AppendImages appends s to the "images" field.
func (pou *PurchaseOrderUpdate) AppendImages(s []string) *PurchaseOrderUpdate {
	pou.mutation.AppendImages(s)
	return pou
}

// ClearImages clears the value of the "images" field.
func (pou *PurchaseOrderUpdate) ClearImages() *PurchaseOrderUpdate {
	pou.mutation.ClearImages()
	return pou
}

// SetRider sets the "rider" edge to the Rider entity.
func (pou *PurchaseOrderUpdate) SetRider(r *Rider) *PurchaseOrderUpdate {
	return pou.SetRiderID(r.ID)
}

// SetGoods sets the "goods" edge to the Goods entity.
func (pou *PurchaseOrderUpdate) SetGoods(g *Goods) *PurchaseOrderUpdate {
	return pou.SetGoodsID(g.ID)
}

// AddPaymentIDs adds the "payments" edge to the PurchasePayment entity by IDs.
func (pou *PurchaseOrderUpdate) AddPaymentIDs(ids ...uint64) *PurchaseOrderUpdate {
	pou.mutation.AddPaymentIDs(ids...)
	return pou
}

// AddPayments adds the "payments" edges to the PurchasePayment entity.
func (pou *PurchaseOrderUpdate) AddPayments(p ...*PurchasePayment) *PurchaseOrderUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pou.AddPaymentIDs(ids...)
}

// Mutation returns the PurchaseOrderMutation object of the builder.
func (pou *PurchaseOrderUpdate) Mutation() *PurchaseOrderMutation {
	return pou.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (pou *PurchaseOrderUpdate) ClearRider() *PurchaseOrderUpdate {
	pou.mutation.ClearRider()
	return pou
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (pou *PurchaseOrderUpdate) ClearGoods() *PurchaseOrderUpdate {
	pou.mutation.ClearGoods()
	return pou
}

// ClearPayments clears all "payments" edges to the PurchasePayment entity.
func (pou *PurchaseOrderUpdate) ClearPayments() *PurchaseOrderUpdate {
	pou.mutation.ClearPayments()
	return pou
}

// RemovePaymentIDs removes the "payments" edge to PurchasePayment entities by IDs.
func (pou *PurchaseOrderUpdate) RemovePaymentIDs(ids ...uint64) *PurchaseOrderUpdate {
	pou.mutation.RemovePaymentIDs(ids...)
	return pou
}

// RemovePayments removes "payments" edges to PurchasePayment entities.
func (pou *PurchaseOrderUpdate) RemovePayments(p ...*PurchasePayment) *PurchaseOrderUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pou.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PurchaseOrderUpdate) Save(ctx context.Context) (int, error) {
	if err := pou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pou.sqlSave, pou.mutation, pou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PurchaseOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PurchaseOrderUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PurchaseOrderUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pou *PurchaseOrderUpdate) defaults() error {
	if _, ok := pou.mutation.UpdatedAt(); !ok {
		if purchaseorder.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchaseorder.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchaseorder.UpdateDefaultUpdatedAt()
		pou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pou *PurchaseOrderUpdate) check() error {
	if v, ok := pou.mutation.Status(); ok {
		if err := purchaseorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PurchaseOrder.status": %w`, err)}
		}
	}
	if pou.mutation.RiderCleared() && len(pou.mutation.RiderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchaseOrder.rider"`)
	}
	if pou.mutation.GoodsCleared() && len(pou.mutation.GoodsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchaseOrder.goods"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pou *PurchaseOrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PurchaseOrderUpdate {
	pou.modifiers = append(pou.modifiers, modifiers...)
	return pou
}

func (pou *PurchaseOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(purchaseorder.Table, purchaseorder.Columns, sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64))
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.UpdatedAt(); ok {
		_spec.SetField(purchaseorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pou.mutation.DeletedAt(); ok {
		_spec.SetField(purchaseorder.FieldDeletedAt, field.TypeTime, value)
	}
	if pou.mutation.DeletedAtCleared() {
		_spec.ClearField(purchaseorder.FieldDeletedAt, field.TypeTime)
	}
	if pou.mutation.CreatorCleared() {
		_spec.ClearField(purchaseorder.FieldCreator, field.TypeJSON)
	}
	if value, ok := pou.mutation.LastModifier(); ok {
		_spec.SetField(purchaseorder.FieldLastModifier, field.TypeJSON, value)
	}
	if pou.mutation.LastModifierCleared() {
		_spec.ClearField(purchaseorder.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pou.mutation.Remark(); ok {
		_spec.SetField(purchaseorder.FieldRemark, field.TypeString, value)
	}
	if pou.mutation.RemarkCleared() {
		_spec.ClearField(purchaseorder.FieldRemark, field.TypeString)
	}
	if value, ok := pou.mutation.Sn(); ok {
		_spec.SetField(purchaseorder.FieldSn, field.TypeString, value)
	}
	if value, ok := pou.mutation.Status(); ok {
		_spec.SetField(purchaseorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pou.mutation.ContractURL(); ok {
		_spec.SetField(purchaseorder.FieldContractURL, field.TypeString, value)
	}
	if pou.mutation.ContractURLCleared() {
		_spec.ClearField(purchaseorder.FieldContractURL, field.TypeString)
	}
	if value, ok := pou.mutation.InstallmentIndex(); ok {
		_spec.SetField(purchaseorder.FieldInstallmentIndex, field.TypeInt, value)
	}
	if value, ok := pou.mutation.AddedInstallmentIndex(); ok {
		_spec.AddField(purchaseorder.FieldInstallmentIndex, field.TypeInt, value)
	}
	if value, ok := pou.mutation.InstallmentTotal(); ok {
		_spec.SetField(purchaseorder.FieldInstallmentTotal, field.TypeInt, value)
	}
	if value, ok := pou.mutation.AddedInstallmentTotal(); ok {
		_spec.AddField(purchaseorder.FieldInstallmentTotal, field.TypeInt, value)
	}
	if value, ok := pou.mutation.Installments(); ok {
		_spec.SetField(purchaseorder.FieldInstallments, field.TypeJSON, value)
	}
	if value, ok := pou.mutation.AppendedInstallments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, purchaseorder.FieldInstallments, value)
		})
	}
	if value, ok := pou.mutation.StartDate(); ok {
		_spec.SetField(purchaseorder.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := pou.mutation.NextDate(); ok {
		_spec.SetField(purchaseorder.FieldNextDate, field.TypeTime, value)
	}
	if pou.mutation.NextDateCleared() {
		_spec.ClearField(purchaseorder.FieldNextDate, field.TypeTime)
	}
	if value, ok := pou.mutation.Store(); ok {
		_spec.SetField(purchaseorder.FieldStore, field.TypeString, value)
	}
	if pou.mutation.StoreCleared() {
		_spec.ClearField(purchaseorder.FieldStore, field.TypeString)
	}
	if value, ok := pou.mutation.Images(); ok {
		_spec.SetField(purchaseorder.FieldImages, field.TypeJSON, value)
	}
	if value, ok := pou.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, purchaseorder.FieldImages, value)
		})
	}
	if pou.mutation.ImagesCleared() {
		_spec.ClearField(purchaseorder.FieldImages, field.TypeJSON)
	}
	if pou.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.RiderTable,
			Columns: []string{purchaseorder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.RiderTable,
			Columns: []string{purchaseorder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.GoodsTable,
			Columns: []string{purchaseorder.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.GoodsTable,
			Columns: []string{purchaseorder.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pou.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaseorder.PaymentsTable,
			Columns: []string{purchaseorder.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !pou.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaseorder.PaymentsTable,
			Columns: []string{purchaseorder.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaseorder.PaymentsTable,
			Columns: []string{purchaseorder.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchaseorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pou.mutation.done = true
	return n, nil
}

// PurchaseOrderUpdateOne is the builder for updating a single PurchaseOrder entity.
type PurchaseOrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PurchaseOrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pouo *PurchaseOrderUpdateOne) SetUpdatedAt(t time.Time) *PurchaseOrderUpdateOne {
	pouo.mutation.SetUpdatedAt(t)
	return pouo
}

// SetDeletedAt sets the "deleted_at" field.
func (pouo *PurchaseOrderUpdateOne) SetDeletedAt(t time.Time) *PurchaseOrderUpdateOne {
	pouo.mutation.SetDeletedAt(t)
	return pouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableDeletedAt(t *time.Time) *PurchaseOrderUpdateOne {
	if t != nil {
		pouo.SetDeletedAt(*t)
	}
	return pouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pouo *PurchaseOrderUpdateOne) ClearDeletedAt() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearDeletedAt()
	return pouo
}

// SetLastModifier sets the "last_modifier" field.
func (pouo *PurchaseOrderUpdateOne) SetLastModifier(m *model.Modifier) *PurchaseOrderUpdateOne {
	pouo.mutation.SetLastModifier(m)
	return pouo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pouo *PurchaseOrderUpdateOne) ClearLastModifier() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearLastModifier()
	return pouo
}

// SetRemark sets the "remark" field.
func (pouo *PurchaseOrderUpdateOne) SetRemark(s string) *PurchaseOrderUpdateOne {
	pouo.mutation.SetRemark(s)
	return pouo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableRemark(s *string) *PurchaseOrderUpdateOne {
	if s != nil {
		pouo.SetRemark(*s)
	}
	return pouo
}

// ClearRemark clears the value of the "remark" field.
func (pouo *PurchaseOrderUpdateOne) ClearRemark() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearRemark()
	return pouo
}

// SetRiderID sets the "rider_id" field.
func (pouo *PurchaseOrderUpdateOne) SetRiderID(u uint64) *PurchaseOrderUpdateOne {
	pouo.mutation.SetRiderID(u)
	return pouo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableRiderID(u *uint64) *PurchaseOrderUpdateOne {
	if u != nil {
		pouo.SetRiderID(*u)
	}
	return pouo
}

// SetGoodsID sets the "goods_id" field.
func (pouo *PurchaseOrderUpdateOne) SetGoodsID(u uint64) *PurchaseOrderUpdateOne {
	pouo.mutation.SetGoodsID(u)
	return pouo
}

// SetNillableGoodsID sets the "goods_id" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableGoodsID(u *uint64) *PurchaseOrderUpdateOne {
	if u != nil {
		pouo.SetGoodsID(*u)
	}
	return pouo
}

// SetSn sets the "sn" field.
func (pouo *PurchaseOrderUpdateOne) SetSn(s string) *PurchaseOrderUpdateOne {
	pouo.mutation.SetSn(s)
	return pouo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableSn(s *string) *PurchaseOrderUpdateOne {
	if s != nil {
		pouo.SetSn(*s)
	}
	return pouo
}

// SetStatus sets the "status" field.
func (pouo *PurchaseOrderUpdateOne) SetStatus(pu purchaseorder.Status) *PurchaseOrderUpdateOne {
	pouo.mutation.SetStatus(pu)
	return pouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableStatus(pu *purchaseorder.Status) *PurchaseOrderUpdateOne {
	if pu != nil {
		pouo.SetStatus(*pu)
	}
	return pouo
}

// SetContractURL sets the "contract_url" field.
func (pouo *PurchaseOrderUpdateOne) SetContractURL(s string) *PurchaseOrderUpdateOne {
	pouo.mutation.SetContractURL(s)
	return pouo
}

// SetNillableContractURL sets the "contract_url" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableContractURL(s *string) *PurchaseOrderUpdateOne {
	if s != nil {
		pouo.SetContractURL(*s)
	}
	return pouo
}

// ClearContractURL clears the value of the "contract_url" field.
func (pouo *PurchaseOrderUpdateOne) ClearContractURL() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearContractURL()
	return pouo
}

// SetInstallmentIndex sets the "installment_index" field.
func (pouo *PurchaseOrderUpdateOne) SetInstallmentIndex(i int) *PurchaseOrderUpdateOne {
	pouo.mutation.ResetInstallmentIndex()
	pouo.mutation.SetInstallmentIndex(i)
	return pouo
}

// SetNillableInstallmentIndex sets the "installment_index" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableInstallmentIndex(i *int) *PurchaseOrderUpdateOne {
	if i != nil {
		pouo.SetInstallmentIndex(*i)
	}
	return pouo
}

// AddInstallmentIndex adds i to the "installment_index" field.
func (pouo *PurchaseOrderUpdateOne) AddInstallmentIndex(i int) *PurchaseOrderUpdateOne {
	pouo.mutation.AddInstallmentIndex(i)
	return pouo
}

// SetInstallmentTotal sets the "installment_total" field.
func (pouo *PurchaseOrderUpdateOne) SetInstallmentTotal(i int) *PurchaseOrderUpdateOne {
	pouo.mutation.ResetInstallmentTotal()
	pouo.mutation.SetInstallmentTotal(i)
	return pouo
}

// SetNillableInstallmentTotal sets the "installment_total" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableInstallmentTotal(i *int) *PurchaseOrderUpdateOne {
	if i != nil {
		pouo.SetInstallmentTotal(*i)
	}
	return pouo
}

// AddInstallmentTotal adds i to the "installment_total" field.
func (pouo *PurchaseOrderUpdateOne) AddInstallmentTotal(i int) *PurchaseOrderUpdateOne {
	pouo.mutation.AddInstallmentTotal(i)
	return pouo
}

// SetInstallments sets the "installments" field.
func (pouo *PurchaseOrderUpdateOne) SetInstallments(f []float64) *PurchaseOrderUpdateOne {
	pouo.mutation.SetInstallments(f)
	return pouo
}

// AppendInstallments appends f to the "installments" field.
func (pouo *PurchaseOrderUpdateOne) AppendInstallments(f []float64) *PurchaseOrderUpdateOne {
	pouo.mutation.AppendInstallments(f)
	return pouo
}

// SetStartDate sets the "start_date" field.
func (pouo *PurchaseOrderUpdateOne) SetStartDate(t time.Time) *PurchaseOrderUpdateOne {
	pouo.mutation.SetStartDate(t)
	return pouo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableStartDate(t *time.Time) *PurchaseOrderUpdateOne {
	if t != nil {
		pouo.SetStartDate(*t)
	}
	return pouo
}

// SetNextDate sets the "next_date" field.
func (pouo *PurchaseOrderUpdateOne) SetNextDate(t time.Time) *PurchaseOrderUpdateOne {
	pouo.mutation.SetNextDate(t)
	return pouo
}

// SetNillableNextDate sets the "next_date" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableNextDate(t *time.Time) *PurchaseOrderUpdateOne {
	if t != nil {
		pouo.SetNextDate(*t)
	}
	return pouo
}

// ClearNextDate clears the value of the "next_date" field.
func (pouo *PurchaseOrderUpdateOne) ClearNextDate() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearNextDate()
	return pouo
}

// SetStore sets the "store" field.
func (pouo *PurchaseOrderUpdateOne) SetStore(s string) *PurchaseOrderUpdateOne {
	pouo.mutation.SetStore(s)
	return pouo
}

// SetNillableStore sets the "store" field if the given value is not nil.
func (pouo *PurchaseOrderUpdateOne) SetNillableStore(s *string) *PurchaseOrderUpdateOne {
	if s != nil {
		pouo.SetStore(*s)
	}
	return pouo
}

// ClearStore clears the value of the "store" field.
func (pouo *PurchaseOrderUpdateOne) ClearStore() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearStore()
	return pouo
}

// SetImages sets the "images" field.
func (pouo *PurchaseOrderUpdateOne) SetImages(s []string) *PurchaseOrderUpdateOne {
	pouo.mutation.SetImages(s)
	return pouo
}

// AppendImages appends s to the "images" field.
func (pouo *PurchaseOrderUpdateOne) AppendImages(s []string) *PurchaseOrderUpdateOne {
	pouo.mutation.AppendImages(s)
	return pouo
}

// ClearImages clears the value of the "images" field.
func (pouo *PurchaseOrderUpdateOne) ClearImages() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearImages()
	return pouo
}

// SetRider sets the "rider" edge to the Rider entity.
func (pouo *PurchaseOrderUpdateOne) SetRider(r *Rider) *PurchaseOrderUpdateOne {
	return pouo.SetRiderID(r.ID)
}

// SetGoods sets the "goods" edge to the Goods entity.
func (pouo *PurchaseOrderUpdateOne) SetGoods(g *Goods) *PurchaseOrderUpdateOne {
	return pouo.SetGoodsID(g.ID)
}

// AddPaymentIDs adds the "payments" edge to the PurchasePayment entity by IDs.
func (pouo *PurchaseOrderUpdateOne) AddPaymentIDs(ids ...uint64) *PurchaseOrderUpdateOne {
	pouo.mutation.AddPaymentIDs(ids...)
	return pouo
}

// AddPayments adds the "payments" edges to the PurchasePayment entity.
func (pouo *PurchaseOrderUpdateOne) AddPayments(p ...*PurchasePayment) *PurchaseOrderUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pouo.AddPaymentIDs(ids...)
}

// Mutation returns the PurchaseOrderMutation object of the builder.
func (pouo *PurchaseOrderUpdateOne) Mutation() *PurchaseOrderMutation {
	return pouo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (pouo *PurchaseOrderUpdateOne) ClearRider() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearRider()
	return pouo
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (pouo *PurchaseOrderUpdateOne) ClearGoods() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearGoods()
	return pouo
}

// ClearPayments clears all "payments" edges to the PurchasePayment entity.
func (pouo *PurchaseOrderUpdateOne) ClearPayments() *PurchaseOrderUpdateOne {
	pouo.mutation.ClearPayments()
	return pouo
}

// RemovePaymentIDs removes the "payments" edge to PurchasePayment entities by IDs.
func (pouo *PurchaseOrderUpdateOne) RemovePaymentIDs(ids ...uint64) *PurchaseOrderUpdateOne {
	pouo.mutation.RemovePaymentIDs(ids...)
	return pouo
}

// RemovePayments removes "payments" edges to PurchasePayment entities.
func (pouo *PurchaseOrderUpdateOne) RemovePayments(p ...*PurchasePayment) *PurchaseOrderUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pouo.RemovePaymentIDs(ids...)
}

// Where appends a list predicates to the PurchaseOrderUpdate builder.
func (pouo *PurchaseOrderUpdateOne) Where(ps ...predicate.PurchaseOrder) *PurchaseOrderUpdateOne {
	pouo.mutation.Where(ps...)
	return pouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PurchaseOrderUpdateOne) Select(field string, fields ...string) *PurchaseOrderUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PurchaseOrder entity.
func (pouo *PurchaseOrderUpdateOne) Save(ctx context.Context) (*PurchaseOrder, error) {
	if err := pouo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pouo.sqlSave, pouo.mutation, pouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PurchaseOrderUpdateOne) SaveX(ctx context.Context) *PurchaseOrder {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PurchaseOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PurchaseOrderUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pouo *PurchaseOrderUpdateOne) defaults() error {
	if _, ok := pouo.mutation.UpdatedAt(); !ok {
		if purchaseorder.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchaseorder.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchaseorder.UpdateDefaultUpdatedAt()
		pouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pouo *PurchaseOrderUpdateOne) check() error {
	if v, ok := pouo.mutation.Status(); ok {
		if err := purchaseorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PurchaseOrder.status": %w`, err)}
		}
	}
	if pouo.mutation.RiderCleared() && len(pouo.mutation.RiderIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchaseOrder.rider"`)
	}
	if pouo.mutation.GoodsCleared() && len(pouo.mutation.GoodsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PurchaseOrder.goods"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pouo *PurchaseOrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PurchaseOrderUpdateOne {
	pouo.modifiers = append(pouo.modifiers, modifiers...)
	return pouo
}

func (pouo *PurchaseOrderUpdateOne) sqlSave(ctx context.Context) (_node *PurchaseOrder, err error) {
	if err := pouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(purchaseorder.Table, purchaseorder.Columns, sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64))
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PurchaseOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purchaseorder.FieldID)
		for _, f := range fields {
			if !purchaseorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != purchaseorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.UpdatedAt(); ok {
		_spec.SetField(purchaseorder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pouo.mutation.DeletedAt(); ok {
		_spec.SetField(purchaseorder.FieldDeletedAt, field.TypeTime, value)
	}
	if pouo.mutation.DeletedAtCleared() {
		_spec.ClearField(purchaseorder.FieldDeletedAt, field.TypeTime)
	}
	if pouo.mutation.CreatorCleared() {
		_spec.ClearField(purchaseorder.FieldCreator, field.TypeJSON)
	}
	if value, ok := pouo.mutation.LastModifier(); ok {
		_spec.SetField(purchaseorder.FieldLastModifier, field.TypeJSON, value)
	}
	if pouo.mutation.LastModifierCleared() {
		_spec.ClearField(purchaseorder.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pouo.mutation.Remark(); ok {
		_spec.SetField(purchaseorder.FieldRemark, field.TypeString, value)
	}
	if pouo.mutation.RemarkCleared() {
		_spec.ClearField(purchaseorder.FieldRemark, field.TypeString)
	}
	if value, ok := pouo.mutation.Sn(); ok {
		_spec.SetField(purchaseorder.FieldSn, field.TypeString, value)
	}
	if value, ok := pouo.mutation.Status(); ok {
		_spec.SetField(purchaseorder.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pouo.mutation.ContractURL(); ok {
		_spec.SetField(purchaseorder.FieldContractURL, field.TypeString, value)
	}
	if pouo.mutation.ContractURLCleared() {
		_spec.ClearField(purchaseorder.FieldContractURL, field.TypeString)
	}
	if value, ok := pouo.mutation.InstallmentIndex(); ok {
		_spec.SetField(purchaseorder.FieldInstallmentIndex, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.AddedInstallmentIndex(); ok {
		_spec.AddField(purchaseorder.FieldInstallmentIndex, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.InstallmentTotal(); ok {
		_spec.SetField(purchaseorder.FieldInstallmentTotal, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.AddedInstallmentTotal(); ok {
		_spec.AddField(purchaseorder.FieldInstallmentTotal, field.TypeInt, value)
	}
	if value, ok := pouo.mutation.Installments(); ok {
		_spec.SetField(purchaseorder.FieldInstallments, field.TypeJSON, value)
	}
	if value, ok := pouo.mutation.AppendedInstallments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, purchaseorder.FieldInstallments, value)
		})
	}
	if value, ok := pouo.mutation.StartDate(); ok {
		_spec.SetField(purchaseorder.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := pouo.mutation.NextDate(); ok {
		_spec.SetField(purchaseorder.FieldNextDate, field.TypeTime, value)
	}
	if pouo.mutation.NextDateCleared() {
		_spec.ClearField(purchaseorder.FieldNextDate, field.TypeTime)
	}
	if value, ok := pouo.mutation.Store(); ok {
		_spec.SetField(purchaseorder.FieldStore, field.TypeString, value)
	}
	if pouo.mutation.StoreCleared() {
		_spec.ClearField(purchaseorder.FieldStore, field.TypeString)
	}
	if value, ok := pouo.mutation.Images(); ok {
		_spec.SetField(purchaseorder.FieldImages, field.TypeJSON, value)
	}
	if value, ok := pouo.mutation.AppendedImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, purchaseorder.FieldImages, value)
		})
	}
	if pouo.mutation.ImagesCleared() {
		_spec.ClearField(purchaseorder.FieldImages, field.TypeJSON)
	}
	if pouo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.RiderTable,
			Columns: []string{purchaseorder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.RiderTable,
			Columns: []string{purchaseorder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.GoodsTable,
			Columns: []string{purchaseorder.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.GoodsTable,
			Columns: []string{purchaseorder.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pouo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaseorder.PaymentsTable,
			Columns: []string{purchaseorder.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !pouo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaseorder.PaymentsTable,
			Columns: []string{purchaseorder.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaseorder.PaymentsTable,
			Columns: []string{purchaseorder.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pouo.modifiers...)
	_node = &PurchaseOrder{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchaseorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pouo.mutation.done = true
	return _node, nil
}
