// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/subscribepause"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// SubscribePauseMutation represents an operation that mutates the SubscribePause nodes in the graph.
type SubscribePauseMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	created_at          *time.Time
	updated_at          *time.Time
	deleted_at          *time.Time
	creator             **model.Modifier
	last_modifier       **model.Modifier
	remark              *string
	start_at            *time.Time
	end_at              *time.Time
	days                *int
	adddays             *int
	overdue             *bool
	end_modifier        **model.Modifier
	clearedFields       map[string]struct{}
	rider               *uint64
	clearedrider        bool
	employee            *uint64
	clearedemployee     bool
	city                *uint64
	clearedcity         bool
	store               *uint64
	clearedstore        bool
	endStore            *uint64
	clearedendStore     bool
	cabinet             *uint64
	clearedcabinet      bool
	endCabinet          *uint64
	clearedendCabinet   bool
	subscribe           *uint64
	clearedsubscribe    bool
	end_employee        *uint64
	clearedend_employee bool
	done                bool
	oldValue            func(context.Context) (*SubscribePause, error)
	predicates          []predicate.SubscribePause
}

var _ ent.Mutation = (*SubscribePauseMutation)(nil)

// subscribepauseOption allows management of the mutation configuration using functional options.
type subscribepauseOption func(*SubscribePauseMutation)

// newSubscribePauseMutation creates new mutation for the SubscribePause entity.
func newSubscribePauseMutation(c config, op Op, opts ...subscribepauseOption) *SubscribePauseMutation {
	m := &SubscribePauseMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscribePause,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscribePauseID sets the ID field of the mutation.
func withSubscribePauseID(id uint64) subscribepauseOption {
	return func(m *SubscribePauseMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscribePause
		)
		m.oldValue = func(ctx context.Context) (*SubscribePause, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscribePause.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscribePause sets the old SubscribePause of the mutation.
func withSubscribePause(node *SubscribePause) subscribepauseOption {
	return func(m *SubscribePauseMutation) {
		m.oldValue = func(context.Context) (*SubscribePause, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscribePauseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscribePauseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscribePauseMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscribePauseMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscribePause.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscribePauseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscribePauseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscribePauseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscribePauseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscribePauseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscribePauseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SubscribePauseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SubscribePauseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SubscribePauseMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[subscribepause.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SubscribePauseMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SubscribePauseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, subscribepause.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *SubscribePauseMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *SubscribePauseMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *SubscribePauseMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[subscribepause.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *SubscribePauseMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *SubscribePauseMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, subscribepause.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *SubscribePauseMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *SubscribePauseMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *SubscribePauseMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[subscribepause.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *SubscribePauseMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *SubscribePauseMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, subscribepause.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *SubscribePauseMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SubscribePauseMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SubscribePauseMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[subscribepause.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SubscribePauseMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SubscribePauseMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, subscribepause.FieldRemark)
}

// SetRiderID sets the "rider_id" field.
func (m *SubscribePauseMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *SubscribePauseMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *SubscribePauseMutation) ResetRiderID() {
	m.rider = nil
}

// SetEmployeeID sets the "employee_id" field.
func (m *SubscribePauseMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *SubscribePauseMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (m *SubscribePauseMutation) ClearEmployeeID() {
	m.employee = nil
	m.clearedFields[subscribepause.FieldEmployeeID] = struct{}{}
}

// EmployeeIDCleared returns if the "employee_id" field was cleared in this mutation.
func (m *SubscribePauseMutation) EmployeeIDCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldEmployeeID]
	return ok
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *SubscribePauseMutation) ResetEmployeeID() {
	m.employee = nil
	delete(m.clearedFields, subscribepause.FieldEmployeeID)
}

// SetCityID sets the "city_id" field.
func (m *SubscribePauseMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *SubscribePauseMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldCityID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ClearCityID clears the value of the "city_id" field.
func (m *SubscribePauseMutation) ClearCityID() {
	m.city = nil
	m.clearedFields[subscribepause.FieldCityID] = struct{}{}
}

// CityIDCleared returns if the "city_id" field was cleared in this mutation.
func (m *SubscribePauseMutation) CityIDCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldCityID]
	return ok
}

// ResetCityID resets all changes to the "city_id" field.
func (m *SubscribePauseMutation) ResetCityID() {
	m.city = nil
	delete(m.clearedFields, subscribepause.FieldCityID)
}

// SetStoreID sets the "store_id" field.
func (m *SubscribePauseMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *SubscribePauseMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldStoreID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ClearStoreID clears the value of the "store_id" field.
func (m *SubscribePauseMutation) ClearStoreID() {
	m.store = nil
	m.clearedFields[subscribepause.FieldStoreID] = struct{}{}
}

// StoreIDCleared returns if the "store_id" field was cleared in this mutation.
func (m *SubscribePauseMutation) StoreIDCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldStoreID]
	return ok
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *SubscribePauseMutation) ResetStoreID() {
	m.store = nil
	delete(m.clearedFields, subscribepause.FieldStoreID)
}

// SetEndStoreID sets the "end_store_id" field.
func (m *SubscribePauseMutation) SetEndStoreID(u uint64) {
	m.endStore = &u
}

// EndStoreID returns the value of the "end_store_id" field in the mutation.
func (m *SubscribePauseMutation) EndStoreID() (r uint64, exists bool) {
	v := m.endStore
	if v == nil {
		return
	}
	return *v, true
}

// OldEndStoreID returns the old "end_store_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldEndStoreID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndStoreID: %w", err)
	}
	return oldValue.EndStoreID, nil
}

// ClearEndStoreID clears the value of the "end_store_id" field.
func (m *SubscribePauseMutation) ClearEndStoreID() {
	m.endStore = nil
	m.clearedFields[subscribepause.FieldEndStoreID] = struct{}{}
}

// EndStoreIDCleared returns if the "end_store_id" field was cleared in this mutation.
func (m *SubscribePauseMutation) EndStoreIDCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldEndStoreID]
	return ok
}

// ResetEndStoreID resets all changes to the "end_store_id" field.
func (m *SubscribePauseMutation) ResetEndStoreID() {
	m.endStore = nil
	delete(m.clearedFields, subscribepause.FieldEndStoreID)
}

// SetCabinetID sets the "cabinet_id" field.
func (m *SubscribePauseMutation) SetCabinetID(u uint64) {
	m.cabinet = &u
}

// CabinetID returns the value of the "cabinet_id" field in the mutation.
func (m *SubscribePauseMutation) CabinetID() (r uint64, exists bool) {
	v := m.cabinet
	if v == nil {
		return
	}
	return *v, true
}

// OldCabinetID returns the old "cabinet_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldCabinetID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCabinetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCabinetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCabinetID: %w", err)
	}
	return oldValue.CabinetID, nil
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (m *SubscribePauseMutation) ClearCabinetID() {
	m.cabinet = nil
	m.clearedFields[subscribepause.FieldCabinetID] = struct{}{}
}

// CabinetIDCleared returns if the "cabinet_id" field was cleared in this mutation.
func (m *SubscribePauseMutation) CabinetIDCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldCabinetID]
	return ok
}

// ResetCabinetID resets all changes to the "cabinet_id" field.
func (m *SubscribePauseMutation) ResetCabinetID() {
	m.cabinet = nil
	delete(m.clearedFields, subscribepause.FieldCabinetID)
}

// SetEndCabinetID sets the "end_cabinet_id" field.
func (m *SubscribePauseMutation) SetEndCabinetID(u uint64) {
	m.endCabinet = &u
}

// EndCabinetID returns the value of the "end_cabinet_id" field in the mutation.
func (m *SubscribePauseMutation) EndCabinetID() (r uint64, exists bool) {
	v := m.endCabinet
	if v == nil {
		return
	}
	return *v, true
}

// OldEndCabinetID returns the old "end_cabinet_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldEndCabinetID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndCabinetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndCabinetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndCabinetID: %w", err)
	}
	return oldValue.EndCabinetID, nil
}

// ClearEndCabinetID clears the value of the "end_cabinet_id" field.
func (m *SubscribePauseMutation) ClearEndCabinetID() {
	m.endCabinet = nil
	m.clearedFields[subscribepause.FieldEndCabinetID] = struct{}{}
}

// EndCabinetIDCleared returns if the "end_cabinet_id" field was cleared in this mutation.
func (m *SubscribePauseMutation) EndCabinetIDCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldEndCabinetID]
	return ok
}

// ResetEndCabinetID resets all changes to the "end_cabinet_id" field.
func (m *SubscribePauseMutation) ResetEndCabinetID() {
	m.endCabinet = nil
	delete(m.clearedFields, subscribepause.FieldEndCabinetID)
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *SubscribePauseMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *SubscribePauseMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *SubscribePauseMutation) ResetSubscribeID() {
	m.subscribe = nil
}

// SetStartAt sets the "start_at" field.
func (m *SubscribePauseMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *SubscribePauseMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *SubscribePauseMutation) ResetStartAt() {
	m.start_at = nil
}

// SetEndAt sets the "end_at" field.
func (m *SubscribePauseMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *SubscribePauseMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ClearEndAt clears the value of the "end_at" field.
func (m *SubscribePauseMutation) ClearEndAt() {
	m.end_at = nil
	m.clearedFields[subscribepause.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *SubscribePauseMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *SubscribePauseMutation) ResetEndAt() {
	m.end_at = nil
	delete(m.clearedFields, subscribepause.FieldEndAt)
}

// SetDays sets the "days" field.
func (m *SubscribePauseMutation) SetDays(i int) {
	m.days = &i
	m.adddays = nil
}

// Days returns the value of the "days" field in the mutation.
func (m *SubscribePauseMutation) Days() (r int, exists bool) {
	v := m.days
	if v == nil {
		return
	}
	return *v, true
}

// OldDays returns the old "days" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDays: %w", err)
	}
	return oldValue.Days, nil
}

// AddDays adds i to the "days" field.
func (m *SubscribePauseMutation) AddDays(i int) {
	if m.adddays != nil {
		*m.adddays += i
	} else {
		m.adddays = &i
	}
}

// AddedDays returns the value that was added to the "days" field in this mutation.
func (m *SubscribePauseMutation) AddedDays() (r int, exists bool) {
	v := m.adddays
	if v == nil {
		return
	}
	return *v, true
}

// ClearDays clears the value of the "days" field.
func (m *SubscribePauseMutation) ClearDays() {
	m.days = nil
	m.adddays = nil
	m.clearedFields[subscribepause.FieldDays] = struct{}{}
}

// DaysCleared returns if the "days" field was cleared in this mutation.
func (m *SubscribePauseMutation) DaysCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldDays]
	return ok
}

// ResetDays resets all changes to the "days" field.
func (m *SubscribePauseMutation) ResetDays() {
	m.days = nil
	m.adddays = nil
	delete(m.clearedFields, subscribepause.FieldDays)
}

// SetEndEmployeeID sets the "end_employee_id" field.
func (m *SubscribePauseMutation) SetEndEmployeeID(u uint64) {
	m.end_employee = &u
}

// EndEmployeeID returns the value of the "end_employee_id" field in the mutation.
func (m *SubscribePauseMutation) EndEmployeeID() (r uint64, exists bool) {
	v := m.end_employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEndEmployeeID returns the old "end_employee_id" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldEndEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndEmployeeID: %w", err)
	}
	return oldValue.EndEmployeeID, nil
}

// ClearEndEmployeeID clears the value of the "end_employee_id" field.
func (m *SubscribePauseMutation) ClearEndEmployeeID() {
	m.end_employee = nil
	m.clearedFields[subscribepause.FieldEndEmployeeID] = struct{}{}
}

// EndEmployeeIDCleared returns if the "end_employee_id" field was cleared in this mutation.
func (m *SubscribePauseMutation) EndEmployeeIDCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldEndEmployeeID]
	return ok
}

// ResetEndEmployeeID resets all changes to the "end_employee_id" field.
func (m *SubscribePauseMutation) ResetEndEmployeeID() {
	m.end_employee = nil
	delete(m.clearedFields, subscribepause.FieldEndEmployeeID)
}

// SetOverdue sets the "overdue" field.
func (m *SubscribePauseMutation) SetOverdue(b bool) {
	m.overdue = &b
}

// Overdue returns the value of the "overdue" field in the mutation.
func (m *SubscribePauseMutation) Overdue() (r bool, exists bool) {
	v := m.overdue
	if v == nil {
		return
	}
	return *v, true
}

// OldOverdue returns the old "overdue" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldOverdue(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOverdue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOverdue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOverdue: %w", err)
	}
	return oldValue.Overdue, nil
}

// ResetOverdue resets all changes to the "overdue" field.
func (m *SubscribePauseMutation) ResetOverdue() {
	m.overdue = nil
}

// SetEndModifier sets the "end_modifier" field.
func (m *SubscribePauseMutation) SetEndModifier(value *model.Modifier) {
	m.end_modifier = &value
}

// EndModifier returns the value of the "end_modifier" field in the mutation.
func (m *SubscribePauseMutation) EndModifier() (r *model.Modifier, exists bool) {
	v := m.end_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldEndModifier returns the old "end_modifier" field's value of the SubscribePause entity.
// If the SubscribePause object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribePauseMutation) OldEndModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndModifier: %w", err)
	}
	return oldValue.EndModifier, nil
}

// ClearEndModifier clears the value of the "end_modifier" field.
func (m *SubscribePauseMutation) ClearEndModifier() {
	m.end_modifier = nil
	m.clearedFields[subscribepause.FieldEndModifier] = struct{}{}
}

// EndModifierCleared returns if the "end_modifier" field was cleared in this mutation.
func (m *SubscribePauseMutation) EndModifierCleared() bool {
	_, ok := m.clearedFields[subscribepause.FieldEndModifier]
	return ok
}

// ResetEndModifier resets all changes to the "end_modifier" field.
func (m *SubscribePauseMutation) ResetEndModifier() {
	m.end_modifier = nil
	delete(m.clearedFields, subscribepause.FieldEndModifier)
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *SubscribePauseMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *SubscribePauseMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *SubscribePauseMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *SubscribePauseMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *SubscribePauseMutation) EmployeeCleared() bool {
	return m.EmployeeIDCleared() || m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *SubscribePauseMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// ClearCity clears the "city" edge to the City entity.
func (m *SubscribePauseMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *SubscribePauseMutation) CityCleared() bool {
	return m.CityIDCleared() || m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *SubscribePauseMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *SubscribePauseMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *SubscribePauseMutation) StoreCleared() bool {
	return m.StoreIDCleared() || m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *SubscribePauseMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// ClearEndStore clears the "endStore" edge to the Store entity.
func (m *SubscribePauseMutation) ClearEndStore() {
	m.clearedendStore = true
}

// EndStoreCleared reports if the "endStore" edge to the Store entity was cleared.
func (m *SubscribePauseMutation) EndStoreCleared() bool {
	return m.EndStoreIDCleared() || m.clearedendStore
}

// EndStoreIDs returns the "endStore" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EndStoreID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) EndStoreIDs() (ids []uint64) {
	if id := m.endStore; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEndStore resets all changes to the "endStore" edge.
func (m *SubscribePauseMutation) ResetEndStore() {
	m.endStore = nil
	m.clearedendStore = false
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (m *SubscribePauseMutation) ClearCabinet() {
	m.clearedcabinet = true
}

// CabinetCleared reports if the "cabinet" edge to the Cabinet entity was cleared.
func (m *SubscribePauseMutation) CabinetCleared() bool {
	return m.CabinetIDCleared() || m.clearedcabinet
}

// CabinetIDs returns the "cabinet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CabinetID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) CabinetIDs() (ids []uint64) {
	if id := m.cabinet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCabinet resets all changes to the "cabinet" edge.
func (m *SubscribePauseMutation) ResetCabinet() {
	m.cabinet = nil
	m.clearedcabinet = false
}

// ClearEndCabinet clears the "endCabinet" edge to the Cabinet entity.
func (m *SubscribePauseMutation) ClearEndCabinet() {
	m.clearedendCabinet = true
}

// EndCabinetCleared reports if the "endCabinet" edge to the Cabinet entity was cleared.
func (m *SubscribePauseMutation) EndCabinetCleared() bool {
	return m.EndCabinetIDCleared() || m.clearedendCabinet
}

// EndCabinetIDs returns the "endCabinet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EndCabinetID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) EndCabinetIDs() (ids []uint64) {
	if id := m.endCabinet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEndCabinet resets all changes to the "endCabinet" edge.
func (m *SubscribePauseMutation) ResetEndCabinet() {
	m.endCabinet = nil
	m.clearedendCabinet = false
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *SubscribePauseMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *SubscribePauseMutation) SubscribeCleared() bool {
	return m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *SubscribePauseMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// ClearEndEmployee clears the "end_employee" edge to the Employee entity.
func (m *SubscribePauseMutation) ClearEndEmployee() {
	m.clearedend_employee = true
}

// EndEmployeeCleared reports if the "end_employee" edge to the Employee entity was cleared.
func (m *SubscribePauseMutation) EndEmployeeCleared() bool {
	return m.EndEmployeeIDCleared() || m.clearedend_employee
}

// EndEmployeeIDs returns the "end_employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EndEmployeeID instead. It exists only for internal usage by the builders.
func (m *SubscribePauseMutation) EndEmployeeIDs() (ids []uint64) {
	if id := m.end_employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEndEmployee resets all changes to the "end_employee" edge.
func (m *SubscribePauseMutation) ResetEndEmployee() {
	m.end_employee = nil
	m.clearedend_employee = false
}

// Where appends a list predicates to the SubscribePauseMutation builder.
func (m *SubscribePauseMutation) Where(ps ...predicate.SubscribePause) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SubscribePauseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SubscribePause).
func (m *SubscribePauseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscribePauseMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.created_at != nil {
		fields = append(fields, subscribepause.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscribepause.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, subscribepause.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, subscribepause.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, subscribepause.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, subscribepause.FieldRemark)
	}
	if m.rider != nil {
		fields = append(fields, subscribepause.FieldRiderID)
	}
	if m.employee != nil {
		fields = append(fields, subscribepause.FieldEmployeeID)
	}
	if m.city != nil {
		fields = append(fields, subscribepause.FieldCityID)
	}
	if m.store != nil {
		fields = append(fields, subscribepause.FieldStoreID)
	}
	if m.endStore != nil {
		fields = append(fields, subscribepause.FieldEndStoreID)
	}
	if m.cabinet != nil {
		fields = append(fields, subscribepause.FieldCabinetID)
	}
	if m.endCabinet != nil {
		fields = append(fields, subscribepause.FieldEndCabinetID)
	}
	if m.subscribe != nil {
		fields = append(fields, subscribepause.FieldSubscribeID)
	}
	if m.start_at != nil {
		fields = append(fields, subscribepause.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, subscribepause.FieldEndAt)
	}
	if m.days != nil {
		fields = append(fields, subscribepause.FieldDays)
	}
	if m.end_employee != nil {
		fields = append(fields, subscribepause.FieldEndEmployeeID)
	}
	if m.overdue != nil {
		fields = append(fields, subscribepause.FieldOverdue)
	}
	if m.end_modifier != nil {
		fields = append(fields, subscribepause.FieldEndModifier)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscribePauseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscribepause.FieldCreatedAt:
		return m.CreatedAt()
	case subscribepause.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscribepause.FieldDeletedAt:
		return m.DeletedAt()
	case subscribepause.FieldCreator:
		return m.Creator()
	case subscribepause.FieldLastModifier:
		return m.LastModifier()
	case subscribepause.FieldRemark:
		return m.Remark()
	case subscribepause.FieldRiderID:
		return m.RiderID()
	case subscribepause.FieldEmployeeID:
		return m.EmployeeID()
	case subscribepause.FieldCityID:
		return m.CityID()
	case subscribepause.FieldStoreID:
		return m.StoreID()
	case subscribepause.FieldEndStoreID:
		return m.EndStoreID()
	case subscribepause.FieldCabinetID:
		return m.CabinetID()
	case subscribepause.FieldEndCabinetID:
		return m.EndCabinetID()
	case subscribepause.FieldSubscribeID:
		return m.SubscribeID()
	case subscribepause.FieldStartAt:
		return m.StartAt()
	case subscribepause.FieldEndAt:
		return m.EndAt()
	case subscribepause.FieldDays:
		return m.Days()
	case subscribepause.FieldEndEmployeeID:
		return m.EndEmployeeID()
	case subscribepause.FieldOverdue:
		return m.Overdue()
	case subscribepause.FieldEndModifier:
		return m.EndModifier()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscribePauseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscribepause.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscribepause.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscribepause.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case subscribepause.FieldCreator:
		return m.OldCreator(ctx)
	case subscribepause.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case subscribepause.FieldRemark:
		return m.OldRemark(ctx)
	case subscribepause.FieldRiderID:
		return m.OldRiderID(ctx)
	case subscribepause.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case subscribepause.FieldCityID:
		return m.OldCityID(ctx)
	case subscribepause.FieldStoreID:
		return m.OldStoreID(ctx)
	case subscribepause.FieldEndStoreID:
		return m.OldEndStoreID(ctx)
	case subscribepause.FieldCabinetID:
		return m.OldCabinetID(ctx)
	case subscribepause.FieldEndCabinetID:
		return m.OldEndCabinetID(ctx)
	case subscribepause.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case subscribepause.FieldStartAt:
		return m.OldStartAt(ctx)
	case subscribepause.FieldEndAt:
		return m.OldEndAt(ctx)
	case subscribepause.FieldDays:
		return m.OldDays(ctx)
	case subscribepause.FieldEndEmployeeID:
		return m.OldEndEmployeeID(ctx)
	case subscribepause.FieldOverdue:
		return m.OldOverdue(ctx)
	case subscribepause.FieldEndModifier:
		return m.OldEndModifier(ctx)
	}
	return nil, fmt.Errorf("unknown SubscribePause field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribePauseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscribepause.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscribepause.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscribepause.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case subscribepause.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case subscribepause.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case subscribepause.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case subscribepause.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case subscribepause.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case subscribepause.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case subscribepause.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case subscribepause.FieldEndStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndStoreID(v)
		return nil
	case subscribepause.FieldCabinetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCabinetID(v)
		return nil
	case subscribepause.FieldEndCabinetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndCabinetID(v)
		return nil
	case subscribepause.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case subscribepause.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case subscribepause.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case subscribepause.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDays(v)
		return nil
	case subscribepause.FieldEndEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndEmployeeID(v)
		return nil
	case subscribepause.FieldOverdue:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOverdue(v)
		return nil
	case subscribepause.FieldEndModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndModifier(v)
		return nil
	}
	return fmt.Errorf("unknown SubscribePause field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscribePauseMutation) AddedFields() []string {
	var fields []string
	if m.adddays != nil {
		fields = append(fields, subscribepause.FieldDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscribePauseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscribepause.FieldDays:
		return m.AddedDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribePauseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscribepause.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDays(v)
		return nil
	}
	return fmt.Errorf("unknown SubscribePause numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscribePauseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscribepause.FieldDeletedAt) {
		fields = append(fields, subscribepause.FieldDeletedAt)
	}
	if m.FieldCleared(subscribepause.FieldCreator) {
		fields = append(fields, subscribepause.FieldCreator)
	}
	if m.FieldCleared(subscribepause.FieldLastModifier) {
		fields = append(fields, subscribepause.FieldLastModifier)
	}
	if m.FieldCleared(subscribepause.FieldRemark) {
		fields = append(fields, subscribepause.FieldRemark)
	}
	if m.FieldCleared(subscribepause.FieldEmployeeID) {
		fields = append(fields, subscribepause.FieldEmployeeID)
	}
	if m.FieldCleared(subscribepause.FieldCityID) {
		fields = append(fields, subscribepause.FieldCityID)
	}
	if m.FieldCleared(subscribepause.FieldStoreID) {
		fields = append(fields, subscribepause.FieldStoreID)
	}
	if m.FieldCleared(subscribepause.FieldEndStoreID) {
		fields = append(fields, subscribepause.FieldEndStoreID)
	}
	if m.FieldCleared(subscribepause.FieldCabinetID) {
		fields = append(fields, subscribepause.FieldCabinetID)
	}
	if m.FieldCleared(subscribepause.FieldEndCabinetID) {
		fields = append(fields, subscribepause.FieldEndCabinetID)
	}
	if m.FieldCleared(subscribepause.FieldEndAt) {
		fields = append(fields, subscribepause.FieldEndAt)
	}
	if m.FieldCleared(subscribepause.FieldDays) {
		fields = append(fields, subscribepause.FieldDays)
	}
	if m.FieldCleared(subscribepause.FieldEndEmployeeID) {
		fields = append(fields, subscribepause.FieldEndEmployeeID)
	}
	if m.FieldCleared(subscribepause.FieldEndModifier) {
		fields = append(fields, subscribepause.FieldEndModifier)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscribePauseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscribePauseMutation) ClearField(name string) error {
	switch name {
	case subscribepause.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case subscribepause.FieldCreator:
		m.ClearCreator()
		return nil
	case subscribepause.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case subscribepause.FieldRemark:
		m.ClearRemark()
		return nil
	case subscribepause.FieldEmployeeID:
		m.ClearEmployeeID()
		return nil
	case subscribepause.FieldCityID:
		m.ClearCityID()
		return nil
	case subscribepause.FieldStoreID:
		m.ClearStoreID()
		return nil
	case subscribepause.FieldEndStoreID:
		m.ClearEndStoreID()
		return nil
	case subscribepause.FieldCabinetID:
		m.ClearCabinetID()
		return nil
	case subscribepause.FieldEndCabinetID:
		m.ClearEndCabinetID()
		return nil
	case subscribepause.FieldEndAt:
		m.ClearEndAt()
		return nil
	case subscribepause.FieldDays:
		m.ClearDays()
		return nil
	case subscribepause.FieldEndEmployeeID:
		m.ClearEndEmployeeID()
		return nil
	case subscribepause.FieldEndModifier:
		m.ClearEndModifier()
		return nil
	}
	return fmt.Errorf("unknown SubscribePause nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscribePauseMutation) ResetField(name string) error {
	switch name {
	case subscribepause.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscribepause.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscribepause.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case subscribepause.FieldCreator:
		m.ResetCreator()
		return nil
	case subscribepause.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case subscribepause.FieldRemark:
		m.ResetRemark()
		return nil
	case subscribepause.FieldRiderID:
		m.ResetRiderID()
		return nil
	case subscribepause.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case subscribepause.FieldCityID:
		m.ResetCityID()
		return nil
	case subscribepause.FieldStoreID:
		m.ResetStoreID()
		return nil
	case subscribepause.FieldEndStoreID:
		m.ResetEndStoreID()
		return nil
	case subscribepause.FieldCabinetID:
		m.ResetCabinetID()
		return nil
	case subscribepause.FieldEndCabinetID:
		m.ResetEndCabinetID()
		return nil
	case subscribepause.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case subscribepause.FieldStartAt:
		m.ResetStartAt()
		return nil
	case subscribepause.FieldEndAt:
		m.ResetEndAt()
		return nil
	case subscribepause.FieldDays:
		m.ResetDays()
		return nil
	case subscribepause.FieldEndEmployeeID:
		m.ResetEndEmployeeID()
		return nil
	case subscribepause.FieldOverdue:
		m.ResetOverdue()
		return nil
	case subscribepause.FieldEndModifier:
		m.ResetEndModifier()
		return nil
	}
	return fmt.Errorf("unknown SubscribePause field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscribePauseMutation) AddedEdges() []string {
	edges := make([]string, 0, 9)
	if m.rider != nil {
		edges = append(edges, subscribepause.EdgeRider)
	}
	if m.employee != nil {
		edges = append(edges, subscribepause.EdgeEmployee)
	}
	if m.city != nil {
		edges = append(edges, subscribepause.EdgeCity)
	}
	if m.store != nil {
		edges = append(edges, subscribepause.EdgeStore)
	}
	if m.endStore != nil {
		edges = append(edges, subscribepause.EdgeEndStore)
	}
	if m.cabinet != nil {
		edges = append(edges, subscribepause.EdgeCabinet)
	}
	if m.endCabinet != nil {
		edges = append(edges, subscribepause.EdgeEndCabinet)
	}
	if m.subscribe != nil {
		edges = append(edges, subscribepause.EdgeSubscribe)
	}
	if m.end_employee != nil {
		edges = append(edges, subscribepause.EdgeEndEmployee)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscribePauseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscribepause.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case subscribepause.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case subscribepause.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case subscribepause.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case subscribepause.EdgeEndStore:
		if id := m.endStore; id != nil {
			return []ent.Value{*id}
		}
	case subscribepause.EdgeCabinet:
		if id := m.cabinet; id != nil {
			return []ent.Value{*id}
		}
	case subscribepause.EdgeEndCabinet:
		if id := m.endCabinet; id != nil {
			return []ent.Value{*id}
		}
	case subscribepause.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	case subscribepause.EdgeEndEmployee:
		if id := m.end_employee; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscribePauseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 9)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscribePauseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscribePauseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 9)
	if m.clearedrider {
		edges = append(edges, subscribepause.EdgeRider)
	}
	if m.clearedemployee {
		edges = append(edges, subscribepause.EdgeEmployee)
	}
	if m.clearedcity {
		edges = append(edges, subscribepause.EdgeCity)
	}
	if m.clearedstore {
		edges = append(edges, subscribepause.EdgeStore)
	}
	if m.clearedendStore {
		edges = append(edges, subscribepause.EdgeEndStore)
	}
	if m.clearedcabinet {
		edges = append(edges, subscribepause.EdgeCabinet)
	}
	if m.clearedendCabinet {
		edges = append(edges, subscribepause.EdgeEndCabinet)
	}
	if m.clearedsubscribe {
		edges = append(edges, subscribepause.EdgeSubscribe)
	}
	if m.clearedend_employee {
		edges = append(edges, subscribepause.EdgeEndEmployee)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscribePauseMutation) EdgeCleared(name string) bool {
	switch name {
	case subscribepause.EdgeRider:
		return m.clearedrider
	case subscribepause.EdgeEmployee:
		return m.clearedemployee
	case subscribepause.EdgeCity:
		return m.clearedcity
	case subscribepause.EdgeStore:
		return m.clearedstore
	case subscribepause.EdgeEndStore:
		return m.clearedendStore
	case subscribepause.EdgeCabinet:
		return m.clearedcabinet
	case subscribepause.EdgeEndCabinet:
		return m.clearedendCabinet
	case subscribepause.EdgeSubscribe:
		return m.clearedsubscribe
	case subscribepause.EdgeEndEmployee:
		return m.clearedend_employee
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscribePauseMutation) ClearEdge(name string) error {
	switch name {
	case subscribepause.EdgeRider:
		m.ClearRider()
		return nil
	case subscribepause.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case subscribepause.EdgeCity:
		m.ClearCity()
		return nil
	case subscribepause.EdgeStore:
		m.ClearStore()
		return nil
	case subscribepause.EdgeEndStore:
		m.ClearEndStore()
		return nil
	case subscribepause.EdgeCabinet:
		m.ClearCabinet()
		return nil
	case subscribepause.EdgeEndCabinet:
		m.ClearEndCabinet()
		return nil
	case subscribepause.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	case subscribepause.EdgeEndEmployee:
		m.ClearEndEmployee()
		return nil
	}
	return fmt.Errorf("unknown SubscribePause unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscribePauseMutation) ResetEdge(name string) error {
	switch name {
	case subscribepause.EdgeRider:
		m.ResetRider()
		return nil
	case subscribepause.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case subscribepause.EdgeCity:
		m.ResetCity()
		return nil
	case subscribepause.EdgeStore:
		m.ResetStore()
		return nil
	case subscribepause.EdgeEndStore:
		m.ResetEndStore()
		return nil
	case subscribepause.EdgeCabinet:
		m.ResetCabinet()
		return nil
	case subscribepause.EdgeEndCabinet:
		m.ResetEndCabinet()
		return nil
	case subscribepause.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	case subscribepause.EdgeEndEmployee:
		m.ResetEndEmployee()
		return nil
	}
	return fmt.Errorf("unknown SubscribePause edge %s", name)
}

