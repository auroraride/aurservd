// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/stock"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// StockMutation represents an operation that mutates the Stock nodes in the graph.
type StockMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	creator          **model.Modifier
	last_modifier    **model.Modifier
	remark           *string
	sn               *string
	_type            *uint8
	add_type         *int8
	name             *string
	model            *string
	num              *int
	addnum           *int
	material         *stock.Material
	ebike_sn         *string
	clearedFields    map[string]struct{}
	city             *uint64
	clearedcity      bool
	subscribe        *uint64
	clearedsubscribe bool
	ebike            *uint64
	clearedebike     bool
	store            *uint64
	clearedstore     bool
	cabinet          *uint64
	clearedcabinet   bool
	rider            *uint64
	clearedrider     bool
	employee         *uint64
	clearedemployee  bool
	spouse           *uint64
	clearedspouse    bool
	done             bool
	oldValue         func(context.Context) (*Stock, error)
	predicates       []predicate.Stock
}

var _ ent.Mutation = (*StockMutation)(nil)

// stockOption allows management of the mutation configuration using functional options.
type stockOption func(*StockMutation)

// newStockMutation creates new mutation for the Stock entity.
func newStockMutation(c config, op Op, opts ...stockOption) *StockMutation {
	m := &StockMutation{
		config:        c,
		op:            op,
		typ:           TypeStock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStockID sets the ID field of the mutation.
func withStockID(id uint64) stockOption {
	return func(m *StockMutation) {
		var (
			err   error
			once  sync.Once
			value *Stock
		)
		m.oldValue = func(ctx context.Context) (*Stock, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Stock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStock sets the old Stock of the mutation.
func withStock(node *Stock) stockOption {
	return func(m *StockMutation) {
		m.oldValue = func(context.Context) (*Stock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StockMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StockMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Stock.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StockMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StockMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StockMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StockMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StockMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StockMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *StockMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *StockMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *StockMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[stock.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *StockMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[stock.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *StockMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, stock.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *StockMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *StockMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *StockMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[stock.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *StockMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[stock.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *StockMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, stock.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *StockMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *StockMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *StockMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[stock.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *StockMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[stock.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *StockMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, stock.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *StockMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *StockMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *StockMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[stock.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *StockMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[stock.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *StockMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, stock.FieldRemark)
}

// SetCityID sets the "city_id" field.
func (m *StockMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *StockMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldCityID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ClearCityID clears the value of the "city_id" field.
func (m *StockMutation) ClearCityID() {
	m.city = nil
	m.clearedFields[stock.FieldCityID] = struct{}{}
}

// CityIDCleared returns if the "city_id" field was cleared in this mutation.
func (m *StockMutation) CityIDCleared() bool {
	_, ok := m.clearedFields[stock.FieldCityID]
	return ok
}

// ResetCityID resets all changes to the "city_id" field.
func (m *StockMutation) ResetCityID() {
	m.city = nil
	delete(m.clearedFields, stock.FieldCityID)
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *StockMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *StockMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldSubscribeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (m *StockMutation) ClearSubscribeID() {
	m.subscribe = nil
	m.clearedFields[stock.FieldSubscribeID] = struct{}{}
}

// SubscribeIDCleared returns if the "subscribe_id" field was cleared in this mutation.
func (m *StockMutation) SubscribeIDCleared() bool {
	_, ok := m.clearedFields[stock.FieldSubscribeID]
	return ok
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *StockMutation) ResetSubscribeID() {
	m.subscribe = nil
	delete(m.clearedFields, stock.FieldSubscribeID)
}

// SetEbikeID sets the "ebike_id" field.
func (m *StockMutation) SetEbikeID(u uint64) {
	m.ebike = &u
}

// EbikeID returns the value of the "ebike_id" field in the mutation.
func (m *StockMutation) EbikeID() (r uint64, exists bool) {
	v := m.ebike
	if v == nil {
		return
	}
	return *v, true
}

// OldEbikeID returns the old "ebike_id" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldEbikeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEbikeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEbikeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEbikeID: %w", err)
	}
	return oldValue.EbikeID, nil
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (m *StockMutation) ClearEbikeID() {
	m.ebike = nil
	m.clearedFields[stock.FieldEbikeID] = struct{}{}
}

// EbikeIDCleared returns if the "ebike_id" field was cleared in this mutation.
func (m *StockMutation) EbikeIDCleared() bool {
	_, ok := m.clearedFields[stock.FieldEbikeID]
	return ok
}

// ResetEbikeID resets all changes to the "ebike_id" field.
func (m *StockMutation) ResetEbikeID() {
	m.ebike = nil
	delete(m.clearedFields, stock.FieldEbikeID)
}

// SetSn sets the "sn" field.
func (m *StockMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *StockMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *StockMutation) ResetSn() {
	m.sn = nil
}

// SetType sets the "type" field.
func (m *StockMutation) SetType(u uint8) {
	m._type = &u
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *StockMutation) GetType() (r uint8, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds u to the "type" field.
func (m *StockMutation) AddType(u int8) {
	if m.add_type != nil {
		*m.add_type += u
	} else {
		m.add_type = &u
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *StockMutation) AddedType() (r int8, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *StockMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetStoreID sets the "store_id" field.
func (m *StockMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *StockMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldStoreID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ClearStoreID clears the value of the "store_id" field.
func (m *StockMutation) ClearStoreID() {
	m.store = nil
	m.clearedFields[stock.FieldStoreID] = struct{}{}
}

// StoreIDCleared returns if the "store_id" field was cleared in this mutation.
func (m *StockMutation) StoreIDCleared() bool {
	_, ok := m.clearedFields[stock.FieldStoreID]
	return ok
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *StockMutation) ResetStoreID() {
	m.store = nil
	delete(m.clearedFields, stock.FieldStoreID)
}

// SetCabinetID sets the "cabinet_id" field.
func (m *StockMutation) SetCabinetID(u uint64) {
	m.cabinet = &u
}

// CabinetID returns the value of the "cabinet_id" field in the mutation.
func (m *StockMutation) CabinetID() (r uint64, exists bool) {
	v := m.cabinet
	if v == nil {
		return
	}
	return *v, true
}

// OldCabinetID returns the old "cabinet_id" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldCabinetID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCabinetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCabinetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCabinetID: %w", err)
	}
	return oldValue.CabinetID, nil
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (m *StockMutation) ClearCabinetID() {
	m.cabinet = nil
	m.clearedFields[stock.FieldCabinetID] = struct{}{}
}

// CabinetIDCleared returns if the "cabinet_id" field was cleared in this mutation.
func (m *StockMutation) CabinetIDCleared() bool {
	_, ok := m.clearedFields[stock.FieldCabinetID]
	return ok
}

// ResetCabinetID resets all changes to the "cabinet_id" field.
func (m *StockMutation) ResetCabinetID() {
	m.cabinet = nil
	delete(m.clearedFields, stock.FieldCabinetID)
}

// SetRiderID sets the "rider_id" field.
func (m *StockMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *StockMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldRiderID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ClearRiderID clears the value of the "rider_id" field.
func (m *StockMutation) ClearRiderID() {
	m.rider = nil
	m.clearedFields[stock.FieldRiderID] = struct{}{}
}

// RiderIDCleared returns if the "rider_id" field was cleared in this mutation.
func (m *StockMutation) RiderIDCleared() bool {
	_, ok := m.clearedFields[stock.FieldRiderID]
	return ok
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *StockMutation) ResetRiderID() {
	m.rider = nil
	delete(m.clearedFields, stock.FieldRiderID)
}

// SetEmployeeID sets the "employee_id" field.
func (m *StockMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *StockMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (m *StockMutation) ClearEmployeeID() {
	m.employee = nil
	m.clearedFields[stock.FieldEmployeeID] = struct{}{}
}

// EmployeeIDCleared returns if the "employee_id" field was cleared in this mutation.
func (m *StockMutation) EmployeeIDCleared() bool {
	_, ok := m.clearedFields[stock.FieldEmployeeID]
	return ok
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *StockMutation) ResetEmployeeID() {
	m.employee = nil
	delete(m.clearedFields, stock.FieldEmployeeID)
}

// SetName sets the "name" field.
func (m *StockMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StockMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StockMutation) ResetName() {
	m.name = nil
}

// SetModel sets the "model" field.
func (m *StockMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *StockMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldModel(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ClearModel clears the value of the "model" field.
func (m *StockMutation) ClearModel() {
	m.model = nil
	m.clearedFields[stock.FieldModel] = struct{}{}
}

// ModelCleared returns if the "model" field was cleared in this mutation.
func (m *StockMutation) ModelCleared() bool {
	_, ok := m.clearedFields[stock.FieldModel]
	return ok
}

// ResetModel resets all changes to the "model" field.
func (m *StockMutation) ResetModel() {
	m.model = nil
	delete(m.clearedFields, stock.FieldModel)
}

// SetNum sets the "num" field.
func (m *StockMutation) SetNum(i int) {
	m.num = &i
	m.addnum = nil
}

// Num returns the value of the "num" field in the mutation.
func (m *StockMutation) Num() (r int, exists bool) {
	v := m.num
	if v == nil {
		return
	}
	return *v, true
}

// OldNum returns the old "num" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNum: %w", err)
	}
	return oldValue.Num, nil
}

// AddNum adds i to the "num" field.
func (m *StockMutation) AddNum(i int) {
	if m.addnum != nil {
		*m.addnum += i
	} else {
		m.addnum = &i
	}
}

// AddedNum returns the value that was added to the "num" field in this mutation.
func (m *StockMutation) AddedNum() (r int, exists bool) {
	v := m.addnum
	if v == nil {
		return
	}
	return *v, true
}

// ResetNum resets all changes to the "num" field.
func (m *StockMutation) ResetNum() {
	m.num = nil
	m.addnum = nil
}

// SetMaterial sets the "material" field.
func (m *StockMutation) SetMaterial(s stock.Material) {
	m.material = &s
}

// Material returns the value of the "material" field in the mutation.
func (m *StockMutation) Material() (r stock.Material, exists bool) {
	v := m.material
	if v == nil {
		return
	}
	return *v, true
}

// OldMaterial returns the old "material" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldMaterial(ctx context.Context) (v stock.Material, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaterial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaterial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaterial: %w", err)
	}
	return oldValue.Material, nil
}

// ResetMaterial resets all changes to the "material" field.
func (m *StockMutation) ResetMaterial() {
	m.material = nil
}

// SetEbikeSn sets the "ebike_sn" field.
func (m *StockMutation) SetEbikeSn(s string) {
	m.ebike_sn = &s
}

// EbikeSn returns the value of the "ebike_sn" field in the mutation.
func (m *StockMutation) EbikeSn() (r string, exists bool) {
	v := m.ebike_sn
	if v == nil {
		return
	}
	return *v, true
}

// OldEbikeSn returns the old "ebike_sn" field's value of the Stock entity.
// If the Stock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockMutation) OldEbikeSn(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEbikeSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEbikeSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEbikeSn: %w", err)
	}
	return oldValue.EbikeSn, nil
}

// ClearEbikeSn clears the value of the "ebike_sn" field.
func (m *StockMutation) ClearEbikeSn() {
	m.ebike_sn = nil
	m.clearedFields[stock.FieldEbikeSn] = struct{}{}
}

// EbikeSnCleared returns if the "ebike_sn" field was cleared in this mutation.
func (m *StockMutation) EbikeSnCleared() bool {
	_, ok := m.clearedFields[stock.FieldEbikeSn]
	return ok
}

// ResetEbikeSn resets all changes to the "ebike_sn" field.
func (m *StockMutation) ResetEbikeSn() {
	m.ebike_sn = nil
	delete(m.clearedFields, stock.FieldEbikeSn)
}

// ClearCity clears the "city" edge to the City entity.
func (m *StockMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *StockMutation) CityCleared() bool {
	return m.CityIDCleared() || m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *StockMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *StockMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *StockMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *StockMutation) SubscribeCleared() bool {
	return m.SubscribeIDCleared() || m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *StockMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *StockMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (m *StockMutation) ClearEbike() {
	m.clearedebike = true
}

// EbikeCleared reports if the "ebike" edge to the Ebike entity was cleared.
func (m *StockMutation) EbikeCleared() bool {
	return m.EbikeIDCleared() || m.clearedebike
}

// EbikeIDs returns the "ebike" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EbikeID instead. It exists only for internal usage by the builders.
func (m *StockMutation) EbikeIDs() (ids []uint64) {
	if id := m.ebike; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEbike resets all changes to the "ebike" edge.
func (m *StockMutation) ResetEbike() {
	m.ebike = nil
	m.clearedebike = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *StockMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *StockMutation) StoreCleared() bool {
	return m.StoreIDCleared() || m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *StockMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *StockMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (m *StockMutation) ClearCabinet() {
	m.clearedcabinet = true
}

// CabinetCleared reports if the "cabinet" edge to the Cabinet entity was cleared.
func (m *StockMutation) CabinetCleared() bool {
	return m.CabinetIDCleared() || m.clearedcabinet
}

// CabinetIDs returns the "cabinet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CabinetID instead. It exists only for internal usage by the builders.
func (m *StockMutation) CabinetIDs() (ids []uint64) {
	if id := m.cabinet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCabinet resets all changes to the "cabinet" edge.
func (m *StockMutation) ResetCabinet() {
	m.cabinet = nil
	m.clearedcabinet = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *StockMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *StockMutation) RiderCleared() bool {
	return m.RiderIDCleared() || m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *StockMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *StockMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *StockMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *StockMutation) EmployeeCleared() bool {
	return m.EmployeeIDCleared() || m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *StockMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *StockMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// SetSpouseID sets the "spouse" edge to the Stock entity by id.
func (m *StockMutation) SetSpouseID(id uint64) {
	m.spouse = &id
}

// ClearSpouse clears the "spouse" edge to the Stock entity.
func (m *StockMutation) ClearSpouse() {
	m.clearedspouse = true
}

// SpouseCleared reports if the "spouse" edge to the Stock entity was cleared.
func (m *StockMutation) SpouseCleared() bool {
	return m.clearedspouse
}

// SpouseID returns the "spouse" edge ID in the mutation.
func (m *StockMutation) SpouseID() (id uint64, exists bool) {
	if m.spouse != nil {
		return *m.spouse, true
	}
	return
}

// SpouseIDs returns the "spouse" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SpouseID instead. It exists only for internal usage by the builders.
func (m *StockMutation) SpouseIDs() (ids []uint64) {
	if id := m.spouse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSpouse resets all changes to the "spouse" edge.
func (m *StockMutation) ResetSpouse() {
	m.spouse = nil
	m.clearedspouse = false
}

// Where appends a list predicates to the StockMutation builder.
func (m *StockMutation) Where(ps ...predicate.Stock) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StockMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Stock).
func (m *StockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StockMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.created_at != nil {
		fields = append(fields, stock.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, stock.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, stock.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, stock.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, stock.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, stock.FieldRemark)
	}
	if m.city != nil {
		fields = append(fields, stock.FieldCityID)
	}
	if m.subscribe != nil {
		fields = append(fields, stock.FieldSubscribeID)
	}
	if m.ebike != nil {
		fields = append(fields, stock.FieldEbikeID)
	}
	if m.sn != nil {
		fields = append(fields, stock.FieldSn)
	}
	if m._type != nil {
		fields = append(fields, stock.FieldType)
	}
	if m.store != nil {
		fields = append(fields, stock.FieldStoreID)
	}
	if m.cabinet != nil {
		fields = append(fields, stock.FieldCabinetID)
	}
	if m.rider != nil {
		fields = append(fields, stock.FieldRiderID)
	}
	if m.employee != nil {
		fields = append(fields, stock.FieldEmployeeID)
	}
	if m.name != nil {
		fields = append(fields, stock.FieldName)
	}
	if m.model != nil {
		fields = append(fields, stock.FieldModel)
	}
	if m.num != nil {
		fields = append(fields, stock.FieldNum)
	}
	if m.material != nil {
		fields = append(fields, stock.FieldMaterial)
	}
	if m.ebike_sn != nil {
		fields = append(fields, stock.FieldEbikeSn)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stock.FieldCreatedAt:
		return m.CreatedAt()
	case stock.FieldUpdatedAt:
		return m.UpdatedAt()
	case stock.FieldDeletedAt:
		return m.DeletedAt()
	case stock.FieldCreator:
		return m.Creator()
	case stock.FieldLastModifier:
		return m.LastModifier()
	case stock.FieldRemark:
		return m.Remark()
	case stock.FieldCityID:
		return m.CityID()
	case stock.FieldSubscribeID:
		return m.SubscribeID()
	case stock.FieldEbikeID:
		return m.EbikeID()
	case stock.FieldSn:
		return m.Sn()
	case stock.FieldType:
		return m.GetType()
	case stock.FieldStoreID:
		return m.StoreID()
	case stock.FieldCabinetID:
		return m.CabinetID()
	case stock.FieldRiderID:
		return m.RiderID()
	case stock.FieldEmployeeID:
		return m.EmployeeID()
	case stock.FieldName:
		return m.Name()
	case stock.FieldModel:
		return m.Model()
	case stock.FieldNum:
		return m.Num()
	case stock.FieldMaterial:
		return m.Material()
	case stock.FieldEbikeSn:
		return m.EbikeSn()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stock.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case stock.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case stock.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case stock.FieldCreator:
		return m.OldCreator(ctx)
	case stock.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case stock.FieldRemark:
		return m.OldRemark(ctx)
	case stock.FieldCityID:
		return m.OldCityID(ctx)
	case stock.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case stock.FieldEbikeID:
		return m.OldEbikeID(ctx)
	case stock.FieldSn:
		return m.OldSn(ctx)
	case stock.FieldType:
		return m.OldType(ctx)
	case stock.FieldStoreID:
		return m.OldStoreID(ctx)
	case stock.FieldCabinetID:
		return m.OldCabinetID(ctx)
	case stock.FieldRiderID:
		return m.OldRiderID(ctx)
	case stock.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case stock.FieldName:
		return m.OldName(ctx)
	case stock.FieldModel:
		return m.OldModel(ctx)
	case stock.FieldNum:
		return m.OldNum(ctx)
	case stock.FieldMaterial:
		return m.OldMaterial(ctx)
	case stock.FieldEbikeSn:
		return m.OldEbikeSn(ctx)
	}
	return nil, fmt.Errorf("unknown Stock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stock.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case stock.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case stock.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case stock.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case stock.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case stock.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case stock.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case stock.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case stock.FieldEbikeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEbikeID(v)
		return nil
	case stock.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case stock.FieldType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case stock.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case stock.FieldCabinetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCabinetID(v)
		return nil
	case stock.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case stock.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case stock.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case stock.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case stock.FieldNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNum(v)
		return nil
	case stock.FieldMaterial:
		v, ok := value.(stock.Material)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaterial(v)
		return nil
	case stock.FieldEbikeSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEbikeSn(v)
		return nil
	}
	return fmt.Errorf("unknown Stock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StockMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, stock.FieldType)
	}
	if m.addnum != nil {
		fields = append(fields, stock.FieldNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StockMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case stock.FieldType:
		return m.AddedType()
	case stock.FieldNum:
		return m.AddedNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockMutation) AddField(name string, value ent.Value) error {
	switch name {
	case stock.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case stock.FieldNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNum(v)
		return nil
	}
	return fmt.Errorf("unknown Stock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StockMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(stock.FieldDeletedAt) {
		fields = append(fields, stock.FieldDeletedAt)
	}
	if m.FieldCleared(stock.FieldCreator) {
		fields = append(fields, stock.FieldCreator)
	}
	if m.FieldCleared(stock.FieldLastModifier) {
		fields = append(fields, stock.FieldLastModifier)
	}
	if m.FieldCleared(stock.FieldRemark) {
		fields = append(fields, stock.FieldRemark)
	}
	if m.FieldCleared(stock.FieldCityID) {
		fields = append(fields, stock.FieldCityID)
	}
	if m.FieldCleared(stock.FieldSubscribeID) {
		fields = append(fields, stock.FieldSubscribeID)
	}
	if m.FieldCleared(stock.FieldEbikeID) {
		fields = append(fields, stock.FieldEbikeID)
	}
	if m.FieldCleared(stock.FieldStoreID) {
		fields = append(fields, stock.FieldStoreID)
	}
	if m.FieldCleared(stock.FieldCabinetID) {
		fields = append(fields, stock.FieldCabinetID)
	}
	if m.FieldCleared(stock.FieldRiderID) {
		fields = append(fields, stock.FieldRiderID)
	}
	if m.FieldCleared(stock.FieldEmployeeID) {
		fields = append(fields, stock.FieldEmployeeID)
	}
	if m.FieldCleared(stock.FieldModel) {
		fields = append(fields, stock.FieldModel)
	}
	if m.FieldCleared(stock.FieldEbikeSn) {
		fields = append(fields, stock.FieldEbikeSn)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StockMutation) ClearField(name string) error {
	switch name {
	case stock.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case stock.FieldCreator:
		m.ClearCreator()
		return nil
	case stock.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case stock.FieldRemark:
		m.ClearRemark()
		return nil
	case stock.FieldCityID:
		m.ClearCityID()
		return nil
	case stock.FieldSubscribeID:
		m.ClearSubscribeID()
		return nil
	case stock.FieldEbikeID:
		m.ClearEbikeID()
		return nil
	case stock.FieldStoreID:
		m.ClearStoreID()
		return nil
	case stock.FieldCabinetID:
		m.ClearCabinetID()
		return nil
	case stock.FieldRiderID:
		m.ClearRiderID()
		return nil
	case stock.FieldEmployeeID:
		m.ClearEmployeeID()
		return nil
	case stock.FieldModel:
		m.ClearModel()
		return nil
	case stock.FieldEbikeSn:
		m.ClearEbikeSn()
		return nil
	}
	return fmt.Errorf("unknown Stock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StockMutation) ResetField(name string) error {
	switch name {
	case stock.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case stock.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case stock.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case stock.FieldCreator:
		m.ResetCreator()
		return nil
	case stock.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case stock.FieldRemark:
		m.ResetRemark()
		return nil
	case stock.FieldCityID:
		m.ResetCityID()
		return nil
	case stock.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case stock.FieldEbikeID:
		m.ResetEbikeID()
		return nil
	case stock.FieldSn:
		m.ResetSn()
		return nil
	case stock.FieldType:
		m.ResetType()
		return nil
	case stock.FieldStoreID:
		m.ResetStoreID()
		return nil
	case stock.FieldCabinetID:
		m.ResetCabinetID()
		return nil
	case stock.FieldRiderID:
		m.ResetRiderID()
		return nil
	case stock.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case stock.FieldName:
		m.ResetName()
		return nil
	case stock.FieldModel:
		m.ResetModel()
		return nil
	case stock.FieldNum:
		m.ResetNum()
		return nil
	case stock.FieldMaterial:
		m.ResetMaterial()
		return nil
	case stock.FieldEbikeSn:
		m.ResetEbikeSn()
		return nil
	}
	return fmt.Errorf("unknown Stock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StockMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.city != nil {
		edges = append(edges, stock.EdgeCity)
	}
	if m.subscribe != nil {
		edges = append(edges, stock.EdgeSubscribe)
	}
	if m.ebike != nil {
		edges = append(edges, stock.EdgeEbike)
	}
	if m.store != nil {
		edges = append(edges, stock.EdgeStore)
	}
	if m.cabinet != nil {
		edges = append(edges, stock.EdgeCabinet)
	}
	if m.rider != nil {
		edges = append(edges, stock.EdgeRider)
	}
	if m.employee != nil {
		edges = append(edges, stock.EdgeEmployee)
	}
	if m.spouse != nil {
		edges = append(edges, stock.EdgeSpouse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StockMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case stock.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case stock.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	case stock.EdgeEbike:
		if id := m.ebike; id != nil {
			return []ent.Value{*id}
		}
	case stock.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case stock.EdgeCabinet:
		if id := m.cabinet; id != nil {
			return []ent.Value{*id}
		}
	case stock.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case stock.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case stock.EdgeSpouse:
		if id := m.spouse; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StockMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedcity {
		edges = append(edges, stock.EdgeCity)
	}
	if m.clearedsubscribe {
		edges = append(edges, stock.EdgeSubscribe)
	}
	if m.clearedebike {
		edges = append(edges, stock.EdgeEbike)
	}
	if m.clearedstore {
		edges = append(edges, stock.EdgeStore)
	}
	if m.clearedcabinet {
		edges = append(edges, stock.EdgeCabinet)
	}
	if m.clearedrider {
		edges = append(edges, stock.EdgeRider)
	}
	if m.clearedemployee {
		edges = append(edges, stock.EdgeEmployee)
	}
	if m.clearedspouse {
		edges = append(edges, stock.EdgeSpouse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StockMutation) EdgeCleared(name string) bool {
	switch name {
	case stock.EdgeCity:
		return m.clearedcity
	case stock.EdgeSubscribe:
		return m.clearedsubscribe
	case stock.EdgeEbike:
		return m.clearedebike
	case stock.EdgeStore:
		return m.clearedstore
	case stock.EdgeCabinet:
		return m.clearedcabinet
	case stock.EdgeRider:
		return m.clearedrider
	case stock.EdgeEmployee:
		return m.clearedemployee
	case stock.EdgeSpouse:
		return m.clearedspouse
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StockMutation) ClearEdge(name string) error {
	switch name {
	case stock.EdgeCity:
		m.ClearCity()
		return nil
	case stock.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	case stock.EdgeEbike:
		m.ClearEbike()
		return nil
	case stock.EdgeStore:
		m.ClearStore()
		return nil
	case stock.EdgeCabinet:
		m.ClearCabinet()
		return nil
	case stock.EdgeRider:
		m.ClearRider()
		return nil
	case stock.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case stock.EdgeSpouse:
		m.ClearSpouse()
		return nil
	}
	return fmt.Errorf("unknown Stock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StockMutation) ResetEdge(name string) error {
	switch name {
	case stock.EdgeCity:
		m.ResetCity()
		return nil
	case stock.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	case stock.EdgeEbike:
		m.ResetEbike()
		return nil
	case stock.EdgeStore:
		m.ResetStore()
		return nil
	case stock.EdgeCabinet:
		m.ResetCabinet()
		return nil
	case stock.EdgeRider:
		m.ResetRider()
		return nil
	case stock.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case stock.EdgeSpouse:
		m.ResetSpouse()
		return nil
	}
	return fmt.Errorf("unknown Stock edge %s", name)
}

