// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks     []Hook
	mutation  *PlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlanUpdate) SetUpdatedAt(t time.Time) *PlanUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PlanUpdate) SetDeletedAt(t time.Time) *PlanUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDeletedAt(t *time.Time) *PlanUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PlanUpdate) ClearDeletedAt() *PlanUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetLastModifier sets the "last_modifier" field.
func (pu *PlanUpdate) SetLastModifier(m *model.Modifier) *PlanUpdate {
	pu.mutation.SetLastModifier(m)
	return pu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pu *PlanUpdate) ClearLastModifier() *PlanUpdate {
	pu.mutation.ClearLastModifier()
	return pu
}

// SetRemark sets the "remark" field.
func (pu *PlanUpdate) SetRemark(s string) *PlanUpdate {
	pu.mutation.SetRemark(s)
	return pu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableRemark(s *string) *PlanUpdate {
	if s != nil {
		pu.SetRemark(*s)
	}
	return pu
}

// ClearRemark clears the value of the "remark" field.
func (pu *PlanUpdate) ClearRemark() *PlanUpdate {
	pu.mutation.ClearRemark()
	return pu
}

// SetEnable sets the "enable" field.
func (pu *PlanUpdate) SetEnable(b bool) *PlanUpdate {
	pu.mutation.SetEnable(b)
	return pu
}

// SetName sets the "name" field.
func (pu *PlanUpdate) SetName(s string) *PlanUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetStart sets the "start" field.
func (pu *PlanUpdate) SetStart(t time.Time) *PlanUpdate {
	pu.mutation.SetStart(t)
	return pu
}

// SetEnd sets the "end" field.
func (pu *PlanUpdate) SetEnd(t time.Time) *PlanUpdate {
	pu.mutation.SetEnd(t)
	return pu
}

// SetPrice sets the "price" field.
func (pu *PlanUpdate) SetPrice(f float64) *PlanUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *PlanUpdate) AddPrice(f float64) *PlanUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetDays sets the "days" field.
func (pu *PlanUpdate) SetDays(u uint) *PlanUpdate {
	pu.mutation.ResetDays()
	pu.mutation.SetDays(u)
	return pu
}

// AddDays adds u to the "days" field.
func (pu *PlanUpdate) AddDays(u int) *PlanUpdate {
	pu.mutation.AddDays(u)
	return pu
}

// SetCommission sets the "commission" field.
func (pu *PlanUpdate) SetCommission(f float64) *PlanUpdate {
	pu.mutation.ResetCommission()
	pu.mutation.SetCommission(f)
	return pu
}

// AddCommission adds f to the "commission" field.
func (pu *PlanUpdate) AddCommission(f float64) *PlanUpdate {
	pu.mutation.AddCommission(f)
	return pu
}

// SetOriginal sets the "original" field.
func (pu *PlanUpdate) SetOriginal(f float64) *PlanUpdate {
	pu.mutation.ResetOriginal()
	pu.mutation.SetOriginal(f)
	return pu
}

// SetNillableOriginal sets the "original" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableOriginal(f *float64) *PlanUpdate {
	if f != nil {
		pu.SetOriginal(*f)
	}
	return pu
}

// AddOriginal adds f to the "original" field.
func (pu *PlanUpdate) AddOriginal(f float64) *PlanUpdate {
	pu.mutation.AddOriginal(f)
	return pu
}

// ClearOriginal clears the value of the "original" field.
func (pu *PlanUpdate) ClearOriginal() *PlanUpdate {
	pu.mutation.ClearOriginal()
	return pu
}

// SetDesc sets the "desc" field.
func (pu *PlanUpdate) SetDesc(s string) *PlanUpdate {
	pu.mutation.SetDesc(s)
	return pu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDesc(s *string) *PlanUpdate {
	if s != nil {
		pu.SetDesc(*s)
	}
	return pu
}

// ClearDesc clears the value of the "desc" field.
func (pu *PlanUpdate) ClearDesc() *PlanUpdate {
	pu.mutation.ClearDesc()
	return pu
}

// SetParentID sets the "parent_id" field.
func (pu *PlanUpdate) SetParentID(u uint64) *PlanUpdate {
	pu.mutation.SetParentID(u)
	return pu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableParentID(u *uint64) *PlanUpdate {
	if u != nil {
		pu.SetParentID(*u)
	}
	return pu
}

// ClearParentID clears the value of the "parent_id" field.
func (pu *PlanUpdate) ClearParentID() *PlanUpdate {
	pu.mutation.ClearParentID()
	return pu
}

// AddModelIDs adds the "models" edge to the BatteryModel entity by IDs.
func (pu *PlanUpdate) AddModelIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.AddModelIDs(ids...)
	return pu
}

// AddModels adds the "models" edges to the BatteryModel entity.
func (pu *PlanUpdate) AddModels(b ...*BatteryModel) *PlanUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddModelIDs(ids...)
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (pu *PlanUpdate) AddCityIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.AddCityIDs(ids...)
	return pu
}

// AddCities adds the "cities" edges to the City entity.
func (pu *PlanUpdate) AddCities(c ...*City) *PlanUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCityIDs(ids...)
}

// SetParent sets the "parent" edge to the Plan entity.
func (pu *PlanUpdate) SetParent(p *Plan) *PlanUpdate {
	return pu.SetParentID(p.ID)
}

// AddComplexIDs adds the "complexes" edge to the Plan entity by IDs.
func (pu *PlanUpdate) AddComplexIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.AddComplexIDs(ids...)
	return pu
}

// AddComplexes adds the "complexes" edges to the Plan entity.
func (pu *PlanUpdate) AddComplexes(p ...*Plan) *PlanUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddComplexIDs(ids...)
}

// AddCouponIDs adds the "coupons" edge to the Coupon entity by IDs.
func (pu *PlanUpdate) AddCouponIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.AddCouponIDs(ids...)
	return pu
}

// AddCoupons adds the "coupons" edges to the Coupon entity.
func (pu *PlanUpdate) AddCoupons(c ...*Coupon) *PlanUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCouponIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// ClearModels clears all "models" edges to the BatteryModel entity.
func (pu *PlanUpdate) ClearModels() *PlanUpdate {
	pu.mutation.ClearModels()
	return pu
}

// RemoveModelIDs removes the "models" edge to BatteryModel entities by IDs.
func (pu *PlanUpdate) RemoveModelIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.RemoveModelIDs(ids...)
	return pu
}

// RemoveModels removes "models" edges to BatteryModel entities.
func (pu *PlanUpdate) RemoveModels(b ...*BatteryModel) *PlanUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveModelIDs(ids...)
}

// ClearCities clears all "cities" edges to the City entity.
func (pu *PlanUpdate) ClearCities() *PlanUpdate {
	pu.mutation.ClearCities()
	return pu
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (pu *PlanUpdate) RemoveCityIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.RemoveCityIDs(ids...)
	return pu
}

// RemoveCities removes "cities" edges to City entities.
func (pu *PlanUpdate) RemoveCities(c ...*City) *PlanUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCityIDs(ids...)
}

// ClearParent clears the "parent" edge to the Plan entity.
func (pu *PlanUpdate) ClearParent() *PlanUpdate {
	pu.mutation.ClearParent()
	return pu
}

// ClearComplexes clears all "complexes" edges to the Plan entity.
func (pu *PlanUpdate) ClearComplexes() *PlanUpdate {
	pu.mutation.ClearComplexes()
	return pu
}

// RemoveComplexIDs removes the "complexes" edge to Plan entities by IDs.
func (pu *PlanUpdate) RemoveComplexIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.RemoveComplexIDs(ids...)
	return pu
}

// RemoveComplexes removes "complexes" edges to Plan entities.
func (pu *PlanUpdate) RemoveComplexes(p ...*Plan) *PlanUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveComplexIDs(ids...)
}

// ClearCoupons clears all "coupons" edges to the Coupon entity.
func (pu *PlanUpdate) ClearCoupons() *PlanUpdate {
	pu.mutation.ClearCoupons()
	return pu
}

// RemoveCouponIDs removes the "coupons" edge to Coupon entities by IDs.
func (pu *PlanUpdate) RemoveCouponIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.RemoveCouponIDs(ids...)
	return pu
}

// RemoveCoupons removes "coupons" edges to Coupon entities.
func (pu *PlanUpdate) RemoveCoupons(c ...*Coupon) *PlanUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCouponIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlanUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if plan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized plan.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := plan.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: plan.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldDeletedAt,
		})
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: plan.FieldDeletedAt,
		})
	}
	if pu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: plan.FieldCreator,
		})
	}
	if value, ok := pu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: plan.FieldLastModifier,
		})
	}
	if pu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: plan.FieldLastModifier,
		})
	}
	if value, ok := pu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plan.FieldRemark,
		})
	}
	if pu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: plan.FieldRemark,
		})
	}
	if value, ok := pu.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: plan.FieldEnable,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plan.FieldName,
		})
	}
	if value, ok := pu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldStart,
		})
	}
	if value, ok := pu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldEnd,
		})
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldPrice,
		})
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldPrice,
		})
	}
	if value, ok := pu.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: plan.FieldDays,
		})
	}
	if value, ok := pu.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: plan.FieldDays,
		})
	}
	if value, ok := pu.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldCommission,
		})
	}
	if value, ok := pu.mutation.AddedCommission(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldCommission,
		})
	}
	if value, ok := pu.mutation.Original(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldOriginal,
		})
	}
	if value, ok := pu.mutation.AddedOriginal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldOriginal,
		})
	}
	if pu.mutation.OriginalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: plan.FieldOriginal,
		})
	}
	if value, ok := pu.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plan.FieldDesc,
		})
	}
	if pu.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: plan.FieldDesc,
		})
	}
	if pu.mutation.ModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.ModelsTable,
			Columns: plan.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: batterymodel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedModelsIDs(); len(nodes) > 0 && !pu.mutation.ModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.ModelsTable,
			Columns: plan.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: batterymodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.ModelsTable,
			Columns: plan.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: batterymodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !pu.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ComplexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedComplexesIDs(); len(nodes) > 0 && !pu.mutation.ComplexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ComplexesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.CouponsTable,
			Columns: plan.CouponsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCouponsIDs(); len(nodes) > 0 && !pu.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.CouponsTable,
			Columns: plan.CouponsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CouponsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.CouponsTable,
			Columns: plan.CouponsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = pu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlanUpdateOne) SetUpdatedAt(t time.Time) *PlanUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PlanUpdateOne) SetDeletedAt(t time.Time) *PlanUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDeletedAt(t *time.Time) *PlanUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PlanUpdateOne) ClearDeletedAt() *PlanUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetLastModifier sets the "last_modifier" field.
func (puo *PlanUpdateOne) SetLastModifier(m *model.Modifier) *PlanUpdateOne {
	puo.mutation.SetLastModifier(m)
	return puo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (puo *PlanUpdateOne) ClearLastModifier() *PlanUpdateOne {
	puo.mutation.ClearLastModifier()
	return puo
}

// SetRemark sets the "remark" field.
func (puo *PlanUpdateOne) SetRemark(s string) *PlanUpdateOne {
	puo.mutation.SetRemark(s)
	return puo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableRemark(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetRemark(*s)
	}
	return puo
}

// ClearRemark clears the value of the "remark" field.
func (puo *PlanUpdateOne) ClearRemark() *PlanUpdateOne {
	puo.mutation.ClearRemark()
	return puo
}

// SetEnable sets the "enable" field.
func (puo *PlanUpdateOne) SetEnable(b bool) *PlanUpdateOne {
	puo.mutation.SetEnable(b)
	return puo
}

// SetName sets the "name" field.
func (puo *PlanUpdateOne) SetName(s string) *PlanUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetStart sets the "start" field.
func (puo *PlanUpdateOne) SetStart(t time.Time) *PlanUpdateOne {
	puo.mutation.SetStart(t)
	return puo
}

// SetEnd sets the "end" field.
func (puo *PlanUpdateOne) SetEnd(t time.Time) *PlanUpdateOne {
	puo.mutation.SetEnd(t)
	return puo
}

// SetPrice sets the "price" field.
func (puo *PlanUpdateOne) SetPrice(f float64) *PlanUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *PlanUpdateOne) AddPrice(f float64) *PlanUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetDays sets the "days" field.
func (puo *PlanUpdateOne) SetDays(u uint) *PlanUpdateOne {
	puo.mutation.ResetDays()
	puo.mutation.SetDays(u)
	return puo
}

// AddDays adds u to the "days" field.
func (puo *PlanUpdateOne) AddDays(u int) *PlanUpdateOne {
	puo.mutation.AddDays(u)
	return puo
}

// SetCommission sets the "commission" field.
func (puo *PlanUpdateOne) SetCommission(f float64) *PlanUpdateOne {
	puo.mutation.ResetCommission()
	puo.mutation.SetCommission(f)
	return puo
}

// AddCommission adds f to the "commission" field.
func (puo *PlanUpdateOne) AddCommission(f float64) *PlanUpdateOne {
	puo.mutation.AddCommission(f)
	return puo
}

// SetOriginal sets the "original" field.
func (puo *PlanUpdateOne) SetOriginal(f float64) *PlanUpdateOne {
	puo.mutation.ResetOriginal()
	puo.mutation.SetOriginal(f)
	return puo
}

// SetNillableOriginal sets the "original" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableOriginal(f *float64) *PlanUpdateOne {
	if f != nil {
		puo.SetOriginal(*f)
	}
	return puo
}

// AddOriginal adds f to the "original" field.
func (puo *PlanUpdateOne) AddOriginal(f float64) *PlanUpdateOne {
	puo.mutation.AddOriginal(f)
	return puo
}

// ClearOriginal clears the value of the "original" field.
func (puo *PlanUpdateOne) ClearOriginal() *PlanUpdateOne {
	puo.mutation.ClearOriginal()
	return puo
}

// SetDesc sets the "desc" field.
func (puo *PlanUpdateOne) SetDesc(s string) *PlanUpdateOne {
	puo.mutation.SetDesc(s)
	return puo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDesc(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetDesc(*s)
	}
	return puo
}

// ClearDesc clears the value of the "desc" field.
func (puo *PlanUpdateOne) ClearDesc() *PlanUpdateOne {
	puo.mutation.ClearDesc()
	return puo
}

// SetParentID sets the "parent_id" field.
func (puo *PlanUpdateOne) SetParentID(u uint64) *PlanUpdateOne {
	puo.mutation.SetParentID(u)
	return puo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableParentID(u *uint64) *PlanUpdateOne {
	if u != nil {
		puo.SetParentID(*u)
	}
	return puo
}

// ClearParentID clears the value of the "parent_id" field.
func (puo *PlanUpdateOne) ClearParentID() *PlanUpdateOne {
	puo.mutation.ClearParentID()
	return puo
}

// AddModelIDs adds the "models" edge to the BatteryModel entity by IDs.
func (puo *PlanUpdateOne) AddModelIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.AddModelIDs(ids...)
	return puo
}

// AddModels adds the "models" edges to the BatteryModel entity.
func (puo *PlanUpdateOne) AddModels(b ...*BatteryModel) *PlanUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddModelIDs(ids...)
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (puo *PlanUpdateOne) AddCityIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.AddCityIDs(ids...)
	return puo
}

// AddCities adds the "cities" edges to the City entity.
func (puo *PlanUpdateOne) AddCities(c ...*City) *PlanUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCityIDs(ids...)
}

// SetParent sets the "parent" edge to the Plan entity.
func (puo *PlanUpdateOne) SetParent(p *Plan) *PlanUpdateOne {
	return puo.SetParentID(p.ID)
}

// AddComplexIDs adds the "complexes" edge to the Plan entity by IDs.
func (puo *PlanUpdateOne) AddComplexIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.AddComplexIDs(ids...)
	return puo
}

// AddComplexes adds the "complexes" edges to the Plan entity.
func (puo *PlanUpdateOne) AddComplexes(p ...*Plan) *PlanUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddComplexIDs(ids...)
}

// AddCouponIDs adds the "coupons" edge to the Coupon entity by IDs.
func (puo *PlanUpdateOne) AddCouponIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.AddCouponIDs(ids...)
	return puo
}

// AddCoupons adds the "coupons" edges to the Coupon entity.
func (puo *PlanUpdateOne) AddCoupons(c ...*Coupon) *PlanUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCouponIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// ClearModels clears all "models" edges to the BatteryModel entity.
func (puo *PlanUpdateOne) ClearModels() *PlanUpdateOne {
	puo.mutation.ClearModels()
	return puo
}

// RemoveModelIDs removes the "models" edge to BatteryModel entities by IDs.
func (puo *PlanUpdateOne) RemoveModelIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.RemoveModelIDs(ids...)
	return puo
}

// RemoveModels removes "models" edges to BatteryModel entities.
func (puo *PlanUpdateOne) RemoveModels(b ...*BatteryModel) *PlanUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveModelIDs(ids...)
}

// ClearCities clears all "cities" edges to the City entity.
func (puo *PlanUpdateOne) ClearCities() *PlanUpdateOne {
	puo.mutation.ClearCities()
	return puo
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (puo *PlanUpdateOne) RemoveCityIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.RemoveCityIDs(ids...)
	return puo
}

// RemoveCities removes "cities" edges to City entities.
func (puo *PlanUpdateOne) RemoveCities(c ...*City) *PlanUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCityIDs(ids...)
}

// ClearParent clears the "parent" edge to the Plan entity.
func (puo *PlanUpdateOne) ClearParent() *PlanUpdateOne {
	puo.mutation.ClearParent()
	return puo
}

// ClearComplexes clears all "complexes" edges to the Plan entity.
func (puo *PlanUpdateOne) ClearComplexes() *PlanUpdateOne {
	puo.mutation.ClearComplexes()
	return puo
}

// RemoveComplexIDs removes the "complexes" edge to Plan entities by IDs.
func (puo *PlanUpdateOne) RemoveComplexIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.RemoveComplexIDs(ids...)
	return puo
}

// RemoveComplexes removes "complexes" edges to Plan entities.
func (puo *PlanUpdateOne) RemoveComplexes(p ...*Plan) *PlanUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveComplexIDs(ids...)
}

// ClearCoupons clears all "coupons" edges to the Coupon entity.
func (puo *PlanUpdateOne) ClearCoupons() *PlanUpdateOne {
	puo.mutation.ClearCoupons()
	return puo
}

// RemoveCouponIDs removes the "coupons" edge to Coupon entities by IDs.
func (puo *PlanUpdateOne) RemoveCouponIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.RemoveCouponIDs(ids...)
	return puo
}

// RemoveCoupons removes "coupons" edges to Coupon entities.
func (puo *PlanUpdateOne) RemoveCoupons(c ...*Coupon) *PlanUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCouponIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	var (
		err  error
		node *Plan
	)
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Plan)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlanMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlanUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if plan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized plan.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := plan.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   plan.Table,
			Columns: plan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: plan.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldDeletedAt,
		})
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: plan.FieldDeletedAt,
		})
	}
	if puo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: plan.FieldCreator,
		})
	}
	if value, ok := puo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: plan.FieldLastModifier,
		})
	}
	if puo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: plan.FieldLastModifier,
		})
	}
	if value, ok := puo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plan.FieldRemark,
		})
	}
	if puo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: plan.FieldRemark,
		})
	}
	if value, ok := puo.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: plan.FieldEnable,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plan.FieldName,
		})
	}
	if value, ok := puo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldStart,
		})
	}
	if value, ok := puo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: plan.FieldEnd,
		})
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldPrice,
		})
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldPrice,
		})
	}
	if value, ok := puo.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: plan.FieldDays,
		})
	}
	if value, ok := puo.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: plan.FieldDays,
		})
	}
	if value, ok := puo.mutation.Commission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldCommission,
		})
	}
	if value, ok := puo.mutation.AddedCommission(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldCommission,
		})
	}
	if value, ok := puo.mutation.Original(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldOriginal,
		})
	}
	if value, ok := puo.mutation.AddedOriginal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: plan.FieldOriginal,
		})
	}
	if puo.mutation.OriginalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: plan.FieldOriginal,
		})
	}
	if value, ok := puo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: plan.FieldDesc,
		})
	}
	if puo.mutation.DescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: plan.FieldDesc,
		})
	}
	if puo.mutation.ModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.ModelsTable,
			Columns: plan.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: batterymodel.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedModelsIDs(); len(nodes) > 0 && !puo.mutation.ModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.ModelsTable,
			Columns: plan.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: batterymodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.ModelsTable,
			Columns: plan.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: batterymodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !puo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ComplexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedComplexesIDs(); len(nodes) > 0 && !puo.mutation.ComplexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ComplexesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.CouponsTable,
			Columns: plan.CouponsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCouponsIDs(); len(nodes) > 0 && !puo.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.CouponsTable,
			Columns: plan.CouponsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CouponsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   plan.CouponsTable,
			Columns: plan.CouponsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = puo.modifiers
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
