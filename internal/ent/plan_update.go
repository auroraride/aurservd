// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agreement"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
)

// PlanUpdate is the builder for updating Plan entities.
type PlanUpdate struct {
	config
	hooks     []Hook
	mutation  *PlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlanUpdate builder.
func (pu *PlanUpdate) Where(ps ...predicate.Plan) *PlanUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlanUpdate) SetUpdatedAt(t time.Time) *PlanUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PlanUpdate) SetDeletedAt(t time.Time) *PlanUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDeletedAt(t *time.Time) *PlanUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PlanUpdate) ClearDeletedAt() *PlanUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetLastModifier sets the "last_modifier" field.
func (pu *PlanUpdate) SetLastModifier(m *model.Modifier) *PlanUpdate {
	pu.mutation.SetLastModifier(m)
	return pu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pu *PlanUpdate) ClearLastModifier() *PlanUpdate {
	pu.mutation.ClearLastModifier()
	return pu
}

// SetRemark sets the "remark" field.
func (pu *PlanUpdate) SetRemark(s string) *PlanUpdate {
	pu.mutation.SetRemark(s)
	return pu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableRemark(s *string) *PlanUpdate {
	if s != nil {
		pu.SetRemark(*s)
	}
	return pu
}

// ClearRemark clears the value of the "remark" field.
func (pu *PlanUpdate) ClearRemark() *PlanUpdate {
	pu.mutation.ClearRemark()
	return pu
}

// SetBrandID sets the "brand_id" field.
func (pu *PlanUpdate) SetBrandID(u uint64) *PlanUpdate {
	pu.mutation.SetBrandID(u)
	return pu
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableBrandID(u *uint64) *PlanUpdate {
	if u != nil {
		pu.SetBrandID(*u)
	}
	return pu
}

// ClearBrandID clears the value of the "brand_id" field.
func (pu *PlanUpdate) ClearBrandID() *PlanUpdate {
	pu.mutation.ClearBrandID()
	return pu
}

// SetAgreementID sets the "agreement_id" field.
func (pu *PlanUpdate) SetAgreementID(u uint64) *PlanUpdate {
	pu.mutation.SetAgreementID(u)
	return pu
}

// SetNillableAgreementID sets the "agreement_id" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableAgreementID(u *uint64) *PlanUpdate {
	if u != nil {
		pu.SetAgreementID(*u)
	}
	return pu
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (pu *PlanUpdate) ClearAgreementID() *PlanUpdate {
	pu.mutation.ClearAgreementID()
	return pu
}

// SetModel sets the "model" field.
func (pu *PlanUpdate) SetModel(s string) *PlanUpdate {
	pu.mutation.SetModel(s)
	return pu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableModel(s *string) *PlanUpdate {
	if s != nil {
		pu.SetModel(*s)
	}
	return pu
}

// ClearModel clears the value of the "model" field.
func (pu *PlanUpdate) ClearModel() *PlanUpdate {
	pu.mutation.ClearModel()
	return pu
}

// SetEnable sets the "enable" field.
func (pu *PlanUpdate) SetEnable(b bool) *PlanUpdate {
	pu.mutation.SetEnable(b)
	return pu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableEnable(b *bool) *PlanUpdate {
	if b != nil {
		pu.SetEnable(*b)
	}
	return pu
}

// SetType sets the "type" field.
func (pu *PlanUpdate) SetType(u uint8) *PlanUpdate {
	pu.mutation.ResetType()
	pu.mutation.SetType(u)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableType(u *uint8) *PlanUpdate {
	if u != nil {
		pu.SetType(*u)
	}
	return pu
}

// AddType adds u to the "type" field.
func (pu *PlanUpdate) AddType(u int8) *PlanUpdate {
	pu.mutation.AddType(u)
	return pu
}

// SetName sets the "name" field.
func (pu *PlanUpdate) SetName(s string) *PlanUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableName(s *string) *PlanUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetStart sets the "start" field.
func (pu *PlanUpdate) SetStart(t time.Time) *PlanUpdate {
	pu.mutation.SetStart(t)
	return pu
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableStart(t *time.Time) *PlanUpdate {
	if t != nil {
		pu.SetStart(*t)
	}
	return pu
}

// SetEnd sets the "end" field.
func (pu *PlanUpdate) SetEnd(t time.Time) *PlanUpdate {
	pu.mutation.SetEnd(t)
	return pu
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableEnd(t *time.Time) *PlanUpdate {
	if t != nil {
		pu.SetEnd(*t)
	}
	return pu
}

// SetPrice sets the "price" field.
func (pu *PlanUpdate) SetPrice(f float64) *PlanUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(f)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *PlanUpdate) SetNillablePrice(f *float64) *PlanUpdate {
	if f != nil {
		pu.SetPrice(*f)
	}
	return pu
}

// AddPrice adds f to the "price" field.
func (pu *PlanUpdate) AddPrice(f float64) *PlanUpdate {
	pu.mutation.AddPrice(f)
	return pu
}

// SetDays sets the "days" field.
func (pu *PlanUpdate) SetDays(u uint) *PlanUpdate {
	pu.mutation.ResetDays()
	pu.mutation.SetDays(u)
	return pu
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDays(u *uint) *PlanUpdate {
	if u != nil {
		pu.SetDays(*u)
	}
	return pu
}

// AddDays adds u to the "days" field.
func (pu *PlanUpdate) AddDays(u int) *PlanUpdate {
	pu.mutation.AddDays(u)
	return pu
}

// SetCommission sets the "commission" field.
func (pu *PlanUpdate) SetCommission(f float64) *PlanUpdate {
	pu.mutation.ResetCommission()
	pu.mutation.SetCommission(f)
	return pu
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableCommission(f *float64) *PlanUpdate {
	if f != nil {
		pu.SetCommission(*f)
	}
	return pu
}

// AddCommission adds f to the "commission" field.
func (pu *PlanUpdate) AddCommission(f float64) *PlanUpdate {
	pu.mutation.AddCommission(f)
	return pu
}

// SetOriginal sets the "original" field.
func (pu *PlanUpdate) SetOriginal(f float64) *PlanUpdate {
	pu.mutation.ResetOriginal()
	pu.mutation.SetOriginal(f)
	return pu
}

// SetNillableOriginal sets the "original" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableOriginal(f *float64) *PlanUpdate {
	if f != nil {
		pu.SetOriginal(*f)
	}
	return pu
}

// AddOriginal adds f to the "original" field.
func (pu *PlanUpdate) AddOriginal(f float64) *PlanUpdate {
	pu.mutation.AddOriginal(f)
	return pu
}

// ClearOriginal clears the value of the "original" field.
func (pu *PlanUpdate) ClearOriginal() *PlanUpdate {
	pu.mutation.ClearOriginal()
	return pu
}

// SetDesc sets the "desc" field.
func (pu *PlanUpdate) SetDesc(s string) *PlanUpdate {
	pu.mutation.SetDesc(s)
	return pu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDesc(s *string) *PlanUpdate {
	if s != nil {
		pu.SetDesc(*s)
	}
	return pu
}

// ClearDesc clears the value of the "desc" field.
func (pu *PlanUpdate) ClearDesc() *PlanUpdate {
	pu.mutation.ClearDesc()
	return pu
}

// SetParentID sets the "parent_id" field.
func (pu *PlanUpdate) SetParentID(u uint64) *PlanUpdate {
	pu.mutation.SetParentID(u)
	return pu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableParentID(u *uint64) *PlanUpdate {
	if u != nil {
		pu.SetParentID(*u)
	}
	return pu
}

// ClearParentID clears the value of the "parent_id" field.
func (pu *PlanUpdate) ClearParentID() *PlanUpdate {
	pu.mutation.ClearParentID()
	return pu
}

// SetDiscountNewly sets the "discount_newly" field.
func (pu *PlanUpdate) SetDiscountNewly(f float64) *PlanUpdate {
	pu.mutation.ResetDiscountNewly()
	pu.mutation.SetDiscountNewly(f)
	return pu
}

// SetNillableDiscountNewly sets the "discount_newly" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDiscountNewly(f *float64) *PlanUpdate {
	if f != nil {
		pu.SetDiscountNewly(*f)
	}
	return pu
}

// AddDiscountNewly adds f to the "discount_newly" field.
func (pu *PlanUpdate) AddDiscountNewly(f float64) *PlanUpdate {
	pu.mutation.AddDiscountNewly(f)
	return pu
}

// SetNotes sets the "notes" field.
func (pu *PlanUpdate) SetNotes(s []string) *PlanUpdate {
	pu.mutation.SetNotes(s)
	return pu
}

// AppendNotes appends s to the "notes" field.
func (pu *PlanUpdate) AppendNotes(s []string) *PlanUpdate {
	pu.mutation.AppendNotes(s)
	return pu
}

// ClearNotes clears the value of the "notes" field.
func (pu *PlanUpdate) ClearNotes() *PlanUpdate {
	pu.mutation.ClearNotes()
	return pu
}

// SetIntelligent sets the "intelligent" field.
func (pu *PlanUpdate) SetIntelligent(b bool) *PlanUpdate {
	pu.mutation.SetIntelligent(b)
	return pu
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableIntelligent(b *bool) *PlanUpdate {
	if b != nil {
		pu.SetIntelligent(*b)
	}
	return pu
}

// SetDeposit sets the "deposit" field.
func (pu *PlanUpdate) SetDeposit(b bool) *PlanUpdate {
	pu.mutation.SetDeposit(b)
	return pu
}

// SetNillableDeposit sets the "deposit" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDeposit(b *bool) *PlanUpdate {
	if b != nil {
		pu.SetDeposit(*b)
	}
	return pu
}

// SetDepositAmount sets the "deposit_amount" field.
func (pu *PlanUpdate) SetDepositAmount(f float64) *PlanUpdate {
	pu.mutation.ResetDepositAmount()
	pu.mutation.SetDepositAmount(f)
	return pu
}

// SetNillableDepositAmount sets the "deposit_amount" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDepositAmount(f *float64) *PlanUpdate {
	if f != nil {
		pu.SetDepositAmount(*f)
	}
	return pu
}

// AddDepositAmount adds f to the "deposit_amount" field.
func (pu *PlanUpdate) AddDepositAmount(f float64) *PlanUpdate {
	pu.mutation.AddDepositAmount(f)
	return pu
}

// ClearDepositAmount clears the value of the "deposit_amount" field.
func (pu *PlanUpdate) ClearDepositAmount() *PlanUpdate {
	pu.mutation.ClearDepositAmount()
	return pu
}

// SetDepositWechatPayscore sets the "deposit_wechat_payscore" field.
func (pu *PlanUpdate) SetDepositWechatPayscore(b bool) *PlanUpdate {
	pu.mutation.SetDepositWechatPayscore(b)
	return pu
}

// SetNillableDepositWechatPayscore sets the "deposit_wechat_payscore" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDepositWechatPayscore(b *bool) *PlanUpdate {
	if b != nil {
		pu.SetDepositWechatPayscore(*b)
	}
	return pu
}

// ClearDepositWechatPayscore clears the value of the "deposit_wechat_payscore" field.
func (pu *PlanUpdate) ClearDepositWechatPayscore() *PlanUpdate {
	pu.mutation.ClearDepositWechatPayscore()
	return pu
}

// SetDepositAlipayAuthFreeze sets the "deposit_alipay_auth_freeze" field.
func (pu *PlanUpdate) SetDepositAlipayAuthFreeze(b bool) *PlanUpdate {
	pu.mutation.SetDepositAlipayAuthFreeze(b)
	return pu
}

// SetNillableDepositAlipayAuthFreeze sets the "deposit_alipay_auth_freeze" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDepositAlipayAuthFreeze(b *bool) *PlanUpdate {
	if b != nil {
		pu.SetDepositAlipayAuthFreeze(*b)
	}
	return pu
}

// ClearDepositAlipayAuthFreeze clears the value of the "deposit_alipay_auth_freeze" field.
func (pu *PlanUpdate) ClearDepositAlipayAuthFreeze() *PlanUpdate {
	pu.mutation.ClearDepositAlipayAuthFreeze()
	return pu
}

// SetDepositContract sets the "deposit_contract" field.
func (pu *PlanUpdate) SetDepositContract(b bool) *PlanUpdate {
	pu.mutation.SetDepositContract(b)
	return pu
}

// SetNillableDepositContract sets the "deposit_contract" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDepositContract(b *bool) *PlanUpdate {
	if b != nil {
		pu.SetDepositContract(*b)
	}
	return pu
}

// ClearDepositContract clears the value of the "deposit_contract" field.
func (pu *PlanUpdate) ClearDepositContract() *PlanUpdate {
	pu.mutation.ClearDepositContract()
	return pu
}

// SetDepositPay sets the "deposit_pay" field.
func (pu *PlanUpdate) SetDepositPay(b bool) *PlanUpdate {
	pu.mutation.SetDepositPay(b)
	return pu
}

// SetNillableDepositPay sets the "deposit_pay" field if the given value is not nil.
func (pu *PlanUpdate) SetNillableDepositPay(b *bool) *PlanUpdate {
	if b != nil {
		pu.SetDepositPay(*b)
	}
	return pu
}

// ClearDepositPay clears the value of the "deposit_pay" field.
func (pu *PlanUpdate) ClearDepositPay() *PlanUpdate {
	pu.mutation.ClearDepositPay()
	return pu
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (pu *PlanUpdate) SetBrand(e *EbikeBrand) *PlanUpdate {
	return pu.SetBrandID(e.ID)
}

// SetAgreement sets the "agreement" edge to the Agreement entity.
func (pu *PlanUpdate) SetAgreement(a *Agreement) *PlanUpdate {
	return pu.SetAgreementID(a.ID)
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (pu *PlanUpdate) AddCityIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.AddCityIDs(ids...)
	return pu
}

// AddCities adds the "cities" edges to the City entity.
func (pu *PlanUpdate) AddCities(c ...*City) *PlanUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCityIDs(ids...)
}

// SetParent sets the "parent" edge to the Plan entity.
func (pu *PlanUpdate) SetParent(p *Plan) *PlanUpdate {
	return pu.SetParentID(p.ID)
}

// AddComplexIDs adds the "complexes" edge to the Plan entity by IDs.
func (pu *PlanUpdate) AddComplexIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.AddComplexIDs(ids...)
	return pu
}

// AddComplexes adds the "complexes" edges to the Plan entity.
func (pu *PlanUpdate) AddComplexes(p ...*Plan) *PlanUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddComplexIDs(ids...)
}

// AddCommissionIDs adds the "commissions" edge to the PromotionCommissionPlan entity by IDs.
func (pu *PlanUpdate) AddCommissionIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.AddCommissionIDs(ids...)
	return pu
}

// AddCommissions adds the "commissions" edges to the PromotionCommissionPlan entity.
func (pu *PlanUpdate) AddCommissions(p ...*PromotionCommissionPlan) *PlanUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddCommissionIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (pu *PlanUpdate) Mutation() *PlanMutation {
	return pu.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (pu *PlanUpdate) ClearBrand() *PlanUpdate {
	pu.mutation.ClearBrand()
	return pu
}

// ClearAgreement clears the "agreement" edge to the Agreement entity.
func (pu *PlanUpdate) ClearAgreement() *PlanUpdate {
	pu.mutation.ClearAgreement()
	return pu
}

// ClearCities clears all "cities" edges to the City entity.
func (pu *PlanUpdate) ClearCities() *PlanUpdate {
	pu.mutation.ClearCities()
	return pu
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (pu *PlanUpdate) RemoveCityIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.RemoveCityIDs(ids...)
	return pu
}

// RemoveCities removes "cities" edges to City entities.
func (pu *PlanUpdate) RemoveCities(c ...*City) *PlanUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCityIDs(ids...)
}

// ClearParent clears the "parent" edge to the Plan entity.
func (pu *PlanUpdate) ClearParent() *PlanUpdate {
	pu.mutation.ClearParent()
	return pu
}

// ClearComplexes clears all "complexes" edges to the Plan entity.
func (pu *PlanUpdate) ClearComplexes() *PlanUpdate {
	pu.mutation.ClearComplexes()
	return pu
}

// RemoveComplexIDs removes the "complexes" edge to Plan entities by IDs.
func (pu *PlanUpdate) RemoveComplexIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.RemoveComplexIDs(ids...)
	return pu
}

// RemoveComplexes removes "complexes" edges to Plan entities.
func (pu *PlanUpdate) RemoveComplexes(p ...*Plan) *PlanUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveComplexIDs(ids...)
}

// ClearCommissions clears all "commissions" edges to the PromotionCommissionPlan entity.
func (pu *PlanUpdate) ClearCommissions() *PlanUpdate {
	pu.mutation.ClearCommissions()
	return pu
}

// RemoveCommissionIDs removes the "commissions" edge to PromotionCommissionPlan entities by IDs.
func (pu *PlanUpdate) RemoveCommissionIDs(ids ...uint64) *PlanUpdate {
	pu.mutation.RemoveCommissionIDs(ids...)
	return pu
}

// RemoveCommissions removes "commissions" edges to PromotionCommissionPlan entities.
func (pu *PlanUpdate) RemoveCommissions(p ...*PromotionCommissionPlan) *PlanUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveCommissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlanUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlanUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlanUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlanUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlanUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if plan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized plan.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := plan.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(plan.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(plan.FieldDeletedAt, field.TypeTime)
	}
	if pu.mutation.CreatorCleared() {
		_spec.ClearField(plan.FieldCreator, field.TypeJSON)
	}
	if value, ok := pu.mutation.LastModifier(); ok {
		_spec.SetField(plan.FieldLastModifier, field.TypeJSON, value)
	}
	if pu.mutation.LastModifierCleared() {
		_spec.ClearField(plan.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pu.mutation.Remark(); ok {
		_spec.SetField(plan.FieldRemark, field.TypeString, value)
	}
	if pu.mutation.RemarkCleared() {
		_spec.ClearField(plan.FieldRemark, field.TypeString)
	}
	if value, ok := pu.mutation.Model(); ok {
		_spec.SetField(plan.FieldModel, field.TypeString, value)
	}
	if pu.mutation.ModelCleared() {
		_spec.ClearField(plan.FieldModel, field.TypeString)
	}
	if value, ok := pu.mutation.Enable(); ok {
		_spec.SetField(plan.FieldEnable, field.TypeBool, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(plan.FieldType, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.AddedType(); ok {
		_spec.AddField(plan.FieldType, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Start(); ok {
		_spec.SetField(plan.FieldStart, field.TypeTime, value)
	}
	if value, ok := pu.mutation.End(); ok {
		_spec.SetField(plan.FieldEnd, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(plan.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(plan.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Days(); ok {
		_spec.SetField(plan.FieldDays, field.TypeUint, value)
	}
	if value, ok := pu.mutation.AddedDays(); ok {
		_spec.AddField(plan.FieldDays, field.TypeUint, value)
	}
	if value, ok := pu.mutation.Commission(); ok {
		_spec.SetField(plan.FieldCommission, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedCommission(); ok {
		_spec.AddField(plan.FieldCommission, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Original(); ok {
		_spec.SetField(plan.FieldOriginal, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedOriginal(); ok {
		_spec.AddField(plan.FieldOriginal, field.TypeFloat64, value)
	}
	if pu.mutation.OriginalCleared() {
		_spec.ClearField(plan.FieldOriginal, field.TypeFloat64)
	}
	if value, ok := pu.mutation.Desc(); ok {
		_spec.SetField(plan.FieldDesc, field.TypeString, value)
	}
	if pu.mutation.DescCleared() {
		_spec.ClearField(plan.FieldDesc, field.TypeString)
	}
	if value, ok := pu.mutation.DiscountNewly(); ok {
		_spec.SetField(plan.FieldDiscountNewly, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedDiscountNewly(); ok {
		_spec.AddField(plan.FieldDiscountNewly, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Notes(); ok {
		_spec.SetField(plan.FieldNotes, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedNotes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, plan.FieldNotes, value)
		})
	}
	if pu.mutation.NotesCleared() {
		_spec.ClearField(plan.FieldNotes, field.TypeJSON)
	}
	if value, ok := pu.mutation.Intelligent(); ok {
		_spec.SetField(plan.FieldIntelligent, field.TypeBool, value)
	}
	if value, ok := pu.mutation.Deposit(); ok {
		_spec.SetField(plan.FieldDeposit, field.TypeBool, value)
	}
	if value, ok := pu.mutation.DepositAmount(); ok {
		_spec.SetField(plan.FieldDepositAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedDepositAmount(); ok {
		_spec.AddField(plan.FieldDepositAmount, field.TypeFloat64, value)
	}
	if pu.mutation.DepositAmountCleared() {
		_spec.ClearField(plan.FieldDepositAmount, field.TypeFloat64)
	}
	if value, ok := pu.mutation.DepositWechatPayscore(); ok {
		_spec.SetField(plan.FieldDepositWechatPayscore, field.TypeBool, value)
	}
	if pu.mutation.DepositWechatPayscoreCleared() {
		_spec.ClearField(plan.FieldDepositWechatPayscore, field.TypeBool)
	}
	if value, ok := pu.mutation.DepositAlipayAuthFreeze(); ok {
		_spec.SetField(plan.FieldDepositAlipayAuthFreeze, field.TypeBool, value)
	}
	if pu.mutation.DepositAlipayAuthFreezeCleared() {
		_spec.ClearField(plan.FieldDepositAlipayAuthFreeze, field.TypeBool)
	}
	if value, ok := pu.mutation.DepositContract(); ok {
		_spec.SetField(plan.FieldDepositContract, field.TypeBool, value)
	}
	if pu.mutation.DepositContractCleared() {
		_spec.ClearField(plan.FieldDepositContract, field.TypeBool)
	}
	if value, ok := pu.mutation.DepositPay(); ok {
		_spec.SetField(plan.FieldDepositPay, field.TypeBool, value)
	}
	if pu.mutation.DepositPayCleared() {
		_spec.ClearField(plan.FieldDepositPay, field.TypeBool)
	}
	if pu.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BrandTable,
			Columns: []string{plan.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BrandTable,
			Columns: []string{plan.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AgreementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.AgreementTable,
			Columns: []string{plan.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AgreementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.AgreementTable,
			Columns: []string{plan.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !pu.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ComplexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedComplexesIDs(); len(nodes) > 0 && !pu.mutation.ComplexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ComplexesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.CommissionsTable,
			Columns: []string{plan.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCommissionsIDs(); len(nodes) > 0 && !pu.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.CommissionsTable,
			Columns: []string{plan.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CommissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.CommissionsTable,
			Columns: []string{plan.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlanUpdateOne is the builder for updating a single Plan entity.
type PlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlanUpdateOne) SetUpdatedAt(t time.Time) *PlanUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PlanUpdateOne) SetDeletedAt(t time.Time) *PlanUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDeletedAt(t *time.Time) *PlanUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PlanUpdateOne) ClearDeletedAt() *PlanUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetLastModifier sets the "last_modifier" field.
func (puo *PlanUpdateOne) SetLastModifier(m *model.Modifier) *PlanUpdateOne {
	puo.mutation.SetLastModifier(m)
	return puo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (puo *PlanUpdateOne) ClearLastModifier() *PlanUpdateOne {
	puo.mutation.ClearLastModifier()
	return puo
}

// SetRemark sets the "remark" field.
func (puo *PlanUpdateOne) SetRemark(s string) *PlanUpdateOne {
	puo.mutation.SetRemark(s)
	return puo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableRemark(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetRemark(*s)
	}
	return puo
}

// ClearRemark clears the value of the "remark" field.
func (puo *PlanUpdateOne) ClearRemark() *PlanUpdateOne {
	puo.mutation.ClearRemark()
	return puo
}

// SetBrandID sets the "brand_id" field.
func (puo *PlanUpdateOne) SetBrandID(u uint64) *PlanUpdateOne {
	puo.mutation.SetBrandID(u)
	return puo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableBrandID(u *uint64) *PlanUpdateOne {
	if u != nil {
		puo.SetBrandID(*u)
	}
	return puo
}

// ClearBrandID clears the value of the "brand_id" field.
func (puo *PlanUpdateOne) ClearBrandID() *PlanUpdateOne {
	puo.mutation.ClearBrandID()
	return puo
}

// SetAgreementID sets the "agreement_id" field.
func (puo *PlanUpdateOne) SetAgreementID(u uint64) *PlanUpdateOne {
	puo.mutation.SetAgreementID(u)
	return puo
}

// SetNillableAgreementID sets the "agreement_id" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableAgreementID(u *uint64) *PlanUpdateOne {
	if u != nil {
		puo.SetAgreementID(*u)
	}
	return puo
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (puo *PlanUpdateOne) ClearAgreementID() *PlanUpdateOne {
	puo.mutation.ClearAgreementID()
	return puo
}

// SetModel sets the "model" field.
func (puo *PlanUpdateOne) SetModel(s string) *PlanUpdateOne {
	puo.mutation.SetModel(s)
	return puo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableModel(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetModel(*s)
	}
	return puo
}

// ClearModel clears the value of the "model" field.
func (puo *PlanUpdateOne) ClearModel() *PlanUpdateOne {
	puo.mutation.ClearModel()
	return puo
}

// SetEnable sets the "enable" field.
func (puo *PlanUpdateOne) SetEnable(b bool) *PlanUpdateOne {
	puo.mutation.SetEnable(b)
	return puo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableEnable(b *bool) *PlanUpdateOne {
	if b != nil {
		puo.SetEnable(*b)
	}
	return puo
}

// SetType sets the "type" field.
func (puo *PlanUpdateOne) SetType(u uint8) *PlanUpdateOne {
	puo.mutation.ResetType()
	puo.mutation.SetType(u)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableType(u *uint8) *PlanUpdateOne {
	if u != nil {
		puo.SetType(*u)
	}
	return puo
}

// AddType adds u to the "type" field.
func (puo *PlanUpdateOne) AddType(u int8) *PlanUpdateOne {
	puo.mutation.AddType(u)
	return puo
}

// SetName sets the "name" field.
func (puo *PlanUpdateOne) SetName(s string) *PlanUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableName(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetStart sets the "start" field.
func (puo *PlanUpdateOne) SetStart(t time.Time) *PlanUpdateOne {
	puo.mutation.SetStart(t)
	return puo
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableStart(t *time.Time) *PlanUpdateOne {
	if t != nil {
		puo.SetStart(*t)
	}
	return puo
}

// SetEnd sets the "end" field.
func (puo *PlanUpdateOne) SetEnd(t time.Time) *PlanUpdateOne {
	puo.mutation.SetEnd(t)
	return puo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableEnd(t *time.Time) *PlanUpdateOne {
	if t != nil {
		puo.SetEnd(*t)
	}
	return puo
}

// SetPrice sets the "price" field.
func (puo *PlanUpdateOne) SetPrice(f float64) *PlanUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(f)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillablePrice(f *float64) *PlanUpdateOne {
	if f != nil {
		puo.SetPrice(*f)
	}
	return puo
}

// AddPrice adds f to the "price" field.
func (puo *PlanUpdateOne) AddPrice(f float64) *PlanUpdateOne {
	puo.mutation.AddPrice(f)
	return puo
}

// SetDays sets the "days" field.
func (puo *PlanUpdateOne) SetDays(u uint) *PlanUpdateOne {
	puo.mutation.ResetDays()
	puo.mutation.SetDays(u)
	return puo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDays(u *uint) *PlanUpdateOne {
	if u != nil {
		puo.SetDays(*u)
	}
	return puo
}

// AddDays adds u to the "days" field.
func (puo *PlanUpdateOne) AddDays(u int) *PlanUpdateOne {
	puo.mutation.AddDays(u)
	return puo
}

// SetCommission sets the "commission" field.
func (puo *PlanUpdateOne) SetCommission(f float64) *PlanUpdateOne {
	puo.mutation.ResetCommission()
	puo.mutation.SetCommission(f)
	return puo
}

// SetNillableCommission sets the "commission" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableCommission(f *float64) *PlanUpdateOne {
	if f != nil {
		puo.SetCommission(*f)
	}
	return puo
}

// AddCommission adds f to the "commission" field.
func (puo *PlanUpdateOne) AddCommission(f float64) *PlanUpdateOne {
	puo.mutation.AddCommission(f)
	return puo
}

// SetOriginal sets the "original" field.
func (puo *PlanUpdateOne) SetOriginal(f float64) *PlanUpdateOne {
	puo.mutation.ResetOriginal()
	puo.mutation.SetOriginal(f)
	return puo
}

// SetNillableOriginal sets the "original" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableOriginal(f *float64) *PlanUpdateOne {
	if f != nil {
		puo.SetOriginal(*f)
	}
	return puo
}

// AddOriginal adds f to the "original" field.
func (puo *PlanUpdateOne) AddOriginal(f float64) *PlanUpdateOne {
	puo.mutation.AddOriginal(f)
	return puo
}

// ClearOriginal clears the value of the "original" field.
func (puo *PlanUpdateOne) ClearOriginal() *PlanUpdateOne {
	puo.mutation.ClearOriginal()
	return puo
}

// SetDesc sets the "desc" field.
func (puo *PlanUpdateOne) SetDesc(s string) *PlanUpdateOne {
	puo.mutation.SetDesc(s)
	return puo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDesc(s *string) *PlanUpdateOne {
	if s != nil {
		puo.SetDesc(*s)
	}
	return puo
}

// ClearDesc clears the value of the "desc" field.
func (puo *PlanUpdateOne) ClearDesc() *PlanUpdateOne {
	puo.mutation.ClearDesc()
	return puo
}

// SetParentID sets the "parent_id" field.
func (puo *PlanUpdateOne) SetParentID(u uint64) *PlanUpdateOne {
	puo.mutation.SetParentID(u)
	return puo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableParentID(u *uint64) *PlanUpdateOne {
	if u != nil {
		puo.SetParentID(*u)
	}
	return puo
}

// ClearParentID clears the value of the "parent_id" field.
func (puo *PlanUpdateOne) ClearParentID() *PlanUpdateOne {
	puo.mutation.ClearParentID()
	return puo
}

// SetDiscountNewly sets the "discount_newly" field.
func (puo *PlanUpdateOne) SetDiscountNewly(f float64) *PlanUpdateOne {
	puo.mutation.ResetDiscountNewly()
	puo.mutation.SetDiscountNewly(f)
	return puo
}

// SetNillableDiscountNewly sets the "discount_newly" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDiscountNewly(f *float64) *PlanUpdateOne {
	if f != nil {
		puo.SetDiscountNewly(*f)
	}
	return puo
}

// AddDiscountNewly adds f to the "discount_newly" field.
func (puo *PlanUpdateOne) AddDiscountNewly(f float64) *PlanUpdateOne {
	puo.mutation.AddDiscountNewly(f)
	return puo
}

// SetNotes sets the "notes" field.
func (puo *PlanUpdateOne) SetNotes(s []string) *PlanUpdateOne {
	puo.mutation.SetNotes(s)
	return puo
}

// AppendNotes appends s to the "notes" field.
func (puo *PlanUpdateOne) AppendNotes(s []string) *PlanUpdateOne {
	puo.mutation.AppendNotes(s)
	return puo
}

// ClearNotes clears the value of the "notes" field.
func (puo *PlanUpdateOne) ClearNotes() *PlanUpdateOne {
	puo.mutation.ClearNotes()
	return puo
}

// SetIntelligent sets the "intelligent" field.
func (puo *PlanUpdateOne) SetIntelligent(b bool) *PlanUpdateOne {
	puo.mutation.SetIntelligent(b)
	return puo
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableIntelligent(b *bool) *PlanUpdateOne {
	if b != nil {
		puo.SetIntelligent(*b)
	}
	return puo
}

// SetDeposit sets the "deposit" field.
func (puo *PlanUpdateOne) SetDeposit(b bool) *PlanUpdateOne {
	puo.mutation.SetDeposit(b)
	return puo
}

// SetNillableDeposit sets the "deposit" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDeposit(b *bool) *PlanUpdateOne {
	if b != nil {
		puo.SetDeposit(*b)
	}
	return puo
}

// SetDepositAmount sets the "deposit_amount" field.
func (puo *PlanUpdateOne) SetDepositAmount(f float64) *PlanUpdateOne {
	puo.mutation.ResetDepositAmount()
	puo.mutation.SetDepositAmount(f)
	return puo
}

// SetNillableDepositAmount sets the "deposit_amount" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDepositAmount(f *float64) *PlanUpdateOne {
	if f != nil {
		puo.SetDepositAmount(*f)
	}
	return puo
}

// AddDepositAmount adds f to the "deposit_amount" field.
func (puo *PlanUpdateOne) AddDepositAmount(f float64) *PlanUpdateOne {
	puo.mutation.AddDepositAmount(f)
	return puo
}

// ClearDepositAmount clears the value of the "deposit_amount" field.
func (puo *PlanUpdateOne) ClearDepositAmount() *PlanUpdateOne {
	puo.mutation.ClearDepositAmount()
	return puo
}

// SetDepositWechatPayscore sets the "deposit_wechat_payscore" field.
func (puo *PlanUpdateOne) SetDepositWechatPayscore(b bool) *PlanUpdateOne {
	puo.mutation.SetDepositWechatPayscore(b)
	return puo
}

// SetNillableDepositWechatPayscore sets the "deposit_wechat_payscore" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDepositWechatPayscore(b *bool) *PlanUpdateOne {
	if b != nil {
		puo.SetDepositWechatPayscore(*b)
	}
	return puo
}

// ClearDepositWechatPayscore clears the value of the "deposit_wechat_payscore" field.
func (puo *PlanUpdateOne) ClearDepositWechatPayscore() *PlanUpdateOne {
	puo.mutation.ClearDepositWechatPayscore()
	return puo
}

// SetDepositAlipayAuthFreeze sets the "deposit_alipay_auth_freeze" field.
func (puo *PlanUpdateOne) SetDepositAlipayAuthFreeze(b bool) *PlanUpdateOne {
	puo.mutation.SetDepositAlipayAuthFreeze(b)
	return puo
}

// SetNillableDepositAlipayAuthFreeze sets the "deposit_alipay_auth_freeze" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDepositAlipayAuthFreeze(b *bool) *PlanUpdateOne {
	if b != nil {
		puo.SetDepositAlipayAuthFreeze(*b)
	}
	return puo
}

// ClearDepositAlipayAuthFreeze clears the value of the "deposit_alipay_auth_freeze" field.
func (puo *PlanUpdateOne) ClearDepositAlipayAuthFreeze() *PlanUpdateOne {
	puo.mutation.ClearDepositAlipayAuthFreeze()
	return puo
}

// SetDepositContract sets the "deposit_contract" field.
func (puo *PlanUpdateOne) SetDepositContract(b bool) *PlanUpdateOne {
	puo.mutation.SetDepositContract(b)
	return puo
}

// SetNillableDepositContract sets the "deposit_contract" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDepositContract(b *bool) *PlanUpdateOne {
	if b != nil {
		puo.SetDepositContract(*b)
	}
	return puo
}

// ClearDepositContract clears the value of the "deposit_contract" field.
func (puo *PlanUpdateOne) ClearDepositContract() *PlanUpdateOne {
	puo.mutation.ClearDepositContract()
	return puo
}

// SetDepositPay sets the "deposit_pay" field.
func (puo *PlanUpdateOne) SetDepositPay(b bool) *PlanUpdateOne {
	puo.mutation.SetDepositPay(b)
	return puo
}

// SetNillableDepositPay sets the "deposit_pay" field if the given value is not nil.
func (puo *PlanUpdateOne) SetNillableDepositPay(b *bool) *PlanUpdateOne {
	if b != nil {
		puo.SetDepositPay(*b)
	}
	return puo
}

// ClearDepositPay clears the value of the "deposit_pay" field.
func (puo *PlanUpdateOne) ClearDepositPay() *PlanUpdateOne {
	puo.mutation.ClearDepositPay()
	return puo
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (puo *PlanUpdateOne) SetBrand(e *EbikeBrand) *PlanUpdateOne {
	return puo.SetBrandID(e.ID)
}

// SetAgreement sets the "agreement" edge to the Agreement entity.
func (puo *PlanUpdateOne) SetAgreement(a *Agreement) *PlanUpdateOne {
	return puo.SetAgreementID(a.ID)
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (puo *PlanUpdateOne) AddCityIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.AddCityIDs(ids...)
	return puo
}

// AddCities adds the "cities" edges to the City entity.
func (puo *PlanUpdateOne) AddCities(c ...*City) *PlanUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCityIDs(ids...)
}

// SetParent sets the "parent" edge to the Plan entity.
func (puo *PlanUpdateOne) SetParent(p *Plan) *PlanUpdateOne {
	return puo.SetParentID(p.ID)
}

// AddComplexIDs adds the "complexes" edge to the Plan entity by IDs.
func (puo *PlanUpdateOne) AddComplexIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.AddComplexIDs(ids...)
	return puo
}

// AddComplexes adds the "complexes" edges to the Plan entity.
func (puo *PlanUpdateOne) AddComplexes(p ...*Plan) *PlanUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddComplexIDs(ids...)
}

// AddCommissionIDs adds the "commissions" edge to the PromotionCommissionPlan entity by IDs.
func (puo *PlanUpdateOne) AddCommissionIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.AddCommissionIDs(ids...)
	return puo
}

// AddCommissions adds the "commissions" edges to the PromotionCommissionPlan entity.
func (puo *PlanUpdateOne) AddCommissions(p ...*PromotionCommissionPlan) *PlanUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddCommissionIDs(ids...)
}

// Mutation returns the PlanMutation object of the builder.
func (puo *PlanUpdateOne) Mutation() *PlanMutation {
	return puo.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (puo *PlanUpdateOne) ClearBrand() *PlanUpdateOne {
	puo.mutation.ClearBrand()
	return puo
}

// ClearAgreement clears the "agreement" edge to the Agreement entity.
func (puo *PlanUpdateOne) ClearAgreement() *PlanUpdateOne {
	puo.mutation.ClearAgreement()
	return puo
}

// ClearCities clears all "cities" edges to the City entity.
func (puo *PlanUpdateOne) ClearCities() *PlanUpdateOne {
	puo.mutation.ClearCities()
	return puo
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (puo *PlanUpdateOne) RemoveCityIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.RemoveCityIDs(ids...)
	return puo
}

// RemoveCities removes "cities" edges to City entities.
func (puo *PlanUpdateOne) RemoveCities(c ...*City) *PlanUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCityIDs(ids...)
}

// ClearParent clears the "parent" edge to the Plan entity.
func (puo *PlanUpdateOne) ClearParent() *PlanUpdateOne {
	puo.mutation.ClearParent()
	return puo
}

// ClearComplexes clears all "complexes" edges to the Plan entity.
func (puo *PlanUpdateOne) ClearComplexes() *PlanUpdateOne {
	puo.mutation.ClearComplexes()
	return puo
}

// RemoveComplexIDs removes the "complexes" edge to Plan entities by IDs.
func (puo *PlanUpdateOne) RemoveComplexIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.RemoveComplexIDs(ids...)
	return puo
}

// RemoveComplexes removes "complexes" edges to Plan entities.
func (puo *PlanUpdateOne) RemoveComplexes(p ...*Plan) *PlanUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveComplexIDs(ids...)
}

// ClearCommissions clears all "commissions" edges to the PromotionCommissionPlan entity.
func (puo *PlanUpdateOne) ClearCommissions() *PlanUpdateOne {
	puo.mutation.ClearCommissions()
	return puo
}

// RemoveCommissionIDs removes the "commissions" edge to PromotionCommissionPlan entities by IDs.
func (puo *PlanUpdateOne) RemoveCommissionIDs(ids ...uint64) *PlanUpdateOne {
	puo.mutation.RemoveCommissionIDs(ids...)
	return puo
}

// RemoveCommissions removes "commissions" edges to PromotionCommissionPlan entities.
func (puo *PlanUpdateOne) RemoveCommissions(p ...*PromotionCommissionPlan) *PlanUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveCommissionIDs(ids...)
}

// Where appends a list predicates to the PlanUpdate builder.
func (puo *PlanUpdateOne) Where(ps ...predicate.Plan) *PlanUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlanUpdateOne) Select(field string, fields ...string) *PlanUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Plan entity.
func (puo *PlanUpdateOne) Save(ctx context.Context) (*Plan, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlanUpdateOne) SaveX(ctx context.Context) *Plan {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlanUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlanUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlanUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if plan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized plan.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := plan.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PlanUpdateOne) sqlSave(ctx context.Context) (_node *Plan, err error) {
	_spec := sqlgraph.NewUpdateSpec(plan.Table, plan.Columns, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Plan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, plan.FieldID)
		for _, f := range fields {
			if !plan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != plan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(plan.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(plan.FieldDeletedAt, field.TypeTime)
	}
	if puo.mutation.CreatorCleared() {
		_spec.ClearField(plan.FieldCreator, field.TypeJSON)
	}
	if value, ok := puo.mutation.LastModifier(); ok {
		_spec.SetField(plan.FieldLastModifier, field.TypeJSON, value)
	}
	if puo.mutation.LastModifierCleared() {
		_spec.ClearField(plan.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := puo.mutation.Remark(); ok {
		_spec.SetField(plan.FieldRemark, field.TypeString, value)
	}
	if puo.mutation.RemarkCleared() {
		_spec.ClearField(plan.FieldRemark, field.TypeString)
	}
	if value, ok := puo.mutation.Model(); ok {
		_spec.SetField(plan.FieldModel, field.TypeString, value)
	}
	if puo.mutation.ModelCleared() {
		_spec.ClearField(plan.FieldModel, field.TypeString)
	}
	if value, ok := puo.mutation.Enable(); ok {
		_spec.SetField(plan.FieldEnable, field.TypeBool, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(plan.FieldType, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.AddedType(); ok {
		_spec.AddField(plan.FieldType, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Start(); ok {
		_spec.SetField(plan.FieldStart, field.TypeTime, value)
	}
	if value, ok := puo.mutation.End(); ok {
		_spec.SetField(plan.FieldEnd, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(plan.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(plan.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Days(); ok {
		_spec.SetField(plan.FieldDays, field.TypeUint, value)
	}
	if value, ok := puo.mutation.AddedDays(); ok {
		_spec.AddField(plan.FieldDays, field.TypeUint, value)
	}
	if value, ok := puo.mutation.Commission(); ok {
		_spec.SetField(plan.FieldCommission, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedCommission(); ok {
		_spec.AddField(plan.FieldCommission, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Original(); ok {
		_spec.SetField(plan.FieldOriginal, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedOriginal(); ok {
		_spec.AddField(plan.FieldOriginal, field.TypeFloat64, value)
	}
	if puo.mutation.OriginalCleared() {
		_spec.ClearField(plan.FieldOriginal, field.TypeFloat64)
	}
	if value, ok := puo.mutation.Desc(); ok {
		_spec.SetField(plan.FieldDesc, field.TypeString, value)
	}
	if puo.mutation.DescCleared() {
		_spec.ClearField(plan.FieldDesc, field.TypeString)
	}
	if value, ok := puo.mutation.DiscountNewly(); ok {
		_spec.SetField(plan.FieldDiscountNewly, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedDiscountNewly(); ok {
		_spec.AddField(plan.FieldDiscountNewly, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Notes(); ok {
		_spec.SetField(plan.FieldNotes, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedNotes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, plan.FieldNotes, value)
		})
	}
	if puo.mutation.NotesCleared() {
		_spec.ClearField(plan.FieldNotes, field.TypeJSON)
	}
	if value, ok := puo.mutation.Intelligent(); ok {
		_spec.SetField(plan.FieldIntelligent, field.TypeBool, value)
	}
	if value, ok := puo.mutation.Deposit(); ok {
		_spec.SetField(plan.FieldDeposit, field.TypeBool, value)
	}
	if value, ok := puo.mutation.DepositAmount(); ok {
		_spec.SetField(plan.FieldDepositAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedDepositAmount(); ok {
		_spec.AddField(plan.FieldDepositAmount, field.TypeFloat64, value)
	}
	if puo.mutation.DepositAmountCleared() {
		_spec.ClearField(plan.FieldDepositAmount, field.TypeFloat64)
	}
	if value, ok := puo.mutation.DepositWechatPayscore(); ok {
		_spec.SetField(plan.FieldDepositWechatPayscore, field.TypeBool, value)
	}
	if puo.mutation.DepositWechatPayscoreCleared() {
		_spec.ClearField(plan.FieldDepositWechatPayscore, field.TypeBool)
	}
	if value, ok := puo.mutation.DepositAlipayAuthFreeze(); ok {
		_spec.SetField(plan.FieldDepositAlipayAuthFreeze, field.TypeBool, value)
	}
	if puo.mutation.DepositAlipayAuthFreezeCleared() {
		_spec.ClearField(plan.FieldDepositAlipayAuthFreeze, field.TypeBool)
	}
	if value, ok := puo.mutation.DepositContract(); ok {
		_spec.SetField(plan.FieldDepositContract, field.TypeBool, value)
	}
	if puo.mutation.DepositContractCleared() {
		_spec.ClearField(plan.FieldDepositContract, field.TypeBool)
	}
	if value, ok := puo.mutation.DepositPay(); ok {
		_spec.SetField(plan.FieldDepositPay, field.TypeBool, value)
	}
	if puo.mutation.DepositPayCleared() {
		_spec.ClearField(plan.FieldDepositPay, field.TypeBool)
	}
	if puo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BrandTable,
			Columns: []string{plan.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.BrandTable,
			Columns: []string{plan.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AgreementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.AgreementTable,
			Columns: []string{plan.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AgreementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   plan.AgreementTable,
			Columns: []string{plan.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !puo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   plan.CitiesTable,
			Columns: plan.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   plan.ParentTable,
			Columns: []string{plan.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ComplexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedComplexesIDs(); len(nodes) > 0 && !puo.mutation.ComplexesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ComplexesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.ComplexesTable,
			Columns: []string{plan.ComplexesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.CommissionsTable,
			Columns: []string{plan.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCommissionsIDs(); len(nodes) > 0 && !puo.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.CommissionsTable,
			Columns: []string{plan.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CommissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   plan.CommissionsTable,
			Columns: []string{plan.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Plan{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{plan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
