// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// CouponUpdate is the builder for updating Coupon entities.
type CouponUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponUpdate builder.
func (cu *CouponUpdate) Where(ps ...predicate.Coupon) *CouponUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CouponUpdate) SetUpdatedAt(t time.Time) *CouponUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CouponUpdate) SetDeletedAt(t time.Time) *CouponUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableDeletedAt(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CouponUpdate) ClearDeletedAt() *CouponUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetLastModifier sets the "last_modifier" field.
func (cu *CouponUpdate) SetLastModifier(m *model.Modifier) *CouponUpdate {
	cu.mutation.SetLastModifier(m)
	return cu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cu *CouponUpdate) ClearLastModifier() *CouponUpdate {
	cu.mutation.ClearLastModifier()
	return cu
}

// SetRemark sets the "remark" field.
func (cu *CouponUpdate) SetRemark(s string) *CouponUpdate {
	cu.mutation.SetRemark(s)
	return cu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableRemark(s *string) *CouponUpdate {
	if s != nil {
		cu.SetRemark(*s)
	}
	return cu
}

// ClearRemark clears the value of the "remark" field.
func (cu *CouponUpdate) ClearRemark() *CouponUpdate {
	cu.mutation.ClearRemark()
	return cu
}

// SetExpiredAt sets the "expired_at" field.
func (cu *CouponUpdate) SetExpiredAt(t time.Time) *CouponUpdate {
	cu.mutation.SetExpiredAt(t)
	return cu
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (cu *CouponUpdate) AddCityIDs(ids ...uint64) *CouponUpdate {
	cu.mutation.AddCityIDs(ids...)
	return cu
}

// AddCities adds the "cities" edges to the City entity.
func (cu *CouponUpdate) AddCities(c ...*City) *CouponUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCityIDs(ids...)
}

// AddPlanIDs adds the "plans" edge to the Plan entity by IDs.
func (cu *CouponUpdate) AddPlanIDs(ids ...uint64) *CouponUpdate {
	cu.mutation.AddPlanIDs(ids...)
	return cu
}

// AddPlans adds the "plans" edges to the Plan entity.
func (cu *CouponUpdate) AddPlans(p ...*Plan) *CouponUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPlanIDs(ids...)
}

// Mutation returns the CouponMutation object of the builder.
func (cu *CouponUpdate) Mutation() *CouponMutation {
	return cu.mutation
}

// ClearCities clears all "cities" edges to the City entity.
func (cu *CouponUpdate) ClearCities() *CouponUpdate {
	cu.mutation.ClearCities()
	return cu
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (cu *CouponUpdate) RemoveCityIDs(ids ...uint64) *CouponUpdate {
	cu.mutation.RemoveCityIDs(ids...)
	return cu
}

// RemoveCities removes "cities" edges to City entities.
func (cu *CouponUpdate) RemoveCities(c ...*City) *CouponUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCityIDs(ids...)
}

// ClearPlans clears all "plans" edges to the Plan entity.
func (cu *CouponUpdate) ClearPlans() *CouponUpdate {
	cu.mutation.ClearPlans()
	return cu
}

// RemovePlanIDs removes the "plans" edge to Plan entities by IDs.
func (cu *CouponUpdate) RemovePlanIDs(ids ...uint64) *CouponUpdate {
	cu.mutation.RemovePlanIDs(ids...)
	return cu
}

// RemovePlans removes "plans" edges to Plan entities.
func (cu *CouponUpdate) RemovePlans(p ...*Plan) *CouponUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePlanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CouponUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CouponUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CouponUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CouponUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CouponUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if coupon.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupon.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupon.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CouponUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coupon.Table,
			Columns: coupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupon.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupon.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupon.FieldDeletedAt,
		})
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: coupon.FieldDeletedAt,
		})
	}
	if cu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: coupon.FieldCreator,
		})
	}
	if value, ok := cu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: coupon.FieldLastModifier,
		})
	}
	if cu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: coupon.FieldLastModifier,
		})
	}
	if value, ok := cu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupon.FieldRemark,
		})
	}
	if cu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coupon.FieldRemark,
		})
	}
	if value, ok := cu.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupon.FieldExpiredAt,
		})
	}
	if cu.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.CitiesTable,
			Columns: coupon.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !cu.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.CitiesTable,
			Columns: coupon.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.CitiesTable,
			Columns: coupon.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.PlansTable,
			Columns: coupon.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPlansIDs(); len(nodes) > 0 && !cu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.PlansTable,
			Columns: coupon.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.PlansTable,
			Columns: coupon.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = cu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CouponUpdateOne is the builder for updating a single Coupon entity.
type CouponUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CouponUpdateOne) SetUpdatedAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CouponUpdateOne) SetDeletedAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableDeletedAt(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CouponUpdateOne) ClearDeletedAt() *CouponUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetLastModifier sets the "last_modifier" field.
func (cuo *CouponUpdateOne) SetLastModifier(m *model.Modifier) *CouponUpdateOne {
	cuo.mutation.SetLastModifier(m)
	return cuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cuo *CouponUpdateOne) ClearLastModifier() *CouponUpdateOne {
	cuo.mutation.ClearLastModifier()
	return cuo
}

// SetRemark sets the "remark" field.
func (cuo *CouponUpdateOne) SetRemark(s string) *CouponUpdateOne {
	cuo.mutation.SetRemark(s)
	return cuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableRemark(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetRemark(*s)
	}
	return cuo
}

// ClearRemark clears the value of the "remark" field.
func (cuo *CouponUpdateOne) ClearRemark() *CouponUpdateOne {
	cuo.mutation.ClearRemark()
	return cuo
}

// SetExpiredAt sets the "expired_at" field.
func (cuo *CouponUpdateOne) SetExpiredAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetExpiredAt(t)
	return cuo
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (cuo *CouponUpdateOne) AddCityIDs(ids ...uint64) *CouponUpdateOne {
	cuo.mutation.AddCityIDs(ids...)
	return cuo
}

// AddCities adds the "cities" edges to the City entity.
func (cuo *CouponUpdateOne) AddCities(c ...*City) *CouponUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCityIDs(ids...)
}

// AddPlanIDs adds the "plans" edge to the Plan entity by IDs.
func (cuo *CouponUpdateOne) AddPlanIDs(ids ...uint64) *CouponUpdateOne {
	cuo.mutation.AddPlanIDs(ids...)
	return cuo
}

// AddPlans adds the "plans" edges to the Plan entity.
func (cuo *CouponUpdateOne) AddPlans(p ...*Plan) *CouponUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPlanIDs(ids...)
}

// Mutation returns the CouponMutation object of the builder.
func (cuo *CouponUpdateOne) Mutation() *CouponMutation {
	return cuo.mutation
}

// ClearCities clears all "cities" edges to the City entity.
func (cuo *CouponUpdateOne) ClearCities() *CouponUpdateOne {
	cuo.mutation.ClearCities()
	return cuo
}

// RemoveCityIDs removes the "cities" edge to City entities by IDs.
func (cuo *CouponUpdateOne) RemoveCityIDs(ids ...uint64) *CouponUpdateOne {
	cuo.mutation.RemoveCityIDs(ids...)
	return cuo
}

// RemoveCities removes "cities" edges to City entities.
func (cuo *CouponUpdateOne) RemoveCities(c ...*City) *CouponUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCityIDs(ids...)
}

// ClearPlans clears all "plans" edges to the Plan entity.
func (cuo *CouponUpdateOne) ClearPlans() *CouponUpdateOne {
	cuo.mutation.ClearPlans()
	return cuo
}

// RemovePlanIDs removes the "plans" edge to Plan entities by IDs.
func (cuo *CouponUpdateOne) RemovePlanIDs(ids ...uint64) *CouponUpdateOne {
	cuo.mutation.RemovePlanIDs(ids...)
	return cuo
}

// RemovePlans removes "plans" edges to Plan entities.
func (cuo *CouponUpdateOne) RemovePlans(p ...*Plan) *CouponUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePlanIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CouponUpdateOne) Select(field string, fields ...string) *CouponUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coupon entity.
func (cuo *CouponUpdateOne) Save(ctx context.Context) (*Coupon, error) {
	var (
		err  error
		node *Coupon
	)
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Coupon)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CouponUpdateOne) SaveX(ctx context.Context) *Coupon {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CouponUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CouponUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CouponUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if coupon.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupon.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupon.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CouponUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CouponUpdateOne) sqlSave(ctx context.Context) (_node *Coupon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coupon.Table,
			Columns: coupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupon.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupon.FieldID)
		for _, f := range fields {
			if !coupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupon.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupon.FieldDeletedAt,
		})
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: coupon.FieldDeletedAt,
		})
	}
	if cuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: coupon.FieldCreator,
		})
	}
	if value, ok := cuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: coupon.FieldLastModifier,
		})
	}
	if cuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: coupon.FieldLastModifier,
		})
	}
	if value, ok := cuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupon.FieldRemark,
		})
	}
	if cuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: coupon.FieldRemark,
		})
	}
	if value, ok := cuo.mutation.ExpiredAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupon.FieldExpiredAt,
		})
	}
	if cuo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.CitiesTable,
			Columns: coupon.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedCitiesIDs(); len(nodes) > 0 && !cuo.mutation.CitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.CitiesTable,
			Columns: coupon.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.CitiesTable,
			Columns: coupon.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.PlansTable,
			Columns: coupon.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPlansIDs(); len(nodes) > 0 && !cuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.PlansTable,
			Columns: coupon.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   coupon.PlansTable,
			Columns: coupon.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = cuo.modifiers
	_node = &Coupon{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
