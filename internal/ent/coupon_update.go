// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CouponUpdate is the builder for updating Coupon entities.
type CouponUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponUpdate builder.
func (cu *CouponUpdate) Where(ps ...predicate.Coupon) *CouponUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CouponUpdate) SetUpdatedAt(t time.Time) *CouponUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetLastModifier sets the "last_modifier" field.
func (cu *CouponUpdate) SetLastModifier(m *model.Modifier) *CouponUpdate {
	cu.mutation.SetLastModifier(m)
	return cu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cu *CouponUpdate) ClearLastModifier() *CouponUpdate {
	cu.mutation.ClearLastModifier()
	return cu
}

// SetRemark sets the "remark" field.
func (cu *CouponUpdate) SetRemark(s string) *CouponUpdate {
	cu.mutation.SetRemark(s)
	return cu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableRemark(s *string) *CouponUpdate {
	if s != nil {
		cu.SetRemark(*s)
	}
	return cu
}

// ClearRemark clears the value of the "remark" field.
func (cu *CouponUpdate) ClearRemark() *CouponUpdate {
	cu.mutation.ClearRemark()
	return cu
}

// SetRiderID sets the "rider_id" field.
func (cu *CouponUpdate) SetRiderID(u uint64) *CouponUpdate {
	cu.mutation.SetRiderID(u)
	return cu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableRiderID(u *uint64) *CouponUpdate {
	if u != nil {
		cu.SetRiderID(*u)
	}
	return cu
}

// ClearRiderID clears the value of the "rider_id" field.
func (cu *CouponUpdate) ClearRiderID() *CouponUpdate {
	cu.mutation.ClearRiderID()
	return cu
}

// SetAssemblyID sets the "assembly_id" field.
func (cu *CouponUpdate) SetAssemblyID(u uint64) *CouponUpdate {
	cu.mutation.SetAssemblyID(u)
	return cu
}

// SetNillableAssemblyID sets the "assembly_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableAssemblyID(u *uint64) *CouponUpdate {
	if u != nil {
		cu.SetAssemblyID(*u)
	}
	return cu
}

// SetPlanID sets the "plan_id" field.
func (cu *CouponUpdate) SetPlanID(u uint64) *CouponUpdate {
	cu.mutation.SetPlanID(u)
	return cu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillablePlanID(u *uint64) *CouponUpdate {
	if u != nil {
		cu.SetPlanID(*u)
	}
	return cu
}

// ClearPlanID clears the value of the "plan_id" field.
func (cu *CouponUpdate) ClearPlanID() *CouponUpdate {
	cu.mutation.ClearPlanID()
	return cu
}

// SetTemplateID sets the "template_id" field.
func (cu *CouponUpdate) SetTemplateID(u uint64) *CouponUpdate {
	cu.mutation.SetTemplateID(u)
	return cu
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableTemplateID(u *uint64) *CouponUpdate {
	if u != nil {
		cu.SetTemplateID(*u)
	}
	return cu
}

// SetOrderID sets the "order_id" field.
func (cu *CouponUpdate) SetOrderID(u uint64) *CouponUpdate {
	cu.mutation.SetOrderID(u)
	return cu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableOrderID(u *uint64) *CouponUpdate {
	if u != nil {
		cu.SetOrderID(*u)
	}
	return cu
}

// ClearOrderID clears the value of the "order_id" field.
func (cu *CouponUpdate) ClearOrderID() *CouponUpdate {
	cu.mutation.ClearOrderID()
	return cu
}

// SetRule sets the "rule" field.
func (cu *CouponUpdate) SetRule(u uint8) *CouponUpdate {
	cu.mutation.ResetRule()
	cu.mutation.SetRule(u)
	return cu
}

// SetNillableRule sets the "rule" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableRule(u *uint8) *CouponUpdate {
	if u != nil {
		cu.SetRule(*u)
	}
	return cu
}

// AddRule adds u to the "rule" field.
func (cu *CouponUpdate) AddRule(u int8) *CouponUpdate {
	cu.mutation.AddRule(u)
	return cu
}

// SetMultiple sets the "multiple" field.
func (cu *CouponUpdate) SetMultiple(b bool) *CouponUpdate {
	cu.mutation.SetMultiple(b)
	return cu
}

// SetNillableMultiple sets the "multiple" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableMultiple(b *bool) *CouponUpdate {
	if b != nil {
		cu.SetMultiple(*b)
	}
	return cu
}

// SetAmount sets the "amount" field.
func (cu *CouponUpdate) SetAmount(f float64) *CouponUpdate {
	cu.mutation.ResetAmount()
	cu.mutation.SetAmount(f)
	return cu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableAmount(f *float64) *CouponUpdate {
	if f != nil {
		cu.SetAmount(*f)
	}
	return cu
}

// AddAmount adds f to the "amount" field.
func (cu *CouponUpdate) AddAmount(f float64) *CouponUpdate {
	cu.mutation.AddAmount(f)
	return cu
}

// SetCode sets the "code" field.
func (cu *CouponUpdate) SetCode(s string) *CouponUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableCode(s *string) *CouponUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetExpiresAt sets the "expires_at" field.
func (cu *CouponUpdate) SetExpiresAt(t time.Time) *CouponUpdate {
	cu.mutation.SetExpiresAt(t)
	return cu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableExpiresAt(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetExpiresAt(*t)
	}
	return cu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cu *CouponUpdate) ClearExpiresAt() *CouponUpdate {
	cu.mutation.ClearExpiresAt()
	return cu
}

// SetUsedAt sets the "used_at" field.
func (cu *CouponUpdate) SetUsedAt(t time.Time) *CouponUpdate {
	cu.mutation.SetUsedAt(t)
	return cu
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (cu *CouponUpdate) SetNillableUsedAt(t *time.Time) *CouponUpdate {
	if t != nil {
		cu.SetUsedAt(*t)
	}
	return cu
}

// ClearUsedAt clears the value of the "used_at" field.
func (cu *CouponUpdate) ClearUsedAt() *CouponUpdate {
	cu.mutation.ClearUsedAt()
	return cu
}

// SetDuration sets the "duration" field.
func (cu *CouponUpdate) SetDuration(md *model.CouponDuration) *CouponUpdate {
	cu.mutation.SetDuration(md)
	return cu
}

// SetPlans sets the "plans" field.
func (cu *CouponUpdate) SetPlans(m []*model.Plan) *CouponUpdate {
	cu.mutation.SetPlans(m)
	return cu
}

// AppendPlans appends m to the "plans" field.
func (cu *CouponUpdate) AppendPlans(m []*model.Plan) *CouponUpdate {
	cu.mutation.AppendPlans(m)
	return cu
}

// ClearPlans clears the value of the "plans" field.
func (cu *CouponUpdate) ClearPlans() *CouponUpdate {
	cu.mutation.ClearPlans()
	return cu
}

// SetCities sets the "cities" field.
func (cu *CouponUpdate) SetCities(m []model.City) *CouponUpdate {
	cu.mutation.SetCities(m)
	return cu
}

// AppendCities appends m to the "cities" field.
func (cu *CouponUpdate) AppendCities(m []model.City) *CouponUpdate {
	cu.mutation.AppendCities(m)
	return cu
}

// ClearCities clears the value of the "cities" field.
func (cu *CouponUpdate) ClearCities() *CouponUpdate {
	cu.mutation.ClearCities()
	return cu
}

// SetRider sets the "rider" edge to the Rider entity.
func (cu *CouponUpdate) SetRider(r *Rider) *CouponUpdate {
	return cu.SetRiderID(r.ID)
}

// SetAssembly sets the "assembly" edge to the CouponAssembly entity.
func (cu *CouponUpdate) SetAssembly(c *CouponAssembly) *CouponUpdate {
	return cu.SetAssemblyID(c.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cu *CouponUpdate) SetPlan(p *Plan) *CouponUpdate {
	return cu.SetPlanID(p.ID)
}

// SetTemplate sets the "template" edge to the CouponTemplate entity.
func (cu *CouponUpdate) SetTemplate(c *CouponTemplate) *CouponUpdate {
	return cu.SetTemplateID(c.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (cu *CouponUpdate) SetOrder(o *Order) *CouponUpdate {
	return cu.SetOrderID(o.ID)
}

// Mutation returns the CouponMutation object of the builder.
func (cu *CouponUpdate) Mutation() *CouponMutation {
	return cu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cu *CouponUpdate) ClearRider() *CouponUpdate {
	cu.mutation.ClearRider()
	return cu
}

// ClearAssembly clears the "assembly" edge to the CouponAssembly entity.
func (cu *CouponUpdate) ClearAssembly() *CouponUpdate {
	cu.mutation.ClearAssembly()
	return cu
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (cu *CouponUpdate) ClearPlan() *CouponUpdate {
	cu.mutation.ClearPlan()
	return cu
}

// ClearTemplate clears the "template" edge to the CouponTemplate entity.
func (cu *CouponUpdate) ClearTemplate() *CouponUpdate {
	cu.mutation.ClearTemplate()
	return cu
}

// ClearOrder clears the "order" edge to the Order entity.
func (cu *CouponUpdate) ClearOrder() *CouponUpdate {
	cu.mutation.ClearOrder()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CouponUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CouponUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CouponUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CouponUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CouponUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if coupon.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupon.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupon.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CouponUpdate) check() error {
	if _, ok := cu.mutation.AssemblyID(); cu.mutation.AssemblyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Coupon.assembly"`)
	}
	if _, ok := cu.mutation.TemplateID(); cu.mutation.TemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Coupon.template"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CouponUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.CreatorCleared() {
		_spec.ClearField(coupon.FieldCreator, field.TypeJSON)
	}
	if value, ok := cu.mutation.LastModifier(); ok {
		_spec.SetField(coupon.FieldLastModifier, field.TypeJSON, value)
	}
	if cu.mutation.LastModifierCleared() {
		_spec.ClearField(coupon.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cu.mutation.Remark(); ok {
		_spec.SetField(coupon.FieldRemark, field.TypeString, value)
	}
	if cu.mutation.RemarkCleared() {
		_spec.ClearField(coupon.FieldRemark, field.TypeString)
	}
	if value, ok := cu.mutation.Rule(); ok {
		_spec.SetField(coupon.FieldRule, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedRule(); ok {
		_spec.AddField(coupon.FieldRule, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.Multiple(); ok {
		_spec.SetField(coupon.FieldMultiple, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Amount(); ok {
		_spec.SetField(coupon.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedAmount(); ok {
		_spec.AddField(coupon.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(coupon.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.ExpiresAt(); ok {
		_spec.SetField(coupon.FieldExpiresAt, field.TypeTime, value)
	}
	if cu.mutation.ExpiresAtCleared() {
		_spec.ClearField(coupon.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UsedAt(); ok {
		_spec.SetField(coupon.FieldUsedAt, field.TypeTime, value)
	}
	if cu.mutation.UsedAtCleared() {
		_spec.ClearField(coupon.FieldUsedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Duration(); ok {
		_spec.SetField(coupon.FieldDuration, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.Plans(); ok {
		_spec.SetField(coupon.FieldPlans, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedPlans(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, coupon.FieldPlans, value)
		})
	}
	if cu.mutation.PlansCleared() {
		_spec.ClearField(coupon.FieldPlans, field.TypeJSON)
	}
	if value, ok := cu.mutation.Cities(); ok {
		_spec.SetField(coupon.FieldCities, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedCities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, coupon.FieldCities, value)
		})
	}
	if cu.mutation.CitiesCleared() {
		_spec.ClearField(coupon.FieldCities, field.TypeJSON)
	}
	if cu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.RiderTable,
			Columns: []string{coupon.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.RiderTable,
			Columns: []string{coupon.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AssemblyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.AssemblyTable,
			Columns: []string{coupon.AssemblyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassembly.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AssemblyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.AssemblyTable,
			Columns: []string{coupon.AssemblyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassembly.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.PlanTable,
			Columns: []string{coupon.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.PlanTable,
			Columns: []string{coupon.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.TemplateTable,
			Columns: []string{coupon.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupontemplate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.TemplateTable,
			Columns: []string{coupon.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupontemplate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OrderTable,
			Columns: []string{coupon.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OrderTable,
			Columns: []string{coupon.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CouponUpdateOne is the builder for updating a single Coupon entity.
type CouponUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CouponUpdateOne) SetUpdatedAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetLastModifier sets the "last_modifier" field.
func (cuo *CouponUpdateOne) SetLastModifier(m *model.Modifier) *CouponUpdateOne {
	cuo.mutation.SetLastModifier(m)
	return cuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cuo *CouponUpdateOne) ClearLastModifier() *CouponUpdateOne {
	cuo.mutation.ClearLastModifier()
	return cuo
}

// SetRemark sets the "remark" field.
func (cuo *CouponUpdateOne) SetRemark(s string) *CouponUpdateOne {
	cuo.mutation.SetRemark(s)
	return cuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableRemark(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetRemark(*s)
	}
	return cuo
}

// ClearRemark clears the value of the "remark" field.
func (cuo *CouponUpdateOne) ClearRemark() *CouponUpdateOne {
	cuo.mutation.ClearRemark()
	return cuo
}

// SetRiderID sets the "rider_id" field.
func (cuo *CouponUpdateOne) SetRiderID(u uint64) *CouponUpdateOne {
	cuo.mutation.SetRiderID(u)
	return cuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableRiderID(u *uint64) *CouponUpdateOne {
	if u != nil {
		cuo.SetRiderID(*u)
	}
	return cuo
}

// ClearRiderID clears the value of the "rider_id" field.
func (cuo *CouponUpdateOne) ClearRiderID() *CouponUpdateOne {
	cuo.mutation.ClearRiderID()
	return cuo
}

// SetAssemblyID sets the "assembly_id" field.
func (cuo *CouponUpdateOne) SetAssemblyID(u uint64) *CouponUpdateOne {
	cuo.mutation.SetAssemblyID(u)
	return cuo
}

// SetNillableAssemblyID sets the "assembly_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableAssemblyID(u *uint64) *CouponUpdateOne {
	if u != nil {
		cuo.SetAssemblyID(*u)
	}
	return cuo
}

// SetPlanID sets the "plan_id" field.
func (cuo *CouponUpdateOne) SetPlanID(u uint64) *CouponUpdateOne {
	cuo.mutation.SetPlanID(u)
	return cuo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillablePlanID(u *uint64) *CouponUpdateOne {
	if u != nil {
		cuo.SetPlanID(*u)
	}
	return cuo
}

// ClearPlanID clears the value of the "plan_id" field.
func (cuo *CouponUpdateOne) ClearPlanID() *CouponUpdateOne {
	cuo.mutation.ClearPlanID()
	return cuo
}

// SetTemplateID sets the "template_id" field.
func (cuo *CouponUpdateOne) SetTemplateID(u uint64) *CouponUpdateOne {
	cuo.mutation.SetTemplateID(u)
	return cuo
}

// SetNillableTemplateID sets the "template_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableTemplateID(u *uint64) *CouponUpdateOne {
	if u != nil {
		cuo.SetTemplateID(*u)
	}
	return cuo
}

// SetOrderID sets the "order_id" field.
func (cuo *CouponUpdateOne) SetOrderID(u uint64) *CouponUpdateOne {
	cuo.mutation.SetOrderID(u)
	return cuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableOrderID(u *uint64) *CouponUpdateOne {
	if u != nil {
		cuo.SetOrderID(*u)
	}
	return cuo
}

// ClearOrderID clears the value of the "order_id" field.
func (cuo *CouponUpdateOne) ClearOrderID() *CouponUpdateOne {
	cuo.mutation.ClearOrderID()
	return cuo
}

// SetRule sets the "rule" field.
func (cuo *CouponUpdateOne) SetRule(u uint8) *CouponUpdateOne {
	cuo.mutation.ResetRule()
	cuo.mutation.SetRule(u)
	return cuo
}

// SetNillableRule sets the "rule" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableRule(u *uint8) *CouponUpdateOne {
	if u != nil {
		cuo.SetRule(*u)
	}
	return cuo
}

// AddRule adds u to the "rule" field.
func (cuo *CouponUpdateOne) AddRule(u int8) *CouponUpdateOne {
	cuo.mutation.AddRule(u)
	return cuo
}

// SetMultiple sets the "multiple" field.
func (cuo *CouponUpdateOne) SetMultiple(b bool) *CouponUpdateOne {
	cuo.mutation.SetMultiple(b)
	return cuo
}

// SetNillableMultiple sets the "multiple" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableMultiple(b *bool) *CouponUpdateOne {
	if b != nil {
		cuo.SetMultiple(*b)
	}
	return cuo
}

// SetAmount sets the "amount" field.
func (cuo *CouponUpdateOne) SetAmount(f float64) *CouponUpdateOne {
	cuo.mutation.ResetAmount()
	cuo.mutation.SetAmount(f)
	return cuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableAmount(f *float64) *CouponUpdateOne {
	if f != nil {
		cuo.SetAmount(*f)
	}
	return cuo
}

// AddAmount adds f to the "amount" field.
func (cuo *CouponUpdateOne) AddAmount(f float64) *CouponUpdateOne {
	cuo.mutation.AddAmount(f)
	return cuo
}

// SetCode sets the "code" field.
func (cuo *CouponUpdateOne) SetCode(s string) *CouponUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableCode(s *string) *CouponUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetExpiresAt sets the "expires_at" field.
func (cuo *CouponUpdateOne) SetExpiresAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetExpiresAt(t)
	return cuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableExpiresAt(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetExpiresAt(*t)
	}
	return cuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cuo *CouponUpdateOne) ClearExpiresAt() *CouponUpdateOne {
	cuo.mutation.ClearExpiresAt()
	return cuo
}

// SetUsedAt sets the "used_at" field.
func (cuo *CouponUpdateOne) SetUsedAt(t time.Time) *CouponUpdateOne {
	cuo.mutation.SetUsedAt(t)
	return cuo
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (cuo *CouponUpdateOne) SetNillableUsedAt(t *time.Time) *CouponUpdateOne {
	if t != nil {
		cuo.SetUsedAt(*t)
	}
	return cuo
}

// ClearUsedAt clears the value of the "used_at" field.
func (cuo *CouponUpdateOne) ClearUsedAt() *CouponUpdateOne {
	cuo.mutation.ClearUsedAt()
	return cuo
}

// SetDuration sets the "duration" field.
func (cuo *CouponUpdateOne) SetDuration(md *model.CouponDuration) *CouponUpdateOne {
	cuo.mutation.SetDuration(md)
	return cuo
}

// SetPlans sets the "plans" field.
func (cuo *CouponUpdateOne) SetPlans(m []*model.Plan) *CouponUpdateOne {
	cuo.mutation.SetPlans(m)
	return cuo
}

// AppendPlans appends m to the "plans" field.
func (cuo *CouponUpdateOne) AppendPlans(m []*model.Plan) *CouponUpdateOne {
	cuo.mutation.AppendPlans(m)
	return cuo
}

// ClearPlans clears the value of the "plans" field.
func (cuo *CouponUpdateOne) ClearPlans() *CouponUpdateOne {
	cuo.mutation.ClearPlans()
	return cuo
}

// SetCities sets the "cities" field.
func (cuo *CouponUpdateOne) SetCities(m []model.City) *CouponUpdateOne {
	cuo.mutation.SetCities(m)
	return cuo
}

// AppendCities appends m to the "cities" field.
func (cuo *CouponUpdateOne) AppendCities(m []model.City) *CouponUpdateOne {
	cuo.mutation.AppendCities(m)
	return cuo
}

// ClearCities clears the value of the "cities" field.
func (cuo *CouponUpdateOne) ClearCities() *CouponUpdateOne {
	cuo.mutation.ClearCities()
	return cuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (cuo *CouponUpdateOne) SetRider(r *Rider) *CouponUpdateOne {
	return cuo.SetRiderID(r.ID)
}

// SetAssembly sets the "assembly" edge to the CouponAssembly entity.
func (cuo *CouponUpdateOne) SetAssembly(c *CouponAssembly) *CouponUpdateOne {
	return cuo.SetAssemblyID(c.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cuo *CouponUpdateOne) SetPlan(p *Plan) *CouponUpdateOne {
	return cuo.SetPlanID(p.ID)
}

// SetTemplate sets the "template" edge to the CouponTemplate entity.
func (cuo *CouponUpdateOne) SetTemplate(c *CouponTemplate) *CouponUpdateOne {
	return cuo.SetTemplateID(c.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (cuo *CouponUpdateOne) SetOrder(o *Order) *CouponUpdateOne {
	return cuo.SetOrderID(o.ID)
}

// Mutation returns the CouponMutation object of the builder.
func (cuo *CouponUpdateOne) Mutation() *CouponMutation {
	return cuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cuo *CouponUpdateOne) ClearRider() *CouponUpdateOne {
	cuo.mutation.ClearRider()
	return cuo
}

// ClearAssembly clears the "assembly" edge to the CouponAssembly entity.
func (cuo *CouponUpdateOne) ClearAssembly() *CouponUpdateOne {
	cuo.mutation.ClearAssembly()
	return cuo
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (cuo *CouponUpdateOne) ClearPlan() *CouponUpdateOne {
	cuo.mutation.ClearPlan()
	return cuo
}

// ClearTemplate clears the "template" edge to the CouponTemplate entity.
func (cuo *CouponUpdateOne) ClearTemplate() *CouponUpdateOne {
	cuo.mutation.ClearTemplate()
	return cuo
}

// ClearOrder clears the "order" edge to the Order entity.
func (cuo *CouponUpdateOne) ClearOrder() *CouponUpdateOne {
	cuo.mutation.ClearOrder()
	return cuo
}

// Where appends a list predicates to the CouponUpdate builder.
func (cuo *CouponUpdateOne) Where(ps ...predicate.Coupon) *CouponUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CouponUpdateOne) Select(field string, fields ...string) *CouponUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coupon entity.
func (cuo *CouponUpdateOne) Save(ctx context.Context) (*Coupon, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CouponUpdateOne) SaveX(ctx context.Context) *Coupon {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CouponUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CouponUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CouponUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if coupon.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupon.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupon.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CouponUpdateOne) check() error {
	if _, ok := cuo.mutation.AssemblyID(); cuo.mutation.AssemblyCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Coupon.assembly"`)
	}
	if _, ok := cuo.mutation.TemplateID(); cuo.mutation.TemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Coupon.template"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CouponUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CouponUpdateOne) sqlSave(ctx context.Context) (_node *Coupon, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coupon.Table, coupon.Columns, sqlgraph.NewFieldSpec(coupon.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupon.FieldID)
		for _, f := range fields {
			if !coupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.CreatorCleared() {
		_spec.ClearField(coupon.FieldCreator, field.TypeJSON)
	}
	if value, ok := cuo.mutation.LastModifier(); ok {
		_spec.SetField(coupon.FieldLastModifier, field.TypeJSON, value)
	}
	if cuo.mutation.LastModifierCleared() {
		_spec.ClearField(coupon.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Remark(); ok {
		_spec.SetField(coupon.FieldRemark, field.TypeString, value)
	}
	if cuo.mutation.RemarkCleared() {
		_spec.ClearField(coupon.FieldRemark, field.TypeString)
	}
	if value, ok := cuo.mutation.Rule(); ok {
		_spec.SetField(coupon.FieldRule, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedRule(); ok {
		_spec.AddField(coupon.FieldRule, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.Multiple(); ok {
		_spec.SetField(coupon.FieldMultiple, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Amount(); ok {
		_spec.SetField(coupon.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedAmount(); ok {
		_spec.AddField(coupon.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(coupon.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.ExpiresAt(); ok {
		_spec.SetField(coupon.FieldExpiresAt, field.TypeTime, value)
	}
	if cuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(coupon.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UsedAt(); ok {
		_spec.SetField(coupon.FieldUsedAt, field.TypeTime, value)
	}
	if cuo.mutation.UsedAtCleared() {
		_spec.ClearField(coupon.FieldUsedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Duration(); ok {
		_spec.SetField(coupon.FieldDuration, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.Plans(); ok {
		_spec.SetField(coupon.FieldPlans, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedPlans(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, coupon.FieldPlans, value)
		})
	}
	if cuo.mutation.PlansCleared() {
		_spec.ClearField(coupon.FieldPlans, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Cities(); ok {
		_spec.SetField(coupon.FieldCities, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedCities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, coupon.FieldCities, value)
		})
	}
	if cuo.mutation.CitiesCleared() {
		_spec.ClearField(coupon.FieldCities, field.TypeJSON)
	}
	if cuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.RiderTable,
			Columns: []string{coupon.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.RiderTable,
			Columns: []string{coupon.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AssemblyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.AssemblyTable,
			Columns: []string{coupon.AssemblyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassembly.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AssemblyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.AssemblyTable,
			Columns: []string{coupon.AssemblyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(couponassembly.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.PlanTable,
			Columns: []string{coupon.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.PlanTable,
			Columns: []string{coupon.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.TemplateTable,
			Columns: []string{coupon.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupontemplate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.TemplateTable,
			Columns: []string{coupon.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(coupontemplate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OrderTable,
			Columns: []string{coupon.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OrderTable,
			Columns: []string{coupon.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Coupon{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
