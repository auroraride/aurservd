// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetexchange"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CabinetExchangeUpdate is the builder for updating CabinetExchange entities.
type CabinetExchangeUpdate struct {
	config
	hooks    []Hook
	mutation *CabinetExchangeMutation
}

// Where appends a list predicates to the CabinetExchangeUpdate builder.
func (ceu *CabinetExchangeUpdate) Where(ps ...predicate.CabinetExchange) *CabinetExchangeUpdate {
	ceu.mutation.Where(ps...)
	return ceu
}

// SetUpdatedAt sets the "updated_at" field.
func (ceu *CabinetExchangeUpdate) SetUpdatedAt(t time.Time) *CabinetExchangeUpdate {
	ceu.mutation.SetUpdatedAt(t)
	return ceu
}

// SetDeletedAt sets the "deleted_at" field.
func (ceu *CabinetExchangeUpdate) SetDeletedAt(t time.Time) *CabinetExchangeUpdate {
	ceu.mutation.SetDeletedAt(t)
	return ceu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ceu *CabinetExchangeUpdate) SetNillableDeletedAt(t *time.Time) *CabinetExchangeUpdate {
	if t != nil {
		ceu.SetDeletedAt(*t)
	}
	return ceu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ceu *CabinetExchangeUpdate) ClearDeletedAt() *CabinetExchangeUpdate {
	ceu.mutation.ClearDeletedAt()
	return ceu
}

// SetLastModifier sets the "last_modifier" field.
func (ceu *CabinetExchangeUpdate) SetLastModifier(m *model.Modifier) *CabinetExchangeUpdate {
	ceu.mutation.SetLastModifier(m)
	return ceu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ceu *CabinetExchangeUpdate) ClearLastModifier() *CabinetExchangeUpdate {
	ceu.mutation.ClearLastModifier()
	return ceu
}

// SetRemark sets the "remark" field.
func (ceu *CabinetExchangeUpdate) SetRemark(s string) *CabinetExchangeUpdate {
	ceu.mutation.SetRemark(s)
	return ceu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ceu *CabinetExchangeUpdate) SetNillableRemark(s *string) *CabinetExchangeUpdate {
	if s != nil {
		ceu.SetRemark(*s)
	}
	return ceu
}

// ClearRemark clears the value of the "remark" field.
func (ceu *CabinetExchangeUpdate) ClearRemark() *CabinetExchangeUpdate {
	ceu.mutation.ClearRemark()
	return ceu
}

// SetRiderID sets the "rider_id" field.
func (ceu *CabinetExchangeUpdate) SetRiderID(u uint64) *CabinetExchangeUpdate {
	ceu.mutation.SetRiderID(u)
	return ceu
}

// SetCabinetID sets the "cabinet_id" field.
func (ceu *CabinetExchangeUpdate) SetCabinetID(u uint64) *CabinetExchangeUpdate {
	ceu.mutation.SetCabinetID(u)
	return ceu
}

// SetAlternative sets the "alternative" field.
func (ceu *CabinetExchangeUpdate) SetAlternative(b bool) *CabinetExchangeUpdate {
	ceu.mutation.SetAlternative(b)
	return ceu
}

// SetNillableAlternative sets the "alternative" field if the given value is not nil.
func (ceu *CabinetExchangeUpdate) SetNillableAlternative(b *bool) *CabinetExchangeUpdate {
	if b != nil {
		ceu.SetAlternative(*b)
	}
	return ceu
}

// SetStep sets the "step" field.
func (ceu *CabinetExchangeUpdate) SetStep(u uint) *CabinetExchangeUpdate {
	ceu.mutation.ResetStep()
	ceu.mutation.SetStep(u)
	return ceu
}

// AddStep adds u to the "step" field.
func (ceu *CabinetExchangeUpdate) AddStep(u int) *CabinetExchangeUpdate {
	ceu.mutation.AddStep(u)
	return ceu
}

// SetStatus sets the "status" field.
func (ceu *CabinetExchangeUpdate) SetStatus(u uint) *CabinetExchangeUpdate {
	ceu.mutation.ResetStatus()
	ceu.mutation.SetStatus(u)
	return ceu
}

// AddStatus adds u to the "status" field.
func (ceu *CabinetExchangeUpdate) AddStatus(u int) *CabinetExchangeUpdate {
	ceu.mutation.AddStatus(u)
	return ceu
}

// SetBinIndex sets the "bin_index" field.
func (ceu *CabinetExchangeUpdate) SetBinIndex(u uint) *CabinetExchangeUpdate {
	ceu.mutation.ResetBinIndex()
	ceu.mutation.SetBinIndex(u)
	return ceu
}

// AddBinIndex adds u to the "bin_index" field.
func (ceu *CabinetExchangeUpdate) AddBinIndex(u int) *CabinetExchangeUpdate {
	ceu.mutation.AddBinIndex(u)
	return ceu
}

// SetBin sets the "bin" field.
func (ceu *CabinetExchangeUpdate) SetBin(mb model.CabinetBin) *CabinetExchangeUpdate {
	ceu.mutation.SetBin(mb)
	return ceu
}

// SetRider sets the "rider" edge to the Rider entity.
func (ceu *CabinetExchangeUpdate) SetRider(r *Rider) *CabinetExchangeUpdate {
	return ceu.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ceu *CabinetExchangeUpdate) SetCabinet(c *Cabinet) *CabinetExchangeUpdate {
	return ceu.SetCabinetID(c.ID)
}

// Mutation returns the CabinetExchangeMutation object of the builder.
func (ceu *CabinetExchangeUpdate) Mutation() *CabinetExchangeMutation {
	return ceu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ceu *CabinetExchangeUpdate) ClearRider() *CabinetExchangeUpdate {
	ceu.mutation.ClearRider()
	return ceu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (ceu *CabinetExchangeUpdate) ClearCabinet() *CabinetExchangeUpdate {
	ceu.mutation.ClearCabinet()
	return ceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ceu *CabinetExchangeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ceu.defaults(); err != nil {
		return 0, err
	}
	if len(ceu.hooks) == 0 {
		if err = ceu.check(); err != nil {
			return 0, err
		}
		affected, err = ceu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CabinetExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceu.check(); err != nil {
				return 0, err
			}
			ceu.mutation = mutation
			affected, err = ceu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ceu.hooks) - 1; i >= 0; i-- {
			if ceu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ceu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceu *CabinetExchangeUpdate) SaveX(ctx context.Context) int {
	affected, err := ceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ceu *CabinetExchangeUpdate) Exec(ctx context.Context) error {
	_, err := ceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceu *CabinetExchangeUpdate) ExecX(ctx context.Context) {
	if err := ceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceu *CabinetExchangeUpdate) defaults() error {
	if _, ok := ceu.mutation.UpdatedAt(); !ok {
		if cabinetexchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinetexchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cabinetexchange.UpdateDefaultUpdatedAt()
		ceu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ceu *CabinetExchangeUpdate) check() error {
	if _, ok := ceu.mutation.RiderID(); ceu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetExchange.rider"`)
	}
	if _, ok := ceu.mutation.CabinetID(); ceu.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetExchange.cabinet"`)
	}
	return nil
}

func (ceu *CabinetExchangeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cabinetexchange.Table,
			Columns: cabinetexchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetexchange.FieldID,
			},
		},
	}
	if ps := ceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetexchange.FieldUpdatedAt,
		})
	}
	if value, ok := ceu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetexchange.FieldDeletedAt,
		})
	}
	if ceu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: cabinetexchange.FieldDeletedAt,
		})
	}
	if ceu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: cabinetexchange.FieldCreator,
		})
	}
	if value, ok := ceu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetexchange.FieldLastModifier,
		})
	}
	if ceu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: cabinetexchange.FieldLastModifier,
		})
	}
	if value, ok := ceu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinetexchange.FieldRemark,
		})
	}
	if ceu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cabinetexchange.FieldRemark,
		})
	}
	if value, ok := ceu.mutation.Alternative(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: cabinetexchange.FieldAlternative,
		})
	}
	if value, ok := ceu.mutation.Step(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStep,
		})
	}
	if value, ok := ceu.mutation.AddedStep(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStep,
		})
	}
	if value, ok := ceu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStatus,
		})
	}
	if value, ok := ceu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStatus,
		})
	}
	if value, ok := ceu.mutation.BinIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldBinIndex,
		})
	}
	if value, ok := ceu.mutation.AddedBinIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldBinIndex,
		})
	}
	if value, ok := ceu.mutation.Bin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetexchange.FieldBin,
		})
	}
	if ceu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.RiderTable,
			Columns: []string{cabinetexchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.RiderTable,
			Columns: []string{cabinetexchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.CabinetTable,
			Columns: []string{cabinetexchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.CabinetTable,
			Columns: []string{cabinetexchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cabinetexchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CabinetExchangeUpdateOne is the builder for updating a single CabinetExchange entity.
type CabinetExchangeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CabinetExchangeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ceuo *CabinetExchangeUpdateOne) SetUpdatedAt(t time.Time) *CabinetExchangeUpdateOne {
	ceuo.mutation.SetUpdatedAt(t)
	return ceuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ceuo *CabinetExchangeUpdateOne) SetDeletedAt(t time.Time) *CabinetExchangeUpdateOne {
	ceuo.mutation.SetDeletedAt(t)
	return ceuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ceuo *CabinetExchangeUpdateOne) SetNillableDeletedAt(t *time.Time) *CabinetExchangeUpdateOne {
	if t != nil {
		ceuo.SetDeletedAt(*t)
	}
	return ceuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ceuo *CabinetExchangeUpdateOne) ClearDeletedAt() *CabinetExchangeUpdateOne {
	ceuo.mutation.ClearDeletedAt()
	return ceuo
}

// SetLastModifier sets the "last_modifier" field.
func (ceuo *CabinetExchangeUpdateOne) SetLastModifier(m *model.Modifier) *CabinetExchangeUpdateOne {
	ceuo.mutation.SetLastModifier(m)
	return ceuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ceuo *CabinetExchangeUpdateOne) ClearLastModifier() *CabinetExchangeUpdateOne {
	ceuo.mutation.ClearLastModifier()
	return ceuo
}

// SetRemark sets the "remark" field.
func (ceuo *CabinetExchangeUpdateOne) SetRemark(s string) *CabinetExchangeUpdateOne {
	ceuo.mutation.SetRemark(s)
	return ceuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ceuo *CabinetExchangeUpdateOne) SetNillableRemark(s *string) *CabinetExchangeUpdateOne {
	if s != nil {
		ceuo.SetRemark(*s)
	}
	return ceuo
}

// ClearRemark clears the value of the "remark" field.
func (ceuo *CabinetExchangeUpdateOne) ClearRemark() *CabinetExchangeUpdateOne {
	ceuo.mutation.ClearRemark()
	return ceuo
}

// SetRiderID sets the "rider_id" field.
func (ceuo *CabinetExchangeUpdateOne) SetRiderID(u uint64) *CabinetExchangeUpdateOne {
	ceuo.mutation.SetRiderID(u)
	return ceuo
}

// SetCabinetID sets the "cabinet_id" field.
func (ceuo *CabinetExchangeUpdateOne) SetCabinetID(u uint64) *CabinetExchangeUpdateOne {
	ceuo.mutation.SetCabinetID(u)
	return ceuo
}

// SetAlternative sets the "alternative" field.
func (ceuo *CabinetExchangeUpdateOne) SetAlternative(b bool) *CabinetExchangeUpdateOne {
	ceuo.mutation.SetAlternative(b)
	return ceuo
}

// SetNillableAlternative sets the "alternative" field if the given value is not nil.
func (ceuo *CabinetExchangeUpdateOne) SetNillableAlternative(b *bool) *CabinetExchangeUpdateOne {
	if b != nil {
		ceuo.SetAlternative(*b)
	}
	return ceuo
}

// SetStep sets the "step" field.
func (ceuo *CabinetExchangeUpdateOne) SetStep(u uint) *CabinetExchangeUpdateOne {
	ceuo.mutation.ResetStep()
	ceuo.mutation.SetStep(u)
	return ceuo
}

// AddStep adds u to the "step" field.
func (ceuo *CabinetExchangeUpdateOne) AddStep(u int) *CabinetExchangeUpdateOne {
	ceuo.mutation.AddStep(u)
	return ceuo
}

// SetStatus sets the "status" field.
func (ceuo *CabinetExchangeUpdateOne) SetStatus(u uint) *CabinetExchangeUpdateOne {
	ceuo.mutation.ResetStatus()
	ceuo.mutation.SetStatus(u)
	return ceuo
}

// AddStatus adds u to the "status" field.
func (ceuo *CabinetExchangeUpdateOne) AddStatus(u int) *CabinetExchangeUpdateOne {
	ceuo.mutation.AddStatus(u)
	return ceuo
}

// SetBinIndex sets the "bin_index" field.
func (ceuo *CabinetExchangeUpdateOne) SetBinIndex(u uint) *CabinetExchangeUpdateOne {
	ceuo.mutation.ResetBinIndex()
	ceuo.mutation.SetBinIndex(u)
	return ceuo
}

// AddBinIndex adds u to the "bin_index" field.
func (ceuo *CabinetExchangeUpdateOne) AddBinIndex(u int) *CabinetExchangeUpdateOne {
	ceuo.mutation.AddBinIndex(u)
	return ceuo
}

// SetBin sets the "bin" field.
func (ceuo *CabinetExchangeUpdateOne) SetBin(mb model.CabinetBin) *CabinetExchangeUpdateOne {
	ceuo.mutation.SetBin(mb)
	return ceuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (ceuo *CabinetExchangeUpdateOne) SetRider(r *Rider) *CabinetExchangeUpdateOne {
	return ceuo.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ceuo *CabinetExchangeUpdateOne) SetCabinet(c *Cabinet) *CabinetExchangeUpdateOne {
	return ceuo.SetCabinetID(c.ID)
}

// Mutation returns the CabinetExchangeMutation object of the builder.
func (ceuo *CabinetExchangeUpdateOne) Mutation() *CabinetExchangeMutation {
	return ceuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ceuo *CabinetExchangeUpdateOne) ClearRider() *CabinetExchangeUpdateOne {
	ceuo.mutation.ClearRider()
	return ceuo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (ceuo *CabinetExchangeUpdateOne) ClearCabinet() *CabinetExchangeUpdateOne {
	ceuo.mutation.ClearCabinet()
	return ceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ceuo *CabinetExchangeUpdateOne) Select(field string, fields ...string) *CabinetExchangeUpdateOne {
	ceuo.fields = append([]string{field}, fields...)
	return ceuo
}

// Save executes the query and returns the updated CabinetExchange entity.
func (ceuo *CabinetExchangeUpdateOne) Save(ctx context.Context) (*CabinetExchange, error) {
	var (
		err  error
		node *CabinetExchange
	)
	if err := ceuo.defaults(); err != nil {
		return nil, err
	}
	if len(ceuo.hooks) == 0 {
		if err = ceuo.check(); err != nil {
			return nil, err
		}
		node, err = ceuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CabinetExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ceuo.check(); err != nil {
				return nil, err
			}
			ceuo.mutation = mutation
			node, err = ceuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ceuo.hooks) - 1; i >= 0; i-- {
			if ceuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ceuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ceuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CabinetExchange)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CabinetExchangeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ceuo *CabinetExchangeUpdateOne) SaveX(ctx context.Context) *CabinetExchange {
	node, err := ceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ceuo *CabinetExchangeUpdateOne) Exec(ctx context.Context) error {
	_, err := ceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ceuo *CabinetExchangeUpdateOne) ExecX(ctx context.Context) {
	if err := ceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ceuo *CabinetExchangeUpdateOne) defaults() error {
	if _, ok := ceuo.mutation.UpdatedAt(); !ok {
		if cabinetexchange.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinetexchange.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cabinetexchange.UpdateDefaultUpdatedAt()
		ceuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ceuo *CabinetExchangeUpdateOne) check() error {
	if _, ok := ceuo.mutation.RiderID(); ceuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetExchange.rider"`)
	}
	if _, ok := ceuo.mutation.CabinetID(); ceuo.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CabinetExchange.cabinet"`)
	}
	return nil
}

func (ceuo *CabinetExchangeUpdateOne) sqlSave(ctx context.Context) (_node *CabinetExchange, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cabinetexchange.Table,
			Columns: cabinetexchange.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetexchange.FieldID,
			},
		},
	}
	id, ok := ceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CabinetExchange.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cabinetexchange.FieldID)
		for _, f := range fields {
			if !cabinetexchange.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cabinetexchange.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ceuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetexchange.FieldUpdatedAt,
		})
	}
	if value, ok := ceuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetexchange.FieldDeletedAt,
		})
	}
	if ceuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: cabinetexchange.FieldDeletedAt,
		})
	}
	if ceuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: cabinetexchange.FieldCreator,
		})
	}
	if value, ok := ceuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetexchange.FieldLastModifier,
		})
	}
	if ceuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: cabinetexchange.FieldLastModifier,
		})
	}
	if value, ok := ceuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinetexchange.FieldRemark,
		})
	}
	if ceuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: cabinetexchange.FieldRemark,
		})
	}
	if value, ok := ceuo.mutation.Alternative(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: cabinetexchange.FieldAlternative,
		})
	}
	if value, ok := ceuo.mutation.Step(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStep,
		})
	}
	if value, ok := ceuo.mutation.AddedStep(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStep,
		})
	}
	if value, ok := ceuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStatus,
		})
	}
	if value, ok := ceuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStatus,
		})
	}
	if value, ok := ceuo.mutation.BinIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldBinIndex,
		})
	}
	if value, ok := ceuo.mutation.AddedBinIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldBinIndex,
		})
	}
	if value, ok := ceuo.mutation.Bin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetexchange.FieldBin,
		})
	}
	if ceuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.RiderTable,
			Columns: []string{cabinetexchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.RiderTable,
			Columns: []string{cabinetexchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ceuo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.CabinetTable,
			Columns: []string{cabinetexchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ceuo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.CabinetTable,
			Columns: []string{cabinetexchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CabinetExchange{config: ceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cabinetexchange.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
