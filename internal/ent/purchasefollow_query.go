// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/purchasefollow"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
)

// PurchaseFollowQuery is the builder for querying PurchaseFollow entities.
type PurchaseFollowQuery struct {
	config
	ctx        *QueryContext
	order      []purchasefollow.OrderOption
	inters     []Interceptor
	predicates []predicate.PurchaseFollow
	withOrder  *PurchaseOrderQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PurchaseFollowQuery builder.
func (pfq *PurchaseFollowQuery) Where(ps ...predicate.PurchaseFollow) *PurchaseFollowQuery {
	pfq.predicates = append(pfq.predicates, ps...)
	return pfq
}

// Limit the number of records to be returned by this query.
func (pfq *PurchaseFollowQuery) Limit(limit int) *PurchaseFollowQuery {
	pfq.ctx.Limit = &limit
	return pfq
}

// Offset to start from.
func (pfq *PurchaseFollowQuery) Offset(offset int) *PurchaseFollowQuery {
	pfq.ctx.Offset = &offset
	return pfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pfq *PurchaseFollowQuery) Unique(unique bool) *PurchaseFollowQuery {
	pfq.ctx.Unique = &unique
	return pfq
}

// Order specifies how the records should be ordered.
func (pfq *PurchaseFollowQuery) Order(o ...purchasefollow.OrderOption) *PurchaseFollowQuery {
	pfq.order = append(pfq.order, o...)
	return pfq
}

// QueryOrder chains the current query on the "order" edge.
func (pfq *PurchaseFollowQuery) QueryOrder() *PurchaseOrderQuery {
	query := (&PurchaseOrderClient{config: pfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(purchasefollow.Table, purchasefollow.FieldID, selector),
			sqlgraph.To(purchaseorder.Table, purchaseorder.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, purchasefollow.OrderTable, purchasefollow.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(pfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PurchaseFollow entity from the query.
// Returns a *NotFoundError when no PurchaseFollow was found.
func (pfq *PurchaseFollowQuery) First(ctx context.Context) (*PurchaseFollow, error) {
	nodes, err := pfq.Limit(1).All(setContextOp(ctx, pfq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{purchasefollow.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pfq *PurchaseFollowQuery) FirstX(ctx context.Context) *PurchaseFollow {
	node, err := pfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PurchaseFollow ID from the query.
// Returns a *NotFoundError when no PurchaseFollow ID was found.
func (pfq *PurchaseFollowQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pfq.Limit(1).IDs(setContextOp(ctx, pfq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{purchasefollow.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pfq *PurchaseFollowQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := pfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PurchaseFollow entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PurchaseFollow entity is found.
// Returns a *NotFoundError when no PurchaseFollow entities are found.
func (pfq *PurchaseFollowQuery) Only(ctx context.Context) (*PurchaseFollow, error) {
	nodes, err := pfq.Limit(2).All(setContextOp(ctx, pfq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{purchasefollow.Label}
	default:
		return nil, &NotSingularError{purchasefollow.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pfq *PurchaseFollowQuery) OnlyX(ctx context.Context) *PurchaseFollow {
	node, err := pfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PurchaseFollow ID in the query.
// Returns a *NotSingularError when more than one PurchaseFollow ID is found.
// Returns a *NotFoundError when no entities are found.
func (pfq *PurchaseFollowQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pfq.Limit(2).IDs(setContextOp(ctx, pfq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{purchasefollow.Label}
	default:
		err = &NotSingularError{purchasefollow.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pfq *PurchaseFollowQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := pfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PurchaseFollows.
func (pfq *PurchaseFollowQuery) All(ctx context.Context) ([]*PurchaseFollow, error) {
	ctx = setContextOp(ctx, pfq.ctx, ent.OpQueryAll)
	if err := pfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PurchaseFollow, *PurchaseFollowQuery]()
	return withInterceptors[[]*PurchaseFollow](ctx, pfq, qr, pfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pfq *PurchaseFollowQuery) AllX(ctx context.Context) []*PurchaseFollow {
	nodes, err := pfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PurchaseFollow IDs.
func (pfq *PurchaseFollowQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if pfq.ctx.Unique == nil && pfq.path != nil {
		pfq.Unique(true)
	}
	ctx = setContextOp(ctx, pfq.ctx, ent.OpQueryIDs)
	if err = pfq.Select(purchasefollow.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pfq *PurchaseFollowQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := pfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pfq *PurchaseFollowQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pfq.ctx, ent.OpQueryCount)
	if err := pfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pfq, querierCount[*PurchaseFollowQuery](), pfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pfq *PurchaseFollowQuery) CountX(ctx context.Context) int {
	count, err := pfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pfq *PurchaseFollowQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pfq.ctx, ent.OpQueryExist)
	switch _, err := pfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pfq *PurchaseFollowQuery) ExistX(ctx context.Context) bool {
	exist, err := pfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PurchaseFollowQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pfq *PurchaseFollowQuery) Clone() *PurchaseFollowQuery {
	if pfq == nil {
		return nil
	}
	return &PurchaseFollowQuery{
		config:     pfq.config,
		ctx:        pfq.ctx.Clone(),
		order:      append([]purchasefollow.OrderOption{}, pfq.order...),
		inters:     append([]Interceptor{}, pfq.inters...),
		predicates: append([]predicate.PurchaseFollow{}, pfq.predicates...),
		withOrder:  pfq.withOrder.Clone(),
		// clone intermediate query.
		sql:       pfq.sql.Clone(),
		path:      pfq.path,
		modifiers: append([]func(*sql.Selector){}, pfq.modifiers...),
	}
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (pfq *PurchaseFollowQuery) WithOrder(opts ...func(*PurchaseOrderQuery)) *PurchaseFollowQuery {
	query := (&PurchaseOrderClient{config: pfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pfq.withOrder = query
	return pfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PurchaseFollow.Query().
//		GroupBy(purchasefollow.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pfq *PurchaseFollowQuery) GroupBy(field string, fields ...string) *PurchaseFollowGroupBy {
	pfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PurchaseFollowGroupBy{build: pfq}
	grbuild.flds = &pfq.ctx.Fields
	grbuild.label = purchasefollow.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PurchaseFollow.Query().
//		Select(purchasefollow.FieldCreatedAt).
//		Scan(ctx, &v)
func (pfq *PurchaseFollowQuery) Select(fields ...string) *PurchaseFollowSelect {
	pfq.ctx.Fields = append(pfq.ctx.Fields, fields...)
	sbuild := &PurchaseFollowSelect{PurchaseFollowQuery: pfq}
	sbuild.label = purchasefollow.Label
	sbuild.flds, sbuild.scan = &pfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PurchaseFollowSelect configured with the given aggregations.
func (pfq *PurchaseFollowQuery) Aggregate(fns ...AggregateFunc) *PurchaseFollowSelect {
	return pfq.Select().Aggregate(fns...)
}

func (pfq *PurchaseFollowQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pfq); err != nil {
				return err
			}
		}
	}
	for _, f := range pfq.ctx.Fields {
		if !purchasefollow.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pfq.path != nil {
		prev, err := pfq.path(ctx)
		if err != nil {
			return err
		}
		pfq.sql = prev
	}
	return nil
}

func (pfq *PurchaseFollowQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PurchaseFollow, error) {
	var (
		nodes       = []*PurchaseFollow{}
		_spec       = pfq.querySpec()
		loadedTypes = [1]bool{
			pfq.withOrder != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PurchaseFollow).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PurchaseFollow{config: pfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pfq.modifiers) > 0 {
		_spec.Modifiers = pfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pfq.withOrder; query != nil {
		if err := pfq.loadOrder(ctx, query, nodes, nil,
			func(n *PurchaseFollow, e *PurchaseOrder) { n.Edges.Order = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pfq *PurchaseFollowQuery) loadOrder(ctx context.Context, query *PurchaseOrderQuery, nodes []*PurchaseFollow, init func(*PurchaseFollow), assign func(*PurchaseFollow, *PurchaseOrder)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PurchaseFollow)
	for i := range nodes {
		fk := nodes[i].OrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(purchaseorder.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pfq *PurchaseFollowQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pfq.querySpec()
	if len(pfq.modifiers) > 0 {
		_spec.Modifiers = pfq.modifiers
	}
	_spec.Node.Columns = pfq.ctx.Fields
	if len(pfq.ctx.Fields) > 0 {
		_spec.Unique = pfq.ctx.Unique != nil && *pfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pfq.driver, _spec)
}

func (pfq *PurchaseFollowQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(purchasefollow.Table, purchasefollow.Columns, sqlgraph.NewFieldSpec(purchasefollow.FieldID, field.TypeUint64))
	_spec.From = pfq.sql
	if unique := pfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pfq.path != nil {
		_spec.Unique = true
	}
	if fields := pfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purchasefollow.FieldID)
		for i := range fields {
			if fields[i] != purchasefollow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pfq.withOrder != nil {
			_spec.Node.AddColumnOnce(purchasefollow.FieldOrderID)
		}
	}
	if ps := pfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pfq *PurchaseFollowQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pfq.driver.Dialect())
	t1 := builder.Table(purchasefollow.Table)
	columns := pfq.ctx.Fields
	if len(columns) == 0 {
		columns = purchasefollow.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pfq.sql != nil {
		selector = pfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pfq.ctx.Unique != nil && *pfq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pfq.modifiers {
		m(selector)
	}
	for _, p := range pfq.predicates {
		p(selector)
	}
	for _, p := range pfq.order {
		p(selector)
	}
	if offset := pfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pfq *PurchaseFollowQuery) Modify(modifiers ...func(s *sql.Selector)) *PurchaseFollowSelect {
	pfq.modifiers = append(pfq.modifiers, modifiers...)
	return pfq.Select()
}

type PurchaseFollowQueryWith string

var (
	PurchaseFollowQueryWithOrder PurchaseFollowQueryWith = "Order"
)

func (pfq *PurchaseFollowQuery) With(withEdges ...PurchaseFollowQueryWith) *PurchaseFollowQuery {
	for _, v := range withEdges {
		switch v {
		case PurchaseFollowQueryWithOrder:
			pfq.WithOrder()
		}
	}
	return pfq
}

// PurchaseFollowGroupBy is the group-by builder for PurchaseFollow entities.
type PurchaseFollowGroupBy struct {
	selector
	build *PurchaseFollowQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pfgb *PurchaseFollowGroupBy) Aggregate(fns ...AggregateFunc) *PurchaseFollowGroupBy {
	pfgb.fns = append(pfgb.fns, fns...)
	return pfgb
}

// Scan applies the selector query and scans the result into the given value.
func (pfgb *PurchaseFollowGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfgb.build.ctx, ent.OpQueryGroupBy)
	if err := pfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PurchaseFollowQuery, *PurchaseFollowGroupBy](ctx, pfgb.build, pfgb, pfgb.build.inters, v)
}

func (pfgb *PurchaseFollowGroupBy) sqlScan(ctx context.Context, root *PurchaseFollowQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pfgb.fns))
	for _, fn := range pfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pfgb.flds)+len(pfgb.fns))
		for _, f := range *pfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PurchaseFollowSelect is the builder for selecting fields of PurchaseFollow entities.
type PurchaseFollowSelect struct {
	*PurchaseFollowQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pfs *PurchaseFollowSelect) Aggregate(fns ...AggregateFunc) *PurchaseFollowSelect {
	pfs.fns = append(pfs.fns, fns...)
	return pfs
}

// Scan applies the selector query and scans the result into the given value.
func (pfs *PurchaseFollowSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pfs.ctx, ent.OpQuerySelect)
	if err := pfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PurchaseFollowQuery, *PurchaseFollowSelect](ctx, pfs.PurchaseFollowQuery, pfs, pfs.inters, v)
}

func (pfs *PurchaseFollowSelect) sqlScan(ctx context.Context, root *PurchaseFollowQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pfs.fns))
	for _, fn := range pfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pfs *PurchaseFollowSelect) Modify(modifiers ...func(s *sql.Selector)) *PurchaseFollowSelect {
	pfs.modifiers = append(pfs.modifiers, modifiers...)
	return pfs
}
