// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// BatteryFlowQuery is the builder for querying BatteryFlow entities.
type BatteryFlowQuery struct {
	config
	ctx           *QueryContext
	order         []batteryflow.OrderOption
	inters        []Interceptor
	predicates    []predicate.BatteryFlow
	withSubscribe *SubscribeQuery
	withCabinet   *CabinetQuery
	withRider     *RiderQuery
	withFKs       bool
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BatteryFlowQuery builder.
func (bfq *BatteryFlowQuery) Where(ps ...predicate.BatteryFlow) *BatteryFlowQuery {
	bfq.predicates = append(bfq.predicates, ps...)
	return bfq
}

// Limit the number of records to be returned by this query.
func (bfq *BatteryFlowQuery) Limit(limit int) *BatteryFlowQuery {
	bfq.ctx.Limit = &limit
	return bfq
}

// Offset to start from.
func (bfq *BatteryFlowQuery) Offset(offset int) *BatteryFlowQuery {
	bfq.ctx.Offset = &offset
	return bfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bfq *BatteryFlowQuery) Unique(unique bool) *BatteryFlowQuery {
	bfq.ctx.Unique = &unique
	return bfq
}

// Order specifies how the records should be ordered.
func (bfq *BatteryFlowQuery) Order(o ...batteryflow.OrderOption) *BatteryFlowQuery {
	bfq.order = append(bfq.order, o...)
	return bfq
}

// QuerySubscribe chains the current query on the "subscribe" edge.
func (bfq *BatteryFlowQuery) QuerySubscribe() *SubscribeQuery {
	query := (&SubscribeClient{config: bfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, batteryflow.SubscribeTable, batteryflow.SubscribeColumn),
		)
		fromU = sqlgraph.SetNeighbors(bfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinet chains the current query on the "cabinet" edge.
func (bfq *BatteryFlowQuery) QueryCabinet() *CabinetQuery {
	query := (&CabinetClient{config: bfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, batteryflow.CabinetTable, batteryflow.CabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(bfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (bfq *BatteryFlowQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: bfq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, batteryflow.RiderTable, batteryflow.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(bfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BatteryFlow entity from the query.
// Returns a *NotFoundError when no BatteryFlow was found.
func (bfq *BatteryFlowQuery) First(ctx context.Context) (*BatteryFlow, error) {
	nodes, err := bfq.Limit(1).All(setContextOp(ctx, bfq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{batteryflow.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bfq *BatteryFlowQuery) FirstX(ctx context.Context) *BatteryFlow {
	node, err := bfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BatteryFlow ID from the query.
// Returns a *NotFoundError when no BatteryFlow ID was found.
func (bfq *BatteryFlowQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bfq.Limit(1).IDs(setContextOp(ctx, bfq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{batteryflow.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bfq *BatteryFlowQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := bfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BatteryFlow entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BatteryFlow entity is found.
// Returns a *NotFoundError when no BatteryFlow entities are found.
func (bfq *BatteryFlowQuery) Only(ctx context.Context) (*BatteryFlow, error) {
	nodes, err := bfq.Limit(2).All(setContextOp(ctx, bfq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{batteryflow.Label}
	default:
		return nil, &NotSingularError{batteryflow.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bfq *BatteryFlowQuery) OnlyX(ctx context.Context) *BatteryFlow {
	node, err := bfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BatteryFlow ID in the query.
// Returns a *NotSingularError when more than one BatteryFlow ID is found.
// Returns a *NotFoundError when no entities are found.
func (bfq *BatteryFlowQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bfq.Limit(2).IDs(setContextOp(ctx, bfq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{batteryflow.Label}
	default:
		err = &NotSingularError{batteryflow.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bfq *BatteryFlowQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := bfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BatteryFlows.
func (bfq *BatteryFlowQuery) All(ctx context.Context) ([]*BatteryFlow, error) {
	ctx = setContextOp(ctx, bfq.ctx, "All")
	if err := bfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BatteryFlow, *BatteryFlowQuery]()
	return withInterceptors[[]*BatteryFlow](ctx, bfq, qr, bfq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bfq *BatteryFlowQuery) AllX(ctx context.Context) []*BatteryFlow {
	nodes, err := bfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BatteryFlow IDs.
func (bfq *BatteryFlowQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if bfq.ctx.Unique == nil && bfq.path != nil {
		bfq.Unique(true)
	}
	ctx = setContextOp(ctx, bfq.ctx, "IDs")
	if err = bfq.Select(batteryflow.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bfq *BatteryFlowQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := bfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bfq *BatteryFlowQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bfq.ctx, "Count")
	if err := bfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bfq, querierCount[*BatteryFlowQuery](), bfq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bfq *BatteryFlowQuery) CountX(ctx context.Context) int {
	count, err := bfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bfq *BatteryFlowQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bfq.ctx, "Exist")
	switch _, err := bfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bfq *BatteryFlowQuery) ExistX(ctx context.Context) bool {
	exist, err := bfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BatteryFlowQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bfq *BatteryFlowQuery) Clone() *BatteryFlowQuery {
	if bfq == nil {
		return nil
	}
	return &BatteryFlowQuery{
		config:        bfq.config,
		ctx:           bfq.ctx.Clone(),
		order:         append([]batteryflow.OrderOption{}, bfq.order...),
		inters:        append([]Interceptor{}, bfq.inters...),
		predicates:    append([]predicate.BatteryFlow{}, bfq.predicates...),
		withSubscribe: bfq.withSubscribe.Clone(),
		withCabinet:   bfq.withCabinet.Clone(),
		withRider:     bfq.withRider.Clone(),
		// clone intermediate query.
		sql:  bfq.sql.Clone(),
		path: bfq.path,
	}
}

// WithSubscribe tells the query-builder to eager-load the nodes that are connected to
// the "subscribe" edge. The optional arguments are used to configure the query builder of the edge.
func (bfq *BatteryFlowQuery) WithSubscribe(opts ...func(*SubscribeQuery)) *BatteryFlowQuery {
	query := (&SubscribeClient{config: bfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bfq.withSubscribe = query
	return bfq
}

// WithCabinet tells the query-builder to eager-load the nodes that are connected to
// the "cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (bfq *BatteryFlowQuery) WithCabinet(opts ...func(*CabinetQuery)) *BatteryFlowQuery {
	query := (&CabinetClient{config: bfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bfq.withCabinet = query
	return bfq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (bfq *BatteryFlowQuery) WithRider(opts ...func(*RiderQuery)) *BatteryFlowQuery {
	query := (&RiderClient{config: bfq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bfq.withRider = query
	return bfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BatteryFlow.Query().
//		GroupBy(batteryflow.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bfq *BatteryFlowQuery) GroupBy(field string, fields ...string) *BatteryFlowGroupBy {
	bfq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BatteryFlowGroupBy{build: bfq}
	grbuild.flds = &bfq.ctx.Fields
	grbuild.label = batteryflow.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.BatteryFlow.Query().
//		Select(batteryflow.FieldCreatedAt).
//		Scan(ctx, &v)
func (bfq *BatteryFlowQuery) Select(fields ...string) *BatteryFlowSelect {
	bfq.ctx.Fields = append(bfq.ctx.Fields, fields...)
	sbuild := &BatteryFlowSelect{BatteryFlowQuery: bfq}
	sbuild.label = batteryflow.Label
	sbuild.flds, sbuild.scan = &bfq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BatteryFlowSelect configured with the given aggregations.
func (bfq *BatteryFlowQuery) Aggregate(fns ...AggregateFunc) *BatteryFlowSelect {
	return bfq.Select().Aggregate(fns...)
}

func (bfq *BatteryFlowQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bfq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bfq); err != nil {
				return err
			}
		}
	}
	for _, f := range bfq.ctx.Fields {
		if !batteryflow.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bfq.path != nil {
		prev, err := bfq.path(ctx)
		if err != nil {
			return err
		}
		bfq.sql = prev
	}
	return nil
}

func (bfq *BatteryFlowQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BatteryFlow, error) {
	var (
		nodes       = []*BatteryFlow{}
		withFKs     = bfq.withFKs
		_spec       = bfq.querySpec()
		loadedTypes = [3]bool{
			bfq.withSubscribe != nil,
			bfq.withCabinet != nil,
			bfq.withRider != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, batteryflow.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BatteryFlow).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BatteryFlow{config: bfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bfq.modifiers) > 0 {
		_spec.Modifiers = bfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bfq.withSubscribe; query != nil {
		if err := bfq.loadSubscribe(ctx, query, nodes, nil,
			func(n *BatteryFlow, e *Subscribe) { n.Edges.Subscribe = e }); err != nil {
			return nil, err
		}
	}
	if query := bfq.withCabinet; query != nil {
		if err := bfq.loadCabinet(ctx, query, nodes, nil,
			func(n *BatteryFlow, e *Cabinet) { n.Edges.Cabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := bfq.withRider; query != nil {
		if err := bfq.loadRider(ctx, query, nodes, nil,
			func(n *BatteryFlow, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bfq *BatteryFlowQuery) loadSubscribe(ctx context.Context, query *SubscribeQuery, nodes []*BatteryFlow, init func(*BatteryFlow), assign func(*BatteryFlow, *Subscribe)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*BatteryFlow)
	for i := range nodes {
		if nodes[i].SubscribeID == nil {
			continue
		}
		fk := *nodes[i].SubscribeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscribe.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bfq *BatteryFlowQuery) loadCabinet(ctx context.Context, query *CabinetQuery, nodes []*BatteryFlow, init func(*BatteryFlow), assign func(*BatteryFlow, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*BatteryFlow)
	for i := range nodes {
		fk := nodes[i].CabinetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "cabinet_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bfq *BatteryFlowQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*BatteryFlow, init func(*BatteryFlow), assign func(*BatteryFlow, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*BatteryFlow)
	for i := range nodes {
		fk := nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bfq *BatteryFlowQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bfq.querySpec()
	if len(bfq.modifiers) > 0 {
		_spec.Modifiers = bfq.modifiers
	}
	_spec.Node.Columns = bfq.ctx.Fields
	if len(bfq.ctx.Fields) > 0 {
		_spec.Unique = bfq.ctx.Unique != nil && *bfq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bfq.driver, _spec)
}

func (bfq *BatteryFlowQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(batteryflow.Table, batteryflow.Columns, sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64))
	_spec.From = bfq.sql
	if unique := bfq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bfq.path != nil {
		_spec.Unique = true
	}
	if fields := bfq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batteryflow.FieldID)
		for i := range fields {
			if fields[i] != batteryflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bfq.withSubscribe != nil {
			_spec.Node.AddColumnOnce(batteryflow.FieldSubscribeID)
		}
		if bfq.withCabinet != nil {
			_spec.Node.AddColumnOnce(batteryflow.FieldCabinetID)
		}
		if bfq.withRider != nil {
			_spec.Node.AddColumnOnce(batteryflow.FieldRiderID)
		}
	}
	if ps := bfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bfq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bfq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bfq *BatteryFlowQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bfq.driver.Dialect())
	t1 := builder.Table(batteryflow.Table)
	columns := bfq.ctx.Fields
	if len(columns) == 0 {
		columns = batteryflow.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bfq.sql != nil {
		selector = bfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bfq.ctx.Unique != nil && *bfq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range bfq.modifiers {
		m(selector)
	}
	for _, p := range bfq.predicates {
		p(selector)
	}
	for _, p := range bfq.order {
		p(selector)
	}
	if offset := bfq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bfq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bfq *BatteryFlowQuery) Modify(modifiers ...func(s *sql.Selector)) *BatteryFlowSelect {
	bfq.modifiers = append(bfq.modifiers, modifiers...)
	return bfq.Select()
}

type BatteryFlowQueryWith string

var (
	BatteryFlowQueryWithSubscribe BatteryFlowQueryWith = "Subscribe"
	BatteryFlowQueryWithCabinet   BatteryFlowQueryWith = "Cabinet"
	BatteryFlowQueryWithRider     BatteryFlowQueryWith = "Rider"
)

func (bfq *BatteryFlowQuery) With(withEdges ...BatteryFlowQueryWith) *BatteryFlowQuery {
	for _, v := range withEdges {
		switch v {
		case BatteryFlowQueryWithSubscribe:
			bfq.WithSubscribe()
		case BatteryFlowQueryWithCabinet:
			bfq.WithCabinet()
		case BatteryFlowQueryWithRider:
			bfq.WithRider()
		}
	}
	return bfq
}

// BatteryFlowGroupBy is the group-by builder for BatteryFlow entities.
type BatteryFlowGroupBy struct {
	selector
	build *BatteryFlowQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bfgb *BatteryFlowGroupBy) Aggregate(fns ...AggregateFunc) *BatteryFlowGroupBy {
	bfgb.fns = append(bfgb.fns, fns...)
	return bfgb
}

// Scan applies the selector query and scans the result into the given value.
func (bfgb *BatteryFlowGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bfgb.build.ctx, "GroupBy")
	if err := bfgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BatteryFlowQuery, *BatteryFlowGroupBy](ctx, bfgb.build, bfgb, bfgb.build.inters, v)
}

func (bfgb *BatteryFlowGroupBy) sqlScan(ctx context.Context, root *BatteryFlowQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bfgb.fns))
	for _, fn := range bfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bfgb.flds)+len(bfgb.fns))
		for _, f := range *bfgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bfgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bfgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BatteryFlowSelect is the builder for selecting fields of BatteryFlow entities.
type BatteryFlowSelect struct {
	*BatteryFlowQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bfs *BatteryFlowSelect) Aggregate(fns ...AggregateFunc) *BatteryFlowSelect {
	bfs.fns = append(bfs.fns, fns...)
	return bfs
}

// Scan applies the selector query and scans the result into the given value.
func (bfs *BatteryFlowSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bfs.ctx, "Select")
	if err := bfs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BatteryFlowQuery, *BatteryFlowSelect](ctx, bfs.BatteryFlowQuery, bfs, bfs.inters, v)
}

func (bfs *BatteryFlowSelect) sqlScan(ctx context.Context, root *BatteryFlowQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bfs.fns))
	for _, fn := range bfs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bfs *BatteryFlowSelect) Modify(modifiers ...func(s *sql.Selector)) *BatteryFlowSelect {
	bfs.modifiers = append(bfs.modifiers, modifiers...)
	return bfs
}
