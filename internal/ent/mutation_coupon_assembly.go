// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/couponassembly"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// CouponAssemblyMutation represents an operation that mutates the CouponAssembly nodes in the graph.
type CouponAssemblyMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	created_at      *time.Time
	updated_at      *time.Time
	creator         **model.Modifier
	last_modifier   **model.Modifier
	remark          *string
	total           *int
	addtotal        *int
	expired_type    *uint8
	addexpired_type *int8
	rule            *uint8
	addrule         *int8
	amount          *float64
	addamount       *float64
	multiple        *bool
	plans           *[]model.Plan
	cities          *[]model.City
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*CouponAssembly, error)
	predicates      []predicate.CouponAssembly
}

var _ ent.Mutation = (*CouponAssemblyMutation)(nil)

// couponassemblyOption allows management of the mutation configuration using functional options.
type couponassemblyOption func(*CouponAssemblyMutation)

// newCouponAssemblyMutation creates new mutation for the CouponAssembly entity.
func newCouponAssemblyMutation(c config, op Op, opts ...couponassemblyOption) *CouponAssemblyMutation {
	m := &CouponAssemblyMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponAssembly,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponAssemblyID sets the ID field of the mutation.
func withCouponAssemblyID(id uint64) couponassemblyOption {
	return func(m *CouponAssemblyMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponAssembly
		)
		m.oldValue = func(ctx context.Context) (*CouponAssembly, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponAssembly.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponAssembly sets the old CouponAssembly of the mutation.
func withCouponAssembly(node *CouponAssembly) couponassemblyOption {
	return func(m *CouponAssemblyMutation) {
		m.oldValue = func(context.Context) (*CouponAssembly, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponAssemblyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponAssemblyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponAssemblyMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponAssemblyMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CouponAssembly.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CouponAssemblyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CouponAssemblyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CouponAssemblyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CouponAssemblyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CouponAssemblyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CouponAssemblyMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreator sets the "creator" field.
func (m *CouponAssemblyMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *CouponAssemblyMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *CouponAssemblyMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[couponassembly.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *CouponAssemblyMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[couponassembly.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *CouponAssemblyMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, couponassembly.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *CouponAssemblyMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *CouponAssemblyMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *CouponAssemblyMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[couponassembly.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *CouponAssemblyMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[couponassembly.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *CouponAssemblyMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, couponassembly.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *CouponAssemblyMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CouponAssemblyMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *CouponAssemblyMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[couponassembly.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *CouponAssemblyMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[couponassembly.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *CouponAssemblyMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, couponassembly.FieldRemark)
}

// SetTotal sets the "total" field.
func (m *CouponAssemblyMutation) SetTotal(i int) {
	m.total = &i
	m.addtotal = nil
}

// Total returns the value of the "total" field in the mutation.
func (m *CouponAssemblyMutation) Total() (r int, exists bool) {
	v := m.total
	if v == nil {
		return
	}
	return *v, true
}

// OldTotal returns the old "total" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldTotal(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotal: %w", err)
	}
	return oldValue.Total, nil
}

// AddTotal adds i to the "total" field.
func (m *CouponAssemblyMutation) AddTotal(i int) {
	if m.addtotal != nil {
		*m.addtotal += i
	} else {
		m.addtotal = &i
	}
}

// AddedTotal returns the value that was added to the "total" field in this mutation.
func (m *CouponAssemblyMutation) AddedTotal() (r int, exists bool) {
	v := m.addtotal
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotal resets all changes to the "total" field.
func (m *CouponAssemblyMutation) ResetTotal() {
	m.total = nil
	m.addtotal = nil
}

// SetExpiredType sets the "expired_type" field.
func (m *CouponAssemblyMutation) SetExpiredType(u uint8) {
	m.expired_type = &u
	m.addexpired_type = nil
}

// ExpiredType returns the value of the "expired_type" field in the mutation.
func (m *CouponAssemblyMutation) ExpiredType() (r uint8, exists bool) {
	v := m.expired_type
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiredType returns the old "expired_type" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldExpiredType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiredType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiredType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiredType: %w", err)
	}
	return oldValue.ExpiredType, nil
}

// AddExpiredType adds u to the "expired_type" field.
func (m *CouponAssemblyMutation) AddExpiredType(u int8) {
	if m.addexpired_type != nil {
		*m.addexpired_type += u
	} else {
		m.addexpired_type = &u
	}
}

// AddedExpiredType returns the value that was added to the "expired_type" field in this mutation.
func (m *CouponAssemblyMutation) AddedExpiredType() (r int8, exists bool) {
	v := m.addexpired_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiredType resets all changes to the "expired_type" field.
func (m *CouponAssemblyMutation) ResetExpiredType() {
	m.expired_type = nil
	m.addexpired_type = nil
}

// SetRule sets the "rule" field.
func (m *CouponAssemblyMutation) SetRule(u uint8) {
	m.rule = &u
	m.addrule = nil
}

// Rule returns the value of the "rule" field in the mutation.
func (m *CouponAssemblyMutation) Rule() (r uint8, exists bool) {
	v := m.rule
	if v == nil {
		return
	}
	return *v, true
}

// OldRule returns the old "rule" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldRule(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRule: %w", err)
	}
	return oldValue.Rule, nil
}

// AddRule adds u to the "rule" field.
func (m *CouponAssemblyMutation) AddRule(u int8) {
	if m.addrule != nil {
		*m.addrule += u
	} else {
		m.addrule = &u
	}
}

// AddedRule returns the value that was added to the "rule" field in this mutation.
func (m *CouponAssemblyMutation) AddedRule() (r int8, exists bool) {
	v := m.addrule
	if v == nil {
		return
	}
	return *v, true
}

// ResetRule resets all changes to the "rule" field.
func (m *CouponAssemblyMutation) ResetRule() {
	m.rule = nil
	m.addrule = nil
}

// SetAmount sets the "amount" field.
func (m *CouponAssemblyMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *CouponAssemblyMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *CouponAssemblyMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *CouponAssemblyMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *CouponAssemblyMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetMultiple sets the "multiple" field.
func (m *CouponAssemblyMutation) SetMultiple(b bool) {
	m.multiple = &b
}

// Multiple returns the value of the "multiple" field in the mutation.
func (m *CouponAssemblyMutation) Multiple() (r bool, exists bool) {
	v := m.multiple
	if v == nil {
		return
	}
	return *v, true
}

// OldMultiple returns the old "multiple" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldMultiple(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMultiple is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMultiple requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMultiple: %w", err)
	}
	return oldValue.Multiple, nil
}

// ResetMultiple resets all changes to the "multiple" field.
func (m *CouponAssemblyMutation) ResetMultiple() {
	m.multiple = nil
}

// SetPlans sets the "plans" field.
func (m *CouponAssemblyMutation) SetPlans(value []model.Plan) {
	m.plans = &value
}

// Plans returns the value of the "plans" field in the mutation.
func (m *CouponAssemblyMutation) Plans() (r []model.Plan, exists bool) {
	v := m.plans
	if v == nil {
		return
	}
	return *v, true
}

// OldPlans returns the old "plans" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldPlans(ctx context.Context) (v []model.Plan, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlans is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlans requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlans: %w", err)
	}
	return oldValue.Plans, nil
}

// ClearPlans clears the value of the "plans" field.
func (m *CouponAssemblyMutation) ClearPlans() {
	m.plans = nil
	m.clearedFields[couponassembly.FieldPlans] = struct{}{}
}

// PlansCleared returns if the "plans" field was cleared in this mutation.
func (m *CouponAssemblyMutation) PlansCleared() bool {
	_, ok := m.clearedFields[couponassembly.FieldPlans]
	return ok
}

// ResetPlans resets all changes to the "plans" field.
func (m *CouponAssemblyMutation) ResetPlans() {
	m.plans = nil
	delete(m.clearedFields, couponassembly.FieldPlans)
}

// SetCities sets the "cities" field.
func (m *CouponAssemblyMutation) SetCities(value []model.City) {
	m.cities = &value
}

// Cities returns the value of the "cities" field in the mutation.
func (m *CouponAssemblyMutation) Cities() (r []model.City, exists bool) {
	v := m.cities
	if v == nil {
		return
	}
	return *v, true
}

// OldCities returns the old "cities" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldCities(ctx context.Context) (v []model.City, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCities is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCities requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCities: %w", err)
	}
	return oldValue.Cities, nil
}

// ClearCities clears the value of the "cities" field.
func (m *CouponAssemblyMutation) ClearCities() {
	m.cities = nil
	m.clearedFields[couponassembly.FieldCities] = struct{}{}
}

// CitiesCleared returns if the "cities" field was cleared in this mutation.
func (m *CouponAssemblyMutation) CitiesCleared() bool {
	_, ok := m.clearedFields[couponassembly.FieldCities]
	return ok
}

// ResetCities resets all changes to the "cities" field.
func (m *CouponAssemblyMutation) ResetCities() {
	m.cities = nil
	delete(m.clearedFields, couponassembly.FieldCities)
}

// Where appends a list predicates to the CouponAssemblyMutation builder.
func (m *CouponAssemblyMutation) Where(ps ...predicate.CouponAssembly) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponAssemblyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponAssembly).
func (m *CouponAssemblyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponAssemblyMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, couponassembly.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, couponassembly.FieldUpdatedAt)
	}
	if m.creator != nil {
		fields = append(fields, couponassembly.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, couponassembly.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, couponassembly.FieldRemark)
	}
	if m.total != nil {
		fields = append(fields, couponassembly.FieldTotal)
	}
	if m.expired_type != nil {
		fields = append(fields, couponassembly.FieldExpiredType)
	}
	if m.rule != nil {
		fields = append(fields, couponassembly.FieldRule)
	}
	if m.amount != nil {
		fields = append(fields, couponassembly.FieldAmount)
	}
	if m.multiple != nil {
		fields = append(fields, couponassembly.FieldMultiple)
	}
	if m.plans != nil {
		fields = append(fields, couponassembly.FieldPlans)
	}
	if m.cities != nil {
		fields = append(fields, couponassembly.FieldCities)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponAssemblyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponassembly.FieldCreatedAt:
		return m.CreatedAt()
	case couponassembly.FieldUpdatedAt:
		return m.UpdatedAt()
	case couponassembly.FieldCreator:
		return m.Creator()
	case couponassembly.FieldLastModifier:
		return m.LastModifier()
	case couponassembly.FieldRemark:
		return m.Remark()
	case couponassembly.FieldTotal:
		return m.Total()
	case couponassembly.FieldExpiredType:
		return m.ExpiredType()
	case couponassembly.FieldRule:
		return m.Rule()
	case couponassembly.FieldAmount:
		return m.Amount()
	case couponassembly.FieldMultiple:
		return m.Multiple()
	case couponassembly.FieldPlans:
		return m.Plans()
	case couponassembly.FieldCities:
		return m.Cities()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponAssemblyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponassembly.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case couponassembly.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case couponassembly.FieldCreator:
		return m.OldCreator(ctx)
	case couponassembly.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case couponassembly.FieldRemark:
		return m.OldRemark(ctx)
	case couponassembly.FieldTotal:
		return m.OldTotal(ctx)
	case couponassembly.FieldExpiredType:
		return m.OldExpiredType(ctx)
	case couponassembly.FieldRule:
		return m.OldRule(ctx)
	case couponassembly.FieldAmount:
		return m.OldAmount(ctx)
	case couponassembly.FieldMultiple:
		return m.OldMultiple(ctx)
	case couponassembly.FieldPlans:
		return m.OldPlans(ctx)
	case couponassembly.FieldCities:
		return m.OldCities(ctx)
	}
	return nil, fmt.Errorf("unknown CouponAssembly field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAssemblyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponassembly.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case couponassembly.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case couponassembly.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case couponassembly.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case couponassembly.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case couponassembly.FieldTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotal(v)
		return nil
	case couponassembly.FieldExpiredType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiredType(v)
		return nil
	case couponassembly.FieldRule:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRule(v)
		return nil
	case couponassembly.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case couponassembly.FieldMultiple:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMultiple(v)
		return nil
	case couponassembly.FieldPlans:
		v, ok := value.([]model.Plan)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlans(v)
		return nil
	case couponassembly.FieldCities:
		v, ok := value.([]model.City)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCities(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponAssemblyMutation) AddedFields() []string {
	var fields []string
	if m.addtotal != nil {
		fields = append(fields, couponassembly.FieldTotal)
	}
	if m.addexpired_type != nil {
		fields = append(fields, couponassembly.FieldExpiredType)
	}
	if m.addrule != nil {
		fields = append(fields, couponassembly.FieldRule)
	}
	if m.addamount != nil {
		fields = append(fields, couponassembly.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponAssemblyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponassembly.FieldTotal:
		return m.AddedTotal()
	case couponassembly.FieldExpiredType:
		return m.AddedExpiredType()
	case couponassembly.FieldRule:
		return m.AddedRule()
	case couponassembly.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAssemblyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponassembly.FieldTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotal(v)
		return nil
	case couponassembly.FieldExpiredType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiredType(v)
		return nil
	case couponassembly.FieldRule:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRule(v)
		return nil
	case couponassembly.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponAssemblyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(couponassembly.FieldCreator) {
		fields = append(fields, couponassembly.FieldCreator)
	}
	if m.FieldCleared(couponassembly.FieldLastModifier) {
		fields = append(fields, couponassembly.FieldLastModifier)
	}
	if m.FieldCleared(couponassembly.FieldRemark) {
		fields = append(fields, couponassembly.FieldRemark)
	}
	if m.FieldCleared(couponassembly.FieldPlans) {
		fields = append(fields, couponassembly.FieldPlans)
	}
	if m.FieldCleared(couponassembly.FieldCities) {
		fields = append(fields, couponassembly.FieldCities)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponAssemblyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponAssemblyMutation) ClearField(name string) error {
	switch name {
	case couponassembly.FieldCreator:
		m.ClearCreator()
		return nil
	case couponassembly.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case couponassembly.FieldRemark:
		m.ClearRemark()
		return nil
	case couponassembly.FieldPlans:
		m.ClearPlans()
		return nil
	case couponassembly.FieldCities:
		m.ClearCities()
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponAssemblyMutation) ResetField(name string) error {
	switch name {
	case couponassembly.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case couponassembly.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case couponassembly.FieldCreator:
		m.ResetCreator()
		return nil
	case couponassembly.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case couponassembly.FieldRemark:
		m.ResetRemark()
		return nil
	case couponassembly.FieldTotal:
		m.ResetTotal()
		return nil
	case couponassembly.FieldExpiredType:
		m.ResetExpiredType()
		return nil
	case couponassembly.FieldRule:
		m.ResetRule()
		return nil
	case couponassembly.FieldAmount:
		m.ResetAmount()
		return nil
	case couponassembly.FieldMultiple:
		m.ResetMultiple()
		return nil
	case couponassembly.FieldPlans:
		m.ResetPlans()
		return nil
	case couponassembly.FieldCities:
		m.ResetCities()
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponAssemblyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponAssemblyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponAssemblyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponAssemblyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponAssemblyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponAssemblyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponAssemblyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CouponAssembly unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponAssemblyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CouponAssembly edge %s", name)
}

