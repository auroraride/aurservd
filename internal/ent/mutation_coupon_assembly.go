// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/couponassembly"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// CouponAssemblyMutation represents an operation that mutates the CouponAssembly nodes in the graph.
type CouponAssemblyMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	created_at      *time.Time
	updated_at      *time.Time
	creator         **model.Modifier
	last_modifier   **model.Modifier
	remark          *string
	name            *string
	number          *int
	addnumber       *int
	amount          *float64
	addamount       *float64
	target          *uint8
	addtarget       *int8
	meta            **model.CouponTemplateMeta
	clearedFields   map[string]struct{}
	template        *uint64
	clearedtemplate bool
	done            bool
	oldValue        func(context.Context) (*CouponAssembly, error)
	predicates      []predicate.CouponAssembly
}

var _ ent.Mutation = (*CouponAssemblyMutation)(nil)

// couponassemblyOption allows management of the mutation configuration using functional options.
type couponassemblyOption func(*CouponAssemblyMutation)

// newCouponAssemblyMutation creates new mutation for the CouponAssembly entity.
func newCouponAssemblyMutation(c config, op Op, opts ...couponassemblyOption) *CouponAssemblyMutation {
	m := &CouponAssemblyMutation{
		config:        c,
		op:            op,
		typ:           TypeCouponAssembly,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponAssemblyID sets the ID field of the mutation.
func withCouponAssemblyID(id uint64) couponassemblyOption {
	return func(m *CouponAssemblyMutation) {
		var (
			err   error
			once  sync.Once
			value *CouponAssembly
		)
		m.oldValue = func(ctx context.Context) (*CouponAssembly, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CouponAssembly.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCouponAssembly sets the old CouponAssembly of the mutation.
func withCouponAssembly(node *CouponAssembly) couponassemblyOption {
	return func(m *CouponAssemblyMutation) {
		m.oldValue = func(context.Context) (*CouponAssembly, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponAssemblyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponAssemblyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponAssemblyMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponAssemblyMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CouponAssembly.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CouponAssemblyMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CouponAssemblyMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CouponAssemblyMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CouponAssemblyMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CouponAssemblyMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CouponAssemblyMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreator sets the "creator" field.
func (m *CouponAssemblyMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *CouponAssemblyMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *CouponAssemblyMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[couponassembly.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *CouponAssemblyMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[couponassembly.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *CouponAssemblyMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, couponassembly.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *CouponAssemblyMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *CouponAssemblyMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *CouponAssemblyMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[couponassembly.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *CouponAssemblyMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[couponassembly.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *CouponAssemblyMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, couponassembly.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *CouponAssemblyMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CouponAssemblyMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *CouponAssemblyMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[couponassembly.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *CouponAssemblyMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[couponassembly.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *CouponAssemblyMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, couponassembly.FieldRemark)
}

// SetTemplateID sets the "template_id" field.
func (m *CouponAssemblyMutation) SetTemplateID(u uint64) {
	m.template = &u
}

// TemplateID returns the value of the "template_id" field in the mutation.
func (m *CouponAssemblyMutation) TemplateID() (r uint64, exists bool) {
	v := m.template
	if v == nil {
		return
	}
	return *v, true
}

// OldTemplateID returns the old "template_id" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldTemplateID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemplateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemplateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemplateID: %w", err)
	}
	return oldValue.TemplateID, nil
}

// ResetTemplateID resets all changes to the "template_id" field.
func (m *CouponAssemblyMutation) ResetTemplateID() {
	m.template = nil
}

// SetName sets the "name" field.
func (m *CouponAssemblyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CouponAssemblyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CouponAssemblyMutation) ResetName() {
	m.name = nil
}

// SetNumber sets the "number" field.
func (m *CouponAssemblyMutation) SetNumber(i int) {
	m.number = &i
	m.addnumber = nil
}

// Number returns the value of the "number" field in the mutation.
func (m *CouponAssemblyMutation) Number() (r int, exists bool) {
	v := m.number
	if v == nil {
		return
	}
	return *v, true
}

// OldNumber returns the old "number" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumber: %w", err)
	}
	return oldValue.Number, nil
}

// AddNumber adds i to the "number" field.
func (m *CouponAssemblyMutation) AddNumber(i int) {
	if m.addnumber != nil {
		*m.addnumber += i
	} else {
		m.addnumber = &i
	}
}

// AddedNumber returns the value that was added to the "number" field in this mutation.
func (m *CouponAssemblyMutation) AddedNumber() (r int, exists bool) {
	v := m.addnumber
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumber resets all changes to the "number" field.
func (m *CouponAssemblyMutation) ResetNumber() {
	m.number = nil
	m.addnumber = nil
}

// SetAmount sets the "amount" field.
func (m *CouponAssemblyMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *CouponAssemblyMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *CouponAssemblyMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *CouponAssemblyMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *CouponAssemblyMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetTarget sets the "target" field.
func (m *CouponAssemblyMutation) SetTarget(u uint8) {
	m.target = &u
	m.addtarget = nil
}

// Target returns the value of the "target" field in the mutation.
func (m *CouponAssemblyMutation) Target() (r uint8, exists bool) {
	v := m.target
	if v == nil {
		return
	}
	return *v, true
}

// OldTarget returns the old "target" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldTarget(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTarget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTarget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTarget: %w", err)
	}
	return oldValue.Target, nil
}

// AddTarget adds u to the "target" field.
func (m *CouponAssemblyMutation) AddTarget(u int8) {
	if m.addtarget != nil {
		*m.addtarget += u
	} else {
		m.addtarget = &u
	}
}

// AddedTarget returns the value that was added to the "target" field in this mutation.
func (m *CouponAssemblyMutation) AddedTarget() (r int8, exists bool) {
	v := m.addtarget
	if v == nil {
		return
	}
	return *v, true
}

// ResetTarget resets all changes to the "target" field.
func (m *CouponAssemblyMutation) ResetTarget() {
	m.target = nil
	m.addtarget = nil
}

// SetMeta sets the "meta" field.
func (m *CouponAssemblyMutation) SetMeta(mtm *model.CouponTemplateMeta) {
	m.meta = &mtm
}

// Meta returns the value of the "meta" field in the mutation.
func (m *CouponAssemblyMutation) Meta() (r *model.CouponTemplateMeta, exists bool) {
	v := m.meta
	if v == nil {
		return
	}
	return *v, true
}

// OldMeta returns the old "meta" field's value of the CouponAssembly entity.
// If the CouponAssembly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponAssemblyMutation) OldMeta(ctx context.Context) (v *model.CouponTemplateMeta, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMeta is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMeta requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMeta: %w", err)
	}
	return oldValue.Meta, nil
}

// ResetMeta resets all changes to the "meta" field.
func (m *CouponAssemblyMutation) ResetMeta() {
	m.meta = nil
}

// ClearTemplate clears the "template" edge to the CouponTemplate entity.
func (m *CouponAssemblyMutation) ClearTemplate() {
	m.clearedtemplate = true
}

// TemplateCleared reports if the "template" edge to the CouponTemplate entity was cleared.
func (m *CouponAssemblyMutation) TemplateCleared() bool {
	return m.clearedtemplate
}

// TemplateIDs returns the "template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TemplateID instead. It exists only for internal usage by the builders.
func (m *CouponAssemblyMutation) TemplateIDs() (ids []uint64) {
	if id := m.template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTemplate resets all changes to the "template" edge.
func (m *CouponAssemblyMutation) ResetTemplate() {
	m.template = nil
	m.clearedtemplate = false
}

// Where appends a list predicates to the CouponAssemblyMutation builder.
func (m *CouponAssemblyMutation) Where(ps ...predicate.CouponAssembly) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponAssemblyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CouponAssembly).
func (m *CouponAssemblyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponAssemblyMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, couponassembly.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, couponassembly.FieldUpdatedAt)
	}
	if m.creator != nil {
		fields = append(fields, couponassembly.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, couponassembly.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, couponassembly.FieldRemark)
	}
	if m.template != nil {
		fields = append(fields, couponassembly.FieldTemplateID)
	}
	if m.name != nil {
		fields = append(fields, couponassembly.FieldName)
	}
	if m.number != nil {
		fields = append(fields, couponassembly.FieldNumber)
	}
	if m.amount != nil {
		fields = append(fields, couponassembly.FieldAmount)
	}
	if m.target != nil {
		fields = append(fields, couponassembly.FieldTarget)
	}
	if m.meta != nil {
		fields = append(fields, couponassembly.FieldMeta)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponAssemblyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case couponassembly.FieldCreatedAt:
		return m.CreatedAt()
	case couponassembly.FieldUpdatedAt:
		return m.UpdatedAt()
	case couponassembly.FieldCreator:
		return m.Creator()
	case couponassembly.FieldLastModifier:
		return m.LastModifier()
	case couponassembly.FieldRemark:
		return m.Remark()
	case couponassembly.FieldTemplateID:
		return m.TemplateID()
	case couponassembly.FieldName:
		return m.Name()
	case couponassembly.FieldNumber:
		return m.Number()
	case couponassembly.FieldAmount:
		return m.Amount()
	case couponassembly.FieldTarget:
		return m.Target()
	case couponassembly.FieldMeta:
		return m.Meta()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponAssemblyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case couponassembly.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case couponassembly.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case couponassembly.FieldCreator:
		return m.OldCreator(ctx)
	case couponassembly.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case couponassembly.FieldRemark:
		return m.OldRemark(ctx)
	case couponassembly.FieldTemplateID:
		return m.OldTemplateID(ctx)
	case couponassembly.FieldName:
		return m.OldName(ctx)
	case couponassembly.FieldNumber:
		return m.OldNumber(ctx)
	case couponassembly.FieldAmount:
		return m.OldAmount(ctx)
	case couponassembly.FieldTarget:
		return m.OldTarget(ctx)
	case couponassembly.FieldMeta:
		return m.OldMeta(ctx)
	}
	return nil, fmt.Errorf("unknown CouponAssembly field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAssemblyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case couponassembly.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case couponassembly.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case couponassembly.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case couponassembly.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case couponassembly.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case couponassembly.FieldTemplateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemplateID(v)
		return nil
	case couponassembly.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case couponassembly.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumber(v)
		return nil
	case couponassembly.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case couponassembly.FieldTarget:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTarget(v)
		return nil
	case couponassembly.FieldMeta:
		v, ok := value.(*model.CouponTemplateMeta)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMeta(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponAssemblyMutation) AddedFields() []string {
	var fields []string
	if m.addnumber != nil {
		fields = append(fields, couponassembly.FieldNumber)
	}
	if m.addamount != nil {
		fields = append(fields, couponassembly.FieldAmount)
	}
	if m.addtarget != nil {
		fields = append(fields, couponassembly.FieldTarget)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponAssemblyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case couponassembly.FieldNumber:
		return m.AddedNumber()
	case couponassembly.FieldAmount:
		return m.AddedAmount()
	case couponassembly.FieldTarget:
		return m.AddedTarget()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponAssemblyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case couponassembly.FieldNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumber(v)
		return nil
	case couponassembly.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case couponassembly.FieldTarget:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTarget(v)
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponAssemblyMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(couponassembly.FieldCreator) {
		fields = append(fields, couponassembly.FieldCreator)
	}
	if m.FieldCleared(couponassembly.FieldLastModifier) {
		fields = append(fields, couponassembly.FieldLastModifier)
	}
	if m.FieldCleared(couponassembly.FieldRemark) {
		fields = append(fields, couponassembly.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponAssemblyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponAssemblyMutation) ClearField(name string) error {
	switch name {
	case couponassembly.FieldCreator:
		m.ClearCreator()
		return nil
	case couponassembly.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case couponassembly.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponAssemblyMutation) ResetField(name string) error {
	switch name {
	case couponassembly.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case couponassembly.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case couponassembly.FieldCreator:
		m.ResetCreator()
		return nil
	case couponassembly.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case couponassembly.FieldRemark:
		m.ResetRemark()
		return nil
	case couponassembly.FieldTemplateID:
		m.ResetTemplateID()
		return nil
	case couponassembly.FieldName:
		m.ResetName()
		return nil
	case couponassembly.FieldNumber:
		m.ResetNumber()
		return nil
	case couponassembly.FieldAmount:
		m.ResetAmount()
		return nil
	case couponassembly.FieldTarget:
		m.ResetTarget()
		return nil
	case couponassembly.FieldMeta:
		m.ResetMeta()
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponAssemblyMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.template != nil {
		edges = append(edges, couponassembly.EdgeTemplate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponAssemblyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case couponassembly.EdgeTemplate:
		if id := m.template; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponAssemblyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponAssemblyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponAssemblyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtemplate {
		edges = append(edges, couponassembly.EdgeTemplate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponAssemblyMutation) EdgeCleared(name string) bool {
	switch name {
	case couponassembly.EdgeTemplate:
		return m.clearedtemplate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponAssemblyMutation) ClearEdge(name string) error {
	switch name {
	case couponassembly.EdgeTemplate:
		m.ClearTemplate()
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponAssemblyMutation) ResetEdge(name string) error {
	switch name {
	case couponassembly.EdgeTemplate:
		m.ResetTemplate()
		return nil
	}
	return fmt.Errorf("unknown CouponAssembly edge %s", name)
}

