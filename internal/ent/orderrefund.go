// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
)

// OrderRefund is the model entity for the OrderRefund schema.
type OrderRefund struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 订单ID
	OrderID uint64 `json:"order_id,omitempty"`
	// 退款状态
	Status uint8 `json:"status,omitempty"`
	// 退款金额
	Amount float64 `json:"amount,omitempty"`
	// 退款订单编号
	OutRefundNo string `json:"out_refund_no,omitempty"`
	// 退款理由
	Reason string `json:"reason,omitempty"`
	// 退款成功时间
	RefundAt *time.Time `json:"refund_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderRefundQuery when eager-loading is set.
	Edges        OrderRefundEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrderRefundEdges holds the relations/edges for other nodes in the graph.
type OrderRefundEdges struct {
	// 订单
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderRefundEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderRefund) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderrefund.FieldCreator, orderrefund.FieldLastModifier:
			values[i] = new([]byte)
		case orderrefund.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case orderrefund.FieldID, orderrefund.FieldOrderID, orderrefund.FieldStatus:
			values[i] = new(sql.NullInt64)
		case orderrefund.FieldRemark, orderrefund.FieldOutRefundNo, orderrefund.FieldReason:
			values[i] = new(sql.NullString)
		case orderrefund.FieldCreatedAt, orderrefund.FieldUpdatedAt, orderrefund.FieldDeletedAt, orderrefund.FieldRefundAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderRefund fields.
func (or *OrderRefund) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderrefund.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			or.ID = uint64(value.Int64)
		case orderrefund.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				or.CreatedAt = value.Time
			}
		case orderrefund.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				or.UpdatedAt = value.Time
			}
		case orderrefund.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				or.DeletedAt = new(time.Time)
				*or.DeletedAt = value.Time
			}
		case orderrefund.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &or.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case orderrefund.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &or.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case orderrefund.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				or.Remark = value.String
			}
		case orderrefund.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				or.OrderID = uint64(value.Int64)
			}
		case orderrefund.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				or.Status = uint8(value.Int64)
			}
		case orderrefund.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				or.Amount = value.Float64
			}
		case orderrefund.FieldOutRefundNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_refund_no", values[i])
			} else if value.Valid {
				or.OutRefundNo = value.String
			}
		case orderrefund.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				or.Reason = value.String
			}
		case orderrefund.FieldRefundAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_at", values[i])
			} else if value.Valid {
				or.RefundAt = new(time.Time)
				*or.RefundAt = value.Time
			}
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrderRefund.
// This includes values selected through modifiers, order, etc.
func (or *OrderRefund) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// QueryOrder queries the "order" edge of the OrderRefund entity.
func (or *OrderRefund) QueryOrder() *OrderQuery {
	return NewOrderRefundClient(or.config).QueryOrder(or)
}

// Update returns a builder for updating this OrderRefund.
// Note that you need to call OrderRefund.Unwrap() before calling this method if this OrderRefund
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OrderRefund) Update() *OrderRefundUpdateOne {
	return NewOrderRefundClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OrderRefund entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OrderRefund) Unwrap() *OrderRefund {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderRefund is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OrderRefund) String() string {
	var builder strings.Builder
	builder.WriteString("OrderRefund(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("created_at=")
	builder.WriteString(or.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(or.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := or.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", or.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", or.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(or.Remark)
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", or.OrderID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", or.Status))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", or.Amount))
	builder.WriteString(", ")
	builder.WriteString("out_refund_no=")
	builder.WriteString(or.OutRefundNo)
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(or.Reason)
	builder.WriteString(", ")
	if v := or.RefundAt; v != nil {
		builder.WriteString("refund_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// OrderRefunds is a parsable slice of OrderRefund.
type OrderRefunds []*OrderRefund
