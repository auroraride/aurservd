// Code generated by ent, DO NOT EDIT.

package fault

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the fault type in the database.
	Label = "fault"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldBatteryID holds the string denoting the battery_id field in the database.
	FieldBatteryID = "battery_id"
	// FieldEbikeID holds the string denoting the ebike_id field in the database.
	FieldEbikeID = "ebike_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAttachments holds the string denoting the attachments field in the database.
	FieldAttachments = "attachments"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldFault holds the string denoting the fault field in the database.
	FieldFault = "fault"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// EdgeBattery holds the string denoting the battery edge name in mutations.
	EdgeBattery = "battery"
	// EdgeEbike holds the string denoting the ebike edge name in mutations.
	EdgeEbike = "ebike"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// Table holds the table name of the fault in the database.
	Table = "fault"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "fault"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "fault"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
	// BatteryTable is the table that holds the battery relation/edge.
	BatteryTable = "fault"
	// BatteryInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteryInverseTable = "battery"
	// BatteryColumn is the table column denoting the battery relation/edge.
	BatteryColumn = "battery_id"
	// EbikeTable is the table that holds the ebike relation/edge.
	EbikeTable = "fault"
	// EbikeInverseTable is the table name for the Ebike entity.
	// It exists in this package in order to avoid circular dependency with the "ebike" package.
	EbikeInverseTable = "ebike"
	// EbikeColumn is the table column denoting the ebike relation/edge.
	EbikeColumn = "ebike_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "fault"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
)

// Columns holds all SQL columns for fault fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldCabinetID,
	FieldBatteryID,
	FieldEbikeID,
	FieldRiderID,
	FieldStatus,
	FieldDescription,
	FieldAttachments,
	FieldType,
	FieldFault,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint8
)

// OrderOption defines the ordering options for the Fault queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByCabinetID orders the results by the cabinet_id field.
func ByCabinetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCabinetID, opts...).ToFunc()
}

// ByBatteryID orders the results by the battery_id field.
func ByBatteryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryID, opts...).ToFunc()
}

// ByEbikeID orders the results by the ebike_id field.
func ByEbikeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEbikeID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByCabinetField orders the results by cabinet field.
func ByCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetStep(), sql.OrderByField(field, opts...))
	}
}

// ByBatteryField orders the results by battery field.
func ByBatteryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteryStep(), sql.OrderByField(field, opts...))
	}
}

// ByEbikeField orders the results by ebike field.
func ByEbikeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEbikeStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
	)
}
func newBatteryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BatteryTable, BatteryColumn),
	)
}
func newEbikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EbikeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EbikeTable, EbikeColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
