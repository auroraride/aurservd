// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/statement"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// StatementCreate is the builder for creating a Statement entity.
type StatementCreate struct {
	config
	mutation *StatementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *StatementCreate) SetCreatedAt(t time.Time) *StatementCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableCreatedAt(t *time.Time) *StatementCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StatementCreate) SetUpdatedAt(t time.Time) *StatementCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableUpdatedAt(t *time.Time) *StatementCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StatementCreate) SetDeletedAt(t time.Time) *StatementCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableDeletedAt(t *time.Time) *StatementCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetCreator sets the "creator" field.
func (sc *StatementCreate) SetCreator(m *model.Modifier) *StatementCreate {
	sc.mutation.SetCreator(m)
	return sc
}

// SetLastModifier sets the "last_modifier" field.
func (sc *StatementCreate) SetLastModifier(m *model.Modifier) *StatementCreate {
	sc.mutation.SetLastModifier(m)
	return sc
}

// SetRemark sets the "remark" field.
func (sc *StatementCreate) SetRemark(s string) *StatementCreate {
	sc.mutation.SetRemark(s)
	return sc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sc *StatementCreate) SetNillableRemark(s *string) *StatementCreate {
	if s != nil {
		sc.SetRemark(*s)
	}
	return sc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (sc *StatementCreate) SetEnterpriseID(u uint64) *StatementCreate {
	sc.mutation.SetEnterpriseID(u)
	return sc
}

// SetArrearage sets the "arrearage" field.
func (sc *StatementCreate) SetArrearage(f float64) *StatementCreate {
	sc.mutation.SetArrearage(f)
	return sc
}

// SetNillableArrearage sets the "arrearage" field if the given value is not nil.
func (sc *StatementCreate) SetNillableArrearage(f *float64) *StatementCreate {
	if f != nil {
		sc.SetArrearage(*f)
	}
	return sc
}

// SetAmount sets the "amount" field.
func (sc *StatementCreate) SetAmount(f float64) *StatementCreate {
	sc.mutation.SetAmount(f)
	return sc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (sc *StatementCreate) SetNillableAmount(f *float64) *StatementCreate {
	if f != nil {
		sc.SetAmount(*f)
	}
	return sc
}

// SetSettledAt sets the "settled_at" field.
func (sc *StatementCreate) SetSettledAt(t time.Time) *StatementCreate {
	sc.mutation.SetSettledAt(t)
	return sc
}

// SetNillableSettledAt sets the "settled_at" field if the given value is not nil.
func (sc *StatementCreate) SetNillableSettledAt(t *time.Time) *StatementCreate {
	if t != nil {
		sc.SetSettledAt(*t)
	}
	return sc
}

// SetDays sets the "days" field.
func (sc *StatementCreate) SetDays(u uint) *StatementCreate {
	sc.mutation.SetDays(u)
	return sc
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (sc *StatementCreate) SetNillableDays(u *uint) *StatementCreate {
	if u != nil {
		sc.SetDays(*u)
	}
	return sc
}

// SetRiderNumber sets the "rider_number" field.
func (sc *StatementCreate) SetRiderNumber(u uint) *StatementCreate {
	sc.mutation.SetRiderNumber(u)
	return sc
}

// SetNillableRiderNumber sets the "rider_number" field if the given value is not nil.
func (sc *StatementCreate) SetNillableRiderNumber(u *uint) *StatementCreate {
	if u != nil {
		sc.SetRiderNumber(*u)
	}
	return sc
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by IDs.
func (sc *StatementCreate) AddSubscribeIDs(ids ...uint64) *StatementCreate {
	sc.mutation.AddSubscribeIDs(ids...)
	return sc
}

// AddSubscribes adds the "subscribes" edges to the Subscribe entity.
func (sc *StatementCreate) AddSubscribes(s ...*Subscribe) *StatementCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSubscribeIDs(ids...)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (sc *StatementCreate) SetEnterprise(e *Enterprise) *StatementCreate {
	return sc.SetEnterpriseID(e.ID)
}

// Mutation returns the StatementMutation object of the builder.
func (sc *StatementCreate) Mutation() *StatementMutation {
	return sc.mutation
}

// Save creates the Statement in the database.
func (sc *StatementCreate) Save(ctx context.Context) (*Statement, error) {
	var (
		err  error
		node *Statement
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Statement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StatementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatementCreate) SaveX(ctx context.Context) *Statement {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatementCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatementCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatementCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if statement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := statement.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if statement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized statement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := statement.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Arrearage(); !ok {
		v := statement.DefaultArrearage
		sc.mutation.SetArrearage(v)
	}
	if _, ok := sc.mutation.Amount(); !ok {
		v := statement.DefaultAmount
		sc.mutation.SetAmount(v)
	}
	if _, ok := sc.mutation.Days(); !ok {
		v := statement.DefaultDays
		sc.mutation.SetDays(v)
	}
	if _, ok := sc.mutation.RiderNumber(); !ok {
		v := statement.DefaultRiderNumber
		sc.mutation.SetRiderNumber(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatementCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Statement.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Statement.updated_at"`)}
	}
	if _, ok := sc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise_id", err: errors.New(`ent: missing required field "Statement.enterprise_id"`)}
	}
	if _, ok := sc.mutation.Arrearage(); !ok {
		return &ValidationError{Name: "arrearage", err: errors.New(`ent: missing required field "Statement.arrearage"`)}
	}
	if _, ok := sc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Statement.amount"`)}
	}
	if _, ok := sc.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "Statement.days"`)}
	}
	if _, ok := sc.mutation.RiderNumber(); !ok {
		return &ValidationError{Name: "rider_number", err: errors.New(`ent: missing required field "Statement.rider_number"`)}
	}
	if _, ok := sc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise", err: errors.New(`ent: missing required edge "Statement.enterprise"`)}
	}
	return nil
}

func (sc *StatementCreate) sqlSave(ctx context.Context) (*Statement, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (sc *StatementCreate) createSpec() (*Statement, *sqlgraph.CreateSpec) {
	var (
		_node = &Statement{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: statement.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statement.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statement.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statement.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := sc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: statement.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := sc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: statement.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := sc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: statement.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := sc.mutation.Arrearage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statement.FieldArrearage,
		})
		_node.Arrearage = value
	}
	if value, ok := sc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: statement.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := sc.mutation.SettledAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: statement.FieldSettledAt,
		})
		_node.SettledAt = &value
	}
	if value, ok := sc.mutation.Days(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: statement.FieldDays,
		})
		_node.Days = value
	}
	if value, ok := sc.mutation.RiderNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: statement.FieldRiderNumber,
		})
		_node.RiderNumber = value
	}
	if nodes := sc.mutation.SubscribesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statement.SubscribesTable,
			Columns: []string{statement.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statement.EnterpriseTable,
			Columns: []string{statement.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Statement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *StatementCreate) OnConflict(opts ...sql.ConflictOption) *StatementUpsertOne {
	sc.conflict = opts
	return &StatementUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *StatementCreate) OnConflictColumns(columns ...string) *StatementUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StatementUpsertOne{
		create: sc,
	}
}

type (
	// StatementUpsertOne is the builder for "upsert"-ing
	//  one Statement node.
	StatementUpsertOne struct {
		create *StatementCreate
	}

	// StatementUpsert is the "OnConflict" setter.
	StatementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsert) SetCreatedAt(v time.Time) *StatementUpsert {
	u.Set(statement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCreatedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsert) SetUpdatedAt(v time.Time) *StatementUpsert {
	u.Set(statement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateUpdatedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsert) SetDeletedAt(v time.Time) *StatementUpsert {
	u.Set(statement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateDeletedAt() *StatementUpsert {
	u.SetExcluded(statement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StatementUpsert) ClearDeletedAt() *StatementUpsert {
	u.SetNull(statement.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *StatementUpsert) SetCreator(v *model.Modifier) *StatementUpsert {
	u.Set(statement.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *StatementUpsert) UpdateCreator() *StatementUpsert {
	u.SetExcluded(statement.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *StatementUpsert) ClearCreator() *StatementUpsert {
	u.SetNull(statement.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *StatementUpsert) SetLastModifier(v *model.Modifier) *StatementUpsert {
	u.Set(statement.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StatementUpsert) UpdateLastModifier() *StatementUpsert {
	u.SetExcluded(statement.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StatementUpsert) ClearLastModifier() *StatementUpsert {
	u.SetNull(statement.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *StatementUpsert) SetRemark(v string) *StatementUpsert {
	u.Set(statement.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StatementUpsert) UpdateRemark() *StatementUpsert {
	u.SetExcluded(statement.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *StatementUpsert) ClearRemark() *StatementUpsert {
	u.SetNull(statement.FieldRemark)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *StatementUpsert) SetEnterpriseID(v uint64) *StatementUpsert {
	u.Set(statement.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *StatementUpsert) UpdateEnterpriseID() *StatementUpsert {
	u.SetExcluded(statement.FieldEnterpriseID)
	return u
}

// SetArrearage sets the "arrearage" field.
func (u *StatementUpsert) SetArrearage(v float64) *StatementUpsert {
	u.Set(statement.FieldArrearage, v)
	return u
}

// UpdateArrearage sets the "arrearage" field to the value that was provided on create.
func (u *StatementUpsert) UpdateArrearage() *StatementUpsert {
	u.SetExcluded(statement.FieldArrearage)
	return u
}

// AddArrearage adds v to the "arrearage" field.
func (u *StatementUpsert) AddArrearage(v float64) *StatementUpsert {
	u.Add(statement.FieldArrearage, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *StatementUpsert) SetAmount(v float64) *StatementUpsert {
	u.Set(statement.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsert) UpdateAmount() *StatementUpsert {
	u.SetExcluded(statement.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *StatementUpsert) AddAmount(v float64) *StatementUpsert {
	u.Add(statement.FieldAmount, v)
	return u
}

// SetSettledAt sets the "settled_at" field.
func (u *StatementUpsert) SetSettledAt(v time.Time) *StatementUpsert {
	u.Set(statement.FieldSettledAt, v)
	return u
}

// UpdateSettledAt sets the "settled_at" field to the value that was provided on create.
func (u *StatementUpsert) UpdateSettledAt() *StatementUpsert {
	u.SetExcluded(statement.FieldSettledAt)
	return u
}

// ClearSettledAt clears the value of the "settled_at" field.
func (u *StatementUpsert) ClearSettledAt() *StatementUpsert {
	u.SetNull(statement.FieldSettledAt)
	return u
}

// SetDays sets the "days" field.
func (u *StatementUpsert) SetDays(v uint) *StatementUpsert {
	u.Set(statement.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *StatementUpsert) UpdateDays() *StatementUpsert {
	u.SetExcluded(statement.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *StatementUpsert) AddDays(v uint) *StatementUpsert {
	u.Add(statement.FieldDays, v)
	return u
}

// SetRiderNumber sets the "rider_number" field.
func (u *StatementUpsert) SetRiderNumber(v uint) *StatementUpsert {
	u.Set(statement.FieldRiderNumber, v)
	return u
}

// UpdateRiderNumber sets the "rider_number" field to the value that was provided on create.
func (u *StatementUpsert) UpdateRiderNumber() *StatementUpsert {
	u.SetExcluded(statement.FieldRiderNumber)
	return u
}

// AddRiderNumber adds v to the "rider_number" field.
func (u *StatementUpsert) AddRiderNumber(v uint) *StatementUpsert {
	u.Add(statement.FieldRiderNumber, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *StatementUpsertOne) UpdateNewValues() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(statement.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(statement.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Statement.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *StatementUpsertOne) Ignore() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatementUpsertOne) DoNothing() *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatementCreate.OnConflict
// documentation for more info.
func (u *StatementUpsertOne) Update(set func(*StatementUpsert)) *StatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsertOne) SetCreatedAt(v time.Time) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCreatedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsertOne) SetUpdatedAt(v time.Time) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateUpdatedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsertOne) SetDeletedAt(v time.Time) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateDeletedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StatementUpsertOne) ClearDeletedAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *StatementUpsertOne) SetCreator(v *model.Modifier) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateCreator() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *StatementUpsertOne) ClearCreator() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *StatementUpsertOne) SetLastModifier(v *model.Modifier) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateLastModifier() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StatementUpsertOne) ClearLastModifier() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *StatementUpsertOne) SetRemark(v string) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateRemark() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *StatementUpsertOne) ClearRemark() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearRemark()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *StatementUpsertOne) SetEnterpriseID(v uint64) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateEnterpriseID() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetArrearage sets the "arrearage" field.
func (u *StatementUpsertOne) SetArrearage(v float64) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetArrearage(v)
	})
}

// AddArrearage adds v to the "arrearage" field.
func (u *StatementUpsertOne) AddArrearage(v float64) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddArrearage(v)
	})
}

// UpdateArrearage sets the "arrearage" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateArrearage() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateArrearage()
	})
}

// SetAmount sets the "amount" field.
func (u *StatementUpsertOne) SetAmount(v float64) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *StatementUpsertOne) AddAmount(v float64) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateAmount() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAmount()
	})
}

// SetSettledAt sets the "settled_at" field.
func (u *StatementUpsertOne) SetSettledAt(v time.Time) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetSettledAt(v)
	})
}

// UpdateSettledAt sets the "settled_at" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateSettledAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateSettledAt()
	})
}

// ClearSettledAt clears the value of the "settled_at" field.
func (u *StatementUpsertOne) ClearSettledAt() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.ClearSettledAt()
	})
}

// SetDays sets the "days" field.
func (u *StatementUpsertOne) SetDays(v uint) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *StatementUpsertOne) AddDays(v uint) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateDays() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDays()
	})
}

// SetRiderNumber sets the "rider_number" field.
func (u *StatementUpsertOne) SetRiderNumber(v uint) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.SetRiderNumber(v)
	})
}

// AddRiderNumber adds v to the "rider_number" field.
func (u *StatementUpsertOne) AddRiderNumber(v uint) *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.AddRiderNumber(v)
	})
}

// UpdateRiderNumber sets the "rider_number" field to the value that was provided on create.
func (u *StatementUpsertOne) UpdateRiderNumber() *StatementUpsertOne {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateRiderNumber()
	})
}

// Exec executes the query.
func (u *StatementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StatementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StatementUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StatementUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StatementCreateBulk is the builder for creating many Statement entities in bulk.
type StatementCreateBulk struct {
	config
	builders []*StatementCreate
	conflict []sql.ConflictOption
}

// Save creates the Statement entities in the database.
func (scb *StatementCreateBulk) Save(ctx context.Context) ([]*Statement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Statement, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatementCreateBulk) SaveX(ctx context.Context) []*Statement {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatementCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatementCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Statement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *StatementCreateBulk) OnConflict(opts ...sql.ConflictOption) *StatementUpsertBulk {
	scb.conflict = opts
	return &StatementUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *StatementCreateBulk) OnConflictColumns(columns ...string) *StatementUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StatementUpsertBulk{
		create: scb,
	}
}

// StatementUpsertBulk is the builder for "upsert"-ing
// a bulk of Statement nodes.
type StatementUpsertBulk struct {
	create *StatementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *StatementUpsertBulk) UpdateNewValues() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(statement.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(statement.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Statement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *StatementUpsertBulk) Ignore() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatementUpsertBulk) DoNothing() *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatementCreateBulk.OnConflict
// documentation for more info.
func (u *StatementUpsertBulk) Update(set func(*StatementUpsert)) *StatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *StatementUpsertBulk) SetCreatedAt(v time.Time) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCreatedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatementUpsertBulk) SetUpdatedAt(v time.Time) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateUpdatedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StatementUpsertBulk) SetDeletedAt(v time.Time) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateDeletedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StatementUpsertBulk) ClearDeletedAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *StatementUpsertBulk) SetCreator(v *model.Modifier) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateCreator() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *StatementUpsertBulk) ClearCreator() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *StatementUpsertBulk) SetLastModifier(v *model.Modifier) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateLastModifier() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StatementUpsertBulk) ClearLastModifier() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *StatementUpsertBulk) SetRemark(v string) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateRemark() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *StatementUpsertBulk) ClearRemark() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearRemark()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *StatementUpsertBulk) SetEnterpriseID(v uint64) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateEnterpriseID() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetArrearage sets the "arrearage" field.
func (u *StatementUpsertBulk) SetArrearage(v float64) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetArrearage(v)
	})
}

// AddArrearage adds v to the "arrearage" field.
func (u *StatementUpsertBulk) AddArrearage(v float64) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddArrearage(v)
	})
}

// UpdateArrearage sets the "arrearage" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateArrearage() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateArrearage()
	})
}

// SetAmount sets the "amount" field.
func (u *StatementUpsertBulk) SetAmount(v float64) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *StatementUpsertBulk) AddAmount(v float64) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateAmount() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateAmount()
	})
}

// SetSettledAt sets the "settled_at" field.
func (u *StatementUpsertBulk) SetSettledAt(v time.Time) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetSettledAt(v)
	})
}

// UpdateSettledAt sets the "settled_at" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateSettledAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateSettledAt()
	})
}

// ClearSettledAt clears the value of the "settled_at" field.
func (u *StatementUpsertBulk) ClearSettledAt() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.ClearSettledAt()
	})
}

// SetDays sets the "days" field.
func (u *StatementUpsertBulk) SetDays(v uint) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *StatementUpsertBulk) AddDays(v uint) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateDays() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateDays()
	})
}

// SetRiderNumber sets the "rider_number" field.
func (u *StatementUpsertBulk) SetRiderNumber(v uint) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.SetRiderNumber(v)
	})
}

// AddRiderNumber adds v to the "rider_number" field.
func (u *StatementUpsertBulk) AddRiderNumber(v uint) *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.AddRiderNumber(v)
	})
}

// UpdateRiderNumber sets the "rider_number" field to the value that was provided on create.
func (u *StatementUpsertBulk) UpdateRiderNumber() *StatementUpsertBulk {
	return u.Update(func(s *StatementUpsert) {
		s.UpdateRiderNumber()
	})
}

// Exec executes the query.
func (u *StatementUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StatementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StatementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
