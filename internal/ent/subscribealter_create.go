// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
)

// SubscribeAlterCreate is the builder for creating a SubscribeAlter entity.
type SubscribeAlterCreate struct {
	config
	mutation *SubscribeAlterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sac *SubscribeAlterCreate) SetCreatedAt(t time.Time) *SubscribeAlterCreate {
	sac.mutation.SetCreatedAt(t)
	return sac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sac *SubscribeAlterCreate) SetNillableCreatedAt(t *time.Time) *SubscribeAlterCreate {
	if t != nil {
		sac.SetCreatedAt(*t)
	}
	return sac
}

// SetUpdatedAt sets the "updated_at" field.
func (sac *SubscribeAlterCreate) SetUpdatedAt(t time.Time) *SubscribeAlterCreate {
	sac.mutation.SetUpdatedAt(t)
	return sac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sac *SubscribeAlterCreate) SetNillableUpdatedAt(t *time.Time) *SubscribeAlterCreate {
	if t != nil {
		sac.SetUpdatedAt(*t)
	}
	return sac
}

// SetDeletedAt sets the "deleted_at" field.
func (sac *SubscribeAlterCreate) SetDeletedAt(t time.Time) *SubscribeAlterCreate {
	sac.mutation.SetDeletedAt(t)
	return sac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sac *SubscribeAlterCreate) SetNillableDeletedAt(t *time.Time) *SubscribeAlterCreate {
	if t != nil {
		sac.SetDeletedAt(*t)
	}
	return sac
}

// SetCreator sets the "creator" field.
func (sac *SubscribeAlterCreate) SetCreator(m *model.Modifier) *SubscribeAlterCreate {
	sac.mutation.SetCreator(m)
	return sac
}

// SetLastModifier sets the "last_modifier" field.
func (sac *SubscribeAlterCreate) SetLastModifier(m *model.Modifier) *SubscribeAlterCreate {
	sac.mutation.SetLastModifier(m)
	return sac
}

// SetRemark sets the "remark" field.
func (sac *SubscribeAlterCreate) SetRemark(s string) *SubscribeAlterCreate {
	sac.mutation.SetRemark(s)
	return sac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sac *SubscribeAlterCreate) SetNillableRemark(s *string) *SubscribeAlterCreate {
	if s != nil {
		sac.SetRemark(*s)
	}
	return sac
}

// SetRiderID sets the "rider_id" field.
func (sac *SubscribeAlterCreate) SetRiderID(u uint64) *SubscribeAlterCreate {
	sac.mutation.SetRiderID(u)
	return sac
}

// SetManagerID sets the "manager_id" field.
func (sac *SubscribeAlterCreate) SetManagerID(u uint64) *SubscribeAlterCreate {
	sac.mutation.SetManagerID(u)
	return sac
}

// SetEnterpriseID sets the "enterprise_id" field.
func (sac *SubscribeAlterCreate) SetEnterpriseID(u uint64) *SubscribeAlterCreate {
	sac.mutation.SetEnterpriseID(u)
	return sac
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (sac *SubscribeAlterCreate) SetNillableEnterpriseID(u *uint64) *SubscribeAlterCreate {
	if u != nil {
		sac.SetEnterpriseID(*u)
	}
	return sac
}

// SetAgentID sets the "agent_id" field.
func (sac *SubscribeAlterCreate) SetAgentID(u uint64) *SubscribeAlterCreate {
	sac.mutation.SetAgentID(u)
	return sac
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (sac *SubscribeAlterCreate) SetNillableAgentID(u *uint64) *SubscribeAlterCreate {
	if u != nil {
		sac.SetAgentID(*u)
	}
	return sac
}

// SetSubscribeID sets the "subscribe_id" field.
func (sac *SubscribeAlterCreate) SetSubscribeID(u uint64) *SubscribeAlterCreate {
	sac.mutation.SetSubscribeID(u)
	return sac
}

// SetDays sets the "days" field.
func (sac *SubscribeAlterCreate) SetDays(i int) *SubscribeAlterCreate {
	sac.mutation.SetDays(i)
	return sac
}

// SetRider sets the "rider" edge to the Rider entity.
func (sac *SubscribeAlterCreate) SetRider(r *Rider) *SubscribeAlterCreate {
	return sac.SetRiderID(r.ID)
}

// SetManager sets the "manager" edge to the Manager entity.
func (sac *SubscribeAlterCreate) SetManager(m *Manager) *SubscribeAlterCreate {
	return sac.SetManagerID(m.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (sac *SubscribeAlterCreate) SetEnterprise(e *Enterprise) *SubscribeAlterCreate {
	return sac.SetEnterpriseID(e.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (sac *SubscribeAlterCreate) SetAgent(a *Agent) *SubscribeAlterCreate {
	return sac.SetAgentID(a.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (sac *SubscribeAlterCreate) SetSubscribe(s *Subscribe) *SubscribeAlterCreate {
	return sac.SetSubscribeID(s.ID)
}

// Mutation returns the SubscribeAlterMutation object of the builder.
func (sac *SubscribeAlterCreate) Mutation() *SubscribeAlterMutation {
	return sac.mutation
}

// Save creates the SubscribeAlter in the database.
func (sac *SubscribeAlterCreate) Save(ctx context.Context) (*SubscribeAlter, error) {
	var (
		err  error
		node *SubscribeAlter
	)
	if err := sac.defaults(); err != nil {
		return nil, err
	}
	if len(sac.hooks) == 0 {
		if err = sac.check(); err != nil {
			return nil, err
		}
		node, err = sac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribeAlterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sac.check(); err != nil {
				return nil, err
			}
			sac.mutation = mutation
			if node, err = sac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sac.hooks) - 1; i >= 0; i-- {
			if sac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubscribeAlter)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubscribeAlterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sac *SubscribeAlterCreate) SaveX(ctx context.Context) *SubscribeAlter {
	v, err := sac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sac *SubscribeAlterCreate) Exec(ctx context.Context) error {
	_, err := sac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sac *SubscribeAlterCreate) ExecX(ctx context.Context) {
	if err := sac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sac *SubscribeAlterCreate) defaults() error {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		if subscribealter.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribealter.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := subscribealter.DefaultCreatedAt()
		sac.mutation.SetCreatedAt(v)
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		if subscribealter.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribealter.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribealter.DefaultUpdatedAt()
		sac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sac *SubscribeAlterCreate) check() error {
	if _, ok := sac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubscribeAlter.created_at"`)}
	}
	if _, ok := sac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubscribeAlter.updated_at"`)}
	}
	if _, ok := sac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "SubscribeAlter.rider_id"`)}
	}
	if _, ok := sac.mutation.ManagerID(); !ok {
		return &ValidationError{Name: "manager_id", err: errors.New(`ent: missing required field "SubscribeAlter.manager_id"`)}
	}
	if _, ok := sac.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "SubscribeAlter.subscribe_id"`)}
	}
	if _, ok := sac.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "SubscribeAlter.days"`)}
	}
	if _, ok := sac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "SubscribeAlter.rider"`)}
	}
	if _, ok := sac.mutation.ManagerID(); !ok {
		return &ValidationError{Name: "manager", err: errors.New(`ent: missing required edge "SubscribeAlter.manager"`)}
	}
	if _, ok := sac.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "SubscribeAlter.subscribe"`)}
	}
	return nil
}

func (sac *SubscribeAlterCreate) sqlSave(ctx context.Context) (*SubscribeAlter, error) {
	_node, _spec := sac.createSpec()
	if err := sqlgraph.CreateNode(ctx, sac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (sac *SubscribeAlterCreate) createSpec() (*SubscribeAlter, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscribeAlter{config: sac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subscribealter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribealter.FieldID,
			},
		}
	)
	_spec.OnConflict = sac.conflict
	if value, ok := sac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribealter.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribealter.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribealter.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := sac.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribealter.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := sac.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribealter.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := sac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribealter.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := sac.mutation.Days(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribealter.FieldDays,
		})
		_node.Days = value
	}
	if nodes := sac.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.RiderTable,
			Columns: []string{subscribealter.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.ManagerTable,
			Columns: []string{subscribealter.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ManagerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.EnterpriseTable,
			Columns: []string{subscribealter.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.AgentTable,
			Columns: []string{subscribealter.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: agent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AgentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sac.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribealter.SubscribeTable,
			Columns: []string{subscribealter.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscribeAlter.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribeAlterUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sac *SubscribeAlterCreate) OnConflict(opts ...sql.ConflictOption) *SubscribeAlterUpsertOne {
	sac.conflict = opts
	return &SubscribeAlterUpsertOne{
		create: sac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscribeAlter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sac *SubscribeAlterCreate) OnConflictColumns(columns ...string) *SubscribeAlterUpsertOne {
	sac.conflict = append(sac.conflict, sql.ConflictColumns(columns...))
	return &SubscribeAlterUpsertOne{
		create: sac,
	}
}

type (
	// SubscribeAlterUpsertOne is the builder for "upsert"-ing
	//  one SubscribeAlter node.
	SubscribeAlterUpsertOne struct {
		create *SubscribeAlterCreate
	}

	// SubscribeAlterUpsert is the "OnConflict" setter.
	SubscribeAlterUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SubscribeAlterUpsert) SetCreatedAt(v time.Time) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateCreatedAt() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeAlterUpsert) SetUpdatedAt(v time.Time) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateUpdatedAt() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribeAlterUpsert) SetDeletedAt(v time.Time) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateDeletedAt() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribeAlterUpsert) ClearDeletedAt() *SubscribeAlterUpsert {
	u.SetNull(subscribealter.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *SubscribeAlterUpsert) SetCreator(v *model.Modifier) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateCreator() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribeAlterUpsert) ClearCreator() *SubscribeAlterUpsert {
	u.SetNull(subscribealter.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeAlterUpsert) SetLastModifier(v *model.Modifier) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateLastModifier() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeAlterUpsert) ClearLastModifier() *SubscribeAlterUpsert {
	u.SetNull(subscribealter.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *SubscribeAlterUpsert) SetRemark(v string) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateRemark() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeAlterUpsert) ClearRemark() *SubscribeAlterUpsert {
	u.SetNull(subscribealter.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeAlterUpsert) SetRiderID(v uint64) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateRiderID() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldRiderID)
	return u
}

// SetManagerID sets the "manager_id" field.
func (u *SubscribeAlterUpsert) SetManagerID(v uint64) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldManagerID, v)
	return u
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateManagerID() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldManagerID)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *SubscribeAlterUpsert) SetEnterpriseID(v uint64) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateEnterpriseID() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldEnterpriseID)
	return u
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *SubscribeAlterUpsert) ClearEnterpriseID() *SubscribeAlterUpsert {
	u.SetNull(subscribealter.FieldEnterpriseID)
	return u
}

// SetAgentID sets the "agent_id" field.
func (u *SubscribeAlterUpsert) SetAgentID(v uint64) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldAgentID, v)
	return u
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateAgentID() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldAgentID)
	return u
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *SubscribeAlterUpsert) ClearAgentID() *SubscribeAlterUpsert {
	u.SetNull(subscribealter.FieldAgentID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeAlterUpsert) SetSubscribeID(v uint64) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateSubscribeID() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldSubscribeID)
	return u
}

// SetDays sets the "days" field.
func (u *SubscribeAlterUpsert) SetDays(v int) *SubscribeAlterUpsert {
	u.Set(subscribealter.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeAlterUpsert) UpdateDays() *SubscribeAlterUpsert {
	u.SetExcluded(subscribealter.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *SubscribeAlterUpsert) AddDays(v int) *SubscribeAlterUpsert {
	u.Add(subscribealter.FieldDays, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SubscribeAlter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SubscribeAlterUpsertOne) UpdateNewValues() *SubscribeAlterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscribealter.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(subscribealter.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscribeAlter.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscribeAlterUpsertOne) Ignore() *SubscribeAlterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribeAlterUpsertOne) DoNothing() *SubscribeAlterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribeAlterCreate.OnConflict
// documentation for more info.
func (u *SubscribeAlterUpsertOne) Update(set func(*SubscribeAlterUpsert)) *SubscribeAlterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribeAlterUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscribeAlterUpsertOne) SetCreatedAt(v time.Time) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateCreatedAt() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeAlterUpsertOne) SetUpdatedAt(v time.Time) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateUpdatedAt() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribeAlterUpsertOne) SetDeletedAt(v time.Time) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateDeletedAt() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribeAlterUpsertOne) ClearDeletedAt() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *SubscribeAlterUpsertOne) SetCreator(v *model.Modifier) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateCreator() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribeAlterUpsertOne) ClearCreator() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeAlterUpsertOne) SetLastModifier(v *model.Modifier) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateLastModifier() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeAlterUpsertOne) ClearLastModifier() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *SubscribeAlterUpsertOne) SetRemark(v string) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateRemark() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeAlterUpsertOne) ClearRemark() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeAlterUpsertOne) SetRiderID(v uint64) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateRiderID() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateRiderID()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *SubscribeAlterUpsertOne) SetManagerID(v uint64) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateManagerID() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateManagerID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *SubscribeAlterUpsertOne) SetEnterpriseID(v uint64) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateEnterpriseID() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *SubscribeAlterUpsertOne) ClearEnterpriseID() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetAgentID sets the "agent_id" field.
func (u *SubscribeAlterUpsertOne) SetAgentID(v uint64) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetAgentID(v)
	})
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateAgentID() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateAgentID()
	})
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *SubscribeAlterUpsertOne) ClearAgentID() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearAgentID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeAlterUpsertOne) SetSubscribeID(v uint64) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateSubscribeID() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetDays sets the "days" field.
func (u *SubscribeAlterUpsertOne) SetDays(v int) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *SubscribeAlterUpsertOne) AddDays(v int) *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeAlterUpsertOne) UpdateDays() *SubscribeAlterUpsertOne {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateDays()
	})
}

// Exec executes the query.
func (u *SubscribeAlterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribeAlterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribeAlterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscribeAlterUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscribeAlterUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscribeAlterCreateBulk is the builder for creating many SubscribeAlter entities in bulk.
type SubscribeAlterCreateBulk struct {
	config
	builders []*SubscribeAlterCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscribeAlter entities in the database.
func (sacb *SubscribeAlterCreateBulk) Save(ctx context.Context) ([]*SubscribeAlter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sacb.builders))
	nodes := make([]*SubscribeAlter, len(sacb.builders))
	mutators := make([]Mutator, len(sacb.builders))
	for i := range sacb.builders {
		func(i int, root context.Context) {
			builder := sacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscribeAlterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sacb *SubscribeAlterCreateBulk) SaveX(ctx context.Context) []*SubscribeAlter {
	v, err := sacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sacb *SubscribeAlterCreateBulk) Exec(ctx context.Context) error {
	_, err := sacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sacb *SubscribeAlterCreateBulk) ExecX(ctx context.Context) {
	if err := sacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscribeAlter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribeAlterUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sacb *SubscribeAlterCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscribeAlterUpsertBulk {
	sacb.conflict = opts
	return &SubscribeAlterUpsertBulk{
		create: sacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscribeAlter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sacb *SubscribeAlterCreateBulk) OnConflictColumns(columns ...string) *SubscribeAlterUpsertBulk {
	sacb.conflict = append(sacb.conflict, sql.ConflictColumns(columns...))
	return &SubscribeAlterUpsertBulk{
		create: sacb,
	}
}

// SubscribeAlterUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscribeAlter nodes.
type SubscribeAlterUpsertBulk struct {
	create *SubscribeAlterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscribeAlter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SubscribeAlterUpsertBulk) UpdateNewValues() *SubscribeAlterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscribealter.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(subscribealter.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscribeAlter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscribeAlterUpsertBulk) Ignore() *SubscribeAlterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribeAlterUpsertBulk) DoNothing() *SubscribeAlterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribeAlterCreateBulk.OnConflict
// documentation for more info.
func (u *SubscribeAlterUpsertBulk) Update(set func(*SubscribeAlterUpsert)) *SubscribeAlterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribeAlterUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscribeAlterUpsertBulk) SetCreatedAt(v time.Time) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateCreatedAt() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeAlterUpsertBulk) SetUpdatedAt(v time.Time) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateUpdatedAt() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribeAlterUpsertBulk) SetDeletedAt(v time.Time) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateDeletedAt() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribeAlterUpsertBulk) ClearDeletedAt() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *SubscribeAlterUpsertBulk) SetCreator(v *model.Modifier) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateCreator() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribeAlterUpsertBulk) ClearCreator() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeAlterUpsertBulk) SetLastModifier(v *model.Modifier) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateLastModifier() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeAlterUpsertBulk) ClearLastModifier() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *SubscribeAlterUpsertBulk) SetRemark(v string) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateRemark() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeAlterUpsertBulk) ClearRemark() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeAlterUpsertBulk) SetRiderID(v uint64) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateRiderID() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateRiderID()
	})
}

// SetManagerID sets the "manager_id" field.
func (u *SubscribeAlterUpsertBulk) SetManagerID(v uint64) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetManagerID(v)
	})
}

// UpdateManagerID sets the "manager_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateManagerID() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateManagerID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *SubscribeAlterUpsertBulk) SetEnterpriseID(v uint64) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateEnterpriseID() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *SubscribeAlterUpsertBulk) ClearEnterpriseID() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetAgentID sets the "agent_id" field.
func (u *SubscribeAlterUpsertBulk) SetAgentID(v uint64) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetAgentID(v)
	})
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateAgentID() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateAgentID()
	})
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *SubscribeAlterUpsertBulk) ClearAgentID() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.ClearAgentID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeAlterUpsertBulk) SetSubscribeID(v uint64) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateSubscribeID() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetDays sets the "days" field.
func (u *SubscribeAlterUpsertBulk) SetDays(v int) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *SubscribeAlterUpsertBulk) AddDays(v int) *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeAlterUpsertBulk) UpdateDays() *SubscribeAlterUpsertBulk {
	return u.Update(func(s *SubscribeAlterUpsert) {
		s.UpdateDays()
	})
}

// Exec executes the query.
func (u *SubscribeAlterUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubscribeAlterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribeAlterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribeAlterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
