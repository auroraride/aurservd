// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assethistory"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetHistoryUpdate is the builder for updating AssetHistory entities.
type AssetHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetHistoryUpdate builder.
func (ahu *AssetHistoryUpdate) Where(ps ...predicate.AssetHistory) *AssetHistoryUpdate {
	ahu.mutation.Where(ps...)
	return ahu
}

// SetUpdatedAt sets the "updated_at" field.
func (ahu *AssetHistoryUpdate) SetUpdatedAt(t time.Time) *AssetHistoryUpdate {
	ahu.mutation.SetUpdatedAt(t)
	return ahu
}

// SetDeletedAt sets the "deleted_at" field.
func (ahu *AssetHistoryUpdate) SetDeletedAt(t time.Time) *AssetHistoryUpdate {
	ahu.mutation.SetDeletedAt(t)
	return ahu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableDeletedAt(t *time.Time) *AssetHistoryUpdate {
	if t != nil {
		ahu.SetDeletedAt(*t)
	}
	return ahu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ahu *AssetHistoryUpdate) ClearDeletedAt() *AssetHistoryUpdate {
	ahu.mutation.ClearDeletedAt()
	return ahu
}

// SetLastModifier sets the "last_modifier" field.
func (ahu *AssetHistoryUpdate) SetLastModifier(m *model.Modifier) *AssetHistoryUpdate {
	ahu.mutation.SetLastModifier(m)
	return ahu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ahu *AssetHistoryUpdate) ClearLastModifier() *AssetHistoryUpdate {
	ahu.mutation.ClearLastModifier()
	return ahu
}

// SetRemark sets the "remark" field.
func (ahu *AssetHistoryUpdate) SetRemark(s string) *AssetHistoryUpdate {
	ahu.mutation.SetRemark(s)
	return ahu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableRemark(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetRemark(*s)
	}
	return ahu
}

// ClearRemark clears the value of the "remark" field.
func (ahu *AssetHistoryUpdate) ClearRemark() *AssetHistoryUpdate {
	ahu.mutation.ClearRemark()
	return ahu
}

// SetAssetID sets the "asset_id" field.
func (ahu *AssetHistoryUpdate) SetAssetID(u uint64) *AssetHistoryUpdate {
	ahu.mutation.SetAssetID(u)
	return ahu
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableAssetID(u *uint64) *AssetHistoryUpdate {
	if u != nil {
		ahu.SetAssetID(*u)
	}
	return ahu
}

// ClearAssetID clears the value of the "asset_id" field.
func (ahu *AssetHistoryUpdate) ClearAssetID() *AssetHistoryUpdate {
	ahu.mutation.ClearAssetID()
	return ahu
}

// SetFromLocationType sets the "from_location_type" field.
func (ahu *AssetHistoryUpdate) SetFromLocationType(i int) *AssetHistoryUpdate {
	ahu.mutation.ResetFromLocationType()
	ahu.mutation.SetFromLocationType(i)
	return ahu
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableFromLocationType(i *int) *AssetHistoryUpdate {
	if i != nil {
		ahu.SetFromLocationType(*i)
	}
	return ahu
}

// AddFromLocationType adds i to the "from_location_type" field.
func (ahu *AssetHistoryUpdate) AddFromLocationType(i int) *AssetHistoryUpdate {
	ahu.mutation.AddFromLocationType(i)
	return ahu
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (ahu *AssetHistoryUpdate) ClearFromLocationType() *AssetHistoryUpdate {
	ahu.mutation.ClearFromLocationType()
	return ahu
}

// SetFromLocationID sets the "from_location_id" field.
func (ahu *AssetHistoryUpdate) SetFromLocationID(i int) *AssetHistoryUpdate {
	ahu.mutation.ResetFromLocationID()
	ahu.mutation.SetFromLocationID(i)
	return ahu
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableFromLocationID(i *int) *AssetHistoryUpdate {
	if i != nil {
		ahu.SetFromLocationID(*i)
	}
	return ahu
}

// AddFromLocationID adds i to the "from_location_id" field.
func (ahu *AssetHistoryUpdate) AddFromLocationID(i int) *AssetHistoryUpdate {
	ahu.mutation.AddFromLocationID(i)
	return ahu
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (ahu *AssetHistoryUpdate) ClearFromLocationID() *AssetHistoryUpdate {
	ahu.mutation.ClearFromLocationID()
	return ahu
}

// SetToLocationType sets the "to_location_type" field.
func (ahu *AssetHistoryUpdate) SetToLocationType(i int) *AssetHistoryUpdate {
	ahu.mutation.ResetToLocationType()
	ahu.mutation.SetToLocationType(i)
	return ahu
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableToLocationType(i *int) *AssetHistoryUpdate {
	if i != nil {
		ahu.SetToLocationType(*i)
	}
	return ahu
}

// AddToLocationType adds i to the "to_location_type" field.
func (ahu *AssetHistoryUpdate) AddToLocationType(i int) *AssetHistoryUpdate {
	ahu.mutation.AddToLocationType(i)
	return ahu
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (ahu *AssetHistoryUpdate) ClearToLocationType() *AssetHistoryUpdate {
	ahu.mutation.ClearToLocationType()
	return ahu
}

// SetToLocationID sets the "to_location_id" field.
func (ahu *AssetHistoryUpdate) SetToLocationID(i int) *AssetHistoryUpdate {
	ahu.mutation.ResetToLocationID()
	ahu.mutation.SetToLocationID(i)
	return ahu
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableToLocationID(i *int) *AssetHistoryUpdate {
	if i != nil {
		ahu.SetToLocationID(*i)
	}
	return ahu
}

// AddToLocationID adds i to the "to_location_id" field.
func (ahu *AssetHistoryUpdate) AddToLocationID(i int) *AssetHistoryUpdate {
	ahu.mutation.AddToLocationID(i)
	return ahu
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (ahu *AssetHistoryUpdate) ClearToLocationID() *AssetHistoryUpdate {
	ahu.mutation.ClearToLocationID()
	return ahu
}

// SetType sets the "type" field.
func (ahu *AssetHistoryUpdate) SetType(u uint8) *AssetHistoryUpdate {
	ahu.mutation.ResetType()
	ahu.mutation.SetType(u)
	return ahu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableType(u *uint8) *AssetHistoryUpdate {
	if u != nil {
		ahu.SetType(*u)
	}
	return ahu
}

// AddType adds u to the "type" field.
func (ahu *AssetHistoryUpdate) AddType(u int8) *AssetHistoryUpdate {
	ahu.mutation.AddType(u)
	return ahu
}

// ClearType clears the value of the "type" field.
func (ahu *AssetHistoryUpdate) ClearType() *AssetHistoryUpdate {
	ahu.mutation.ClearType()
	return ahu
}

// SetAsset sets the "asset" edge to the Asset entity.
func (ahu *AssetHistoryUpdate) SetAsset(a *Asset) *AssetHistoryUpdate {
	return ahu.SetAssetID(a.ID)
}

// Mutation returns the AssetHistoryMutation object of the builder.
func (ahu *AssetHistoryUpdate) Mutation() *AssetHistoryMutation {
	return ahu.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (ahu *AssetHistoryUpdate) ClearAsset() *AssetHistoryUpdate {
	ahu.mutation.ClearAsset()
	return ahu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahu *AssetHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := ahu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ahu.sqlSave, ahu.mutation, ahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *AssetHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *AssetHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *AssetHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahu *AssetHistoryUpdate) defaults() error {
	if _, ok := ahu.mutation.UpdatedAt(); !ok {
		if assethistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assethistory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assethistory.UpdateDefaultUpdatedAt()
		ahu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ahu *AssetHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetHistoryUpdate {
	ahu.modifiers = append(ahu.modifiers, modifiers...)
	return ahu
}

func (ahu *AssetHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assethistory.Table, assethistory.Columns, sqlgraph.NewFieldSpec(assethistory.FieldID, field.TypeUint64))
	if ps := ahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahu.mutation.UpdatedAt(); ok {
		_spec.SetField(assethistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ahu.mutation.DeletedAt(); ok {
		_spec.SetField(assethistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ahu.mutation.DeletedAtCleared() {
		_spec.ClearField(assethistory.FieldDeletedAt, field.TypeTime)
	}
	if ahu.mutation.CreatorCleared() {
		_spec.ClearField(assethistory.FieldCreator, field.TypeJSON)
	}
	if value, ok := ahu.mutation.LastModifier(); ok {
		_spec.SetField(assethistory.FieldLastModifier, field.TypeJSON, value)
	}
	if ahu.mutation.LastModifierCleared() {
		_spec.ClearField(assethistory.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ahu.mutation.Remark(); ok {
		_spec.SetField(assethistory.FieldRemark, field.TypeString, value)
	}
	if ahu.mutation.RemarkCleared() {
		_spec.ClearField(assethistory.FieldRemark, field.TypeString)
	}
	if value, ok := ahu.mutation.FromLocationType(); ok {
		_spec.SetField(assethistory.FieldFromLocationType, field.TypeInt, value)
	}
	if value, ok := ahu.mutation.AddedFromLocationType(); ok {
		_spec.AddField(assethistory.FieldFromLocationType, field.TypeInt, value)
	}
	if ahu.mutation.FromLocationTypeCleared() {
		_spec.ClearField(assethistory.FieldFromLocationType, field.TypeInt)
	}
	if value, ok := ahu.mutation.FromLocationID(); ok {
		_spec.SetField(assethistory.FieldFromLocationID, field.TypeInt, value)
	}
	if value, ok := ahu.mutation.AddedFromLocationID(); ok {
		_spec.AddField(assethistory.FieldFromLocationID, field.TypeInt, value)
	}
	if ahu.mutation.FromLocationIDCleared() {
		_spec.ClearField(assethistory.FieldFromLocationID, field.TypeInt)
	}
	if value, ok := ahu.mutation.ToLocationType(); ok {
		_spec.SetField(assethistory.FieldToLocationType, field.TypeInt, value)
	}
	if value, ok := ahu.mutation.AddedToLocationType(); ok {
		_spec.AddField(assethistory.FieldToLocationType, field.TypeInt, value)
	}
	if ahu.mutation.ToLocationTypeCleared() {
		_spec.ClearField(assethistory.FieldToLocationType, field.TypeInt)
	}
	if value, ok := ahu.mutation.ToLocationID(); ok {
		_spec.SetField(assethistory.FieldToLocationID, field.TypeInt, value)
	}
	if value, ok := ahu.mutation.AddedToLocationID(); ok {
		_spec.AddField(assethistory.FieldToLocationID, field.TypeInt, value)
	}
	if ahu.mutation.ToLocationIDCleared() {
		_spec.ClearField(assethistory.FieldToLocationID, field.TypeInt)
	}
	if value, ok := ahu.mutation.GetType(); ok {
		_spec.SetField(assethistory.FieldType, field.TypeUint8, value)
	}
	if value, ok := ahu.mutation.AddedType(); ok {
		_spec.AddField(assethistory.FieldType, field.TypeUint8, value)
	}
	if ahu.mutation.TypeCleared() {
		_spec.ClearField(assethistory.FieldType, field.TypeUint8)
	}
	if ahu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assethistory.AssetTable,
			Columns: []string{assethistory.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assethistory.AssetTable,
			Columns: []string{assethistory.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ahu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assethistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ahu.mutation.done = true
	return n, nil
}

// AssetHistoryUpdateOne is the builder for updating a single AssetHistory entity.
type AssetHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ahuo *AssetHistoryUpdateOne) SetUpdatedAt(t time.Time) *AssetHistoryUpdateOne {
	ahuo.mutation.SetUpdatedAt(t)
	return ahuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ahuo *AssetHistoryUpdateOne) SetDeletedAt(t time.Time) *AssetHistoryUpdateOne {
	ahuo.mutation.SetDeletedAt(t)
	return ahuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetHistoryUpdateOne {
	if t != nil {
		ahuo.SetDeletedAt(*t)
	}
	return ahuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ahuo *AssetHistoryUpdateOne) ClearDeletedAt() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearDeletedAt()
	return ahuo
}

// SetLastModifier sets the "last_modifier" field.
func (ahuo *AssetHistoryUpdateOne) SetLastModifier(m *model.Modifier) *AssetHistoryUpdateOne {
	ahuo.mutation.SetLastModifier(m)
	return ahuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ahuo *AssetHistoryUpdateOne) ClearLastModifier() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearLastModifier()
	return ahuo
}

// SetRemark sets the "remark" field.
func (ahuo *AssetHistoryUpdateOne) SetRemark(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetRemark(s)
	return ahuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableRemark(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetRemark(*s)
	}
	return ahuo
}

// ClearRemark clears the value of the "remark" field.
func (ahuo *AssetHistoryUpdateOne) ClearRemark() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearRemark()
	return ahuo
}

// SetAssetID sets the "asset_id" field.
func (ahuo *AssetHistoryUpdateOne) SetAssetID(u uint64) *AssetHistoryUpdateOne {
	ahuo.mutation.SetAssetID(u)
	return ahuo
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableAssetID(u *uint64) *AssetHistoryUpdateOne {
	if u != nil {
		ahuo.SetAssetID(*u)
	}
	return ahuo
}

// ClearAssetID clears the value of the "asset_id" field.
func (ahuo *AssetHistoryUpdateOne) ClearAssetID() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearAssetID()
	return ahuo
}

// SetFromLocationType sets the "from_location_type" field.
func (ahuo *AssetHistoryUpdateOne) SetFromLocationType(i int) *AssetHistoryUpdateOne {
	ahuo.mutation.ResetFromLocationType()
	ahuo.mutation.SetFromLocationType(i)
	return ahuo
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableFromLocationType(i *int) *AssetHistoryUpdateOne {
	if i != nil {
		ahuo.SetFromLocationType(*i)
	}
	return ahuo
}

// AddFromLocationType adds i to the "from_location_type" field.
func (ahuo *AssetHistoryUpdateOne) AddFromLocationType(i int) *AssetHistoryUpdateOne {
	ahuo.mutation.AddFromLocationType(i)
	return ahuo
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (ahuo *AssetHistoryUpdateOne) ClearFromLocationType() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearFromLocationType()
	return ahuo
}

// SetFromLocationID sets the "from_location_id" field.
func (ahuo *AssetHistoryUpdateOne) SetFromLocationID(i int) *AssetHistoryUpdateOne {
	ahuo.mutation.ResetFromLocationID()
	ahuo.mutation.SetFromLocationID(i)
	return ahuo
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableFromLocationID(i *int) *AssetHistoryUpdateOne {
	if i != nil {
		ahuo.SetFromLocationID(*i)
	}
	return ahuo
}

// AddFromLocationID adds i to the "from_location_id" field.
func (ahuo *AssetHistoryUpdateOne) AddFromLocationID(i int) *AssetHistoryUpdateOne {
	ahuo.mutation.AddFromLocationID(i)
	return ahuo
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (ahuo *AssetHistoryUpdateOne) ClearFromLocationID() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearFromLocationID()
	return ahuo
}

// SetToLocationType sets the "to_location_type" field.
func (ahuo *AssetHistoryUpdateOne) SetToLocationType(i int) *AssetHistoryUpdateOne {
	ahuo.mutation.ResetToLocationType()
	ahuo.mutation.SetToLocationType(i)
	return ahuo
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableToLocationType(i *int) *AssetHistoryUpdateOne {
	if i != nil {
		ahuo.SetToLocationType(*i)
	}
	return ahuo
}

// AddToLocationType adds i to the "to_location_type" field.
func (ahuo *AssetHistoryUpdateOne) AddToLocationType(i int) *AssetHistoryUpdateOne {
	ahuo.mutation.AddToLocationType(i)
	return ahuo
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (ahuo *AssetHistoryUpdateOne) ClearToLocationType() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearToLocationType()
	return ahuo
}

// SetToLocationID sets the "to_location_id" field.
func (ahuo *AssetHistoryUpdateOne) SetToLocationID(i int) *AssetHistoryUpdateOne {
	ahuo.mutation.ResetToLocationID()
	ahuo.mutation.SetToLocationID(i)
	return ahuo
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableToLocationID(i *int) *AssetHistoryUpdateOne {
	if i != nil {
		ahuo.SetToLocationID(*i)
	}
	return ahuo
}

// AddToLocationID adds i to the "to_location_id" field.
func (ahuo *AssetHistoryUpdateOne) AddToLocationID(i int) *AssetHistoryUpdateOne {
	ahuo.mutation.AddToLocationID(i)
	return ahuo
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (ahuo *AssetHistoryUpdateOne) ClearToLocationID() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearToLocationID()
	return ahuo
}

// SetType sets the "type" field.
func (ahuo *AssetHistoryUpdateOne) SetType(u uint8) *AssetHistoryUpdateOne {
	ahuo.mutation.ResetType()
	ahuo.mutation.SetType(u)
	return ahuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableType(u *uint8) *AssetHistoryUpdateOne {
	if u != nil {
		ahuo.SetType(*u)
	}
	return ahuo
}

// AddType adds u to the "type" field.
func (ahuo *AssetHistoryUpdateOne) AddType(u int8) *AssetHistoryUpdateOne {
	ahuo.mutation.AddType(u)
	return ahuo
}

// ClearType clears the value of the "type" field.
func (ahuo *AssetHistoryUpdateOne) ClearType() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearType()
	return ahuo
}

// SetAsset sets the "asset" edge to the Asset entity.
func (ahuo *AssetHistoryUpdateOne) SetAsset(a *Asset) *AssetHistoryUpdateOne {
	return ahuo.SetAssetID(a.ID)
}

// Mutation returns the AssetHistoryMutation object of the builder.
func (ahuo *AssetHistoryUpdateOne) Mutation() *AssetHistoryMutation {
	return ahuo.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (ahuo *AssetHistoryUpdateOne) ClearAsset() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearAsset()
	return ahuo
}

// Where appends a list predicates to the AssetHistoryUpdate builder.
func (ahuo *AssetHistoryUpdateOne) Where(ps ...predicate.AssetHistory) *AssetHistoryUpdateOne {
	ahuo.mutation.Where(ps...)
	return ahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahuo *AssetHistoryUpdateOne) Select(field string, fields ...string) *AssetHistoryUpdateOne {
	ahuo.fields = append([]string{field}, fields...)
	return ahuo
}

// Save executes the query and returns the updated AssetHistory entity.
func (ahuo *AssetHistoryUpdateOne) Save(ctx context.Context) (*AssetHistory, error) {
	if err := ahuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ahuo.sqlSave, ahuo.mutation, ahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *AssetHistoryUpdateOne) SaveX(ctx context.Context) *AssetHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *AssetHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *AssetHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahuo *AssetHistoryUpdateOne) defaults() error {
	if _, ok := ahuo.mutation.UpdatedAt(); !ok {
		if assethistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assethistory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assethistory.UpdateDefaultUpdatedAt()
		ahuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ahuo *AssetHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetHistoryUpdateOne {
	ahuo.modifiers = append(ahuo.modifiers, modifiers...)
	return ahuo
}

func (ahuo *AssetHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AssetHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(assethistory.Table, assethistory.Columns, sqlgraph.NewFieldSpec(assethistory.FieldID, field.TypeUint64))
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assethistory.FieldID)
		for _, f := range fields {
			if !assethistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assethistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assethistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ahuo.mutation.DeletedAt(); ok {
		_spec.SetField(assethistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ahuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assethistory.FieldDeletedAt, field.TypeTime)
	}
	if ahuo.mutation.CreatorCleared() {
		_spec.ClearField(assethistory.FieldCreator, field.TypeJSON)
	}
	if value, ok := ahuo.mutation.LastModifier(); ok {
		_spec.SetField(assethistory.FieldLastModifier, field.TypeJSON, value)
	}
	if ahuo.mutation.LastModifierCleared() {
		_spec.ClearField(assethistory.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ahuo.mutation.Remark(); ok {
		_spec.SetField(assethistory.FieldRemark, field.TypeString, value)
	}
	if ahuo.mutation.RemarkCleared() {
		_spec.ClearField(assethistory.FieldRemark, field.TypeString)
	}
	if value, ok := ahuo.mutation.FromLocationType(); ok {
		_spec.SetField(assethistory.FieldFromLocationType, field.TypeInt, value)
	}
	if value, ok := ahuo.mutation.AddedFromLocationType(); ok {
		_spec.AddField(assethistory.FieldFromLocationType, field.TypeInt, value)
	}
	if ahuo.mutation.FromLocationTypeCleared() {
		_spec.ClearField(assethistory.FieldFromLocationType, field.TypeInt)
	}
	if value, ok := ahuo.mutation.FromLocationID(); ok {
		_spec.SetField(assethistory.FieldFromLocationID, field.TypeInt, value)
	}
	if value, ok := ahuo.mutation.AddedFromLocationID(); ok {
		_spec.AddField(assethistory.FieldFromLocationID, field.TypeInt, value)
	}
	if ahuo.mutation.FromLocationIDCleared() {
		_spec.ClearField(assethistory.FieldFromLocationID, field.TypeInt)
	}
	if value, ok := ahuo.mutation.ToLocationType(); ok {
		_spec.SetField(assethistory.FieldToLocationType, field.TypeInt, value)
	}
	if value, ok := ahuo.mutation.AddedToLocationType(); ok {
		_spec.AddField(assethistory.FieldToLocationType, field.TypeInt, value)
	}
	if ahuo.mutation.ToLocationTypeCleared() {
		_spec.ClearField(assethistory.FieldToLocationType, field.TypeInt)
	}
	if value, ok := ahuo.mutation.ToLocationID(); ok {
		_spec.SetField(assethistory.FieldToLocationID, field.TypeInt, value)
	}
	if value, ok := ahuo.mutation.AddedToLocationID(); ok {
		_spec.AddField(assethistory.FieldToLocationID, field.TypeInt, value)
	}
	if ahuo.mutation.ToLocationIDCleared() {
		_spec.ClearField(assethistory.FieldToLocationID, field.TypeInt)
	}
	if value, ok := ahuo.mutation.GetType(); ok {
		_spec.SetField(assethistory.FieldType, field.TypeUint8, value)
	}
	if value, ok := ahuo.mutation.AddedType(); ok {
		_spec.AddField(assethistory.FieldType, field.TypeUint8, value)
	}
	if ahuo.mutation.TypeCleared() {
		_spec.ClearField(assethistory.FieldType, field.TypeUint8)
	}
	if ahuo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assethistory.AssetTable,
			Columns: []string{assethistory.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahuo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assethistory.AssetTable,
			Columns: []string{assethistory.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ahuo.modifiers...)
	_node = &AssetHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assethistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ahuo.mutation.done = true
	return _node, nil
}
