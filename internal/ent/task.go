// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/task"
	"github.com/rs/xid"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID xid.ID `json:"uuid,omitempty"`
	// ExchangeID holds the value of the "exchange_id" field.
	ExchangeID *uint64 `json:"exchange_id,omitempty"`
	// CabinetID holds the value of the "cabinet_id" field.
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// 电柜编码
	Serial string `json:"serial,omitempty"`
	// 任务类别
	Job model.TaskJob `json:"job,omitempty"`
	// 任务状态
	Status model.TaskStatus `json:"status,omitempty"`
	// 开始时间
	StartAt *time.Time `json:"start_at,omitempty"`
	// 结束时间
	StopAt *time.Time `json:"stop_at,omitempty"`
	// 失败消息
	Message string `json:"message,omitempty"`
	// 换电信息
	Exchange *model.ExchangeTaskInfo `json:"exchange,omitempty"`
	// 仓位信息
	BusinessBinInfo *model.BinInfo `json:"business_bin_info,omitempty"`
	// 电柜信息
	Cabinet *model.ExchangeTaskCabinet `json:"cabinet,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges TaskEdges `json:"edges"`
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[0] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldExchange, task.FieldBusinessBinInfo, task.FieldCabinet:
			values[i] = new([]byte)
		case task.FieldStatus:
			values[i] = new(model.TaskStatus)
		case task.FieldID, task.FieldRiderID, task.FieldExchangeID, task.FieldCabinetID:
			values[i] = new(sql.NullInt64)
		case task.FieldSerial, task.FieldJob, task.FieldMessage:
			values[i] = new(sql.NullString)
		case task.FieldCreatedAt, task.FieldUpdatedAt, task.FieldStartAt, task.FieldStopAt:
			values[i] = new(sql.NullTime)
		case task.FieldUUID:
			values[i] = new(xid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Task", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = uint64(value.Int64)
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case task.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				t.RiderID = uint64(value.Int64)
			}
		case task.FieldUUID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				t.UUID = *value
			}
		case task.FieldExchangeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_id", values[i])
			} else if value.Valid {
				t.ExchangeID = new(uint64)
				*t.ExchangeID = uint64(value.Int64)
			}
		case task.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				t.CabinetID = new(uint64)
				*t.CabinetID = uint64(value.Int64)
			}
		case task.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				t.Serial = value.String
			}
		case task.FieldJob:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job", values[i])
			} else if value.Valid {
				t.Job = model.TaskJob(value.String)
			}
		case task.FieldStatus:
			if value, ok := values[i].(*model.TaskStatus); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value != nil {
				t.Status = *value
			}
		case task.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				t.StartAt = new(time.Time)
				*t.StartAt = value.Time
			}
		case task.FieldStopAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stop_at", values[i])
			} else if value.Valid {
				t.StopAt = new(time.Time)
				*t.StopAt = value.Time
			}
		case task.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				t.Message = value.String
			}
		case task.FieldExchange:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field exchange", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Exchange); err != nil {
					return fmt.Errorf("unmarshal field exchange: %w", err)
				}
			}
		case task.FieldBusinessBinInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field business_bin_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.BusinessBinInfo); err != nil {
					return fmt.Errorf("unmarshal field business_bin_info: %w", err)
				}
			}
		case task.FieldCabinet:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Cabinet); err != nil {
					return fmt.Errorf("unmarshal field cabinet: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryRider queries the "rider" edge of the Task entity.
func (t *Task) QueryRider() *RiderQuery {
	return NewTaskClient(t.config).QueryRider(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", t.RiderID))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(fmt.Sprintf("%v", t.UUID))
	builder.WriteString(", ")
	if v := t.ExchangeID; v != nil {
		builder.WriteString("exchange_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(t.Serial)
	builder.WriteString(", ")
	builder.WriteString("job=")
	builder.WriteString(fmt.Sprintf("%v", t.Job))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	if v := t.StartAt; v != nil {
		builder.WriteString("start_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := t.StopAt; v != nil {
		builder.WriteString("stop_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(t.Message)
	builder.WriteString(", ")
	builder.WriteString("exchange=")
	builder.WriteString(fmt.Sprintf("%v", t.Exchange))
	builder.WriteString(", ")
	builder.WriteString("business_bin_info=")
	builder.WriteString(fmt.Sprintf("%v", t.BusinessBinInfo))
	builder.WriteString(", ")
	builder.WriteString("cabinet=")
	builder.WriteString(fmt.Sprintf("%v", t.Cabinet))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
