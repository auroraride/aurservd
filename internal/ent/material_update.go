// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/material"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// MaterialUpdate is the builder for updating Material entities.
type MaterialUpdate struct {
	config
	hooks     []Hook
	mutation  *MaterialMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MaterialUpdate builder.
func (mu *MaterialUpdate) Where(ps ...predicate.Material) *MaterialUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MaterialUpdate) SetUpdatedAt(t time.Time) *MaterialUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MaterialUpdate) SetDeletedAt(t time.Time) *MaterialUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MaterialUpdate) SetNillableDeletedAt(t *time.Time) *MaterialUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *MaterialUpdate) ClearDeletedAt() *MaterialUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetLastModifier sets the "last_modifier" field.
func (mu *MaterialUpdate) SetLastModifier(m *model.Modifier) *MaterialUpdate {
	mu.mutation.SetLastModifier(m)
	return mu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (mu *MaterialUpdate) ClearLastModifier() *MaterialUpdate {
	mu.mutation.ClearLastModifier()
	return mu
}

// SetRemark sets the "remark" field.
func (mu *MaterialUpdate) SetRemark(s string) *MaterialUpdate {
	mu.mutation.SetRemark(s)
	return mu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mu *MaterialUpdate) SetNillableRemark(s *string) *MaterialUpdate {
	if s != nil {
		mu.SetRemark(*s)
	}
	return mu
}

// ClearRemark clears the value of the "remark" field.
func (mu *MaterialUpdate) ClearRemark() *MaterialUpdate {
	mu.mutation.ClearRemark()
	return mu
}

// SetName sets the "name" field.
func (mu *MaterialUpdate) SetName(s string) *MaterialUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MaterialUpdate) SetNillableName(s *string) *MaterialUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetType sets the "type" field.
func (mu *MaterialUpdate) SetType(u uint8) *MaterialUpdate {
	mu.mutation.ResetType()
	mu.mutation.SetType(u)
	return mu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mu *MaterialUpdate) SetNillableType(u *uint8) *MaterialUpdate {
	if u != nil {
		mu.SetType(*u)
	}
	return mu
}

// AddType adds u to the "type" field.
func (mu *MaterialUpdate) AddType(u int8) *MaterialUpdate {
	mu.mutation.AddType(u)
	return mu
}

// SetStatement sets the "statement" field.
func (mu *MaterialUpdate) SetStatement(s string) *MaterialUpdate {
	mu.mutation.SetStatement(s)
	return mu
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (mu *MaterialUpdate) SetNillableStatement(s *string) *MaterialUpdate {
	if s != nil {
		mu.SetStatement(*s)
	}
	return mu
}

// ClearStatement clears the value of the "statement" field.
func (mu *MaterialUpdate) ClearStatement() *MaterialUpdate {
	mu.mutation.ClearStatement()
	return mu
}

// SetAllot sets the "allot" field.
func (mu *MaterialUpdate) SetAllot(b bool) *MaterialUpdate {
	mu.mutation.SetAllot(b)
	return mu
}

// SetNillableAllot sets the "allot" field if the given value is not nil.
func (mu *MaterialUpdate) SetNillableAllot(b *bool) *MaterialUpdate {
	if b != nil {
		mu.SetAllot(*b)
	}
	return mu
}

// Mutation returns the MaterialMutation object of the builder.
func (mu *MaterialUpdate) Mutation() *MaterialMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MaterialUpdate) Save(ctx context.Context) (int, error) {
	if err := mu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MaterialUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MaterialUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MaterialUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MaterialUpdate) defaults() error {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		if material.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized material.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := material.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MaterialUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MaterialUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MaterialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(material.Table, material.Columns, sqlgraph.NewFieldSpec(material.FieldID, field.TypeUint64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(material.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(material.FieldDeletedAt, field.TypeTime, value)
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.ClearField(material.FieldDeletedAt, field.TypeTime)
	}
	if mu.mutation.CreatorCleared() {
		_spec.ClearField(material.FieldCreator, field.TypeJSON)
	}
	if value, ok := mu.mutation.LastModifier(); ok {
		_spec.SetField(material.FieldLastModifier, field.TypeJSON, value)
	}
	if mu.mutation.LastModifierCleared() {
		_spec.ClearField(material.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := mu.mutation.Remark(); ok {
		_spec.SetField(material.FieldRemark, field.TypeString, value)
	}
	if mu.mutation.RemarkCleared() {
		_spec.ClearField(material.FieldRemark, field.TypeString)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(material.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(material.FieldType, field.TypeUint8, value)
	}
	if value, ok := mu.mutation.AddedType(); ok {
		_spec.AddField(material.FieldType, field.TypeUint8, value)
	}
	if value, ok := mu.mutation.Statement(); ok {
		_spec.SetField(material.FieldStatement, field.TypeString, value)
	}
	if mu.mutation.StatementCleared() {
		_spec.ClearField(material.FieldStatement, field.TypeString)
	}
	if value, ok := mu.mutation.Allot(); ok {
		_spec.SetField(material.FieldAllot, field.TypeBool, value)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{material.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MaterialUpdateOne is the builder for updating a single Material entity.
type MaterialUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MaterialMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MaterialUpdateOne) SetUpdatedAt(t time.Time) *MaterialUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MaterialUpdateOne) SetDeletedAt(t time.Time) *MaterialUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MaterialUpdateOne) SetNillableDeletedAt(t *time.Time) *MaterialUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *MaterialUpdateOne) ClearDeletedAt() *MaterialUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetLastModifier sets the "last_modifier" field.
func (muo *MaterialUpdateOne) SetLastModifier(m *model.Modifier) *MaterialUpdateOne {
	muo.mutation.SetLastModifier(m)
	return muo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (muo *MaterialUpdateOne) ClearLastModifier() *MaterialUpdateOne {
	muo.mutation.ClearLastModifier()
	return muo
}

// SetRemark sets the "remark" field.
func (muo *MaterialUpdateOne) SetRemark(s string) *MaterialUpdateOne {
	muo.mutation.SetRemark(s)
	return muo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (muo *MaterialUpdateOne) SetNillableRemark(s *string) *MaterialUpdateOne {
	if s != nil {
		muo.SetRemark(*s)
	}
	return muo
}

// ClearRemark clears the value of the "remark" field.
func (muo *MaterialUpdateOne) ClearRemark() *MaterialUpdateOne {
	muo.mutation.ClearRemark()
	return muo
}

// SetName sets the "name" field.
func (muo *MaterialUpdateOne) SetName(s string) *MaterialUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MaterialUpdateOne) SetNillableName(s *string) *MaterialUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetType sets the "type" field.
func (muo *MaterialUpdateOne) SetType(u uint8) *MaterialUpdateOne {
	muo.mutation.ResetType()
	muo.mutation.SetType(u)
	return muo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (muo *MaterialUpdateOne) SetNillableType(u *uint8) *MaterialUpdateOne {
	if u != nil {
		muo.SetType(*u)
	}
	return muo
}

// AddType adds u to the "type" field.
func (muo *MaterialUpdateOne) AddType(u int8) *MaterialUpdateOne {
	muo.mutation.AddType(u)
	return muo
}

// SetStatement sets the "statement" field.
func (muo *MaterialUpdateOne) SetStatement(s string) *MaterialUpdateOne {
	muo.mutation.SetStatement(s)
	return muo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (muo *MaterialUpdateOne) SetNillableStatement(s *string) *MaterialUpdateOne {
	if s != nil {
		muo.SetStatement(*s)
	}
	return muo
}

// ClearStatement clears the value of the "statement" field.
func (muo *MaterialUpdateOne) ClearStatement() *MaterialUpdateOne {
	muo.mutation.ClearStatement()
	return muo
}

// SetAllot sets the "allot" field.
func (muo *MaterialUpdateOne) SetAllot(b bool) *MaterialUpdateOne {
	muo.mutation.SetAllot(b)
	return muo
}

// SetNillableAllot sets the "allot" field if the given value is not nil.
func (muo *MaterialUpdateOne) SetNillableAllot(b *bool) *MaterialUpdateOne {
	if b != nil {
		muo.SetAllot(*b)
	}
	return muo
}

// Mutation returns the MaterialMutation object of the builder.
func (muo *MaterialUpdateOne) Mutation() *MaterialMutation {
	return muo.mutation
}

// Where appends a list predicates to the MaterialUpdate builder.
func (muo *MaterialUpdateOne) Where(ps ...predicate.Material) *MaterialUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MaterialUpdateOne) Select(field string, fields ...string) *MaterialUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Material entity.
func (muo *MaterialUpdateOne) Save(ctx context.Context) (*Material, error) {
	if err := muo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MaterialUpdateOne) SaveX(ctx context.Context) *Material {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MaterialUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MaterialUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MaterialUpdateOne) defaults() error {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		if material.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized material.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := material.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MaterialUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MaterialUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MaterialUpdateOne) sqlSave(ctx context.Context) (_node *Material, err error) {
	_spec := sqlgraph.NewUpdateSpec(material.Table, material.Columns, sqlgraph.NewFieldSpec(material.FieldID, field.TypeUint64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Material.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, material.FieldID)
		for _, f := range fields {
			if !material.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != material.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(material.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(material.FieldDeletedAt, field.TypeTime, value)
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.ClearField(material.FieldDeletedAt, field.TypeTime)
	}
	if muo.mutation.CreatorCleared() {
		_spec.ClearField(material.FieldCreator, field.TypeJSON)
	}
	if value, ok := muo.mutation.LastModifier(); ok {
		_spec.SetField(material.FieldLastModifier, field.TypeJSON, value)
	}
	if muo.mutation.LastModifierCleared() {
		_spec.ClearField(material.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := muo.mutation.Remark(); ok {
		_spec.SetField(material.FieldRemark, field.TypeString, value)
	}
	if muo.mutation.RemarkCleared() {
		_spec.ClearField(material.FieldRemark, field.TypeString)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(material.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(material.FieldType, field.TypeUint8, value)
	}
	if value, ok := muo.mutation.AddedType(); ok {
		_spec.AddField(material.FieldType, field.TypeUint8, value)
	}
	if value, ok := muo.mutation.Statement(); ok {
		_spec.SetField(material.FieldStatement, field.TypeString, value)
	}
	if muo.mutation.StatementCleared() {
		_spec.ClearField(material.FieldStatement, field.TypeString)
	}
	if value, ok := muo.mutation.Allot(); ok {
		_spec.SetField(material.FieldAllot, field.TypeBool, value)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Material{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{material.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
