// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// PromotionReferrals is the model entity for the PromotionReferrals schema.
type PromotionReferrals struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 骑手ID
	RiderID *uint64 `json:"rider_id,omitempty"`
	// SubscribeID holds the value of the "subscribe_id" field.
	SubscribeID *uint64 `json:"subscribe_id,omitempty"`
	// 推广者id
	ReferringMemberID *uint64 `json:"referring_member_id,omitempty"`
	// 被推广者ID<骑手>
	ReferredMemberID uint64 `json:"referred_member_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionReferralsQuery when eager-loading is set.
	Edges        PromotionReferralsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionReferralsEdges holds the relations/edges for other nodes in the graph.
type PromotionReferralsEdges struct {
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// Subscribe holds the value of the subscribe edge.
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// ReferringMember holds the value of the referring_member edge.
	ReferringMember *PromotionMember `json:"referring_member,omitempty"`
	// ReferredMember holds the value of the referred_member edge.
	ReferredMember *PromotionMember `json:"referred_member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionReferralsEdges) RiderOrErr() (*Rider, error) {
	if e.Rider != nil {
		return e.Rider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: rider.Label}
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionReferralsEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.Subscribe != nil {
		return e.Subscribe, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscribe.Label}
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// ReferringMemberOrErr returns the ReferringMember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionReferralsEdges) ReferringMemberOrErr() (*PromotionMember, error) {
	if e.ReferringMember != nil {
		return e.ReferringMember, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: promotionmember.Label}
	}
	return nil, &NotLoadedError{edge: "referring_member"}
}

// ReferredMemberOrErr returns the ReferredMember value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionReferralsEdges) ReferredMemberOrErr() (*PromotionMember, error) {
	if e.ReferredMember != nil {
		return e.ReferredMember, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: promotionmember.Label}
	}
	return nil, &NotLoadedError{edge: "referred_member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionReferrals) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionreferrals.FieldCreator, promotionreferrals.FieldLastModifier:
			values[i] = new([]byte)
		case promotionreferrals.FieldID, promotionreferrals.FieldRiderID, promotionreferrals.FieldSubscribeID, promotionreferrals.FieldReferringMemberID, promotionreferrals.FieldReferredMemberID:
			values[i] = new(sql.NullInt64)
		case promotionreferrals.FieldRemark:
			values[i] = new(sql.NullString)
		case promotionreferrals.FieldCreatedAt, promotionreferrals.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionReferrals fields.
func (pr *PromotionReferrals) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionreferrals.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = uint64(value.Int64)
		case promotionreferrals.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case promotionreferrals.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case promotionreferrals.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotionreferrals.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotionreferrals.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pr.Remark = value.String
			}
		case promotionreferrals.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				pr.RiderID = new(uint64)
				*pr.RiderID = uint64(value.Int64)
			}
		case promotionreferrals.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				pr.SubscribeID = new(uint64)
				*pr.SubscribeID = uint64(value.Int64)
			}
		case promotionreferrals.FieldReferringMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field referring_member_id", values[i])
			} else if value.Valid {
				pr.ReferringMemberID = new(uint64)
				*pr.ReferringMemberID = uint64(value.Int64)
			}
		case promotionreferrals.FieldReferredMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field referred_member_id", values[i])
			} else if value.Valid {
				pr.ReferredMemberID = uint64(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionReferrals.
// This includes values selected through modifiers, order, etc.
func (pr *PromotionReferrals) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryRider queries the "rider" edge of the PromotionReferrals entity.
func (pr *PromotionReferrals) QueryRider() *RiderQuery {
	return NewPromotionReferralsClient(pr.config).QueryRider(pr)
}

// QuerySubscribe queries the "subscribe" edge of the PromotionReferrals entity.
func (pr *PromotionReferrals) QuerySubscribe() *SubscribeQuery {
	return NewPromotionReferralsClient(pr.config).QuerySubscribe(pr)
}

// QueryReferringMember queries the "referring_member" edge of the PromotionReferrals entity.
func (pr *PromotionReferrals) QueryReferringMember() *PromotionMemberQuery {
	return NewPromotionReferralsClient(pr.config).QueryReferringMember(pr)
}

// QueryReferredMember queries the "referred_member" edge of the PromotionReferrals entity.
func (pr *PromotionReferrals) QueryReferredMember() *PromotionMemberQuery {
	return NewPromotionReferralsClient(pr.config).QueryReferredMember(pr)
}

// Update returns a builder for updating this PromotionReferrals.
// Note that you need to call PromotionReferrals.Unwrap() before calling this method if this PromotionReferrals
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PromotionReferrals) Update() *PromotionReferralsUpdateOne {
	return NewPromotionReferralsClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PromotionReferrals entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PromotionReferrals) Unwrap() *PromotionReferrals {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionReferrals is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PromotionReferrals) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionReferrals(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pr.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pr.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pr.Remark)
	builder.WriteString(", ")
	if v := pr.RiderID; v != nil {
		builder.WriteString("rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.SubscribeID; v != nil {
		builder.WriteString("subscribe_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.ReferringMemberID; v != nil {
		builder.WriteString("referring_member_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("referred_member_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ReferredMemberID))
	builder.WriteByte(')')
	return builder.String()
}

// PromotionReferralsSlice is a parsable slice of PromotionReferrals.
type PromotionReferralsSlice []*PromotionReferrals
