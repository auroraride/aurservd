// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assetrole"
)

// AssetRoleCreate is the builder for creating a AssetRole entity.
type AssetRoleCreate struct {
	config
	mutation *AssetRoleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (arc *AssetRoleCreate) SetName(s string) *AssetRoleCreate {
	arc.mutation.SetName(s)
	return arc
}

// SetPermissions sets the "permissions" field.
func (arc *AssetRoleCreate) SetPermissions(s []string) *AssetRoleCreate {
	arc.mutation.SetPermissions(s)
	return arc
}

// SetBuildin sets the "buildin" field.
func (arc *AssetRoleCreate) SetBuildin(b bool) *AssetRoleCreate {
	arc.mutation.SetBuildin(b)
	return arc
}

// SetNillableBuildin sets the "buildin" field if the given value is not nil.
func (arc *AssetRoleCreate) SetNillableBuildin(b *bool) *AssetRoleCreate {
	if b != nil {
		arc.SetBuildin(*b)
	}
	return arc
}

// SetSuper sets the "super" field.
func (arc *AssetRoleCreate) SetSuper(b bool) *AssetRoleCreate {
	arc.mutation.SetSuper(b)
	return arc
}

// SetNillableSuper sets the "super" field if the given value is not nil.
func (arc *AssetRoleCreate) SetNillableSuper(b *bool) *AssetRoleCreate {
	if b != nil {
		arc.SetSuper(*b)
	}
	return arc
}

// SetCreatedAt sets the "created_at" field.
func (arc *AssetRoleCreate) SetCreatedAt(t time.Time) *AssetRoleCreate {
	arc.mutation.SetCreatedAt(t)
	return arc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arc *AssetRoleCreate) SetNillableCreatedAt(t *time.Time) *AssetRoleCreate {
	if t != nil {
		arc.SetCreatedAt(*t)
	}
	return arc
}

// AddAssetManagerIDs adds the "asset_managers" edge to the AssetManager entity by IDs.
func (arc *AssetRoleCreate) AddAssetManagerIDs(ids ...uint64) *AssetRoleCreate {
	arc.mutation.AddAssetManagerIDs(ids...)
	return arc
}

// AddAssetManagers adds the "asset_managers" edges to the AssetManager entity.
func (arc *AssetRoleCreate) AddAssetManagers(a ...*AssetManager) *AssetRoleCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return arc.AddAssetManagerIDs(ids...)
}

// Mutation returns the AssetRoleMutation object of the builder.
func (arc *AssetRoleCreate) Mutation() *AssetRoleMutation {
	return arc.mutation
}

// Save creates the AssetRole in the database.
func (arc *AssetRoleCreate) Save(ctx context.Context) (*AssetRole, error) {
	arc.defaults()
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AssetRoleCreate) SaveX(ctx context.Context) *AssetRole {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AssetRoleCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AssetRoleCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arc *AssetRoleCreate) defaults() {
	if _, ok := arc.mutation.Buildin(); !ok {
		v := assetrole.DefaultBuildin
		arc.mutation.SetBuildin(v)
	}
	if _, ok := arc.mutation.Super(); !ok {
		v := assetrole.DefaultSuper
		arc.mutation.SetSuper(v)
	}
	if _, ok := arc.mutation.CreatedAt(); !ok {
		v := assetrole.DefaultCreatedAt()
		arc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AssetRoleCreate) check() error {
	if _, ok := arc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AssetRole.name"`)}
	}
	if _, ok := arc.mutation.Buildin(); !ok {
		return &ValidationError{Name: "buildin", err: errors.New(`ent: missing required field "AssetRole.buildin"`)}
	}
	if _, ok := arc.mutation.Super(); !ok {
		return &ValidationError{Name: "super", err: errors.New(`ent: missing required field "AssetRole.super"`)}
	}
	if _, ok := arc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetRole.created_at"`)}
	}
	return nil
}

func (arc *AssetRoleCreate) sqlSave(ctx context.Context) (*AssetRole, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AssetRoleCreate) createSpec() (*AssetRole, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetRole{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(assetrole.Table, sqlgraph.NewFieldSpec(assetrole.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = arc.conflict
	if value, ok := arc.mutation.Name(); ok {
		_spec.SetField(assetrole.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := arc.mutation.Permissions(); ok {
		_spec.SetField(assetrole.FieldPermissions, field.TypeJSON, value)
		_node.Permissions = value
	}
	if value, ok := arc.mutation.Buildin(); ok {
		_spec.SetField(assetrole.FieldBuildin, field.TypeBool, value)
		_node.Buildin = value
	}
	if value, ok := arc.mutation.Super(); ok {
		_spec.SetField(assetrole.FieldSuper, field.TypeBool, value)
		_node.Super = value
	}
	if value, ok := arc.mutation.CreatedAt(); ok {
		_spec.SetField(assetrole.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := arc.mutation.AssetManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetrole.AssetManagersTable,
			Columns: []string{assetrole.AssetManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetRole.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetRoleUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (arc *AssetRoleCreate) OnConflict(opts ...sql.ConflictOption) *AssetRoleUpsertOne {
	arc.conflict = opts
	return &AssetRoleUpsertOne{
		create: arc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetRole.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arc *AssetRoleCreate) OnConflictColumns(columns ...string) *AssetRoleUpsertOne {
	arc.conflict = append(arc.conflict, sql.ConflictColumns(columns...))
	return &AssetRoleUpsertOne{
		create: arc,
	}
}

type (
	// AssetRoleUpsertOne is the builder for "upsert"-ing
	//  one AssetRole node.
	AssetRoleUpsertOne struct {
		create *AssetRoleCreate
	}

	// AssetRoleUpsert is the "OnConflict" setter.
	AssetRoleUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *AssetRoleUpsert) SetName(v string) *AssetRoleUpsert {
	u.Set(assetrole.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetRoleUpsert) UpdateName() *AssetRoleUpsert {
	u.SetExcluded(assetrole.FieldName)
	return u
}

// SetPermissions sets the "permissions" field.
func (u *AssetRoleUpsert) SetPermissions(v []string) *AssetRoleUpsert {
	u.Set(assetrole.FieldPermissions, v)
	return u
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *AssetRoleUpsert) UpdatePermissions() *AssetRoleUpsert {
	u.SetExcluded(assetrole.FieldPermissions)
	return u
}

// ClearPermissions clears the value of the "permissions" field.
func (u *AssetRoleUpsert) ClearPermissions() *AssetRoleUpsert {
	u.SetNull(assetrole.FieldPermissions)
	return u
}

// SetBuildin sets the "buildin" field.
func (u *AssetRoleUpsert) SetBuildin(v bool) *AssetRoleUpsert {
	u.Set(assetrole.FieldBuildin, v)
	return u
}

// UpdateBuildin sets the "buildin" field to the value that was provided on create.
func (u *AssetRoleUpsert) UpdateBuildin() *AssetRoleUpsert {
	u.SetExcluded(assetrole.FieldBuildin)
	return u
}

// SetSuper sets the "super" field.
func (u *AssetRoleUpsert) SetSuper(v bool) *AssetRoleUpsert {
	u.Set(assetrole.FieldSuper, v)
	return u
}

// UpdateSuper sets the "super" field to the value that was provided on create.
func (u *AssetRoleUpsert) UpdateSuper() *AssetRoleUpsert {
	u.SetExcluded(assetrole.FieldSuper)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetRole.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetRoleUpsertOne) UpdateNewValues() *AssetRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetrole.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetRole.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetRoleUpsertOne) Ignore() *AssetRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetRoleUpsertOne) DoNothing() *AssetRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetRoleCreate.OnConflict
// documentation for more info.
func (u *AssetRoleUpsertOne) Update(set func(*AssetRoleUpsert)) *AssetRoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetRoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *AssetRoleUpsertOne) SetName(v string) *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetRoleUpsertOne) UpdateName() *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.UpdateName()
	})
}

// SetPermissions sets the "permissions" field.
func (u *AssetRoleUpsertOne) SetPermissions(v []string) *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *AssetRoleUpsertOne) UpdatePermissions() *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *AssetRoleUpsertOne) ClearPermissions() *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.ClearPermissions()
	})
}

// SetBuildin sets the "buildin" field.
func (u *AssetRoleUpsertOne) SetBuildin(v bool) *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.SetBuildin(v)
	})
}

// UpdateBuildin sets the "buildin" field to the value that was provided on create.
func (u *AssetRoleUpsertOne) UpdateBuildin() *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.UpdateBuildin()
	})
}

// SetSuper sets the "super" field.
func (u *AssetRoleUpsertOne) SetSuper(v bool) *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.SetSuper(v)
	})
}

// UpdateSuper sets the "super" field to the value that was provided on create.
func (u *AssetRoleUpsertOne) UpdateSuper() *AssetRoleUpsertOne {
	return u.Update(func(s *AssetRoleUpsert) {
		s.UpdateSuper()
	})
}

// Exec executes the query.
func (u *AssetRoleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetRoleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetRoleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetRoleUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetRoleUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetRoleCreateBulk is the builder for creating many AssetRole entities in bulk.
type AssetRoleCreateBulk struct {
	config
	err      error
	builders []*AssetRoleCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetRole entities in the database.
func (arcb *AssetRoleCreateBulk) Save(ctx context.Context) ([]*AssetRole, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AssetRole, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetRoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = arcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AssetRoleCreateBulk) SaveX(ctx context.Context) []*AssetRole {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AssetRoleCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AssetRoleCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetRole.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetRoleUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (arcb *AssetRoleCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetRoleUpsertBulk {
	arcb.conflict = opts
	return &AssetRoleUpsertBulk{
		create: arcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetRole.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arcb *AssetRoleCreateBulk) OnConflictColumns(columns ...string) *AssetRoleUpsertBulk {
	arcb.conflict = append(arcb.conflict, sql.ConflictColumns(columns...))
	return &AssetRoleUpsertBulk{
		create: arcb,
	}
}

// AssetRoleUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetRole nodes.
type AssetRoleUpsertBulk struct {
	create *AssetRoleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetRole.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetRoleUpsertBulk) UpdateNewValues() *AssetRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetrole.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetRole.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetRoleUpsertBulk) Ignore() *AssetRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetRoleUpsertBulk) DoNothing() *AssetRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetRoleCreateBulk.OnConflict
// documentation for more info.
func (u *AssetRoleUpsertBulk) Update(set func(*AssetRoleUpsert)) *AssetRoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetRoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *AssetRoleUpsertBulk) SetName(v string) *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetRoleUpsertBulk) UpdateName() *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.UpdateName()
	})
}

// SetPermissions sets the "permissions" field.
func (u *AssetRoleUpsertBulk) SetPermissions(v []string) *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.SetPermissions(v)
	})
}

// UpdatePermissions sets the "permissions" field to the value that was provided on create.
func (u *AssetRoleUpsertBulk) UpdatePermissions() *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.UpdatePermissions()
	})
}

// ClearPermissions clears the value of the "permissions" field.
func (u *AssetRoleUpsertBulk) ClearPermissions() *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.ClearPermissions()
	})
}

// SetBuildin sets the "buildin" field.
func (u *AssetRoleUpsertBulk) SetBuildin(v bool) *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.SetBuildin(v)
	})
}

// UpdateBuildin sets the "buildin" field to the value that was provided on create.
func (u *AssetRoleUpsertBulk) UpdateBuildin() *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.UpdateBuildin()
	})
}

// SetSuper sets the "super" field.
func (u *AssetRoleUpsertBulk) SetSuper(v bool) *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.SetSuper(v)
	})
}

// UpdateSuper sets the "super" field to the value that was provided on create.
func (u *AssetRoleUpsertBulk) UpdateSuper() *AssetRoleUpsertBulk {
	return u.Update(func(s *AssetRoleUpsert) {
		s.UpdateSuper()
	})
}

// Exec executes the query.
func (u *AssetRoleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetRoleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetRoleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetRoleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
