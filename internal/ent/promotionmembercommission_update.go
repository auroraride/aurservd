// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionmembercommission"
)

// PromotionMemberCommissionUpdate is the builder for updating PromotionMemberCommission entities.
type PromotionMemberCommissionUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionMemberCommissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionMemberCommissionUpdate builder.
func (pmcu *PromotionMemberCommissionUpdate) Where(ps ...predicate.PromotionMemberCommission) *PromotionMemberCommissionUpdate {
	pmcu.mutation.Where(ps...)
	return pmcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmcu *PromotionMemberCommissionUpdate) SetUpdatedAt(t time.Time) *PromotionMemberCommissionUpdate {
	pmcu.mutation.SetUpdatedAt(t)
	return pmcu
}

// SetDeletedAt sets the "deleted_at" field.
func (pmcu *PromotionMemberCommissionUpdate) SetDeletedAt(t time.Time) *PromotionMemberCommissionUpdate {
	pmcu.mutation.SetDeletedAt(t)
	return pmcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmcu *PromotionMemberCommissionUpdate) SetNillableDeletedAt(t *time.Time) *PromotionMemberCommissionUpdate {
	if t != nil {
		pmcu.SetDeletedAt(*t)
	}
	return pmcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pmcu *PromotionMemberCommissionUpdate) ClearDeletedAt() *PromotionMemberCommissionUpdate {
	pmcu.mutation.ClearDeletedAt()
	return pmcu
}

// SetCommissionID sets the "commission_id" field.
func (pmcu *PromotionMemberCommissionUpdate) SetCommissionID(u uint64) *PromotionMemberCommissionUpdate {
	pmcu.mutation.SetCommissionID(u)
	return pmcu
}

// SetMemberID sets the "member_id" field.
func (pmcu *PromotionMemberCommissionUpdate) SetMemberID(u uint64) *PromotionMemberCommissionUpdate {
	pmcu.mutation.SetMemberID(u)
	return pmcu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pmcu *PromotionMemberCommissionUpdate) SetNillableMemberID(u *uint64) *PromotionMemberCommissionUpdate {
	if u != nil {
		pmcu.SetMemberID(*u)
	}
	return pmcu
}

// ClearMemberID clears the value of the "member_id" field.
func (pmcu *PromotionMemberCommissionUpdate) ClearMemberID() *PromotionMemberCommissionUpdate {
	pmcu.mutation.ClearMemberID()
	return pmcu
}

// SetCommission sets the "commission" edge to the PromotionCommission entity.
func (pmcu *PromotionMemberCommissionUpdate) SetCommission(p *PromotionCommission) *PromotionMemberCommissionUpdate {
	return pmcu.SetCommissionID(p.ID)
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pmcu *PromotionMemberCommissionUpdate) SetMember(p *PromotionMember) *PromotionMemberCommissionUpdate {
	return pmcu.SetMemberID(p.ID)
}

// Mutation returns the PromotionMemberCommissionMutation object of the builder.
func (pmcu *PromotionMemberCommissionUpdate) Mutation() *PromotionMemberCommissionMutation {
	return pmcu.mutation
}

// ClearCommission clears the "commission" edge to the PromotionCommission entity.
func (pmcu *PromotionMemberCommissionUpdate) ClearCommission() *PromotionMemberCommissionUpdate {
	pmcu.mutation.ClearCommission()
	return pmcu
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pmcu *PromotionMemberCommissionUpdate) ClearMember() *PromotionMemberCommissionUpdate {
	pmcu.mutation.ClearMember()
	return pmcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmcu *PromotionMemberCommissionUpdate) Save(ctx context.Context) (int, error) {
	pmcu.defaults()
	return withHooks(ctx, pmcu.sqlSave, pmcu.mutation, pmcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmcu *PromotionMemberCommissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pmcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmcu *PromotionMemberCommissionUpdate) Exec(ctx context.Context) error {
	_, err := pmcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcu *PromotionMemberCommissionUpdate) ExecX(ctx context.Context) {
	if err := pmcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmcu *PromotionMemberCommissionUpdate) defaults() {
	if _, ok := pmcu.mutation.UpdatedAt(); !ok {
		v := promotionmembercommission.UpdateDefaultUpdatedAt()
		pmcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmcu *PromotionMemberCommissionUpdate) check() error {
	if _, ok := pmcu.mutation.CommissionID(); pmcu.mutation.CommissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionMemberCommission.commission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmcu *PromotionMemberCommissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionMemberCommissionUpdate {
	pmcu.modifiers = append(pmcu.modifiers, modifiers...)
	return pmcu
}

func (pmcu *PromotionMemberCommissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(promotionmembercommission.Table, promotionmembercommission.Columns, sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64))
	if ps := pmcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmcu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionmembercommission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pmcu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionmembercommission.FieldDeletedAt, field.TypeTime, value)
	}
	if pmcu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionmembercommission.FieldDeletedAt, field.TypeTime)
	}
	if pmcu.mutation.CommissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmembercommission.CommissionTable,
			Columns: []string{promotionmembercommission.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmcu.mutation.CommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmembercommission.CommissionTable,
			Columns: []string{promotionmembercommission.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmcu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmembercommission.MemberTable,
			Columns: []string{promotionmembercommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmcu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmembercommission.MemberTable,
			Columns: []string{promotionmembercommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pmcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pmcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionmembercommission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmcu.mutation.done = true
	return n, nil
}

// PromotionMemberCommissionUpdateOne is the builder for updating a single PromotionMemberCommission entity.
type PromotionMemberCommissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionMemberCommissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pmcuo *PromotionMemberCommissionUpdateOne) SetUpdatedAt(t time.Time) *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.SetUpdatedAt(t)
	return pmcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pmcuo *PromotionMemberCommissionUpdateOne) SetDeletedAt(t time.Time) *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.SetDeletedAt(t)
	return pmcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmcuo *PromotionMemberCommissionUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionMemberCommissionUpdateOne {
	if t != nil {
		pmcuo.SetDeletedAt(*t)
	}
	return pmcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pmcuo *PromotionMemberCommissionUpdateOne) ClearDeletedAt() *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.ClearDeletedAt()
	return pmcuo
}

// SetCommissionID sets the "commission_id" field.
func (pmcuo *PromotionMemberCommissionUpdateOne) SetCommissionID(u uint64) *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.SetCommissionID(u)
	return pmcuo
}

// SetMemberID sets the "member_id" field.
func (pmcuo *PromotionMemberCommissionUpdateOne) SetMemberID(u uint64) *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.SetMemberID(u)
	return pmcuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pmcuo *PromotionMemberCommissionUpdateOne) SetNillableMemberID(u *uint64) *PromotionMemberCommissionUpdateOne {
	if u != nil {
		pmcuo.SetMemberID(*u)
	}
	return pmcuo
}

// ClearMemberID clears the value of the "member_id" field.
func (pmcuo *PromotionMemberCommissionUpdateOne) ClearMemberID() *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.ClearMemberID()
	return pmcuo
}

// SetCommission sets the "commission" edge to the PromotionCommission entity.
func (pmcuo *PromotionMemberCommissionUpdateOne) SetCommission(p *PromotionCommission) *PromotionMemberCommissionUpdateOne {
	return pmcuo.SetCommissionID(p.ID)
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pmcuo *PromotionMemberCommissionUpdateOne) SetMember(p *PromotionMember) *PromotionMemberCommissionUpdateOne {
	return pmcuo.SetMemberID(p.ID)
}

// Mutation returns the PromotionMemberCommissionMutation object of the builder.
func (pmcuo *PromotionMemberCommissionUpdateOne) Mutation() *PromotionMemberCommissionMutation {
	return pmcuo.mutation
}

// ClearCommission clears the "commission" edge to the PromotionCommission entity.
func (pmcuo *PromotionMemberCommissionUpdateOne) ClearCommission() *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.ClearCommission()
	return pmcuo
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pmcuo *PromotionMemberCommissionUpdateOne) ClearMember() *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.ClearMember()
	return pmcuo
}

// Where appends a list predicates to the PromotionMemberCommissionUpdate builder.
func (pmcuo *PromotionMemberCommissionUpdateOne) Where(ps ...predicate.PromotionMemberCommission) *PromotionMemberCommissionUpdateOne {
	pmcuo.mutation.Where(ps...)
	return pmcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmcuo *PromotionMemberCommissionUpdateOne) Select(field string, fields ...string) *PromotionMemberCommissionUpdateOne {
	pmcuo.fields = append([]string{field}, fields...)
	return pmcuo
}

// Save executes the query and returns the updated PromotionMemberCommission entity.
func (pmcuo *PromotionMemberCommissionUpdateOne) Save(ctx context.Context) (*PromotionMemberCommission, error) {
	pmcuo.defaults()
	return withHooks(ctx, pmcuo.sqlSave, pmcuo.mutation, pmcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmcuo *PromotionMemberCommissionUpdateOne) SaveX(ctx context.Context) *PromotionMemberCommission {
	node, err := pmcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmcuo *PromotionMemberCommissionUpdateOne) Exec(ctx context.Context) error {
	_, err := pmcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcuo *PromotionMemberCommissionUpdateOne) ExecX(ctx context.Context) {
	if err := pmcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmcuo *PromotionMemberCommissionUpdateOne) defaults() {
	if _, ok := pmcuo.mutation.UpdatedAt(); !ok {
		v := promotionmembercommission.UpdateDefaultUpdatedAt()
		pmcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmcuo *PromotionMemberCommissionUpdateOne) check() error {
	if _, ok := pmcuo.mutation.CommissionID(); pmcuo.mutation.CommissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionMemberCommission.commission"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmcuo *PromotionMemberCommissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionMemberCommissionUpdateOne {
	pmcuo.modifiers = append(pmcuo.modifiers, modifiers...)
	return pmcuo
}

func (pmcuo *PromotionMemberCommissionUpdateOne) sqlSave(ctx context.Context) (_node *PromotionMemberCommission, err error) {
	if err := pmcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(promotionmembercommission.Table, promotionmembercommission.Columns, sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64))
	id, ok := pmcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionMemberCommission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionmembercommission.FieldID)
		for _, f := range fields {
			if !promotionmembercommission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionmembercommission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionmembercommission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pmcuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionmembercommission.FieldDeletedAt, field.TypeTime, value)
	}
	if pmcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionmembercommission.FieldDeletedAt, field.TypeTime)
	}
	if pmcuo.mutation.CommissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmembercommission.CommissionTable,
			Columns: []string{promotionmembercommission.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmcuo.mutation.CommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmembercommission.CommissionTable,
			Columns: []string{promotionmembercommission.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmcuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmembercommission.MemberTable,
			Columns: []string{promotionmembercommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmcuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmembercommission.MemberTable,
			Columns: []string{promotionmembercommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pmcuo.modifiers...)
	_node = &PromotionMemberCommission{config: pmcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionmembercommission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmcuo.mutation.done = true
	return _node, nil
}
