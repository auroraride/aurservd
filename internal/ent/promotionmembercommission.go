// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionmembercommission"
)

// PromotionMemberCommission is the model entity for the PromotionMemberCommission schema.
type PromotionMemberCommission struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// CommissionID holds the value of the "commission_id" field.
	CommissionID uint64 `json:"commission_id,omitempty"`
	// 会员ID
	MemberID uint64 `json:"member_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionMemberCommissionQuery when eager-loading is set.
	Edges        PromotionMemberCommissionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionMemberCommissionEdges holds the relations/edges for other nodes in the graph.
type PromotionMemberCommissionEdges struct {
	// Commission holds the value of the commission edge.
	Commission *PromotionCommission `json:"commission,omitempty"`
	// Member holds the value of the member edge.
	Member *PromotionMember `json:"member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CommissionOrErr returns the Commission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionMemberCommissionEdges) CommissionOrErr() (*PromotionCommission, error) {
	if e.Commission != nil {
		return e.Commission, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: promotioncommission.Label}
	}
	return nil, &NotLoadedError{edge: "commission"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionMemberCommissionEdges) MemberOrErr() (*PromotionMember, error) {
	if e.Member != nil {
		return e.Member, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: promotionmember.Label}
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionMemberCommission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionmembercommission.FieldID, promotionmembercommission.FieldCommissionID, promotionmembercommission.FieldMemberID:
			values[i] = new(sql.NullInt64)
		case promotionmembercommission.FieldCreatedAt, promotionmembercommission.FieldUpdatedAt, promotionmembercommission.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionMemberCommission fields.
func (pmc *PromotionMemberCommission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionmembercommission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pmc.ID = uint64(value.Int64)
		case promotionmembercommission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pmc.CreatedAt = value.Time
			}
		case promotionmembercommission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pmc.UpdatedAt = value.Time
			}
		case promotionmembercommission.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pmc.DeletedAt = new(time.Time)
				*pmc.DeletedAt = value.Time
			}
		case promotionmembercommission.FieldCommissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field commission_id", values[i])
			} else if value.Valid {
				pmc.CommissionID = uint64(value.Int64)
			}
		case promotionmembercommission.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				pmc.MemberID = uint64(value.Int64)
			}
		default:
			pmc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionMemberCommission.
// This includes values selected through modifiers, order, etc.
func (pmc *PromotionMemberCommission) Value(name string) (ent.Value, error) {
	return pmc.selectValues.Get(name)
}

// QueryCommission queries the "commission" edge of the PromotionMemberCommission entity.
func (pmc *PromotionMemberCommission) QueryCommission() *PromotionCommissionQuery {
	return NewPromotionMemberCommissionClient(pmc.config).QueryCommission(pmc)
}

// QueryMember queries the "member" edge of the PromotionMemberCommission entity.
func (pmc *PromotionMemberCommission) QueryMember() *PromotionMemberQuery {
	return NewPromotionMemberCommissionClient(pmc.config).QueryMember(pmc)
}

// Update returns a builder for updating this PromotionMemberCommission.
// Note that you need to call PromotionMemberCommission.Unwrap() before calling this method if this PromotionMemberCommission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pmc *PromotionMemberCommission) Update() *PromotionMemberCommissionUpdateOne {
	return NewPromotionMemberCommissionClient(pmc.config).UpdateOne(pmc)
}

// Unwrap unwraps the PromotionMemberCommission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pmc *PromotionMemberCommission) Unwrap() *PromotionMemberCommission {
	_tx, ok := pmc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionMemberCommission is not a transactional entity")
	}
	pmc.config.driver = _tx.drv
	return pmc
}

// String implements the fmt.Stringer.
func (pmc *PromotionMemberCommission) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionMemberCommission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pmc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pmc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pmc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pmc.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("commission_id=")
	builder.WriteString(fmt.Sprintf("%v", pmc.CommissionID))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", pmc.MemberID))
	builder.WriteByte(')')
	return builder.String()
}

// PromotionMemberCommissions is a parsable slice of PromotionMemberCommission.
type PromotionMemberCommissions []*PromotionMemberCommission
