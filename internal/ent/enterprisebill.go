// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EnterpriseBill is the model entity for the EnterpriseBill schema.
type EnterpriseBill struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// 站点ID
	StationID *uint64 `json:"station_id,omitempty"`
	// 订阅ID
	SubscribeID uint64 `json:"subscribe_id,omitempty"`
	// 企业ID
	EnterpriseID uint64 `json:"enterprise_id,omitempty"`
	// 账单ID
	StatementID uint64 `json:"statement_id,omitempty"`
	// 结算开始日期(包含)
	Start time.Time `json:"start,omitempty"`
	// 结算结束日期(包含)
	End time.Time `json:"end,omitempty"`
	// 账单天数
	Days int `json:"days,omitempty"`
	// 账单单价
	Price float64 `json:"price,omitempty"`
	// 账单金额
	Cost float64 `json:"cost,omitempty"`
	// 电池型号
	Model string `json:"model,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterpriseBillQuery when eager-loading is set.
	Edges        EnterpriseBillEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EnterpriseBillEdges holds the relations/edges for other nodes in the graph.
type EnterpriseBillEdges struct {
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Station holds the value of the station edge.
	Station *EnterpriseStation `json:"station,omitempty"`
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Statement holds the value of the statement edge.
	Statement *EnterpriseStatement `json:"statement,omitempty"`
	// Subscribe holds the value of the subscribe edge.
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBillEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[0] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBillEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[1] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBillEdges) StationOrErr() (*EnterpriseStation, error) {
	if e.loadedTypes[2] {
		if e.Station == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprisestation.Label}
		}
		return e.Station, nil
	}
	return nil, &NotLoadedError{edge: "station"}
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBillEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[3] {
		if e.Enterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// StatementOrErr returns the Statement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBillEdges) StatementOrErr() (*EnterpriseStatement, error) {
	if e.loadedTypes[4] {
		if e.Statement == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprisestatement.Label}
		}
		return e.Statement, nil
	}
	return nil, &NotLoadedError{edge: "statement"}
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBillEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.loadedTypes[5] {
		if e.Subscribe == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subscribe.Label}
		}
		return e.Subscribe, nil
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnterpriseBill) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterprisebill.FieldCreator, enterprisebill.FieldLastModifier:
			values[i] = new([]byte)
		case enterprisebill.FieldPrice, enterprisebill.FieldCost:
			values[i] = new(sql.NullFloat64)
		case enterprisebill.FieldID, enterprisebill.FieldRiderID, enterprisebill.FieldCityID, enterprisebill.FieldStationID, enterprisebill.FieldSubscribeID, enterprisebill.FieldEnterpriseID, enterprisebill.FieldStatementID, enterprisebill.FieldDays:
			values[i] = new(sql.NullInt64)
		case enterprisebill.FieldRemark, enterprisebill.FieldModel:
			values[i] = new(sql.NullString)
		case enterprisebill.FieldCreatedAt, enterprisebill.FieldUpdatedAt, enterprisebill.FieldDeletedAt, enterprisebill.FieldStart, enterprisebill.FieldEnd:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnterpriseBill fields.
func (eb *EnterpriseBill) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterprisebill.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eb.ID = uint64(value.Int64)
		case enterprisebill.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eb.CreatedAt = value.Time
			}
		case enterprisebill.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				eb.UpdatedAt = value.Time
			}
		case enterprisebill.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				eb.DeletedAt = new(time.Time)
				*eb.DeletedAt = value.Time
			}
		case enterprisebill.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eb.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterprisebill.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eb.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterprisebill.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				eb.Remark = value.String
			}
		case enterprisebill.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				eb.RiderID = uint64(value.Int64)
			}
		case enterprisebill.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				eb.CityID = uint64(value.Int64)
			}
		case enterprisebill.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				eb.StationID = new(uint64)
				*eb.StationID = uint64(value.Int64)
			}
		case enterprisebill.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				eb.SubscribeID = uint64(value.Int64)
			}
		case enterprisebill.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				eb.EnterpriseID = uint64(value.Int64)
			}
		case enterprisebill.FieldStatementID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field statement_id", values[i])
			} else if value.Valid {
				eb.StatementID = uint64(value.Int64)
			}
		case enterprisebill.FieldStart:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start", values[i])
			} else if value.Valid {
				eb.Start = value.Time
			}
		case enterprisebill.FieldEnd:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				eb.End = value.Time
			}
		case enterprisebill.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				eb.Days = int(value.Int64)
			}
		case enterprisebill.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				eb.Price = value.Float64
			}
		case enterprisebill.FieldCost:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field cost", values[i])
			} else if value.Valid {
				eb.Cost = value.Float64
			}
		case enterprisebill.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				eb.Model = value.String
			}
		default:
			eb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EnterpriseBill.
// This includes values selected through modifiers, order, etc.
func (eb *EnterpriseBill) Value(name string) (ent.Value, error) {
	return eb.selectValues.Get(name)
}

// QueryRider queries the "rider" edge of the EnterpriseBill entity.
func (eb *EnterpriseBill) QueryRider() *RiderQuery {
	return NewEnterpriseBillClient(eb.config).QueryRider(eb)
}

// QueryCity queries the "city" edge of the EnterpriseBill entity.
func (eb *EnterpriseBill) QueryCity() *CityQuery {
	return NewEnterpriseBillClient(eb.config).QueryCity(eb)
}

// QueryStation queries the "station" edge of the EnterpriseBill entity.
func (eb *EnterpriseBill) QueryStation() *EnterpriseStationQuery {
	return NewEnterpriseBillClient(eb.config).QueryStation(eb)
}

// QueryEnterprise queries the "enterprise" edge of the EnterpriseBill entity.
func (eb *EnterpriseBill) QueryEnterprise() *EnterpriseQuery {
	return NewEnterpriseBillClient(eb.config).QueryEnterprise(eb)
}

// QueryStatement queries the "statement" edge of the EnterpriseBill entity.
func (eb *EnterpriseBill) QueryStatement() *EnterpriseStatementQuery {
	return NewEnterpriseBillClient(eb.config).QueryStatement(eb)
}

// QuerySubscribe queries the "subscribe" edge of the EnterpriseBill entity.
func (eb *EnterpriseBill) QuerySubscribe() *SubscribeQuery {
	return NewEnterpriseBillClient(eb.config).QuerySubscribe(eb)
}

// Update returns a builder for updating this EnterpriseBill.
// Note that you need to call EnterpriseBill.Unwrap() before calling this method if this EnterpriseBill
// was returned from a transaction, and the transaction was committed or rolled back.
func (eb *EnterpriseBill) Update() *EnterpriseBillUpdateOne {
	return NewEnterpriseBillClient(eb.config).UpdateOne(eb)
}

// Unwrap unwraps the EnterpriseBill entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eb *EnterpriseBill) Unwrap() *EnterpriseBill {
	_tx, ok := eb.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnterpriseBill is not a transactional entity")
	}
	eb.config.driver = _tx.drv
	return eb
}

// String implements the fmt.Stringer.
func (eb *EnterpriseBill) String() string {
	var builder strings.Builder
	builder.WriteString("EnterpriseBill(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eb.ID))
	builder.WriteString("created_at=")
	builder.WriteString(eb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(eb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := eb.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", eb.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", eb.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(eb.Remark)
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.RiderID))
	builder.WriteString(", ")
	builder.WriteString("city_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.CityID))
	builder.WriteString(", ")
	if v := eb.StationID; v != nil {
		builder.WriteString("station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("subscribe_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.SubscribeID))
	builder.WriteString(", ")
	builder.WriteString("enterprise_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.EnterpriseID))
	builder.WriteString(", ")
	builder.WriteString("statement_id=")
	builder.WriteString(fmt.Sprintf("%v", eb.StatementID))
	builder.WriteString(", ")
	builder.WriteString("start=")
	builder.WriteString(eb.Start.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(eb.End.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("days=")
	builder.WriteString(fmt.Sprintf("%v", eb.Days))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", eb.Price))
	builder.WriteString(", ")
	builder.WriteString("cost=")
	builder.WriteString(fmt.Sprintf("%v", eb.Cost))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(eb.Model)
	builder.WriteByte(')')
	return builder.String()
}

// EnterpriseBills is a parsable slice of EnterpriseBill.
type EnterpriseBills []*EnterpriseBill
