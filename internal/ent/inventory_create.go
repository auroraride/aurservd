// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/inventory"
)

// InventoryCreate is the builder for creating a Inventory entity.
type InventoryCreate struct {
	config
	mutation *InventoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ic *InventoryCreate) SetCreatedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableCreatedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InventoryCreate) SetUpdatedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableUpdatedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *InventoryCreate) SetDeletedAt(t time.Time) *InventoryCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableDeletedAt(t *time.Time) *InventoryCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// SetCreator sets the "creator" field.
func (ic *InventoryCreate) SetCreator(m *model.Modifier) *InventoryCreate {
	ic.mutation.SetCreator(m)
	return ic
}

// SetLastModifier sets the "last_modifier" field.
func (ic *InventoryCreate) SetLastModifier(m *model.Modifier) *InventoryCreate {
	ic.mutation.SetLastModifier(m)
	return ic
}

// SetRemark sets the "remark" field.
func (ic *InventoryCreate) SetRemark(s string) *InventoryCreate {
	ic.mutation.SetRemark(s)
	return ic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ic *InventoryCreate) SetNillableRemark(s *string) *InventoryCreate {
	if s != nil {
		ic.SetRemark(*s)
	}
	return ic
}

// SetName sets the "name" field.
func (ic *InventoryCreate) SetName(s string) *InventoryCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetCount sets the "count" field.
func (ic *InventoryCreate) SetCount(b bool) *InventoryCreate {
	ic.mutation.SetCount(b)
	return ic
}

// SetTransfer sets the "transfer" field.
func (ic *InventoryCreate) SetTransfer(b bool) *InventoryCreate {
	ic.mutation.SetTransfer(b)
	return ic
}

// SetPurchase sets the "purchase" field.
func (ic *InventoryCreate) SetPurchase(b bool) *InventoryCreate {
	ic.mutation.SetPurchase(b)
	return ic
}

// Mutation returns the InventoryMutation object of the builder.
func (ic *InventoryCreate) Mutation() *InventoryMutation {
	return ic.mutation
}

// Save creates the Inventory in the database.
func (ic *InventoryCreate) Save(ctx context.Context) (*Inventory, error) {
	if err := ic.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Inventory, InventoryMutation](ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InventoryCreate) SaveX(ctx context.Context) *Inventory {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InventoryCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InventoryCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InventoryCreate) defaults() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		if inventory.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized inventory.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := inventory.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		if inventory.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized inventory.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := inventory.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ic *InventoryCreate) check() error {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Inventory.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Inventory.updated_at"`)}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Inventory.name"`)}
	}
	if _, ok := ic.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "Inventory.count"`)}
	}
	if _, ok := ic.mutation.Transfer(); !ok {
		return &ValidationError{Name: "transfer", err: errors.New(`ent: missing required field "Inventory.transfer"`)}
	}
	if _, ok := ic.mutation.Purchase(); !ok {
		return &ValidationError{Name: "purchase", err: errors.New(`ent: missing required field "Inventory.purchase"`)}
	}
	return nil
}

func (ic *InventoryCreate) sqlSave(ctx context.Context) (*Inventory, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *InventoryCreate) createSpec() (*Inventory, *sqlgraph.CreateSpec) {
	var (
		_node = &Inventory{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inventory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: inventory.FieldID,
			},
		}
	)
	_spec.OnConflict = ic.conflict
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(inventory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ic.mutation.Creator(); ok {
		_spec.SetField(inventory.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ic.mutation.LastModifier(); ok {
		_spec.SetField(inventory.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ic.mutation.Remark(); ok {
		_spec.SetField(inventory.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(inventory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Count(); ok {
		_spec.SetField(inventory.FieldCount, field.TypeBool, value)
		_node.Count = value
	}
	if value, ok := ic.mutation.Transfer(); ok {
		_spec.SetField(inventory.FieldTransfer, field.TypeBool, value)
		_node.Transfer = value
	}
	if value, ok := ic.mutation.Purchase(); ok {
		_spec.SetField(inventory.FieldPurchase, field.TypeBool, value)
		_node.Purchase = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inventory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InventoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ic *InventoryCreate) OnConflict(opts ...sql.ConflictOption) *InventoryUpsertOne {
	ic.conflict = opts
	return &InventoryUpsertOne{
		create: ic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ic *InventoryCreate) OnConflictColumns(columns ...string) *InventoryUpsertOne {
	ic.conflict = append(ic.conflict, sql.ConflictColumns(columns...))
	return &InventoryUpsertOne{
		create: ic,
	}
}

type (
	// InventoryUpsertOne is the builder for "upsert"-ing
	//  one Inventory node.
	InventoryUpsertOne struct {
		create *InventoryCreate
	}

	// InventoryUpsert is the "OnConflict" setter.
	InventoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsert) SetUpdatedAt(v time.Time) *InventoryUpsert {
	u.Set(inventory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateUpdatedAt() *InventoryUpsert {
	u.SetExcluded(inventory.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsert) SetDeletedAt(v time.Time) *InventoryUpsert {
	u.Set(inventory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateDeletedAt() *InventoryUpsert {
	u.SetExcluded(inventory.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsert) ClearDeletedAt() *InventoryUpsert {
	u.SetNull(inventory.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *InventoryUpsert) SetLastModifier(v *model.Modifier) *InventoryUpsert {
	u.Set(inventory.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateLastModifier() *InventoryUpsert {
	u.SetExcluded(inventory.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *InventoryUpsert) ClearLastModifier() *InventoryUpsert {
	u.SetNull(inventory.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *InventoryUpsert) SetRemark(v string) *InventoryUpsert {
	u.Set(inventory.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateRemark() *InventoryUpsert {
	u.SetExcluded(inventory.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *InventoryUpsert) ClearRemark() *InventoryUpsert {
	u.SetNull(inventory.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *InventoryUpsert) SetName(v string) *InventoryUpsert {
	u.Set(inventory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateName() *InventoryUpsert {
	u.SetExcluded(inventory.FieldName)
	return u
}

// SetCount sets the "count" field.
func (u *InventoryUpsert) SetCount(v bool) *InventoryUpsert {
	u.Set(inventory.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateCount() *InventoryUpsert {
	u.SetExcluded(inventory.FieldCount)
	return u
}

// SetTransfer sets the "transfer" field.
func (u *InventoryUpsert) SetTransfer(v bool) *InventoryUpsert {
	u.Set(inventory.FieldTransfer, v)
	return u
}

// UpdateTransfer sets the "transfer" field to the value that was provided on create.
func (u *InventoryUpsert) UpdateTransfer() *InventoryUpsert {
	u.SetExcluded(inventory.FieldTransfer)
	return u
}

// SetPurchase sets the "purchase" field.
func (u *InventoryUpsert) SetPurchase(v bool) *InventoryUpsert {
	u.Set(inventory.FieldPurchase, v)
	return u
}

// UpdatePurchase sets the "purchase" field to the value that was provided on create.
func (u *InventoryUpsert) UpdatePurchase() *InventoryUpsert {
	u.SetExcluded(inventory.FieldPurchase)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InventoryUpsertOne) UpdateNewValues() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(inventory.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(inventory.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *InventoryUpsertOne) Ignore() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InventoryUpsertOne) DoNothing() *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InventoryCreate.OnConflict
// documentation for more info.
func (u *InventoryUpsertOne) Update(set func(*InventoryUpsert)) *InventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InventoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsertOne) SetUpdatedAt(v time.Time) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateUpdatedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsertOne) SetDeletedAt(v time.Time) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateDeletedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsertOne) ClearDeletedAt() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *InventoryUpsertOne) SetLastModifier(v *model.Modifier) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateLastModifier() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *InventoryUpsertOne) ClearLastModifier() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *InventoryUpsertOne) SetRemark(v string) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateRemark() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *InventoryUpsertOne) ClearRemark() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *InventoryUpsertOne) SetName(v string) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateName() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateName()
	})
}

// SetCount sets the "count" field.
func (u *InventoryUpsertOne) SetCount(v bool) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateCount() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateCount()
	})
}

// SetTransfer sets the "transfer" field.
func (u *InventoryUpsertOne) SetTransfer(v bool) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetTransfer(v)
	})
}

// UpdateTransfer sets the "transfer" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdateTransfer() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateTransfer()
	})
}

// SetPurchase sets the "purchase" field.
func (u *InventoryUpsertOne) SetPurchase(v bool) *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.SetPurchase(v)
	})
}

// UpdatePurchase sets the "purchase" field to the value that was provided on create.
func (u *InventoryUpsertOne) UpdatePurchase() *InventoryUpsertOne {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdatePurchase()
	})
}

// Exec executes the query.
func (u *InventoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InventoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InventoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *InventoryUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *InventoryUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// InventoryCreateBulk is the builder for creating many Inventory entities in bulk.
type InventoryCreateBulk struct {
	config
	builders []*InventoryCreate
	conflict []sql.ConflictOption
}

// Save creates the Inventory entities in the database.
func (icb *InventoryCreateBulk) Save(ctx context.Context) ([]*Inventory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Inventory, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InventoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = icb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InventoryCreateBulk) SaveX(ctx context.Context) []*Inventory {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InventoryCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InventoryCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Inventory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.InventoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (icb *InventoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *InventoryUpsertBulk {
	icb.conflict = opts
	return &InventoryUpsertBulk{
		create: icb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (icb *InventoryCreateBulk) OnConflictColumns(columns ...string) *InventoryUpsertBulk {
	icb.conflict = append(icb.conflict, sql.ConflictColumns(columns...))
	return &InventoryUpsertBulk{
		create: icb,
	}
}

// InventoryUpsertBulk is the builder for "upsert"-ing
// a bulk of Inventory nodes.
type InventoryUpsertBulk struct {
	create *InventoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *InventoryUpsertBulk) UpdateNewValues() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(inventory.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(inventory.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Inventory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *InventoryUpsertBulk) Ignore() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *InventoryUpsertBulk) DoNothing() *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the InventoryCreateBulk.OnConflict
// documentation for more info.
func (u *InventoryUpsertBulk) Update(set func(*InventoryUpsert)) *InventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&InventoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *InventoryUpsertBulk) SetUpdatedAt(v time.Time) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateUpdatedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *InventoryUpsertBulk) SetDeletedAt(v time.Time) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateDeletedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *InventoryUpsertBulk) ClearDeletedAt() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *InventoryUpsertBulk) SetLastModifier(v *model.Modifier) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateLastModifier() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *InventoryUpsertBulk) ClearLastModifier() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *InventoryUpsertBulk) SetRemark(v string) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateRemark() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *InventoryUpsertBulk) ClearRemark() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *InventoryUpsertBulk) SetName(v string) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateName() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateName()
	})
}

// SetCount sets the "count" field.
func (u *InventoryUpsertBulk) SetCount(v bool) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateCount() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateCount()
	})
}

// SetTransfer sets the "transfer" field.
func (u *InventoryUpsertBulk) SetTransfer(v bool) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetTransfer(v)
	})
}

// UpdateTransfer sets the "transfer" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdateTransfer() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdateTransfer()
	})
}

// SetPurchase sets the "purchase" field.
func (u *InventoryUpsertBulk) SetPurchase(v bool) *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.SetPurchase(v)
	})
}

// UpdatePurchase sets the "purchase" field to the value that was provided on create.
func (u *InventoryUpsertBulk) UpdatePurchase() *InventoryUpsertBulk {
	return u.Update(func(s *InventoryUpsert) {
		s.UpdatePurchase()
	})
}

// Exec executes the query.
func (u *InventoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the InventoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for InventoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *InventoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
