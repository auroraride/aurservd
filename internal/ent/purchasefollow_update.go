// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/purchasefollow"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
)

// PurchaseFollowUpdate is the builder for updating PurchaseFollow entities.
type PurchaseFollowUpdate struct {
	config
	hooks     []Hook
	mutation  *PurchaseFollowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PurchaseFollowUpdate builder.
func (pfu *PurchaseFollowUpdate) Where(ps ...predicate.PurchaseFollow) *PurchaseFollowUpdate {
	pfu.mutation.Where(ps...)
	return pfu
}

// SetUpdatedAt sets the "updated_at" field.
func (pfu *PurchaseFollowUpdate) SetUpdatedAt(t time.Time) *PurchaseFollowUpdate {
	pfu.mutation.SetUpdatedAt(t)
	return pfu
}

// SetDeletedAt sets the "deleted_at" field.
func (pfu *PurchaseFollowUpdate) SetDeletedAt(t time.Time) *PurchaseFollowUpdate {
	pfu.mutation.SetDeletedAt(t)
	return pfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pfu *PurchaseFollowUpdate) SetNillableDeletedAt(t *time.Time) *PurchaseFollowUpdate {
	if t != nil {
		pfu.SetDeletedAt(*t)
	}
	return pfu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pfu *PurchaseFollowUpdate) ClearDeletedAt() *PurchaseFollowUpdate {
	pfu.mutation.ClearDeletedAt()
	return pfu
}

// SetLastModifier sets the "last_modifier" field.
func (pfu *PurchaseFollowUpdate) SetLastModifier(m *model.Modifier) *PurchaseFollowUpdate {
	pfu.mutation.SetLastModifier(m)
	return pfu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pfu *PurchaseFollowUpdate) ClearLastModifier() *PurchaseFollowUpdate {
	pfu.mutation.ClearLastModifier()
	return pfu
}

// SetRemark sets the "remark" field.
func (pfu *PurchaseFollowUpdate) SetRemark(s string) *PurchaseFollowUpdate {
	pfu.mutation.SetRemark(s)
	return pfu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pfu *PurchaseFollowUpdate) SetNillableRemark(s *string) *PurchaseFollowUpdate {
	if s != nil {
		pfu.SetRemark(*s)
	}
	return pfu
}

// ClearRemark clears the value of the "remark" field.
func (pfu *PurchaseFollowUpdate) ClearRemark() *PurchaseFollowUpdate {
	pfu.mutation.ClearRemark()
	return pfu
}

// SetContent sets the "content" field.
func (pfu *PurchaseFollowUpdate) SetContent(s string) *PurchaseFollowUpdate {
	pfu.mutation.SetContent(s)
	return pfu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pfu *PurchaseFollowUpdate) SetNillableContent(s *string) *PurchaseFollowUpdate {
	if s != nil {
		pfu.SetContent(*s)
	}
	return pfu
}

// SetPics sets the "pics" field.
func (pfu *PurchaseFollowUpdate) SetPics(s []string) *PurchaseFollowUpdate {
	pfu.mutation.SetPics(s)
	return pfu
}

// AppendPics appends s to the "pics" field.
func (pfu *PurchaseFollowUpdate) AppendPics(s []string) *PurchaseFollowUpdate {
	pfu.mutation.AppendPics(s)
	return pfu
}

// SetOrderID sets the "order_id" field.
func (pfu *PurchaseFollowUpdate) SetOrderID(u uint64) *PurchaseFollowUpdate {
	pfu.mutation.SetOrderID(u)
	return pfu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pfu *PurchaseFollowUpdate) SetNillableOrderID(u *uint64) *PurchaseFollowUpdate {
	if u != nil {
		pfu.SetOrderID(*u)
	}
	return pfu
}

// ClearOrderID clears the value of the "order_id" field.
func (pfu *PurchaseFollowUpdate) ClearOrderID() *PurchaseFollowUpdate {
	pfu.mutation.ClearOrderID()
	return pfu
}

// SetOrder sets the "order" edge to the PurchaseOrder entity.
func (pfu *PurchaseFollowUpdate) SetOrder(p *PurchaseOrder) *PurchaseFollowUpdate {
	return pfu.SetOrderID(p.ID)
}

// Mutation returns the PurchaseFollowMutation object of the builder.
func (pfu *PurchaseFollowUpdate) Mutation() *PurchaseFollowMutation {
	return pfu.mutation
}

// ClearOrder clears the "order" edge to the PurchaseOrder entity.
func (pfu *PurchaseFollowUpdate) ClearOrder() *PurchaseFollowUpdate {
	pfu.mutation.ClearOrder()
	return pfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pfu *PurchaseFollowUpdate) Save(ctx context.Context) (int, error) {
	if err := pfu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pfu.sqlSave, pfu.mutation, pfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfu *PurchaseFollowUpdate) SaveX(ctx context.Context) int {
	affected, err := pfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pfu *PurchaseFollowUpdate) Exec(ctx context.Context) error {
	_, err := pfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfu *PurchaseFollowUpdate) ExecX(ctx context.Context) {
	if err := pfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfu *PurchaseFollowUpdate) defaults() error {
	if _, ok := pfu.mutation.UpdatedAt(); !ok {
		if purchasefollow.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasefollow.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasefollow.UpdateDefaultUpdatedAt()
		pfu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pfu *PurchaseFollowUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PurchaseFollowUpdate {
	pfu.modifiers = append(pfu.modifiers, modifiers...)
	return pfu
}

func (pfu *PurchaseFollowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(purchasefollow.Table, purchasefollow.Columns, sqlgraph.NewFieldSpec(purchasefollow.FieldID, field.TypeUint64))
	if ps := pfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfu.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasefollow.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pfu.mutation.DeletedAt(); ok {
		_spec.SetField(purchasefollow.FieldDeletedAt, field.TypeTime, value)
	}
	if pfu.mutation.DeletedAtCleared() {
		_spec.ClearField(purchasefollow.FieldDeletedAt, field.TypeTime)
	}
	if pfu.mutation.CreatorCleared() {
		_spec.ClearField(purchasefollow.FieldCreator, field.TypeJSON)
	}
	if value, ok := pfu.mutation.LastModifier(); ok {
		_spec.SetField(purchasefollow.FieldLastModifier, field.TypeJSON, value)
	}
	if pfu.mutation.LastModifierCleared() {
		_spec.ClearField(purchasefollow.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pfu.mutation.Remark(); ok {
		_spec.SetField(purchasefollow.FieldRemark, field.TypeString, value)
	}
	if pfu.mutation.RemarkCleared() {
		_spec.ClearField(purchasefollow.FieldRemark, field.TypeString)
	}
	if value, ok := pfu.mutation.Content(); ok {
		_spec.SetField(purchasefollow.FieldContent, field.TypeString, value)
	}
	if value, ok := pfu.mutation.Pics(); ok {
		_spec.SetField(purchasefollow.FieldPics, field.TypeJSON, value)
	}
	if value, ok := pfu.mutation.AppendedPics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, purchasefollow.FieldPics, value)
		})
	}
	if pfu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchasefollow.OrderTable,
			Columns: []string{purchasefollow.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchasefollow.OrderTable,
			Columns: []string{purchasefollow.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchasefollow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pfu.mutation.done = true
	return n, nil
}

// PurchaseFollowUpdateOne is the builder for updating a single PurchaseFollow entity.
type PurchaseFollowUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PurchaseFollowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pfuo *PurchaseFollowUpdateOne) SetUpdatedAt(t time.Time) *PurchaseFollowUpdateOne {
	pfuo.mutation.SetUpdatedAt(t)
	return pfuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pfuo *PurchaseFollowUpdateOne) SetDeletedAt(t time.Time) *PurchaseFollowUpdateOne {
	pfuo.mutation.SetDeletedAt(t)
	return pfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pfuo *PurchaseFollowUpdateOne) SetNillableDeletedAt(t *time.Time) *PurchaseFollowUpdateOne {
	if t != nil {
		pfuo.SetDeletedAt(*t)
	}
	return pfuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pfuo *PurchaseFollowUpdateOne) ClearDeletedAt() *PurchaseFollowUpdateOne {
	pfuo.mutation.ClearDeletedAt()
	return pfuo
}

// SetLastModifier sets the "last_modifier" field.
func (pfuo *PurchaseFollowUpdateOne) SetLastModifier(m *model.Modifier) *PurchaseFollowUpdateOne {
	pfuo.mutation.SetLastModifier(m)
	return pfuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pfuo *PurchaseFollowUpdateOne) ClearLastModifier() *PurchaseFollowUpdateOne {
	pfuo.mutation.ClearLastModifier()
	return pfuo
}

// SetRemark sets the "remark" field.
func (pfuo *PurchaseFollowUpdateOne) SetRemark(s string) *PurchaseFollowUpdateOne {
	pfuo.mutation.SetRemark(s)
	return pfuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pfuo *PurchaseFollowUpdateOne) SetNillableRemark(s *string) *PurchaseFollowUpdateOne {
	if s != nil {
		pfuo.SetRemark(*s)
	}
	return pfuo
}

// ClearRemark clears the value of the "remark" field.
func (pfuo *PurchaseFollowUpdateOne) ClearRemark() *PurchaseFollowUpdateOne {
	pfuo.mutation.ClearRemark()
	return pfuo
}

// SetContent sets the "content" field.
func (pfuo *PurchaseFollowUpdateOne) SetContent(s string) *PurchaseFollowUpdateOne {
	pfuo.mutation.SetContent(s)
	return pfuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pfuo *PurchaseFollowUpdateOne) SetNillableContent(s *string) *PurchaseFollowUpdateOne {
	if s != nil {
		pfuo.SetContent(*s)
	}
	return pfuo
}

// SetPics sets the "pics" field.
func (pfuo *PurchaseFollowUpdateOne) SetPics(s []string) *PurchaseFollowUpdateOne {
	pfuo.mutation.SetPics(s)
	return pfuo
}

// AppendPics appends s to the "pics" field.
func (pfuo *PurchaseFollowUpdateOne) AppendPics(s []string) *PurchaseFollowUpdateOne {
	pfuo.mutation.AppendPics(s)
	return pfuo
}

// SetOrderID sets the "order_id" field.
func (pfuo *PurchaseFollowUpdateOne) SetOrderID(u uint64) *PurchaseFollowUpdateOne {
	pfuo.mutation.SetOrderID(u)
	return pfuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pfuo *PurchaseFollowUpdateOne) SetNillableOrderID(u *uint64) *PurchaseFollowUpdateOne {
	if u != nil {
		pfuo.SetOrderID(*u)
	}
	return pfuo
}

// ClearOrderID clears the value of the "order_id" field.
func (pfuo *PurchaseFollowUpdateOne) ClearOrderID() *PurchaseFollowUpdateOne {
	pfuo.mutation.ClearOrderID()
	return pfuo
}

// SetOrder sets the "order" edge to the PurchaseOrder entity.
func (pfuo *PurchaseFollowUpdateOne) SetOrder(p *PurchaseOrder) *PurchaseFollowUpdateOne {
	return pfuo.SetOrderID(p.ID)
}

// Mutation returns the PurchaseFollowMutation object of the builder.
func (pfuo *PurchaseFollowUpdateOne) Mutation() *PurchaseFollowMutation {
	return pfuo.mutation
}

// ClearOrder clears the "order" edge to the PurchaseOrder entity.
func (pfuo *PurchaseFollowUpdateOne) ClearOrder() *PurchaseFollowUpdateOne {
	pfuo.mutation.ClearOrder()
	return pfuo
}

// Where appends a list predicates to the PurchaseFollowUpdate builder.
func (pfuo *PurchaseFollowUpdateOne) Where(ps ...predicate.PurchaseFollow) *PurchaseFollowUpdateOne {
	pfuo.mutation.Where(ps...)
	return pfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pfuo *PurchaseFollowUpdateOne) Select(field string, fields ...string) *PurchaseFollowUpdateOne {
	pfuo.fields = append([]string{field}, fields...)
	return pfuo
}

// Save executes the query and returns the updated PurchaseFollow entity.
func (pfuo *PurchaseFollowUpdateOne) Save(ctx context.Context) (*PurchaseFollow, error) {
	if err := pfuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pfuo.sqlSave, pfuo.mutation, pfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pfuo *PurchaseFollowUpdateOne) SaveX(ctx context.Context) *PurchaseFollow {
	node, err := pfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pfuo *PurchaseFollowUpdateOne) Exec(ctx context.Context) error {
	_, err := pfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfuo *PurchaseFollowUpdateOne) ExecX(ctx context.Context) {
	if err := pfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfuo *PurchaseFollowUpdateOne) defaults() error {
	if _, ok := pfuo.mutation.UpdatedAt(); !ok {
		if purchasefollow.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasefollow.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasefollow.UpdateDefaultUpdatedAt()
		pfuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pfuo *PurchaseFollowUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PurchaseFollowUpdateOne {
	pfuo.modifiers = append(pfuo.modifiers, modifiers...)
	return pfuo
}

func (pfuo *PurchaseFollowUpdateOne) sqlSave(ctx context.Context) (_node *PurchaseFollow, err error) {
	_spec := sqlgraph.NewUpdateSpec(purchasefollow.Table, purchasefollow.Columns, sqlgraph.NewFieldSpec(purchasefollow.FieldID, field.TypeUint64))
	id, ok := pfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PurchaseFollow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purchasefollow.FieldID)
		for _, f := range fields {
			if !purchasefollow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != purchasefollow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasefollow.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pfuo.mutation.DeletedAt(); ok {
		_spec.SetField(purchasefollow.FieldDeletedAt, field.TypeTime, value)
	}
	if pfuo.mutation.DeletedAtCleared() {
		_spec.ClearField(purchasefollow.FieldDeletedAt, field.TypeTime)
	}
	if pfuo.mutation.CreatorCleared() {
		_spec.ClearField(purchasefollow.FieldCreator, field.TypeJSON)
	}
	if value, ok := pfuo.mutation.LastModifier(); ok {
		_spec.SetField(purchasefollow.FieldLastModifier, field.TypeJSON, value)
	}
	if pfuo.mutation.LastModifierCleared() {
		_spec.ClearField(purchasefollow.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pfuo.mutation.Remark(); ok {
		_spec.SetField(purchasefollow.FieldRemark, field.TypeString, value)
	}
	if pfuo.mutation.RemarkCleared() {
		_spec.ClearField(purchasefollow.FieldRemark, field.TypeString)
	}
	if value, ok := pfuo.mutation.Content(); ok {
		_spec.SetField(purchasefollow.FieldContent, field.TypeString, value)
	}
	if value, ok := pfuo.mutation.Pics(); ok {
		_spec.SetField(purchasefollow.FieldPics, field.TypeJSON, value)
	}
	if value, ok := pfuo.mutation.AppendedPics(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, purchasefollow.FieldPics, value)
		})
	}
	if pfuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchasefollow.OrderTable,
			Columns: []string{purchasefollow.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pfuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchasefollow.OrderTable,
			Columns: []string{purchasefollow.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pfuo.modifiers...)
	_node = &PurchaseFollow{config: pfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchasefollow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pfuo.mutation.done = true
	return _node, nil
}
