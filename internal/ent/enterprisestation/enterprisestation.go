// Code generated by ent, DO NOT EDIT.

package enterprisestation

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the enterprisestation type in the database.
	Label = "enterprise_station"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// EdgeAgents holds the string denoting the agents edge name in mutations.
	EdgeAgents = "agents"
	// EdgeSwapPutinBatteries holds the string denoting the swap_putin_batteries edge name in mutations.
	EdgeSwapPutinBatteries = "swap_putin_batteries"
	// EdgeSwapPutoutBatteries holds the string denoting the swap_putout_batteries edge name in mutations.
	EdgeSwapPutoutBatteries = "swap_putout_batteries"
	// EdgeCabinets holds the string denoting the cabinets edge name in mutations.
	EdgeCabinets = "cabinets"
	// EdgeBatteries holds the string denoting the batteries edge name in mutations.
	EdgeBatteries = "batteries"
	// EdgeAsset holds the string denoting the asset edge name in mutations.
	EdgeAsset = "asset"
	// EdgeStocks holds the string denoting the stocks edge name in mutations.
	EdgeStocks = "stocks"
	// Table holds the table name of the enterprisestation in the database.
	Table = "enterprise_station"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "enterprise_station"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "enterprise_station"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
	// AgentsTable is the table that holds the agents relation/edge. The primary key declared below.
	AgentsTable = "agent_stations"
	// AgentsInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentsInverseTable = "agent"
	// SwapPutinBatteriesTable is the table that holds the swap_putin_batteries relation/edge.
	SwapPutinBatteriesTable = "enterprise_battery_swap"
	// SwapPutinBatteriesInverseTable is the table name for the EnterpriseBatterySwap entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisebatteryswap" package.
	SwapPutinBatteriesInverseTable = "enterprise_battery_swap"
	// SwapPutinBatteriesColumn is the table column denoting the swap_putin_batteries relation/edge.
	SwapPutinBatteriesColumn = "putin_station_id"
	// SwapPutoutBatteriesTable is the table that holds the swap_putout_batteries relation/edge.
	SwapPutoutBatteriesTable = "enterprise_battery_swap"
	// SwapPutoutBatteriesInverseTable is the table name for the EnterpriseBatterySwap entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisebatteryswap" package.
	SwapPutoutBatteriesInverseTable = "enterprise_battery_swap"
	// SwapPutoutBatteriesColumn is the table column denoting the swap_putout_batteries relation/edge.
	SwapPutoutBatteriesColumn = "putout_station_id"
	// CabinetsTable is the table that holds the cabinets relation/edge.
	CabinetsTable = "cabinet"
	// CabinetsInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetsInverseTable = "cabinet"
	// CabinetsColumn is the table column denoting the cabinets relation/edge.
	CabinetsColumn = "station_id"
	// BatteriesTable is the table that holds the batteries relation/edge.
	BatteriesTable = "battery"
	// BatteriesInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteriesInverseTable = "battery"
	// BatteriesColumn is the table column denoting the batteries relation/edge.
	BatteriesColumn = "station_id"
	// AssetTable is the table that holds the asset relation/edge.
	AssetTable = "asset"
	// AssetInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetInverseTable = "asset"
	// AssetColumn is the table column denoting the asset relation/edge.
	AssetColumn = "locations_id"
	// StocksTable is the table that holds the stocks relation/edge.
	StocksTable = "stock"
	// StocksInverseTable is the table name for the Stock entity.
	// It exists in this package in order to avoid circular dependency with the "stock" package.
	StocksInverseTable = "stock"
	// StocksColumn is the table column denoting the stocks relation/edge.
	StocksColumn = "station_id"
)

// Columns holds all SQL columns for enterprisestation fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldEnterpriseID,
	FieldName,
}

var (
	// AgentsPrimaryKey and AgentsColumn2 are the table columns denoting the
	// primary key for the agents relation (M2M).
	AgentsPrimaryKey = []string{"agent_id", "enterprise_station_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the EnterpriseStation queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByEnterpriseID orders the results by the enterprise_id field.
func ByEnterpriseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterpriseID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnterpriseField orders the results by enterprise field.
func ByEnterpriseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnterpriseStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgentsCount orders the results by agents count.
func ByAgentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentsStep(), opts...)
	}
}

// ByAgents orders the results by agents terms.
func ByAgents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySwapPutinBatteriesCount orders the results by swap_putin_batteries count.
func BySwapPutinBatteriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSwapPutinBatteriesStep(), opts...)
	}
}

// BySwapPutinBatteries orders the results by swap_putin_batteries terms.
func BySwapPutinBatteries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSwapPutinBatteriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySwapPutoutBatteriesCount orders the results by swap_putout_batteries count.
func BySwapPutoutBatteriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSwapPutoutBatteriesStep(), opts...)
	}
}

// BySwapPutoutBatteries orders the results by swap_putout_batteries terms.
func BySwapPutoutBatteries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSwapPutoutBatteriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCabinetsCount orders the results by cabinets count.
func ByCabinetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCabinetsStep(), opts...)
	}
}

// ByCabinets orders the results by cabinets terms.
func ByCabinets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBatteriesCount orders the results by batteries count.
func ByBatteriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBatteriesStep(), opts...)
	}
}

// ByBatteries orders the results by batteries terms.
func ByBatteries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssetCount orders the results by asset count.
func ByAssetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssetStep(), opts...)
	}
}

// ByAsset orders the results by asset terms.
func ByAsset(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStocksCount orders the results by stocks count.
func ByStocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStocksStep(), opts...)
	}
}

// ByStocks orders the results by stocks terms.
func ByStocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newEnterpriseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnterpriseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
	)
}
func newAgentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AgentsTable, AgentsPrimaryKey...),
	)
}
func newSwapPutinBatteriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SwapPutinBatteriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SwapPutinBatteriesTable, SwapPutinBatteriesColumn),
	)
}
func newSwapPutoutBatteriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SwapPutoutBatteriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SwapPutoutBatteriesTable, SwapPutoutBatteriesColumn),
	)
}
func newCabinetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CabinetsTable, CabinetsColumn),
	)
}
func newBatteriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BatteriesTable, BatteriesColumn),
	)
}
func newAssetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssetTable, AssetColumn),
	)
}
func newStocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StocksTable, StocksColumn),
	)
}
