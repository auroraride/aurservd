// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetattributes"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
)

// AssetAttributeValues is the model entity for the AssetAttributeValues schema.
type AssetAttributeValues struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 属性ID
	AttributeID uint64 `json:"attribute_id,omitempty"`
	// 资产ID
	AssetID uint64 `json:"asset_id,omitempty"`
	// 属性值
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetAttributeValuesQuery when eager-loading is set.
	Edges        AssetAttributeValuesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetAttributeValuesEdges holds the relations/edges for other nodes in the graph.
type AssetAttributeValuesEdges struct {
	// Attribute holds the value of the attribute edge.
	Attribute *AssetAttributes `json:"attribute,omitempty"`
	// Asset holds the value of the asset edge.
	Asset *Asset `json:"asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttributeOrErr returns the Attribute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetAttributeValuesEdges) AttributeOrErr() (*AssetAttributes, error) {
	if e.Attribute != nil {
		return e.Attribute, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: assetattributes.Label}
	}
	return nil, &NotLoadedError{edge: "attribute"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetAttributeValuesEdges) AssetOrErr() (*Asset, error) {
	if e.Asset != nil {
		return e.Asset, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetAttributeValues) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetattributevalues.FieldID, assetattributevalues.FieldAttributeID, assetattributevalues.FieldAssetID:
			values[i] = new(sql.NullInt64)
		case assetattributevalues.FieldValue:
			values[i] = new(sql.NullString)
		case assetattributevalues.FieldCreatedAt, assetattributevalues.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetAttributeValues fields.
func (aav *AssetAttributeValues) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetattributevalues.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aav.ID = uint64(value.Int64)
		case assetattributevalues.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aav.CreatedAt = value.Time
			}
		case assetattributevalues.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aav.UpdatedAt = value.Time
			}
		case assetattributevalues.FieldAttributeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attribute_id", values[i])
			} else if value.Valid {
				aav.AttributeID = uint64(value.Int64)
			}
		case assetattributevalues.FieldAssetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_id", values[i])
			} else if value.Valid {
				aav.AssetID = uint64(value.Int64)
			}
		case assetattributevalues.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				aav.Value = value.String
			}
		default:
			aav.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the AssetAttributeValues.
// This includes values selected through modifiers, order, etc.
func (aav *AssetAttributeValues) GetValue(name string) (ent.Value, error) {
	return aav.selectValues.Get(name)
}

// QueryAttribute queries the "attribute" edge of the AssetAttributeValues entity.
func (aav *AssetAttributeValues) QueryAttribute() *AssetAttributesQuery {
	return NewAssetAttributeValuesClient(aav.config).QueryAttribute(aav)
}

// QueryAsset queries the "asset" edge of the AssetAttributeValues entity.
func (aav *AssetAttributeValues) QueryAsset() *AssetQuery {
	return NewAssetAttributeValuesClient(aav.config).QueryAsset(aav)
}

// Update returns a builder for updating this AssetAttributeValues.
// Note that you need to call AssetAttributeValues.Unwrap() before calling this method if this AssetAttributeValues
// was returned from a transaction, and the transaction was committed or rolled back.
func (aav *AssetAttributeValues) Update() *AssetAttributeValuesUpdateOne {
	return NewAssetAttributeValuesClient(aav.config).UpdateOne(aav)
}

// Unwrap unwraps the AssetAttributeValues entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aav *AssetAttributeValues) Unwrap() *AssetAttributeValues {
	_tx, ok := aav.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetAttributeValues is not a transactional entity")
	}
	aav.config.driver = _tx.drv
	return aav
}

// String implements the fmt.Stringer.
func (aav *AssetAttributeValues) String() string {
	var builder strings.Builder
	builder.WriteString("AssetAttributeValues(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aav.ID))
	builder.WriteString("created_at=")
	builder.WriteString(aav.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aav.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("attribute_id=")
	builder.WriteString(fmt.Sprintf("%v", aav.AttributeID))
	builder.WriteString(", ")
	builder.WriteString("asset_id=")
	builder.WriteString(fmt.Sprintf("%v", aav.AssetID))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(aav.Value)
	builder.WriteByte(')')
	return builder.String()
}

// AssetAttributeValuesSlice is a parsable slice of AssetAttributeValues.
type AssetAttributeValuesSlice []*AssetAttributeValues
