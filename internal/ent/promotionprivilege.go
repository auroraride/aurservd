// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionprivilege"
)

// PromotionPrivilege is the model entity for the PromotionPrivilege schema.
type PromotionPrivilege struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 权益类型 0:无权益 1: 佣金提高(%)
	Type uint8 `json:"type,omitempty"`
	// 权益名称
	Name string `json:"name,omitempty"`
	// 权益描述
	Description *string `json:"description,omitempty"`
	// 权益值
	Value        *uint64 `json:"value,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionPrivilege) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionprivilege.FieldCreator, promotionprivilege.FieldLastModifier:
			values[i] = new([]byte)
		case promotionprivilege.FieldID, promotionprivilege.FieldType, promotionprivilege.FieldValue:
			values[i] = new(sql.NullInt64)
		case promotionprivilege.FieldRemark, promotionprivilege.FieldName, promotionprivilege.FieldDescription:
			values[i] = new(sql.NullString)
		case promotionprivilege.FieldCreatedAt, promotionprivilege.FieldUpdatedAt, promotionprivilege.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionPrivilege fields.
func (pp *PromotionPrivilege) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionprivilege.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = uint64(value.Int64)
		case promotionprivilege.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pp.CreatedAt = value.Time
			}
		case promotionprivilege.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pp.UpdatedAt = value.Time
			}
		case promotionprivilege.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pp.DeletedAt = new(time.Time)
				*pp.DeletedAt = value.Time
			}
		case promotionprivilege.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pp.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotionprivilege.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pp.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotionprivilege.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pp.Remark = value.String
			}
		case promotionprivilege.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pp.Type = uint8(value.Int64)
			}
		case promotionprivilege.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pp.Name = value.String
			}
		case promotionprivilege.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pp.Description = new(string)
				*pp.Description = value.String
			}
		case promotionprivilege.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				pp.Value = new(uint64)
				*pp.Value = uint64(value.Int64)
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the PromotionPrivilege.
// This includes values selected through modifiers, order, etc.
func (pp *PromotionPrivilege) GetValue(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// Update returns a builder for updating this PromotionPrivilege.
// Note that you need to call PromotionPrivilege.Unwrap() before calling this method if this PromotionPrivilege
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PromotionPrivilege) Update() *PromotionPrivilegeUpdateOne {
	return NewPromotionPrivilegeClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the PromotionPrivilege entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PromotionPrivilege) Unwrap() *PromotionPrivilege {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionPrivilege is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PromotionPrivilege) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionPrivilege(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pp.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pp.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pp.Remark)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pp.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pp.Name)
	builder.WriteString(", ")
	if v := pp.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pp.Value; v != nil {
		builder.WriteString("value=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PromotionPrivileges is a parsable slice of PromotionPrivilege.
type PromotionPrivileges []*PromotionPrivilege
