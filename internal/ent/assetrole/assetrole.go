// Code generated by ent, DO NOT EDIT.

package assetrole

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the assetrole type in the database.
	Label = "asset_role"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPermissions holds the string denoting the permissions field in the database.
	FieldPermissions = "permissions"
	// FieldBuildin holds the string denoting the buildin field in the database.
	FieldBuildin = "buildin"
	// FieldSuper holds the string denoting the super field in the database.
	FieldSuper = "super"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAssetManagers holds the string denoting the asset_managers edge name in mutations.
	EdgeAssetManagers = "asset_managers"
	// Table holds the table name of the assetrole in the database.
	Table = "asset_role"
	// AssetManagersTable is the table that holds the asset_managers relation/edge.
	AssetManagersTable = "asset_manager"
	// AssetManagersInverseTable is the table name for the AssetManager entity.
	// It exists in this package in order to avoid circular dependency with the "assetmanager" package.
	AssetManagersInverseTable = "asset_manager"
	// AssetManagersColumn is the table column denoting the asset_managers relation/edge.
	AssetManagersColumn = "role_id"
)

// Columns holds all SQL columns for assetrole fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPermissions,
	FieldBuildin,
	FieldSuper,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultBuildin holds the default value on creation for the "buildin" field.
	DefaultBuildin bool
	// DefaultSuper holds the default value on creation for the "super" field.
	DefaultSuper bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the AssetRole queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByBuildin orders the results by the buildin field.
func ByBuildin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildin, opts...).ToFunc()
}

// BySuper orders the results by the super field.
func BySuper(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuper, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAssetManagersCount orders the results by asset_managers count.
func ByAssetManagersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssetManagersStep(), opts...)
	}
}

// ByAssetManagers orders the results by asset_managers terms.
func ByAssetManagers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetManagersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAssetManagersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetManagersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssetManagersTable, AssetManagersColumn),
	)
}
