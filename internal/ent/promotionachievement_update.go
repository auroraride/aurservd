// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionachievement"
)

// PromotionAchievementUpdate is the builder for updating PromotionAchievement entities.
type PromotionAchievementUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionAchievementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionAchievementUpdate builder.
func (pau *PromotionAchievementUpdate) Where(ps ...predicate.PromotionAchievement) *PromotionAchievementUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetUpdatedAt sets the "updated_at" field.
func (pau *PromotionAchievementUpdate) SetUpdatedAt(t time.Time) *PromotionAchievementUpdate {
	pau.mutation.SetUpdatedAt(t)
	return pau
}

// SetDeletedAt sets the "deleted_at" field.
func (pau *PromotionAchievementUpdate) SetDeletedAt(t time.Time) *PromotionAchievementUpdate {
	pau.mutation.SetDeletedAt(t)
	return pau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pau *PromotionAchievementUpdate) SetNillableDeletedAt(t *time.Time) *PromotionAchievementUpdate {
	if t != nil {
		pau.SetDeletedAt(*t)
	}
	return pau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pau *PromotionAchievementUpdate) ClearDeletedAt() *PromotionAchievementUpdate {
	pau.mutation.ClearDeletedAt()
	return pau
}

// SetLastModifier sets the "last_modifier" field.
func (pau *PromotionAchievementUpdate) SetLastModifier(m *model.Modifier) *PromotionAchievementUpdate {
	pau.mutation.SetLastModifier(m)
	return pau
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pau *PromotionAchievementUpdate) ClearLastModifier() *PromotionAchievementUpdate {
	pau.mutation.ClearLastModifier()
	return pau
}

// SetRemark sets the "remark" field.
func (pau *PromotionAchievementUpdate) SetRemark(s string) *PromotionAchievementUpdate {
	pau.mutation.SetRemark(s)
	return pau
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pau *PromotionAchievementUpdate) SetNillableRemark(s *string) *PromotionAchievementUpdate {
	if s != nil {
		pau.SetRemark(*s)
	}
	return pau
}

// ClearRemark clears the value of the "remark" field.
func (pau *PromotionAchievementUpdate) ClearRemark() *PromotionAchievementUpdate {
	pau.mutation.ClearRemark()
	return pau
}

// SetName sets the "name" field.
func (pau *PromotionAchievementUpdate) SetName(s string) *PromotionAchievementUpdate {
	pau.mutation.SetName(s)
	return pau
}

// SetType sets the "type" field.
func (pau *PromotionAchievementUpdate) SetType(u uint8) *PromotionAchievementUpdate {
	pau.mutation.ResetType()
	pau.mutation.SetType(u)
	return pau
}

// AddType adds u to the "type" field.
func (pau *PromotionAchievementUpdate) AddType(u int8) *PromotionAchievementUpdate {
	pau.mutation.AddType(u)
	return pau
}

// SetIcon sets the "icon" field.
func (pau *PromotionAchievementUpdate) SetIcon(s string) *PromotionAchievementUpdate {
	pau.mutation.SetIcon(s)
	return pau
}

// SetCondition sets the "condition" field.
func (pau *PromotionAchievementUpdate) SetCondition(u uint64) *PromotionAchievementUpdate {
	pau.mutation.ResetCondition()
	pau.mutation.SetCondition(u)
	return pau
}

// AddCondition adds u to the "condition" field.
func (pau *PromotionAchievementUpdate) AddCondition(u int64) *PromotionAchievementUpdate {
	pau.mutation.AddCondition(u)
	return pau
}

// Mutation returns the PromotionAchievementMutation object of the builder.
func (pau *PromotionAchievementUpdate) Mutation() *PromotionAchievementMutation {
	return pau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PromotionAchievementUpdate) Save(ctx context.Context) (int, error) {
	if err := pau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PromotionAchievementUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PromotionAchievementUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PromotionAchievementUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pau *PromotionAchievementUpdate) defaults() error {
	if _, ok := pau.mutation.UpdatedAt(); !ok {
		if promotionachievement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionachievement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionachievement.UpdateDefaultUpdatedAt()
		pau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pau *PromotionAchievementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionAchievementUpdate {
	pau.modifiers = append(pau.modifiers, modifiers...)
	return pau
}

func (pau *PromotionAchievementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionachievement.Table, promotionachievement.Columns, sqlgraph.NewFieldSpec(promotionachievement.FieldID, field.TypeUint64))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionachievement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pau.mutation.DeletedAt(); ok {
		_spec.SetField(promotionachievement.FieldDeletedAt, field.TypeTime, value)
	}
	if pau.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionachievement.FieldDeletedAt, field.TypeTime)
	}
	if pau.mutation.CreatorCleared() {
		_spec.ClearField(promotionachievement.FieldCreator, field.TypeJSON)
	}
	if value, ok := pau.mutation.LastModifier(); ok {
		_spec.SetField(promotionachievement.FieldLastModifier, field.TypeJSON, value)
	}
	if pau.mutation.LastModifierCleared() {
		_spec.ClearField(promotionachievement.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pau.mutation.Remark(); ok {
		_spec.SetField(promotionachievement.FieldRemark, field.TypeString, value)
	}
	if pau.mutation.RemarkCleared() {
		_spec.ClearField(promotionachievement.FieldRemark, field.TypeString)
	}
	if value, ok := pau.mutation.Name(); ok {
		_spec.SetField(promotionachievement.FieldName, field.TypeString, value)
	}
	if value, ok := pau.mutation.GetType(); ok {
		_spec.SetField(promotionachievement.FieldType, field.TypeUint8, value)
	}
	if value, ok := pau.mutation.AddedType(); ok {
		_spec.AddField(promotionachievement.FieldType, field.TypeUint8, value)
	}
	if value, ok := pau.mutation.Icon(); ok {
		_spec.SetField(promotionachievement.FieldIcon, field.TypeString, value)
	}
	if value, ok := pau.mutation.Condition(); ok {
		_spec.SetField(promotionachievement.FieldCondition, field.TypeUint64, value)
	}
	if value, ok := pau.mutation.AddedCondition(); ok {
		_spec.AddField(promotionachievement.FieldCondition, field.TypeUint64, value)
	}
	_spec.AddModifiers(pau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionachievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PromotionAchievementUpdateOne is the builder for updating a single PromotionAchievement entity.
type PromotionAchievementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionAchievementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pauo *PromotionAchievementUpdateOne) SetUpdatedAt(t time.Time) *PromotionAchievementUpdateOne {
	pauo.mutation.SetUpdatedAt(t)
	return pauo
}

// SetDeletedAt sets the "deleted_at" field.
func (pauo *PromotionAchievementUpdateOne) SetDeletedAt(t time.Time) *PromotionAchievementUpdateOne {
	pauo.mutation.SetDeletedAt(t)
	return pauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pauo *PromotionAchievementUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionAchievementUpdateOne {
	if t != nil {
		pauo.SetDeletedAt(*t)
	}
	return pauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pauo *PromotionAchievementUpdateOne) ClearDeletedAt() *PromotionAchievementUpdateOne {
	pauo.mutation.ClearDeletedAt()
	return pauo
}

// SetLastModifier sets the "last_modifier" field.
func (pauo *PromotionAchievementUpdateOne) SetLastModifier(m *model.Modifier) *PromotionAchievementUpdateOne {
	pauo.mutation.SetLastModifier(m)
	return pauo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pauo *PromotionAchievementUpdateOne) ClearLastModifier() *PromotionAchievementUpdateOne {
	pauo.mutation.ClearLastModifier()
	return pauo
}

// SetRemark sets the "remark" field.
func (pauo *PromotionAchievementUpdateOne) SetRemark(s string) *PromotionAchievementUpdateOne {
	pauo.mutation.SetRemark(s)
	return pauo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pauo *PromotionAchievementUpdateOne) SetNillableRemark(s *string) *PromotionAchievementUpdateOne {
	if s != nil {
		pauo.SetRemark(*s)
	}
	return pauo
}

// ClearRemark clears the value of the "remark" field.
func (pauo *PromotionAchievementUpdateOne) ClearRemark() *PromotionAchievementUpdateOne {
	pauo.mutation.ClearRemark()
	return pauo
}

// SetName sets the "name" field.
func (pauo *PromotionAchievementUpdateOne) SetName(s string) *PromotionAchievementUpdateOne {
	pauo.mutation.SetName(s)
	return pauo
}

// SetType sets the "type" field.
func (pauo *PromotionAchievementUpdateOne) SetType(u uint8) *PromotionAchievementUpdateOne {
	pauo.mutation.ResetType()
	pauo.mutation.SetType(u)
	return pauo
}

// AddType adds u to the "type" field.
func (pauo *PromotionAchievementUpdateOne) AddType(u int8) *PromotionAchievementUpdateOne {
	pauo.mutation.AddType(u)
	return pauo
}

// SetIcon sets the "icon" field.
func (pauo *PromotionAchievementUpdateOne) SetIcon(s string) *PromotionAchievementUpdateOne {
	pauo.mutation.SetIcon(s)
	return pauo
}

// SetCondition sets the "condition" field.
func (pauo *PromotionAchievementUpdateOne) SetCondition(u uint64) *PromotionAchievementUpdateOne {
	pauo.mutation.ResetCondition()
	pauo.mutation.SetCondition(u)
	return pauo
}

// AddCondition adds u to the "condition" field.
func (pauo *PromotionAchievementUpdateOne) AddCondition(u int64) *PromotionAchievementUpdateOne {
	pauo.mutation.AddCondition(u)
	return pauo
}

// Mutation returns the PromotionAchievementMutation object of the builder.
func (pauo *PromotionAchievementUpdateOne) Mutation() *PromotionAchievementMutation {
	return pauo.mutation
}

// Where appends a list predicates to the PromotionAchievementUpdate builder.
func (pauo *PromotionAchievementUpdateOne) Where(ps ...predicate.PromotionAchievement) *PromotionAchievementUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PromotionAchievementUpdateOne) Select(field string, fields ...string) *PromotionAchievementUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PromotionAchievement entity.
func (pauo *PromotionAchievementUpdateOne) Save(ctx context.Context) (*PromotionAchievement, error) {
	if err := pauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PromotionAchievementUpdateOne) SaveX(ctx context.Context) *PromotionAchievement {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PromotionAchievementUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PromotionAchievementUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pauo *PromotionAchievementUpdateOne) defaults() error {
	if _, ok := pauo.mutation.UpdatedAt(); !ok {
		if promotionachievement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionachievement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionachievement.UpdateDefaultUpdatedAt()
		pauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pauo *PromotionAchievementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionAchievementUpdateOne {
	pauo.modifiers = append(pauo.modifiers, modifiers...)
	return pauo
}

func (pauo *PromotionAchievementUpdateOne) sqlSave(ctx context.Context) (_node *PromotionAchievement, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionachievement.Table, promotionachievement.Columns, sqlgraph.NewFieldSpec(promotionachievement.FieldID, field.TypeUint64))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionAchievement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionachievement.FieldID)
		for _, f := range fields {
			if !promotionachievement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionachievement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionachievement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pauo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionachievement.FieldDeletedAt, field.TypeTime, value)
	}
	if pauo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionachievement.FieldDeletedAt, field.TypeTime)
	}
	if pauo.mutation.CreatorCleared() {
		_spec.ClearField(promotionachievement.FieldCreator, field.TypeJSON)
	}
	if value, ok := pauo.mutation.LastModifier(); ok {
		_spec.SetField(promotionachievement.FieldLastModifier, field.TypeJSON, value)
	}
	if pauo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionachievement.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pauo.mutation.Remark(); ok {
		_spec.SetField(promotionachievement.FieldRemark, field.TypeString, value)
	}
	if pauo.mutation.RemarkCleared() {
		_spec.ClearField(promotionachievement.FieldRemark, field.TypeString)
	}
	if value, ok := pauo.mutation.Name(); ok {
		_spec.SetField(promotionachievement.FieldName, field.TypeString, value)
	}
	if value, ok := pauo.mutation.GetType(); ok {
		_spec.SetField(promotionachievement.FieldType, field.TypeUint8, value)
	}
	if value, ok := pauo.mutation.AddedType(); ok {
		_spec.AddField(promotionachievement.FieldType, field.TypeUint8, value)
	}
	if value, ok := pauo.mutation.Icon(); ok {
		_spec.SetField(promotionachievement.FieldIcon, field.TypeString, value)
	}
	if value, ok := pauo.mutation.Condition(); ok {
		_spec.SetField(promotionachievement.FieldCondition, field.TypeUint64, value)
	}
	if value, ok := pauo.mutation.AddedCondition(); ok {
		_spec.AddField(promotionachievement.FieldCondition, field.TypeUint64, value)
	}
	_spec.AddModifiers(pauo.modifiers...)
	_node = &PromotionAchievement{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionachievement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
