// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// RiderUpdate is the builder for updating Rider entities.
type RiderUpdate struct {
	config
	hooks    []Hook
	mutation *RiderMutation
}

// Where appends a list predicates to the RiderUpdate builder.
func (ru *RiderUpdate) Where(ps ...predicate.Rider) *RiderUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RiderUpdate) SetUpdatedAt(t time.Time) *RiderUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RiderUpdate) SetDeletedAt(t time.Time) *RiderUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableDeletedAt(t *time.Time) *RiderUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RiderUpdate) ClearDeletedAt() *RiderUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetLastModifier sets the "last_modifier" field.
func (ru *RiderUpdate) SetLastModifier(m *model.Modifier) *RiderUpdate {
	ru.mutation.SetLastModifier(m)
	return ru
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ru *RiderUpdate) ClearLastModifier() *RiderUpdate {
	ru.mutation.ClearLastModifier()
	return ru
}

// SetRemark sets the "remark" field.
func (ru *RiderUpdate) SetRemark(s string) *RiderUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableRemark(s *string) *RiderUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// ClearRemark clears the value of the "remark" field.
func (ru *RiderUpdate) ClearRemark() *RiderUpdate {
	ru.mutation.ClearRemark()
	return ru
}

// SetStationID sets the "station_id" field.
func (ru *RiderUpdate) SetStationID(u uint64) *RiderUpdate {
	ru.mutation.SetStationID(u)
	return ru
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableStationID(u *uint64) *RiderUpdate {
	if u != nil {
		ru.SetStationID(*u)
	}
	return ru
}

// ClearStationID clears the value of the "station_id" field.
func (ru *RiderUpdate) ClearStationID() *RiderUpdate {
	ru.mutation.ClearStationID()
	return ru
}

// SetPersonID sets the "person_id" field.
func (ru *RiderUpdate) SetPersonID(u uint64) *RiderUpdate {
	ru.mutation.SetPersonID(u)
	return ru
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (ru *RiderUpdate) SetNillablePersonID(u *uint64) *RiderUpdate {
	if u != nil {
		ru.SetPersonID(*u)
	}
	return ru
}

// ClearPersonID clears the value of the "person_id" field.
func (ru *RiderUpdate) ClearPersonID() *RiderUpdate {
	ru.mutation.ClearPersonID()
	return ru
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ru *RiderUpdate) SetEnterpriseID(u uint64) *RiderUpdate {
	ru.mutation.SetEnterpriseID(u)
	return ru
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableEnterpriseID(u *uint64) *RiderUpdate {
	if u != nil {
		ru.SetEnterpriseID(*u)
	}
	return ru
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (ru *RiderUpdate) ClearEnterpriseID() *RiderUpdate {
	ru.mutation.ClearEnterpriseID()
	return ru
}

// SetPhone sets the "phone" field.
func (ru *RiderUpdate) SetPhone(s string) *RiderUpdate {
	ru.mutation.SetPhone(s)
	return ru
}

// SetContact sets the "contact" field.
func (ru *RiderUpdate) SetContact(mc *model.RiderContact) *RiderUpdate {
	ru.mutation.SetContact(mc)
	return ru
}

// ClearContact clears the value of the "contact" field.
func (ru *RiderUpdate) ClearContact() *RiderUpdate {
	ru.mutation.ClearContact()
	return ru
}

// SetDeviceType sets the "device_type" field.
func (ru *RiderUpdate) SetDeviceType(u uint8) *RiderUpdate {
	ru.mutation.ResetDeviceType()
	ru.mutation.SetDeviceType(u)
	return ru
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableDeviceType(u *uint8) *RiderUpdate {
	if u != nil {
		ru.SetDeviceType(*u)
	}
	return ru
}

// AddDeviceType adds u to the "device_type" field.
func (ru *RiderUpdate) AddDeviceType(u int8) *RiderUpdate {
	ru.mutation.AddDeviceType(u)
	return ru
}

// ClearDeviceType clears the value of the "device_type" field.
func (ru *RiderUpdate) ClearDeviceType() *RiderUpdate {
	ru.mutation.ClearDeviceType()
	return ru
}

// SetLastDevice sets the "last_device" field.
func (ru *RiderUpdate) SetLastDevice(s string) *RiderUpdate {
	ru.mutation.SetLastDevice(s)
	return ru
}

// SetNillableLastDevice sets the "last_device" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableLastDevice(s *string) *RiderUpdate {
	if s != nil {
		ru.SetLastDevice(*s)
	}
	return ru
}

// ClearLastDevice clears the value of the "last_device" field.
func (ru *RiderUpdate) ClearLastDevice() *RiderUpdate {
	ru.mutation.ClearLastDevice()
	return ru
}

// SetIsNewDevice sets the "is_new_device" field.
func (ru *RiderUpdate) SetIsNewDevice(b bool) *RiderUpdate {
	ru.mutation.SetIsNewDevice(b)
	return ru
}

// SetNillableIsNewDevice sets the "is_new_device" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableIsNewDevice(b *bool) *RiderUpdate {
	if b != nil {
		ru.SetIsNewDevice(*b)
	}
	return ru
}

// SetLastFace sets the "last_face" field.
func (ru *RiderUpdate) SetLastFace(s string) *RiderUpdate {
	ru.mutation.SetLastFace(s)
	return ru
}

// SetNillableLastFace sets the "last_face" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableLastFace(s *string) *RiderUpdate {
	if s != nil {
		ru.SetLastFace(*s)
	}
	return ru
}

// ClearLastFace clears the value of the "last_face" field.
func (ru *RiderUpdate) ClearLastFace() *RiderUpdate {
	ru.mutation.ClearLastFace()
	return ru
}

// SetPushID sets the "push_id" field.
func (ru *RiderUpdate) SetPushID(s string) *RiderUpdate {
	ru.mutation.SetPushID(s)
	return ru
}

// SetNillablePushID sets the "push_id" field if the given value is not nil.
func (ru *RiderUpdate) SetNillablePushID(s *string) *RiderUpdate {
	if s != nil {
		ru.SetPushID(*s)
	}
	return ru
}

// ClearPushID clears the value of the "push_id" field.
func (ru *RiderUpdate) ClearPushID() *RiderUpdate {
	ru.mutation.ClearPushID()
	return ru
}

// SetLastSigninAt sets the "last_signin_at" field.
func (ru *RiderUpdate) SetLastSigninAt(t time.Time) *RiderUpdate {
	ru.mutation.SetLastSigninAt(t)
	return ru
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableLastSigninAt(t *time.Time) *RiderUpdate {
	if t != nil {
		ru.SetLastSigninAt(*t)
	}
	return ru
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (ru *RiderUpdate) ClearLastSigninAt() *RiderUpdate {
	ru.mutation.ClearLastSigninAt()
	return ru
}

// SetEsignAccountID sets the "esign_account_id" field.
func (ru *RiderUpdate) SetEsignAccountID(s string) *RiderUpdate {
	ru.mutation.SetEsignAccountID(s)
	return ru
}

// SetNillableEsignAccountID sets the "esign_account_id" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableEsignAccountID(s *string) *RiderUpdate {
	if s != nil {
		ru.SetEsignAccountID(*s)
	}
	return ru
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (ru *RiderUpdate) ClearEsignAccountID() *RiderUpdate {
	ru.mutation.ClearEsignAccountID()
	return ru
}

// SetPlanAt sets the "plan_at" field.
func (ru *RiderUpdate) SetPlanAt(t time.Time) *RiderUpdate {
	ru.mutation.SetPlanAt(t)
	return ru
}

// SetNillablePlanAt sets the "plan_at" field if the given value is not nil.
func (ru *RiderUpdate) SetNillablePlanAt(t *time.Time) *RiderUpdate {
	if t != nil {
		ru.SetPlanAt(*t)
	}
	return ru
}

// ClearPlanAt clears the value of the "plan_at" field.
func (ru *RiderUpdate) ClearPlanAt() *RiderUpdate {
	ru.mutation.ClearPlanAt()
	return ru
}

// SetBlocked sets the "blocked" field.
func (ru *RiderUpdate) SetBlocked(b bool) *RiderUpdate {
	ru.mutation.SetBlocked(b)
	return ru
}

// SetNillableBlocked sets the "blocked" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableBlocked(b *bool) *RiderUpdate {
	if b != nil {
		ru.SetBlocked(*b)
	}
	return ru
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ru *RiderUpdate) SetStation(e *EnterpriseStation) *RiderUpdate {
	return ru.SetStationID(e.ID)
}

// SetPerson sets the "person" edge to the Person entity.
func (ru *RiderUpdate) SetPerson(p *Person) *RiderUpdate {
	return ru.SetPersonID(p.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ru *RiderUpdate) SetEnterprise(e *Enterprise) *RiderUpdate {
	return ru.SetEnterpriseID(e.ID)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (ru *RiderUpdate) AddContractIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.AddContractIDs(ids...)
	return ru
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (ru *RiderUpdate) AddContracts(c ...*Contract) *RiderUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddContractIDs(ids...)
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by IDs.
func (ru *RiderUpdate) AddFaultIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.AddFaultIDs(ids...)
	return ru
}

// AddFaults adds the "faults" edges to the CabinetFault entity.
func (ru *RiderUpdate) AddFaults(c ...*CabinetFault) *RiderUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddFaultIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (ru *RiderUpdate) AddOrderIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.AddOrderIDs(ids...)
	return ru
}

// AddOrders adds the "orders" edges to the Order entity.
func (ru *RiderUpdate) AddOrders(o ...*Order) *RiderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ru.AddOrderIDs(ids...)
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (ru *RiderUpdate) AddExchangeIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.AddExchangeIDs(ids...)
	return ru
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (ru *RiderUpdate) AddExchanges(e ...*Exchange) *RiderUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddExchangeIDs(ids...)
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by IDs.
func (ru *RiderUpdate) AddSubscribeIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.AddSubscribeIDs(ids...)
	return ru
}

// AddSubscribes adds the "subscribes" edges to the Subscribe entity.
func (ru *RiderUpdate) AddSubscribes(s ...*Subscribe) *RiderUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddSubscribeIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (ru *RiderUpdate) AddStockIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.AddStockIDs(ids...)
	return ru
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (ru *RiderUpdate) AddStocks(s ...*Stock) *RiderUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddStockIDs(ids...)
}

// Mutation returns the RiderMutation object of the builder.
func (ru *RiderUpdate) Mutation() *RiderMutation {
	return ru.mutation
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (ru *RiderUpdate) ClearStation() *RiderUpdate {
	ru.mutation.ClearStation()
	return ru
}

// ClearPerson clears the "person" edge to the Person entity.
func (ru *RiderUpdate) ClearPerson() *RiderUpdate {
	ru.mutation.ClearPerson()
	return ru
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (ru *RiderUpdate) ClearEnterprise() *RiderUpdate {
	ru.mutation.ClearEnterprise()
	return ru
}

// ClearContracts clears all "contracts" edges to the Contract entity.
func (ru *RiderUpdate) ClearContracts() *RiderUpdate {
	ru.mutation.ClearContracts()
	return ru
}

// RemoveContractIDs removes the "contracts" edge to Contract entities by IDs.
func (ru *RiderUpdate) RemoveContractIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.RemoveContractIDs(ids...)
	return ru
}

// RemoveContracts removes "contracts" edges to Contract entities.
func (ru *RiderUpdate) RemoveContracts(c ...*Contract) *RiderUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveContractIDs(ids...)
}

// ClearFaults clears all "faults" edges to the CabinetFault entity.
func (ru *RiderUpdate) ClearFaults() *RiderUpdate {
	ru.mutation.ClearFaults()
	return ru
}

// RemoveFaultIDs removes the "faults" edge to CabinetFault entities by IDs.
func (ru *RiderUpdate) RemoveFaultIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.RemoveFaultIDs(ids...)
	return ru
}

// RemoveFaults removes "faults" edges to CabinetFault entities.
func (ru *RiderUpdate) RemoveFaults(c ...*CabinetFault) *RiderUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveFaultIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (ru *RiderUpdate) ClearOrders() *RiderUpdate {
	ru.mutation.ClearOrders()
	return ru
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (ru *RiderUpdate) RemoveOrderIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.RemoveOrderIDs(ids...)
	return ru
}

// RemoveOrders removes "orders" edges to Order entities.
func (ru *RiderUpdate) RemoveOrders(o ...*Order) *RiderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ru.RemoveOrderIDs(ids...)
}

// ClearExchanges clears all "exchanges" edges to the Exchange entity.
func (ru *RiderUpdate) ClearExchanges() *RiderUpdate {
	ru.mutation.ClearExchanges()
	return ru
}

// RemoveExchangeIDs removes the "exchanges" edge to Exchange entities by IDs.
func (ru *RiderUpdate) RemoveExchangeIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.RemoveExchangeIDs(ids...)
	return ru
}

// RemoveExchanges removes "exchanges" edges to Exchange entities.
func (ru *RiderUpdate) RemoveExchanges(e ...*Exchange) *RiderUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveExchangeIDs(ids...)
}

// ClearSubscribes clears all "subscribes" edges to the Subscribe entity.
func (ru *RiderUpdate) ClearSubscribes() *RiderUpdate {
	ru.mutation.ClearSubscribes()
	return ru
}

// RemoveSubscribeIDs removes the "subscribes" edge to Subscribe entities by IDs.
func (ru *RiderUpdate) RemoveSubscribeIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.RemoveSubscribeIDs(ids...)
	return ru
}

// RemoveSubscribes removes "subscribes" edges to Subscribe entities.
func (ru *RiderUpdate) RemoveSubscribes(s ...*Subscribe) *RiderUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveSubscribeIDs(ids...)
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (ru *RiderUpdate) ClearStocks() *RiderUpdate {
	ru.mutation.ClearStocks()
	return ru
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (ru *RiderUpdate) RemoveStockIDs(ids ...uint64) *RiderUpdate {
	ru.mutation.RemoveStockIDs(ids...)
	return ru
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (ru *RiderUpdate) RemoveStocks(s ...*Stock) *RiderUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveStockIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RiderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RiderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RiderUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RiderUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RiderUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RiderUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if rider.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rider.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rider.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RiderUpdate) check() error {
	if v, ok := ru.mutation.Phone(); ok {
		if err := rider.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Rider.phone": %w`, err)}
		}
	}
	if v, ok := ru.mutation.LastDevice(); ok {
		if err := rider.LastDeviceValidator(v); err != nil {
			return &ValidationError{Name: "last_device", err: fmt.Errorf(`ent: validator failed for field "Rider.last_device": %w`, err)}
		}
	}
	if v, ok := ru.mutation.PushID(); ok {
		if err := rider.PushIDValidator(v); err != nil {
			return &ValidationError{Name: "push_id", err: fmt.Errorf(`ent: validator failed for field "Rider.push_id": %w`, err)}
		}
	}
	return nil
}

func (ru *RiderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldDeletedAt,
		})
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldDeletedAt,
		})
	}
	if ru.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: rider.FieldCreator,
		})
	}
	if value, ok := ru.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldLastModifier,
		})
	}
	if ru.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: rider.FieldLastModifier,
		})
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldRemark,
		})
	}
	if ru.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldRemark,
		})
	}
	if value, ok := ru.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPhone,
		})
	}
	if value, ok := ru.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldContact,
		})
	}
	if ru.mutation.ContactCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: rider.FieldContact,
		})
	}
	if value, ok := ru.mutation.DeviceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
	}
	if value, ok := ru.mutation.AddedDeviceType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
	}
	if ru.mutation.DeviceTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: rider.FieldDeviceType,
		})
	}
	if value, ok := ru.mutation.LastDevice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastDevice,
		})
	}
	if ru.mutation.LastDeviceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldLastDevice,
		})
	}
	if value, ok := ru.mutation.IsNewDevice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rider.FieldIsNewDevice,
		})
	}
	if value, ok := ru.mutation.LastFace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastFace,
		})
	}
	if ru.mutation.LastFaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldLastFace,
		})
	}
	if value, ok := ru.mutation.PushID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPushID,
		})
	}
	if ru.mutation.PushIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldPushID,
		})
	}
	if value, ok := ru.mutation.LastSigninAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldLastSigninAt,
		})
	}
	if ru.mutation.LastSigninAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldLastSigninAt,
		})
	}
	if value, ok := ru.mutation.EsignAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldEsignAccountID,
		})
	}
	if ru.mutation.EsignAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldEsignAccountID,
		})
	}
	if value, ok := ru.mutation.PlanAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldPlanAt,
		})
	}
	if ru.mutation.PlanAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldPlanAt,
		})
	}
	if value, ok := ru.mutation.Blocked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rider.FieldBlocked,
		})
	}
	if ru.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rider.StationTable,
			Columns: []string{rider.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rider.StationTable,
			Columns: []string{rider.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedContractsIDs(); len(nodes) > 0 && !ru.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedFaultsIDs(); len(nodes) > 0 && !ru.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FaultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !ru.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedExchangesIDs(); len(nodes) > 0 && !ru.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SubscribesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSubscribesIDs(); len(nodes) > 0 && !ru.mutation.SubscribesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SubscribesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.StocksTable,
			Columns: []string{rider.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedStocksIDs(); len(nodes) > 0 && !ru.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.StocksTable,
			Columns: []string{rider.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.StocksTable,
			Columns: []string{rider.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RiderUpdateOne is the builder for updating a single Rider entity.
type RiderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RiderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RiderUpdateOne) SetUpdatedAt(t time.Time) *RiderUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RiderUpdateOne) SetDeletedAt(t time.Time) *RiderUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableDeletedAt(t *time.Time) *RiderUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RiderUpdateOne) ClearDeletedAt() *RiderUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetLastModifier sets the "last_modifier" field.
func (ruo *RiderUpdateOne) SetLastModifier(m *model.Modifier) *RiderUpdateOne {
	ruo.mutation.SetLastModifier(m)
	return ruo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ruo *RiderUpdateOne) ClearLastModifier() *RiderUpdateOne {
	ruo.mutation.ClearLastModifier()
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *RiderUpdateOne) SetRemark(s string) *RiderUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableRemark(s *string) *RiderUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// ClearRemark clears the value of the "remark" field.
func (ruo *RiderUpdateOne) ClearRemark() *RiderUpdateOne {
	ruo.mutation.ClearRemark()
	return ruo
}

// SetStationID sets the "station_id" field.
func (ruo *RiderUpdateOne) SetStationID(u uint64) *RiderUpdateOne {
	ruo.mutation.SetStationID(u)
	return ruo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableStationID(u *uint64) *RiderUpdateOne {
	if u != nil {
		ruo.SetStationID(*u)
	}
	return ruo
}

// ClearStationID clears the value of the "station_id" field.
func (ruo *RiderUpdateOne) ClearStationID() *RiderUpdateOne {
	ruo.mutation.ClearStationID()
	return ruo
}

// SetPersonID sets the "person_id" field.
func (ruo *RiderUpdateOne) SetPersonID(u uint64) *RiderUpdateOne {
	ruo.mutation.SetPersonID(u)
	return ruo
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillablePersonID(u *uint64) *RiderUpdateOne {
	if u != nil {
		ruo.SetPersonID(*u)
	}
	return ruo
}

// ClearPersonID clears the value of the "person_id" field.
func (ruo *RiderUpdateOne) ClearPersonID() *RiderUpdateOne {
	ruo.mutation.ClearPersonID()
	return ruo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ruo *RiderUpdateOne) SetEnterpriseID(u uint64) *RiderUpdateOne {
	ruo.mutation.SetEnterpriseID(u)
	return ruo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableEnterpriseID(u *uint64) *RiderUpdateOne {
	if u != nil {
		ruo.SetEnterpriseID(*u)
	}
	return ruo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (ruo *RiderUpdateOne) ClearEnterpriseID() *RiderUpdateOne {
	ruo.mutation.ClearEnterpriseID()
	return ruo
}

// SetPhone sets the "phone" field.
func (ruo *RiderUpdateOne) SetPhone(s string) *RiderUpdateOne {
	ruo.mutation.SetPhone(s)
	return ruo
}

// SetContact sets the "contact" field.
func (ruo *RiderUpdateOne) SetContact(mc *model.RiderContact) *RiderUpdateOne {
	ruo.mutation.SetContact(mc)
	return ruo
}

// ClearContact clears the value of the "contact" field.
func (ruo *RiderUpdateOne) ClearContact() *RiderUpdateOne {
	ruo.mutation.ClearContact()
	return ruo
}

// SetDeviceType sets the "device_type" field.
func (ruo *RiderUpdateOne) SetDeviceType(u uint8) *RiderUpdateOne {
	ruo.mutation.ResetDeviceType()
	ruo.mutation.SetDeviceType(u)
	return ruo
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableDeviceType(u *uint8) *RiderUpdateOne {
	if u != nil {
		ruo.SetDeviceType(*u)
	}
	return ruo
}

// AddDeviceType adds u to the "device_type" field.
func (ruo *RiderUpdateOne) AddDeviceType(u int8) *RiderUpdateOne {
	ruo.mutation.AddDeviceType(u)
	return ruo
}

// ClearDeviceType clears the value of the "device_type" field.
func (ruo *RiderUpdateOne) ClearDeviceType() *RiderUpdateOne {
	ruo.mutation.ClearDeviceType()
	return ruo
}

// SetLastDevice sets the "last_device" field.
func (ruo *RiderUpdateOne) SetLastDevice(s string) *RiderUpdateOne {
	ruo.mutation.SetLastDevice(s)
	return ruo
}

// SetNillableLastDevice sets the "last_device" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableLastDevice(s *string) *RiderUpdateOne {
	if s != nil {
		ruo.SetLastDevice(*s)
	}
	return ruo
}

// ClearLastDevice clears the value of the "last_device" field.
func (ruo *RiderUpdateOne) ClearLastDevice() *RiderUpdateOne {
	ruo.mutation.ClearLastDevice()
	return ruo
}

// SetIsNewDevice sets the "is_new_device" field.
func (ruo *RiderUpdateOne) SetIsNewDevice(b bool) *RiderUpdateOne {
	ruo.mutation.SetIsNewDevice(b)
	return ruo
}

// SetNillableIsNewDevice sets the "is_new_device" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableIsNewDevice(b *bool) *RiderUpdateOne {
	if b != nil {
		ruo.SetIsNewDevice(*b)
	}
	return ruo
}

// SetLastFace sets the "last_face" field.
func (ruo *RiderUpdateOne) SetLastFace(s string) *RiderUpdateOne {
	ruo.mutation.SetLastFace(s)
	return ruo
}

// SetNillableLastFace sets the "last_face" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableLastFace(s *string) *RiderUpdateOne {
	if s != nil {
		ruo.SetLastFace(*s)
	}
	return ruo
}

// ClearLastFace clears the value of the "last_face" field.
func (ruo *RiderUpdateOne) ClearLastFace() *RiderUpdateOne {
	ruo.mutation.ClearLastFace()
	return ruo
}

// SetPushID sets the "push_id" field.
func (ruo *RiderUpdateOne) SetPushID(s string) *RiderUpdateOne {
	ruo.mutation.SetPushID(s)
	return ruo
}

// SetNillablePushID sets the "push_id" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillablePushID(s *string) *RiderUpdateOne {
	if s != nil {
		ruo.SetPushID(*s)
	}
	return ruo
}

// ClearPushID clears the value of the "push_id" field.
func (ruo *RiderUpdateOne) ClearPushID() *RiderUpdateOne {
	ruo.mutation.ClearPushID()
	return ruo
}

// SetLastSigninAt sets the "last_signin_at" field.
func (ruo *RiderUpdateOne) SetLastSigninAt(t time.Time) *RiderUpdateOne {
	ruo.mutation.SetLastSigninAt(t)
	return ruo
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableLastSigninAt(t *time.Time) *RiderUpdateOne {
	if t != nil {
		ruo.SetLastSigninAt(*t)
	}
	return ruo
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (ruo *RiderUpdateOne) ClearLastSigninAt() *RiderUpdateOne {
	ruo.mutation.ClearLastSigninAt()
	return ruo
}

// SetEsignAccountID sets the "esign_account_id" field.
func (ruo *RiderUpdateOne) SetEsignAccountID(s string) *RiderUpdateOne {
	ruo.mutation.SetEsignAccountID(s)
	return ruo
}

// SetNillableEsignAccountID sets the "esign_account_id" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableEsignAccountID(s *string) *RiderUpdateOne {
	if s != nil {
		ruo.SetEsignAccountID(*s)
	}
	return ruo
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (ruo *RiderUpdateOne) ClearEsignAccountID() *RiderUpdateOne {
	ruo.mutation.ClearEsignAccountID()
	return ruo
}

// SetPlanAt sets the "plan_at" field.
func (ruo *RiderUpdateOne) SetPlanAt(t time.Time) *RiderUpdateOne {
	ruo.mutation.SetPlanAt(t)
	return ruo
}

// SetNillablePlanAt sets the "plan_at" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillablePlanAt(t *time.Time) *RiderUpdateOne {
	if t != nil {
		ruo.SetPlanAt(*t)
	}
	return ruo
}

// ClearPlanAt clears the value of the "plan_at" field.
func (ruo *RiderUpdateOne) ClearPlanAt() *RiderUpdateOne {
	ruo.mutation.ClearPlanAt()
	return ruo
}

// SetBlocked sets the "blocked" field.
func (ruo *RiderUpdateOne) SetBlocked(b bool) *RiderUpdateOne {
	ruo.mutation.SetBlocked(b)
	return ruo
}

// SetNillableBlocked sets the "blocked" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableBlocked(b *bool) *RiderUpdateOne {
	if b != nil {
		ruo.SetBlocked(*b)
	}
	return ruo
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ruo *RiderUpdateOne) SetStation(e *EnterpriseStation) *RiderUpdateOne {
	return ruo.SetStationID(e.ID)
}

// SetPerson sets the "person" edge to the Person entity.
func (ruo *RiderUpdateOne) SetPerson(p *Person) *RiderUpdateOne {
	return ruo.SetPersonID(p.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ruo *RiderUpdateOne) SetEnterprise(e *Enterprise) *RiderUpdateOne {
	return ruo.SetEnterpriseID(e.ID)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (ruo *RiderUpdateOne) AddContractIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.AddContractIDs(ids...)
	return ruo
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (ruo *RiderUpdateOne) AddContracts(c ...*Contract) *RiderUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddContractIDs(ids...)
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by IDs.
func (ruo *RiderUpdateOne) AddFaultIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.AddFaultIDs(ids...)
	return ruo
}

// AddFaults adds the "faults" edges to the CabinetFault entity.
func (ruo *RiderUpdateOne) AddFaults(c ...*CabinetFault) *RiderUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddFaultIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (ruo *RiderUpdateOne) AddOrderIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.AddOrderIDs(ids...)
	return ruo
}

// AddOrders adds the "orders" edges to the Order entity.
func (ruo *RiderUpdateOne) AddOrders(o ...*Order) *RiderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ruo.AddOrderIDs(ids...)
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (ruo *RiderUpdateOne) AddExchangeIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.AddExchangeIDs(ids...)
	return ruo
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (ruo *RiderUpdateOne) AddExchanges(e ...*Exchange) *RiderUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddExchangeIDs(ids...)
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by IDs.
func (ruo *RiderUpdateOne) AddSubscribeIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.AddSubscribeIDs(ids...)
	return ruo
}

// AddSubscribes adds the "subscribes" edges to the Subscribe entity.
func (ruo *RiderUpdateOne) AddSubscribes(s ...*Subscribe) *RiderUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddSubscribeIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (ruo *RiderUpdateOne) AddStockIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.AddStockIDs(ids...)
	return ruo
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (ruo *RiderUpdateOne) AddStocks(s ...*Stock) *RiderUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddStockIDs(ids...)
}

// Mutation returns the RiderMutation object of the builder.
func (ruo *RiderUpdateOne) Mutation() *RiderMutation {
	return ruo.mutation
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (ruo *RiderUpdateOne) ClearStation() *RiderUpdateOne {
	ruo.mutation.ClearStation()
	return ruo
}

// ClearPerson clears the "person" edge to the Person entity.
func (ruo *RiderUpdateOne) ClearPerson() *RiderUpdateOne {
	ruo.mutation.ClearPerson()
	return ruo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (ruo *RiderUpdateOne) ClearEnterprise() *RiderUpdateOne {
	ruo.mutation.ClearEnterprise()
	return ruo
}

// ClearContracts clears all "contracts" edges to the Contract entity.
func (ruo *RiderUpdateOne) ClearContracts() *RiderUpdateOne {
	ruo.mutation.ClearContracts()
	return ruo
}

// RemoveContractIDs removes the "contracts" edge to Contract entities by IDs.
func (ruo *RiderUpdateOne) RemoveContractIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.RemoveContractIDs(ids...)
	return ruo
}

// RemoveContracts removes "contracts" edges to Contract entities.
func (ruo *RiderUpdateOne) RemoveContracts(c ...*Contract) *RiderUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveContractIDs(ids...)
}

// ClearFaults clears all "faults" edges to the CabinetFault entity.
func (ruo *RiderUpdateOne) ClearFaults() *RiderUpdateOne {
	ruo.mutation.ClearFaults()
	return ruo
}

// RemoveFaultIDs removes the "faults" edge to CabinetFault entities by IDs.
func (ruo *RiderUpdateOne) RemoveFaultIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.RemoveFaultIDs(ids...)
	return ruo
}

// RemoveFaults removes "faults" edges to CabinetFault entities.
func (ruo *RiderUpdateOne) RemoveFaults(c ...*CabinetFault) *RiderUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveFaultIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (ruo *RiderUpdateOne) ClearOrders() *RiderUpdateOne {
	ruo.mutation.ClearOrders()
	return ruo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (ruo *RiderUpdateOne) RemoveOrderIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.RemoveOrderIDs(ids...)
	return ruo
}

// RemoveOrders removes "orders" edges to Order entities.
func (ruo *RiderUpdateOne) RemoveOrders(o ...*Order) *RiderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ruo.RemoveOrderIDs(ids...)
}

// ClearExchanges clears all "exchanges" edges to the Exchange entity.
func (ruo *RiderUpdateOne) ClearExchanges() *RiderUpdateOne {
	ruo.mutation.ClearExchanges()
	return ruo
}

// RemoveExchangeIDs removes the "exchanges" edge to Exchange entities by IDs.
func (ruo *RiderUpdateOne) RemoveExchangeIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.RemoveExchangeIDs(ids...)
	return ruo
}

// RemoveExchanges removes "exchanges" edges to Exchange entities.
func (ruo *RiderUpdateOne) RemoveExchanges(e ...*Exchange) *RiderUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveExchangeIDs(ids...)
}

// ClearSubscribes clears all "subscribes" edges to the Subscribe entity.
func (ruo *RiderUpdateOne) ClearSubscribes() *RiderUpdateOne {
	ruo.mutation.ClearSubscribes()
	return ruo
}

// RemoveSubscribeIDs removes the "subscribes" edge to Subscribe entities by IDs.
func (ruo *RiderUpdateOne) RemoveSubscribeIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.RemoveSubscribeIDs(ids...)
	return ruo
}

// RemoveSubscribes removes "subscribes" edges to Subscribe entities.
func (ruo *RiderUpdateOne) RemoveSubscribes(s ...*Subscribe) *RiderUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveSubscribeIDs(ids...)
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (ruo *RiderUpdateOne) ClearStocks() *RiderUpdateOne {
	ruo.mutation.ClearStocks()
	return ruo
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (ruo *RiderUpdateOne) RemoveStockIDs(ids ...uint64) *RiderUpdateOne {
	ruo.mutation.RemoveStockIDs(ids...)
	return ruo
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (ruo *RiderUpdateOne) RemoveStocks(s ...*Stock) *RiderUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveStockIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RiderUpdateOne) Select(field string, fields ...string) *RiderUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rider entity.
func (ruo *RiderUpdateOne) Save(ctx context.Context) (*Rider, error) {
	var (
		err  error
		node *Rider
	)
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RiderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Rider)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RiderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RiderUpdateOne) SaveX(ctx context.Context) *Rider {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RiderUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RiderUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RiderUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if rider.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rider.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rider.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RiderUpdateOne) check() error {
	if v, ok := ruo.mutation.Phone(); ok {
		if err := rider.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Rider.phone": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.LastDevice(); ok {
		if err := rider.LastDeviceValidator(v); err != nil {
			return &ValidationError{Name: "last_device", err: fmt.Errorf(`ent: validator failed for field "Rider.last_device": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.PushID(); ok {
		if err := rider.PushIDValidator(v); err != nil {
			return &ValidationError{Name: "push_id", err: fmt.Errorf(`ent: validator failed for field "Rider.push_id": %w`, err)}
		}
	}
	return nil
}

func (ruo *RiderUpdateOne) sqlSave(ctx context.Context) (_node *Rider, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rider.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rider.FieldID)
		for _, f := range fields {
			if !rider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldDeletedAt,
		})
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldDeletedAt,
		})
	}
	if ruo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: rider.FieldCreator,
		})
	}
	if value, ok := ruo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldLastModifier,
		})
	}
	if ruo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: rider.FieldLastModifier,
		})
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldRemark,
		})
	}
	if ruo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldRemark,
		})
	}
	if value, ok := ruo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPhone,
		})
	}
	if value, ok := ruo.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldContact,
		})
	}
	if ruo.mutation.ContactCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: rider.FieldContact,
		})
	}
	if value, ok := ruo.mutation.DeviceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
	}
	if value, ok := ruo.mutation.AddedDeviceType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
	}
	if ruo.mutation.DeviceTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Column: rider.FieldDeviceType,
		})
	}
	if value, ok := ruo.mutation.LastDevice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastDevice,
		})
	}
	if ruo.mutation.LastDeviceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldLastDevice,
		})
	}
	if value, ok := ruo.mutation.IsNewDevice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rider.FieldIsNewDevice,
		})
	}
	if value, ok := ruo.mutation.LastFace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastFace,
		})
	}
	if ruo.mutation.LastFaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldLastFace,
		})
	}
	if value, ok := ruo.mutation.PushID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPushID,
		})
	}
	if ruo.mutation.PushIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldPushID,
		})
	}
	if value, ok := ruo.mutation.LastSigninAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldLastSigninAt,
		})
	}
	if ruo.mutation.LastSigninAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldLastSigninAt,
		})
	}
	if value, ok := ruo.mutation.EsignAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldEsignAccountID,
		})
	}
	if ruo.mutation.EsignAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldEsignAccountID,
		})
	}
	if value, ok := ruo.mutation.PlanAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldPlanAt,
		})
	}
	if ruo.mutation.PlanAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldPlanAt,
		})
	}
	if value, ok := ruo.mutation.Blocked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rider.FieldBlocked,
		})
	}
	if ruo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rider.StationTable,
			Columns: []string{rider.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rider.StationTable,
			Columns: []string{rider.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedContractsIDs(); len(nodes) > 0 && !ruo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedFaultsIDs(); len(nodes) > 0 && !ruo.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FaultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !ruo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exchange.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedExchangesIDs(); len(nodes) > 0 && !ruo.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exchange.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SubscribesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSubscribesIDs(); len(nodes) > 0 && !ruo.mutation.SubscribesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SubscribesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.StocksTable,
			Columns: []string{rider.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedStocksIDs(); len(nodes) > 0 && !ruo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.StocksTable,
			Columns: []string{rider.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.StocksTable,
			Columns: []string{rider.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rider{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
