// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// RiderUpdate is the builder for updating Rider entities.
type RiderUpdate struct {
	config
	hooks    []Hook
	mutation *RiderMutation
}

// Where appends a list predicates to the RiderUpdate builder.
func (ru *RiderUpdate) Where(ps ...predicate.Rider) *RiderUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RiderUpdate) SetUpdatedAt(t time.Time) *RiderUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RiderUpdate) SetDeletedAt(t time.Time) *RiderUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableDeletedAt(t *time.Time) *RiderUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RiderUpdate) ClearDeletedAt() *RiderUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetLastModify sets the "last_modify" field.
func (ru *RiderUpdate) SetLastModify(t time.Time) *RiderUpdate {
	ru.mutation.SetLastModify(t)
	return ru
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableLastModify(t *time.Time) *RiderUpdate {
	if t != nil {
		ru.SetLastModify(*t)
	}
	return ru
}

// ClearLastModify clears the value of the "last_modify" field.
func (ru *RiderUpdate) ClearLastModify() *RiderUpdate {
	ru.mutation.ClearLastModify()
	return ru
}

// SetRemark sets the "remark" field.
func (ru *RiderUpdate) SetRemark(s string) *RiderUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableRemark(s *string) *RiderUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// ClearRemark clears the value of the "remark" field.
func (ru *RiderUpdate) ClearRemark() *RiderUpdate {
	ru.mutation.ClearRemark()
	return ru
}

// SetPersonID sets the "person_id" field.
func (ru *RiderUpdate) SetPersonID(u uint64) *RiderUpdate {
	ru.mutation.SetPersonID(u)
	return ru
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (ru *RiderUpdate) SetNillablePersonID(u *uint64) *RiderUpdate {
	if u != nil {
		ru.SetPersonID(*u)
	}
	return ru
}

// ClearPersonID clears the value of the "person_id" field.
func (ru *RiderUpdate) ClearPersonID() *RiderUpdate {
	ru.mutation.ClearPersonID()
	return ru
}

// SetPhone sets the "phone" field.
func (ru *RiderUpdate) SetPhone(s string) *RiderUpdate {
	ru.mutation.SetPhone(s)
	return ru
}

// SetContact sets the "contact" field.
func (ru *RiderUpdate) SetContact(mc *model.RiderContact) *RiderUpdate {
	ru.mutation.SetContact(mc)
	return ru
}

// ClearContact clears the value of the "contact" field.
func (ru *RiderUpdate) ClearContact() *RiderUpdate {
	ru.mutation.ClearContact()
	return ru
}

// SetDeviceType sets the "device_type" field.
func (ru *RiderUpdate) SetDeviceType(u uint8) *RiderUpdate {
	ru.mutation.ResetDeviceType()
	ru.mutation.SetDeviceType(u)
	return ru
}

// AddDeviceType adds u to the "device_type" field.
func (ru *RiderUpdate) AddDeviceType(u uint8) *RiderUpdate {
	ru.mutation.AddDeviceType(u)
	return ru
}

// SetLastDevice sets the "last_device" field.
func (ru *RiderUpdate) SetLastDevice(s string) *RiderUpdate {
	ru.mutation.SetLastDevice(s)
	return ru
}

// SetLastFace sets the "last_face" field.
func (ru *RiderUpdate) SetLastFace(s string) *RiderUpdate {
	ru.mutation.SetLastFace(s)
	return ru
}

// SetNillableLastFace sets the "last_face" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableLastFace(s *string) *RiderUpdate {
	if s != nil {
		ru.SetLastFace(*s)
	}
	return ru
}

// ClearLastFace clears the value of the "last_face" field.
func (ru *RiderUpdate) ClearLastFace() *RiderUpdate {
	ru.mutation.ClearLastFace()
	return ru
}

// SetPushID sets the "push_id" field.
func (ru *RiderUpdate) SetPushID(s string) *RiderUpdate {
	ru.mutation.SetPushID(s)
	return ru
}

// SetNillablePushID sets the "push_id" field if the given value is not nil.
func (ru *RiderUpdate) SetNillablePushID(s *string) *RiderUpdate {
	if s != nil {
		ru.SetPushID(*s)
	}
	return ru
}

// ClearPushID clears the value of the "push_id" field.
func (ru *RiderUpdate) ClearPushID() *RiderUpdate {
	ru.mutation.ClearPushID()
	return ru
}

// SetLastSigninAt sets the "last_signin_at" field.
func (ru *RiderUpdate) SetLastSigninAt(t time.Time) *RiderUpdate {
	ru.mutation.SetLastSigninAt(t)
	return ru
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (ru *RiderUpdate) SetNillableLastSigninAt(t *time.Time) *RiderUpdate {
	if t != nil {
		ru.SetLastSigninAt(*t)
	}
	return ru
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (ru *RiderUpdate) ClearLastSigninAt() *RiderUpdate {
	ru.mutation.ClearLastSigninAt()
	return ru
}

// SetPerson sets the "person" edge to the Person entity.
func (ru *RiderUpdate) SetPerson(p *Person) *RiderUpdate {
	return ru.SetPersonID(p.ID)
}

// Mutation returns the RiderMutation object of the builder.
func (ru *RiderUpdate) Mutation() *RiderMutation {
	return ru.mutation
}

// ClearPerson clears the "person" edge to the Person entity.
func (ru *RiderUpdate) ClearPerson() *RiderUpdate {
	ru.mutation.ClearPerson()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RiderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RiderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RiderUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RiderUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RiderUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RiderUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := rider.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RiderUpdate) check() error {
	if v, ok := ru.mutation.Phone(); ok {
		if err := rider.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := ru.mutation.LastDevice(); ok {
		if err := rider.LastDeviceValidator(v); err != nil {
			return &ValidationError{Name: "last_device", err: fmt.Errorf("ent: validator failed for field \"last_device\": %w", err)}
		}
	}
	if v, ok := ru.mutation.PushID(); ok {
		if err := rider.PushIDValidator(v); err != nil {
			return &ValidationError{Name: "push_id", err: fmt.Errorf("ent: validator failed for field \"push_id\": %w", err)}
		}
	}
	return nil
}

func (ru *RiderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldDeletedAt,
		})
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldDeletedAt,
		})
	}
	if value, ok := ru.mutation.LastModify(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldLastModify,
		})
	}
	if ru.mutation.LastModifyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldLastModify,
		})
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldRemark,
		})
	}
	if ru.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldRemark,
		})
	}
	if value, ok := ru.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPhone,
		})
	}
	if value, ok := ru.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldContact,
		})
	}
	if ru.mutation.ContactCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: rider.FieldContact,
		})
	}
	if value, ok := ru.mutation.DeviceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
	}
	if value, ok := ru.mutation.AddedDeviceType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
	}
	if value, ok := ru.mutation.LastDevice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastDevice,
		})
	}
	if value, ok := ru.mutation.LastFace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastFace,
		})
	}
	if ru.mutation.LastFaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldLastFace,
		})
	}
	if value, ok := ru.mutation.PushID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPushID,
		})
	}
	if ru.mutation.PushIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldPushID,
		})
	}
	if value, ok := ru.mutation.LastSigninAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldLastSigninAt,
		})
	}
	if ru.mutation.LastSigninAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldLastSigninAt,
		})
	}
	if ru.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RiderUpdateOne is the builder for updating a single Rider entity.
type RiderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RiderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RiderUpdateOne) SetUpdatedAt(t time.Time) *RiderUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RiderUpdateOne) SetDeletedAt(t time.Time) *RiderUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableDeletedAt(t *time.Time) *RiderUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RiderUpdateOne) ClearDeletedAt() *RiderUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetLastModify sets the "last_modify" field.
func (ruo *RiderUpdateOne) SetLastModify(t time.Time) *RiderUpdateOne {
	ruo.mutation.SetLastModify(t)
	return ruo
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableLastModify(t *time.Time) *RiderUpdateOne {
	if t != nil {
		ruo.SetLastModify(*t)
	}
	return ruo
}

// ClearLastModify clears the value of the "last_modify" field.
func (ruo *RiderUpdateOne) ClearLastModify() *RiderUpdateOne {
	ruo.mutation.ClearLastModify()
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *RiderUpdateOne) SetRemark(s string) *RiderUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableRemark(s *string) *RiderUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// ClearRemark clears the value of the "remark" field.
func (ruo *RiderUpdateOne) ClearRemark() *RiderUpdateOne {
	ruo.mutation.ClearRemark()
	return ruo
}

// SetPersonID sets the "person_id" field.
func (ruo *RiderUpdateOne) SetPersonID(u uint64) *RiderUpdateOne {
	ruo.mutation.SetPersonID(u)
	return ruo
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillablePersonID(u *uint64) *RiderUpdateOne {
	if u != nil {
		ruo.SetPersonID(*u)
	}
	return ruo
}

// ClearPersonID clears the value of the "person_id" field.
func (ruo *RiderUpdateOne) ClearPersonID() *RiderUpdateOne {
	ruo.mutation.ClearPersonID()
	return ruo
}

// SetPhone sets the "phone" field.
func (ruo *RiderUpdateOne) SetPhone(s string) *RiderUpdateOne {
	ruo.mutation.SetPhone(s)
	return ruo
}

// SetContact sets the "contact" field.
func (ruo *RiderUpdateOne) SetContact(mc *model.RiderContact) *RiderUpdateOne {
	ruo.mutation.SetContact(mc)
	return ruo
}

// ClearContact clears the value of the "contact" field.
func (ruo *RiderUpdateOne) ClearContact() *RiderUpdateOne {
	ruo.mutation.ClearContact()
	return ruo
}

// SetDeviceType sets the "device_type" field.
func (ruo *RiderUpdateOne) SetDeviceType(u uint8) *RiderUpdateOne {
	ruo.mutation.ResetDeviceType()
	ruo.mutation.SetDeviceType(u)
	return ruo
}

// AddDeviceType adds u to the "device_type" field.
func (ruo *RiderUpdateOne) AddDeviceType(u uint8) *RiderUpdateOne {
	ruo.mutation.AddDeviceType(u)
	return ruo
}

// SetLastDevice sets the "last_device" field.
func (ruo *RiderUpdateOne) SetLastDevice(s string) *RiderUpdateOne {
	ruo.mutation.SetLastDevice(s)
	return ruo
}

// SetLastFace sets the "last_face" field.
func (ruo *RiderUpdateOne) SetLastFace(s string) *RiderUpdateOne {
	ruo.mutation.SetLastFace(s)
	return ruo
}

// SetNillableLastFace sets the "last_face" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableLastFace(s *string) *RiderUpdateOne {
	if s != nil {
		ruo.SetLastFace(*s)
	}
	return ruo
}

// ClearLastFace clears the value of the "last_face" field.
func (ruo *RiderUpdateOne) ClearLastFace() *RiderUpdateOne {
	ruo.mutation.ClearLastFace()
	return ruo
}

// SetPushID sets the "push_id" field.
func (ruo *RiderUpdateOne) SetPushID(s string) *RiderUpdateOne {
	ruo.mutation.SetPushID(s)
	return ruo
}

// SetNillablePushID sets the "push_id" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillablePushID(s *string) *RiderUpdateOne {
	if s != nil {
		ruo.SetPushID(*s)
	}
	return ruo
}

// ClearPushID clears the value of the "push_id" field.
func (ruo *RiderUpdateOne) ClearPushID() *RiderUpdateOne {
	ruo.mutation.ClearPushID()
	return ruo
}

// SetLastSigninAt sets the "last_signin_at" field.
func (ruo *RiderUpdateOne) SetLastSigninAt(t time.Time) *RiderUpdateOne {
	ruo.mutation.SetLastSigninAt(t)
	return ruo
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (ruo *RiderUpdateOne) SetNillableLastSigninAt(t *time.Time) *RiderUpdateOne {
	if t != nil {
		ruo.SetLastSigninAt(*t)
	}
	return ruo
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (ruo *RiderUpdateOne) ClearLastSigninAt() *RiderUpdateOne {
	ruo.mutation.ClearLastSigninAt()
	return ruo
}

// SetPerson sets the "person" edge to the Person entity.
func (ruo *RiderUpdateOne) SetPerson(p *Person) *RiderUpdateOne {
	return ruo.SetPersonID(p.ID)
}

// Mutation returns the RiderMutation object of the builder.
func (ruo *RiderUpdateOne) Mutation() *RiderMutation {
	return ruo.mutation
}

// ClearPerson clears the "person" edge to the Person entity.
func (ruo *RiderUpdateOne) ClearPerson() *RiderUpdateOne {
	ruo.mutation.ClearPerson()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RiderUpdateOne) Select(field string, fields ...string) *RiderUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rider entity.
func (ruo *RiderUpdateOne) Save(ctx context.Context) (*Rider, error) {
	var (
		err  error
		node *Rider
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RiderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RiderUpdateOne) SaveX(ctx context.Context) *Rider {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RiderUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RiderUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RiderUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := rider.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RiderUpdateOne) check() error {
	if v, ok := ruo.mutation.Phone(); ok {
		if err := rider.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.LastDevice(); ok {
		if err := rider.LastDeviceValidator(v); err != nil {
			return &ValidationError{Name: "last_device", err: fmt.Errorf("ent: validator failed for field \"last_device\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.PushID(); ok {
		if err := rider.PushIDValidator(v); err != nil {
			return &ValidationError{Name: "push_id", err: fmt.Errorf("ent: validator failed for field \"push_id\": %w", err)}
		}
	}
	return nil
}

func (ruo *RiderUpdateOne) sqlSave(ctx context.Context) (_node *Rider, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rider.Table,
			Columns: rider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Rider.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rider.FieldID)
		for _, f := range fields {
			if !rider.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rider.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldDeletedAt,
		})
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldDeletedAt,
		})
	}
	if value, ok := ruo.mutation.LastModify(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldLastModify,
		})
	}
	if ruo.mutation.LastModifyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldLastModify,
		})
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldRemark,
		})
	}
	if ruo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldRemark,
		})
	}
	if value, ok := ruo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPhone,
		})
	}
	if value, ok := ruo.mutation.Contact(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldContact,
		})
	}
	if ruo.mutation.ContactCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: rider.FieldContact,
		})
	}
	if value, ok := ruo.mutation.DeviceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
	}
	if value, ok := ruo.mutation.AddedDeviceType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
	}
	if value, ok := ruo.mutation.LastDevice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastDevice,
		})
	}
	if value, ok := ruo.mutation.LastFace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastFace,
		})
	}
	if ruo.mutation.LastFaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldLastFace,
		})
	}
	if value, ok := ruo.mutation.PushID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPushID,
		})
	}
	if ruo.mutation.PushIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rider.FieldPushID,
		})
	}
	if value, ok := ruo.mutation.LastSigninAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldLastSigninAt,
		})
	}
	if ruo.mutation.LastSigninAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: rider.FieldLastSigninAt,
		})
	}
	if ruo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rider{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rider.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
