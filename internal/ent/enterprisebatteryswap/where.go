// Code generated by ent, DO NOT EDIT.

package enterprisebatteryswap

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldUpdatedAt, v))
}

// ExchangeID applies equality check predicate on the "exchange_id" field. It's identical to ExchangeIDEQ.
func ExchangeID(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldExchangeID, v))
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldCabinetID, v))
}

// PutinBatteryID applies equality check predicate on the "putin_battery_id" field. It's identical to PutinBatteryIDEQ.
func PutinBatteryID(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutinBatteryID, v))
}

// PutinBatterySn applies equality check predicate on the "putin_battery_sn" field. It's identical to PutinBatterySnEQ.
func PutinBatterySn(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutinBatterySn, v))
}

// PutinEnterpriseID applies equality check predicate on the "putin_enterprise_id" field. It's identical to PutinEnterpriseIDEQ.
func PutinEnterpriseID(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutinEnterpriseID, v))
}

// PutinStationID applies equality check predicate on the "putin_station_id" field. It's identical to PutinStationIDEQ.
func PutinStationID(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutinStationID, v))
}

// PutoutBatteryID applies equality check predicate on the "putout_battery_id" field. It's identical to PutoutBatteryIDEQ.
func PutoutBatteryID(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutoutBatteryID, v))
}

// PutoutBatterySn applies equality check predicate on the "putout_battery_sn" field. It's identical to PutoutBatterySnEQ.
func PutoutBatterySn(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutoutBatterySn, v))
}

// PutoutEnterpriseID applies equality check predicate on the "putout_enterprise_id" field. It's identical to PutoutEnterpriseIDEQ.
func PutoutEnterpriseID(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutoutEnterpriseID, v))
}

// PutoutStationID applies equality check predicate on the "putout_station_id" field. It's identical to PutoutStationIDEQ.
func PutoutStationID(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutoutStationID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLTE(FieldUpdatedAt, v))
}

// ExchangeIDEQ applies the EQ predicate on the "exchange_id" field.
func ExchangeIDEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldExchangeID, v))
}

// ExchangeIDNEQ applies the NEQ predicate on the "exchange_id" field.
func ExchangeIDNEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldExchangeID, v))
}

// ExchangeIDIn applies the In predicate on the "exchange_id" field.
func ExchangeIDIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldExchangeID, vs...))
}

// ExchangeIDNotIn applies the NotIn predicate on the "exchange_id" field.
func ExchangeIDNotIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldExchangeID, vs...))
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldCabinetID, v))
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldCabinetID, v))
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldCabinetID, vs...))
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldCabinetID, vs...))
}

// PutinBatteryIDEQ applies the EQ predicate on the "putin_battery_id" field.
func PutinBatteryIDEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutinBatteryID, v))
}

// PutinBatteryIDNEQ applies the NEQ predicate on the "putin_battery_id" field.
func PutinBatteryIDNEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldPutinBatteryID, v))
}

// PutinBatteryIDIn applies the In predicate on the "putin_battery_id" field.
func PutinBatteryIDIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldPutinBatteryID, vs...))
}

// PutinBatteryIDNotIn applies the NotIn predicate on the "putin_battery_id" field.
func PutinBatteryIDNotIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldPutinBatteryID, vs...))
}

// PutinBatterySnEQ applies the EQ predicate on the "putin_battery_sn" field.
func PutinBatterySnEQ(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutinBatterySn, v))
}

// PutinBatterySnNEQ applies the NEQ predicate on the "putin_battery_sn" field.
func PutinBatterySnNEQ(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldPutinBatterySn, v))
}

// PutinBatterySnIn applies the In predicate on the "putin_battery_sn" field.
func PutinBatterySnIn(vs ...string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldPutinBatterySn, vs...))
}

// PutinBatterySnNotIn applies the NotIn predicate on the "putin_battery_sn" field.
func PutinBatterySnNotIn(vs ...string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldPutinBatterySn, vs...))
}

// PutinBatterySnGT applies the GT predicate on the "putin_battery_sn" field.
func PutinBatterySnGT(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGT(FieldPutinBatterySn, v))
}

// PutinBatterySnGTE applies the GTE predicate on the "putin_battery_sn" field.
func PutinBatterySnGTE(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGTE(FieldPutinBatterySn, v))
}

// PutinBatterySnLT applies the LT predicate on the "putin_battery_sn" field.
func PutinBatterySnLT(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLT(FieldPutinBatterySn, v))
}

// PutinBatterySnLTE applies the LTE predicate on the "putin_battery_sn" field.
func PutinBatterySnLTE(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLTE(FieldPutinBatterySn, v))
}

// PutinBatterySnContains applies the Contains predicate on the "putin_battery_sn" field.
func PutinBatterySnContains(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldContains(FieldPutinBatterySn, v))
}

// PutinBatterySnHasPrefix applies the HasPrefix predicate on the "putin_battery_sn" field.
func PutinBatterySnHasPrefix(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldHasPrefix(FieldPutinBatterySn, v))
}

// PutinBatterySnHasSuffix applies the HasSuffix predicate on the "putin_battery_sn" field.
func PutinBatterySnHasSuffix(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldHasSuffix(FieldPutinBatterySn, v))
}

// PutinBatterySnEqualFold applies the EqualFold predicate on the "putin_battery_sn" field.
func PutinBatterySnEqualFold(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEqualFold(FieldPutinBatterySn, v))
}

// PutinBatterySnContainsFold applies the ContainsFold predicate on the "putin_battery_sn" field.
func PutinBatterySnContainsFold(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldContainsFold(FieldPutinBatterySn, v))
}

// PutinEnterpriseIDEQ applies the EQ predicate on the "putin_enterprise_id" field.
func PutinEnterpriseIDEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutinEnterpriseID, v))
}

// PutinEnterpriseIDNEQ applies the NEQ predicate on the "putin_enterprise_id" field.
func PutinEnterpriseIDNEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldPutinEnterpriseID, v))
}

// PutinEnterpriseIDIn applies the In predicate on the "putin_enterprise_id" field.
func PutinEnterpriseIDIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldPutinEnterpriseID, vs...))
}

// PutinEnterpriseIDNotIn applies the NotIn predicate on the "putin_enterprise_id" field.
func PutinEnterpriseIDNotIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldPutinEnterpriseID, vs...))
}

// PutinEnterpriseIDIsNil applies the IsNil predicate on the "putin_enterprise_id" field.
func PutinEnterpriseIDIsNil() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIsNull(FieldPutinEnterpriseID))
}

// PutinEnterpriseIDNotNil applies the NotNil predicate on the "putin_enterprise_id" field.
func PutinEnterpriseIDNotNil() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotNull(FieldPutinEnterpriseID))
}

// PutinStationIDEQ applies the EQ predicate on the "putin_station_id" field.
func PutinStationIDEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutinStationID, v))
}

// PutinStationIDNEQ applies the NEQ predicate on the "putin_station_id" field.
func PutinStationIDNEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldPutinStationID, v))
}

// PutinStationIDIn applies the In predicate on the "putin_station_id" field.
func PutinStationIDIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldPutinStationID, vs...))
}

// PutinStationIDNotIn applies the NotIn predicate on the "putin_station_id" field.
func PutinStationIDNotIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldPutinStationID, vs...))
}

// PutinStationIDIsNil applies the IsNil predicate on the "putin_station_id" field.
func PutinStationIDIsNil() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIsNull(FieldPutinStationID))
}

// PutinStationIDNotNil applies the NotNil predicate on the "putin_station_id" field.
func PutinStationIDNotNil() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotNull(FieldPutinStationID))
}

// PutoutBatteryIDEQ applies the EQ predicate on the "putout_battery_id" field.
func PutoutBatteryIDEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutoutBatteryID, v))
}

// PutoutBatteryIDNEQ applies the NEQ predicate on the "putout_battery_id" field.
func PutoutBatteryIDNEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldPutoutBatteryID, v))
}

// PutoutBatteryIDIn applies the In predicate on the "putout_battery_id" field.
func PutoutBatteryIDIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldPutoutBatteryID, vs...))
}

// PutoutBatteryIDNotIn applies the NotIn predicate on the "putout_battery_id" field.
func PutoutBatteryIDNotIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldPutoutBatteryID, vs...))
}

// PutoutBatterySnEQ applies the EQ predicate on the "putout_battery_sn" field.
func PutoutBatterySnEQ(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutoutBatterySn, v))
}

// PutoutBatterySnNEQ applies the NEQ predicate on the "putout_battery_sn" field.
func PutoutBatterySnNEQ(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldPutoutBatterySn, v))
}

// PutoutBatterySnIn applies the In predicate on the "putout_battery_sn" field.
func PutoutBatterySnIn(vs ...string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldPutoutBatterySn, vs...))
}

// PutoutBatterySnNotIn applies the NotIn predicate on the "putout_battery_sn" field.
func PutoutBatterySnNotIn(vs ...string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldPutoutBatterySn, vs...))
}

// PutoutBatterySnGT applies the GT predicate on the "putout_battery_sn" field.
func PutoutBatterySnGT(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGT(FieldPutoutBatterySn, v))
}

// PutoutBatterySnGTE applies the GTE predicate on the "putout_battery_sn" field.
func PutoutBatterySnGTE(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldGTE(FieldPutoutBatterySn, v))
}

// PutoutBatterySnLT applies the LT predicate on the "putout_battery_sn" field.
func PutoutBatterySnLT(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLT(FieldPutoutBatterySn, v))
}

// PutoutBatterySnLTE applies the LTE predicate on the "putout_battery_sn" field.
func PutoutBatterySnLTE(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldLTE(FieldPutoutBatterySn, v))
}

// PutoutBatterySnContains applies the Contains predicate on the "putout_battery_sn" field.
func PutoutBatterySnContains(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldContains(FieldPutoutBatterySn, v))
}

// PutoutBatterySnHasPrefix applies the HasPrefix predicate on the "putout_battery_sn" field.
func PutoutBatterySnHasPrefix(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldHasPrefix(FieldPutoutBatterySn, v))
}

// PutoutBatterySnHasSuffix applies the HasSuffix predicate on the "putout_battery_sn" field.
func PutoutBatterySnHasSuffix(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldHasSuffix(FieldPutoutBatterySn, v))
}

// PutoutBatterySnEqualFold applies the EqualFold predicate on the "putout_battery_sn" field.
func PutoutBatterySnEqualFold(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEqualFold(FieldPutoutBatterySn, v))
}

// PutoutBatterySnContainsFold applies the ContainsFold predicate on the "putout_battery_sn" field.
func PutoutBatterySnContainsFold(v string) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldContainsFold(FieldPutoutBatterySn, v))
}

// PutoutEnterpriseIDEQ applies the EQ predicate on the "putout_enterprise_id" field.
func PutoutEnterpriseIDEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutoutEnterpriseID, v))
}

// PutoutEnterpriseIDNEQ applies the NEQ predicate on the "putout_enterprise_id" field.
func PutoutEnterpriseIDNEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldPutoutEnterpriseID, v))
}

// PutoutEnterpriseIDIn applies the In predicate on the "putout_enterprise_id" field.
func PutoutEnterpriseIDIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldPutoutEnterpriseID, vs...))
}

// PutoutEnterpriseIDNotIn applies the NotIn predicate on the "putout_enterprise_id" field.
func PutoutEnterpriseIDNotIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldPutoutEnterpriseID, vs...))
}

// PutoutEnterpriseIDIsNil applies the IsNil predicate on the "putout_enterprise_id" field.
func PutoutEnterpriseIDIsNil() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIsNull(FieldPutoutEnterpriseID))
}

// PutoutEnterpriseIDNotNil applies the NotNil predicate on the "putout_enterprise_id" field.
func PutoutEnterpriseIDNotNil() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotNull(FieldPutoutEnterpriseID))
}

// PutoutStationIDEQ applies the EQ predicate on the "putout_station_id" field.
func PutoutStationIDEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldEQ(FieldPutoutStationID, v))
}

// PutoutStationIDNEQ applies the NEQ predicate on the "putout_station_id" field.
func PutoutStationIDNEQ(v uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNEQ(FieldPutoutStationID, v))
}

// PutoutStationIDIn applies the In predicate on the "putout_station_id" field.
func PutoutStationIDIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIn(FieldPutoutStationID, vs...))
}

// PutoutStationIDNotIn applies the NotIn predicate on the "putout_station_id" field.
func PutoutStationIDNotIn(vs ...uint64) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotIn(FieldPutoutStationID, vs...))
}

// PutoutStationIDIsNil applies the IsNil predicate on the "putout_station_id" field.
func PutoutStationIDIsNil() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldIsNull(FieldPutoutStationID))
}

// PutoutStationIDNotNil applies the NotNil predicate on the "putout_station_id" field.
func PutoutStationIDNotNil() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(sql.FieldNotNull(FieldPutoutStationID))
}

// HasExchange applies the HasEdge predicate on the "exchange" edge.
func HasExchange() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ExchangeTable, ExchangeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExchangeWith applies the HasEdge predicate on the "exchange" edge with a given conditions (other predicates).
func HasExchangeWith(preds ...predicate.Exchange) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := newExchangeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := newCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPutinBattery applies the HasEdge predicate on the "putin_battery" edge.
func HasPutinBattery() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PutinBatteryTable, PutinBatteryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPutinBatteryWith applies the HasEdge predicate on the "putin_battery" edge with a given conditions (other predicates).
func HasPutinBatteryWith(preds ...predicate.Battery) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := newPutinBatteryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPutinEnterprise applies the HasEdge predicate on the "putin_enterprise" edge.
func HasPutinEnterprise() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PutinEnterpriseTable, PutinEnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPutinEnterpriseWith applies the HasEdge predicate on the "putin_enterprise" edge with a given conditions (other predicates).
func HasPutinEnterpriseWith(preds ...predicate.Enterprise) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := newPutinEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPutinStation applies the HasEdge predicate on the "putin_station" edge.
func HasPutinStation() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PutinStationTable, PutinStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPutinStationWith applies the HasEdge predicate on the "putin_station" edge with a given conditions (other predicates).
func HasPutinStationWith(preds ...predicate.EnterpriseStation) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := newPutinStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPutoutBattery applies the HasEdge predicate on the "putout_battery" edge.
func HasPutoutBattery() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PutoutBatteryTable, PutoutBatteryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPutoutBatteryWith applies the HasEdge predicate on the "putout_battery" edge with a given conditions (other predicates).
func HasPutoutBatteryWith(preds ...predicate.Battery) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := newPutoutBatteryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPutoutEnterprise applies the HasEdge predicate on the "putout_enterprise" edge.
func HasPutoutEnterprise() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PutoutEnterpriseTable, PutoutEnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPutoutEnterpriseWith applies the HasEdge predicate on the "putout_enterprise" edge with a given conditions (other predicates).
func HasPutoutEnterpriseWith(preds ...predicate.Enterprise) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := newPutoutEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPutoutStation applies the HasEdge predicate on the "putout_station" edge.
func HasPutoutStation() predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PutoutStationTable, PutoutStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPutoutStationWith applies the HasEdge predicate on the "putout_station" edge with a given conditions (other predicates).
func HasPutoutStationWith(preds ...predicate.EnterpriseStation) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		step := newPutoutStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EnterpriseBatterySwap) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EnterpriseBatterySwap) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EnterpriseBatterySwap) predicate.EnterpriseBatterySwap {
	return predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		p(s.Not())
	})
}
