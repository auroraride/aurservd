// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EnterpriseUpdate is the builder for updating Enterprise entities.
type EnterpriseUpdate struct {
	config
	hooks    []Hook
	mutation *EnterpriseMutation
}

// Where appends a list predicates to the EnterpriseUpdate builder.
func (eu *EnterpriseUpdate) Where(ps ...predicate.Enterprise) *EnterpriseUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EnterpriseUpdate) SetUpdatedAt(t time.Time) *EnterpriseUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EnterpriseUpdate) SetDeletedAt(t time.Time) *EnterpriseUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EnterpriseUpdate) SetNillableDeletedAt(t *time.Time) *EnterpriseUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EnterpriseUpdate) ClearDeletedAt() *EnterpriseUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetLastModifier sets the "last_modifier" field.
func (eu *EnterpriseUpdate) SetLastModifier(m *model.Modifier) *EnterpriseUpdate {
	eu.mutation.SetLastModifier(m)
	return eu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (eu *EnterpriseUpdate) ClearLastModifier() *EnterpriseUpdate {
	eu.mutation.ClearLastModifier()
	return eu
}

// SetRemark sets the "remark" field.
func (eu *EnterpriseUpdate) SetRemark(s string) *EnterpriseUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eu *EnterpriseUpdate) SetNillableRemark(s *string) *EnterpriseUpdate {
	if s != nil {
		eu.SetRemark(*s)
	}
	return eu
}

// ClearRemark clears the value of the "remark" field.
func (eu *EnterpriseUpdate) ClearRemark() *EnterpriseUpdate {
	eu.mutation.ClearRemark()
	return eu
}

// SetCityID sets the "city_id" field.
func (eu *EnterpriseUpdate) SetCityID(u uint64) *EnterpriseUpdate {
	eu.mutation.SetCityID(u)
	return eu
}

// SetName sets the "name" field.
func (eu *EnterpriseUpdate) SetName(s string) *EnterpriseUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetCompanyName sets the "company_name" field.
func (eu *EnterpriseUpdate) SetCompanyName(s string) *EnterpriseUpdate {
	eu.mutation.SetCompanyName(s)
	return eu
}

// SetStatus sets the "status" field.
func (eu *EnterpriseUpdate) SetStatus(u uint8) *EnterpriseUpdate {
	eu.mutation.ResetStatus()
	eu.mutation.SetStatus(u)
	return eu
}

// AddStatus adds u to the "status" field.
func (eu *EnterpriseUpdate) AddStatus(u int8) *EnterpriseUpdate {
	eu.mutation.AddStatus(u)
	return eu
}

// SetContactName sets the "contact_name" field.
func (eu *EnterpriseUpdate) SetContactName(s string) *EnterpriseUpdate {
	eu.mutation.SetContactName(s)
	return eu
}

// SetContactPhone sets the "contact_phone" field.
func (eu *EnterpriseUpdate) SetContactPhone(s string) *EnterpriseUpdate {
	eu.mutation.SetContactPhone(s)
	return eu
}

// SetIdcardNumber sets the "idcard_number" field.
func (eu *EnterpriseUpdate) SetIdcardNumber(s string) *EnterpriseUpdate {
	eu.mutation.SetIdcardNumber(s)
	return eu
}

// SetAddress sets the "address" field.
func (eu *EnterpriseUpdate) SetAddress(s string) *EnterpriseUpdate {
	eu.mutation.SetAddress(s)
	return eu
}

// SetPayment sets the "payment" field.
func (eu *EnterpriseUpdate) SetPayment(u uint8) *EnterpriseUpdate {
	eu.mutation.ResetPayment()
	eu.mutation.SetPayment(u)
	return eu
}

// AddPayment adds u to the "payment" field.
func (eu *EnterpriseUpdate) AddPayment(u int8) *EnterpriseUpdate {
	eu.mutation.AddPayment(u)
	return eu
}

// SetDeposit sets the "deposit" field.
func (eu *EnterpriseUpdate) SetDeposit(f float64) *EnterpriseUpdate {
	eu.mutation.ResetDeposit()
	eu.mutation.SetDeposit(f)
	return eu
}

// SetNillableDeposit sets the "deposit" field if the given value is not nil.
func (eu *EnterpriseUpdate) SetNillableDeposit(f *float64) *EnterpriseUpdate {
	if f != nil {
		eu.SetDeposit(*f)
	}
	return eu
}

// AddDeposit adds f to the "deposit" field.
func (eu *EnterpriseUpdate) AddDeposit(f float64) *EnterpriseUpdate {
	eu.mutation.AddDeposit(f)
	return eu
}

// SetBalance sets the "balance" field.
func (eu *EnterpriseUpdate) SetBalance(f float64) *EnterpriseUpdate {
	eu.mutation.ResetBalance()
	eu.mutation.SetBalance(f)
	return eu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (eu *EnterpriseUpdate) SetNillableBalance(f *float64) *EnterpriseUpdate {
	if f != nil {
		eu.SetBalance(*f)
	}
	return eu
}

// AddBalance adds f to the "balance" field.
func (eu *EnterpriseUpdate) AddBalance(f float64) *EnterpriseUpdate {
	eu.mutation.AddBalance(f)
	return eu
}

// SetPrepaymentTotal sets the "prepayment_total" field.
func (eu *EnterpriseUpdate) SetPrepaymentTotal(f float64) *EnterpriseUpdate {
	eu.mutation.ResetPrepaymentTotal()
	eu.mutation.SetPrepaymentTotal(f)
	return eu
}

// SetNillablePrepaymentTotal sets the "prepayment_total" field if the given value is not nil.
func (eu *EnterpriseUpdate) SetNillablePrepaymentTotal(f *float64) *EnterpriseUpdate {
	if f != nil {
		eu.SetPrepaymentTotal(*f)
	}
	return eu
}

// AddPrepaymentTotal adds f to the "prepayment_total" field.
func (eu *EnterpriseUpdate) AddPrepaymentTotal(f float64) *EnterpriseUpdate {
	eu.mutation.AddPrepaymentTotal(f)
	return eu
}

// SetSuspensedAt sets the "suspensed_at" field.
func (eu *EnterpriseUpdate) SetSuspensedAt(t time.Time) *EnterpriseUpdate {
	eu.mutation.SetSuspensedAt(t)
	return eu
}

// SetNillableSuspensedAt sets the "suspensed_at" field if the given value is not nil.
func (eu *EnterpriseUpdate) SetNillableSuspensedAt(t *time.Time) *EnterpriseUpdate {
	if t != nil {
		eu.SetSuspensedAt(*t)
	}
	return eu
}

// ClearSuspensedAt clears the value of the "suspensed_at" field.
func (eu *EnterpriseUpdate) ClearSuspensedAt() *EnterpriseUpdate {
	eu.mutation.ClearSuspensedAt()
	return eu
}

// SetCity sets the "city" edge to the City entity.
func (eu *EnterpriseUpdate) SetCity(c *City) *EnterpriseUpdate {
	return eu.SetCityID(c.ID)
}

// AddRiderIDs adds the "riders" edge to the Rider entity by IDs.
func (eu *EnterpriseUpdate) AddRiderIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.AddRiderIDs(ids...)
	return eu
}

// AddRiders adds the "riders" edges to the Rider entity.
func (eu *EnterpriseUpdate) AddRiders(r ...*Rider) *EnterpriseUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRiderIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the EnterpriseContract entity by IDs.
func (eu *EnterpriseUpdate) AddContractIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.AddContractIDs(ids...)
	return eu
}

// AddContracts adds the "contracts" edges to the EnterpriseContract entity.
func (eu *EnterpriseUpdate) AddContracts(e ...*EnterpriseContract) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddContractIDs(ids...)
}

// AddPriceIDs adds the "prices" edge to the EnterprisePrice entity by IDs.
func (eu *EnterpriseUpdate) AddPriceIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.AddPriceIDs(ids...)
	return eu
}

// AddPrices adds the "prices" edges to the EnterprisePrice entity.
func (eu *EnterpriseUpdate) AddPrices(e ...*EnterprisePrice) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddPriceIDs(ids...)
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by IDs.
func (eu *EnterpriseUpdate) AddSubscribeIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.AddSubscribeIDs(ids...)
	return eu
}

// AddSubscribes adds the "subscribes" edges to the Subscribe entity.
func (eu *EnterpriseUpdate) AddSubscribes(s ...*Subscribe) *EnterpriseUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSubscribeIDs(ids...)
}

// AddStatementIDs adds the "statements" edge to the EnterpriseStatement entity by IDs.
func (eu *EnterpriseUpdate) AddStatementIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.AddStatementIDs(ids...)
	return eu
}

// AddStatements adds the "statements" edges to the EnterpriseStatement entity.
func (eu *EnterpriseUpdate) AddStatements(e ...*EnterpriseStatement) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddStatementIDs(ids...)
}

// AddStationIDs adds the "stations" edge to the EnterpriseStation entity by IDs.
func (eu *EnterpriseUpdate) AddStationIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.AddStationIDs(ids...)
	return eu
}

// AddStations adds the "stations" edges to the EnterpriseStation entity.
func (eu *EnterpriseUpdate) AddStations(e ...*EnterpriseStation) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddStationIDs(ids...)
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by IDs.
func (eu *EnterpriseUpdate) AddBillIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.AddBillIDs(ids...)
	return eu
}

// AddBills adds the "bills" edges to the EnterpriseBill entity.
func (eu *EnterpriseUpdate) AddBills(e ...*EnterpriseBill) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddBillIDs(ids...)
}

// Mutation returns the EnterpriseMutation object of the builder.
func (eu *EnterpriseUpdate) Mutation() *EnterpriseMutation {
	return eu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (eu *EnterpriseUpdate) ClearCity() *EnterpriseUpdate {
	eu.mutation.ClearCity()
	return eu
}

// ClearRiders clears all "riders" edges to the Rider entity.
func (eu *EnterpriseUpdate) ClearRiders() *EnterpriseUpdate {
	eu.mutation.ClearRiders()
	return eu
}

// RemoveRiderIDs removes the "riders" edge to Rider entities by IDs.
func (eu *EnterpriseUpdate) RemoveRiderIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.RemoveRiderIDs(ids...)
	return eu
}

// RemoveRiders removes "riders" edges to Rider entities.
func (eu *EnterpriseUpdate) RemoveRiders(r ...*Rider) *EnterpriseUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRiderIDs(ids...)
}

// ClearContracts clears all "contracts" edges to the EnterpriseContract entity.
func (eu *EnterpriseUpdate) ClearContracts() *EnterpriseUpdate {
	eu.mutation.ClearContracts()
	return eu
}

// RemoveContractIDs removes the "contracts" edge to EnterpriseContract entities by IDs.
func (eu *EnterpriseUpdate) RemoveContractIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.RemoveContractIDs(ids...)
	return eu
}

// RemoveContracts removes "contracts" edges to EnterpriseContract entities.
func (eu *EnterpriseUpdate) RemoveContracts(e ...*EnterpriseContract) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveContractIDs(ids...)
}

// ClearPrices clears all "prices" edges to the EnterprisePrice entity.
func (eu *EnterpriseUpdate) ClearPrices() *EnterpriseUpdate {
	eu.mutation.ClearPrices()
	return eu
}

// RemovePriceIDs removes the "prices" edge to EnterprisePrice entities by IDs.
func (eu *EnterpriseUpdate) RemovePriceIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.RemovePriceIDs(ids...)
	return eu
}

// RemovePrices removes "prices" edges to EnterprisePrice entities.
func (eu *EnterpriseUpdate) RemovePrices(e ...*EnterprisePrice) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemovePriceIDs(ids...)
}

// ClearSubscribes clears all "subscribes" edges to the Subscribe entity.
func (eu *EnterpriseUpdate) ClearSubscribes() *EnterpriseUpdate {
	eu.mutation.ClearSubscribes()
	return eu
}

// RemoveSubscribeIDs removes the "subscribes" edge to Subscribe entities by IDs.
func (eu *EnterpriseUpdate) RemoveSubscribeIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.RemoveSubscribeIDs(ids...)
	return eu
}

// RemoveSubscribes removes "subscribes" edges to Subscribe entities.
func (eu *EnterpriseUpdate) RemoveSubscribes(s ...*Subscribe) *EnterpriseUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSubscribeIDs(ids...)
}

// ClearStatements clears all "statements" edges to the EnterpriseStatement entity.
func (eu *EnterpriseUpdate) ClearStatements() *EnterpriseUpdate {
	eu.mutation.ClearStatements()
	return eu
}

// RemoveStatementIDs removes the "statements" edge to EnterpriseStatement entities by IDs.
func (eu *EnterpriseUpdate) RemoveStatementIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.RemoveStatementIDs(ids...)
	return eu
}

// RemoveStatements removes "statements" edges to EnterpriseStatement entities.
func (eu *EnterpriseUpdate) RemoveStatements(e ...*EnterpriseStatement) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveStatementIDs(ids...)
}

// ClearStations clears all "stations" edges to the EnterpriseStation entity.
func (eu *EnterpriseUpdate) ClearStations() *EnterpriseUpdate {
	eu.mutation.ClearStations()
	return eu
}

// RemoveStationIDs removes the "stations" edge to EnterpriseStation entities by IDs.
func (eu *EnterpriseUpdate) RemoveStationIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.RemoveStationIDs(ids...)
	return eu
}

// RemoveStations removes "stations" edges to EnterpriseStation entities.
func (eu *EnterpriseUpdate) RemoveStations(e ...*EnterpriseStation) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveStationIDs(ids...)
}

// ClearBills clears all "bills" edges to the EnterpriseBill entity.
func (eu *EnterpriseUpdate) ClearBills() *EnterpriseUpdate {
	eu.mutation.ClearBills()
	return eu
}

// RemoveBillIDs removes the "bills" edge to EnterpriseBill entities by IDs.
func (eu *EnterpriseUpdate) RemoveBillIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.RemoveBillIDs(ids...)
	return eu
}

// RemoveBills removes "bills" edges to EnterpriseBill entities.
func (eu *EnterpriseUpdate) RemoveBills(e ...*EnterpriseBill) *EnterpriseUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveBillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnterpriseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnterpriseUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnterpriseUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnterpriseUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EnterpriseUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if enterprise.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprise.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprise.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EnterpriseUpdate) check() error {
	if _, ok := eu.mutation.CityID(); eu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Enterprise.city"`)
	}
	return nil
}

func (eu *EnterpriseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprise.Table,
			Columns: enterprise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprise.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldDeletedAt,
		})
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprise.FieldDeletedAt,
		})
	}
	if eu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprise.FieldCreator,
		})
	}
	if value, ok := eu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprise.FieldLastModifier,
		})
	}
	if eu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprise.FieldLastModifier,
		})
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldRemark,
		})
	}
	if eu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprise.FieldRemark,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldName,
		})
	}
	if value, ok := eu.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldCompanyName,
		})
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: enterprise.FieldStatus,
		})
	}
	if value, ok := eu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: enterprise.FieldStatus,
		})
	}
	if value, ok := eu.mutation.ContactName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldContactName,
		})
	}
	if value, ok := eu.mutation.ContactPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldContactPhone,
		})
	}
	if value, ok := eu.mutation.IdcardNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldIdcardNumber,
		})
	}
	if value, ok := eu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldAddress,
		})
	}
	if value, ok := eu.mutation.Payment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: enterprise.FieldPayment,
		})
	}
	if value, ok := eu.mutation.AddedPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: enterprise.FieldPayment,
		})
	}
	if value, ok := eu.mutation.Deposit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldDeposit,
		})
	}
	if value, ok := eu.mutation.AddedDeposit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldDeposit,
		})
	}
	if value, ok := eu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldBalance,
		})
	}
	if value, ok := eu.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldBalance,
		})
	}
	if value, ok := eu.mutation.PrepaymentTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldPrepaymentTotal,
		})
	}
	if value, ok := eu.mutation.AddedPrepaymentTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldPrepaymentTotal,
		})
	}
	if value, ok := eu.mutation.SuspensedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldSuspensedAt,
		})
	}
	if eu.mutation.SuspensedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprise.FieldSuspensedAt,
		})
	}
	if eu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprise.CityTable,
			Columns: []string{enterprise.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprise.CityTable,
			Columns: []string{enterprise.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRidersIDs(); len(nodes) > 0 && !eu.mutation.RidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.ContractsTable,
			Columns: []string{enterprise.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisecontract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedContractsIDs(); len(nodes) > 0 && !eu.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.ContractsTable,
			Columns: []string{enterprise.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisecontract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.ContractsTable,
			Columns: []string{enterprise.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisecontract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.PricesTable,
			Columns: []string{enterprise.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterpriseprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPricesIDs(); len(nodes) > 0 && !eu.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.PricesTable,
			Columns: []string{enterprise.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterpriseprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.PricesTable,
			Columns: []string{enterprise.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterpriseprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SubscribesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SubscribesTable,
			Columns: []string{enterprise.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSubscribesIDs(); len(nodes) > 0 && !eu.mutation.SubscribesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SubscribesTable,
			Columns: []string{enterprise.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SubscribesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SubscribesTable,
			Columns: []string{enterprise.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StatementsTable,
			Columns: []string{enterprise.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedStatementsIDs(); len(nodes) > 0 && !eu.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StatementsTable,
			Columns: []string{enterprise.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StatementsTable,
			Columns: []string{enterprise.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StationsTable,
			Columns: []string{enterprise.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedStationsIDs(); len(nodes) > 0 && !eu.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StationsTable,
			Columns: []string{enterprise.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StationsTable,
			Columns: []string{enterprise.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BillsTable,
			Columns: []string{enterprise.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedBillsIDs(); len(nodes) > 0 && !eu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BillsTable,
			Columns: []string{enterprise.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BillsTable,
			Columns: []string{enterprise.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EnterpriseUpdateOne is the builder for updating a single Enterprise entity.
type EnterpriseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnterpriseMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EnterpriseUpdateOne) SetUpdatedAt(t time.Time) *EnterpriseUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EnterpriseUpdateOne) SetDeletedAt(t time.Time) *EnterpriseUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EnterpriseUpdateOne) SetNillableDeletedAt(t *time.Time) *EnterpriseUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EnterpriseUpdateOne) ClearDeletedAt() *EnterpriseUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetLastModifier sets the "last_modifier" field.
func (euo *EnterpriseUpdateOne) SetLastModifier(m *model.Modifier) *EnterpriseUpdateOne {
	euo.mutation.SetLastModifier(m)
	return euo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (euo *EnterpriseUpdateOne) ClearLastModifier() *EnterpriseUpdateOne {
	euo.mutation.ClearLastModifier()
	return euo
}

// SetRemark sets the "remark" field.
func (euo *EnterpriseUpdateOne) SetRemark(s string) *EnterpriseUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (euo *EnterpriseUpdateOne) SetNillableRemark(s *string) *EnterpriseUpdateOne {
	if s != nil {
		euo.SetRemark(*s)
	}
	return euo
}

// ClearRemark clears the value of the "remark" field.
func (euo *EnterpriseUpdateOne) ClearRemark() *EnterpriseUpdateOne {
	euo.mutation.ClearRemark()
	return euo
}

// SetCityID sets the "city_id" field.
func (euo *EnterpriseUpdateOne) SetCityID(u uint64) *EnterpriseUpdateOne {
	euo.mutation.SetCityID(u)
	return euo
}

// SetName sets the "name" field.
func (euo *EnterpriseUpdateOne) SetName(s string) *EnterpriseUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetCompanyName sets the "company_name" field.
func (euo *EnterpriseUpdateOne) SetCompanyName(s string) *EnterpriseUpdateOne {
	euo.mutation.SetCompanyName(s)
	return euo
}

// SetStatus sets the "status" field.
func (euo *EnterpriseUpdateOne) SetStatus(u uint8) *EnterpriseUpdateOne {
	euo.mutation.ResetStatus()
	euo.mutation.SetStatus(u)
	return euo
}

// AddStatus adds u to the "status" field.
func (euo *EnterpriseUpdateOne) AddStatus(u int8) *EnterpriseUpdateOne {
	euo.mutation.AddStatus(u)
	return euo
}

// SetContactName sets the "contact_name" field.
func (euo *EnterpriseUpdateOne) SetContactName(s string) *EnterpriseUpdateOne {
	euo.mutation.SetContactName(s)
	return euo
}

// SetContactPhone sets the "contact_phone" field.
func (euo *EnterpriseUpdateOne) SetContactPhone(s string) *EnterpriseUpdateOne {
	euo.mutation.SetContactPhone(s)
	return euo
}

// SetIdcardNumber sets the "idcard_number" field.
func (euo *EnterpriseUpdateOne) SetIdcardNumber(s string) *EnterpriseUpdateOne {
	euo.mutation.SetIdcardNumber(s)
	return euo
}

// SetAddress sets the "address" field.
func (euo *EnterpriseUpdateOne) SetAddress(s string) *EnterpriseUpdateOne {
	euo.mutation.SetAddress(s)
	return euo
}

// SetPayment sets the "payment" field.
func (euo *EnterpriseUpdateOne) SetPayment(u uint8) *EnterpriseUpdateOne {
	euo.mutation.ResetPayment()
	euo.mutation.SetPayment(u)
	return euo
}

// AddPayment adds u to the "payment" field.
func (euo *EnterpriseUpdateOne) AddPayment(u int8) *EnterpriseUpdateOne {
	euo.mutation.AddPayment(u)
	return euo
}

// SetDeposit sets the "deposit" field.
func (euo *EnterpriseUpdateOne) SetDeposit(f float64) *EnterpriseUpdateOne {
	euo.mutation.ResetDeposit()
	euo.mutation.SetDeposit(f)
	return euo
}

// SetNillableDeposit sets the "deposit" field if the given value is not nil.
func (euo *EnterpriseUpdateOne) SetNillableDeposit(f *float64) *EnterpriseUpdateOne {
	if f != nil {
		euo.SetDeposit(*f)
	}
	return euo
}

// AddDeposit adds f to the "deposit" field.
func (euo *EnterpriseUpdateOne) AddDeposit(f float64) *EnterpriseUpdateOne {
	euo.mutation.AddDeposit(f)
	return euo
}

// SetBalance sets the "balance" field.
func (euo *EnterpriseUpdateOne) SetBalance(f float64) *EnterpriseUpdateOne {
	euo.mutation.ResetBalance()
	euo.mutation.SetBalance(f)
	return euo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (euo *EnterpriseUpdateOne) SetNillableBalance(f *float64) *EnterpriseUpdateOne {
	if f != nil {
		euo.SetBalance(*f)
	}
	return euo
}

// AddBalance adds f to the "balance" field.
func (euo *EnterpriseUpdateOne) AddBalance(f float64) *EnterpriseUpdateOne {
	euo.mutation.AddBalance(f)
	return euo
}

// SetPrepaymentTotal sets the "prepayment_total" field.
func (euo *EnterpriseUpdateOne) SetPrepaymentTotal(f float64) *EnterpriseUpdateOne {
	euo.mutation.ResetPrepaymentTotal()
	euo.mutation.SetPrepaymentTotal(f)
	return euo
}

// SetNillablePrepaymentTotal sets the "prepayment_total" field if the given value is not nil.
func (euo *EnterpriseUpdateOne) SetNillablePrepaymentTotal(f *float64) *EnterpriseUpdateOne {
	if f != nil {
		euo.SetPrepaymentTotal(*f)
	}
	return euo
}

// AddPrepaymentTotal adds f to the "prepayment_total" field.
func (euo *EnterpriseUpdateOne) AddPrepaymentTotal(f float64) *EnterpriseUpdateOne {
	euo.mutation.AddPrepaymentTotal(f)
	return euo
}

// SetSuspensedAt sets the "suspensed_at" field.
func (euo *EnterpriseUpdateOne) SetSuspensedAt(t time.Time) *EnterpriseUpdateOne {
	euo.mutation.SetSuspensedAt(t)
	return euo
}

// SetNillableSuspensedAt sets the "suspensed_at" field if the given value is not nil.
func (euo *EnterpriseUpdateOne) SetNillableSuspensedAt(t *time.Time) *EnterpriseUpdateOne {
	if t != nil {
		euo.SetSuspensedAt(*t)
	}
	return euo
}

// ClearSuspensedAt clears the value of the "suspensed_at" field.
func (euo *EnterpriseUpdateOne) ClearSuspensedAt() *EnterpriseUpdateOne {
	euo.mutation.ClearSuspensedAt()
	return euo
}

// SetCity sets the "city" edge to the City entity.
func (euo *EnterpriseUpdateOne) SetCity(c *City) *EnterpriseUpdateOne {
	return euo.SetCityID(c.ID)
}

// AddRiderIDs adds the "riders" edge to the Rider entity by IDs.
func (euo *EnterpriseUpdateOne) AddRiderIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.AddRiderIDs(ids...)
	return euo
}

// AddRiders adds the "riders" edges to the Rider entity.
func (euo *EnterpriseUpdateOne) AddRiders(r ...*Rider) *EnterpriseUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRiderIDs(ids...)
}

// AddContractIDs adds the "contracts" edge to the EnterpriseContract entity by IDs.
func (euo *EnterpriseUpdateOne) AddContractIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.AddContractIDs(ids...)
	return euo
}

// AddContracts adds the "contracts" edges to the EnterpriseContract entity.
func (euo *EnterpriseUpdateOne) AddContracts(e ...*EnterpriseContract) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddContractIDs(ids...)
}

// AddPriceIDs adds the "prices" edge to the EnterprisePrice entity by IDs.
func (euo *EnterpriseUpdateOne) AddPriceIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.AddPriceIDs(ids...)
	return euo
}

// AddPrices adds the "prices" edges to the EnterprisePrice entity.
func (euo *EnterpriseUpdateOne) AddPrices(e ...*EnterprisePrice) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddPriceIDs(ids...)
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by IDs.
func (euo *EnterpriseUpdateOne) AddSubscribeIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.AddSubscribeIDs(ids...)
	return euo
}

// AddSubscribes adds the "subscribes" edges to the Subscribe entity.
func (euo *EnterpriseUpdateOne) AddSubscribes(s ...*Subscribe) *EnterpriseUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSubscribeIDs(ids...)
}

// AddStatementIDs adds the "statements" edge to the EnterpriseStatement entity by IDs.
func (euo *EnterpriseUpdateOne) AddStatementIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.AddStatementIDs(ids...)
	return euo
}

// AddStatements adds the "statements" edges to the EnterpriseStatement entity.
func (euo *EnterpriseUpdateOne) AddStatements(e ...*EnterpriseStatement) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddStatementIDs(ids...)
}

// AddStationIDs adds the "stations" edge to the EnterpriseStation entity by IDs.
func (euo *EnterpriseUpdateOne) AddStationIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.AddStationIDs(ids...)
	return euo
}

// AddStations adds the "stations" edges to the EnterpriseStation entity.
func (euo *EnterpriseUpdateOne) AddStations(e ...*EnterpriseStation) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddStationIDs(ids...)
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by IDs.
func (euo *EnterpriseUpdateOne) AddBillIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.AddBillIDs(ids...)
	return euo
}

// AddBills adds the "bills" edges to the EnterpriseBill entity.
func (euo *EnterpriseUpdateOne) AddBills(e ...*EnterpriseBill) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddBillIDs(ids...)
}

// Mutation returns the EnterpriseMutation object of the builder.
func (euo *EnterpriseUpdateOne) Mutation() *EnterpriseMutation {
	return euo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (euo *EnterpriseUpdateOne) ClearCity() *EnterpriseUpdateOne {
	euo.mutation.ClearCity()
	return euo
}

// ClearRiders clears all "riders" edges to the Rider entity.
func (euo *EnterpriseUpdateOne) ClearRiders() *EnterpriseUpdateOne {
	euo.mutation.ClearRiders()
	return euo
}

// RemoveRiderIDs removes the "riders" edge to Rider entities by IDs.
func (euo *EnterpriseUpdateOne) RemoveRiderIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.RemoveRiderIDs(ids...)
	return euo
}

// RemoveRiders removes "riders" edges to Rider entities.
func (euo *EnterpriseUpdateOne) RemoveRiders(r ...*Rider) *EnterpriseUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRiderIDs(ids...)
}

// ClearContracts clears all "contracts" edges to the EnterpriseContract entity.
func (euo *EnterpriseUpdateOne) ClearContracts() *EnterpriseUpdateOne {
	euo.mutation.ClearContracts()
	return euo
}

// RemoveContractIDs removes the "contracts" edge to EnterpriseContract entities by IDs.
func (euo *EnterpriseUpdateOne) RemoveContractIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.RemoveContractIDs(ids...)
	return euo
}

// RemoveContracts removes "contracts" edges to EnterpriseContract entities.
func (euo *EnterpriseUpdateOne) RemoveContracts(e ...*EnterpriseContract) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveContractIDs(ids...)
}

// ClearPrices clears all "prices" edges to the EnterprisePrice entity.
func (euo *EnterpriseUpdateOne) ClearPrices() *EnterpriseUpdateOne {
	euo.mutation.ClearPrices()
	return euo
}

// RemovePriceIDs removes the "prices" edge to EnterprisePrice entities by IDs.
func (euo *EnterpriseUpdateOne) RemovePriceIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.RemovePriceIDs(ids...)
	return euo
}

// RemovePrices removes "prices" edges to EnterprisePrice entities.
func (euo *EnterpriseUpdateOne) RemovePrices(e ...*EnterprisePrice) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemovePriceIDs(ids...)
}

// ClearSubscribes clears all "subscribes" edges to the Subscribe entity.
func (euo *EnterpriseUpdateOne) ClearSubscribes() *EnterpriseUpdateOne {
	euo.mutation.ClearSubscribes()
	return euo
}

// RemoveSubscribeIDs removes the "subscribes" edge to Subscribe entities by IDs.
func (euo *EnterpriseUpdateOne) RemoveSubscribeIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.RemoveSubscribeIDs(ids...)
	return euo
}

// RemoveSubscribes removes "subscribes" edges to Subscribe entities.
func (euo *EnterpriseUpdateOne) RemoveSubscribes(s ...*Subscribe) *EnterpriseUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSubscribeIDs(ids...)
}

// ClearStatements clears all "statements" edges to the EnterpriseStatement entity.
func (euo *EnterpriseUpdateOne) ClearStatements() *EnterpriseUpdateOne {
	euo.mutation.ClearStatements()
	return euo
}

// RemoveStatementIDs removes the "statements" edge to EnterpriseStatement entities by IDs.
func (euo *EnterpriseUpdateOne) RemoveStatementIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.RemoveStatementIDs(ids...)
	return euo
}

// RemoveStatements removes "statements" edges to EnterpriseStatement entities.
func (euo *EnterpriseUpdateOne) RemoveStatements(e ...*EnterpriseStatement) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveStatementIDs(ids...)
}

// ClearStations clears all "stations" edges to the EnterpriseStation entity.
func (euo *EnterpriseUpdateOne) ClearStations() *EnterpriseUpdateOne {
	euo.mutation.ClearStations()
	return euo
}

// RemoveStationIDs removes the "stations" edge to EnterpriseStation entities by IDs.
func (euo *EnterpriseUpdateOne) RemoveStationIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.RemoveStationIDs(ids...)
	return euo
}

// RemoveStations removes "stations" edges to EnterpriseStation entities.
func (euo *EnterpriseUpdateOne) RemoveStations(e ...*EnterpriseStation) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveStationIDs(ids...)
}

// ClearBills clears all "bills" edges to the EnterpriseBill entity.
func (euo *EnterpriseUpdateOne) ClearBills() *EnterpriseUpdateOne {
	euo.mutation.ClearBills()
	return euo
}

// RemoveBillIDs removes the "bills" edge to EnterpriseBill entities by IDs.
func (euo *EnterpriseUpdateOne) RemoveBillIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.RemoveBillIDs(ids...)
	return euo
}

// RemoveBills removes "bills" edges to EnterpriseBill entities.
func (euo *EnterpriseUpdateOne) RemoveBills(e ...*EnterpriseBill) *EnterpriseUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveBillIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnterpriseUpdateOne) Select(field string, fields ...string) *EnterpriseUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Enterprise entity.
func (euo *EnterpriseUpdateOne) Save(ctx context.Context) (*Enterprise, error) {
	var (
		err  error
		node *Enterprise
	)
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Enterprise)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnterpriseUpdateOne) SaveX(ctx context.Context) *Enterprise {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnterpriseUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnterpriseUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EnterpriseUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if enterprise.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprise.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprise.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EnterpriseUpdateOne) check() error {
	if _, ok := euo.mutation.CityID(); euo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Enterprise.city"`)
	}
	return nil
}

func (euo *EnterpriseUpdateOne) sqlSave(ctx context.Context) (_node *Enterprise, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprise.Table,
			Columns: enterprise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprise.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Enterprise.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprise.FieldID)
		for _, f := range fields {
			if !enterprise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterprise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldDeletedAt,
		})
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprise.FieldDeletedAt,
		})
	}
	if euo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprise.FieldCreator,
		})
	}
	if value, ok := euo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprise.FieldLastModifier,
		})
	}
	if euo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprise.FieldLastModifier,
		})
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldRemark,
		})
	}
	if euo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprise.FieldRemark,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldName,
		})
	}
	if value, ok := euo.mutation.CompanyName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldCompanyName,
		})
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: enterprise.FieldStatus,
		})
	}
	if value, ok := euo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: enterprise.FieldStatus,
		})
	}
	if value, ok := euo.mutation.ContactName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldContactName,
		})
	}
	if value, ok := euo.mutation.ContactPhone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldContactPhone,
		})
	}
	if value, ok := euo.mutation.IdcardNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldIdcardNumber,
		})
	}
	if value, ok := euo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldAddress,
		})
	}
	if value, ok := euo.mutation.Payment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: enterprise.FieldPayment,
		})
	}
	if value, ok := euo.mutation.AddedPayment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: enterprise.FieldPayment,
		})
	}
	if value, ok := euo.mutation.Deposit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldDeposit,
		})
	}
	if value, ok := euo.mutation.AddedDeposit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldDeposit,
		})
	}
	if value, ok := euo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldBalance,
		})
	}
	if value, ok := euo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldBalance,
		})
	}
	if value, ok := euo.mutation.PrepaymentTotal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldPrepaymentTotal,
		})
	}
	if value, ok := euo.mutation.AddedPrepaymentTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprise.FieldPrepaymentTotal,
		})
	}
	if value, ok := euo.mutation.SuspensedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldSuspensedAt,
		})
	}
	if euo.mutation.SuspensedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprise.FieldSuspensedAt,
		})
	}
	if euo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprise.CityTable,
			Columns: []string{enterprise.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprise.CityTable,
			Columns: []string{enterprise.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRidersIDs(); len(nodes) > 0 && !euo.mutation.RidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.ContractsTable,
			Columns: []string{enterprise.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisecontract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedContractsIDs(); len(nodes) > 0 && !euo.mutation.ContractsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.ContractsTable,
			Columns: []string{enterprise.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisecontract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.ContractsTable,
			Columns: []string{enterprise.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisecontract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.PricesTable,
			Columns: []string{enterprise.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterpriseprice.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPricesIDs(); len(nodes) > 0 && !euo.mutation.PricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.PricesTable,
			Columns: []string{enterprise.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterpriseprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.PricesTable,
			Columns: []string{enterprise.PricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterpriseprice.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SubscribesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SubscribesTable,
			Columns: []string{enterprise.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSubscribesIDs(); len(nodes) > 0 && !euo.mutation.SubscribesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SubscribesTable,
			Columns: []string{enterprise.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SubscribesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.SubscribesTable,
			Columns: []string{enterprise.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StatementsTable,
			Columns: []string{enterprise.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedStatementsIDs(); len(nodes) > 0 && !euo.mutation.StatementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StatementsTable,
			Columns: []string{enterprise.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StatementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StatementsTable,
			Columns: []string{enterprise.StatementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StationsTable,
			Columns: []string{enterprise.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedStationsIDs(); len(nodes) > 0 && !euo.mutation.StationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StationsTable,
			Columns: []string{enterprise.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.StationsTable,
			Columns: []string{enterprise.StationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BillsTable,
			Columns: []string{enterprise.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !euo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BillsTable,
			Columns: []string{enterprise.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.BillsTable,
			Columns: []string{enterprise.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Enterprise{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
