// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// EnterpriseUpdate is the builder for updating Enterprise entities.
type EnterpriseUpdate struct {
	config
	hooks    []Hook
	mutation *EnterpriseMutation
}

// Where appends a list predicates to the EnterpriseUpdate builder.
func (eu *EnterpriseUpdate) Where(ps ...predicate.Enterprise) *EnterpriseUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EnterpriseUpdate) SetUpdatedAt(t time.Time) *EnterpriseUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetDeletedAt sets the "deleted_at" field.
func (eu *EnterpriseUpdate) SetDeletedAt(t time.Time) *EnterpriseUpdate {
	eu.mutation.SetDeletedAt(t)
	return eu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eu *EnterpriseUpdate) SetNillableDeletedAt(t *time.Time) *EnterpriseUpdate {
	if t != nil {
		eu.SetDeletedAt(*t)
	}
	return eu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eu *EnterpriseUpdate) ClearDeletedAt() *EnterpriseUpdate {
	eu.mutation.ClearDeletedAt()
	return eu
}

// SetLastModifier sets the "last_modifier" field.
func (eu *EnterpriseUpdate) SetLastModifier(m *model.Modifier) *EnterpriseUpdate {
	eu.mutation.SetLastModifier(m)
	return eu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (eu *EnterpriseUpdate) ClearLastModifier() *EnterpriseUpdate {
	eu.mutation.ClearLastModifier()
	return eu
}

// SetRemark sets the "remark" field.
func (eu *EnterpriseUpdate) SetRemark(s string) *EnterpriseUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eu *EnterpriseUpdate) SetNillableRemark(s *string) *EnterpriseUpdate {
	if s != nil {
		eu.SetRemark(*s)
	}
	return eu
}

// ClearRemark clears the value of the "remark" field.
func (eu *EnterpriseUpdate) ClearRemark() *EnterpriseUpdate {
	eu.mutation.ClearRemark()
	return eu
}

// SetName sets the "name" field.
func (eu *EnterpriseUpdate) SetName(s string) *EnterpriseUpdate {
	eu.mutation.SetName(s)
	return eu
}

// AddRiderIDs adds the "riders" edge to the Rider entity by IDs.
func (eu *EnterpriseUpdate) AddRiderIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.AddRiderIDs(ids...)
	return eu
}

// AddRiders adds the "riders" edges to the Rider entity.
func (eu *EnterpriseUpdate) AddRiders(r ...*Rider) *EnterpriseUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.AddRiderIDs(ids...)
}

// Mutation returns the EnterpriseMutation object of the builder.
func (eu *EnterpriseUpdate) Mutation() *EnterpriseMutation {
	return eu.mutation
}

// ClearRiders clears all "riders" edges to the Rider entity.
func (eu *EnterpriseUpdate) ClearRiders() *EnterpriseUpdate {
	eu.mutation.ClearRiders()
	return eu
}

// RemoveRiderIDs removes the "riders" edge to Rider entities by IDs.
func (eu *EnterpriseUpdate) RemoveRiderIDs(ids ...uint64) *EnterpriseUpdate {
	eu.mutation.RemoveRiderIDs(ids...)
	return eu
}

// RemoveRiders removes "riders" edges to Rider entities.
func (eu *EnterpriseUpdate) RemoveRiders(r ...*Rider) *EnterpriseUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return eu.RemoveRiderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnterpriseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnterpriseUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnterpriseUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnterpriseUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EnterpriseUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if enterprise.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprise.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprise.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (eu *EnterpriseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprise.Table,
			Columns: enterprise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprise.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldDeletedAt,
		})
	}
	if eu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprise.FieldDeletedAt,
		})
	}
	if eu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprise.FieldCreator,
		})
	}
	if value, ok := eu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprise.FieldLastModifier,
		})
	}
	if eu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprise.FieldLastModifier,
		})
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldRemark,
		})
	}
	if eu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprise.FieldRemark,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldName,
		})
	}
	if eu.mutation.RidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedRidersIDs(); len(nodes) > 0 && !eu.mutation.RidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EnterpriseUpdateOne is the builder for updating a single Enterprise entity.
type EnterpriseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnterpriseMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EnterpriseUpdateOne) SetUpdatedAt(t time.Time) *EnterpriseUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetDeletedAt sets the "deleted_at" field.
func (euo *EnterpriseUpdateOne) SetDeletedAt(t time.Time) *EnterpriseUpdateOne {
	euo.mutation.SetDeletedAt(t)
	return euo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (euo *EnterpriseUpdateOne) SetNillableDeletedAt(t *time.Time) *EnterpriseUpdateOne {
	if t != nil {
		euo.SetDeletedAt(*t)
	}
	return euo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (euo *EnterpriseUpdateOne) ClearDeletedAt() *EnterpriseUpdateOne {
	euo.mutation.ClearDeletedAt()
	return euo
}

// SetLastModifier sets the "last_modifier" field.
func (euo *EnterpriseUpdateOne) SetLastModifier(m *model.Modifier) *EnterpriseUpdateOne {
	euo.mutation.SetLastModifier(m)
	return euo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (euo *EnterpriseUpdateOne) ClearLastModifier() *EnterpriseUpdateOne {
	euo.mutation.ClearLastModifier()
	return euo
}

// SetRemark sets the "remark" field.
func (euo *EnterpriseUpdateOne) SetRemark(s string) *EnterpriseUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (euo *EnterpriseUpdateOne) SetNillableRemark(s *string) *EnterpriseUpdateOne {
	if s != nil {
		euo.SetRemark(*s)
	}
	return euo
}

// ClearRemark clears the value of the "remark" field.
func (euo *EnterpriseUpdateOne) ClearRemark() *EnterpriseUpdateOne {
	euo.mutation.ClearRemark()
	return euo
}

// SetName sets the "name" field.
func (euo *EnterpriseUpdateOne) SetName(s string) *EnterpriseUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// AddRiderIDs adds the "riders" edge to the Rider entity by IDs.
func (euo *EnterpriseUpdateOne) AddRiderIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.AddRiderIDs(ids...)
	return euo
}

// AddRiders adds the "riders" edges to the Rider entity.
func (euo *EnterpriseUpdateOne) AddRiders(r ...*Rider) *EnterpriseUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.AddRiderIDs(ids...)
}

// Mutation returns the EnterpriseMutation object of the builder.
func (euo *EnterpriseUpdateOne) Mutation() *EnterpriseMutation {
	return euo.mutation
}

// ClearRiders clears all "riders" edges to the Rider entity.
func (euo *EnterpriseUpdateOne) ClearRiders() *EnterpriseUpdateOne {
	euo.mutation.ClearRiders()
	return euo
}

// RemoveRiderIDs removes the "riders" edge to Rider entities by IDs.
func (euo *EnterpriseUpdateOne) RemoveRiderIDs(ids ...uint64) *EnterpriseUpdateOne {
	euo.mutation.RemoveRiderIDs(ids...)
	return euo
}

// RemoveRiders removes "riders" edges to Rider entities.
func (euo *EnterpriseUpdateOne) RemoveRiders(r ...*Rider) *EnterpriseUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return euo.RemoveRiderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnterpriseUpdateOne) Select(field string, fields ...string) *EnterpriseUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Enterprise entity.
func (euo *EnterpriseUpdateOne) Save(ctx context.Context) (*Enterprise, error) {
	var (
		err  error
		node *Enterprise
	)
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Enterprise)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnterpriseUpdateOne) SaveX(ctx context.Context) *Enterprise {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnterpriseUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnterpriseUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EnterpriseUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if enterprise.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprise.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprise.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (euo *EnterpriseUpdateOne) sqlSave(ctx context.Context) (_node *Enterprise, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprise.Table,
			Columns: enterprise.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprise.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Enterprise.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprise.FieldID)
		for _, f := range fields {
			if !enterprise.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterprise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprise.FieldDeletedAt,
		})
	}
	if euo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprise.FieldDeletedAt,
		})
	}
	if euo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprise.FieldCreator,
		})
	}
	if value, ok := euo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprise.FieldLastModifier,
		})
	}
	if euo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprise.FieldLastModifier,
		})
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldRemark,
		})
	}
	if euo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprise.FieldRemark,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprise.FieldName,
		})
	}
	if euo.mutation.RidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedRidersIDs(); len(nodes) > 0 && !euo.mutation.RidersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RidersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprise.RidersTable,
			Columns: []string{enterprise.RidersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Enterprise{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprise.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
