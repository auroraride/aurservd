// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/exception"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// ExceptionMutation represents an operation that mutates the Exception nodes in the graph.
type ExceptionMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	created_at      *time.Time
	updated_at      *time.Time
	deleted_at      *time.Time
	creator         **model.Modifier
	last_modifier   **model.Modifier
	remark          *string
	status          *uint8
	addstatus       *int8
	name            *string
	model           *string
	num             *int
	addnum          *int
	reason          *string
	description     *string
	attachments     *[]string
	clearedFields   map[string]struct{}
	city            *uint64
	clearedcity     bool
	employee        *uint64
	clearedemployee bool
	store           *uint64
	clearedstore    bool
	done            bool
	oldValue        func(context.Context) (*Exception, error)
	predicates      []predicate.Exception
}

var _ ent.Mutation = (*ExceptionMutation)(nil)

// exceptionOption allows management of the mutation configuration using functional options.
type exceptionOption func(*ExceptionMutation)

// newExceptionMutation creates new mutation for the Exception entity.
func newExceptionMutation(c config, op Op, opts ...exceptionOption) *ExceptionMutation {
	m := &ExceptionMutation{
		config:        c,
		op:            op,
		typ:           TypeException,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExceptionID sets the ID field of the mutation.
func withExceptionID(id uint64) exceptionOption {
	return func(m *ExceptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Exception
		)
		m.oldValue = func(ctx context.Context) (*Exception, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Exception.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withException sets the old Exception of the mutation.
func withException(node *Exception) exceptionOption {
	return func(m *ExceptionMutation) {
		m.oldValue = func(context.Context) (*Exception, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExceptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExceptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExceptionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExceptionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Exception.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExceptionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExceptionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExceptionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExceptionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExceptionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExceptionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExceptionMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExceptionMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ExceptionMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[exception.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ExceptionMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[exception.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExceptionMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, exception.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *ExceptionMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *ExceptionMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *ExceptionMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[exception.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *ExceptionMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[exception.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *ExceptionMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, exception.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *ExceptionMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *ExceptionMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *ExceptionMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[exception.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *ExceptionMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[exception.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *ExceptionMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, exception.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *ExceptionMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ExceptionMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *ExceptionMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[exception.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *ExceptionMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[exception.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *ExceptionMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, exception.FieldRemark)
}

// SetCityID sets the "city_id" field.
func (m *ExceptionMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *ExceptionMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *ExceptionMutation) ResetCityID() {
	m.city = nil
}

// SetEmployeeID sets the "employee_id" field.
func (m *ExceptionMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *ExceptionMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldEmployeeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *ExceptionMutation) ResetEmployeeID() {
	m.employee = nil
}

// SetStatus sets the "status" field.
func (m *ExceptionMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ExceptionMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ExceptionMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ExceptionMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ExceptionMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetStoreID sets the "store_id" field.
func (m *ExceptionMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *ExceptionMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldStoreID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *ExceptionMutation) ResetStoreID() {
	m.store = nil
}

// SetName sets the "name" field.
func (m *ExceptionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExceptionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExceptionMutation) ResetName() {
	m.name = nil
}

// SetModel sets the "model" field.
func (m *ExceptionMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *ExceptionMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldModel(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ClearModel clears the value of the "model" field.
func (m *ExceptionMutation) ClearModel() {
	m.model = nil
	m.clearedFields[exception.FieldModel] = struct{}{}
}

// ModelCleared returns if the "model" field was cleared in this mutation.
func (m *ExceptionMutation) ModelCleared() bool {
	_, ok := m.clearedFields[exception.FieldModel]
	return ok
}

// ResetModel resets all changes to the "model" field.
func (m *ExceptionMutation) ResetModel() {
	m.model = nil
	delete(m.clearedFields, exception.FieldModel)
}

// SetNum sets the "num" field.
func (m *ExceptionMutation) SetNum(i int) {
	m.num = &i
	m.addnum = nil
}

// Num returns the value of the "num" field in the mutation.
func (m *ExceptionMutation) Num() (r int, exists bool) {
	v := m.num
	if v == nil {
		return
	}
	return *v, true
}

// OldNum returns the old "num" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldNum(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNum: %w", err)
	}
	return oldValue.Num, nil
}

// AddNum adds i to the "num" field.
func (m *ExceptionMutation) AddNum(i int) {
	if m.addnum != nil {
		*m.addnum += i
	} else {
		m.addnum = &i
	}
}

// AddedNum returns the value that was added to the "num" field in this mutation.
func (m *ExceptionMutation) AddedNum() (r int, exists bool) {
	v := m.addnum
	if v == nil {
		return
	}
	return *v, true
}

// ResetNum resets all changes to the "num" field.
func (m *ExceptionMutation) ResetNum() {
	m.num = nil
	m.addnum = nil
}

// SetReason sets the "reason" field.
func (m *ExceptionMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *ExceptionMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ResetReason resets all changes to the "reason" field.
func (m *ExceptionMutation) ResetReason() {
	m.reason = nil
}

// SetDescription sets the "description" field.
func (m *ExceptionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ExceptionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ExceptionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[exception.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ExceptionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[exception.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ExceptionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, exception.FieldDescription)
}

// SetAttachments sets the "attachments" field.
func (m *ExceptionMutation) SetAttachments(s []string) {
	m.attachments = &s
}

// Attachments returns the value of the "attachments" field in the mutation.
func (m *ExceptionMutation) Attachments() (r []string, exists bool) {
	v := m.attachments
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachments returns the old "attachments" field's value of the Exception entity.
// If the Exception object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExceptionMutation) OldAttachments(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachments: %w", err)
	}
	return oldValue.Attachments, nil
}

// ClearAttachments clears the value of the "attachments" field.
func (m *ExceptionMutation) ClearAttachments() {
	m.attachments = nil
	m.clearedFields[exception.FieldAttachments] = struct{}{}
}

// AttachmentsCleared returns if the "attachments" field was cleared in this mutation.
func (m *ExceptionMutation) AttachmentsCleared() bool {
	_, ok := m.clearedFields[exception.FieldAttachments]
	return ok
}

// ResetAttachments resets all changes to the "attachments" field.
func (m *ExceptionMutation) ResetAttachments() {
	m.attachments = nil
	delete(m.clearedFields, exception.FieldAttachments)
}

// ClearCity clears the "city" edge to the City entity.
func (m *ExceptionMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *ExceptionMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *ExceptionMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *ExceptionMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *ExceptionMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *ExceptionMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *ExceptionMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *ExceptionMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *ExceptionMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *ExceptionMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *ExceptionMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *ExceptionMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// Where appends a list predicates to the ExceptionMutation builder.
func (m *ExceptionMutation) Where(ps ...predicate.Exception) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ExceptionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Exception).
func (m *ExceptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExceptionMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, exception.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exception.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, exception.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, exception.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, exception.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, exception.FieldRemark)
	}
	if m.city != nil {
		fields = append(fields, exception.FieldCityID)
	}
	if m.employee != nil {
		fields = append(fields, exception.FieldEmployeeID)
	}
	if m.status != nil {
		fields = append(fields, exception.FieldStatus)
	}
	if m.store != nil {
		fields = append(fields, exception.FieldStoreID)
	}
	if m.name != nil {
		fields = append(fields, exception.FieldName)
	}
	if m.model != nil {
		fields = append(fields, exception.FieldModel)
	}
	if m.num != nil {
		fields = append(fields, exception.FieldNum)
	}
	if m.reason != nil {
		fields = append(fields, exception.FieldReason)
	}
	if m.description != nil {
		fields = append(fields, exception.FieldDescription)
	}
	if m.attachments != nil {
		fields = append(fields, exception.FieldAttachments)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExceptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exception.FieldCreatedAt:
		return m.CreatedAt()
	case exception.FieldUpdatedAt:
		return m.UpdatedAt()
	case exception.FieldDeletedAt:
		return m.DeletedAt()
	case exception.FieldCreator:
		return m.Creator()
	case exception.FieldLastModifier:
		return m.LastModifier()
	case exception.FieldRemark:
		return m.Remark()
	case exception.FieldCityID:
		return m.CityID()
	case exception.FieldEmployeeID:
		return m.EmployeeID()
	case exception.FieldStatus:
		return m.Status()
	case exception.FieldStoreID:
		return m.StoreID()
	case exception.FieldName:
		return m.Name()
	case exception.FieldModel:
		return m.Model()
	case exception.FieldNum:
		return m.Num()
	case exception.FieldReason:
		return m.Reason()
	case exception.FieldDescription:
		return m.Description()
	case exception.FieldAttachments:
		return m.Attachments()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExceptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exception.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exception.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case exception.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case exception.FieldCreator:
		return m.OldCreator(ctx)
	case exception.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case exception.FieldRemark:
		return m.OldRemark(ctx)
	case exception.FieldCityID:
		return m.OldCityID(ctx)
	case exception.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case exception.FieldStatus:
		return m.OldStatus(ctx)
	case exception.FieldStoreID:
		return m.OldStoreID(ctx)
	case exception.FieldName:
		return m.OldName(ctx)
	case exception.FieldModel:
		return m.OldModel(ctx)
	case exception.FieldNum:
		return m.OldNum(ctx)
	case exception.FieldReason:
		return m.OldReason(ctx)
	case exception.FieldDescription:
		return m.OldDescription(ctx)
	case exception.FieldAttachments:
		return m.OldAttachments(ctx)
	}
	return nil, fmt.Errorf("unknown Exception field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExceptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exception.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exception.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case exception.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case exception.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case exception.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case exception.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case exception.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case exception.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case exception.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case exception.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case exception.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case exception.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case exception.FieldNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNum(v)
		return nil
	case exception.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case exception.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case exception.FieldAttachments:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachments(v)
		return nil
	}
	return fmt.Errorf("unknown Exception field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExceptionMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, exception.FieldStatus)
	}
	if m.addnum != nil {
		fields = append(fields, exception.FieldNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExceptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exception.FieldStatus:
		return m.AddedStatus()
	case exception.FieldNum:
		return m.AddedNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExceptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exception.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case exception.FieldNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNum(v)
		return nil
	}
	return fmt.Errorf("unknown Exception numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExceptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exception.FieldDeletedAt) {
		fields = append(fields, exception.FieldDeletedAt)
	}
	if m.FieldCleared(exception.FieldCreator) {
		fields = append(fields, exception.FieldCreator)
	}
	if m.FieldCleared(exception.FieldLastModifier) {
		fields = append(fields, exception.FieldLastModifier)
	}
	if m.FieldCleared(exception.FieldRemark) {
		fields = append(fields, exception.FieldRemark)
	}
	if m.FieldCleared(exception.FieldModel) {
		fields = append(fields, exception.FieldModel)
	}
	if m.FieldCleared(exception.FieldDescription) {
		fields = append(fields, exception.FieldDescription)
	}
	if m.FieldCleared(exception.FieldAttachments) {
		fields = append(fields, exception.FieldAttachments)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExceptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExceptionMutation) ClearField(name string) error {
	switch name {
	case exception.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case exception.FieldCreator:
		m.ClearCreator()
		return nil
	case exception.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case exception.FieldRemark:
		m.ClearRemark()
		return nil
	case exception.FieldModel:
		m.ClearModel()
		return nil
	case exception.FieldDescription:
		m.ClearDescription()
		return nil
	case exception.FieldAttachments:
		m.ClearAttachments()
		return nil
	}
	return fmt.Errorf("unknown Exception nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExceptionMutation) ResetField(name string) error {
	switch name {
	case exception.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exception.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case exception.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case exception.FieldCreator:
		m.ResetCreator()
		return nil
	case exception.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case exception.FieldRemark:
		m.ResetRemark()
		return nil
	case exception.FieldCityID:
		m.ResetCityID()
		return nil
	case exception.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case exception.FieldStatus:
		m.ResetStatus()
		return nil
	case exception.FieldStoreID:
		m.ResetStoreID()
		return nil
	case exception.FieldName:
		m.ResetName()
		return nil
	case exception.FieldModel:
		m.ResetModel()
		return nil
	case exception.FieldNum:
		m.ResetNum()
		return nil
	case exception.FieldReason:
		m.ResetReason()
		return nil
	case exception.FieldDescription:
		m.ResetDescription()
		return nil
	case exception.FieldAttachments:
		m.ResetAttachments()
		return nil
	}
	return fmt.Errorf("unknown Exception field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExceptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.city != nil {
		edges = append(edges, exception.EdgeCity)
	}
	if m.employee != nil {
		edges = append(edges, exception.EdgeEmployee)
	}
	if m.store != nil {
		edges = append(edges, exception.EdgeStore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExceptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exception.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case exception.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case exception.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExceptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExceptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExceptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcity {
		edges = append(edges, exception.EdgeCity)
	}
	if m.clearedemployee {
		edges = append(edges, exception.EdgeEmployee)
	}
	if m.clearedstore {
		edges = append(edges, exception.EdgeStore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExceptionMutation) EdgeCleared(name string) bool {
	switch name {
	case exception.EdgeCity:
		return m.clearedcity
	case exception.EdgeEmployee:
		return m.clearedemployee
	case exception.EdgeStore:
		return m.clearedstore
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExceptionMutation) ClearEdge(name string) error {
	switch name {
	case exception.EdgeCity:
		m.ClearCity()
		return nil
	case exception.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case exception.EdgeStore:
		m.ClearStore()
		return nil
	}
	return fmt.Errorf("unknown Exception unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExceptionMutation) ResetEdge(name string) error {
	switch name {
	case exception.EdgeCity:
		m.ResetCity()
		return nil
	case exception.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case exception.EdgeStore:
		m.ResetStore()
		return nil
	}
	return fmt.Errorf("unknown Exception edge %s", name)
}

