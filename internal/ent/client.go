// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/auroraride/aurservd/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprepayment"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/export"
	"github.com/auroraride/aurservd/internal/ent/feedback"
	"github.com/auroraride/aurservd/internal/ent/inventory"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/planintroduce"
	"github.com/auroraride/aurservd/internal/ent/pointlog"
	"github.com/auroraride/aurservd/internal/ent/reserve"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
	"github.com/auroraride/aurservd/internal/ent/role"
	"github.com/auroraride/aurservd/internal/ent/setting"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/stocksummary"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribereminder"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Agent is the client for interacting with the Agent builders.
	Agent *AgentClient
	// Allocate is the client for interacting with the Allocate builders.
	Allocate *AllocateClient
	// Assistance is the client for interacting with the Assistance builders.
	Assistance *AssistanceClient
	// Attendance is the client for interacting with the Attendance builders.
	Attendance *AttendanceClient
	// Battery is the client for interacting with the Battery builders.
	Battery *BatteryClient
	// BatteryFlow is the client for interacting with the BatteryFlow builders.
	BatteryFlow *BatteryFlowClient
	// BatteryModel is the client for interacting with the BatteryModel builders.
	BatteryModel *BatteryModelClient
	// Branch is the client for interacting with the Branch builders.
	Branch *BranchClient
	// BranchContract is the client for interacting with the BranchContract builders.
	BranchContract *BranchContractClient
	// Business is the client for interacting with the Business builders.
	Business *BusinessClient
	// Cabinet is the client for interacting with the Cabinet builders.
	Cabinet *CabinetClient
	// CabinetFault is the client for interacting with the CabinetFault builders.
	CabinetFault *CabinetFaultClient
	// City is the client for interacting with the City builders.
	City *CityClient
	// Commission is the client for interacting with the Commission builders.
	Commission *CommissionClient
	// Contract is the client for interacting with the Contract builders.
	Contract *ContractClient
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// CouponAssembly is the client for interacting with the CouponAssembly builders.
	CouponAssembly *CouponAssemblyClient
	// CouponTemplate is the client for interacting with the CouponTemplate builders.
	CouponTemplate *CouponTemplateClient
	// Ebike is the client for interacting with the Ebike builders.
	Ebike *EbikeClient
	// EbikeBrand is the client for interacting with the EbikeBrand builders.
	EbikeBrand *EbikeBrandClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Enterprise is the client for interacting with the Enterprise builders.
	Enterprise *EnterpriseClient
	// EnterpriseBatterySwap is the client for interacting with the EnterpriseBatterySwap builders.
	EnterpriseBatterySwap *EnterpriseBatterySwapClient
	// EnterpriseBill is the client for interacting with the EnterpriseBill builders.
	EnterpriseBill *EnterpriseBillClient
	// EnterpriseContract is the client for interacting with the EnterpriseContract builders.
	EnterpriseContract *EnterpriseContractClient
	// EnterprisePrepayment is the client for interacting with the EnterprisePrepayment builders.
	EnterprisePrepayment *EnterprisePrepaymentClient
	// EnterprisePrice is the client for interacting with the EnterprisePrice builders.
	EnterprisePrice *EnterprisePriceClient
	// EnterpriseStatement is the client for interacting with the EnterpriseStatement builders.
	EnterpriseStatement *EnterpriseStatementClient
	// EnterpriseStation is the client for interacting with the EnterpriseStation builders.
	EnterpriseStation *EnterpriseStationClient
	// Exception is the client for interacting with the Exception builders.
	Exception *ExceptionClient
	// Exchange is the client for interacting with the Exchange builders.
	Exchange *ExchangeClient
	// Export is the client for interacting with the Export builders.
	Export *ExportClient
	// Feedback is the client for interacting with the Feedback builders.
	Feedback *FeedbackClient
	// Inventory is the client for interacting with the Inventory builders.
	Inventory *InventoryClient
	// Manager is the client for interacting with the Manager builders.
	Manager *ManagerClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderRefund is the client for interacting with the OrderRefund builders.
	OrderRefund *OrderRefundClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// PlanIntroduce is the client for interacting with the PlanIntroduce builders.
	PlanIntroduce *PlanIntroduceClient
	// PointLog is the client for interacting with the PointLog builders.
	PointLog *PointLogClient
	// Reserve is the client for interacting with the Reserve builders.
	Reserve *ReserveClient
	// Rider is the client for interacting with the Rider builders.
	Rider *RiderClient
	// RiderFollowUp is the client for interacting with the RiderFollowUp builders.
	RiderFollowUp *RiderFollowUpClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
	// StockSummary is the client for interacting with the StockSummary builders.
	StockSummary *StockSummaryClient
	// Store is the client for interacting with the Store builders.
	Store *StoreClient
	// Subscribe is the client for interacting with the Subscribe builders.
	Subscribe *SubscribeClient
	// SubscribeAlter is the client for interacting with the SubscribeAlter builders.
	SubscribeAlter *SubscribeAlterClient
	// SubscribePause is the client for interacting with the SubscribePause builders.
	SubscribePause *SubscribePauseClient
	// SubscribeReminder is the client for interacting with the SubscribeReminder builders.
	SubscribeReminder *SubscribeReminderClient
	// SubscribeSuspend is the client for interacting with the SubscribeSuspend builders.
	SubscribeSuspend *SubscribeSuspendClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Agent = NewAgentClient(c.config)
	c.Allocate = NewAllocateClient(c.config)
	c.Assistance = NewAssistanceClient(c.config)
	c.Attendance = NewAttendanceClient(c.config)
	c.Battery = NewBatteryClient(c.config)
	c.BatteryFlow = NewBatteryFlowClient(c.config)
	c.BatteryModel = NewBatteryModelClient(c.config)
	c.Branch = NewBranchClient(c.config)
	c.BranchContract = NewBranchContractClient(c.config)
	c.Business = NewBusinessClient(c.config)
	c.Cabinet = NewCabinetClient(c.config)
	c.CabinetFault = NewCabinetFaultClient(c.config)
	c.City = NewCityClient(c.config)
	c.Commission = NewCommissionClient(c.config)
	c.Contract = NewContractClient(c.config)
	c.Coupon = NewCouponClient(c.config)
	c.CouponAssembly = NewCouponAssemblyClient(c.config)
	c.CouponTemplate = NewCouponTemplateClient(c.config)
	c.Ebike = NewEbikeClient(c.config)
	c.EbikeBrand = NewEbikeBrandClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Enterprise = NewEnterpriseClient(c.config)
	c.EnterpriseBatterySwap = NewEnterpriseBatterySwapClient(c.config)
	c.EnterpriseBill = NewEnterpriseBillClient(c.config)
	c.EnterpriseContract = NewEnterpriseContractClient(c.config)
	c.EnterprisePrepayment = NewEnterprisePrepaymentClient(c.config)
	c.EnterprisePrice = NewEnterprisePriceClient(c.config)
	c.EnterpriseStatement = NewEnterpriseStatementClient(c.config)
	c.EnterpriseStation = NewEnterpriseStationClient(c.config)
	c.Exception = NewExceptionClient(c.config)
	c.Exchange = NewExchangeClient(c.config)
	c.Export = NewExportClient(c.config)
	c.Feedback = NewFeedbackClient(c.config)
	c.Inventory = NewInventoryClient(c.config)
	c.Manager = NewManagerClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderRefund = NewOrderRefundClient(c.config)
	c.Person = NewPersonClient(c.config)
	c.Plan = NewPlanClient(c.config)
	c.PlanIntroduce = NewPlanIntroduceClient(c.config)
	c.PointLog = NewPointLogClient(c.config)
	c.Reserve = NewReserveClient(c.config)
	c.Rider = NewRiderClient(c.config)
	c.RiderFollowUp = NewRiderFollowUpClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Setting = NewSettingClient(c.config)
	c.Stock = NewStockClient(c.config)
	c.StockSummary = NewStockSummaryClient(c.config)
	c.Store = NewStoreClient(c.config)
	c.Subscribe = NewSubscribeClient(c.config)
	c.SubscribeAlter = NewSubscribeAlterClient(c.config)
	c.SubscribePause = NewSubscribePauseClient(c.config)
	c.SubscribeReminder = NewSubscribeReminderClient(c.config)
	c.SubscribeSuspend = NewSubscribeSuspendClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Agent:                 NewAgentClient(cfg),
		Allocate:              NewAllocateClient(cfg),
		Assistance:            NewAssistanceClient(cfg),
		Attendance:            NewAttendanceClient(cfg),
		Battery:               NewBatteryClient(cfg),
		BatteryFlow:           NewBatteryFlowClient(cfg),
		BatteryModel:          NewBatteryModelClient(cfg),
		Branch:                NewBranchClient(cfg),
		BranchContract:        NewBranchContractClient(cfg),
		Business:              NewBusinessClient(cfg),
		Cabinet:               NewCabinetClient(cfg),
		CabinetFault:          NewCabinetFaultClient(cfg),
		City:                  NewCityClient(cfg),
		Commission:            NewCommissionClient(cfg),
		Contract:              NewContractClient(cfg),
		Coupon:                NewCouponClient(cfg),
		CouponAssembly:        NewCouponAssemblyClient(cfg),
		CouponTemplate:        NewCouponTemplateClient(cfg),
		Ebike:                 NewEbikeClient(cfg),
		EbikeBrand:            NewEbikeBrandClient(cfg),
		Employee:              NewEmployeeClient(cfg),
		Enterprise:            NewEnterpriseClient(cfg),
		EnterpriseBatterySwap: NewEnterpriseBatterySwapClient(cfg),
		EnterpriseBill:        NewEnterpriseBillClient(cfg),
		EnterpriseContract:    NewEnterpriseContractClient(cfg),
		EnterprisePrepayment:  NewEnterprisePrepaymentClient(cfg),
		EnterprisePrice:       NewEnterprisePriceClient(cfg),
		EnterpriseStatement:   NewEnterpriseStatementClient(cfg),
		EnterpriseStation:     NewEnterpriseStationClient(cfg),
		Exception:             NewExceptionClient(cfg),
		Exchange:              NewExchangeClient(cfg),
		Export:                NewExportClient(cfg),
		Feedback:              NewFeedbackClient(cfg),
		Inventory:             NewInventoryClient(cfg),
		Manager:               NewManagerClient(cfg),
		Order:                 NewOrderClient(cfg),
		OrderRefund:           NewOrderRefundClient(cfg),
		Person:                NewPersonClient(cfg),
		Plan:                  NewPlanClient(cfg),
		PlanIntroduce:         NewPlanIntroduceClient(cfg),
		PointLog:              NewPointLogClient(cfg),
		Reserve:               NewReserveClient(cfg),
		Rider:                 NewRiderClient(cfg),
		RiderFollowUp:         NewRiderFollowUpClient(cfg),
		Role:                  NewRoleClient(cfg),
		Setting:               NewSettingClient(cfg),
		Stock:                 NewStockClient(cfg),
		StockSummary:          NewStockSummaryClient(cfg),
		Store:                 NewStoreClient(cfg),
		Subscribe:             NewSubscribeClient(cfg),
		SubscribeAlter:        NewSubscribeAlterClient(cfg),
		SubscribePause:        NewSubscribePauseClient(cfg),
		SubscribeReminder:     NewSubscribeReminderClient(cfg),
		SubscribeSuspend:      NewSubscribeSuspendClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Agent:                 NewAgentClient(cfg),
		Allocate:              NewAllocateClient(cfg),
		Assistance:            NewAssistanceClient(cfg),
		Attendance:            NewAttendanceClient(cfg),
		Battery:               NewBatteryClient(cfg),
		BatteryFlow:           NewBatteryFlowClient(cfg),
		BatteryModel:          NewBatteryModelClient(cfg),
		Branch:                NewBranchClient(cfg),
		BranchContract:        NewBranchContractClient(cfg),
		Business:              NewBusinessClient(cfg),
		Cabinet:               NewCabinetClient(cfg),
		CabinetFault:          NewCabinetFaultClient(cfg),
		City:                  NewCityClient(cfg),
		Commission:            NewCommissionClient(cfg),
		Contract:              NewContractClient(cfg),
		Coupon:                NewCouponClient(cfg),
		CouponAssembly:        NewCouponAssemblyClient(cfg),
		CouponTemplate:        NewCouponTemplateClient(cfg),
		Ebike:                 NewEbikeClient(cfg),
		EbikeBrand:            NewEbikeBrandClient(cfg),
		Employee:              NewEmployeeClient(cfg),
		Enterprise:            NewEnterpriseClient(cfg),
		EnterpriseBatterySwap: NewEnterpriseBatterySwapClient(cfg),
		EnterpriseBill:        NewEnterpriseBillClient(cfg),
		EnterpriseContract:    NewEnterpriseContractClient(cfg),
		EnterprisePrepayment:  NewEnterprisePrepaymentClient(cfg),
		EnterprisePrice:       NewEnterprisePriceClient(cfg),
		EnterpriseStatement:   NewEnterpriseStatementClient(cfg),
		EnterpriseStation:     NewEnterpriseStationClient(cfg),
		Exception:             NewExceptionClient(cfg),
		Exchange:              NewExchangeClient(cfg),
		Export:                NewExportClient(cfg),
		Feedback:              NewFeedbackClient(cfg),
		Inventory:             NewInventoryClient(cfg),
		Manager:               NewManagerClient(cfg),
		Order:                 NewOrderClient(cfg),
		OrderRefund:           NewOrderRefundClient(cfg),
		Person:                NewPersonClient(cfg),
		Plan:                  NewPlanClient(cfg),
		PlanIntroduce:         NewPlanIntroduceClient(cfg),
		PointLog:              NewPointLogClient(cfg),
		Reserve:               NewReserveClient(cfg),
		Rider:                 NewRiderClient(cfg),
		RiderFollowUp:         NewRiderFollowUpClient(cfg),
		Role:                  NewRoleClient(cfg),
		Setting:               NewSettingClient(cfg),
		Stock:                 NewStockClient(cfg),
		StockSummary:          NewStockSummaryClient(cfg),
		Store:                 NewStoreClient(cfg),
		Subscribe:             NewSubscribeClient(cfg),
		SubscribeAlter:        NewSubscribeAlterClient(cfg),
		SubscribePause:        NewSubscribePauseClient(cfg),
		SubscribeReminder:     NewSubscribeReminderClient(cfg),
		SubscribeSuspend:      NewSubscribeSuspendClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Agent.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Agent, c.Allocate, c.Assistance, c.Attendance, c.Battery, c.BatteryFlow,
		c.BatteryModel, c.Branch, c.BranchContract, c.Business, c.Cabinet,
		c.CabinetFault, c.City, c.Commission, c.Contract, c.Coupon, c.CouponAssembly,
		c.CouponTemplate, c.Ebike, c.EbikeBrand, c.Employee, c.Enterprise,
		c.EnterpriseBatterySwap, c.EnterpriseBill, c.EnterpriseContract,
		c.EnterprisePrepayment, c.EnterprisePrice, c.EnterpriseStatement,
		c.EnterpriseStation, c.Exception, c.Exchange, c.Export, c.Feedback,
		c.Inventory, c.Manager, c.Order, c.OrderRefund, c.Person, c.Plan,
		c.PlanIntroduce, c.PointLog, c.Reserve, c.Rider, c.RiderFollowUp, c.Role,
		c.Setting, c.Stock, c.StockSummary, c.Store, c.Subscribe, c.SubscribeAlter,
		c.SubscribePause, c.SubscribeReminder, c.SubscribeSuspend,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Agent, c.Allocate, c.Assistance, c.Attendance, c.Battery, c.BatteryFlow,
		c.BatteryModel, c.Branch, c.BranchContract, c.Business, c.Cabinet,
		c.CabinetFault, c.City, c.Commission, c.Contract, c.Coupon, c.CouponAssembly,
		c.CouponTemplate, c.Ebike, c.EbikeBrand, c.Employee, c.Enterprise,
		c.EnterpriseBatterySwap, c.EnterpriseBill, c.EnterpriseContract,
		c.EnterprisePrepayment, c.EnterprisePrice, c.EnterpriseStatement,
		c.EnterpriseStation, c.Exception, c.Exchange, c.Export, c.Feedback,
		c.Inventory, c.Manager, c.Order, c.OrderRefund, c.Person, c.Plan,
		c.PlanIntroduce, c.PointLog, c.Reserve, c.Rider, c.RiderFollowUp, c.Role,
		c.Setting, c.Stock, c.StockSummary, c.Store, c.Subscribe, c.SubscribeAlter,
		c.SubscribePause, c.SubscribeReminder, c.SubscribeSuspend,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AgentMutation:
		return c.Agent.mutate(ctx, m)
	case *AllocateMutation:
		return c.Allocate.mutate(ctx, m)
	case *AssistanceMutation:
		return c.Assistance.mutate(ctx, m)
	case *AttendanceMutation:
		return c.Attendance.mutate(ctx, m)
	case *BatteryMutation:
		return c.Battery.mutate(ctx, m)
	case *BatteryFlowMutation:
		return c.BatteryFlow.mutate(ctx, m)
	case *BatteryModelMutation:
		return c.BatteryModel.mutate(ctx, m)
	case *BranchMutation:
		return c.Branch.mutate(ctx, m)
	case *BranchContractMutation:
		return c.BranchContract.mutate(ctx, m)
	case *BusinessMutation:
		return c.Business.mutate(ctx, m)
	case *CabinetMutation:
		return c.Cabinet.mutate(ctx, m)
	case *CabinetFaultMutation:
		return c.CabinetFault.mutate(ctx, m)
	case *CityMutation:
		return c.City.mutate(ctx, m)
	case *CommissionMutation:
		return c.Commission.mutate(ctx, m)
	case *ContractMutation:
		return c.Contract.mutate(ctx, m)
	case *CouponMutation:
		return c.Coupon.mutate(ctx, m)
	case *CouponAssemblyMutation:
		return c.CouponAssembly.mutate(ctx, m)
	case *CouponTemplateMutation:
		return c.CouponTemplate.mutate(ctx, m)
	case *EbikeMutation:
		return c.Ebike.mutate(ctx, m)
	case *EbikeBrandMutation:
		return c.EbikeBrand.mutate(ctx, m)
	case *EmployeeMutation:
		return c.Employee.mutate(ctx, m)
	case *EnterpriseMutation:
		return c.Enterprise.mutate(ctx, m)
	case *EnterpriseBatterySwapMutation:
		return c.EnterpriseBatterySwap.mutate(ctx, m)
	case *EnterpriseBillMutation:
		return c.EnterpriseBill.mutate(ctx, m)
	case *EnterpriseContractMutation:
		return c.EnterpriseContract.mutate(ctx, m)
	case *EnterprisePrepaymentMutation:
		return c.EnterprisePrepayment.mutate(ctx, m)
	case *EnterprisePriceMutation:
		return c.EnterprisePrice.mutate(ctx, m)
	case *EnterpriseStatementMutation:
		return c.EnterpriseStatement.mutate(ctx, m)
	case *EnterpriseStationMutation:
		return c.EnterpriseStation.mutate(ctx, m)
	case *ExceptionMutation:
		return c.Exception.mutate(ctx, m)
	case *ExchangeMutation:
		return c.Exchange.mutate(ctx, m)
	case *ExportMutation:
		return c.Export.mutate(ctx, m)
	case *FeedbackMutation:
		return c.Feedback.mutate(ctx, m)
	case *InventoryMutation:
		return c.Inventory.mutate(ctx, m)
	case *ManagerMutation:
		return c.Manager.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *OrderRefundMutation:
		return c.OrderRefund.mutate(ctx, m)
	case *PersonMutation:
		return c.Person.mutate(ctx, m)
	case *PlanMutation:
		return c.Plan.mutate(ctx, m)
	case *PlanIntroduceMutation:
		return c.PlanIntroduce.mutate(ctx, m)
	case *PointLogMutation:
		return c.PointLog.mutate(ctx, m)
	case *ReserveMutation:
		return c.Reserve.mutate(ctx, m)
	case *RiderMutation:
		return c.Rider.mutate(ctx, m)
	case *RiderFollowUpMutation:
		return c.RiderFollowUp.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *SettingMutation:
		return c.Setting.mutate(ctx, m)
	case *StockMutation:
		return c.Stock.mutate(ctx, m)
	case *StockSummaryMutation:
		return c.StockSummary.mutate(ctx, m)
	case *StoreMutation:
		return c.Store.mutate(ctx, m)
	case *SubscribeMutation:
		return c.Subscribe.mutate(ctx, m)
	case *SubscribeAlterMutation:
		return c.SubscribeAlter.mutate(ctx, m)
	case *SubscribePauseMutation:
		return c.SubscribePause.mutate(ctx, m)
	case *SubscribeReminderMutation:
		return c.SubscribeReminder.mutate(ctx, m)
	case *SubscribeSuspendMutation:
		return c.SubscribeSuspend.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AgentClient is a client for the Agent schema.
type AgentClient struct {
	config
}

// NewAgentClient returns a client for the Agent from the given config.
func NewAgentClient(c config) *AgentClient {
	return &AgentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agent.Hooks(f(g(h())))`.
func (c *AgentClient) Use(hooks ...Hook) {
	c.hooks.Agent = append(c.hooks.Agent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `agent.Intercept(f(g(h())))`.
func (c *AgentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Agent = append(c.inters.Agent, interceptors...)
}

// Create returns a builder for creating a Agent entity.
func (c *AgentClient) Create() *AgentCreate {
	mutation := newAgentMutation(c.config, OpCreate)
	return &AgentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agent entities.
func (c *AgentClient) CreateBulk(builders ...*AgentCreate) *AgentCreateBulk {
	return &AgentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agent.
func (c *AgentClient) Update() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentClient) UpdateOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentClient) UpdateOneID(id uint64) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agent.
func (c *AgentClient) Delete() *AgentDelete {
	mutation := newAgentMutation(c.config, OpDelete)
	return &AgentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgentClient) DeleteOne(a *Agent) *AgentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AgentClient) DeleteOneID(id uint64) *AgentDeleteOne {
	builder := c.Delete().Where(agent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentDeleteOne{builder}
}

// Query returns a query builder for Agent.
func (c *AgentClient) Query() *AgentQuery {
	return &AgentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAgent},
		inters: c.Interceptors(),
	}
}

// Get returns a Agent entity by its id.
func (c *AgentClient) Get(ctx context.Context, id uint64) (*Agent, error) {
	return c.Query().Where(agent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentClient) GetX(ctx context.Context, id uint64) *Agent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a Agent.
func (c *AgentClient) QueryEnterprise(a *Agent) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, agent.EnterpriseTable, agent.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStations queries the stations edge of a Agent.
func (c *AgentClient) QueryStations(a *Agent) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, agent.StationsTable, agent.StationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AgentClient) Hooks() []Hook {
	hooks := c.hooks.Agent
	return append(hooks[:len(hooks):len(hooks)], agent.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AgentClient) Interceptors() []Interceptor {
	return c.inters.Agent
}

func (c *AgentClient) mutate(ctx context.Context, m *AgentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AgentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AgentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Agent mutation op: %q", m.Op())
	}
}

// AllocateClient is a client for the Allocate schema.
type AllocateClient struct {
	config
}

// NewAllocateClient returns a client for the Allocate from the given config.
func NewAllocateClient(c config) *AllocateClient {
	return &AllocateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `allocate.Hooks(f(g(h())))`.
func (c *AllocateClient) Use(hooks ...Hook) {
	c.hooks.Allocate = append(c.hooks.Allocate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `allocate.Intercept(f(g(h())))`.
func (c *AllocateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Allocate = append(c.inters.Allocate, interceptors...)
}

// Create returns a builder for creating a Allocate entity.
func (c *AllocateClient) Create() *AllocateCreate {
	mutation := newAllocateMutation(c.config, OpCreate)
	return &AllocateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Allocate entities.
func (c *AllocateClient) CreateBulk(builders ...*AllocateCreate) *AllocateCreateBulk {
	return &AllocateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Allocate.
func (c *AllocateClient) Update() *AllocateUpdate {
	mutation := newAllocateMutation(c.config, OpUpdate)
	return &AllocateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AllocateClient) UpdateOne(a *Allocate) *AllocateUpdateOne {
	mutation := newAllocateMutation(c.config, OpUpdateOne, withAllocate(a))
	return &AllocateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AllocateClient) UpdateOneID(id uint64) *AllocateUpdateOne {
	mutation := newAllocateMutation(c.config, OpUpdateOne, withAllocateID(id))
	return &AllocateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Allocate.
func (c *AllocateClient) Delete() *AllocateDelete {
	mutation := newAllocateMutation(c.config, OpDelete)
	return &AllocateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AllocateClient) DeleteOne(a *Allocate) *AllocateDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AllocateClient) DeleteOneID(id uint64) *AllocateDeleteOne {
	builder := c.Delete().Where(allocate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AllocateDeleteOne{builder}
}

// Query returns a query builder for Allocate.
func (c *AllocateClient) Query() *AllocateQuery {
	return &AllocateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAllocate},
		inters: c.Interceptors(),
	}
}

// Get returns a Allocate entity by its id.
func (c *AllocateClient) Get(ctx context.Context, id uint64) (*Allocate, error) {
	return c.Query().Where(allocate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AllocateClient) GetX(ctx context.Context, id uint64) *Allocate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Allocate.
func (c *AllocateClient) QueryRider(a *Allocate) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.RiderTable, allocate.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Allocate.
func (c *AllocateClient) QuerySubscribe(a *Allocate) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.SubscribeTable, allocate.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Allocate.
func (c *AllocateClient) QueryEmployee(a *Allocate) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.EmployeeTable, allocate.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Allocate.
func (c *AllocateClient) QueryCabinet(a *Allocate) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.CabinetTable, allocate.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Allocate.
func (c *AllocateClient) QueryStore(a *Allocate) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.StoreTable, allocate.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Allocate.
func (c *AllocateClient) QueryBrand(a *Allocate) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.BrandTable, allocate.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Allocate.
func (c *AllocateClient) QueryBattery(a *Allocate) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.BatteryTable, allocate.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Allocate.
func (c *AllocateClient) QueryStation(a *Allocate) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.StationTable, allocate.StationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContract queries the contract edge of a Allocate.
func (c *AllocateClient) QueryContract(a *Allocate) *ContractQuery {
	query := (&ContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, allocate.ContractTable, allocate.ContractColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Allocate.
func (c *AllocateClient) QueryEbike(a *Allocate) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, allocate.EbikeTable, allocate.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AllocateClient) Hooks() []Hook {
	hooks := c.hooks.Allocate
	return append(hooks[:len(hooks):len(hooks)], allocate.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AllocateClient) Interceptors() []Interceptor {
	return c.inters.Allocate
}

func (c *AllocateClient) mutate(ctx context.Context, m *AllocateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AllocateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AllocateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AllocateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AllocateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Allocate mutation op: %q", m.Op())
	}
}

// AssistanceClient is a client for the Assistance schema.
type AssistanceClient struct {
	config
}

// NewAssistanceClient returns a client for the Assistance from the given config.
func NewAssistanceClient(c config) *AssistanceClient {
	return &AssistanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assistance.Hooks(f(g(h())))`.
func (c *AssistanceClient) Use(hooks ...Hook) {
	c.hooks.Assistance = append(c.hooks.Assistance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assistance.Intercept(f(g(h())))`.
func (c *AssistanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Assistance = append(c.inters.Assistance, interceptors...)
}

// Create returns a builder for creating a Assistance entity.
func (c *AssistanceClient) Create() *AssistanceCreate {
	mutation := newAssistanceMutation(c.config, OpCreate)
	return &AssistanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Assistance entities.
func (c *AssistanceClient) CreateBulk(builders ...*AssistanceCreate) *AssistanceCreateBulk {
	return &AssistanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Assistance.
func (c *AssistanceClient) Update() *AssistanceUpdate {
	mutation := newAssistanceMutation(c.config, OpUpdate)
	return &AssistanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssistanceClient) UpdateOne(a *Assistance) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistance(a))
	return &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssistanceClient) UpdateOneID(id uint64) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistanceID(id))
	return &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Assistance.
func (c *AssistanceClient) Delete() *AssistanceDelete {
	mutation := newAssistanceMutation(c.config, OpDelete)
	return &AssistanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssistanceClient) DeleteOne(a *Assistance) *AssistanceDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssistanceClient) DeleteOneID(id uint64) *AssistanceDeleteOne {
	builder := c.Delete().Where(assistance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssistanceDeleteOne{builder}
}

// Query returns a query builder for Assistance.
func (c *AssistanceClient) Query() *AssistanceQuery {
	return &AssistanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssistance},
		inters: c.Interceptors(),
	}
}

// Get returns a Assistance entity by its id.
func (c *AssistanceClient) Get(ctx context.Context, id uint64) (*Assistance, error) {
	return c.Query().Where(assistance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssistanceClient) GetX(ctx context.Context, id uint64) *Assistance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStore queries the store edge of a Assistance.
func (c *AssistanceClient) QueryStore(a *Assistance) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.StoreTable, assistance.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Assistance.
func (c *AssistanceClient) QueryRider(a *Assistance) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.RiderTable, assistance.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Assistance.
func (c *AssistanceClient) QuerySubscribe(a *Assistance) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.SubscribeTable, assistance.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Assistance.
func (c *AssistanceClient) QueryCity(a *Assistance) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.CityTable, assistance.CityColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a Assistance.
func (c *AssistanceClient) QueryOrder(a *Assistance) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, assistance.OrderTable, assistance.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Assistance.
func (c *AssistanceClient) QueryEmployee(a *Assistance) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assistance.EmployeeTable, assistance.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssistanceClient) Hooks() []Hook {
	hooks := c.hooks.Assistance
	return append(hooks[:len(hooks):len(hooks)], assistance.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssistanceClient) Interceptors() []Interceptor {
	return c.inters.Assistance
}

func (c *AssistanceClient) mutate(ctx context.Context, m *AssistanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssistanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssistanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssistanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Assistance mutation op: %q", m.Op())
	}
}

// AttendanceClient is a client for the Attendance schema.
type AttendanceClient struct {
	config
}

// NewAttendanceClient returns a client for the Attendance from the given config.
func NewAttendanceClient(c config) *AttendanceClient {
	return &AttendanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attendance.Hooks(f(g(h())))`.
func (c *AttendanceClient) Use(hooks ...Hook) {
	c.hooks.Attendance = append(c.hooks.Attendance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attendance.Intercept(f(g(h())))`.
func (c *AttendanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Attendance = append(c.inters.Attendance, interceptors...)
}

// Create returns a builder for creating a Attendance entity.
func (c *AttendanceClient) Create() *AttendanceCreate {
	mutation := newAttendanceMutation(c.config, OpCreate)
	return &AttendanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attendance entities.
func (c *AttendanceClient) CreateBulk(builders ...*AttendanceCreate) *AttendanceCreateBulk {
	return &AttendanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attendance.
func (c *AttendanceClient) Update() *AttendanceUpdate {
	mutation := newAttendanceMutation(c.config, OpUpdate)
	return &AttendanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttendanceClient) UpdateOne(a *Attendance) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendance(a))
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttendanceClient) UpdateOneID(id uint64) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendanceID(id))
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attendance.
func (c *AttendanceClient) Delete() *AttendanceDelete {
	mutation := newAttendanceMutation(c.config, OpDelete)
	return &AttendanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttendanceClient) DeleteOne(a *Attendance) *AttendanceDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttendanceClient) DeleteOneID(id uint64) *AttendanceDeleteOne {
	builder := c.Delete().Where(attendance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttendanceDeleteOne{builder}
}

// Query returns a query builder for Attendance.
func (c *AttendanceClient) Query() *AttendanceQuery {
	return &AttendanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttendance},
		inters: c.Interceptors(),
	}
}

// Get returns a Attendance entity by its id.
func (c *AttendanceClient) Get(ctx context.Context, id uint64) (*Attendance, error) {
	return c.Query().Where(attendance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttendanceClient) GetX(ctx context.Context, id uint64) *Attendance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStore queries the store edge of a Attendance.
func (c *AttendanceClient) QueryStore(a *Attendance) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attendance.Table, attendance.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attendance.StoreTable, attendance.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Attendance.
func (c *AttendanceClient) QueryEmployee(a *Attendance) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attendance.Table, attendance.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attendance.EmployeeTable, attendance.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttendanceClient) Hooks() []Hook {
	hooks := c.hooks.Attendance
	return append(hooks[:len(hooks):len(hooks)], attendance.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AttendanceClient) Interceptors() []Interceptor {
	return c.inters.Attendance
}

func (c *AttendanceClient) mutate(ctx context.Context, m *AttendanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttendanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttendanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttendanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Attendance mutation op: %q", m.Op())
	}
}

// BatteryClient is a client for the Battery schema.
type BatteryClient struct {
	config
}

// NewBatteryClient returns a client for the Battery from the given config.
func NewBatteryClient(c config) *BatteryClient {
	return &BatteryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `battery.Hooks(f(g(h())))`.
func (c *BatteryClient) Use(hooks ...Hook) {
	c.hooks.Battery = append(c.hooks.Battery, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `battery.Intercept(f(g(h())))`.
func (c *BatteryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Battery = append(c.inters.Battery, interceptors...)
}

// Create returns a builder for creating a Battery entity.
func (c *BatteryClient) Create() *BatteryCreate {
	mutation := newBatteryMutation(c.config, OpCreate)
	return &BatteryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Battery entities.
func (c *BatteryClient) CreateBulk(builders ...*BatteryCreate) *BatteryCreateBulk {
	return &BatteryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Battery.
func (c *BatteryClient) Update() *BatteryUpdate {
	mutation := newBatteryMutation(c.config, OpUpdate)
	return &BatteryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BatteryClient) UpdateOne(b *Battery) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBattery(b))
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BatteryClient) UpdateOneID(id uint64) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBatteryID(id))
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Battery.
func (c *BatteryClient) Delete() *BatteryDelete {
	mutation := newBatteryMutation(c.config, OpDelete)
	return &BatteryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BatteryClient) DeleteOne(b *Battery) *BatteryDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BatteryClient) DeleteOneID(id uint64) *BatteryDeleteOne {
	builder := c.Delete().Where(battery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BatteryDeleteOne{builder}
}

// Query returns a query builder for Battery.
func (c *BatteryClient) Query() *BatteryQuery {
	return &BatteryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBattery},
		inters: c.Interceptors(),
	}
}

// Get returns a Battery entity by its id.
func (c *BatteryClient) Get(ctx context.Context, id uint64) (*Battery, error) {
	return c.Query().Where(battery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BatteryClient) GetX(ctx context.Context, id uint64) *Battery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Battery.
func (c *BatteryClient) QueryCity(b *Battery) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, battery.CityTable, battery.CityColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Battery.
func (c *BatteryClient) QueryRider(b *Battery) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, battery.RiderTable, battery.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Battery.
func (c *BatteryClient) QueryCabinet(b *Battery) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.CabinetTable, battery.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Battery.
func (c *BatteryClient) QuerySubscribe(b *Battery) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, battery.SubscribeTable, battery.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Battery.
func (c *BatteryClient) QueryEnterprise(b *Battery) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.EnterpriseTable, battery.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlows queries the flows edge of a Battery.
func (c *BatteryClient) QueryFlows(b *Battery) *BatteryFlowQuery {
	query := (&BatteryFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(batteryflow.Table, batteryflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, battery.FlowsTable, battery.FlowsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Battery.
func (c *BatteryClient) QueryStation(b *Battery) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.StationTable, battery.StationColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BatteryClient) Hooks() []Hook {
	hooks := c.hooks.Battery
	return append(hooks[:len(hooks):len(hooks)], battery.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BatteryClient) Interceptors() []Interceptor {
	return c.inters.Battery
}

func (c *BatteryClient) mutate(ctx context.Context, m *BatteryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BatteryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BatteryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BatteryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Battery mutation op: %q", m.Op())
	}
}

// BatteryFlowClient is a client for the BatteryFlow schema.
type BatteryFlowClient struct {
	config
}

// NewBatteryFlowClient returns a client for the BatteryFlow from the given config.
func NewBatteryFlowClient(c config) *BatteryFlowClient {
	return &BatteryFlowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `batteryflow.Hooks(f(g(h())))`.
func (c *BatteryFlowClient) Use(hooks ...Hook) {
	c.hooks.BatteryFlow = append(c.hooks.BatteryFlow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `batteryflow.Intercept(f(g(h())))`.
func (c *BatteryFlowClient) Intercept(interceptors ...Interceptor) {
	c.inters.BatteryFlow = append(c.inters.BatteryFlow, interceptors...)
}

// Create returns a builder for creating a BatteryFlow entity.
func (c *BatteryFlowClient) Create() *BatteryFlowCreate {
	mutation := newBatteryFlowMutation(c.config, OpCreate)
	return &BatteryFlowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BatteryFlow entities.
func (c *BatteryFlowClient) CreateBulk(builders ...*BatteryFlowCreate) *BatteryFlowCreateBulk {
	return &BatteryFlowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BatteryFlow.
func (c *BatteryFlowClient) Update() *BatteryFlowUpdate {
	mutation := newBatteryFlowMutation(c.config, OpUpdate)
	return &BatteryFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BatteryFlowClient) UpdateOne(bf *BatteryFlow) *BatteryFlowUpdateOne {
	mutation := newBatteryFlowMutation(c.config, OpUpdateOne, withBatteryFlow(bf))
	return &BatteryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BatteryFlowClient) UpdateOneID(id uint64) *BatteryFlowUpdateOne {
	mutation := newBatteryFlowMutation(c.config, OpUpdateOne, withBatteryFlowID(id))
	return &BatteryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BatteryFlow.
func (c *BatteryFlowClient) Delete() *BatteryFlowDelete {
	mutation := newBatteryFlowMutation(c.config, OpDelete)
	return &BatteryFlowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BatteryFlowClient) DeleteOne(bf *BatteryFlow) *BatteryFlowDeleteOne {
	return c.DeleteOneID(bf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BatteryFlowClient) DeleteOneID(id uint64) *BatteryFlowDeleteOne {
	builder := c.Delete().Where(batteryflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BatteryFlowDeleteOne{builder}
}

// Query returns a query builder for BatteryFlow.
func (c *BatteryFlowClient) Query() *BatteryFlowQuery {
	return &BatteryFlowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBatteryFlow},
		inters: c.Interceptors(),
	}
}

// Get returns a BatteryFlow entity by its id.
func (c *BatteryFlowClient) Get(ctx context.Context, id uint64) (*BatteryFlow, error) {
	return c.Query().Where(batteryflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BatteryFlowClient) GetX(ctx context.Context, id uint64) *BatteryFlow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribe queries the subscribe edge of a BatteryFlow.
func (c *BatteryFlowClient) QuerySubscribe(bf *BatteryFlow) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, batteryflow.SubscribeTable, batteryflow.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(bf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a BatteryFlow.
func (c *BatteryFlowClient) QueryBattery(bf *BatteryFlow) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, batteryflow.BatteryTable, batteryflow.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(bf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a BatteryFlow.
func (c *BatteryFlowClient) QueryCabinet(bf *BatteryFlow) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, batteryflow.CabinetTable, batteryflow.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(bf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a BatteryFlow.
func (c *BatteryFlowClient) QueryRider(bf *BatteryFlow) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, batteryflow.RiderTable, batteryflow.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(bf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BatteryFlowClient) Hooks() []Hook {
	return c.hooks.BatteryFlow
}

// Interceptors returns the client interceptors.
func (c *BatteryFlowClient) Interceptors() []Interceptor {
	return c.inters.BatteryFlow
}

func (c *BatteryFlowClient) mutate(ctx context.Context, m *BatteryFlowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BatteryFlowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BatteryFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BatteryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BatteryFlowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BatteryFlow mutation op: %q", m.Op())
	}
}

// BatteryModelClient is a client for the BatteryModel schema.
type BatteryModelClient struct {
	config
}

// NewBatteryModelClient returns a client for the BatteryModel from the given config.
func NewBatteryModelClient(c config) *BatteryModelClient {
	return &BatteryModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `batterymodel.Hooks(f(g(h())))`.
func (c *BatteryModelClient) Use(hooks ...Hook) {
	c.hooks.BatteryModel = append(c.hooks.BatteryModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `batterymodel.Intercept(f(g(h())))`.
func (c *BatteryModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.BatteryModel = append(c.inters.BatteryModel, interceptors...)
}

// Create returns a builder for creating a BatteryModel entity.
func (c *BatteryModelClient) Create() *BatteryModelCreate {
	mutation := newBatteryModelMutation(c.config, OpCreate)
	return &BatteryModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BatteryModel entities.
func (c *BatteryModelClient) CreateBulk(builders ...*BatteryModelCreate) *BatteryModelCreateBulk {
	return &BatteryModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BatteryModel.
func (c *BatteryModelClient) Update() *BatteryModelUpdate {
	mutation := newBatteryModelMutation(c.config, OpUpdate)
	return &BatteryModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BatteryModelClient) UpdateOne(bm *BatteryModel) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModel(bm))
	return &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BatteryModelClient) UpdateOneID(id uint64) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModelID(id))
	return &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BatteryModel.
func (c *BatteryModelClient) Delete() *BatteryModelDelete {
	mutation := newBatteryModelMutation(c.config, OpDelete)
	return &BatteryModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BatteryModelClient) DeleteOne(bm *BatteryModel) *BatteryModelDeleteOne {
	return c.DeleteOneID(bm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BatteryModelClient) DeleteOneID(id uint64) *BatteryModelDeleteOne {
	builder := c.Delete().Where(batterymodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BatteryModelDeleteOne{builder}
}

// Query returns a query builder for BatteryModel.
func (c *BatteryModelClient) Query() *BatteryModelQuery {
	return &BatteryModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBatteryModel},
		inters: c.Interceptors(),
	}
}

// Get returns a BatteryModel entity by its id.
func (c *BatteryModelClient) Get(ctx context.Context, id uint64) (*BatteryModel, error) {
	return c.Query().Where(batterymodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BatteryModelClient) GetX(ctx context.Context, id uint64) *BatteryModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCabinets queries the cabinets edge of a BatteryModel.
func (c *BatteryModelClient) QueryCabinets(bm *BatteryModel) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batterymodel.Table, batterymodel.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, batterymodel.CabinetsTable, batterymodel.CabinetsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BatteryModelClient) Hooks() []Hook {
	return c.hooks.BatteryModel
}

// Interceptors returns the client interceptors.
func (c *BatteryModelClient) Interceptors() []Interceptor {
	return c.inters.BatteryModel
}

func (c *BatteryModelClient) mutate(ctx context.Context, m *BatteryModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BatteryModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BatteryModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BatteryModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BatteryModel mutation op: %q", m.Op())
	}
}

// BranchClient is a client for the Branch schema.
type BranchClient struct {
	config
}

// NewBranchClient returns a client for the Branch from the given config.
func NewBranchClient(c config) *BranchClient {
	return &BranchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branch.Hooks(f(g(h())))`.
func (c *BranchClient) Use(hooks ...Hook) {
	c.hooks.Branch = append(c.hooks.Branch, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `branch.Intercept(f(g(h())))`.
func (c *BranchClient) Intercept(interceptors ...Interceptor) {
	c.inters.Branch = append(c.inters.Branch, interceptors...)
}

// Create returns a builder for creating a Branch entity.
func (c *BranchClient) Create() *BranchCreate {
	mutation := newBranchMutation(c.config, OpCreate)
	return &BranchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Branch entities.
func (c *BranchClient) CreateBulk(builders ...*BranchCreate) *BranchCreateBulk {
	return &BranchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Branch.
func (c *BranchClient) Update() *BranchUpdate {
	mutation := newBranchMutation(c.config, OpUpdate)
	return &BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchClient) UpdateOne(b *Branch) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(b))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchClient) UpdateOneID(id uint64) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranchID(id))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Branch.
func (c *BranchClient) Delete() *BranchDelete {
	mutation := newBranchMutation(c.config, OpDelete)
	return &BranchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BranchClient) DeleteOne(b *Branch) *BranchDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BranchClient) DeleteOneID(id uint64) *BranchDeleteOne {
	builder := c.Delete().Where(branch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchDeleteOne{builder}
}

// Query returns a query builder for Branch.
func (c *BranchClient) Query() *BranchQuery {
	return &BranchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBranch},
		inters: c.Interceptors(),
	}
}

// Get returns a Branch entity by its id.
func (c *BranchClient) Get(ctx context.Context, id uint64) (*Branch, error) {
	return c.Query().Where(branch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchClient) GetX(ctx context.Context, id uint64) *Branch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Branch.
func (c *BranchClient) QueryCity(b *Branch) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, branch.CityTable, branch.CityColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContracts queries the contracts edge of a Branch.
func (c *BranchClient) QueryContracts(b *Branch) *BranchContractQuery {
	query := (&BranchContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(branchcontract.Table, branchcontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.ContractsTable, branch.ContractsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinets queries the cabinets edge of a Branch.
func (c *BranchClient) QueryCabinets(b *Branch) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.CabinetsTable, branch.CabinetsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFaults queries the faults edge of a Branch.
func (c *BranchClient) QueryFaults(b *Branch) *CabinetFaultQuery {
	query := (&CabinetFaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(cabinetfault.Table, cabinetfault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.FaultsTable, branch.FaultsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStores queries the stores edge of a Branch.
func (c *BranchClient) QueryStores(b *Branch) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.StoresTable, branch.StoresColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BranchClient) Hooks() []Hook {
	hooks := c.hooks.Branch
	return append(hooks[:len(hooks):len(hooks)], branch.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BranchClient) Interceptors() []Interceptor {
	return c.inters.Branch
}

func (c *BranchClient) mutate(ctx context.Context, m *BranchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BranchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BranchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Branch mutation op: %q", m.Op())
	}
}

// BranchContractClient is a client for the BranchContract schema.
type BranchContractClient struct {
	config
}

// NewBranchContractClient returns a client for the BranchContract from the given config.
func NewBranchContractClient(c config) *BranchContractClient {
	return &BranchContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branchcontract.Hooks(f(g(h())))`.
func (c *BranchContractClient) Use(hooks ...Hook) {
	c.hooks.BranchContract = append(c.hooks.BranchContract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `branchcontract.Intercept(f(g(h())))`.
func (c *BranchContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.BranchContract = append(c.inters.BranchContract, interceptors...)
}

// Create returns a builder for creating a BranchContract entity.
func (c *BranchContractClient) Create() *BranchContractCreate {
	mutation := newBranchContractMutation(c.config, OpCreate)
	return &BranchContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BranchContract entities.
func (c *BranchContractClient) CreateBulk(builders ...*BranchContractCreate) *BranchContractCreateBulk {
	return &BranchContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BranchContract.
func (c *BranchContractClient) Update() *BranchContractUpdate {
	mutation := newBranchContractMutation(c.config, OpUpdate)
	return &BranchContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchContractClient) UpdateOne(bc *BranchContract) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContract(bc))
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchContractClient) UpdateOneID(id uint64) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContractID(id))
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BranchContract.
func (c *BranchContractClient) Delete() *BranchContractDelete {
	mutation := newBranchContractMutation(c.config, OpDelete)
	return &BranchContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BranchContractClient) DeleteOne(bc *BranchContract) *BranchContractDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BranchContractClient) DeleteOneID(id uint64) *BranchContractDeleteOne {
	builder := c.Delete().Where(branchcontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchContractDeleteOne{builder}
}

// Query returns a query builder for BranchContract.
func (c *BranchContractClient) Query() *BranchContractQuery {
	return &BranchContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBranchContract},
		inters: c.Interceptors(),
	}
}

// Get returns a BranchContract entity by its id.
func (c *BranchContractClient) Get(ctx context.Context, id uint64) (*BranchContract, error) {
	return c.Query().Where(branchcontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchContractClient) GetX(ctx context.Context, id uint64) *BranchContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBranch queries the branch edge of a BranchContract.
func (c *BranchContractClient) QueryBranch(bc *BranchContract) *BranchQuery {
	query := (&BranchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branchcontract.Table, branchcontract.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, branchcontract.BranchTable, branchcontract.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BranchContractClient) Hooks() []Hook {
	hooks := c.hooks.BranchContract
	return append(hooks[:len(hooks):len(hooks)], branchcontract.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BranchContractClient) Interceptors() []Interceptor {
	return c.inters.BranchContract
}

func (c *BranchContractClient) mutate(ctx context.Context, m *BranchContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BranchContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BranchContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BranchContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BranchContract mutation op: %q", m.Op())
	}
}

// BusinessClient is a client for the Business schema.
type BusinessClient struct {
	config
}

// NewBusinessClient returns a client for the Business from the given config.
func NewBusinessClient(c config) *BusinessClient {
	return &BusinessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `business.Hooks(f(g(h())))`.
func (c *BusinessClient) Use(hooks ...Hook) {
	c.hooks.Business = append(c.hooks.Business, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `business.Intercept(f(g(h())))`.
func (c *BusinessClient) Intercept(interceptors ...Interceptor) {
	c.inters.Business = append(c.inters.Business, interceptors...)
}

// Create returns a builder for creating a Business entity.
func (c *BusinessClient) Create() *BusinessCreate {
	mutation := newBusinessMutation(c.config, OpCreate)
	return &BusinessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Business entities.
func (c *BusinessClient) CreateBulk(builders ...*BusinessCreate) *BusinessCreateBulk {
	return &BusinessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Business.
func (c *BusinessClient) Update() *BusinessUpdate {
	mutation := newBusinessMutation(c.config, OpUpdate)
	return &BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusinessClient) UpdateOne(b *Business) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusiness(b))
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusinessClient) UpdateOneID(id uint64) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusinessID(id))
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Business.
func (c *BusinessClient) Delete() *BusinessDelete {
	mutation := newBusinessMutation(c.config, OpDelete)
	return &BusinessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusinessClient) DeleteOne(b *Business) *BusinessDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusinessClient) DeleteOneID(id uint64) *BusinessDeleteOne {
	builder := c.Delete().Where(business.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusinessDeleteOne{builder}
}

// Query returns a query builder for Business.
func (c *BusinessClient) Query() *BusinessQuery {
	return &BusinessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusiness},
		inters: c.Interceptors(),
	}
}

// Get returns a Business entity by its id.
func (c *BusinessClient) Get(ctx context.Context, id uint64) (*Business, error) {
	return c.Query().Where(business.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusinessClient) GetX(ctx context.Context, id uint64) *Business {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Business.
func (c *BusinessClient) QueryRider(b *Business) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.RiderTable, business.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Business.
func (c *BusinessClient) QueryCity(b *Business) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.CityTable, business.CityColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Business.
func (c *BusinessClient) QuerySubscribe(b *Business) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.SubscribeTable, business.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Business.
func (c *BusinessClient) QueryEmployee(b *Business) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.EmployeeTable, business.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Business.
func (c *BusinessClient) QueryStore(b *Business) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.StoreTable, business.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a Business.
func (c *BusinessClient) QueryPlan(b *Business) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.PlanTable, business.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Business.
func (c *BusinessClient) QueryEnterprise(b *Business) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.EnterpriseTable, business.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Business.
func (c *BusinessClient) QueryStation(b *Business) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.StationTable, business.StationColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Business.
func (c *BusinessClient) QueryCabinet(b *Business) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.CabinetTable, business.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Business.
func (c *BusinessClient) QueryBattery(b *Business) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.BatteryTable, business.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusinessClient) Hooks() []Hook {
	hooks := c.hooks.Business
	return append(hooks[:len(hooks):len(hooks)], business.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BusinessClient) Interceptors() []Interceptor {
	return c.inters.Business
}

func (c *BusinessClient) mutate(ctx context.Context, m *BusinessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusinessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusinessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Business mutation op: %q", m.Op())
	}
}

// CabinetClient is a client for the Cabinet schema.
type CabinetClient struct {
	config
}

// NewCabinetClient returns a client for the Cabinet from the given config.
func NewCabinetClient(c config) *CabinetClient {
	return &CabinetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cabinet.Hooks(f(g(h())))`.
func (c *CabinetClient) Use(hooks ...Hook) {
	c.hooks.Cabinet = append(c.hooks.Cabinet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cabinet.Intercept(f(g(h())))`.
func (c *CabinetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cabinet = append(c.inters.Cabinet, interceptors...)
}

// Create returns a builder for creating a Cabinet entity.
func (c *CabinetClient) Create() *CabinetCreate {
	mutation := newCabinetMutation(c.config, OpCreate)
	return &CabinetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cabinet entities.
func (c *CabinetClient) CreateBulk(builders ...*CabinetCreate) *CabinetCreateBulk {
	return &CabinetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cabinet.
func (c *CabinetClient) Update() *CabinetUpdate {
	mutation := newCabinetMutation(c.config, OpUpdate)
	return &CabinetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CabinetClient) UpdateOne(ca *Cabinet) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinet(ca))
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CabinetClient) UpdateOneID(id uint64) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinetID(id))
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cabinet.
func (c *CabinetClient) Delete() *CabinetDelete {
	mutation := newCabinetMutation(c.config, OpDelete)
	return &CabinetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CabinetClient) DeleteOne(ca *Cabinet) *CabinetDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CabinetClient) DeleteOneID(id uint64) *CabinetDeleteOne {
	builder := c.Delete().Where(cabinet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CabinetDeleteOne{builder}
}

// Query returns a query builder for Cabinet.
func (c *CabinetClient) Query() *CabinetQuery {
	return &CabinetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCabinet},
		inters: c.Interceptors(),
	}
}

// Get returns a Cabinet entity by its id.
func (c *CabinetClient) Get(ctx context.Context, id uint64) (*Cabinet, error) {
	return c.Query().Where(cabinet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CabinetClient) GetX(ctx context.Context, id uint64) *Cabinet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Cabinet.
func (c *CabinetClient) QueryCity(ca *Cabinet) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cabinet.CityTable, cabinet.CityColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBranch queries the branch edge of a Cabinet.
func (c *CabinetClient) QueryBranch(ca *Cabinet) *BranchQuery {
	query := (&BranchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinet.BranchTable, cabinet.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModels queries the models edge of a Cabinet.
func (c *CabinetClient) QueryModels(ca *Cabinet) *BatteryModelQuery {
	query := (&BatteryModelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(batterymodel.Table, batterymodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cabinet.ModelsTable, cabinet.ModelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFaults queries the faults edge of a Cabinet.
func (c *CabinetClient) QueryFaults(ca *Cabinet) *CabinetFaultQuery {
	query := (&CabinetFaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(cabinetfault.Table, cabinetfault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.FaultsTable, cabinet.FaultsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExchanges queries the exchanges edge of a Cabinet.
func (c *CabinetClient) QueryExchanges(ca *Cabinet) *ExchangeQuery {
	query := (&ExchangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.ExchangesTable, cabinet.ExchangesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Cabinet.
func (c *CabinetClient) QueryStocks(ca *Cabinet) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.StocksTable, cabinet.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteries queries the batteries edge of a Cabinet.
func (c *CabinetClient) QueryBatteries(ca *Cabinet) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.BatteriesTable, cabinet.BatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteryFlows queries the battery_flows edge of a Cabinet.
func (c *CabinetClient) QueryBatteryFlows(ca *Cabinet) *BatteryFlowQuery {
	query := (&BatteryFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(batteryflow.Table, batteryflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.BatteryFlowsTable, cabinet.BatteryFlowsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Cabinet.
func (c *CabinetClient) QueryStation(ca *Cabinet) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinet.StationTable, cabinet.StationColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Cabinet.
func (c *CabinetClient) QueryEnterprise(ca *Cabinet) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinet.EnterpriseTable, cabinet.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CabinetClient) Hooks() []Hook {
	hooks := c.hooks.Cabinet
	return append(hooks[:len(hooks):len(hooks)], cabinet.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CabinetClient) Interceptors() []Interceptor {
	return c.inters.Cabinet
}

func (c *CabinetClient) mutate(ctx context.Context, m *CabinetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CabinetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CabinetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CabinetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cabinet mutation op: %q", m.Op())
	}
}

// CabinetFaultClient is a client for the CabinetFault schema.
type CabinetFaultClient struct {
	config
}

// NewCabinetFaultClient returns a client for the CabinetFault from the given config.
func NewCabinetFaultClient(c config) *CabinetFaultClient {
	return &CabinetFaultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cabinetfault.Hooks(f(g(h())))`.
func (c *CabinetFaultClient) Use(hooks ...Hook) {
	c.hooks.CabinetFault = append(c.hooks.CabinetFault, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cabinetfault.Intercept(f(g(h())))`.
func (c *CabinetFaultClient) Intercept(interceptors ...Interceptor) {
	c.inters.CabinetFault = append(c.inters.CabinetFault, interceptors...)
}

// Create returns a builder for creating a CabinetFault entity.
func (c *CabinetFaultClient) Create() *CabinetFaultCreate {
	mutation := newCabinetFaultMutation(c.config, OpCreate)
	return &CabinetFaultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CabinetFault entities.
func (c *CabinetFaultClient) CreateBulk(builders ...*CabinetFaultCreate) *CabinetFaultCreateBulk {
	return &CabinetFaultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CabinetFault.
func (c *CabinetFaultClient) Update() *CabinetFaultUpdate {
	mutation := newCabinetFaultMutation(c.config, OpUpdate)
	return &CabinetFaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CabinetFaultClient) UpdateOne(cf *CabinetFault) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFault(cf))
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CabinetFaultClient) UpdateOneID(id uint64) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFaultID(id))
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CabinetFault.
func (c *CabinetFaultClient) Delete() *CabinetFaultDelete {
	mutation := newCabinetFaultMutation(c.config, OpDelete)
	return &CabinetFaultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CabinetFaultClient) DeleteOne(cf *CabinetFault) *CabinetFaultDeleteOne {
	return c.DeleteOneID(cf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CabinetFaultClient) DeleteOneID(id uint64) *CabinetFaultDeleteOne {
	builder := c.Delete().Where(cabinetfault.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CabinetFaultDeleteOne{builder}
}

// Query returns a query builder for CabinetFault.
func (c *CabinetFaultClient) Query() *CabinetFaultQuery {
	return &CabinetFaultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCabinetFault},
		inters: c.Interceptors(),
	}
}

// Get returns a CabinetFault entity by its id.
func (c *CabinetFaultClient) Get(ctx context.Context, id uint64) (*CabinetFault, error) {
	return c.Query().Where(cabinetfault.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CabinetFaultClient) GetX(ctx context.Context, id uint64) *CabinetFault {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a CabinetFault.
func (c *CabinetFaultClient) QueryCity(cf *CabinetFault) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cabinetfault.CityTable, cabinetfault.CityColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBranch queries the branch edge of a CabinetFault.
func (c *CabinetFaultClient) QueryBranch(cf *CabinetFault) *BranchQuery {
	query := (&BranchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.BranchTable, cabinetfault.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a CabinetFault.
func (c *CabinetFaultClient) QueryCabinet(cf *CabinetFault) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.CabinetTable, cabinetfault.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a CabinetFault.
func (c *CabinetFaultClient) QueryRider(cf *CabinetFault) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.RiderTable, cabinetfault.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CabinetFaultClient) Hooks() []Hook {
	hooks := c.hooks.CabinetFault
	return append(hooks[:len(hooks):len(hooks)], cabinetfault.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CabinetFaultClient) Interceptors() []Interceptor {
	return c.inters.CabinetFault
}

func (c *CabinetFaultClient) mutate(ctx context.Context, m *CabinetFaultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CabinetFaultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CabinetFaultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CabinetFaultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CabinetFault mutation op: %q", m.Op())
	}
}

// CityClient is a client for the City schema.
type CityClient struct {
	config
}

// NewCityClient returns a client for the City from the given config.
func NewCityClient(c config) *CityClient {
	return &CityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `city.Hooks(f(g(h())))`.
func (c *CityClient) Use(hooks ...Hook) {
	c.hooks.City = append(c.hooks.City, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `city.Intercept(f(g(h())))`.
func (c *CityClient) Intercept(interceptors ...Interceptor) {
	c.inters.City = append(c.inters.City, interceptors...)
}

// Create returns a builder for creating a City entity.
func (c *CityClient) Create() *CityCreate {
	mutation := newCityMutation(c.config, OpCreate)
	return &CityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of City entities.
func (c *CityClient) CreateBulk(builders ...*CityCreate) *CityCreateBulk {
	return &CityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for City.
func (c *CityClient) Update() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CityClient) UpdateOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CityClient) UpdateOneID(id uint64) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for City.
func (c *CityClient) Delete() *CityDelete {
	mutation := newCityMutation(c.config, OpDelete)
	return &CityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CityClient) DeleteOne(ci *City) *CityDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CityClient) DeleteOneID(id uint64) *CityDeleteOne {
	builder := c.Delete().Where(city.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CityDeleteOne{builder}
}

// Query returns a query builder for City.
func (c *CityClient) Query() *CityQuery {
	return &CityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCity},
		inters: c.Interceptors(),
	}
}

// Get returns a City entity by its id.
func (c *CityClient) Get(ctx context.Context, id uint64) (*City, error) {
	return c.Query().Where(city.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CityClient) GetX(ctx context.Context, id uint64) *City {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a City.
func (c *CityClient) QueryParent(ci *City) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, city.ParentTable, city.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a City.
func (c *CityClient) QueryChildren(ci *City) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.ChildrenTable, city.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlans queries the plans edge of a City.
func (c *CityClient) QueryPlans(ci *City) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, city.PlansTable, city.PlansPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CityClient) Hooks() []Hook {
	hooks := c.hooks.City
	return append(hooks[:len(hooks):len(hooks)], city.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CityClient) Interceptors() []Interceptor {
	return c.inters.City
}

func (c *CityClient) mutate(ctx context.Context, m *CityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown City mutation op: %q", m.Op())
	}
}

// CommissionClient is a client for the Commission schema.
type CommissionClient struct {
	config
}

// NewCommissionClient returns a client for the Commission from the given config.
func NewCommissionClient(c config) *CommissionClient {
	return &CommissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commission.Hooks(f(g(h())))`.
func (c *CommissionClient) Use(hooks ...Hook) {
	c.hooks.Commission = append(c.hooks.Commission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commission.Intercept(f(g(h())))`.
func (c *CommissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Commission = append(c.inters.Commission, interceptors...)
}

// Create returns a builder for creating a Commission entity.
func (c *CommissionClient) Create() *CommissionCreate {
	mutation := newCommissionMutation(c.config, OpCreate)
	return &CommissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Commission entities.
func (c *CommissionClient) CreateBulk(builders ...*CommissionCreate) *CommissionCreateBulk {
	return &CommissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Commission.
func (c *CommissionClient) Update() *CommissionUpdate {
	mutation := newCommissionMutation(c.config, OpUpdate)
	return &CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommissionClient) UpdateOne(co *Commission) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(co))
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommissionClient) UpdateOneID(id uint64) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommissionID(id))
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Commission.
func (c *CommissionClient) Delete() *CommissionDelete {
	mutation := newCommissionMutation(c.config, OpDelete)
	return &CommissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommissionClient) DeleteOne(co *Commission) *CommissionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommissionClient) DeleteOneID(id uint64) *CommissionDeleteOne {
	builder := c.Delete().Where(commission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommissionDeleteOne{builder}
}

// Query returns a query builder for Commission.
func (c *CommissionClient) Query() *CommissionQuery {
	return &CommissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommission},
		inters: c.Interceptors(),
	}
}

// Get returns a Commission entity by its id.
func (c *CommissionClient) Get(ctx context.Context, id uint64) (*Commission, error) {
	return c.Query().Where(commission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommissionClient) GetX(ctx context.Context, id uint64) *Commission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusiness queries the business edge of a Commission.
func (c *CommissionClient) QueryBusiness(co *Commission) *BusinessQuery {
	query := (&BusinessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commission.BusinessTable, commission.BusinessColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Commission.
func (c *CommissionClient) QuerySubscribe(co *Commission) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commission.SubscribeTable, commission.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a Commission.
func (c *CommissionClient) QueryPlan(co *Commission) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commission.PlanTable, commission.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Commission.
func (c *CommissionClient) QueryRider(co *Commission) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commission.RiderTable, commission.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a Commission.
func (c *CommissionClient) QueryOrder(co *Commission) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, commission.OrderTable, commission.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Commission.
func (c *CommissionClient) QueryEmployee(co *Commission) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, commission.EmployeeTable, commission.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommissionClient) Hooks() []Hook {
	hooks := c.hooks.Commission
	return append(hooks[:len(hooks):len(hooks)], commission.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CommissionClient) Interceptors() []Interceptor {
	return c.inters.Commission
}

func (c *CommissionClient) mutate(ctx context.Context, m *CommissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Commission mutation op: %q", m.Op())
	}
}

// ContractClient is a client for the Contract schema.
type ContractClient struct {
	config
}

// NewContractClient returns a client for the Contract from the given config.
func NewContractClient(c config) *ContractClient {
	return &ContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contract.Hooks(f(g(h())))`.
func (c *ContractClient) Use(hooks ...Hook) {
	c.hooks.Contract = append(c.hooks.Contract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contract.Intercept(f(g(h())))`.
func (c *ContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contract = append(c.inters.Contract, interceptors...)
}

// Create returns a builder for creating a Contract entity.
func (c *ContractClient) Create() *ContractCreate {
	mutation := newContractMutation(c.config, OpCreate)
	return &ContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contract entities.
func (c *ContractClient) CreateBulk(builders ...*ContractCreate) *ContractCreateBulk {
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contract.
func (c *ContractClient) Update() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractClient) UpdateOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractClient) UpdateOneID(id uint64) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contract.
func (c *ContractClient) Delete() *ContractDelete {
	mutation := newContractMutation(c.config, OpDelete)
	return &ContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContractClient) DeleteOne(co *Contract) *ContractDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContractClient) DeleteOneID(id uint64) *ContractDeleteOne {
	builder := c.Delete().Where(contract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractDeleteOne{builder}
}

// Query returns a query builder for Contract.
func (c *ContractClient) Query() *ContractQuery {
	return &ContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContract},
		inters: c.Interceptors(),
	}
}

// Get returns a Contract entity by its id.
func (c *ContractClient) Get(ctx context.Context, id uint64) (*Contract, error) {
	return c.Query().Where(contract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractClient) GetX(ctx context.Context, id uint64) *Contract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribe queries the subscribe edge of a Contract.
func (c *ContractClient) QuerySubscribe(co *Contract) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contract.SubscribeTable, contract.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Contract.
func (c *ContractClient) QueryEmployee(co *Contract) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contract.EmployeeTable, contract.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Contract.
func (c *ContractClient) QueryRider(co *Contract) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contract.RiderTable, contract.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllocate queries the allocate edge of a Contract.
func (c *ContractClient) QueryAllocate(co *Contract) *AllocateQuery {
	query := (&AllocateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(allocate.Table, allocate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, contract.AllocateTable, contract.AllocateColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContractClient) Hooks() []Hook {
	hooks := c.hooks.Contract
	return append(hooks[:len(hooks):len(hooks)], contract.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ContractClient) Interceptors() []Interceptor {
	return c.inters.Contract
}

func (c *ContractClient) mutate(ctx context.Context, m *ContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Contract mutation op: %q", m.Op())
	}
}

// CouponClient is a client for the Coupon schema.
type CouponClient struct {
	config
}

// NewCouponClient returns a client for the Coupon from the given config.
func NewCouponClient(c config) *CouponClient {
	return &CouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupon.Hooks(f(g(h())))`.
func (c *CouponClient) Use(hooks ...Hook) {
	c.hooks.Coupon = append(c.hooks.Coupon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coupon.Intercept(f(g(h())))`.
func (c *CouponClient) Intercept(interceptors ...Interceptor) {
	c.inters.Coupon = append(c.inters.Coupon, interceptors...)
}

// Create returns a builder for creating a Coupon entity.
func (c *CouponClient) Create() *CouponCreate {
	mutation := newCouponMutation(c.config, OpCreate)
	return &CouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coupon entities.
func (c *CouponClient) CreateBulk(builders ...*CouponCreate) *CouponCreateBulk {
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coupon.
func (c *CouponClient) Update() *CouponUpdate {
	mutation := newCouponMutation(c.config, OpUpdate)
	return &CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponClient) UpdateOne(co *Coupon) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(co))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponClient) UpdateOneID(id uint64) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCouponID(id))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coupon.
func (c *CouponClient) Delete() *CouponDelete {
	mutation := newCouponMutation(c.config, OpDelete)
	return &CouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponClient) DeleteOne(co *Coupon) *CouponDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CouponClient) DeleteOneID(id uint64) *CouponDeleteOne {
	builder := c.Delete().Where(coupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDeleteOne{builder}
}

// Query returns a query builder for Coupon.
func (c *CouponClient) Query() *CouponQuery {
	return &CouponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoupon},
		inters: c.Interceptors(),
	}
}

// Get returns a Coupon entity by its id.
func (c *CouponClient) Get(ctx context.Context, id uint64) (*Coupon, error) {
	return c.Query().Where(coupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponClient) GetX(ctx context.Context, id uint64) *Coupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Coupon.
func (c *CouponClient) QueryRider(co *Coupon) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.RiderTable, coupon.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssembly queries the assembly edge of a Coupon.
func (c *CouponClient) QueryAssembly(co *Coupon) *CouponAssemblyQuery {
	query := (&CouponAssemblyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(couponassembly.Table, couponassembly.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.AssemblyTable, coupon.AssemblyColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a Coupon.
func (c *CouponClient) QueryPlan(co *Coupon) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.PlanTable, coupon.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a Coupon.
func (c *CouponClient) QueryTemplate(co *Coupon) *CouponTemplateQuery {
	query := (&CouponTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(coupontemplate.Table, coupontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coupon.TemplateTable, coupon.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a Coupon.
func (c *CouponClient) QueryOrder(co *Coupon) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coupon.OrderTable, coupon.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponClient) Hooks() []Hook {
	hooks := c.hooks.Coupon
	return append(hooks[:len(hooks):len(hooks)], coupon.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CouponClient) Interceptors() []Interceptor {
	return c.inters.Coupon
}

func (c *CouponClient) mutate(ctx context.Context, m *CouponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CouponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CouponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Coupon mutation op: %q", m.Op())
	}
}

// CouponAssemblyClient is a client for the CouponAssembly schema.
type CouponAssemblyClient struct {
	config
}

// NewCouponAssemblyClient returns a client for the CouponAssembly from the given config.
func NewCouponAssemblyClient(c config) *CouponAssemblyClient {
	return &CouponAssemblyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponassembly.Hooks(f(g(h())))`.
func (c *CouponAssemblyClient) Use(hooks ...Hook) {
	c.hooks.CouponAssembly = append(c.hooks.CouponAssembly, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `couponassembly.Intercept(f(g(h())))`.
func (c *CouponAssemblyClient) Intercept(interceptors ...Interceptor) {
	c.inters.CouponAssembly = append(c.inters.CouponAssembly, interceptors...)
}

// Create returns a builder for creating a CouponAssembly entity.
func (c *CouponAssemblyClient) Create() *CouponAssemblyCreate {
	mutation := newCouponAssemblyMutation(c.config, OpCreate)
	return &CouponAssemblyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponAssembly entities.
func (c *CouponAssemblyClient) CreateBulk(builders ...*CouponAssemblyCreate) *CouponAssemblyCreateBulk {
	return &CouponAssemblyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponAssembly.
func (c *CouponAssemblyClient) Update() *CouponAssemblyUpdate {
	mutation := newCouponAssemblyMutation(c.config, OpUpdate)
	return &CouponAssemblyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponAssemblyClient) UpdateOne(ca *CouponAssembly) *CouponAssemblyUpdateOne {
	mutation := newCouponAssemblyMutation(c.config, OpUpdateOne, withCouponAssembly(ca))
	return &CouponAssemblyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponAssemblyClient) UpdateOneID(id uint64) *CouponAssemblyUpdateOne {
	mutation := newCouponAssemblyMutation(c.config, OpUpdateOne, withCouponAssemblyID(id))
	return &CouponAssemblyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponAssembly.
func (c *CouponAssemblyClient) Delete() *CouponAssemblyDelete {
	mutation := newCouponAssemblyMutation(c.config, OpDelete)
	return &CouponAssemblyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponAssemblyClient) DeleteOne(ca *CouponAssembly) *CouponAssemblyDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CouponAssemblyClient) DeleteOneID(id uint64) *CouponAssemblyDeleteOne {
	builder := c.Delete().Where(couponassembly.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponAssemblyDeleteOne{builder}
}

// Query returns a query builder for CouponAssembly.
func (c *CouponAssemblyClient) Query() *CouponAssemblyQuery {
	return &CouponAssemblyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCouponAssembly},
		inters: c.Interceptors(),
	}
}

// Get returns a CouponAssembly entity by its id.
func (c *CouponAssemblyClient) Get(ctx context.Context, id uint64) (*CouponAssembly, error) {
	return c.Query().Where(couponassembly.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponAssemblyClient) GetX(ctx context.Context, id uint64) *CouponAssembly {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTemplate queries the template edge of a CouponAssembly.
func (c *CouponAssemblyClient) QueryTemplate(ca *CouponAssembly) *CouponTemplateQuery {
	query := (&CouponTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(couponassembly.Table, couponassembly.FieldID, id),
			sqlgraph.To(coupontemplate.Table, coupontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, couponassembly.TemplateTable, couponassembly.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponAssemblyClient) Hooks() []Hook {
	hooks := c.hooks.CouponAssembly
	return append(hooks[:len(hooks):len(hooks)], couponassembly.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CouponAssemblyClient) Interceptors() []Interceptor {
	return c.inters.CouponAssembly
}

func (c *CouponAssemblyClient) mutate(ctx context.Context, m *CouponAssemblyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CouponAssemblyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CouponAssemblyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CouponAssemblyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CouponAssemblyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CouponAssembly mutation op: %q", m.Op())
	}
}

// CouponTemplateClient is a client for the CouponTemplate schema.
type CouponTemplateClient struct {
	config
}

// NewCouponTemplateClient returns a client for the CouponTemplate from the given config.
func NewCouponTemplateClient(c config) *CouponTemplateClient {
	return &CouponTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupontemplate.Hooks(f(g(h())))`.
func (c *CouponTemplateClient) Use(hooks ...Hook) {
	c.hooks.CouponTemplate = append(c.hooks.CouponTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coupontemplate.Intercept(f(g(h())))`.
func (c *CouponTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.CouponTemplate = append(c.inters.CouponTemplate, interceptors...)
}

// Create returns a builder for creating a CouponTemplate entity.
func (c *CouponTemplateClient) Create() *CouponTemplateCreate {
	mutation := newCouponTemplateMutation(c.config, OpCreate)
	return &CouponTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponTemplate entities.
func (c *CouponTemplateClient) CreateBulk(builders ...*CouponTemplateCreate) *CouponTemplateCreateBulk {
	return &CouponTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponTemplate.
func (c *CouponTemplateClient) Update() *CouponTemplateUpdate {
	mutation := newCouponTemplateMutation(c.config, OpUpdate)
	return &CouponTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponTemplateClient) UpdateOne(ct *CouponTemplate) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplate(ct))
	return &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponTemplateClient) UpdateOneID(id uint64) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplateID(id))
	return &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponTemplate.
func (c *CouponTemplateClient) Delete() *CouponTemplateDelete {
	mutation := newCouponTemplateMutation(c.config, OpDelete)
	return &CouponTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponTemplateClient) DeleteOne(ct *CouponTemplate) *CouponTemplateDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CouponTemplateClient) DeleteOneID(id uint64) *CouponTemplateDeleteOne {
	builder := c.Delete().Where(coupontemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponTemplateDeleteOne{builder}
}

// Query returns a query builder for CouponTemplate.
func (c *CouponTemplateClient) Query() *CouponTemplateQuery {
	return &CouponTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCouponTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a CouponTemplate entity by its id.
func (c *CouponTemplateClient) Get(ctx context.Context, id uint64) (*CouponTemplate, error) {
	return c.Query().Where(coupontemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponTemplateClient) GetX(ctx context.Context, id uint64) *CouponTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoupons queries the coupons edge of a CouponTemplate.
func (c *CouponTemplateClient) QueryCoupons(ct *CouponTemplate) *CouponQuery {
	query := (&CouponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupontemplate.Table, coupontemplate.FieldID, id),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, coupontemplate.CouponsTable, coupontemplate.CouponsColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponTemplateClient) Hooks() []Hook {
	hooks := c.hooks.CouponTemplate
	return append(hooks[:len(hooks):len(hooks)], coupontemplate.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CouponTemplateClient) Interceptors() []Interceptor {
	return c.inters.CouponTemplate
}

func (c *CouponTemplateClient) mutate(ctx context.Context, m *CouponTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CouponTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CouponTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CouponTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CouponTemplate mutation op: %q", m.Op())
	}
}

// EbikeClient is a client for the Ebike schema.
type EbikeClient struct {
	config
}

// NewEbikeClient returns a client for the Ebike from the given config.
func NewEbikeClient(c config) *EbikeClient {
	return &EbikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ebike.Hooks(f(g(h())))`.
func (c *EbikeClient) Use(hooks ...Hook) {
	c.hooks.Ebike = append(c.hooks.Ebike, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ebike.Intercept(f(g(h())))`.
func (c *EbikeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ebike = append(c.inters.Ebike, interceptors...)
}

// Create returns a builder for creating a Ebike entity.
func (c *EbikeClient) Create() *EbikeCreate {
	mutation := newEbikeMutation(c.config, OpCreate)
	return &EbikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ebike entities.
func (c *EbikeClient) CreateBulk(builders ...*EbikeCreate) *EbikeCreateBulk {
	return &EbikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ebike.
func (c *EbikeClient) Update() *EbikeUpdate {
	mutation := newEbikeMutation(c.config, OpUpdate)
	return &EbikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EbikeClient) UpdateOne(e *Ebike) *EbikeUpdateOne {
	mutation := newEbikeMutation(c.config, OpUpdateOne, withEbike(e))
	return &EbikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EbikeClient) UpdateOneID(id uint64) *EbikeUpdateOne {
	mutation := newEbikeMutation(c.config, OpUpdateOne, withEbikeID(id))
	return &EbikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ebike.
func (c *EbikeClient) Delete() *EbikeDelete {
	mutation := newEbikeMutation(c.config, OpDelete)
	return &EbikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EbikeClient) DeleteOne(e *Ebike) *EbikeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EbikeClient) DeleteOneID(id uint64) *EbikeDeleteOne {
	builder := c.Delete().Where(ebike.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EbikeDeleteOne{builder}
}

// Query returns a query builder for Ebike.
func (c *EbikeClient) Query() *EbikeQuery {
	return &EbikeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEbike},
		inters: c.Interceptors(),
	}
}

// Get returns a Ebike entity by its id.
func (c *EbikeClient) Get(ctx context.Context, id uint64) (*Ebike, error) {
	return c.Query().Where(ebike.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EbikeClient) GetX(ctx context.Context, id uint64) *Ebike {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a Ebike.
func (c *EbikeClient) QueryBrand(e *Ebike) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.BrandTable, ebike.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Ebike.
func (c *EbikeClient) QueryRider(e *Ebike) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.RiderTable, ebike.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Ebike.
func (c *EbikeClient) QueryStore(e *Ebike) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.StoreTable, ebike.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Ebike.
func (c *EbikeClient) QueryEnterprise(e *Ebike) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.EnterpriseTable, ebike.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Ebike.
func (c *EbikeClient) QueryStation(e *Ebike) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.StationTable, ebike.StationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllocates queries the allocates edge of a Ebike.
func (c *EbikeClient) QueryAllocates(e *Ebike) *AllocateQuery {
	query := (&AllocateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(allocate.Table, allocate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ebike.AllocatesTable, ebike.AllocatesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EbikeClient) Hooks() []Hook {
	hooks := c.hooks.Ebike
	return append(hooks[:len(hooks):len(hooks)], ebike.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EbikeClient) Interceptors() []Interceptor {
	return c.inters.Ebike
}

func (c *EbikeClient) mutate(ctx context.Context, m *EbikeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EbikeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EbikeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EbikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EbikeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ebike mutation op: %q", m.Op())
	}
}

// EbikeBrandClient is a client for the EbikeBrand schema.
type EbikeBrandClient struct {
	config
}

// NewEbikeBrandClient returns a client for the EbikeBrand from the given config.
func NewEbikeBrandClient(c config) *EbikeBrandClient {
	return &EbikeBrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ebikebrand.Hooks(f(g(h())))`.
func (c *EbikeBrandClient) Use(hooks ...Hook) {
	c.hooks.EbikeBrand = append(c.hooks.EbikeBrand, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ebikebrand.Intercept(f(g(h())))`.
func (c *EbikeBrandClient) Intercept(interceptors ...Interceptor) {
	c.inters.EbikeBrand = append(c.inters.EbikeBrand, interceptors...)
}

// Create returns a builder for creating a EbikeBrand entity.
func (c *EbikeBrandClient) Create() *EbikeBrandCreate {
	mutation := newEbikeBrandMutation(c.config, OpCreate)
	return &EbikeBrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EbikeBrand entities.
func (c *EbikeBrandClient) CreateBulk(builders ...*EbikeBrandCreate) *EbikeBrandCreateBulk {
	return &EbikeBrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EbikeBrand.
func (c *EbikeBrandClient) Update() *EbikeBrandUpdate {
	mutation := newEbikeBrandMutation(c.config, OpUpdate)
	return &EbikeBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EbikeBrandClient) UpdateOne(eb *EbikeBrand) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrand(eb))
	return &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EbikeBrandClient) UpdateOneID(id uint64) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrandID(id))
	return &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EbikeBrand.
func (c *EbikeBrandClient) Delete() *EbikeBrandDelete {
	mutation := newEbikeBrandMutation(c.config, OpDelete)
	return &EbikeBrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EbikeBrandClient) DeleteOne(eb *EbikeBrand) *EbikeBrandDeleteOne {
	return c.DeleteOneID(eb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EbikeBrandClient) DeleteOneID(id uint64) *EbikeBrandDeleteOne {
	builder := c.Delete().Where(ebikebrand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EbikeBrandDeleteOne{builder}
}

// Query returns a query builder for EbikeBrand.
func (c *EbikeBrandClient) Query() *EbikeBrandQuery {
	return &EbikeBrandQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEbikeBrand},
		inters: c.Interceptors(),
	}
}

// Get returns a EbikeBrand entity by its id.
func (c *EbikeBrandClient) Get(ctx context.Context, id uint64) (*EbikeBrand, error) {
	return c.Query().Where(ebikebrand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EbikeBrandClient) GetX(ctx context.Context, id uint64) *EbikeBrand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EbikeBrandClient) Hooks() []Hook {
	hooks := c.hooks.EbikeBrand
	return append(hooks[:len(hooks):len(hooks)], ebikebrand.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EbikeBrandClient) Interceptors() []Interceptor {
	return c.inters.EbikeBrand
}

func (c *EbikeBrandClient) mutate(ctx context.Context, m *EbikeBrandMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EbikeBrandCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EbikeBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EbikeBrandDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EbikeBrand mutation op: %q", m.Op())
	}
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employee.Intercept(f(g(h())))`.
func (c *EmployeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employee = append(c.inters.Employee, interceptors...)
}

// Create returns a builder for creating a Employee entity.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employee entities.
func (c *EmployeeClient) CreateBulk(builders ...*EmployeeCreate) *EmployeeCreateBulk {
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id uint64) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeClient) DeleteOneID(id uint64) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Query returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployee},
		inters: c.Interceptors(),
	}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id uint64) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id uint64) *Employee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Employee.
func (c *EmployeeClient) QueryCity(e *Employee) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, employee.CityTable, employee.CityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Employee.
func (c *EmployeeClient) QueryStore(e *Employee) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, employee.StoreTable, employee.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttendances queries the attendances edge of a Employee.
func (c *EmployeeClient) QueryAttendances(e *Employee) *AttendanceQuery {
	query := (&AttendanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.AttendancesTable, employee.AttendancesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Employee.
func (c *EmployeeClient) QueryStocks(e *Employee) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.StocksTable, employee.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExchanges queries the exchanges edge of a Employee.
func (c *EmployeeClient) QueryExchanges(e *Employee) *ExchangeQuery {
	query := (&ExchangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.ExchangesTable, employee.ExchangesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommissions queries the commissions edge of a Employee.
func (c *EmployeeClient) QueryCommissions(e *Employee) *CommissionQuery {
	query := (&CommissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(commission.Table, commission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.CommissionsTable, employee.CommissionsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssistances queries the assistances edge of a Employee.
func (c *EmployeeClient) QueryAssistances(e *Employee) *AssistanceQuery {
	query := (&AssistanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(assistance.Table, assistance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.AssistancesTable, employee.AssistancesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	hooks := c.hooks.Employee
	return append(hooks[:len(hooks):len(hooks)], employee.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EmployeeClient) Interceptors() []Interceptor {
	return c.inters.Employee
}

func (c *EmployeeClient) mutate(ctx context.Context, m *EmployeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Employee mutation op: %q", m.Op())
	}
}

// EnterpriseClient is a client for the Enterprise schema.
type EnterpriseClient struct {
	config
}

// NewEnterpriseClient returns a client for the Enterprise from the given config.
func NewEnterpriseClient(c config) *EnterpriseClient {
	return &EnterpriseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprise.Hooks(f(g(h())))`.
func (c *EnterpriseClient) Use(hooks ...Hook) {
	c.hooks.Enterprise = append(c.hooks.Enterprise, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprise.Intercept(f(g(h())))`.
func (c *EnterpriseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Enterprise = append(c.inters.Enterprise, interceptors...)
}

// Create returns a builder for creating a Enterprise entity.
func (c *EnterpriseClient) Create() *EnterpriseCreate {
	mutation := newEnterpriseMutation(c.config, OpCreate)
	return &EnterpriseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Enterprise entities.
func (c *EnterpriseClient) CreateBulk(builders ...*EnterpriseCreate) *EnterpriseCreateBulk {
	return &EnterpriseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Enterprise.
func (c *EnterpriseClient) Update() *EnterpriseUpdate {
	mutation := newEnterpriseMutation(c.config, OpUpdate)
	return &EnterpriseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseClient) UpdateOne(e *Enterprise) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterprise(e))
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseClient) UpdateOneID(id uint64) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterpriseID(id))
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Enterprise.
func (c *EnterpriseClient) Delete() *EnterpriseDelete {
	mutation := newEnterpriseMutation(c.config, OpDelete)
	return &EnterpriseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseClient) DeleteOne(e *Enterprise) *EnterpriseDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseClient) DeleteOneID(id uint64) *EnterpriseDeleteOne {
	builder := c.Delete().Where(enterprise.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseDeleteOne{builder}
}

// Query returns a query builder for Enterprise.
func (c *EnterpriseClient) Query() *EnterpriseQuery {
	return &EnterpriseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterprise},
		inters: c.Interceptors(),
	}
}

// Get returns a Enterprise entity by its id.
func (c *EnterpriseClient) Get(ctx context.Context, id uint64) (*Enterprise, error) {
	return c.Query().Where(enterprise.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseClient) GetX(ctx context.Context, id uint64) *Enterprise {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Enterprise.
func (c *EnterpriseClient) QueryCity(e *Enterprise) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprise.CityTable, enterprise.CityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiders queries the riders edge of a Enterprise.
func (c *EnterpriseClient) QueryRiders(e *Enterprise) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.RidersTable, enterprise.RidersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContracts queries the contracts edge of a Enterprise.
func (c *EnterpriseClient) QueryContracts(e *Enterprise) *EnterpriseContractQuery {
	query := (&EnterpriseContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisecontract.Table, enterprisecontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.ContractsTable, enterprise.ContractsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrices queries the prices edge of a Enterprise.
func (c *EnterpriseClient) QueryPrices(e *Enterprise) *EnterprisePriceQuery {
	query := (&EnterprisePriceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterpriseprice.Table, enterpriseprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.PricesTable, enterprise.PricesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribes queries the subscribes edge of a Enterprise.
func (c *EnterpriseClient) QuerySubscribes(e *Enterprise) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SubscribesTable, enterprise.SubscribesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatements queries the statements edge of a Enterprise.
func (c *EnterpriseClient) QueryStatements(e *Enterprise) *EnterpriseStatementQuery {
	query := (&EnterpriseStatementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisestatement.Table, enterprisestatement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StatementsTable, enterprise.StatementsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStations queries the stations edge of a Enterprise.
func (c *EnterpriseClient) QueryStations(e *Enterprise) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StationsTable, enterprise.StationsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the bills edge of a Enterprise.
func (c *EnterpriseClient) QueryBills(e *Enterprise) *EnterpriseBillQuery {
	query := (&EnterpriseBillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisebill.Table, enterprisebill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.BillsTable, enterprise.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteries queries the batteries edge of a Enterprise.
func (c *EnterpriseClient) QueryBatteries(e *Enterprise) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.BatteriesTable, enterprise.BatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgents queries the agents edge of a Enterprise.
func (c *EnterpriseClient) QueryAgents(e *Enterprise) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.AgentsTable, enterprise.AgentsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinets queries the cabinets edge of a Enterprise.
func (c *EnterpriseClient) QueryCabinets(e *Enterprise) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.CabinetsTable, enterprise.CabinetsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Enterprise.
func (c *EnterpriseClient) QueryStocks(e *Enterprise) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StocksTable, enterprise.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwapPutinBatteries queries the swap_putin_batteries edge of a Enterprise.
func (c *EnterpriseClient) QuerySwapPutinBatteries(e *Enterprise) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SwapPutinBatteriesTable, enterprise.SwapPutinBatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwapPutoutBatteries queries the swap_putout_batteries edge of a Enterprise.
func (c *EnterpriseClient) QuerySwapPutoutBatteries(e *Enterprise) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SwapPutoutBatteriesTable, enterprise.SwapPutoutBatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseClient) Hooks() []Hook {
	hooks := c.hooks.Enterprise
	return append(hooks[:len(hooks):len(hooks)], enterprise.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseClient) Interceptors() []Interceptor {
	return c.inters.Enterprise
}

func (c *EnterpriseClient) mutate(ctx context.Context, m *EnterpriseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Enterprise mutation op: %q", m.Op())
	}
}

// EnterpriseBatterySwapClient is a client for the EnterpriseBatterySwap schema.
type EnterpriseBatterySwapClient struct {
	config
}

// NewEnterpriseBatterySwapClient returns a client for the EnterpriseBatterySwap from the given config.
func NewEnterpriseBatterySwapClient(c config) *EnterpriseBatterySwapClient {
	return &EnterpriseBatterySwapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisebatteryswap.Hooks(f(g(h())))`.
func (c *EnterpriseBatterySwapClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseBatterySwap = append(c.hooks.EnterpriseBatterySwap, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisebatteryswap.Intercept(f(g(h())))`.
func (c *EnterpriseBatterySwapClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseBatterySwap = append(c.inters.EnterpriseBatterySwap, interceptors...)
}

// Create returns a builder for creating a EnterpriseBatterySwap entity.
func (c *EnterpriseBatterySwapClient) Create() *EnterpriseBatterySwapCreate {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpCreate)
	return &EnterpriseBatterySwapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseBatterySwap entities.
func (c *EnterpriseBatterySwapClient) CreateBulk(builders ...*EnterpriseBatterySwapCreate) *EnterpriseBatterySwapCreateBulk {
	return &EnterpriseBatterySwapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) Update() *EnterpriseBatterySwapUpdate {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpUpdate)
	return &EnterpriseBatterySwapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseBatterySwapClient) UpdateOne(ebs *EnterpriseBatterySwap) *EnterpriseBatterySwapUpdateOne {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpUpdateOne, withEnterpriseBatterySwap(ebs))
	return &EnterpriseBatterySwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseBatterySwapClient) UpdateOneID(id uint64) *EnterpriseBatterySwapUpdateOne {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpUpdateOne, withEnterpriseBatterySwapID(id))
	return &EnterpriseBatterySwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) Delete() *EnterpriseBatterySwapDelete {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpDelete)
	return &EnterpriseBatterySwapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseBatterySwapClient) DeleteOne(ebs *EnterpriseBatterySwap) *EnterpriseBatterySwapDeleteOne {
	return c.DeleteOneID(ebs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseBatterySwapClient) DeleteOneID(id uint64) *EnterpriseBatterySwapDeleteOne {
	builder := c.Delete().Where(enterprisebatteryswap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseBatterySwapDeleteOne{builder}
}

// Query returns a query builder for EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) Query() *EnterpriseBatterySwapQuery {
	return &EnterpriseBatterySwapQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseBatterySwap},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseBatterySwap entity by its id.
func (c *EnterpriseBatterySwapClient) Get(ctx context.Context, id uint64) (*EnterpriseBatterySwap, error) {
	return c.Query().Where(enterprisebatteryswap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseBatterySwapClient) GetX(ctx context.Context, id uint64) *EnterpriseBatterySwap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExchange queries the exchange edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryExchange(ebs *EnterpriseBatterySwap) *ExchangeQuery {
	query := (&ExchangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.ExchangeTable, enterprisebatteryswap.ExchangeColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryCabinet(ebs *EnterpriseBatterySwap) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.CabinetTable, enterprisebatteryswap.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutin queries the putin edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutin(ebs *EnterpriseBatterySwap) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.PutinTable, enterprisebatteryswap.PutinColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutinEnterprise queries the putin_enterprise edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutinEnterprise(ebs *EnterpriseBatterySwap) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutinEnterpriseTable, enterprisebatteryswap.PutinEnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutinStation queries the putin_station edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutinStation(ebs *EnterpriseBatterySwap) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutinStationTable, enterprisebatteryswap.PutinStationColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutout queries the putout edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutout(ebs *EnterpriseBatterySwap) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.PutoutTable, enterprisebatteryswap.PutoutColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutoutEnterprise queries the putout_enterprise edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutoutEnterprise(ebs *EnterpriseBatterySwap) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutoutEnterpriseTable, enterprisebatteryswap.PutoutEnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutoutStation queries the putout_station edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutoutStation(ebs *EnterpriseBatterySwap) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutoutStationTable, enterprisebatteryswap.PutoutStationColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseBatterySwapClient) Hooks() []Hook {
	return c.hooks.EnterpriseBatterySwap
}

// Interceptors returns the client interceptors.
func (c *EnterpriseBatterySwapClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseBatterySwap
}

func (c *EnterpriseBatterySwapClient) mutate(ctx context.Context, m *EnterpriseBatterySwapMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseBatterySwapCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseBatterySwapUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseBatterySwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseBatterySwapDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseBatterySwap mutation op: %q", m.Op())
	}
}

// EnterpriseBillClient is a client for the EnterpriseBill schema.
type EnterpriseBillClient struct {
	config
}

// NewEnterpriseBillClient returns a client for the EnterpriseBill from the given config.
func NewEnterpriseBillClient(c config) *EnterpriseBillClient {
	return &EnterpriseBillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisebill.Hooks(f(g(h())))`.
func (c *EnterpriseBillClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseBill = append(c.hooks.EnterpriseBill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisebill.Intercept(f(g(h())))`.
func (c *EnterpriseBillClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseBill = append(c.inters.EnterpriseBill, interceptors...)
}

// Create returns a builder for creating a EnterpriseBill entity.
func (c *EnterpriseBillClient) Create() *EnterpriseBillCreate {
	mutation := newEnterpriseBillMutation(c.config, OpCreate)
	return &EnterpriseBillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseBill entities.
func (c *EnterpriseBillClient) CreateBulk(builders ...*EnterpriseBillCreate) *EnterpriseBillCreateBulk {
	return &EnterpriseBillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseBill.
func (c *EnterpriseBillClient) Update() *EnterpriseBillUpdate {
	mutation := newEnterpriseBillMutation(c.config, OpUpdate)
	return &EnterpriseBillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseBillClient) UpdateOne(eb *EnterpriseBill) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBill(eb))
	return &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseBillClient) UpdateOneID(id uint64) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBillID(id))
	return &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseBill.
func (c *EnterpriseBillClient) Delete() *EnterpriseBillDelete {
	mutation := newEnterpriseBillMutation(c.config, OpDelete)
	return &EnterpriseBillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseBillClient) DeleteOne(eb *EnterpriseBill) *EnterpriseBillDeleteOne {
	return c.DeleteOneID(eb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseBillClient) DeleteOneID(id uint64) *EnterpriseBillDeleteOne {
	builder := c.Delete().Where(enterprisebill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseBillDeleteOne{builder}
}

// Query returns a query builder for EnterpriseBill.
func (c *EnterpriseBillClient) Query() *EnterpriseBillQuery {
	return &EnterpriseBillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseBill},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseBill entity by its id.
func (c *EnterpriseBillClient) Get(ctx context.Context, id uint64) (*EnterpriseBill, error) {
	return c.Query().Where(enterprisebill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseBillClient) GetX(ctx context.Context, id uint64) *EnterpriseBill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryRider(eb *EnterpriseBill) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.RiderTable, enterprisebill.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryCity(eb *EnterpriseBill) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.CityTable, enterprisebill.CityColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryStation(eb *EnterpriseBill) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.StationTable, enterprisebill.StationColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryEnterprise(eb *EnterpriseBill) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.EnterpriseTable, enterprisebill.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatement queries the statement edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryStatement(eb *EnterpriseBill) *EnterpriseStatementQuery {
	query := (&EnterpriseStatementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(enterprisestatement.Table, enterprisestatement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.StatementTable, enterprisebill.StatementColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QuerySubscribe(eb *EnterpriseBill) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.SubscribeTable, enterprisebill.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseBillClient) Hooks() []Hook {
	hooks := c.hooks.EnterpriseBill
	return append(hooks[:len(hooks):len(hooks)], enterprisebill.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseBillClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseBill
}

func (c *EnterpriseBillClient) mutate(ctx context.Context, m *EnterpriseBillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseBillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseBillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseBillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseBill mutation op: %q", m.Op())
	}
}

// EnterpriseContractClient is a client for the EnterpriseContract schema.
type EnterpriseContractClient struct {
	config
}

// NewEnterpriseContractClient returns a client for the EnterpriseContract from the given config.
func NewEnterpriseContractClient(c config) *EnterpriseContractClient {
	return &EnterpriseContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisecontract.Hooks(f(g(h())))`.
func (c *EnterpriseContractClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseContract = append(c.hooks.EnterpriseContract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisecontract.Intercept(f(g(h())))`.
func (c *EnterpriseContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseContract = append(c.inters.EnterpriseContract, interceptors...)
}

// Create returns a builder for creating a EnterpriseContract entity.
func (c *EnterpriseContractClient) Create() *EnterpriseContractCreate {
	mutation := newEnterpriseContractMutation(c.config, OpCreate)
	return &EnterpriseContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseContract entities.
func (c *EnterpriseContractClient) CreateBulk(builders ...*EnterpriseContractCreate) *EnterpriseContractCreateBulk {
	return &EnterpriseContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseContract.
func (c *EnterpriseContractClient) Update() *EnterpriseContractUpdate {
	mutation := newEnterpriseContractMutation(c.config, OpUpdate)
	return &EnterpriseContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseContractClient) UpdateOne(ec *EnterpriseContract) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContract(ec))
	return &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseContractClient) UpdateOneID(id uint64) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContractID(id))
	return &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseContract.
func (c *EnterpriseContractClient) Delete() *EnterpriseContractDelete {
	mutation := newEnterpriseContractMutation(c.config, OpDelete)
	return &EnterpriseContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseContractClient) DeleteOne(ec *EnterpriseContract) *EnterpriseContractDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseContractClient) DeleteOneID(id uint64) *EnterpriseContractDeleteOne {
	builder := c.Delete().Where(enterprisecontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseContractDeleteOne{builder}
}

// Query returns a query builder for EnterpriseContract.
func (c *EnterpriseContractClient) Query() *EnterpriseContractQuery {
	return &EnterpriseContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseContract},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseContract entity by its id.
func (c *EnterpriseContractClient) Get(ctx context.Context, id uint64) (*EnterpriseContract, error) {
	return c.Query().Where(enterprisecontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseContractClient) GetX(ctx context.Context, id uint64) *EnterpriseContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a EnterpriseContract.
func (c *EnterpriseContractClient) QueryEnterprise(ec *EnterpriseContract) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisecontract.Table, enterprisecontract.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisecontract.EnterpriseTable, enterprisecontract.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseContractClient) Hooks() []Hook {
	hooks := c.hooks.EnterpriseContract
	return append(hooks[:len(hooks):len(hooks)], enterprisecontract.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseContractClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseContract
}

func (c *EnterpriseContractClient) mutate(ctx context.Context, m *EnterpriseContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseContract mutation op: %q", m.Op())
	}
}

// EnterprisePrepaymentClient is a client for the EnterprisePrepayment schema.
type EnterprisePrepaymentClient struct {
	config
}

// NewEnterprisePrepaymentClient returns a client for the EnterprisePrepayment from the given config.
func NewEnterprisePrepaymentClient(c config) *EnterprisePrepaymentClient {
	return &EnterprisePrepaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterpriseprepayment.Hooks(f(g(h())))`.
func (c *EnterprisePrepaymentClient) Use(hooks ...Hook) {
	c.hooks.EnterprisePrepayment = append(c.hooks.EnterprisePrepayment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterpriseprepayment.Intercept(f(g(h())))`.
func (c *EnterprisePrepaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterprisePrepayment = append(c.inters.EnterprisePrepayment, interceptors...)
}

// Create returns a builder for creating a EnterprisePrepayment entity.
func (c *EnterprisePrepaymentClient) Create() *EnterprisePrepaymentCreate {
	mutation := newEnterprisePrepaymentMutation(c.config, OpCreate)
	return &EnterprisePrepaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterprisePrepayment entities.
func (c *EnterprisePrepaymentClient) CreateBulk(builders ...*EnterprisePrepaymentCreate) *EnterprisePrepaymentCreateBulk {
	return &EnterprisePrepaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) Update() *EnterprisePrepaymentUpdate {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdate)
	return &EnterprisePrepaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterprisePrepaymentClient) UpdateOne(ep *EnterprisePrepayment) *EnterprisePrepaymentUpdateOne {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdateOne, withEnterprisePrepayment(ep))
	return &EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterprisePrepaymentClient) UpdateOneID(id uint64) *EnterprisePrepaymentUpdateOne {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdateOne, withEnterprisePrepaymentID(id))
	return &EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) Delete() *EnterprisePrepaymentDelete {
	mutation := newEnterprisePrepaymentMutation(c.config, OpDelete)
	return &EnterprisePrepaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterprisePrepaymentClient) DeleteOne(ep *EnterprisePrepayment) *EnterprisePrepaymentDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterprisePrepaymentClient) DeleteOneID(id uint64) *EnterprisePrepaymentDeleteOne {
	builder := c.Delete().Where(enterpriseprepayment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterprisePrepaymentDeleteOne{builder}
}

// Query returns a query builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) Query() *EnterprisePrepaymentQuery {
	return &EnterprisePrepaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterprisePrepayment},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterprisePrepayment entity by its id.
func (c *EnterprisePrepaymentClient) Get(ctx context.Context, id uint64) (*EnterprisePrepayment, error) {
	return c.Query().Where(enterpriseprepayment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterprisePrepaymentClient) GetX(ctx context.Context, id uint64) *EnterprisePrepayment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) QueryEnterprise(ep *EnterprisePrepayment) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprepayment.Table, enterpriseprepayment.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprepayment.EnterpriseTable, enterpriseprepayment.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) QueryAgent(ep *EnterprisePrepayment) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprepayment.Table, enterpriseprepayment.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprepayment.AgentTable, enterpriseprepayment.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterprisePrepaymentClient) Hooks() []Hook {
	hooks := c.hooks.EnterprisePrepayment
	return append(hooks[:len(hooks):len(hooks)], enterpriseprepayment.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterprisePrepaymentClient) Interceptors() []Interceptor {
	return c.inters.EnterprisePrepayment
}

func (c *EnterprisePrepaymentClient) mutate(ctx context.Context, m *EnterprisePrepaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterprisePrepaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterprisePrepaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterprisePrepaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterprisePrepayment mutation op: %q", m.Op())
	}
}

// EnterprisePriceClient is a client for the EnterprisePrice schema.
type EnterprisePriceClient struct {
	config
}

// NewEnterprisePriceClient returns a client for the EnterprisePrice from the given config.
func NewEnterprisePriceClient(c config) *EnterprisePriceClient {
	return &EnterprisePriceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterpriseprice.Hooks(f(g(h())))`.
func (c *EnterprisePriceClient) Use(hooks ...Hook) {
	c.hooks.EnterprisePrice = append(c.hooks.EnterprisePrice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterpriseprice.Intercept(f(g(h())))`.
func (c *EnterprisePriceClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterprisePrice = append(c.inters.EnterprisePrice, interceptors...)
}

// Create returns a builder for creating a EnterprisePrice entity.
func (c *EnterprisePriceClient) Create() *EnterprisePriceCreate {
	mutation := newEnterprisePriceMutation(c.config, OpCreate)
	return &EnterprisePriceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterprisePrice entities.
func (c *EnterprisePriceClient) CreateBulk(builders ...*EnterprisePriceCreate) *EnterprisePriceCreateBulk {
	return &EnterprisePriceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterprisePrice.
func (c *EnterprisePriceClient) Update() *EnterprisePriceUpdate {
	mutation := newEnterprisePriceMutation(c.config, OpUpdate)
	return &EnterprisePriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterprisePriceClient) UpdateOne(ep *EnterprisePrice) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePrice(ep))
	return &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterprisePriceClient) UpdateOneID(id uint64) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePriceID(id))
	return &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterprisePrice.
func (c *EnterprisePriceClient) Delete() *EnterprisePriceDelete {
	mutation := newEnterprisePriceMutation(c.config, OpDelete)
	return &EnterprisePriceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterprisePriceClient) DeleteOne(ep *EnterprisePrice) *EnterprisePriceDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterprisePriceClient) DeleteOneID(id uint64) *EnterprisePriceDeleteOne {
	builder := c.Delete().Where(enterpriseprice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterprisePriceDeleteOne{builder}
}

// Query returns a query builder for EnterprisePrice.
func (c *EnterprisePriceClient) Query() *EnterprisePriceQuery {
	return &EnterprisePriceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterprisePrice},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterprisePrice entity by its id.
func (c *EnterprisePriceClient) Get(ctx context.Context, id uint64) (*EnterprisePrice, error) {
	return c.Query().Where(enterpriseprice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterprisePriceClient) GetX(ctx context.Context, id uint64) *EnterprisePrice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a EnterprisePrice.
func (c *EnterprisePriceClient) QueryCity(ep *EnterprisePrice) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprice.CityTable, enterpriseprice.CityColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a EnterprisePrice.
func (c *EnterprisePriceClient) QueryBrand(ep *EnterprisePrice) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprice.BrandTable, enterpriseprice.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a EnterprisePrice.
func (c *EnterprisePriceClient) QueryEnterprise(ep *EnterprisePrice) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterpriseprice.EnterpriseTable, enterpriseprice.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterprisePriceClient) Hooks() []Hook {
	hooks := c.hooks.EnterprisePrice
	return append(hooks[:len(hooks):len(hooks)], enterpriseprice.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterprisePriceClient) Interceptors() []Interceptor {
	return c.inters.EnterprisePrice
}

func (c *EnterprisePriceClient) mutate(ctx context.Context, m *EnterprisePriceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterprisePriceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterprisePriceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterprisePriceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterprisePrice mutation op: %q", m.Op())
	}
}

// EnterpriseStatementClient is a client for the EnterpriseStatement schema.
type EnterpriseStatementClient struct {
	config
}

// NewEnterpriseStatementClient returns a client for the EnterpriseStatement from the given config.
func NewEnterpriseStatementClient(c config) *EnterpriseStatementClient {
	return &EnterpriseStatementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisestatement.Hooks(f(g(h())))`.
func (c *EnterpriseStatementClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseStatement = append(c.hooks.EnterpriseStatement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisestatement.Intercept(f(g(h())))`.
func (c *EnterpriseStatementClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseStatement = append(c.inters.EnterpriseStatement, interceptors...)
}

// Create returns a builder for creating a EnterpriseStatement entity.
func (c *EnterpriseStatementClient) Create() *EnterpriseStatementCreate {
	mutation := newEnterpriseStatementMutation(c.config, OpCreate)
	return &EnterpriseStatementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseStatement entities.
func (c *EnterpriseStatementClient) CreateBulk(builders ...*EnterpriseStatementCreate) *EnterpriseStatementCreateBulk {
	return &EnterpriseStatementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) Update() *EnterpriseStatementUpdate {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdate)
	return &EnterpriseStatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseStatementClient) UpdateOne(es *EnterpriseStatement) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatement(es))
	return &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseStatementClient) UpdateOneID(id uint64) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatementID(id))
	return &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) Delete() *EnterpriseStatementDelete {
	mutation := newEnterpriseStatementMutation(c.config, OpDelete)
	return &EnterpriseStatementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseStatementClient) DeleteOne(es *EnterpriseStatement) *EnterpriseStatementDeleteOne {
	return c.DeleteOneID(es.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseStatementClient) DeleteOneID(id uint64) *EnterpriseStatementDeleteOne {
	builder := c.Delete().Where(enterprisestatement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseStatementDeleteOne{builder}
}

// Query returns a query builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) Query() *EnterpriseStatementQuery {
	return &EnterpriseStatementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseStatement},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseStatement entity by its id.
func (c *EnterpriseStatementClient) Get(ctx context.Context, id uint64) (*EnterpriseStatement, error) {
	return c.Query().Where(enterprisestatement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseStatementClient) GetX(ctx context.Context, id uint64) *EnterpriseStatement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a EnterpriseStatement.
func (c *EnterpriseStatementClient) QueryEnterprise(es *EnterpriseStatement) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestatement.Table, enterprisestatement.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisestatement.EnterpriseTable, enterprisestatement.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the bills edge of a EnterpriseStatement.
func (c *EnterpriseStatementClient) QueryBills(es *EnterpriseStatement) *EnterpriseBillQuery {
	query := (&EnterpriseBillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestatement.Table, enterprisestatement.FieldID, id),
			sqlgraph.To(enterprisebill.Table, enterprisebill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestatement.BillsTable, enterprisestatement.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseStatementClient) Hooks() []Hook {
	hooks := c.hooks.EnterpriseStatement
	return append(hooks[:len(hooks):len(hooks)], enterprisestatement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseStatementClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseStatement
}

func (c *EnterpriseStatementClient) mutate(ctx context.Context, m *EnterpriseStatementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseStatementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseStatementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseStatementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseStatement mutation op: %q", m.Op())
	}
}

// EnterpriseStationClient is a client for the EnterpriseStation schema.
type EnterpriseStationClient struct {
	config
}

// NewEnterpriseStationClient returns a client for the EnterpriseStation from the given config.
func NewEnterpriseStationClient(c config) *EnterpriseStationClient {
	return &EnterpriseStationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisestation.Hooks(f(g(h())))`.
func (c *EnterpriseStationClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseStation = append(c.hooks.EnterpriseStation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisestation.Intercept(f(g(h())))`.
func (c *EnterpriseStationClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseStation = append(c.inters.EnterpriseStation, interceptors...)
}

// Create returns a builder for creating a EnterpriseStation entity.
func (c *EnterpriseStationClient) Create() *EnterpriseStationCreate {
	mutation := newEnterpriseStationMutation(c.config, OpCreate)
	return &EnterpriseStationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseStation entities.
func (c *EnterpriseStationClient) CreateBulk(builders ...*EnterpriseStationCreate) *EnterpriseStationCreateBulk {
	return &EnterpriseStationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseStation.
func (c *EnterpriseStationClient) Update() *EnterpriseStationUpdate {
	mutation := newEnterpriseStationMutation(c.config, OpUpdate)
	return &EnterpriseStationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseStationClient) UpdateOne(es *EnterpriseStation) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStation(es))
	return &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseStationClient) UpdateOneID(id uint64) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStationID(id))
	return &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseStation.
func (c *EnterpriseStationClient) Delete() *EnterpriseStationDelete {
	mutation := newEnterpriseStationMutation(c.config, OpDelete)
	return &EnterpriseStationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseStationClient) DeleteOne(es *EnterpriseStation) *EnterpriseStationDeleteOne {
	return c.DeleteOneID(es.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseStationClient) DeleteOneID(id uint64) *EnterpriseStationDeleteOne {
	builder := c.Delete().Where(enterprisestation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseStationDeleteOne{builder}
}

// Query returns a query builder for EnterpriseStation.
func (c *EnterpriseStationClient) Query() *EnterpriseStationQuery {
	return &EnterpriseStationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseStation},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseStation entity by its id.
func (c *EnterpriseStationClient) Get(ctx context.Context, id uint64) (*EnterpriseStation, error) {
	return c.Query().Where(enterprisestation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseStationClient) GetX(ctx context.Context, id uint64) *EnterpriseStation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryCity(es *EnterpriseStation) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisestation.CityTable, enterprisestation.CityColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryEnterprise(es *EnterpriseStation) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisestation.EnterpriseTable, enterprisestation.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgents queries the agents edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryAgents(es *EnterpriseStation) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, enterprisestation.AgentsTable, enterprisestation.AgentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwapPutinBatteries queries the swap_putin_batteries edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QuerySwapPutinBatteries(es *EnterpriseStation) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.SwapPutinBatteriesTable, enterprisestation.SwapPutinBatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwapPutoutBatteries queries the swap_putout_batteries edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QuerySwapPutoutBatteries(es *EnterpriseStation) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.SwapPutoutBatteriesTable, enterprisestation.SwapPutoutBatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinets queries the cabinets edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryCabinets(es *EnterpriseStation) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.CabinetsTable, enterprisestation.CabinetsColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteries queries the batteries edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryBatteries(es *EnterpriseStation) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.BatteriesTable, enterprisestation.BatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryStocks(es *EnterpriseStation) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.StocksTable, enterprisestation.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseStationClient) Hooks() []Hook {
	hooks := c.hooks.EnterpriseStation
	return append(hooks[:len(hooks):len(hooks)], enterprisestation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseStationClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseStation
}

func (c *EnterpriseStationClient) mutate(ctx context.Context, m *EnterpriseStationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseStationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseStationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseStationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseStation mutation op: %q", m.Op())
	}
}

// ExceptionClient is a client for the Exception schema.
type ExceptionClient struct {
	config
}

// NewExceptionClient returns a client for the Exception from the given config.
func NewExceptionClient(c config) *ExceptionClient {
	return &ExceptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exception.Hooks(f(g(h())))`.
func (c *ExceptionClient) Use(hooks ...Hook) {
	c.hooks.Exception = append(c.hooks.Exception, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exception.Intercept(f(g(h())))`.
func (c *ExceptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exception = append(c.inters.Exception, interceptors...)
}

// Create returns a builder for creating a Exception entity.
func (c *ExceptionClient) Create() *ExceptionCreate {
	mutation := newExceptionMutation(c.config, OpCreate)
	return &ExceptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exception entities.
func (c *ExceptionClient) CreateBulk(builders ...*ExceptionCreate) *ExceptionCreateBulk {
	return &ExceptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exception.
func (c *ExceptionClient) Update() *ExceptionUpdate {
	mutation := newExceptionMutation(c.config, OpUpdate)
	return &ExceptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExceptionClient) UpdateOne(e *Exception) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withException(e))
	return &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExceptionClient) UpdateOneID(id uint64) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withExceptionID(id))
	return &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exception.
func (c *ExceptionClient) Delete() *ExceptionDelete {
	mutation := newExceptionMutation(c.config, OpDelete)
	return &ExceptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExceptionClient) DeleteOne(e *Exception) *ExceptionDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExceptionClient) DeleteOneID(id uint64) *ExceptionDeleteOne {
	builder := c.Delete().Where(exception.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExceptionDeleteOne{builder}
}

// Query returns a query builder for Exception.
func (c *ExceptionClient) Query() *ExceptionQuery {
	return &ExceptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeException},
		inters: c.Interceptors(),
	}
}

// Get returns a Exception entity by its id.
func (c *ExceptionClient) Get(ctx context.Context, id uint64) (*Exception, error) {
	return c.Query().Where(exception.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExceptionClient) GetX(ctx context.Context, id uint64) *Exception {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Exception.
func (c *ExceptionClient) QueryCity(e *Exception) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exception.CityTable, exception.CityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Exception.
func (c *ExceptionClient) QueryEmployee(e *Exception) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exception.EmployeeTable, exception.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Exception.
func (c *ExceptionClient) QueryStore(e *Exception) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exception.StoreTable, exception.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExceptionClient) Hooks() []Hook {
	hooks := c.hooks.Exception
	return append(hooks[:len(hooks):len(hooks)], exception.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ExceptionClient) Interceptors() []Interceptor {
	return c.inters.Exception
}

func (c *ExceptionClient) mutate(ctx context.Context, m *ExceptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExceptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExceptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExceptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exception mutation op: %q", m.Op())
	}
}

// ExchangeClient is a client for the Exchange schema.
type ExchangeClient struct {
	config
}

// NewExchangeClient returns a client for the Exchange from the given config.
func NewExchangeClient(c config) *ExchangeClient {
	return &ExchangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exchange.Hooks(f(g(h())))`.
func (c *ExchangeClient) Use(hooks ...Hook) {
	c.hooks.Exchange = append(c.hooks.Exchange, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exchange.Intercept(f(g(h())))`.
func (c *ExchangeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exchange = append(c.inters.Exchange, interceptors...)
}

// Create returns a builder for creating a Exchange entity.
func (c *ExchangeClient) Create() *ExchangeCreate {
	mutation := newExchangeMutation(c.config, OpCreate)
	return &ExchangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exchange entities.
func (c *ExchangeClient) CreateBulk(builders ...*ExchangeCreate) *ExchangeCreateBulk {
	return &ExchangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exchange.
func (c *ExchangeClient) Update() *ExchangeUpdate {
	mutation := newExchangeMutation(c.config, OpUpdate)
	return &ExchangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExchangeClient) UpdateOne(e *Exchange) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchange(e))
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExchangeClient) UpdateOneID(id uint64) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchangeID(id))
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exchange.
func (c *ExchangeClient) Delete() *ExchangeDelete {
	mutation := newExchangeMutation(c.config, OpDelete)
	return &ExchangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExchangeClient) DeleteOne(e *Exchange) *ExchangeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExchangeClient) DeleteOneID(id uint64) *ExchangeDeleteOne {
	builder := c.Delete().Where(exchange.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExchangeDeleteOne{builder}
}

// Query returns a query builder for Exchange.
func (c *ExchangeClient) Query() *ExchangeQuery {
	return &ExchangeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExchange},
		inters: c.Interceptors(),
	}
}

// Get returns a Exchange entity by its id.
func (c *ExchangeClient) Get(ctx context.Context, id uint64) (*Exchange, error) {
	return c.Query().Where(exchange.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExchangeClient) GetX(ctx context.Context, id uint64) *Exchange {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribe queries the subscribe edge of a Exchange.
func (c *ExchangeClient) QuerySubscribe(e *Exchange) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.SubscribeTable, exchange.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Exchange.
func (c *ExchangeClient) QueryCity(e *Exchange) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.CityTable, exchange.CityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Exchange.
func (c *ExchangeClient) QueryStore(e *Exchange) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.StoreTable, exchange.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Exchange.
func (c *ExchangeClient) QueryEnterprise(e *Exchange) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.EnterpriseTable, exchange.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Exchange.
func (c *ExchangeClient) QueryStation(e *Exchange) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.StationTable, exchange.StationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Exchange.
func (c *ExchangeClient) QueryCabinet(e *Exchange) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exchange.CabinetTable, exchange.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Exchange.
func (c *ExchangeClient) QueryRider(e *Exchange) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exchange.RiderTable, exchange.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Exchange.
func (c *ExchangeClient) QueryEmployee(e *Exchange) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exchange.EmployeeTable, exchange.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExchangeClient) Hooks() []Hook {
	hooks := c.hooks.Exchange
	return append(hooks[:len(hooks):len(hooks)], exchange.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ExchangeClient) Interceptors() []Interceptor {
	return c.inters.Exchange
}

func (c *ExchangeClient) mutate(ctx context.Context, m *ExchangeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExchangeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExchangeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExchangeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exchange mutation op: %q", m.Op())
	}
}

// ExportClient is a client for the Export schema.
type ExportClient struct {
	config
}

// NewExportClient returns a client for the Export from the given config.
func NewExportClient(c config) *ExportClient {
	return &ExportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `export.Hooks(f(g(h())))`.
func (c *ExportClient) Use(hooks ...Hook) {
	c.hooks.Export = append(c.hooks.Export, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `export.Intercept(f(g(h())))`.
func (c *ExportClient) Intercept(interceptors ...Interceptor) {
	c.inters.Export = append(c.inters.Export, interceptors...)
}

// Create returns a builder for creating a Export entity.
func (c *ExportClient) Create() *ExportCreate {
	mutation := newExportMutation(c.config, OpCreate)
	return &ExportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Export entities.
func (c *ExportClient) CreateBulk(builders ...*ExportCreate) *ExportCreateBulk {
	return &ExportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Export.
func (c *ExportClient) Update() *ExportUpdate {
	mutation := newExportMutation(c.config, OpUpdate)
	return &ExportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExportClient) UpdateOne(e *Export) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExport(e))
	return &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExportClient) UpdateOneID(id uint64) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExportID(id))
	return &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Export.
func (c *ExportClient) Delete() *ExportDelete {
	mutation := newExportMutation(c.config, OpDelete)
	return &ExportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExportClient) DeleteOne(e *Export) *ExportDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExportClient) DeleteOneID(id uint64) *ExportDeleteOne {
	builder := c.Delete().Where(export.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExportDeleteOne{builder}
}

// Query returns a query builder for Export.
func (c *ExportClient) Query() *ExportQuery {
	return &ExportQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExport},
		inters: c.Interceptors(),
	}
}

// Get returns a Export entity by its id.
func (c *ExportClient) Get(ctx context.Context, id uint64) (*Export, error) {
	return c.Query().Where(export.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExportClient) GetX(ctx context.Context, id uint64) *Export {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManager queries the manager edge of a Export.
func (c *ExportClient) QueryManager(e *Export) *ManagerQuery {
	query := (&ManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(export.Table, export.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, export.ManagerTable, export.ManagerColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExportClient) Hooks() []Hook {
	return c.hooks.Export
}

// Interceptors returns the client interceptors.
func (c *ExportClient) Interceptors() []Interceptor {
	return c.inters.Export
}

func (c *ExportClient) mutate(ctx context.Context, m *ExportMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExportCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExportUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExportDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Export mutation op: %q", m.Op())
	}
}

// FeedbackClient is a client for the Feedback schema.
type FeedbackClient struct {
	config
}

// NewFeedbackClient returns a client for the Feedback from the given config.
func NewFeedbackClient(c config) *FeedbackClient {
	return &FeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedback.Hooks(f(g(h())))`.
func (c *FeedbackClient) Use(hooks ...Hook) {
	c.hooks.Feedback = append(c.hooks.Feedback, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedback.Intercept(f(g(h())))`.
func (c *FeedbackClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feedback = append(c.inters.Feedback, interceptors...)
}

// Create returns a builder for creating a Feedback entity.
func (c *FeedbackClient) Create() *FeedbackCreate {
	mutation := newFeedbackMutation(c.config, OpCreate)
	return &FeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feedback entities.
func (c *FeedbackClient) CreateBulk(builders ...*FeedbackCreate) *FeedbackCreateBulk {
	return &FeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feedback.
func (c *FeedbackClient) Update() *FeedbackUpdate {
	mutation := newFeedbackMutation(c.config, OpUpdate)
	return &FeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedbackClient) UpdateOne(f *Feedback) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedback(f))
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedbackClient) UpdateOneID(id uint64) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedbackID(id))
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feedback.
func (c *FeedbackClient) Delete() *FeedbackDelete {
	mutation := newFeedbackMutation(c.config, OpDelete)
	return &FeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedbackClient) DeleteOne(f *Feedback) *FeedbackDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedbackClient) DeleteOneID(id uint64) *FeedbackDeleteOne {
	builder := c.Delete().Where(feedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedbackDeleteOne{builder}
}

// Query returns a query builder for Feedback.
func (c *FeedbackClient) Query() *FeedbackQuery {
	return &FeedbackQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedback},
		inters: c.Interceptors(),
	}
}

// Get returns a Feedback entity by its id.
func (c *FeedbackClient) Get(ctx context.Context, id uint64) (*Feedback, error) {
	return c.Query().Where(feedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedbackClient) GetX(ctx context.Context, id uint64) *Feedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a Feedback.
func (c *FeedbackClient) QueryEnterprise(f *Feedback) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.EnterpriseTable, feedback.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Feedback.
func (c *FeedbackClient) QueryAgent(f *Feedback) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.AgentTable, feedback.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedbackClient) Hooks() []Hook {
	return c.hooks.Feedback
}

// Interceptors returns the client interceptors.
func (c *FeedbackClient) Interceptors() []Interceptor {
	return c.inters.Feedback
}

func (c *FeedbackClient) mutate(ctx context.Context, m *FeedbackMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feedback mutation op: %q", m.Op())
	}
}

// InventoryClient is a client for the Inventory schema.
type InventoryClient struct {
	config
}

// NewInventoryClient returns a client for the Inventory from the given config.
func NewInventoryClient(c config) *InventoryClient {
	return &InventoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventory.Hooks(f(g(h())))`.
func (c *InventoryClient) Use(hooks ...Hook) {
	c.hooks.Inventory = append(c.hooks.Inventory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inventory.Intercept(f(g(h())))`.
func (c *InventoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Inventory = append(c.inters.Inventory, interceptors...)
}

// Create returns a builder for creating a Inventory entity.
func (c *InventoryClient) Create() *InventoryCreate {
	mutation := newInventoryMutation(c.config, OpCreate)
	return &InventoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Inventory entities.
func (c *InventoryClient) CreateBulk(builders ...*InventoryCreate) *InventoryCreateBulk {
	return &InventoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inventory.
func (c *InventoryClient) Update() *InventoryUpdate {
	mutation := newInventoryMutation(c.config, OpUpdate)
	return &InventoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventoryClient) UpdateOne(i *Inventory) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventory(i))
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventoryClient) UpdateOneID(id uint64) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventoryID(id))
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inventory.
func (c *InventoryClient) Delete() *InventoryDelete {
	mutation := newInventoryMutation(c.config, OpDelete)
	return &InventoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InventoryClient) DeleteOne(i *Inventory) *InventoryDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InventoryClient) DeleteOneID(id uint64) *InventoryDeleteOne {
	builder := c.Delete().Where(inventory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventoryDeleteOne{builder}
}

// Query returns a query builder for Inventory.
func (c *InventoryClient) Query() *InventoryQuery {
	return &InventoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInventory},
		inters: c.Interceptors(),
	}
}

// Get returns a Inventory entity by its id.
func (c *InventoryClient) Get(ctx context.Context, id uint64) (*Inventory, error) {
	return c.Query().Where(inventory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventoryClient) GetX(ctx context.Context, id uint64) *Inventory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InventoryClient) Hooks() []Hook {
	hooks := c.hooks.Inventory
	return append(hooks[:len(hooks):len(hooks)], inventory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *InventoryClient) Interceptors() []Interceptor {
	return c.inters.Inventory
}

func (c *InventoryClient) mutate(ctx context.Context, m *InventoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InventoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InventoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InventoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Inventory mutation op: %q", m.Op())
	}
}

// ManagerClient is a client for the Manager schema.
type ManagerClient struct {
	config
}

// NewManagerClient returns a client for the Manager from the given config.
func NewManagerClient(c config) *ManagerClient {
	return &ManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manager.Hooks(f(g(h())))`.
func (c *ManagerClient) Use(hooks ...Hook) {
	c.hooks.Manager = append(c.hooks.Manager, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `manager.Intercept(f(g(h())))`.
func (c *ManagerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Manager = append(c.inters.Manager, interceptors...)
}

// Create returns a builder for creating a Manager entity.
func (c *ManagerClient) Create() *ManagerCreate {
	mutation := newManagerMutation(c.config, OpCreate)
	return &ManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Manager entities.
func (c *ManagerClient) CreateBulk(builders ...*ManagerCreate) *ManagerCreateBulk {
	return &ManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Manager.
func (c *ManagerClient) Update() *ManagerUpdate {
	mutation := newManagerMutation(c.config, OpUpdate)
	return &ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManagerClient) UpdateOne(m *Manager) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(m))
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManagerClient) UpdateOneID(id uint64) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManagerID(id))
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manager.
func (c *ManagerClient) Delete() *ManagerDelete {
	mutation := newManagerMutation(c.config, OpDelete)
	return &ManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManagerClient) DeleteOne(m *Manager) *ManagerDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManagerClient) DeleteOneID(id uint64) *ManagerDeleteOne {
	builder := c.Delete().Where(manager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManagerDeleteOne{builder}
}

// Query returns a query builder for Manager.
func (c *ManagerClient) Query() *ManagerQuery {
	return &ManagerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManager},
		inters: c.Interceptors(),
	}
}

// Get returns a Manager entity by its id.
func (c *ManagerClient) Get(ctx context.Context, id uint64) (*Manager, error) {
	return c.Query().Where(manager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManagerClient) GetX(ctx context.Context, id uint64) *Manager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a Manager.
func (c *ManagerClient) QueryRole(m *Manager) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manager.Table, manager.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, manager.RoleTable, manager.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManagerClient) Hooks() []Hook {
	hooks := c.hooks.Manager
	return append(hooks[:len(hooks):len(hooks)], manager.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ManagerClient) Interceptors() []Interceptor {
	return c.inters.Manager
}

func (c *ManagerClient) mutate(ctx context.Context, m *ManagerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManagerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManagerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Manager mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uint64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id uint64) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uint64) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uint64) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a Order.
func (c *OrderClient) QueryPlan(o *Order) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.PlanTable, order.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Order.
func (c *OrderClient) QueryCity(o *Order) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.CityTable, order.CityColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Order.
func (c *OrderClient) QueryBrand(o *Order) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.BrandTable, order.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Order.
func (c *OrderClient) QueryEbike(o *Order) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.EbikeTable, order.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Order.
func (c *OrderClient) QueryAgent(o *Order) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.AgentTable, order.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Order.
func (c *OrderClient) QueryRider(o *Order) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.RiderTable, order.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Order.
func (c *OrderClient) QuerySubscribe(o *Order) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.SubscribeTable, order.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommission queries the commission edge of a Order.
func (c *OrderClient) QueryCommission(o *Order) *CommissionQuery {
	query := (&CommissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(commission.Table, commission.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.CommissionTable, order.CommissionColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Order.
func (c *OrderClient) QueryParent(o *Order) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.ParentTable, order.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Order.
func (c *OrderClient) QueryChildren(o *Order) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.ChildrenTable, order.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRefund queries the refund edge of a Order.
func (c *OrderClient) QueryRefund(o *Order) *OrderRefundQuery {
	query := (&OrderRefundClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderrefund.Table, orderrefund.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.RefundTable, order.RefundColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssistance queries the assistance edge of a Order.
func (c *OrderClient) QueryAssistance(o *Order) *AssistanceQuery {
	query := (&AssistanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(assistance.Table, assistance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.AssistanceTable, order.AssistanceColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCoupons queries the coupons edge of a Order.
func (c *OrderClient) QueryCoupons(o *Order) *CouponQuery {
	query := (&CouponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.CouponsTable, order.CouponsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	hooks := c.hooks.Order
	return append(hooks[:len(hooks):len(hooks)], order.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// OrderRefundClient is a client for the OrderRefund schema.
type OrderRefundClient struct {
	config
}

// NewOrderRefundClient returns a client for the OrderRefund from the given config.
func NewOrderRefundClient(c config) *OrderRefundClient {
	return &OrderRefundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderrefund.Hooks(f(g(h())))`.
func (c *OrderRefundClient) Use(hooks ...Hook) {
	c.hooks.OrderRefund = append(c.hooks.OrderRefund, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderrefund.Intercept(f(g(h())))`.
func (c *OrderRefundClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderRefund = append(c.inters.OrderRefund, interceptors...)
}

// Create returns a builder for creating a OrderRefund entity.
func (c *OrderRefundClient) Create() *OrderRefundCreate {
	mutation := newOrderRefundMutation(c.config, OpCreate)
	return &OrderRefundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderRefund entities.
func (c *OrderRefundClient) CreateBulk(builders ...*OrderRefundCreate) *OrderRefundCreateBulk {
	return &OrderRefundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderRefund.
func (c *OrderRefundClient) Update() *OrderRefundUpdate {
	mutation := newOrderRefundMutation(c.config, OpUpdate)
	return &OrderRefundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderRefundClient) UpdateOne(or *OrderRefund) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefund(or))
	return &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderRefundClient) UpdateOneID(id uint64) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefundID(id))
	return &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderRefund.
func (c *OrderRefundClient) Delete() *OrderRefundDelete {
	mutation := newOrderRefundMutation(c.config, OpDelete)
	return &OrderRefundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderRefundClient) DeleteOne(or *OrderRefund) *OrderRefundDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderRefundClient) DeleteOneID(id uint64) *OrderRefundDeleteOne {
	builder := c.Delete().Where(orderrefund.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderRefundDeleteOne{builder}
}

// Query returns a query builder for OrderRefund.
func (c *OrderRefundClient) Query() *OrderRefundQuery {
	return &OrderRefundQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderRefund},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderRefund entity by its id.
func (c *OrderRefundClient) Get(ctx context.Context, id uint64) (*OrderRefund, error) {
	return c.Query().Where(orderrefund.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderRefundClient) GetX(ctx context.Context, id uint64) *OrderRefund {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderRefund.
func (c *OrderRefundClient) QueryOrder(or *OrderRefund) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrefund.Table, orderrefund.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, orderrefund.OrderTable, orderrefund.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderRefundClient) Hooks() []Hook {
	hooks := c.hooks.OrderRefund
	return append(hooks[:len(hooks):len(hooks)], orderrefund.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderRefundClient) Interceptors() []Interceptor {
	return c.inters.OrderRefund
}

func (c *OrderRefundClient) mutate(ctx context.Context, m *OrderRefundMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderRefundCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderRefundUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderRefundDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderRefund mutation op: %q", m.Op())
	}
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `person.Intercept(f(g(h())))`.
func (c *PersonClient) Intercept(interceptors ...Interceptor) {
	c.inters.Person = append(c.inters.Person, interceptors...)
}

// Create returns a builder for creating a Person entity.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id uint64) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonClient) DeleteOneID(id uint64) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePerson},
		inters: c.Interceptors(),
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id uint64) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id uint64) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Person.
func (c *PersonClient) QueryRider(pe *Person) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, person.RiderTable, person.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	hooks := c.hooks.Person
	return append(hooks[:len(hooks):len(hooks)], person.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PersonClient) Interceptors() []Interceptor {
	return c.inters.Person
}

func (c *PersonClient) mutate(ctx context.Context, m *PersonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Person mutation op: %q", m.Op())
	}
}

// PlanClient is a client for the Plan schema.
type PlanClient struct {
	config
}

// NewPlanClient returns a client for the Plan from the given config.
func NewPlanClient(c config) *PlanClient {
	return &PlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plan.Hooks(f(g(h())))`.
func (c *PlanClient) Use(hooks ...Hook) {
	c.hooks.Plan = append(c.hooks.Plan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plan.Intercept(f(g(h())))`.
func (c *PlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.Plan = append(c.inters.Plan, interceptors...)
}

// Create returns a builder for creating a Plan entity.
func (c *PlanClient) Create() *PlanCreate {
	mutation := newPlanMutation(c.config, OpCreate)
	return &PlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plan entities.
func (c *PlanClient) CreateBulk(builders ...*PlanCreate) *PlanCreateBulk {
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plan.
func (c *PlanClient) Update() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanClient) UpdateOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanClient) UpdateOneID(id uint64) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plan.
func (c *PlanClient) Delete() *PlanDelete {
	mutation := newPlanMutation(c.config, OpDelete)
	return &PlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanClient) DeleteOne(pl *Plan) *PlanDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanClient) DeleteOneID(id uint64) *PlanDeleteOne {
	builder := c.Delete().Where(plan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanDeleteOne{builder}
}

// Query returns a query builder for Plan.
func (c *PlanClient) Query() *PlanQuery {
	return &PlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlan},
		inters: c.Interceptors(),
	}
}

// Get returns a Plan entity by its id.
func (c *PlanClient) Get(ctx context.Context, id uint64) (*Plan, error) {
	return c.Query().Where(plan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanClient) GetX(ctx context.Context, id uint64) *Plan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a Plan.
func (c *PlanClient) QueryBrand(pl *Plan) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, plan.BrandTable, plan.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCities queries the cities edge of a Plan.
func (c *PlanClient) QueryCities(pl *Plan) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.CitiesTable, plan.CitiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Plan.
func (c *PlanClient) QueryParent(pl *Plan) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, plan.ParentTable, plan.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComplexes queries the complexes edge of a Plan.
func (c *PlanClient) QueryComplexes(pl *Plan) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.ComplexesTable, plan.ComplexesColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanClient) Hooks() []Hook {
	hooks := c.hooks.Plan
	return append(hooks[:len(hooks):len(hooks)], plan.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PlanClient) Interceptors() []Interceptor {
	return c.inters.Plan
}

func (c *PlanClient) mutate(ctx context.Context, m *PlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Plan mutation op: %q", m.Op())
	}
}

// PlanIntroduceClient is a client for the PlanIntroduce schema.
type PlanIntroduceClient struct {
	config
}

// NewPlanIntroduceClient returns a client for the PlanIntroduce from the given config.
func NewPlanIntroduceClient(c config) *PlanIntroduceClient {
	return &PlanIntroduceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `planintroduce.Hooks(f(g(h())))`.
func (c *PlanIntroduceClient) Use(hooks ...Hook) {
	c.hooks.PlanIntroduce = append(c.hooks.PlanIntroduce, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `planintroduce.Intercept(f(g(h())))`.
func (c *PlanIntroduceClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlanIntroduce = append(c.inters.PlanIntroduce, interceptors...)
}

// Create returns a builder for creating a PlanIntroduce entity.
func (c *PlanIntroduceClient) Create() *PlanIntroduceCreate {
	mutation := newPlanIntroduceMutation(c.config, OpCreate)
	return &PlanIntroduceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlanIntroduce entities.
func (c *PlanIntroduceClient) CreateBulk(builders ...*PlanIntroduceCreate) *PlanIntroduceCreateBulk {
	return &PlanIntroduceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlanIntroduce.
func (c *PlanIntroduceClient) Update() *PlanIntroduceUpdate {
	mutation := newPlanIntroduceMutation(c.config, OpUpdate)
	return &PlanIntroduceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanIntroduceClient) UpdateOne(pi *PlanIntroduce) *PlanIntroduceUpdateOne {
	mutation := newPlanIntroduceMutation(c.config, OpUpdateOne, withPlanIntroduce(pi))
	return &PlanIntroduceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanIntroduceClient) UpdateOneID(id uint64) *PlanIntroduceUpdateOne {
	mutation := newPlanIntroduceMutation(c.config, OpUpdateOne, withPlanIntroduceID(id))
	return &PlanIntroduceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlanIntroduce.
func (c *PlanIntroduceClient) Delete() *PlanIntroduceDelete {
	mutation := newPlanIntroduceMutation(c.config, OpDelete)
	return &PlanIntroduceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanIntroduceClient) DeleteOne(pi *PlanIntroduce) *PlanIntroduceDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanIntroduceClient) DeleteOneID(id uint64) *PlanIntroduceDeleteOne {
	builder := c.Delete().Where(planintroduce.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanIntroduceDeleteOne{builder}
}

// Query returns a query builder for PlanIntroduce.
func (c *PlanIntroduceClient) Query() *PlanIntroduceQuery {
	return &PlanIntroduceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlanIntroduce},
		inters: c.Interceptors(),
	}
}

// Get returns a PlanIntroduce entity by its id.
func (c *PlanIntroduceClient) Get(ctx context.Context, id uint64) (*PlanIntroduce, error) {
	return c.Query().Where(planintroduce.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanIntroduceClient) GetX(ctx context.Context, id uint64) *PlanIntroduce {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a PlanIntroduce.
func (c *PlanIntroduceClient) QueryBrand(pi *PlanIntroduce) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planintroduce.Table, planintroduce.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, planintroduce.BrandTable, planintroduce.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanIntroduceClient) Hooks() []Hook {
	return c.hooks.PlanIntroduce
}

// Interceptors returns the client interceptors.
func (c *PlanIntroduceClient) Interceptors() []Interceptor {
	return c.inters.PlanIntroduce
}

func (c *PlanIntroduceClient) mutate(ctx context.Context, m *PlanIntroduceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanIntroduceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanIntroduceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanIntroduceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanIntroduceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlanIntroduce mutation op: %q", m.Op())
	}
}

// PointLogClient is a client for the PointLog schema.
type PointLogClient struct {
	config
}

// NewPointLogClient returns a client for the PointLog from the given config.
func NewPointLogClient(c config) *PointLogClient {
	return &PointLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointlog.Hooks(f(g(h())))`.
func (c *PointLogClient) Use(hooks ...Hook) {
	c.hooks.PointLog = append(c.hooks.PointLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pointlog.Intercept(f(g(h())))`.
func (c *PointLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.PointLog = append(c.inters.PointLog, interceptors...)
}

// Create returns a builder for creating a PointLog entity.
func (c *PointLogClient) Create() *PointLogCreate {
	mutation := newPointLogMutation(c.config, OpCreate)
	return &PointLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PointLog entities.
func (c *PointLogClient) CreateBulk(builders ...*PointLogCreate) *PointLogCreateBulk {
	return &PointLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PointLog.
func (c *PointLogClient) Update() *PointLogUpdate {
	mutation := newPointLogMutation(c.config, OpUpdate)
	return &PointLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointLogClient) UpdateOne(pl *PointLog) *PointLogUpdateOne {
	mutation := newPointLogMutation(c.config, OpUpdateOne, withPointLog(pl))
	return &PointLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointLogClient) UpdateOneID(id uint64) *PointLogUpdateOne {
	mutation := newPointLogMutation(c.config, OpUpdateOne, withPointLogID(id))
	return &PointLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PointLog.
func (c *PointLogClient) Delete() *PointLogDelete {
	mutation := newPointLogMutation(c.config, OpDelete)
	return &PointLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PointLogClient) DeleteOne(pl *PointLog) *PointLogDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PointLogClient) DeleteOneID(id uint64) *PointLogDeleteOne {
	builder := c.Delete().Where(pointlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointLogDeleteOne{builder}
}

// Query returns a query builder for PointLog.
func (c *PointLogClient) Query() *PointLogQuery {
	return &PointLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePointLog},
		inters: c.Interceptors(),
	}
}

// Get returns a PointLog entity by its id.
func (c *PointLogClient) Get(ctx context.Context, id uint64) (*PointLog, error) {
	return c.Query().Where(pointlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointLogClient) GetX(ctx context.Context, id uint64) *PointLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a PointLog.
func (c *PointLogClient) QueryRider(pl *PointLog) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointlog.Table, pointlog.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pointlog.RiderTable, pointlog.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a PointLog.
func (c *PointLogClient) QueryOrder(pl *PointLog) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointlog.Table, pointlog.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pointlog.OrderTable, pointlog.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PointLogClient) Hooks() []Hook {
	hooks := c.hooks.PointLog
	return append(hooks[:len(hooks):len(hooks)], pointlog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PointLogClient) Interceptors() []Interceptor {
	return c.inters.PointLog
}

func (c *PointLogClient) mutate(ctx context.Context, m *PointLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PointLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PointLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PointLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PointLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PointLog mutation op: %q", m.Op())
	}
}

// ReserveClient is a client for the Reserve schema.
type ReserveClient struct {
	config
}

// NewReserveClient returns a client for the Reserve from the given config.
func NewReserveClient(c config) *ReserveClient {
	return &ReserveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reserve.Hooks(f(g(h())))`.
func (c *ReserveClient) Use(hooks ...Hook) {
	c.hooks.Reserve = append(c.hooks.Reserve, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reserve.Intercept(f(g(h())))`.
func (c *ReserveClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reserve = append(c.inters.Reserve, interceptors...)
}

// Create returns a builder for creating a Reserve entity.
func (c *ReserveClient) Create() *ReserveCreate {
	mutation := newReserveMutation(c.config, OpCreate)
	return &ReserveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reserve entities.
func (c *ReserveClient) CreateBulk(builders ...*ReserveCreate) *ReserveCreateBulk {
	return &ReserveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reserve.
func (c *ReserveClient) Update() *ReserveUpdate {
	mutation := newReserveMutation(c.config, OpUpdate)
	return &ReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReserveClient) UpdateOne(r *Reserve) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserve(r))
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReserveClient) UpdateOneID(id uint64) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserveID(id))
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reserve.
func (c *ReserveClient) Delete() *ReserveDelete {
	mutation := newReserveMutation(c.config, OpDelete)
	return &ReserveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReserveClient) DeleteOne(r *Reserve) *ReserveDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReserveClient) DeleteOneID(id uint64) *ReserveDeleteOne {
	builder := c.Delete().Where(reserve.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReserveDeleteOne{builder}
}

// Query returns a query builder for Reserve.
func (c *ReserveClient) Query() *ReserveQuery {
	return &ReserveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReserve},
		inters: c.Interceptors(),
	}
}

// Get returns a Reserve entity by its id.
func (c *ReserveClient) Get(ctx context.Context, id uint64) (*Reserve, error) {
	return c.Query().Where(reserve.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReserveClient) GetX(ctx context.Context, id uint64) *Reserve {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCabinet queries the cabinet edge of a Reserve.
func (c *ReserveClient) QueryCabinet(r *Reserve) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserve.Table, reserve.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, reserve.CabinetTable, reserve.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Reserve.
func (c *ReserveClient) QueryRider(r *Reserve) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserve.Table, reserve.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, reserve.RiderTable, reserve.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Reserve.
func (c *ReserveClient) QueryCity(r *Reserve) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserve.Table, reserve.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, reserve.CityTable, reserve.CityColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusiness queries the business edge of a Reserve.
func (c *ReserveClient) QueryBusiness(r *Reserve) *BusinessQuery {
	query := (&BusinessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserve.Table, reserve.FieldID, id),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, reserve.BusinessTable, reserve.BusinessColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReserveClient) Hooks() []Hook {
	hooks := c.hooks.Reserve
	return append(hooks[:len(hooks):len(hooks)], reserve.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ReserveClient) Interceptors() []Interceptor {
	return c.inters.Reserve
}

func (c *ReserveClient) mutate(ctx context.Context, m *ReserveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReserveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReserveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reserve mutation op: %q", m.Op())
	}
}

// RiderClient is a client for the Rider schema.
type RiderClient struct {
	config
}

// NewRiderClient returns a client for the Rider from the given config.
func NewRiderClient(c config) *RiderClient {
	return &RiderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rider.Hooks(f(g(h())))`.
func (c *RiderClient) Use(hooks ...Hook) {
	c.hooks.Rider = append(c.hooks.Rider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rider.Intercept(f(g(h())))`.
func (c *RiderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rider = append(c.inters.Rider, interceptors...)
}

// Create returns a builder for creating a Rider entity.
func (c *RiderClient) Create() *RiderCreate {
	mutation := newRiderMutation(c.config, OpCreate)
	return &RiderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rider entities.
func (c *RiderClient) CreateBulk(builders ...*RiderCreate) *RiderCreateBulk {
	return &RiderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rider.
func (c *RiderClient) Update() *RiderUpdate {
	mutation := newRiderMutation(c.config, OpUpdate)
	return &RiderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiderClient) UpdateOne(r *Rider) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRider(r))
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiderClient) UpdateOneID(id uint64) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRiderID(id))
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rider.
func (c *RiderClient) Delete() *RiderDelete {
	mutation := newRiderMutation(c.config, OpDelete)
	return &RiderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiderClient) DeleteOne(r *Rider) *RiderDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiderClient) DeleteOneID(id uint64) *RiderDeleteOne {
	builder := c.Delete().Where(rider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiderDeleteOne{builder}
}

// Query returns a query builder for Rider.
func (c *RiderClient) Query() *RiderQuery {
	return &RiderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRider},
		inters: c.Interceptors(),
	}
}

// Get returns a Rider entity by its id.
func (c *RiderClient) Get(ctx context.Context, id uint64) (*Rider, error) {
	return c.Query().Where(rider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiderClient) GetX(ctx context.Context, id uint64) *Rider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStation queries the station edge of a Rider.
func (c *RiderClient) QueryStation(r *Rider) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rider.StationTable, rider.StationColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a Rider.
func (c *RiderClient) QueryPerson(r *Rider) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rider.PersonTable, rider.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Rider.
func (c *RiderClient) QueryEnterprise(r *Rider) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rider.EnterpriseTable, rider.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContracts queries the contracts edge of a Rider.
func (c *RiderClient) QueryContracts(r *Rider) *ContractQuery {
	query := (&ContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.ContractsTable, rider.ContractsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFaults queries the faults edge of a Rider.
func (c *RiderClient) QueryFaults(r *Rider) *CabinetFaultQuery {
	query := (&CabinetFaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(cabinetfault.Table, cabinetfault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.FaultsTable, rider.FaultsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Rider.
func (c *RiderClient) QueryOrders(r *Rider) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.OrdersTable, rider.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExchanges queries the exchanges edge of a Rider.
func (c *RiderClient) QueryExchanges(r *Rider) *ExchangeQuery {
	query := (&ExchangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.ExchangesTable, rider.ExchangesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribes queries the subscribes edge of a Rider.
func (c *RiderClient) QuerySubscribes(r *Rider) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.SubscribesTable, rider.SubscribesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Rider.
func (c *RiderClient) QueryStocks(r *Rider) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.StocksTable, rider.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowups queries the followups edge of a Rider.
func (c *RiderClient) QueryFollowups(r *Rider) *RiderFollowUpQuery {
	query := (&RiderFollowUpClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(riderfollowup.Table, riderfollowup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.FollowupsTable, rider.FollowupsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Rider.
func (c *RiderClient) QueryBattery(r *Rider) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, rider.BatteryTable, rider.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteryFlows queries the battery_flows edge of a Rider.
func (c *RiderClient) QueryBatteryFlows(r *Rider) *BatteryFlowQuery {
	query := (&BatteryFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(batteryflow.Table, batteryflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.BatteryFlowsTable, rider.BatteryFlowsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiderClient) Hooks() []Hook {
	hooks := c.hooks.Rider
	return append(hooks[:len(hooks):len(hooks)], rider.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RiderClient) Interceptors() []Interceptor {
	return c.inters.Rider
}

func (c *RiderClient) mutate(ctx context.Context, m *RiderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rider mutation op: %q", m.Op())
	}
}

// RiderFollowUpClient is a client for the RiderFollowUp schema.
type RiderFollowUpClient struct {
	config
}

// NewRiderFollowUpClient returns a client for the RiderFollowUp from the given config.
func NewRiderFollowUpClient(c config) *RiderFollowUpClient {
	return &RiderFollowUpClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `riderfollowup.Hooks(f(g(h())))`.
func (c *RiderFollowUpClient) Use(hooks ...Hook) {
	c.hooks.RiderFollowUp = append(c.hooks.RiderFollowUp, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `riderfollowup.Intercept(f(g(h())))`.
func (c *RiderFollowUpClient) Intercept(interceptors ...Interceptor) {
	c.inters.RiderFollowUp = append(c.inters.RiderFollowUp, interceptors...)
}

// Create returns a builder for creating a RiderFollowUp entity.
func (c *RiderFollowUpClient) Create() *RiderFollowUpCreate {
	mutation := newRiderFollowUpMutation(c.config, OpCreate)
	return &RiderFollowUpCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RiderFollowUp entities.
func (c *RiderFollowUpClient) CreateBulk(builders ...*RiderFollowUpCreate) *RiderFollowUpCreateBulk {
	return &RiderFollowUpCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RiderFollowUp.
func (c *RiderFollowUpClient) Update() *RiderFollowUpUpdate {
	mutation := newRiderFollowUpMutation(c.config, OpUpdate)
	return &RiderFollowUpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiderFollowUpClient) UpdateOne(rfu *RiderFollowUp) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUp(rfu))
	return &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiderFollowUpClient) UpdateOneID(id uint64) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUpID(id))
	return &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RiderFollowUp.
func (c *RiderFollowUpClient) Delete() *RiderFollowUpDelete {
	mutation := newRiderFollowUpMutation(c.config, OpDelete)
	return &RiderFollowUpDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiderFollowUpClient) DeleteOne(rfu *RiderFollowUp) *RiderFollowUpDeleteOne {
	return c.DeleteOneID(rfu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiderFollowUpClient) DeleteOneID(id uint64) *RiderFollowUpDeleteOne {
	builder := c.Delete().Where(riderfollowup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiderFollowUpDeleteOne{builder}
}

// Query returns a query builder for RiderFollowUp.
func (c *RiderFollowUpClient) Query() *RiderFollowUpQuery {
	return &RiderFollowUpQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRiderFollowUp},
		inters: c.Interceptors(),
	}
}

// Get returns a RiderFollowUp entity by its id.
func (c *RiderFollowUpClient) Get(ctx context.Context, id uint64) (*RiderFollowUp, error) {
	return c.Query().Where(riderfollowup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiderFollowUpClient) GetX(ctx context.Context, id uint64) *RiderFollowUp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManager queries the manager edge of a RiderFollowUp.
func (c *RiderFollowUpClient) QueryManager(rfu *RiderFollowUp) *ManagerQuery {
	query := (&ManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rfu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riderfollowup.Table, riderfollowup.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, riderfollowup.ManagerTable, riderfollowup.ManagerColumn),
		)
		fromV = sqlgraph.Neighbors(rfu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a RiderFollowUp.
func (c *RiderFollowUpClient) QueryRider(rfu *RiderFollowUp) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rfu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riderfollowup.Table, riderfollowup.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, riderfollowup.RiderTable, riderfollowup.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(rfu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiderFollowUpClient) Hooks() []Hook {
	hooks := c.hooks.RiderFollowUp
	return append(hooks[:len(hooks):len(hooks)], riderfollowup.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RiderFollowUpClient) Interceptors() []Interceptor {
	return c.inters.RiderFollowUp
}

func (c *RiderFollowUpClient) mutate(ctx context.Context, m *RiderFollowUpMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiderFollowUpCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiderFollowUpUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiderFollowUpDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RiderFollowUp mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id uint64) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id uint64) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id uint64) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id uint64) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManagers queries the managers edge of a Role.
func (c *RoleClient) QueryManagers(r *Role) *ManagerQuery {
	query := (&ManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.ManagersTable, role.ManagersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `setting.Intercept(f(g(h())))`.
func (c *SettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Setting = append(c.inters.Setting, interceptors...)
}

// Create returns a builder for creating a Setting entity.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id uint64) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettingClient) DeleteOneID(id uint64) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id uint64) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id uint64) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	hooks := c.hooks.Setting
	return append(hooks[:len(hooks):len(hooks)], setting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SettingClient) Interceptors() []Interceptor {
	return c.inters.Setting
}

func (c *SettingClient) mutate(ctx context.Context, m *SettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Setting mutation op: %q", m.Op())
	}
}

// StockClient is a client for the Stock schema.
type StockClient struct {
	config
}

// NewStockClient returns a client for the Stock from the given config.
func NewStockClient(c config) *StockClient {
	return &StockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stock.Hooks(f(g(h())))`.
func (c *StockClient) Use(hooks ...Hook) {
	c.hooks.Stock = append(c.hooks.Stock, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stock.Intercept(f(g(h())))`.
func (c *StockClient) Intercept(interceptors ...Interceptor) {
	c.inters.Stock = append(c.inters.Stock, interceptors...)
}

// Create returns a builder for creating a Stock entity.
func (c *StockClient) Create() *StockCreate {
	mutation := newStockMutation(c.config, OpCreate)
	return &StockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stock entities.
func (c *StockClient) CreateBulk(builders ...*StockCreate) *StockCreateBulk {
	return &StockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stock.
func (c *StockClient) Update() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockClient) UpdateOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockClient) UpdateOneID(id uint64) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stock.
func (c *StockClient) Delete() *StockDelete {
	mutation := newStockMutation(c.config, OpDelete)
	return &StockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockClient) DeleteOne(s *Stock) *StockDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StockClient) DeleteOneID(id uint64) *StockDeleteOne {
	builder := c.Delete().Where(stock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockDeleteOne{builder}
}

// Query returns a query builder for Stock.
func (c *StockClient) Query() *StockQuery {
	return &StockQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStock},
		inters: c.Interceptors(),
	}
}

// Get returns a Stock entity by its id.
func (c *StockClient) Get(ctx context.Context, id uint64) (*Stock, error) {
	return c.Query().Where(stock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockClient) GetX(ctx context.Context, id uint64) *Stock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Stock.
func (c *StockClient) QueryCity(s *Stock) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.CityTable, stock.CityColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Stock.
func (c *StockClient) QuerySubscribe(s *Stock) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.SubscribeTable, stock.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Stock.
func (c *StockClient) QueryEbike(s *Stock) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.EbikeTable, stock.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Stock.
func (c *StockClient) QueryBrand(s *Stock) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.BrandTable, stock.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Stock.
func (c *StockClient) QueryBattery(s *Stock) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.BatteryTable, stock.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Stock.
func (c *StockClient) QueryStore(s *Stock) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.StoreTable, stock.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Stock.
func (c *StockClient) QueryCabinet(s *Stock) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.CabinetTable, stock.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Stock.
func (c *StockClient) QueryRider(s *Stock) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.RiderTable, stock.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Stock.
func (c *StockClient) QueryEmployee(s *Stock) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.EmployeeTable, stock.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpouse queries the spouse edge of a Stock.
func (c *StockClient) QuerySpouse(s *Stock) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, stock.SpouseTable, stock.SpouseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Stock.
func (c *StockClient) QueryParent(s *Stock) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.ParentTable, stock.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Stock.
func (c *StockClient) QueryChildren(s *Stock) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, stock.ChildrenTable, stock.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Stock.
func (c *StockClient) QueryEnterprise(s *Stock) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.EnterpriseTable, stock.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Stock.
func (c *StockClient) QueryStation(s *Stock) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.StationTable, stock.StationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StockClient) Hooks() []Hook {
	hooks := c.hooks.Stock
	return append(hooks[:len(hooks):len(hooks)], stock.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *StockClient) Interceptors() []Interceptor {
	return c.inters.Stock
}

func (c *StockClient) mutate(ctx context.Context, m *StockMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StockCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StockUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StockDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Stock mutation op: %q", m.Op())
	}
}

// StockSummaryClient is a client for the StockSummary schema.
type StockSummaryClient struct {
	config
}

// NewStockSummaryClient returns a client for the StockSummary from the given config.
func NewStockSummaryClient(c config) *StockSummaryClient {
	return &StockSummaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stocksummary.Hooks(f(g(h())))`.
func (c *StockSummaryClient) Use(hooks ...Hook) {
	c.hooks.StockSummary = append(c.hooks.StockSummary, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stocksummary.Intercept(f(g(h())))`.
func (c *StockSummaryClient) Intercept(interceptors ...Interceptor) {
	c.inters.StockSummary = append(c.inters.StockSummary, interceptors...)
}

// Create returns a builder for creating a StockSummary entity.
func (c *StockSummaryClient) Create() *StockSummaryCreate {
	mutation := newStockSummaryMutation(c.config, OpCreate)
	return &StockSummaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StockSummary entities.
func (c *StockSummaryClient) CreateBulk(builders ...*StockSummaryCreate) *StockSummaryCreateBulk {
	return &StockSummaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StockSummary.
func (c *StockSummaryClient) Update() *StockSummaryUpdate {
	mutation := newStockSummaryMutation(c.config, OpUpdate)
	return &StockSummaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockSummaryClient) UpdateOne(ss *StockSummary) *StockSummaryUpdateOne {
	mutation := newStockSummaryMutation(c.config, OpUpdateOne, withStockSummary(ss))
	return &StockSummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockSummaryClient) UpdateOneID(id uint64) *StockSummaryUpdateOne {
	mutation := newStockSummaryMutation(c.config, OpUpdateOne, withStockSummaryID(id))
	return &StockSummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StockSummary.
func (c *StockSummaryClient) Delete() *StockSummaryDelete {
	mutation := newStockSummaryMutation(c.config, OpDelete)
	return &StockSummaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockSummaryClient) DeleteOne(ss *StockSummary) *StockSummaryDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StockSummaryClient) DeleteOneID(id uint64) *StockSummaryDeleteOne {
	builder := c.Delete().Where(stocksummary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockSummaryDeleteOne{builder}
}

// Query returns a query builder for StockSummary.
func (c *StockSummaryClient) Query() *StockSummaryQuery {
	return &StockSummaryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStockSummary},
		inters: c.Interceptors(),
	}
}

// Get returns a StockSummary entity by its id.
func (c *StockSummaryClient) Get(ctx context.Context, id uint64) (*StockSummary, error) {
	return c.Query().Where(stocksummary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockSummaryClient) GetX(ctx context.Context, id uint64) *StockSummary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a StockSummary.
func (c *StockSummaryClient) QueryEnterprise(ss *StockSummary) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.EnterpriseTable, stocksummary.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a StockSummary.
func (c *StockSummaryClient) QueryStation(ss *StockSummary) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.StationTable, stocksummary.StationColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a StockSummary.
func (c *StockSummaryClient) QueryStore(ss *StockSummary) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.StoreTable, stocksummary.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a StockSummary.
func (c *StockSummaryClient) QueryRider(ss *StockSummary) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.RiderTable, stocksummary.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a StockSummary.
func (c *StockSummaryClient) QueryCabinet(ss *StockSummary) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.CabinetTable, stocksummary.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StockSummaryClient) Hooks() []Hook {
	return c.hooks.StockSummary
}

// Interceptors returns the client interceptors.
func (c *StockSummaryClient) Interceptors() []Interceptor {
	return c.inters.StockSummary
}

func (c *StockSummaryClient) mutate(ctx context.Context, m *StockSummaryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StockSummaryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StockSummaryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StockSummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StockSummaryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StockSummary mutation op: %q", m.Op())
	}
}

// StoreClient is a client for the Store schema.
type StoreClient struct {
	config
}

// NewStoreClient returns a client for the Store from the given config.
func NewStoreClient(c config) *StoreClient {
	return &StoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `store.Hooks(f(g(h())))`.
func (c *StoreClient) Use(hooks ...Hook) {
	c.hooks.Store = append(c.hooks.Store, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `store.Intercept(f(g(h())))`.
func (c *StoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.Store = append(c.inters.Store, interceptors...)
}

// Create returns a builder for creating a Store entity.
func (c *StoreClient) Create() *StoreCreate {
	mutation := newStoreMutation(c.config, OpCreate)
	return &StoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Store entities.
func (c *StoreClient) CreateBulk(builders ...*StoreCreate) *StoreCreateBulk {
	return &StoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Store.
func (c *StoreClient) Update() *StoreUpdate {
	mutation := newStoreMutation(c.config, OpUpdate)
	return &StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreClient) UpdateOne(s *Store) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(s))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreClient) UpdateOneID(id uint64) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStoreID(id))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Store.
func (c *StoreClient) Delete() *StoreDelete {
	mutation := newStoreMutation(c.config, OpDelete)
	return &StoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreClient) DeleteOne(s *Store) *StoreDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreClient) DeleteOneID(id uint64) *StoreDeleteOne {
	builder := c.Delete().Where(store.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreDeleteOne{builder}
}

// Query returns a query builder for Store.
func (c *StoreClient) Query() *StoreQuery {
	return &StoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStore},
		inters: c.Interceptors(),
	}
}

// Get returns a Store entity by its id.
func (c *StoreClient) Get(ctx context.Context, id uint64) (*Store, error) {
	return c.Query().Where(store.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreClient) GetX(ctx context.Context, id uint64) *Store {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Store.
func (c *StoreClient) QueryCity(s *Store) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, store.CityTable, store.CityColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBranch queries the branch edge of a Store.
func (c *StoreClient) QueryBranch(s *Store) *BranchQuery {
	query := (&BranchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, store.BranchTable, store.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Store.
func (c *StoreClient) QueryEmployee(s *Store) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, store.EmployeeTable, store.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Store.
func (c *StoreClient) QueryStocks(s *Store) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.StocksTable, store.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttendances queries the attendances edge of a Store.
func (c *StoreClient) QueryAttendances(s *Store) *AttendanceQuery {
	query := (&AttendanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.AttendancesTable, store.AttendancesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExceptions queries the exceptions edge of a Store.
func (c *StoreClient) QueryExceptions(s *Store) *ExceptionQuery {
	query := (&ExceptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(exception.Table, exception.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.ExceptionsTable, store.ExceptionsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StoreClient) Hooks() []Hook {
	hooks := c.hooks.Store
	return append(hooks[:len(hooks):len(hooks)], store.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *StoreClient) Interceptors() []Interceptor {
	return c.inters.Store
}

func (c *StoreClient) mutate(ctx context.Context, m *StoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Store mutation op: %q", m.Op())
	}
}

// SubscribeClient is a client for the Subscribe schema.
type SubscribeClient struct {
	config
}

// NewSubscribeClient returns a client for the Subscribe from the given config.
func NewSubscribeClient(c config) *SubscribeClient {
	return &SubscribeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribe.Hooks(f(g(h())))`.
func (c *SubscribeClient) Use(hooks ...Hook) {
	c.hooks.Subscribe = append(c.hooks.Subscribe, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribe.Intercept(f(g(h())))`.
func (c *SubscribeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subscribe = append(c.inters.Subscribe, interceptors...)
}

// Create returns a builder for creating a Subscribe entity.
func (c *SubscribeClient) Create() *SubscribeCreate {
	mutation := newSubscribeMutation(c.config, OpCreate)
	return &SubscribeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subscribe entities.
func (c *SubscribeClient) CreateBulk(builders ...*SubscribeCreate) *SubscribeCreateBulk {
	return &SubscribeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subscribe.
func (c *SubscribeClient) Update() *SubscribeUpdate {
	mutation := newSubscribeMutation(c.config, OpUpdate)
	return &SubscribeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeClient) UpdateOne(s *Subscribe) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribe(s))
	return &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeClient) UpdateOneID(id uint64) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribeID(id))
	return &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subscribe.
func (c *SubscribeClient) Delete() *SubscribeDelete {
	mutation := newSubscribeMutation(c.config, OpDelete)
	return &SubscribeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeClient) DeleteOne(s *Subscribe) *SubscribeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeClient) DeleteOneID(id uint64) *SubscribeDeleteOne {
	builder := c.Delete().Where(subscribe.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeDeleteOne{builder}
}

// Query returns a query builder for Subscribe.
func (c *SubscribeClient) Query() *SubscribeQuery {
	return &SubscribeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribe},
		inters: c.Interceptors(),
	}
}

// Get returns a Subscribe entity by its id.
func (c *SubscribeClient) Get(ctx context.Context, id uint64) (*Subscribe, error) {
	return c.Query().Where(subscribe.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeClient) GetX(ctx context.Context, id uint64) *Subscribe {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a Subscribe.
func (c *SubscribeClient) QueryPlan(s *Subscribe) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.PlanTable, subscribe.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Subscribe.
func (c *SubscribeClient) QueryEmployee(s *Subscribe) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.EmployeeTable, subscribe.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Subscribe.
func (c *SubscribeClient) QueryCity(s *Subscribe) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.CityTable, subscribe.CityColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Subscribe.
func (c *SubscribeClient) QueryStation(s *Subscribe) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.StationTable, subscribe.StationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Subscribe.
func (c *SubscribeClient) QueryStore(s *Subscribe) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.StoreTable, subscribe.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Subscribe.
func (c *SubscribeClient) QueryCabinet(s *Subscribe) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.CabinetTable, subscribe.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Subscribe.
func (c *SubscribeClient) QueryBrand(s *Subscribe) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.BrandTable, subscribe.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Subscribe.
func (c *SubscribeClient) QueryEbike(s *Subscribe) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.EbikeTable, subscribe.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Subscribe.
func (c *SubscribeClient) QueryRider(s *Subscribe) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.RiderTable, subscribe.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Subscribe.
func (c *SubscribeClient) QueryEnterprise(s *Subscribe) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.EnterpriseTable, subscribe.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPauses queries the pauses edge of a Subscribe.
func (c *SubscribeClient) QueryPauses(s *Subscribe) *SubscribePauseQuery {
	query := (&SubscribePauseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(subscribepause.Table, subscribepause.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.PausesTable, subscribe.PausesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySuspends queries the suspends edge of a Subscribe.
func (c *SubscribeClient) QuerySuspends(s *Subscribe) *SubscribeSuspendQuery {
	query := (&SubscribeSuspendClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(subscribesuspend.Table, subscribesuspend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.SuspendsTable, subscribe.SuspendsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAlters queries the alters edge of a Subscribe.
func (c *SubscribeClient) QueryAlters(s *Subscribe) *SubscribeAlterQuery {
	query := (&SubscribeAlterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(subscribealter.Table, subscribealter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.AltersTable, subscribe.AltersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Subscribe.
func (c *SubscribeClient) QueryOrders(s *Subscribe) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.OrdersTable, subscribe.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInitialOrder queries the initial_order edge of a Subscribe.
func (c *SubscribeClient) QueryInitialOrder(s *Subscribe) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.InitialOrderTable, subscribe.InitialOrderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the bills edge of a Subscribe.
func (c *SubscribeClient) QueryBills(s *Subscribe) *EnterpriseBillQuery {
	query := (&EnterpriseBillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(enterprisebill.Table, enterprisebill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.BillsTable, subscribe.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Subscribe.
func (c *SubscribeClient) QueryBattery(s *Subscribe) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, subscribe.BatteryTable, subscribe.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribeClient) Hooks() []Hook {
	hooks := c.hooks.Subscribe
	return append(hooks[:len(hooks):len(hooks)], subscribe.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubscribeClient) Interceptors() []Interceptor {
	return c.inters.Subscribe
}

func (c *SubscribeClient) mutate(ctx context.Context, m *SubscribeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subscribe mutation op: %q", m.Op())
	}
}

// SubscribeAlterClient is a client for the SubscribeAlter schema.
type SubscribeAlterClient struct {
	config
}

// NewSubscribeAlterClient returns a client for the SubscribeAlter from the given config.
func NewSubscribeAlterClient(c config) *SubscribeAlterClient {
	return &SubscribeAlterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribealter.Hooks(f(g(h())))`.
func (c *SubscribeAlterClient) Use(hooks ...Hook) {
	c.hooks.SubscribeAlter = append(c.hooks.SubscribeAlter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribealter.Intercept(f(g(h())))`.
func (c *SubscribeAlterClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribeAlter = append(c.inters.SubscribeAlter, interceptors...)
}

// Create returns a builder for creating a SubscribeAlter entity.
func (c *SubscribeAlterClient) Create() *SubscribeAlterCreate {
	mutation := newSubscribeAlterMutation(c.config, OpCreate)
	return &SubscribeAlterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribeAlter entities.
func (c *SubscribeAlterClient) CreateBulk(builders ...*SubscribeAlterCreate) *SubscribeAlterCreateBulk {
	return &SubscribeAlterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribeAlter.
func (c *SubscribeAlterClient) Update() *SubscribeAlterUpdate {
	mutation := newSubscribeAlterMutation(c.config, OpUpdate)
	return &SubscribeAlterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeAlterClient) UpdateOne(sa *SubscribeAlter) *SubscribeAlterUpdateOne {
	mutation := newSubscribeAlterMutation(c.config, OpUpdateOne, withSubscribeAlter(sa))
	return &SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeAlterClient) UpdateOneID(id uint64) *SubscribeAlterUpdateOne {
	mutation := newSubscribeAlterMutation(c.config, OpUpdateOne, withSubscribeAlterID(id))
	return &SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribeAlter.
func (c *SubscribeAlterClient) Delete() *SubscribeAlterDelete {
	mutation := newSubscribeAlterMutation(c.config, OpDelete)
	return &SubscribeAlterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeAlterClient) DeleteOne(sa *SubscribeAlter) *SubscribeAlterDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeAlterClient) DeleteOneID(id uint64) *SubscribeAlterDeleteOne {
	builder := c.Delete().Where(subscribealter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeAlterDeleteOne{builder}
}

// Query returns a query builder for SubscribeAlter.
func (c *SubscribeAlterClient) Query() *SubscribeAlterQuery {
	return &SubscribeAlterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribeAlter},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribeAlter entity by its id.
func (c *SubscribeAlterClient) Get(ctx context.Context, id uint64) (*SubscribeAlter, error) {
	return c.Query().Where(subscribealter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeAlterClient) GetX(ctx context.Context, id uint64) *SubscribeAlter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QueryRider(sa *SubscribeAlter) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribealter.RiderTable, subscribealter.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManager queries the manager edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QueryManager(sa *SubscribeAlter) *ManagerQuery {
	query := (&ManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribealter.ManagerTable, subscribealter.ManagerColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QueryEnterprise(sa *SubscribeAlter) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribealter.EnterpriseTable, subscribealter.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QueryAgent(sa *SubscribeAlter) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribealter.AgentTable, subscribealter.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QuerySubscribe(sa *SubscribeAlter) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribealter.SubscribeTable, subscribealter.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribeAlterClient) Hooks() []Hook {
	hooks := c.hooks.SubscribeAlter
	return append(hooks[:len(hooks):len(hooks)], subscribealter.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubscribeAlterClient) Interceptors() []Interceptor {
	return c.inters.SubscribeAlter
}

func (c *SubscribeAlterClient) mutate(ctx context.Context, m *SubscribeAlterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeAlterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeAlterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeAlterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribeAlter mutation op: %q", m.Op())
	}
}

// SubscribePauseClient is a client for the SubscribePause schema.
type SubscribePauseClient struct {
	config
}

// NewSubscribePauseClient returns a client for the SubscribePause from the given config.
func NewSubscribePauseClient(c config) *SubscribePauseClient {
	return &SubscribePauseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribepause.Hooks(f(g(h())))`.
func (c *SubscribePauseClient) Use(hooks ...Hook) {
	c.hooks.SubscribePause = append(c.hooks.SubscribePause, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribepause.Intercept(f(g(h())))`.
func (c *SubscribePauseClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribePause = append(c.inters.SubscribePause, interceptors...)
}

// Create returns a builder for creating a SubscribePause entity.
func (c *SubscribePauseClient) Create() *SubscribePauseCreate {
	mutation := newSubscribePauseMutation(c.config, OpCreate)
	return &SubscribePauseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribePause entities.
func (c *SubscribePauseClient) CreateBulk(builders ...*SubscribePauseCreate) *SubscribePauseCreateBulk {
	return &SubscribePauseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribePause.
func (c *SubscribePauseClient) Update() *SubscribePauseUpdate {
	mutation := newSubscribePauseMutation(c.config, OpUpdate)
	return &SubscribePauseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribePauseClient) UpdateOne(sp *SubscribePause) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePause(sp))
	return &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribePauseClient) UpdateOneID(id uint64) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePauseID(id))
	return &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribePause.
func (c *SubscribePauseClient) Delete() *SubscribePauseDelete {
	mutation := newSubscribePauseMutation(c.config, OpDelete)
	return &SubscribePauseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribePauseClient) DeleteOne(sp *SubscribePause) *SubscribePauseDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribePauseClient) DeleteOneID(id uint64) *SubscribePauseDeleteOne {
	builder := c.Delete().Where(subscribepause.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribePauseDeleteOne{builder}
}

// Query returns a query builder for SubscribePause.
func (c *SubscribePauseClient) Query() *SubscribePauseQuery {
	return &SubscribePauseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribePause},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribePause entity by its id.
func (c *SubscribePauseClient) Get(ctx context.Context, id uint64) (*SubscribePause, error) {
	return c.Query().Where(subscribepause.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribePauseClient) GetX(ctx context.Context, id uint64) *SubscribePause {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a SubscribePause.
func (c *SubscribePauseClient) QueryRider(sp *SubscribePause) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.RiderTable, subscribepause.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a SubscribePause.
func (c *SubscribePauseClient) QueryEmployee(sp *SubscribePause) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EmployeeTable, subscribepause.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a SubscribePause.
func (c *SubscribePauseClient) QueryCity(sp *SubscribePause) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.CityTable, subscribepause.CityColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a SubscribePause.
func (c *SubscribePauseClient) QueryStore(sp *SubscribePause) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.StoreTable, subscribepause.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndStore queries the endStore edge of a SubscribePause.
func (c *SubscribePauseClient) QueryEndStore(sp *SubscribePause) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndStoreTable, subscribepause.EndStoreColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a SubscribePause.
func (c *SubscribePauseClient) QueryCabinet(sp *SubscribePause) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.CabinetTable, subscribepause.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndCabinet queries the endCabinet edge of a SubscribePause.
func (c *SubscribePauseClient) QueryEndCabinet(sp *SubscribePause) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndCabinetTable, subscribepause.EndCabinetColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a SubscribePause.
func (c *SubscribePauseClient) QuerySubscribe(sp *SubscribePause) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribepause.SubscribeTable, subscribepause.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndEmployee queries the end_employee edge of a SubscribePause.
func (c *SubscribePauseClient) QueryEndEmployee(sp *SubscribePause) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndEmployeeTable, subscribepause.EndEmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySuspends queries the suspends edge of a SubscribePause.
func (c *SubscribePauseClient) QuerySuspends(sp *SubscribePause) *SubscribeSuspendQuery {
	query := (&SubscribeSuspendClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(subscribesuspend.Table, subscribesuspend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribepause.SuspendsTable, subscribepause.SuspendsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribePauseClient) Hooks() []Hook {
	hooks := c.hooks.SubscribePause
	return append(hooks[:len(hooks):len(hooks)], subscribepause.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubscribePauseClient) Interceptors() []Interceptor {
	return c.inters.SubscribePause
}

func (c *SubscribePauseClient) mutate(ctx context.Context, m *SubscribePauseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribePauseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribePauseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribePauseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribePause mutation op: %q", m.Op())
	}
}

// SubscribeReminderClient is a client for the SubscribeReminder schema.
type SubscribeReminderClient struct {
	config
}

// NewSubscribeReminderClient returns a client for the SubscribeReminder from the given config.
func NewSubscribeReminderClient(c config) *SubscribeReminderClient {
	return &SubscribeReminderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribereminder.Hooks(f(g(h())))`.
func (c *SubscribeReminderClient) Use(hooks ...Hook) {
	c.hooks.SubscribeReminder = append(c.hooks.SubscribeReminder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribereminder.Intercept(f(g(h())))`.
func (c *SubscribeReminderClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribeReminder = append(c.inters.SubscribeReminder, interceptors...)
}

// Create returns a builder for creating a SubscribeReminder entity.
func (c *SubscribeReminderClient) Create() *SubscribeReminderCreate {
	mutation := newSubscribeReminderMutation(c.config, OpCreate)
	return &SubscribeReminderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribeReminder entities.
func (c *SubscribeReminderClient) CreateBulk(builders ...*SubscribeReminderCreate) *SubscribeReminderCreateBulk {
	return &SubscribeReminderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribeReminder.
func (c *SubscribeReminderClient) Update() *SubscribeReminderUpdate {
	mutation := newSubscribeReminderMutation(c.config, OpUpdate)
	return &SubscribeReminderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeReminderClient) UpdateOne(sr *SubscribeReminder) *SubscribeReminderUpdateOne {
	mutation := newSubscribeReminderMutation(c.config, OpUpdateOne, withSubscribeReminder(sr))
	return &SubscribeReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeReminderClient) UpdateOneID(id uint64) *SubscribeReminderUpdateOne {
	mutation := newSubscribeReminderMutation(c.config, OpUpdateOne, withSubscribeReminderID(id))
	return &SubscribeReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribeReminder.
func (c *SubscribeReminderClient) Delete() *SubscribeReminderDelete {
	mutation := newSubscribeReminderMutation(c.config, OpDelete)
	return &SubscribeReminderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeReminderClient) DeleteOne(sr *SubscribeReminder) *SubscribeReminderDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeReminderClient) DeleteOneID(id uint64) *SubscribeReminderDeleteOne {
	builder := c.Delete().Where(subscribereminder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeReminderDeleteOne{builder}
}

// Query returns a query builder for SubscribeReminder.
func (c *SubscribeReminderClient) Query() *SubscribeReminderQuery {
	return &SubscribeReminderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribeReminder},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribeReminder entity by its id.
func (c *SubscribeReminderClient) Get(ctx context.Context, id uint64) (*SubscribeReminder, error) {
	return c.Query().Where(subscribereminder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeReminderClient) GetX(ctx context.Context, id uint64) *SubscribeReminder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribe queries the subscribe edge of a SubscribeReminder.
func (c *SubscribeReminderClient) QuerySubscribe(sr *SubscribeReminder) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribereminder.Table, subscribereminder.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribereminder.SubscribeTable, subscribereminder.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a SubscribeReminder.
func (c *SubscribeReminderClient) QueryPlan(sr *SubscribeReminder) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribereminder.Table, subscribereminder.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribereminder.PlanTable, subscribereminder.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a SubscribeReminder.
func (c *SubscribeReminderClient) QueryRider(sr *SubscribeReminder) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribereminder.Table, subscribereminder.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribereminder.RiderTable, subscribereminder.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribeReminderClient) Hooks() []Hook {
	return c.hooks.SubscribeReminder
}

// Interceptors returns the client interceptors.
func (c *SubscribeReminderClient) Interceptors() []Interceptor {
	return c.inters.SubscribeReminder
}

func (c *SubscribeReminderClient) mutate(ctx context.Context, m *SubscribeReminderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeReminderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeReminderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeReminderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribeReminder mutation op: %q", m.Op())
	}
}

// SubscribeSuspendClient is a client for the SubscribeSuspend schema.
type SubscribeSuspendClient struct {
	config
}

// NewSubscribeSuspendClient returns a client for the SubscribeSuspend from the given config.
func NewSubscribeSuspendClient(c config) *SubscribeSuspendClient {
	return &SubscribeSuspendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribesuspend.Hooks(f(g(h())))`.
func (c *SubscribeSuspendClient) Use(hooks ...Hook) {
	c.hooks.SubscribeSuspend = append(c.hooks.SubscribeSuspend, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribesuspend.Intercept(f(g(h())))`.
func (c *SubscribeSuspendClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribeSuspend = append(c.inters.SubscribeSuspend, interceptors...)
}

// Create returns a builder for creating a SubscribeSuspend entity.
func (c *SubscribeSuspendClient) Create() *SubscribeSuspendCreate {
	mutation := newSubscribeSuspendMutation(c.config, OpCreate)
	return &SubscribeSuspendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribeSuspend entities.
func (c *SubscribeSuspendClient) CreateBulk(builders ...*SubscribeSuspendCreate) *SubscribeSuspendCreateBulk {
	return &SubscribeSuspendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribeSuspend.
func (c *SubscribeSuspendClient) Update() *SubscribeSuspendUpdate {
	mutation := newSubscribeSuspendMutation(c.config, OpUpdate)
	return &SubscribeSuspendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeSuspendClient) UpdateOne(ss *SubscribeSuspend) *SubscribeSuspendUpdateOne {
	mutation := newSubscribeSuspendMutation(c.config, OpUpdateOne, withSubscribeSuspend(ss))
	return &SubscribeSuspendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeSuspendClient) UpdateOneID(id uint64) *SubscribeSuspendUpdateOne {
	mutation := newSubscribeSuspendMutation(c.config, OpUpdateOne, withSubscribeSuspendID(id))
	return &SubscribeSuspendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribeSuspend.
func (c *SubscribeSuspendClient) Delete() *SubscribeSuspendDelete {
	mutation := newSubscribeSuspendMutation(c.config, OpDelete)
	return &SubscribeSuspendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeSuspendClient) DeleteOne(ss *SubscribeSuspend) *SubscribeSuspendDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeSuspendClient) DeleteOneID(id uint64) *SubscribeSuspendDeleteOne {
	builder := c.Delete().Where(subscribesuspend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeSuspendDeleteOne{builder}
}

// Query returns a query builder for SubscribeSuspend.
func (c *SubscribeSuspendClient) Query() *SubscribeSuspendQuery {
	return &SubscribeSuspendQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribeSuspend},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribeSuspend entity by its id.
func (c *SubscribeSuspendClient) Get(ctx context.Context, id uint64) (*SubscribeSuspend, error) {
	return c.Query().Where(subscribesuspend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeSuspendClient) GetX(ctx context.Context, id uint64) *SubscribeSuspend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a SubscribeSuspend.
func (c *SubscribeSuspendClient) QueryCity(ss *SubscribeSuspend) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribesuspend.CityTable, subscribesuspend.CityColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a SubscribeSuspend.
func (c *SubscribeSuspendClient) QueryRider(ss *SubscribeSuspend) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribesuspend.RiderTable, subscribesuspend.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a SubscribeSuspend.
func (c *SubscribeSuspendClient) QuerySubscribe(ss *SubscribeSuspend) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribesuspend.SubscribeTable, subscribesuspend.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPause queries the pause edge of a SubscribeSuspend.
func (c *SubscribeSuspendClient) QueryPause(ss *SubscribeSuspend) *SubscribePauseQuery {
	query := (&SubscribePauseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, id),
			sqlgraph.To(subscribepause.Table, subscribepause.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribesuspend.PauseTable, subscribesuspend.PauseColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribeSuspendClient) Hooks() []Hook {
	hooks := c.hooks.SubscribeSuspend
	return append(hooks[:len(hooks):len(hooks)], subscribesuspend.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubscribeSuspendClient) Interceptors() []Interceptor {
	return c.inters.SubscribeSuspend
}

func (c *SubscribeSuspendClient) mutate(ctx context.Context, m *SubscribeSuspendMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeSuspendCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeSuspendUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeSuspendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeSuspendDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribeSuspend mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Agent, Allocate, Assistance, Attendance, Battery, BatteryFlow, BatteryModel,
		Branch, BranchContract, Business, Cabinet, CabinetFault, City, Commission,
		Contract, Coupon, CouponAssembly, CouponTemplate, Ebike, EbikeBrand, Employee,
		Enterprise, EnterpriseBatterySwap, EnterpriseBill, EnterpriseContract,
		EnterprisePrepayment, EnterprisePrice, EnterpriseStatement, EnterpriseStation,
		Exception, Exchange, Export, Feedback, Inventory, Manager, Order, OrderRefund,
		Person, Plan, PlanIntroduce, PointLog, Reserve, Rider, RiderFollowUp, Role,
		Setting, Stock, StockSummary, Store, Subscribe, SubscribeAlter, SubscribePause,
		SubscribeReminder, SubscribeSuspend []ent.Hook
	}
	inters struct {
		Agent, Allocate, Assistance, Attendance, Battery, BatteryFlow, BatteryModel,
		Branch, BranchContract, Business, Cabinet, CabinetFault, City, Commission,
		Contract, Coupon, CouponAssembly, CouponTemplate, Ebike, EbikeBrand, Employee,
		Enterprise, EnterpriseBatterySwap, EnterpriseBill, EnterpriseContract,
		EnterprisePrepayment, EnterprisePrice, EnterpriseStatement, EnterpriseStation,
		Exception, Exchange, Export, Feedback, Inventory, Manager, Order, OrderRefund,
		Person, Plan, PlanIntroduce, PointLog, Reserve, Rider, RiderFollowUp, Role,
		Setting, Stock, StockSummary, Store, Subscribe, SubscribeAlter, SubscribePause,
		SubscribeReminder, SubscribeSuspend []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
