// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/auroraride/aurservd/internal/ent/migrate"

	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/setting"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BatteryModel is the client for interacting with the BatteryModel builders.
	BatteryModel *BatteryModelClient
	// Branch is the client for interacting with the Branch builders.
	Branch *BranchClient
	// BranchContract is the client for interacting with the BranchContract builders.
	BranchContract *BranchContractClient
	// Cabinet is the client for interacting with the Cabinet builders.
	Cabinet *CabinetClient
	// City is the client for interacting with the City builders.
	City *CityClient
	// Contract is the client for interacting with the Contract builders.
	Contract *ContractClient
	// Manager is the client for interacting with the Manager builders.
	Manager *ManagerClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// Rider is the client for interacting with the Rider builders.
	Rider *RiderClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BatteryModel = NewBatteryModelClient(c.config)
	c.Branch = NewBranchClient(c.config)
	c.BranchContract = NewBranchContractClient(c.config)
	c.Cabinet = NewCabinetClient(c.config)
	c.City = NewCityClient(c.config)
	c.Contract = NewContractClient(c.config)
	c.Manager = NewManagerClient(c.config)
	c.Person = NewPersonClient(c.config)
	c.Rider = NewRiderClient(c.config)
	c.Setting = NewSettingClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		BatteryModel:   NewBatteryModelClient(cfg),
		Branch:         NewBranchClient(cfg),
		BranchContract: NewBranchContractClient(cfg),
		Cabinet:        NewCabinetClient(cfg),
		City:           NewCityClient(cfg),
		Contract:       NewContractClient(cfg),
		Manager:        NewManagerClient(cfg),
		Person:         NewPersonClient(cfg),
		Rider:          NewRiderClient(cfg),
		Setting:        NewSettingClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		BatteryModel:   NewBatteryModelClient(cfg),
		Branch:         NewBranchClient(cfg),
		BranchContract: NewBranchContractClient(cfg),
		Cabinet:        NewCabinetClient(cfg),
		City:           NewCityClient(cfg),
		Contract:       NewContractClient(cfg),
		Manager:        NewManagerClient(cfg),
		Person:         NewPersonClient(cfg),
		Rider:          NewRiderClient(cfg),
		Setting:        NewSettingClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BatteryModel.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BatteryModel.Use(hooks...)
	c.Branch.Use(hooks...)
	c.BranchContract.Use(hooks...)
	c.Cabinet.Use(hooks...)
	c.City.Use(hooks...)
	c.Contract.Use(hooks...)
	c.Manager.Use(hooks...)
	c.Person.Use(hooks...)
	c.Rider.Use(hooks...)
	c.Setting.Use(hooks...)
}

// BatteryModelClient is a client for the BatteryModel schema.
type BatteryModelClient struct {
	config
}

// NewBatteryModelClient returns a client for the BatteryModel from the given config.
func NewBatteryModelClient(c config) *BatteryModelClient {
	return &BatteryModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `batterymodel.Hooks(f(g(h())))`.
func (c *BatteryModelClient) Use(hooks ...Hook) {
	c.hooks.BatteryModel = append(c.hooks.BatteryModel, hooks...)
}

// Create returns a create builder for BatteryModel.
func (c *BatteryModelClient) Create() *BatteryModelCreate {
	mutation := newBatteryModelMutation(c.config, OpCreate)
	return &BatteryModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BatteryModel entities.
func (c *BatteryModelClient) CreateBulk(builders ...*BatteryModelCreate) *BatteryModelCreateBulk {
	return &BatteryModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BatteryModel.
func (c *BatteryModelClient) Update() *BatteryModelUpdate {
	mutation := newBatteryModelMutation(c.config, OpUpdate)
	return &BatteryModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BatteryModelClient) UpdateOne(bm *BatteryModel) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModel(bm))
	return &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BatteryModelClient) UpdateOneID(id uint64) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModelID(id))
	return &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BatteryModel.
func (c *BatteryModelClient) Delete() *BatteryModelDelete {
	mutation := newBatteryModelMutation(c.config, OpDelete)
	return &BatteryModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BatteryModelClient) DeleteOne(bm *BatteryModel) *BatteryModelDeleteOne {
	return c.DeleteOneID(bm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BatteryModelClient) DeleteOneID(id uint64) *BatteryModelDeleteOne {
	builder := c.Delete().Where(batterymodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BatteryModelDeleteOne{builder}
}

// Query returns a query builder for BatteryModel.
func (c *BatteryModelClient) Query() *BatteryModelQuery {
	return &BatteryModelQuery{
		config: c.config,
	}
}

// Get returns a BatteryModel entity by its id.
func (c *BatteryModelClient) Get(ctx context.Context, id uint64) (*BatteryModel, error) {
	return c.Query().Where(batterymodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BatteryModelClient) GetX(ctx context.Context, id uint64) *BatteryModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCabinets queries the cabinets edge of a BatteryModel.
func (c *BatteryModelClient) QueryCabinets(bm *BatteryModel) *CabinetQuery {
	query := &CabinetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batterymodel.Table, batterymodel.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, batterymodel.CabinetsTable, batterymodel.CabinetsColumn),
		)
		fromV = sqlgraph.Neighbors(bm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BatteryModelClient) Hooks() []Hook {
	return c.hooks.BatteryModel
}

// BranchClient is a client for the Branch schema.
type BranchClient struct {
	config
}

// NewBranchClient returns a client for the Branch from the given config.
func NewBranchClient(c config) *BranchClient {
	return &BranchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branch.Hooks(f(g(h())))`.
func (c *BranchClient) Use(hooks ...Hook) {
	c.hooks.Branch = append(c.hooks.Branch, hooks...)
}

// Create returns a create builder for Branch.
func (c *BranchClient) Create() *BranchCreate {
	mutation := newBranchMutation(c.config, OpCreate)
	return &BranchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Branch entities.
func (c *BranchClient) CreateBulk(builders ...*BranchCreate) *BranchCreateBulk {
	return &BranchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Branch.
func (c *BranchClient) Update() *BranchUpdate {
	mutation := newBranchMutation(c.config, OpUpdate)
	return &BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchClient) UpdateOne(b *Branch) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(b))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchClient) UpdateOneID(id uint64) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranchID(id))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Branch.
func (c *BranchClient) Delete() *BranchDelete {
	mutation := newBranchMutation(c.config, OpDelete)
	return &BranchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BranchClient) DeleteOne(b *Branch) *BranchDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BranchClient) DeleteOneID(id uint64) *BranchDeleteOne {
	builder := c.Delete().Where(branch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchDeleteOne{builder}
}

// Query returns a query builder for Branch.
func (c *BranchClient) Query() *BranchQuery {
	return &BranchQuery{
		config: c.config,
	}
}

// Get returns a Branch entity by its id.
func (c *BranchClient) Get(ctx context.Context, id uint64) (*Branch, error) {
	return c.Query().Where(branch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchClient) GetX(ctx context.Context, id uint64) *Branch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContracts queries the contracts edge of a Branch.
func (c *BranchClient) QueryContracts(b *Branch) *BranchContractQuery {
	query := &BranchContractQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(branchcontract.Table, branchcontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.ContractsTable, branch.ContractsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinets queries the cabinets edge of a Branch.
func (c *BranchClient) QueryCabinets(b *Branch) *CabinetQuery {
	query := &CabinetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.CabinetsTable, branch.CabinetsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BranchClient) Hooks() []Hook {
	return c.hooks.Branch
}

// BranchContractClient is a client for the BranchContract schema.
type BranchContractClient struct {
	config
}

// NewBranchContractClient returns a client for the BranchContract from the given config.
func NewBranchContractClient(c config) *BranchContractClient {
	return &BranchContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branchcontract.Hooks(f(g(h())))`.
func (c *BranchContractClient) Use(hooks ...Hook) {
	c.hooks.BranchContract = append(c.hooks.BranchContract, hooks...)
}

// Create returns a create builder for BranchContract.
func (c *BranchContractClient) Create() *BranchContractCreate {
	mutation := newBranchContractMutation(c.config, OpCreate)
	return &BranchContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BranchContract entities.
func (c *BranchContractClient) CreateBulk(builders ...*BranchContractCreate) *BranchContractCreateBulk {
	return &BranchContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BranchContract.
func (c *BranchContractClient) Update() *BranchContractUpdate {
	mutation := newBranchContractMutation(c.config, OpUpdate)
	return &BranchContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchContractClient) UpdateOne(bc *BranchContract) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContract(bc))
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchContractClient) UpdateOneID(id uint64) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContractID(id))
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BranchContract.
func (c *BranchContractClient) Delete() *BranchContractDelete {
	mutation := newBranchContractMutation(c.config, OpDelete)
	return &BranchContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BranchContractClient) DeleteOne(bc *BranchContract) *BranchContractDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BranchContractClient) DeleteOneID(id uint64) *BranchContractDeleteOne {
	builder := c.Delete().Where(branchcontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchContractDeleteOne{builder}
}

// Query returns a query builder for BranchContract.
func (c *BranchContractClient) Query() *BranchContractQuery {
	return &BranchContractQuery{
		config: c.config,
	}
}

// Get returns a BranchContract entity by its id.
func (c *BranchContractClient) Get(ctx context.Context, id uint64) (*BranchContract, error) {
	return c.Query().Where(branchcontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchContractClient) GetX(ctx context.Context, id uint64) *BranchContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBranch queries the branch edge of a BranchContract.
func (c *BranchContractClient) QueryBranch(bc *BranchContract) *BranchQuery {
	query := &BranchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branchcontract.Table, branchcontract.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, branchcontract.BranchTable, branchcontract.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BranchContractClient) Hooks() []Hook {
	return c.hooks.BranchContract
}

// CabinetClient is a client for the Cabinet schema.
type CabinetClient struct {
	config
}

// NewCabinetClient returns a client for the Cabinet from the given config.
func NewCabinetClient(c config) *CabinetClient {
	return &CabinetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cabinet.Hooks(f(g(h())))`.
func (c *CabinetClient) Use(hooks ...Hook) {
	c.hooks.Cabinet = append(c.hooks.Cabinet, hooks...)
}

// Create returns a create builder for Cabinet.
func (c *CabinetClient) Create() *CabinetCreate {
	mutation := newCabinetMutation(c.config, OpCreate)
	return &CabinetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cabinet entities.
func (c *CabinetClient) CreateBulk(builders ...*CabinetCreate) *CabinetCreateBulk {
	return &CabinetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cabinet.
func (c *CabinetClient) Update() *CabinetUpdate {
	mutation := newCabinetMutation(c.config, OpUpdate)
	return &CabinetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CabinetClient) UpdateOne(ca *Cabinet) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinet(ca))
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CabinetClient) UpdateOneID(id uint64) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinetID(id))
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cabinet.
func (c *CabinetClient) Delete() *CabinetDelete {
	mutation := newCabinetMutation(c.config, OpDelete)
	return &CabinetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CabinetClient) DeleteOne(ca *Cabinet) *CabinetDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CabinetClient) DeleteOneID(id uint64) *CabinetDeleteOne {
	builder := c.Delete().Where(cabinet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CabinetDeleteOne{builder}
}

// Query returns a query builder for Cabinet.
func (c *CabinetClient) Query() *CabinetQuery {
	return &CabinetQuery{
		config: c.config,
	}
}

// Get returns a Cabinet entity by its id.
func (c *CabinetClient) Get(ctx context.Context, id uint64) (*Cabinet, error) {
	return c.Query().Where(cabinet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CabinetClient) GetX(ctx context.Context, id uint64) *Cabinet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBranch queries the branch edge of a Cabinet.
func (c *CabinetClient) QueryBranch(ca *Cabinet) *BranchQuery {
	query := &BranchQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinet.BranchTable, cabinet.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModel queries the model edge of a Cabinet.
func (c *CabinetClient) QueryModel(ca *Cabinet) *BatteryModelQuery {
	query := &BatteryModelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(batterymodel.Table, batterymodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinet.ModelTable, cabinet.ModelColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CabinetClient) Hooks() []Hook {
	return c.hooks.Cabinet
}

// CityClient is a client for the City schema.
type CityClient struct {
	config
}

// NewCityClient returns a client for the City from the given config.
func NewCityClient(c config) *CityClient {
	return &CityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `city.Hooks(f(g(h())))`.
func (c *CityClient) Use(hooks ...Hook) {
	c.hooks.City = append(c.hooks.City, hooks...)
}

// Create returns a create builder for City.
func (c *CityClient) Create() *CityCreate {
	mutation := newCityMutation(c.config, OpCreate)
	return &CityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of City entities.
func (c *CityClient) CreateBulk(builders ...*CityCreate) *CityCreateBulk {
	return &CityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for City.
func (c *CityClient) Update() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CityClient) UpdateOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CityClient) UpdateOneID(id uint64) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for City.
func (c *CityClient) Delete() *CityDelete {
	mutation := newCityMutation(c.config, OpDelete)
	return &CityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CityClient) DeleteOne(ci *City) *CityDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CityClient) DeleteOneID(id uint64) *CityDeleteOne {
	builder := c.Delete().Where(city.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CityDeleteOne{builder}
}

// Query returns a query builder for City.
func (c *CityClient) Query() *CityQuery {
	return &CityQuery{
		config: c.config,
	}
}

// Get returns a City entity by its id.
func (c *CityClient) Get(ctx context.Context, id uint64) (*City, error) {
	return c.Query().Where(city.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CityClient) GetX(ctx context.Context, id uint64) *City {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a City.
func (c *CityClient) QueryParent(ci *City) *CityQuery {
	query := &CityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, city.ParentTable, city.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a City.
func (c *CityClient) QueryChildren(ci *City) *CityQuery {
	query := &CityQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.ChildrenTable, city.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CityClient) Hooks() []Hook {
	return c.hooks.City
}

// ContractClient is a client for the Contract schema.
type ContractClient struct {
	config
}

// NewContractClient returns a client for the Contract from the given config.
func NewContractClient(c config) *ContractClient {
	return &ContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contract.Hooks(f(g(h())))`.
func (c *ContractClient) Use(hooks ...Hook) {
	c.hooks.Contract = append(c.hooks.Contract, hooks...)
}

// Create returns a create builder for Contract.
func (c *ContractClient) Create() *ContractCreate {
	mutation := newContractMutation(c.config, OpCreate)
	return &ContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contract entities.
func (c *ContractClient) CreateBulk(builders ...*ContractCreate) *ContractCreateBulk {
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contract.
func (c *ContractClient) Update() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractClient) UpdateOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractClient) UpdateOneID(id uint64) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contract.
func (c *ContractClient) Delete() *ContractDelete {
	mutation := newContractMutation(c.config, OpDelete)
	return &ContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ContractClient) DeleteOne(co *Contract) *ContractDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ContractClient) DeleteOneID(id uint64) *ContractDeleteOne {
	builder := c.Delete().Where(contract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractDeleteOne{builder}
}

// Query returns a query builder for Contract.
func (c *ContractClient) Query() *ContractQuery {
	return &ContractQuery{
		config: c.config,
	}
}

// Get returns a Contract entity by its id.
func (c *ContractClient) Get(ctx context.Context, id uint64) (*Contract, error) {
	return c.Query().Where(contract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractClient) GetX(ctx context.Context, id uint64) *Contract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Contract.
func (c *ContractClient) QueryRider(co *Contract) *RiderQuery {
	query := &RiderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contract.RiderTable, contract.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContractClient) Hooks() []Hook {
	return c.hooks.Contract
}

// ManagerClient is a client for the Manager schema.
type ManagerClient struct {
	config
}

// NewManagerClient returns a client for the Manager from the given config.
func NewManagerClient(c config) *ManagerClient {
	return &ManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manager.Hooks(f(g(h())))`.
func (c *ManagerClient) Use(hooks ...Hook) {
	c.hooks.Manager = append(c.hooks.Manager, hooks...)
}

// Create returns a create builder for Manager.
func (c *ManagerClient) Create() *ManagerCreate {
	mutation := newManagerMutation(c.config, OpCreate)
	return &ManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Manager entities.
func (c *ManagerClient) CreateBulk(builders ...*ManagerCreate) *ManagerCreateBulk {
	return &ManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Manager.
func (c *ManagerClient) Update() *ManagerUpdate {
	mutation := newManagerMutation(c.config, OpUpdate)
	return &ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManagerClient) UpdateOne(m *Manager) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(m))
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManagerClient) UpdateOneID(id uint64) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManagerID(id))
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manager.
func (c *ManagerClient) Delete() *ManagerDelete {
	mutation := newManagerMutation(c.config, OpDelete)
	return &ManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ManagerClient) DeleteOne(m *Manager) *ManagerDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ManagerClient) DeleteOneID(id uint64) *ManagerDeleteOne {
	builder := c.Delete().Where(manager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManagerDeleteOne{builder}
}

// Query returns a query builder for Manager.
func (c *ManagerClient) Query() *ManagerQuery {
	return &ManagerQuery{
		config: c.config,
	}
}

// Get returns a Manager entity by its id.
func (c *ManagerClient) Get(ctx context.Context, id uint64) (*Manager, error) {
	return c.Query().Where(manager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManagerClient) GetX(ctx context.Context, id uint64) *Manager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ManagerClient) Hooks() []Hook {
	return c.hooks.Manager
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Create returns a create builder for Person.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id uint64) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonClient) DeleteOneID(id uint64) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id uint64) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id uint64) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Person.
func (c *PersonClient) QueryRider(pe *Person) *RiderQuery {
	query := &RiderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, person.RiderTable, person.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	return c.hooks.Person
}

// RiderClient is a client for the Rider schema.
type RiderClient struct {
	config
}

// NewRiderClient returns a client for the Rider from the given config.
func NewRiderClient(c config) *RiderClient {
	return &RiderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rider.Hooks(f(g(h())))`.
func (c *RiderClient) Use(hooks ...Hook) {
	c.hooks.Rider = append(c.hooks.Rider, hooks...)
}

// Create returns a create builder for Rider.
func (c *RiderClient) Create() *RiderCreate {
	mutation := newRiderMutation(c.config, OpCreate)
	return &RiderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rider entities.
func (c *RiderClient) CreateBulk(builders ...*RiderCreate) *RiderCreateBulk {
	return &RiderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rider.
func (c *RiderClient) Update() *RiderUpdate {
	mutation := newRiderMutation(c.config, OpUpdate)
	return &RiderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiderClient) UpdateOne(r *Rider) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRider(r))
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiderClient) UpdateOneID(id uint64) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRiderID(id))
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rider.
func (c *RiderClient) Delete() *RiderDelete {
	mutation := newRiderMutation(c.config, OpDelete)
	return &RiderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RiderClient) DeleteOne(r *Rider) *RiderDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RiderClient) DeleteOneID(id uint64) *RiderDeleteOne {
	builder := c.Delete().Where(rider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiderDeleteOne{builder}
}

// Query returns a query builder for Rider.
func (c *RiderClient) Query() *RiderQuery {
	return &RiderQuery{
		config: c.config,
	}
}

// Get returns a Rider entity by its id.
func (c *RiderClient) Get(ctx context.Context, id uint64) (*Rider, error) {
	return c.Query().Where(rider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiderClient) GetX(ctx context.Context, id uint64) *Rider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPerson queries the person edge of a Rider.
func (c *RiderClient) QueryPerson(r *Rider) *PersonQuery {
	query := &PersonQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rider.PersonTable, rider.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContract queries the contract edge of a Rider.
func (c *RiderClient) QueryContract(r *Rider) *ContractQuery {
	query := &ContractQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.ContractTable, rider.ContractColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiderClient) Hooks() []Hook {
	return c.hooks.Rider
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Create returns a create builder for Setting.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id uint64) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SettingClient) DeleteOneID(id uint64) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id uint64) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id uint64) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	return c.hooks.Setting
}
