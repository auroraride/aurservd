// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/auroraride/aurservd/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/activity"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/agreement"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetattributes"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
	"github.com/auroraride/aurservd/internal/ent/assetcheck"
	"github.com/auroraride/aurservd/internal/ent/assetcheckdetails"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenance"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenancedetails"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assetrole"
	"github.com/auroraride/aurservd/internal/ent/assetscrap"
	"github.com/auroraride/aurservd/internal/ent/assetscrapdetails"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetec"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/contracttemplate"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/ebikebrandattribute"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprepayment"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/export"
	"github.com/auroraride/aurservd/internal/ent/fault"
	"github.com/auroraride/aurservd/internal/ent/feedback"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/instructions"
	"github.com/auroraride/aurservd/internal/ent/inventory"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/material"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/planintroduce"
	"github.com/auroraride/aurservd/internal/ent/pointlog"
	"github.com/auroraride/aurservd/internal/ent/promotionachievement"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
	"github.com/auroraride/aurservd/internal/ent/promotionearnings"
	"github.com/auroraride/aurservd/internal/ent/promotiongrowth"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionmembercommission"
	"github.com/auroraride/aurservd/internal/ent/promotionperson"
	"github.com/auroraride/aurservd/internal/ent/promotionprivilege"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
	"github.com/auroraride/aurservd/internal/ent/promotionreferralsprogress"
	"github.com/auroraride/aurservd/internal/ent/promotionsetting"
	"github.com/auroraride/aurservd/internal/ent/promotionwithdrawal"
	"github.com/auroraride/aurservd/internal/ent/question"
	"github.com/auroraride/aurservd/internal/ent/questioncategory"
	"github.com/auroraride/aurservd/internal/ent/reserve"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
	"github.com/auroraride/aurservd/internal/ent/riderphonedevice"
	"github.com/auroraride/aurservd/internal/ent/role"
	"github.com/auroraride/aurservd/internal/ent/setting"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/stocksummary"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegoods"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribereminder"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"
	"github.com/auroraride/aurservd/internal/ent/version"
	"github.com/auroraride/aurservd/internal/ent/warehouse"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Activity is the client for interacting with the Activity builders.
	Activity *ActivityClient
	// Agent is the client for interacting with the Agent builders.
	Agent *AgentClient
	// Agreement is the client for interacting with the Agreement builders.
	Agreement *AgreementClient
	// Allocate is the client for interacting with the Allocate builders.
	Allocate *AllocateClient
	// Asset is the client for interacting with the Asset builders.
	Asset *AssetClient
	// AssetAttributeValues is the client for interacting with the AssetAttributeValues builders.
	AssetAttributeValues *AssetAttributeValuesClient
	// AssetAttributes is the client for interacting with the AssetAttributes builders.
	AssetAttributes *AssetAttributesClient
	// AssetCheck is the client for interacting with the AssetCheck builders.
	AssetCheck *AssetCheckClient
	// AssetCheckDetails is the client for interacting with the AssetCheckDetails builders.
	AssetCheckDetails *AssetCheckDetailsClient
	// AssetMaintenance is the client for interacting with the AssetMaintenance builders.
	AssetMaintenance *AssetMaintenanceClient
	// AssetMaintenanceDetails is the client for interacting with the AssetMaintenanceDetails builders.
	AssetMaintenanceDetails *AssetMaintenanceDetailsClient
	// AssetManager is the client for interacting with the AssetManager builders.
	AssetManager *AssetManagerClient
	// AssetRole is the client for interacting with the AssetRole builders.
	AssetRole *AssetRoleClient
	// AssetScrap is the client for interacting with the AssetScrap builders.
	AssetScrap *AssetScrapClient
	// AssetScrapDetails is the client for interacting with the AssetScrapDetails builders.
	AssetScrapDetails *AssetScrapDetailsClient
	// AssetTransfer is the client for interacting with the AssetTransfer builders.
	AssetTransfer *AssetTransferClient
	// AssetTransferDetails is the client for interacting with the AssetTransferDetails builders.
	AssetTransferDetails *AssetTransferDetailsClient
	// Assistance is the client for interacting with the Assistance builders.
	Assistance *AssistanceClient
	// Attendance is the client for interacting with the Attendance builders.
	Attendance *AttendanceClient
	// Battery is the client for interacting with the Battery builders.
	Battery *BatteryClient
	// BatteryFlow is the client for interacting with the BatteryFlow builders.
	BatteryFlow *BatteryFlowClient
	// BatteryModel is the client for interacting with the BatteryModel builders.
	BatteryModel *BatteryModelClient
	// Branch is the client for interacting with the Branch builders.
	Branch *BranchClient
	// BranchContract is the client for interacting with the BranchContract builders.
	BranchContract *BranchContractClient
	// Business is the client for interacting with the Business builders.
	Business *BusinessClient
	// Cabinet is the client for interacting with the Cabinet builders.
	Cabinet *CabinetClient
	// CabinetEc is the client for interacting with the CabinetEc builders.
	CabinetEc *CabinetEcClient
	// CabinetFault is the client for interacting with the CabinetFault builders.
	CabinetFault *CabinetFaultClient
	// City is the client for interacting with the City builders.
	City *CityClient
	// Commission is the client for interacting with the Commission builders.
	Commission *CommissionClient
	// Contract is the client for interacting with the Contract builders.
	Contract *ContractClient
	// ContractTemplate is the client for interacting with the ContractTemplate builders.
	ContractTemplate *ContractTemplateClient
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// CouponAssembly is the client for interacting with the CouponAssembly builders.
	CouponAssembly *CouponAssemblyClient
	// CouponTemplate is the client for interacting with the CouponTemplate builders.
	CouponTemplate *CouponTemplateClient
	// Ebike is the client for interacting with the Ebike builders.
	Ebike *EbikeClient
	// EbikeBrand is the client for interacting with the EbikeBrand builders.
	EbikeBrand *EbikeBrandClient
	// EbikeBrandAttribute is the client for interacting with the EbikeBrandAttribute builders.
	EbikeBrandAttribute *EbikeBrandAttributeClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Enterprise is the client for interacting with the Enterprise builders.
	Enterprise *EnterpriseClient
	// EnterpriseBatterySwap is the client for interacting with the EnterpriseBatterySwap builders.
	EnterpriseBatterySwap *EnterpriseBatterySwapClient
	// EnterpriseBill is the client for interacting with the EnterpriseBill builders.
	EnterpriseBill *EnterpriseBillClient
	// EnterpriseContract is the client for interacting with the EnterpriseContract builders.
	EnterpriseContract *EnterpriseContractClient
	// EnterprisePrepayment is the client for interacting with the EnterprisePrepayment builders.
	EnterprisePrepayment *EnterprisePrepaymentClient
	// EnterprisePrice is the client for interacting with the EnterprisePrice builders.
	EnterprisePrice *EnterprisePriceClient
	// EnterpriseStatement is the client for interacting with the EnterpriseStatement builders.
	EnterpriseStatement *EnterpriseStatementClient
	// EnterpriseStation is the client for interacting with the EnterpriseStation builders.
	EnterpriseStation *EnterpriseStationClient
	// Exception is the client for interacting with the Exception builders.
	Exception *ExceptionClient
	// Exchange is the client for interacting with the Exchange builders.
	Exchange *ExchangeClient
	// Export is the client for interacting with the Export builders.
	Export *ExportClient
	// Fault is the client for interacting with the Fault builders.
	Fault *FaultClient
	// Feedback is the client for interacting with the Feedback builders.
	Feedback *FeedbackClient
	// Goods is the client for interacting with the Goods builders.
	Goods *GoodsClient
	// Instructions is the client for interacting with the Instructions builders.
	Instructions *InstructionsClient
	// Inventory is the client for interacting with the Inventory builders.
	Inventory *InventoryClient
	// Maintainer is the client for interacting with the Maintainer builders.
	Maintainer *MaintainerClient
	// Manager is the client for interacting with the Manager builders.
	Manager *ManagerClient
	// Material is the client for interacting with the Material builders.
	Material *MaterialClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderRefund is the client for interacting with the OrderRefund builders.
	OrderRefund *OrderRefundClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// PlanIntroduce is the client for interacting with the PlanIntroduce builders.
	PlanIntroduce *PlanIntroduceClient
	// PointLog is the client for interacting with the PointLog builders.
	PointLog *PointLogClient
	// PromotionAchievement is the client for interacting with the PromotionAchievement builders.
	PromotionAchievement *PromotionAchievementClient
	// PromotionBankCard is the client for interacting with the PromotionBankCard builders.
	PromotionBankCard *PromotionBankCardClient
	// PromotionCommission is the client for interacting with the PromotionCommission builders.
	PromotionCommission *PromotionCommissionClient
	// PromotionCommissionPlan is the client for interacting with the PromotionCommissionPlan builders.
	PromotionCommissionPlan *PromotionCommissionPlanClient
	// PromotionEarnings is the client for interacting with the PromotionEarnings builders.
	PromotionEarnings *PromotionEarningsClient
	// PromotionGrowth is the client for interacting with the PromotionGrowth builders.
	PromotionGrowth *PromotionGrowthClient
	// PromotionLevel is the client for interacting with the PromotionLevel builders.
	PromotionLevel *PromotionLevelClient
	// PromotionLevelTask is the client for interacting with the PromotionLevelTask builders.
	PromotionLevelTask *PromotionLevelTaskClient
	// PromotionMember is the client for interacting with the PromotionMember builders.
	PromotionMember *PromotionMemberClient
	// PromotionMemberCommission is the client for interacting with the PromotionMemberCommission builders.
	PromotionMemberCommission *PromotionMemberCommissionClient
	// PromotionPerson is the client for interacting with the PromotionPerson builders.
	PromotionPerson *PromotionPersonClient
	// PromotionPrivilege is the client for interacting with the PromotionPrivilege builders.
	PromotionPrivilege *PromotionPrivilegeClient
	// PromotionReferrals is the client for interacting with the PromotionReferrals builders.
	PromotionReferrals *PromotionReferralsClient
	// PromotionReferralsProgress is the client for interacting with the PromotionReferralsProgress builders.
	PromotionReferralsProgress *PromotionReferralsProgressClient
	// PromotionSetting is the client for interacting with the PromotionSetting builders.
	PromotionSetting *PromotionSettingClient
	// PromotionWithdrawal is the client for interacting with the PromotionWithdrawal builders.
	PromotionWithdrawal *PromotionWithdrawalClient
	// Question is the client for interacting with the Question builders.
	Question *QuestionClient
	// QuestionCategory is the client for interacting with the QuestionCategory builders.
	QuestionCategory *QuestionCategoryClient
	// Reserve is the client for interacting with the Reserve builders.
	Reserve *ReserveClient
	// Rider is the client for interacting with the Rider builders.
	Rider *RiderClient
	// RiderFollowUp is the client for interacting with the RiderFollowUp builders.
	RiderFollowUp *RiderFollowUpClient
	// RiderPhoneDevice is the client for interacting with the RiderPhoneDevice builders.
	RiderPhoneDevice *RiderPhoneDeviceClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
	// StockSummary is the client for interacting with the StockSummary builders.
	StockSummary *StockSummaryClient
	// Store is the client for interacting with the Store builders.
	Store *StoreClient
	// StoreGoods is the client for interacting with the StoreGoods builders.
	StoreGoods *StoreGoodsClient
	// StoreGroup is the client for interacting with the StoreGroup builders.
	StoreGroup *StoreGroupClient
	// Subscribe is the client for interacting with the Subscribe builders.
	Subscribe *SubscribeClient
	// SubscribeAlter is the client for interacting with the SubscribeAlter builders.
	SubscribeAlter *SubscribeAlterClient
	// SubscribePause is the client for interacting with the SubscribePause builders.
	SubscribePause *SubscribePauseClient
	// SubscribeReminder is the client for interacting with the SubscribeReminder builders.
	SubscribeReminder *SubscribeReminderClient
	// SubscribeSuspend is the client for interacting with the SubscribeSuspend builders.
	SubscribeSuspend *SubscribeSuspendClient
	// Version is the client for interacting with the Version builders.
	Version *VersionClient
	// Warehouse is the client for interacting with the Warehouse builders.
	Warehouse *WarehouseClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Activity = NewActivityClient(c.config)
	c.Agent = NewAgentClient(c.config)
	c.Agreement = NewAgreementClient(c.config)
	c.Allocate = NewAllocateClient(c.config)
	c.Asset = NewAssetClient(c.config)
	c.AssetAttributeValues = NewAssetAttributeValuesClient(c.config)
	c.AssetAttributes = NewAssetAttributesClient(c.config)
	c.AssetCheck = NewAssetCheckClient(c.config)
	c.AssetCheckDetails = NewAssetCheckDetailsClient(c.config)
	c.AssetMaintenance = NewAssetMaintenanceClient(c.config)
	c.AssetMaintenanceDetails = NewAssetMaintenanceDetailsClient(c.config)
	c.AssetManager = NewAssetManagerClient(c.config)
	c.AssetRole = NewAssetRoleClient(c.config)
	c.AssetScrap = NewAssetScrapClient(c.config)
	c.AssetScrapDetails = NewAssetScrapDetailsClient(c.config)
	c.AssetTransfer = NewAssetTransferClient(c.config)
	c.AssetTransferDetails = NewAssetTransferDetailsClient(c.config)
	c.Assistance = NewAssistanceClient(c.config)
	c.Attendance = NewAttendanceClient(c.config)
	c.Battery = NewBatteryClient(c.config)
	c.BatteryFlow = NewBatteryFlowClient(c.config)
	c.BatteryModel = NewBatteryModelClient(c.config)
	c.Branch = NewBranchClient(c.config)
	c.BranchContract = NewBranchContractClient(c.config)
	c.Business = NewBusinessClient(c.config)
	c.Cabinet = NewCabinetClient(c.config)
	c.CabinetEc = NewCabinetEcClient(c.config)
	c.CabinetFault = NewCabinetFaultClient(c.config)
	c.City = NewCityClient(c.config)
	c.Commission = NewCommissionClient(c.config)
	c.Contract = NewContractClient(c.config)
	c.ContractTemplate = NewContractTemplateClient(c.config)
	c.Coupon = NewCouponClient(c.config)
	c.CouponAssembly = NewCouponAssemblyClient(c.config)
	c.CouponTemplate = NewCouponTemplateClient(c.config)
	c.Ebike = NewEbikeClient(c.config)
	c.EbikeBrand = NewEbikeBrandClient(c.config)
	c.EbikeBrandAttribute = NewEbikeBrandAttributeClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Enterprise = NewEnterpriseClient(c.config)
	c.EnterpriseBatterySwap = NewEnterpriseBatterySwapClient(c.config)
	c.EnterpriseBill = NewEnterpriseBillClient(c.config)
	c.EnterpriseContract = NewEnterpriseContractClient(c.config)
	c.EnterprisePrepayment = NewEnterprisePrepaymentClient(c.config)
	c.EnterprisePrice = NewEnterprisePriceClient(c.config)
	c.EnterpriseStatement = NewEnterpriseStatementClient(c.config)
	c.EnterpriseStation = NewEnterpriseStationClient(c.config)
	c.Exception = NewExceptionClient(c.config)
	c.Exchange = NewExchangeClient(c.config)
	c.Export = NewExportClient(c.config)
	c.Fault = NewFaultClient(c.config)
	c.Feedback = NewFeedbackClient(c.config)
	c.Goods = NewGoodsClient(c.config)
	c.Instructions = NewInstructionsClient(c.config)
	c.Inventory = NewInventoryClient(c.config)
	c.Maintainer = NewMaintainerClient(c.config)
	c.Manager = NewManagerClient(c.config)
	c.Material = NewMaterialClient(c.config)
	c.Order = NewOrderClient(c.config)
	c.OrderRefund = NewOrderRefundClient(c.config)
	c.Person = NewPersonClient(c.config)
	c.Plan = NewPlanClient(c.config)
	c.PlanIntroduce = NewPlanIntroduceClient(c.config)
	c.PointLog = NewPointLogClient(c.config)
	c.PromotionAchievement = NewPromotionAchievementClient(c.config)
	c.PromotionBankCard = NewPromotionBankCardClient(c.config)
	c.PromotionCommission = NewPromotionCommissionClient(c.config)
	c.PromotionCommissionPlan = NewPromotionCommissionPlanClient(c.config)
	c.PromotionEarnings = NewPromotionEarningsClient(c.config)
	c.PromotionGrowth = NewPromotionGrowthClient(c.config)
	c.PromotionLevel = NewPromotionLevelClient(c.config)
	c.PromotionLevelTask = NewPromotionLevelTaskClient(c.config)
	c.PromotionMember = NewPromotionMemberClient(c.config)
	c.PromotionMemberCommission = NewPromotionMemberCommissionClient(c.config)
	c.PromotionPerson = NewPromotionPersonClient(c.config)
	c.PromotionPrivilege = NewPromotionPrivilegeClient(c.config)
	c.PromotionReferrals = NewPromotionReferralsClient(c.config)
	c.PromotionReferralsProgress = NewPromotionReferralsProgressClient(c.config)
	c.PromotionSetting = NewPromotionSettingClient(c.config)
	c.PromotionWithdrawal = NewPromotionWithdrawalClient(c.config)
	c.Question = NewQuestionClient(c.config)
	c.QuestionCategory = NewQuestionCategoryClient(c.config)
	c.Reserve = NewReserveClient(c.config)
	c.Rider = NewRiderClient(c.config)
	c.RiderFollowUp = NewRiderFollowUpClient(c.config)
	c.RiderPhoneDevice = NewRiderPhoneDeviceClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Setting = NewSettingClient(c.config)
	c.Stock = NewStockClient(c.config)
	c.StockSummary = NewStockSummaryClient(c.config)
	c.Store = NewStoreClient(c.config)
	c.StoreGoods = NewStoreGoodsClient(c.config)
	c.StoreGroup = NewStoreGroupClient(c.config)
	c.Subscribe = NewSubscribeClient(c.config)
	c.SubscribeAlter = NewSubscribeAlterClient(c.config)
	c.SubscribePause = NewSubscribePauseClient(c.config)
	c.SubscribeReminder = NewSubscribeReminderClient(c.config)
	c.SubscribeSuspend = NewSubscribeSuspendClient(c.config)
	c.Version = NewVersionClient(c.config)
	c.Warehouse = NewWarehouseClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		Activity:                   NewActivityClient(cfg),
		Agent:                      NewAgentClient(cfg),
		Agreement:                  NewAgreementClient(cfg),
		Allocate:                   NewAllocateClient(cfg),
		Asset:                      NewAssetClient(cfg),
		AssetAttributeValues:       NewAssetAttributeValuesClient(cfg),
		AssetAttributes:            NewAssetAttributesClient(cfg),
		AssetCheck:                 NewAssetCheckClient(cfg),
		AssetCheckDetails:          NewAssetCheckDetailsClient(cfg),
		AssetMaintenance:           NewAssetMaintenanceClient(cfg),
		AssetMaintenanceDetails:    NewAssetMaintenanceDetailsClient(cfg),
		AssetManager:               NewAssetManagerClient(cfg),
		AssetRole:                  NewAssetRoleClient(cfg),
		AssetScrap:                 NewAssetScrapClient(cfg),
		AssetScrapDetails:          NewAssetScrapDetailsClient(cfg),
		AssetTransfer:              NewAssetTransferClient(cfg),
		AssetTransferDetails:       NewAssetTransferDetailsClient(cfg),
		Assistance:                 NewAssistanceClient(cfg),
		Attendance:                 NewAttendanceClient(cfg),
		Battery:                    NewBatteryClient(cfg),
		BatteryFlow:                NewBatteryFlowClient(cfg),
		BatteryModel:               NewBatteryModelClient(cfg),
		Branch:                     NewBranchClient(cfg),
		BranchContract:             NewBranchContractClient(cfg),
		Business:                   NewBusinessClient(cfg),
		Cabinet:                    NewCabinetClient(cfg),
		CabinetEc:                  NewCabinetEcClient(cfg),
		CabinetFault:               NewCabinetFaultClient(cfg),
		City:                       NewCityClient(cfg),
		Commission:                 NewCommissionClient(cfg),
		Contract:                   NewContractClient(cfg),
		ContractTemplate:           NewContractTemplateClient(cfg),
		Coupon:                     NewCouponClient(cfg),
		CouponAssembly:             NewCouponAssemblyClient(cfg),
		CouponTemplate:             NewCouponTemplateClient(cfg),
		Ebike:                      NewEbikeClient(cfg),
		EbikeBrand:                 NewEbikeBrandClient(cfg),
		EbikeBrandAttribute:        NewEbikeBrandAttributeClient(cfg),
		Employee:                   NewEmployeeClient(cfg),
		Enterprise:                 NewEnterpriseClient(cfg),
		EnterpriseBatterySwap:      NewEnterpriseBatterySwapClient(cfg),
		EnterpriseBill:             NewEnterpriseBillClient(cfg),
		EnterpriseContract:         NewEnterpriseContractClient(cfg),
		EnterprisePrepayment:       NewEnterprisePrepaymentClient(cfg),
		EnterprisePrice:            NewEnterprisePriceClient(cfg),
		EnterpriseStatement:        NewEnterpriseStatementClient(cfg),
		EnterpriseStation:          NewEnterpriseStationClient(cfg),
		Exception:                  NewExceptionClient(cfg),
		Exchange:                   NewExchangeClient(cfg),
		Export:                     NewExportClient(cfg),
		Fault:                      NewFaultClient(cfg),
		Feedback:                   NewFeedbackClient(cfg),
		Goods:                      NewGoodsClient(cfg),
		Instructions:               NewInstructionsClient(cfg),
		Inventory:                  NewInventoryClient(cfg),
		Maintainer:                 NewMaintainerClient(cfg),
		Manager:                    NewManagerClient(cfg),
		Material:                   NewMaterialClient(cfg),
		Order:                      NewOrderClient(cfg),
		OrderRefund:                NewOrderRefundClient(cfg),
		Person:                     NewPersonClient(cfg),
		Plan:                       NewPlanClient(cfg),
		PlanIntroduce:              NewPlanIntroduceClient(cfg),
		PointLog:                   NewPointLogClient(cfg),
		PromotionAchievement:       NewPromotionAchievementClient(cfg),
		PromotionBankCard:          NewPromotionBankCardClient(cfg),
		PromotionCommission:        NewPromotionCommissionClient(cfg),
		PromotionCommissionPlan:    NewPromotionCommissionPlanClient(cfg),
		PromotionEarnings:          NewPromotionEarningsClient(cfg),
		PromotionGrowth:            NewPromotionGrowthClient(cfg),
		PromotionLevel:             NewPromotionLevelClient(cfg),
		PromotionLevelTask:         NewPromotionLevelTaskClient(cfg),
		PromotionMember:            NewPromotionMemberClient(cfg),
		PromotionMemberCommission:  NewPromotionMemberCommissionClient(cfg),
		PromotionPerson:            NewPromotionPersonClient(cfg),
		PromotionPrivilege:         NewPromotionPrivilegeClient(cfg),
		PromotionReferrals:         NewPromotionReferralsClient(cfg),
		PromotionReferralsProgress: NewPromotionReferralsProgressClient(cfg),
		PromotionSetting:           NewPromotionSettingClient(cfg),
		PromotionWithdrawal:        NewPromotionWithdrawalClient(cfg),
		Question:                   NewQuestionClient(cfg),
		QuestionCategory:           NewQuestionCategoryClient(cfg),
		Reserve:                    NewReserveClient(cfg),
		Rider:                      NewRiderClient(cfg),
		RiderFollowUp:              NewRiderFollowUpClient(cfg),
		RiderPhoneDevice:           NewRiderPhoneDeviceClient(cfg),
		Role:                       NewRoleClient(cfg),
		Setting:                    NewSettingClient(cfg),
		Stock:                      NewStockClient(cfg),
		StockSummary:               NewStockSummaryClient(cfg),
		Store:                      NewStoreClient(cfg),
		StoreGoods:                 NewStoreGoodsClient(cfg),
		StoreGroup:                 NewStoreGroupClient(cfg),
		Subscribe:                  NewSubscribeClient(cfg),
		SubscribeAlter:             NewSubscribeAlterClient(cfg),
		SubscribePause:             NewSubscribePauseClient(cfg),
		SubscribeReminder:          NewSubscribeReminderClient(cfg),
		SubscribeSuspend:           NewSubscribeSuspendClient(cfg),
		Version:                    NewVersionClient(cfg),
		Warehouse:                  NewWarehouseClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                        ctx,
		config:                     cfg,
		Activity:                   NewActivityClient(cfg),
		Agent:                      NewAgentClient(cfg),
		Agreement:                  NewAgreementClient(cfg),
		Allocate:                   NewAllocateClient(cfg),
		Asset:                      NewAssetClient(cfg),
		AssetAttributeValues:       NewAssetAttributeValuesClient(cfg),
		AssetAttributes:            NewAssetAttributesClient(cfg),
		AssetCheck:                 NewAssetCheckClient(cfg),
		AssetCheckDetails:          NewAssetCheckDetailsClient(cfg),
		AssetMaintenance:           NewAssetMaintenanceClient(cfg),
		AssetMaintenanceDetails:    NewAssetMaintenanceDetailsClient(cfg),
		AssetManager:               NewAssetManagerClient(cfg),
		AssetRole:                  NewAssetRoleClient(cfg),
		AssetScrap:                 NewAssetScrapClient(cfg),
		AssetScrapDetails:          NewAssetScrapDetailsClient(cfg),
		AssetTransfer:              NewAssetTransferClient(cfg),
		AssetTransferDetails:       NewAssetTransferDetailsClient(cfg),
		Assistance:                 NewAssistanceClient(cfg),
		Attendance:                 NewAttendanceClient(cfg),
		Battery:                    NewBatteryClient(cfg),
		BatteryFlow:                NewBatteryFlowClient(cfg),
		BatteryModel:               NewBatteryModelClient(cfg),
		Branch:                     NewBranchClient(cfg),
		BranchContract:             NewBranchContractClient(cfg),
		Business:                   NewBusinessClient(cfg),
		Cabinet:                    NewCabinetClient(cfg),
		CabinetEc:                  NewCabinetEcClient(cfg),
		CabinetFault:               NewCabinetFaultClient(cfg),
		City:                       NewCityClient(cfg),
		Commission:                 NewCommissionClient(cfg),
		Contract:                   NewContractClient(cfg),
		ContractTemplate:           NewContractTemplateClient(cfg),
		Coupon:                     NewCouponClient(cfg),
		CouponAssembly:             NewCouponAssemblyClient(cfg),
		CouponTemplate:             NewCouponTemplateClient(cfg),
		Ebike:                      NewEbikeClient(cfg),
		EbikeBrand:                 NewEbikeBrandClient(cfg),
		EbikeBrandAttribute:        NewEbikeBrandAttributeClient(cfg),
		Employee:                   NewEmployeeClient(cfg),
		Enterprise:                 NewEnterpriseClient(cfg),
		EnterpriseBatterySwap:      NewEnterpriseBatterySwapClient(cfg),
		EnterpriseBill:             NewEnterpriseBillClient(cfg),
		EnterpriseContract:         NewEnterpriseContractClient(cfg),
		EnterprisePrepayment:       NewEnterprisePrepaymentClient(cfg),
		EnterprisePrice:            NewEnterprisePriceClient(cfg),
		EnterpriseStatement:        NewEnterpriseStatementClient(cfg),
		EnterpriseStation:          NewEnterpriseStationClient(cfg),
		Exception:                  NewExceptionClient(cfg),
		Exchange:                   NewExchangeClient(cfg),
		Export:                     NewExportClient(cfg),
		Fault:                      NewFaultClient(cfg),
		Feedback:                   NewFeedbackClient(cfg),
		Goods:                      NewGoodsClient(cfg),
		Instructions:               NewInstructionsClient(cfg),
		Inventory:                  NewInventoryClient(cfg),
		Maintainer:                 NewMaintainerClient(cfg),
		Manager:                    NewManagerClient(cfg),
		Material:                   NewMaterialClient(cfg),
		Order:                      NewOrderClient(cfg),
		OrderRefund:                NewOrderRefundClient(cfg),
		Person:                     NewPersonClient(cfg),
		Plan:                       NewPlanClient(cfg),
		PlanIntroduce:              NewPlanIntroduceClient(cfg),
		PointLog:                   NewPointLogClient(cfg),
		PromotionAchievement:       NewPromotionAchievementClient(cfg),
		PromotionBankCard:          NewPromotionBankCardClient(cfg),
		PromotionCommission:        NewPromotionCommissionClient(cfg),
		PromotionCommissionPlan:    NewPromotionCommissionPlanClient(cfg),
		PromotionEarnings:          NewPromotionEarningsClient(cfg),
		PromotionGrowth:            NewPromotionGrowthClient(cfg),
		PromotionLevel:             NewPromotionLevelClient(cfg),
		PromotionLevelTask:         NewPromotionLevelTaskClient(cfg),
		PromotionMember:            NewPromotionMemberClient(cfg),
		PromotionMemberCommission:  NewPromotionMemberCommissionClient(cfg),
		PromotionPerson:            NewPromotionPersonClient(cfg),
		PromotionPrivilege:         NewPromotionPrivilegeClient(cfg),
		PromotionReferrals:         NewPromotionReferralsClient(cfg),
		PromotionReferralsProgress: NewPromotionReferralsProgressClient(cfg),
		PromotionSetting:           NewPromotionSettingClient(cfg),
		PromotionWithdrawal:        NewPromotionWithdrawalClient(cfg),
		Question:                   NewQuestionClient(cfg),
		QuestionCategory:           NewQuestionCategoryClient(cfg),
		Reserve:                    NewReserveClient(cfg),
		Rider:                      NewRiderClient(cfg),
		RiderFollowUp:              NewRiderFollowUpClient(cfg),
		RiderPhoneDevice:           NewRiderPhoneDeviceClient(cfg),
		Role:                       NewRoleClient(cfg),
		Setting:                    NewSettingClient(cfg),
		Stock:                      NewStockClient(cfg),
		StockSummary:               NewStockSummaryClient(cfg),
		Store:                      NewStoreClient(cfg),
		StoreGoods:                 NewStoreGoodsClient(cfg),
		StoreGroup:                 NewStoreGroupClient(cfg),
		Subscribe:                  NewSubscribeClient(cfg),
		SubscribeAlter:             NewSubscribeAlterClient(cfg),
		SubscribePause:             NewSubscribePauseClient(cfg),
		SubscribeReminder:          NewSubscribeReminderClient(cfg),
		SubscribeSuspend:           NewSubscribeSuspendClient(cfg),
		Version:                    NewVersionClient(cfg),
		Warehouse:                  NewWarehouseClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Activity.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Activity, c.Agent, c.Agreement, c.Allocate, c.Asset, c.AssetAttributeValues,
		c.AssetAttributes, c.AssetCheck, c.AssetCheckDetails, c.AssetMaintenance,
		c.AssetMaintenanceDetails, c.AssetManager, c.AssetRole, c.AssetScrap,
		c.AssetScrapDetails, c.AssetTransfer, c.AssetTransferDetails, c.Assistance,
		c.Attendance, c.Battery, c.BatteryFlow, c.BatteryModel, c.Branch,
		c.BranchContract, c.Business, c.Cabinet, c.CabinetEc, c.CabinetFault, c.City,
		c.Commission, c.Contract, c.ContractTemplate, c.Coupon, c.CouponAssembly,
		c.CouponTemplate, c.Ebike, c.EbikeBrand, c.EbikeBrandAttribute, c.Employee,
		c.Enterprise, c.EnterpriseBatterySwap, c.EnterpriseBill, c.EnterpriseContract,
		c.EnterprisePrepayment, c.EnterprisePrice, c.EnterpriseStatement,
		c.EnterpriseStation, c.Exception, c.Exchange, c.Export, c.Fault, c.Feedback,
		c.Goods, c.Instructions, c.Inventory, c.Maintainer, c.Manager, c.Material,
		c.Order, c.OrderRefund, c.Person, c.Plan, c.PlanIntroduce, c.PointLog,
		c.PromotionAchievement, c.PromotionBankCard, c.PromotionCommission,
		c.PromotionCommissionPlan, c.PromotionEarnings, c.PromotionGrowth,
		c.PromotionLevel, c.PromotionLevelTask, c.PromotionMember,
		c.PromotionMemberCommission, c.PromotionPerson, c.PromotionPrivilege,
		c.PromotionReferrals, c.PromotionReferralsProgress, c.PromotionSetting,
		c.PromotionWithdrawal, c.Question, c.QuestionCategory, c.Reserve, c.Rider,
		c.RiderFollowUp, c.RiderPhoneDevice, c.Role, c.Setting, c.Stock,
		c.StockSummary, c.Store, c.StoreGoods, c.StoreGroup, c.Subscribe,
		c.SubscribeAlter, c.SubscribePause, c.SubscribeReminder, c.SubscribeSuspend,
		c.Version, c.Warehouse,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Activity, c.Agent, c.Agreement, c.Allocate, c.Asset, c.AssetAttributeValues,
		c.AssetAttributes, c.AssetCheck, c.AssetCheckDetails, c.AssetMaintenance,
		c.AssetMaintenanceDetails, c.AssetManager, c.AssetRole, c.AssetScrap,
		c.AssetScrapDetails, c.AssetTransfer, c.AssetTransferDetails, c.Assistance,
		c.Attendance, c.Battery, c.BatteryFlow, c.BatteryModel, c.Branch,
		c.BranchContract, c.Business, c.Cabinet, c.CabinetEc, c.CabinetFault, c.City,
		c.Commission, c.Contract, c.ContractTemplate, c.Coupon, c.CouponAssembly,
		c.CouponTemplate, c.Ebike, c.EbikeBrand, c.EbikeBrandAttribute, c.Employee,
		c.Enterprise, c.EnterpriseBatterySwap, c.EnterpriseBill, c.EnterpriseContract,
		c.EnterprisePrepayment, c.EnterprisePrice, c.EnterpriseStatement,
		c.EnterpriseStation, c.Exception, c.Exchange, c.Export, c.Fault, c.Feedback,
		c.Goods, c.Instructions, c.Inventory, c.Maintainer, c.Manager, c.Material,
		c.Order, c.OrderRefund, c.Person, c.Plan, c.PlanIntroduce, c.PointLog,
		c.PromotionAchievement, c.PromotionBankCard, c.PromotionCommission,
		c.PromotionCommissionPlan, c.PromotionEarnings, c.PromotionGrowth,
		c.PromotionLevel, c.PromotionLevelTask, c.PromotionMember,
		c.PromotionMemberCommission, c.PromotionPerson, c.PromotionPrivilege,
		c.PromotionReferrals, c.PromotionReferralsProgress, c.PromotionSetting,
		c.PromotionWithdrawal, c.Question, c.QuestionCategory, c.Reserve, c.Rider,
		c.RiderFollowUp, c.RiderPhoneDevice, c.Role, c.Setting, c.Stock,
		c.StockSummary, c.Store, c.StoreGoods, c.StoreGroup, c.Subscribe,
		c.SubscribeAlter, c.SubscribePause, c.SubscribeReminder, c.SubscribeSuspend,
		c.Version, c.Warehouse,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActivityMutation:
		return c.Activity.mutate(ctx, m)
	case *AgentMutation:
		return c.Agent.mutate(ctx, m)
	case *AgreementMutation:
		return c.Agreement.mutate(ctx, m)
	case *AllocateMutation:
		return c.Allocate.mutate(ctx, m)
	case *AssetMutation:
		return c.Asset.mutate(ctx, m)
	case *AssetAttributeValuesMutation:
		return c.AssetAttributeValues.mutate(ctx, m)
	case *AssetAttributesMutation:
		return c.AssetAttributes.mutate(ctx, m)
	case *AssetCheckMutation:
		return c.AssetCheck.mutate(ctx, m)
	case *AssetCheckDetailsMutation:
		return c.AssetCheckDetails.mutate(ctx, m)
	case *AssetMaintenanceMutation:
		return c.AssetMaintenance.mutate(ctx, m)
	case *AssetMaintenanceDetailsMutation:
		return c.AssetMaintenanceDetails.mutate(ctx, m)
	case *AssetManagerMutation:
		return c.AssetManager.mutate(ctx, m)
	case *AssetRoleMutation:
		return c.AssetRole.mutate(ctx, m)
	case *AssetScrapMutation:
		return c.AssetScrap.mutate(ctx, m)
	case *AssetScrapDetailsMutation:
		return c.AssetScrapDetails.mutate(ctx, m)
	case *AssetTransferMutation:
		return c.AssetTransfer.mutate(ctx, m)
	case *AssetTransferDetailsMutation:
		return c.AssetTransferDetails.mutate(ctx, m)
	case *AssistanceMutation:
		return c.Assistance.mutate(ctx, m)
	case *AttendanceMutation:
		return c.Attendance.mutate(ctx, m)
	case *BatteryMutation:
		return c.Battery.mutate(ctx, m)
	case *BatteryFlowMutation:
		return c.BatteryFlow.mutate(ctx, m)
	case *BatteryModelMutation:
		return c.BatteryModel.mutate(ctx, m)
	case *BranchMutation:
		return c.Branch.mutate(ctx, m)
	case *BranchContractMutation:
		return c.BranchContract.mutate(ctx, m)
	case *BusinessMutation:
		return c.Business.mutate(ctx, m)
	case *CabinetMutation:
		return c.Cabinet.mutate(ctx, m)
	case *CabinetEcMutation:
		return c.CabinetEc.mutate(ctx, m)
	case *CabinetFaultMutation:
		return c.CabinetFault.mutate(ctx, m)
	case *CityMutation:
		return c.City.mutate(ctx, m)
	case *CommissionMutation:
		return c.Commission.mutate(ctx, m)
	case *ContractMutation:
		return c.Contract.mutate(ctx, m)
	case *ContractTemplateMutation:
		return c.ContractTemplate.mutate(ctx, m)
	case *CouponMutation:
		return c.Coupon.mutate(ctx, m)
	case *CouponAssemblyMutation:
		return c.CouponAssembly.mutate(ctx, m)
	case *CouponTemplateMutation:
		return c.CouponTemplate.mutate(ctx, m)
	case *EbikeMutation:
		return c.Ebike.mutate(ctx, m)
	case *EbikeBrandMutation:
		return c.EbikeBrand.mutate(ctx, m)
	case *EbikeBrandAttributeMutation:
		return c.EbikeBrandAttribute.mutate(ctx, m)
	case *EmployeeMutation:
		return c.Employee.mutate(ctx, m)
	case *EnterpriseMutation:
		return c.Enterprise.mutate(ctx, m)
	case *EnterpriseBatterySwapMutation:
		return c.EnterpriseBatterySwap.mutate(ctx, m)
	case *EnterpriseBillMutation:
		return c.EnterpriseBill.mutate(ctx, m)
	case *EnterpriseContractMutation:
		return c.EnterpriseContract.mutate(ctx, m)
	case *EnterprisePrepaymentMutation:
		return c.EnterprisePrepayment.mutate(ctx, m)
	case *EnterprisePriceMutation:
		return c.EnterprisePrice.mutate(ctx, m)
	case *EnterpriseStatementMutation:
		return c.EnterpriseStatement.mutate(ctx, m)
	case *EnterpriseStationMutation:
		return c.EnterpriseStation.mutate(ctx, m)
	case *ExceptionMutation:
		return c.Exception.mutate(ctx, m)
	case *ExchangeMutation:
		return c.Exchange.mutate(ctx, m)
	case *ExportMutation:
		return c.Export.mutate(ctx, m)
	case *FaultMutation:
		return c.Fault.mutate(ctx, m)
	case *FeedbackMutation:
		return c.Feedback.mutate(ctx, m)
	case *GoodsMutation:
		return c.Goods.mutate(ctx, m)
	case *InstructionsMutation:
		return c.Instructions.mutate(ctx, m)
	case *InventoryMutation:
		return c.Inventory.mutate(ctx, m)
	case *MaintainerMutation:
		return c.Maintainer.mutate(ctx, m)
	case *ManagerMutation:
		return c.Manager.mutate(ctx, m)
	case *MaterialMutation:
		return c.Material.mutate(ctx, m)
	case *OrderMutation:
		return c.Order.mutate(ctx, m)
	case *OrderRefundMutation:
		return c.OrderRefund.mutate(ctx, m)
	case *PersonMutation:
		return c.Person.mutate(ctx, m)
	case *PlanMutation:
		return c.Plan.mutate(ctx, m)
	case *PlanIntroduceMutation:
		return c.PlanIntroduce.mutate(ctx, m)
	case *PointLogMutation:
		return c.PointLog.mutate(ctx, m)
	case *PromotionAchievementMutation:
		return c.PromotionAchievement.mutate(ctx, m)
	case *PromotionBankCardMutation:
		return c.PromotionBankCard.mutate(ctx, m)
	case *PromotionCommissionMutation:
		return c.PromotionCommission.mutate(ctx, m)
	case *PromotionCommissionPlanMutation:
		return c.PromotionCommissionPlan.mutate(ctx, m)
	case *PromotionEarningsMutation:
		return c.PromotionEarnings.mutate(ctx, m)
	case *PromotionGrowthMutation:
		return c.PromotionGrowth.mutate(ctx, m)
	case *PromotionLevelMutation:
		return c.PromotionLevel.mutate(ctx, m)
	case *PromotionLevelTaskMutation:
		return c.PromotionLevelTask.mutate(ctx, m)
	case *PromotionMemberMutation:
		return c.PromotionMember.mutate(ctx, m)
	case *PromotionMemberCommissionMutation:
		return c.PromotionMemberCommission.mutate(ctx, m)
	case *PromotionPersonMutation:
		return c.PromotionPerson.mutate(ctx, m)
	case *PromotionPrivilegeMutation:
		return c.PromotionPrivilege.mutate(ctx, m)
	case *PromotionReferralsMutation:
		return c.PromotionReferrals.mutate(ctx, m)
	case *PromotionReferralsProgressMutation:
		return c.PromotionReferralsProgress.mutate(ctx, m)
	case *PromotionSettingMutation:
		return c.PromotionSetting.mutate(ctx, m)
	case *PromotionWithdrawalMutation:
		return c.PromotionWithdrawal.mutate(ctx, m)
	case *QuestionMutation:
		return c.Question.mutate(ctx, m)
	case *QuestionCategoryMutation:
		return c.QuestionCategory.mutate(ctx, m)
	case *ReserveMutation:
		return c.Reserve.mutate(ctx, m)
	case *RiderMutation:
		return c.Rider.mutate(ctx, m)
	case *RiderFollowUpMutation:
		return c.RiderFollowUp.mutate(ctx, m)
	case *RiderPhoneDeviceMutation:
		return c.RiderPhoneDevice.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *SettingMutation:
		return c.Setting.mutate(ctx, m)
	case *StockMutation:
		return c.Stock.mutate(ctx, m)
	case *StockSummaryMutation:
		return c.StockSummary.mutate(ctx, m)
	case *StoreMutation:
		return c.Store.mutate(ctx, m)
	case *StoreGoodsMutation:
		return c.StoreGoods.mutate(ctx, m)
	case *StoreGroupMutation:
		return c.StoreGroup.mutate(ctx, m)
	case *SubscribeMutation:
		return c.Subscribe.mutate(ctx, m)
	case *SubscribeAlterMutation:
		return c.SubscribeAlter.mutate(ctx, m)
	case *SubscribePauseMutation:
		return c.SubscribePause.mutate(ctx, m)
	case *SubscribeReminderMutation:
		return c.SubscribeReminder.mutate(ctx, m)
	case *SubscribeSuspendMutation:
		return c.SubscribeSuspend.mutate(ctx, m)
	case *VersionMutation:
		return c.Version.mutate(ctx, m)
	case *WarehouseMutation:
		return c.Warehouse.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActivityClient is a client for the Activity schema.
type ActivityClient struct {
	config
}

// NewActivityClient returns a client for the Activity from the given config.
func NewActivityClient(c config) *ActivityClient {
	return &ActivityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activity.Hooks(f(g(h())))`.
func (c *ActivityClient) Use(hooks ...Hook) {
	c.hooks.Activity = append(c.hooks.Activity, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activity.Intercept(f(g(h())))`.
func (c *ActivityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Activity = append(c.inters.Activity, interceptors...)
}

// Create returns a builder for creating a Activity entity.
func (c *ActivityClient) Create() *ActivityCreate {
	mutation := newActivityMutation(c.config, OpCreate)
	return &ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Activity entities.
func (c *ActivityClient) CreateBulk(builders ...*ActivityCreate) *ActivityCreateBulk {
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActivityClient) MapCreateBulk(slice any, setFunc func(*ActivityCreate, int)) *ActivityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActivityCreateBulk{err: fmt.Errorf("calling to ActivityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActivityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActivityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Activity.
func (c *ActivityClient) Update() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActivityClient) UpdateOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActivityClient) UpdateOneID(id uint64) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Activity.
func (c *ActivityClient) Delete() *ActivityDelete {
	mutation := newActivityMutation(c.config, OpDelete)
	return &ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActivityClient) DeleteOne(a *Activity) *ActivityDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActivityClient) DeleteOneID(id uint64) *ActivityDeleteOne {
	builder := c.Delete().Where(activity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActivityDeleteOne{builder}
}

// Query returns a query builder for Activity.
func (c *ActivityClient) Query() *ActivityQuery {
	return &ActivityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActivity},
		inters: c.Interceptors(),
	}
}

// Get returns a Activity entity by its id.
func (c *ActivityClient) Get(ctx context.Context, id uint64) (*Activity, error) {
	return c.Query().Where(activity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetX(ctx context.Context, id uint64) *Activity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ActivityClient) Hooks() []Hook {
	return c.hooks.Activity
}

// Interceptors returns the client interceptors.
func (c *ActivityClient) Interceptors() []Interceptor {
	return c.inters.Activity
}

func (c *ActivityClient) mutate(ctx context.Context, m *ActivityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActivityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActivityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Activity mutation op: %q", m.Op())
	}
}

// AgentClient is a client for the Agent schema.
type AgentClient struct {
	config
}

// NewAgentClient returns a client for the Agent from the given config.
func NewAgentClient(c config) *AgentClient {
	return &AgentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agent.Hooks(f(g(h())))`.
func (c *AgentClient) Use(hooks ...Hook) {
	c.hooks.Agent = append(c.hooks.Agent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `agent.Intercept(f(g(h())))`.
func (c *AgentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Agent = append(c.inters.Agent, interceptors...)
}

// Create returns a builder for creating a Agent entity.
func (c *AgentClient) Create() *AgentCreate {
	mutation := newAgentMutation(c.config, OpCreate)
	return &AgentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agent entities.
func (c *AgentClient) CreateBulk(builders ...*AgentCreate) *AgentCreateBulk {
	return &AgentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AgentClient) MapCreateBulk(slice any, setFunc func(*AgentCreate, int)) *AgentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AgentCreateBulk{err: fmt.Errorf("calling to AgentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AgentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AgentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agent.
func (c *AgentClient) Update() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentClient) UpdateOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentClient) UpdateOneID(id uint64) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agent.
func (c *AgentClient) Delete() *AgentDelete {
	mutation := newAgentMutation(c.config, OpDelete)
	return &AgentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgentClient) DeleteOne(a *Agent) *AgentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AgentClient) DeleteOneID(id uint64) *AgentDeleteOne {
	builder := c.Delete().Where(agent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentDeleteOne{builder}
}

// Query returns a query builder for Agent.
func (c *AgentClient) Query() *AgentQuery {
	return &AgentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAgent},
		inters: c.Interceptors(),
	}
}

// Get returns a Agent entity by its id.
func (c *AgentClient) Get(ctx context.Context, id uint64) (*Agent, error) {
	return c.Query().Where(agent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentClient) GetX(ctx context.Context, id uint64) *Agent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a Agent.
func (c *AgentClient) QueryEnterprise(a *Agent) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, agent.EnterpriseTable, agent.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStations queries the stations edge of a Agent.
func (c *AgentClient) QueryStations(a *Agent) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(agent.Table, agent.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, agent.StationsTable, agent.StationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AgentClient) Hooks() []Hook {
	hooks := c.hooks.Agent
	return append(hooks[:len(hooks):len(hooks)], agent.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AgentClient) Interceptors() []Interceptor {
	return c.inters.Agent
}

func (c *AgentClient) mutate(ctx context.Context, m *AgentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AgentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AgentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Agent mutation op: %q", m.Op())
	}
}

// AgreementClient is a client for the Agreement schema.
type AgreementClient struct {
	config
}

// NewAgreementClient returns a client for the Agreement from the given config.
func NewAgreementClient(c config) *AgreementClient {
	return &AgreementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agreement.Hooks(f(g(h())))`.
func (c *AgreementClient) Use(hooks ...Hook) {
	c.hooks.Agreement = append(c.hooks.Agreement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `agreement.Intercept(f(g(h())))`.
func (c *AgreementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Agreement = append(c.inters.Agreement, interceptors...)
}

// Create returns a builder for creating a Agreement entity.
func (c *AgreementClient) Create() *AgreementCreate {
	mutation := newAgreementMutation(c.config, OpCreate)
	return &AgreementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agreement entities.
func (c *AgreementClient) CreateBulk(builders ...*AgreementCreate) *AgreementCreateBulk {
	return &AgreementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AgreementClient) MapCreateBulk(slice any, setFunc func(*AgreementCreate, int)) *AgreementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AgreementCreateBulk{err: fmt.Errorf("calling to AgreementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AgreementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AgreementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agreement.
func (c *AgreementClient) Update() *AgreementUpdate {
	mutation := newAgreementMutation(c.config, OpUpdate)
	return &AgreementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgreementClient) UpdateOne(a *Agreement) *AgreementUpdateOne {
	mutation := newAgreementMutation(c.config, OpUpdateOne, withAgreement(a))
	return &AgreementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgreementClient) UpdateOneID(id uint64) *AgreementUpdateOne {
	mutation := newAgreementMutation(c.config, OpUpdateOne, withAgreementID(id))
	return &AgreementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agreement.
func (c *AgreementClient) Delete() *AgreementDelete {
	mutation := newAgreementMutation(c.config, OpDelete)
	return &AgreementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgreementClient) DeleteOne(a *Agreement) *AgreementDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AgreementClient) DeleteOneID(id uint64) *AgreementDeleteOne {
	builder := c.Delete().Where(agreement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgreementDeleteOne{builder}
}

// Query returns a query builder for Agreement.
func (c *AgreementClient) Query() *AgreementQuery {
	return &AgreementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAgreement},
		inters: c.Interceptors(),
	}
}

// Get returns a Agreement entity by its id.
func (c *AgreementClient) Get(ctx context.Context, id uint64) (*Agreement, error) {
	return c.Query().Where(agreement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgreementClient) GetX(ctx context.Context, id uint64) *Agreement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgreementClient) Hooks() []Hook {
	hooks := c.hooks.Agreement
	return append(hooks[:len(hooks):len(hooks)], agreement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AgreementClient) Interceptors() []Interceptor {
	return c.inters.Agreement
}

func (c *AgreementClient) mutate(ctx context.Context, m *AgreementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AgreementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AgreementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AgreementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AgreementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Agreement mutation op: %q", m.Op())
	}
}

// AllocateClient is a client for the Allocate schema.
type AllocateClient struct {
	config
}

// NewAllocateClient returns a client for the Allocate from the given config.
func NewAllocateClient(c config) *AllocateClient {
	return &AllocateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `allocate.Hooks(f(g(h())))`.
func (c *AllocateClient) Use(hooks ...Hook) {
	c.hooks.Allocate = append(c.hooks.Allocate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `allocate.Intercept(f(g(h())))`.
func (c *AllocateClient) Intercept(interceptors ...Interceptor) {
	c.inters.Allocate = append(c.inters.Allocate, interceptors...)
}

// Create returns a builder for creating a Allocate entity.
func (c *AllocateClient) Create() *AllocateCreate {
	mutation := newAllocateMutation(c.config, OpCreate)
	return &AllocateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Allocate entities.
func (c *AllocateClient) CreateBulk(builders ...*AllocateCreate) *AllocateCreateBulk {
	return &AllocateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AllocateClient) MapCreateBulk(slice any, setFunc func(*AllocateCreate, int)) *AllocateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AllocateCreateBulk{err: fmt.Errorf("calling to AllocateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AllocateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AllocateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Allocate.
func (c *AllocateClient) Update() *AllocateUpdate {
	mutation := newAllocateMutation(c.config, OpUpdate)
	return &AllocateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AllocateClient) UpdateOne(a *Allocate) *AllocateUpdateOne {
	mutation := newAllocateMutation(c.config, OpUpdateOne, withAllocate(a))
	return &AllocateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AllocateClient) UpdateOneID(id uint64) *AllocateUpdateOne {
	mutation := newAllocateMutation(c.config, OpUpdateOne, withAllocateID(id))
	return &AllocateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Allocate.
func (c *AllocateClient) Delete() *AllocateDelete {
	mutation := newAllocateMutation(c.config, OpDelete)
	return &AllocateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AllocateClient) DeleteOne(a *Allocate) *AllocateDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AllocateClient) DeleteOneID(id uint64) *AllocateDeleteOne {
	builder := c.Delete().Where(allocate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AllocateDeleteOne{builder}
}

// Query returns a query builder for Allocate.
func (c *AllocateClient) Query() *AllocateQuery {
	return &AllocateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAllocate},
		inters: c.Interceptors(),
	}
}

// Get returns a Allocate entity by its id.
func (c *AllocateClient) Get(ctx context.Context, id uint64) (*Allocate, error) {
	return c.Query().Where(allocate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AllocateClient) GetX(ctx context.Context, id uint64) *Allocate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Allocate.
func (c *AllocateClient) QueryRider(a *Allocate) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.RiderTable, allocate.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Allocate.
func (c *AllocateClient) QuerySubscribe(a *Allocate) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.SubscribeTable, allocate.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Allocate.
func (c *AllocateClient) QueryEmployee(a *Allocate) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.EmployeeTable, allocate.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Allocate.
func (c *AllocateClient) QueryCabinet(a *Allocate) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.CabinetTable, allocate.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Allocate.
func (c *AllocateClient) QueryStore(a *Allocate) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.StoreTable, allocate.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Allocate.
func (c *AllocateClient) QueryBrand(a *Allocate) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.BrandTable, allocate.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Allocate.
func (c *AllocateClient) QueryBattery(a *Allocate) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.BatteryTable, allocate.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Allocate.
func (c *AllocateClient) QueryStation(a *Allocate) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.StationTable, allocate.StationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Allocate.
func (c *AllocateClient) QueryAgent(a *Allocate) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, allocate.AgentTable, allocate.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContract queries the contract edge of a Allocate.
func (c *AllocateClient) QueryContract(a *Allocate) *ContractQuery {
	query := (&ContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, allocate.ContractTable, allocate.ContractColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Allocate.
func (c *AllocateClient) QueryEbike(a *Allocate) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(allocate.Table, allocate.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, allocate.EbikeTable, allocate.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AllocateClient) Hooks() []Hook {
	hooks := c.hooks.Allocate
	return append(hooks[:len(hooks):len(hooks)], allocate.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AllocateClient) Interceptors() []Interceptor {
	return c.inters.Allocate
}

func (c *AllocateClient) mutate(ctx context.Context, m *AllocateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AllocateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AllocateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AllocateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AllocateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Allocate mutation op: %q", m.Op())
	}
}

// AssetClient is a client for the Asset schema.
type AssetClient struct {
	config
}

// NewAssetClient returns a client for the Asset from the given config.
func NewAssetClient(c config) *AssetClient {
	return &AssetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asset.Hooks(f(g(h())))`.
func (c *AssetClient) Use(hooks ...Hook) {
	c.hooks.Asset = append(c.hooks.Asset, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `asset.Intercept(f(g(h())))`.
func (c *AssetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Asset = append(c.inters.Asset, interceptors...)
}

// Create returns a builder for creating a Asset entity.
func (c *AssetClient) Create() *AssetCreate {
	mutation := newAssetMutation(c.config, OpCreate)
	return &AssetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Asset entities.
func (c *AssetClient) CreateBulk(builders ...*AssetCreate) *AssetCreateBulk {
	return &AssetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetClient) MapCreateBulk(slice any, setFunc func(*AssetCreate, int)) *AssetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetCreateBulk{err: fmt.Errorf("calling to AssetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Asset.
func (c *AssetClient) Update() *AssetUpdate {
	mutation := newAssetMutation(c.config, OpUpdate)
	return &AssetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetClient) UpdateOne(a *Asset) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAsset(a))
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetClient) UpdateOneID(id uint64) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAssetID(id))
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Asset.
func (c *AssetClient) Delete() *AssetDelete {
	mutation := newAssetMutation(c.config, OpDelete)
	return &AssetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetClient) DeleteOne(a *Asset) *AssetDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetClient) DeleteOneID(id uint64) *AssetDeleteOne {
	builder := c.Delete().Where(asset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetDeleteOne{builder}
}

// Query returns a query builder for Asset.
func (c *AssetClient) Query() *AssetQuery {
	return &AssetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAsset},
		inters: c.Interceptors(),
	}
}

// Get returns a Asset entity by its id.
func (c *AssetClient) Get(ctx context.Context, id uint64) (*Asset, error) {
	return c.Query().Where(asset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetClient) GetX(ctx context.Context, id uint64) *Asset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a Asset.
func (c *AssetClient) QueryBrand(a *Asset) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.BrandTable, asset.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModel queries the model edge of a Asset.
func (c *AssetClient) QueryModel(a *Asset) *BatteryModelQuery {
	query := (&BatteryModelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(batterymodel.Table, batterymodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.ModelTable, asset.ModelColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Asset.
func (c *AssetClient) QueryCity(a *Asset) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.CityTable, asset.CityColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaterial queries the material edge of a Asset.
func (c *AssetClient) QueryMaterial(a *Asset) *MaterialQuery {
	query := (&MaterialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(material.Table, material.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.MaterialTable, asset.MaterialColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryValues queries the values edge of a Asset.
func (c *AssetClient) QueryValues(a *Asset) *AssetAttributeValuesQuery {
	query := (&AssetAttributeValuesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(assetattributevalues.Table, assetattributevalues.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.ValuesTable, asset.ValuesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWarehouse queries the warehouse edge of a Asset.
func (c *AssetClient) QueryWarehouse(a *Asset) *WarehouseQuery {
	query := (&WarehouseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.WarehouseTable, asset.WarehouseColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Asset.
func (c *AssetClient) QueryStore(a *Asset) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.StoreTable, asset.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Asset.
func (c *AssetClient) QueryCabinet(a *Asset) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.CabinetTable, asset.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Asset.
func (c *AssetClient) QueryStation(a *Asset) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.StationTable, asset.StationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Asset.
func (c *AssetClient) QueryRider(a *Asset) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.RiderTable, asset.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperator queries the operator edge of a Asset.
func (c *AssetClient) QueryOperator(a *Asset) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.OperatorTable, asset.OperatorColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScrapDetails queries the scrap_details edge of a Asset.
func (c *AssetClient) QueryScrapDetails(a *Asset) *AssetScrapDetailsQuery {
	query := (&AssetScrapDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(assetscrapdetails.Table, assetscrapdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.ScrapDetailsTable, asset.ScrapDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTransferDetails queries the transfer_details edge of a Asset.
func (c *AssetClient) QueryTransferDetails(a *Asset) *AssetTransferDetailsQuery {
	query := (&AssetTransferDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(assettransferdetails.Table, assettransferdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.TransferDetailsTable, asset.TransferDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaintenanceDetails queries the maintenance_details edge of a Asset.
func (c *AssetClient) QueryMaintenanceDetails(a *Asset) *AssetMaintenanceDetailsQuery {
	query := (&AssetMaintenanceDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.MaintenanceDetailsTable, asset.MaintenanceDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckDetails queries the check_details edge of a Asset.
func (c *AssetClient) QueryCheckDetails(a *Asset) *AssetCheckDetailsQuery {
	query := (&AssetCheckDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(assetcheckdetails.Table, assetcheckdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.CheckDetailsTable, asset.CheckDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetClient) Hooks() []Hook {
	hooks := c.hooks.Asset
	return append(hooks[:len(hooks):len(hooks)], asset.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetClient) Interceptors() []Interceptor {
	return c.inters.Asset
}

func (c *AssetClient) mutate(ctx context.Context, m *AssetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Asset mutation op: %q", m.Op())
	}
}

// AssetAttributeValuesClient is a client for the AssetAttributeValues schema.
type AssetAttributeValuesClient struct {
	config
}

// NewAssetAttributeValuesClient returns a client for the AssetAttributeValues from the given config.
func NewAssetAttributeValuesClient(c config) *AssetAttributeValuesClient {
	return &AssetAttributeValuesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetattributevalues.Hooks(f(g(h())))`.
func (c *AssetAttributeValuesClient) Use(hooks ...Hook) {
	c.hooks.AssetAttributeValues = append(c.hooks.AssetAttributeValues, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetattributevalues.Intercept(f(g(h())))`.
func (c *AssetAttributeValuesClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetAttributeValues = append(c.inters.AssetAttributeValues, interceptors...)
}

// Create returns a builder for creating a AssetAttributeValues entity.
func (c *AssetAttributeValuesClient) Create() *AssetAttributeValuesCreate {
	mutation := newAssetAttributeValuesMutation(c.config, OpCreate)
	return &AssetAttributeValuesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetAttributeValues entities.
func (c *AssetAttributeValuesClient) CreateBulk(builders ...*AssetAttributeValuesCreate) *AssetAttributeValuesCreateBulk {
	return &AssetAttributeValuesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetAttributeValuesClient) MapCreateBulk(slice any, setFunc func(*AssetAttributeValuesCreate, int)) *AssetAttributeValuesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetAttributeValuesCreateBulk{err: fmt.Errorf("calling to AssetAttributeValuesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetAttributeValuesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetAttributeValuesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetAttributeValues.
func (c *AssetAttributeValuesClient) Update() *AssetAttributeValuesUpdate {
	mutation := newAssetAttributeValuesMutation(c.config, OpUpdate)
	return &AssetAttributeValuesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetAttributeValuesClient) UpdateOne(aav *AssetAttributeValues) *AssetAttributeValuesUpdateOne {
	mutation := newAssetAttributeValuesMutation(c.config, OpUpdateOne, withAssetAttributeValues(aav))
	return &AssetAttributeValuesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetAttributeValuesClient) UpdateOneID(id uint64) *AssetAttributeValuesUpdateOne {
	mutation := newAssetAttributeValuesMutation(c.config, OpUpdateOne, withAssetAttributeValuesID(id))
	return &AssetAttributeValuesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetAttributeValues.
func (c *AssetAttributeValuesClient) Delete() *AssetAttributeValuesDelete {
	mutation := newAssetAttributeValuesMutation(c.config, OpDelete)
	return &AssetAttributeValuesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetAttributeValuesClient) DeleteOne(aav *AssetAttributeValues) *AssetAttributeValuesDeleteOne {
	return c.DeleteOneID(aav.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetAttributeValuesClient) DeleteOneID(id uint64) *AssetAttributeValuesDeleteOne {
	builder := c.Delete().Where(assetattributevalues.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetAttributeValuesDeleteOne{builder}
}

// Query returns a query builder for AssetAttributeValues.
func (c *AssetAttributeValuesClient) Query() *AssetAttributeValuesQuery {
	return &AssetAttributeValuesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetAttributeValues},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetAttributeValues entity by its id.
func (c *AssetAttributeValuesClient) Get(ctx context.Context, id uint64) (*AssetAttributeValues, error) {
	return c.Query().Where(assetattributevalues.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetAttributeValuesClient) GetX(ctx context.Context, id uint64) *AssetAttributeValues {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttribute queries the attribute edge of a AssetAttributeValues.
func (c *AssetAttributeValuesClient) QueryAttribute(aav *AssetAttributeValues) *AssetAttributesQuery {
	query := (&AssetAttributesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aav.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetattributevalues.Table, assetattributevalues.FieldID, id),
			sqlgraph.To(assetattributes.Table, assetattributes.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetattributevalues.AttributeTable, assetattributevalues.AttributeColumn),
		)
		fromV = sqlgraph.Neighbors(aav.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAsset queries the asset edge of a AssetAttributeValues.
func (c *AssetAttributeValuesClient) QueryAsset(aav *AssetAttributeValues) *AssetQuery {
	query := (&AssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aav.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetattributevalues.Table, assetattributevalues.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetattributevalues.AssetTable, assetattributevalues.AssetColumn),
		)
		fromV = sqlgraph.Neighbors(aav.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetAttributeValuesClient) Hooks() []Hook {
	return c.hooks.AssetAttributeValues
}

// Interceptors returns the client interceptors.
func (c *AssetAttributeValuesClient) Interceptors() []Interceptor {
	return c.inters.AssetAttributeValues
}

func (c *AssetAttributeValuesClient) mutate(ctx context.Context, m *AssetAttributeValuesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetAttributeValuesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetAttributeValuesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetAttributeValuesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetAttributeValuesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetAttributeValues mutation op: %q", m.Op())
	}
}

// AssetAttributesClient is a client for the AssetAttributes schema.
type AssetAttributesClient struct {
	config
}

// NewAssetAttributesClient returns a client for the AssetAttributes from the given config.
func NewAssetAttributesClient(c config) *AssetAttributesClient {
	return &AssetAttributesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetattributes.Hooks(f(g(h())))`.
func (c *AssetAttributesClient) Use(hooks ...Hook) {
	c.hooks.AssetAttributes = append(c.hooks.AssetAttributes, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetattributes.Intercept(f(g(h())))`.
func (c *AssetAttributesClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetAttributes = append(c.inters.AssetAttributes, interceptors...)
}

// Create returns a builder for creating a AssetAttributes entity.
func (c *AssetAttributesClient) Create() *AssetAttributesCreate {
	mutation := newAssetAttributesMutation(c.config, OpCreate)
	return &AssetAttributesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetAttributes entities.
func (c *AssetAttributesClient) CreateBulk(builders ...*AssetAttributesCreate) *AssetAttributesCreateBulk {
	return &AssetAttributesCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetAttributesClient) MapCreateBulk(slice any, setFunc func(*AssetAttributesCreate, int)) *AssetAttributesCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetAttributesCreateBulk{err: fmt.Errorf("calling to AssetAttributesClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetAttributesCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetAttributesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetAttributes.
func (c *AssetAttributesClient) Update() *AssetAttributesUpdate {
	mutation := newAssetAttributesMutation(c.config, OpUpdate)
	return &AssetAttributesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetAttributesClient) UpdateOne(aa *AssetAttributes) *AssetAttributesUpdateOne {
	mutation := newAssetAttributesMutation(c.config, OpUpdateOne, withAssetAttributes(aa))
	return &AssetAttributesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetAttributesClient) UpdateOneID(id uint64) *AssetAttributesUpdateOne {
	mutation := newAssetAttributesMutation(c.config, OpUpdateOne, withAssetAttributesID(id))
	return &AssetAttributesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetAttributes.
func (c *AssetAttributesClient) Delete() *AssetAttributesDelete {
	mutation := newAssetAttributesMutation(c.config, OpDelete)
	return &AssetAttributesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetAttributesClient) DeleteOne(aa *AssetAttributes) *AssetAttributesDeleteOne {
	return c.DeleteOneID(aa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetAttributesClient) DeleteOneID(id uint64) *AssetAttributesDeleteOne {
	builder := c.Delete().Where(assetattributes.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetAttributesDeleteOne{builder}
}

// Query returns a query builder for AssetAttributes.
func (c *AssetAttributesClient) Query() *AssetAttributesQuery {
	return &AssetAttributesQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetAttributes},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetAttributes entity by its id.
func (c *AssetAttributesClient) Get(ctx context.Context, id uint64) (*AssetAttributes, error) {
	return c.Query().Where(assetattributes.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetAttributesClient) GetX(ctx context.Context, id uint64) *AssetAttributes {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryValues queries the values edge of a AssetAttributes.
func (c *AssetAttributesClient) QueryValues(aa *AssetAttributes) *AssetAttributeValuesQuery {
	query := (&AssetAttributeValuesClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := aa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetattributes.Table, assetattributes.FieldID, id),
			sqlgraph.To(assetattributevalues.Table, assetattributevalues.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assetattributes.ValuesTable, assetattributes.ValuesColumn),
		)
		fromV = sqlgraph.Neighbors(aa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetAttributesClient) Hooks() []Hook {
	return c.hooks.AssetAttributes
}

// Interceptors returns the client interceptors.
func (c *AssetAttributesClient) Interceptors() []Interceptor {
	return c.inters.AssetAttributes
}

func (c *AssetAttributesClient) mutate(ctx context.Context, m *AssetAttributesMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetAttributesCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetAttributesUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetAttributesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetAttributesDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetAttributes mutation op: %q", m.Op())
	}
}

// AssetCheckClient is a client for the AssetCheck schema.
type AssetCheckClient struct {
	config
}

// NewAssetCheckClient returns a client for the AssetCheck from the given config.
func NewAssetCheckClient(c config) *AssetCheckClient {
	return &AssetCheckClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetcheck.Hooks(f(g(h())))`.
func (c *AssetCheckClient) Use(hooks ...Hook) {
	c.hooks.AssetCheck = append(c.hooks.AssetCheck, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetcheck.Intercept(f(g(h())))`.
func (c *AssetCheckClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetCheck = append(c.inters.AssetCheck, interceptors...)
}

// Create returns a builder for creating a AssetCheck entity.
func (c *AssetCheckClient) Create() *AssetCheckCreate {
	mutation := newAssetCheckMutation(c.config, OpCreate)
	return &AssetCheckCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetCheck entities.
func (c *AssetCheckClient) CreateBulk(builders ...*AssetCheckCreate) *AssetCheckCreateBulk {
	return &AssetCheckCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetCheckClient) MapCreateBulk(slice any, setFunc func(*AssetCheckCreate, int)) *AssetCheckCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetCheckCreateBulk{err: fmt.Errorf("calling to AssetCheckClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetCheckCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetCheckCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetCheck.
func (c *AssetCheckClient) Update() *AssetCheckUpdate {
	mutation := newAssetCheckMutation(c.config, OpUpdate)
	return &AssetCheckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetCheckClient) UpdateOne(ac *AssetCheck) *AssetCheckUpdateOne {
	mutation := newAssetCheckMutation(c.config, OpUpdateOne, withAssetCheck(ac))
	return &AssetCheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetCheckClient) UpdateOneID(id uint64) *AssetCheckUpdateOne {
	mutation := newAssetCheckMutation(c.config, OpUpdateOne, withAssetCheckID(id))
	return &AssetCheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetCheck.
func (c *AssetCheckClient) Delete() *AssetCheckDelete {
	mutation := newAssetCheckMutation(c.config, OpDelete)
	return &AssetCheckDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetCheckClient) DeleteOne(ac *AssetCheck) *AssetCheckDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetCheckClient) DeleteOneID(id uint64) *AssetCheckDeleteOne {
	builder := c.Delete().Where(assetcheck.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetCheckDeleteOne{builder}
}

// Query returns a query builder for AssetCheck.
func (c *AssetCheckClient) Query() *AssetCheckQuery {
	return &AssetCheckQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetCheck},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetCheck entity by its id.
func (c *AssetCheckClient) Get(ctx context.Context, id uint64) (*AssetCheck, error) {
	return c.Query().Where(assetcheck.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetCheckClient) GetX(ctx context.Context, id uint64) *AssetCheck {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCheckDetails queries the check_details edge of a AssetCheck.
func (c *AssetCheckClient) QueryCheckDetails(ac *AssetCheck) *AssetCheckDetailsQuery {
	query := (&AssetCheckDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheck.Table, assetcheck.FieldID, id),
			sqlgraph.To(assetcheckdetails.Table, assetcheckdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assetcheck.CheckDetailsTable, assetcheck.CheckDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperateManager queries the operate_manager edge of a AssetCheck.
func (c *AssetCheckClient) QueryOperateManager(ac *AssetCheck) *AssetManagerQuery {
	query := (&AssetManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheck.Table, assetcheck.FieldID, id),
			sqlgraph.To(assetmanager.Table, assetmanager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheck.OperateManagerTable, assetcheck.OperateManagerColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperateStore queries the operate_store edge of a AssetCheck.
func (c *AssetCheckClient) QueryOperateStore(ac *AssetCheck) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheck.Table, assetcheck.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheck.OperateStoreTable, assetcheck.OperateStoreColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperateAgent queries the operate_agent edge of a AssetCheck.
func (c *AssetCheckClient) QueryOperateAgent(ac *AssetCheck) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheck.Table, assetcheck.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheck.OperateAgentTable, assetcheck.OperateAgentColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWarehouse queries the warehouse edge of a AssetCheck.
func (c *AssetCheckClient) QueryWarehouse(ac *AssetCheck) *WarehouseQuery {
	query := (&WarehouseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheck.Table, assetcheck.FieldID, id),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheck.WarehouseTable, assetcheck.WarehouseColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a AssetCheck.
func (c *AssetCheckClient) QueryStore(ac *AssetCheck) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheck.Table, assetcheck.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheck.StoreTable, assetcheck.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a AssetCheck.
func (c *AssetCheckClient) QueryStation(ac *AssetCheck) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheck.Table, assetcheck.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheck.StationTable, assetcheck.StationColumn),
		)
		fromV = sqlgraph.Neighbors(ac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetCheckClient) Hooks() []Hook {
	hooks := c.hooks.AssetCheck
	return append(hooks[:len(hooks):len(hooks)], assetcheck.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetCheckClient) Interceptors() []Interceptor {
	return c.inters.AssetCheck
}

func (c *AssetCheckClient) mutate(ctx context.Context, m *AssetCheckMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetCheckCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetCheckUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetCheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetCheckDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetCheck mutation op: %q", m.Op())
	}
}

// AssetCheckDetailsClient is a client for the AssetCheckDetails schema.
type AssetCheckDetailsClient struct {
	config
}

// NewAssetCheckDetailsClient returns a client for the AssetCheckDetails from the given config.
func NewAssetCheckDetailsClient(c config) *AssetCheckDetailsClient {
	return &AssetCheckDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetcheckdetails.Hooks(f(g(h())))`.
func (c *AssetCheckDetailsClient) Use(hooks ...Hook) {
	c.hooks.AssetCheckDetails = append(c.hooks.AssetCheckDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetcheckdetails.Intercept(f(g(h())))`.
func (c *AssetCheckDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetCheckDetails = append(c.inters.AssetCheckDetails, interceptors...)
}

// Create returns a builder for creating a AssetCheckDetails entity.
func (c *AssetCheckDetailsClient) Create() *AssetCheckDetailsCreate {
	mutation := newAssetCheckDetailsMutation(c.config, OpCreate)
	return &AssetCheckDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetCheckDetails entities.
func (c *AssetCheckDetailsClient) CreateBulk(builders ...*AssetCheckDetailsCreate) *AssetCheckDetailsCreateBulk {
	return &AssetCheckDetailsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetCheckDetailsClient) MapCreateBulk(slice any, setFunc func(*AssetCheckDetailsCreate, int)) *AssetCheckDetailsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetCheckDetailsCreateBulk{err: fmt.Errorf("calling to AssetCheckDetailsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetCheckDetailsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetCheckDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetCheckDetails.
func (c *AssetCheckDetailsClient) Update() *AssetCheckDetailsUpdate {
	mutation := newAssetCheckDetailsMutation(c.config, OpUpdate)
	return &AssetCheckDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetCheckDetailsClient) UpdateOne(acd *AssetCheckDetails) *AssetCheckDetailsUpdateOne {
	mutation := newAssetCheckDetailsMutation(c.config, OpUpdateOne, withAssetCheckDetails(acd))
	return &AssetCheckDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetCheckDetailsClient) UpdateOneID(id uint64) *AssetCheckDetailsUpdateOne {
	mutation := newAssetCheckDetailsMutation(c.config, OpUpdateOne, withAssetCheckDetailsID(id))
	return &AssetCheckDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetCheckDetails.
func (c *AssetCheckDetailsClient) Delete() *AssetCheckDetailsDelete {
	mutation := newAssetCheckDetailsMutation(c.config, OpDelete)
	return &AssetCheckDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetCheckDetailsClient) DeleteOne(acd *AssetCheckDetails) *AssetCheckDetailsDeleteOne {
	return c.DeleteOneID(acd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetCheckDetailsClient) DeleteOneID(id uint64) *AssetCheckDetailsDeleteOne {
	builder := c.Delete().Where(assetcheckdetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetCheckDetailsDeleteOne{builder}
}

// Query returns a query builder for AssetCheckDetails.
func (c *AssetCheckDetailsClient) Query() *AssetCheckDetailsQuery {
	return &AssetCheckDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetCheckDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetCheckDetails entity by its id.
func (c *AssetCheckDetailsClient) Get(ctx context.Context, id uint64) (*AssetCheckDetails, error) {
	return c.Query().Where(assetcheckdetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetCheckDetailsClient) GetX(ctx context.Context, id uint64) *AssetCheckDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMaintainer queries the maintainer edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryMaintainer(acd *AssetCheckDetails) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.MaintainerTable, assetcheckdetails.MaintainerColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAsset queries the asset edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryAsset(acd *AssetCheckDetails) *AssetQuery {
	query := (&AssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetcheckdetails.AssetTable, assetcheckdetails.AssetColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheck queries the check edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryCheck(acd *AssetCheckDetails) *AssetCheckQuery {
	query := (&AssetCheckClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(assetcheck.Table, assetcheck.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetcheckdetails.CheckTable, assetcheckdetails.CheckColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWarehouse queries the warehouse edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryWarehouse(acd *AssetCheckDetails) *WarehouseQuery {
	query := (&WarehouseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.WarehouseTable, assetcheckdetails.WarehouseColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryStore(acd *AssetCheckDetails) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.StoreTable, assetcheckdetails.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryCabinet(acd *AssetCheckDetails) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.CabinetTable, assetcheckdetails.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryStation(acd *AssetCheckDetails) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.StationTable, assetcheckdetails.StationColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryRider(acd *AssetCheckDetails) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RiderTable, assetcheckdetails.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperator queries the operator edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryOperator(acd *AssetCheckDetails) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.OperatorTable, assetcheckdetails.OperatorColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRealWarehouse queries the real_warehouse edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryRealWarehouse(acd *AssetCheckDetails) *WarehouseQuery {
	query := (&WarehouseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealWarehouseTable, assetcheckdetails.RealWarehouseColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRealStore queries the real_store edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryRealStore(acd *AssetCheckDetails) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealStoreTable, assetcheckdetails.RealStoreColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRealCabinet queries the real_cabinet edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryRealCabinet(acd *AssetCheckDetails) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealCabinetTable, assetcheckdetails.RealCabinetColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRealStation queries the real_station edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryRealStation(acd *AssetCheckDetails) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealStationTable, assetcheckdetails.RealStationColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRealRider queries the real_rider edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryRealRider(acd *AssetCheckDetails) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealRiderTable, assetcheckdetails.RealRiderColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRealOperator queries the real_operator edge of a AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryRealOperator(acd *AssetCheckDetails) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := acd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetcheckdetails.Table, assetcheckdetails.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetcheckdetails.RealOperatorTable, assetcheckdetails.RealOperatorColumn),
		)
		fromV = sqlgraph.Neighbors(acd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetCheckDetailsClient) Hooks() []Hook {
	hooks := c.hooks.AssetCheckDetails
	return append(hooks[:len(hooks):len(hooks)], assetcheckdetails.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetCheckDetailsClient) Interceptors() []Interceptor {
	return c.inters.AssetCheckDetails
}

func (c *AssetCheckDetailsClient) mutate(ctx context.Context, m *AssetCheckDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetCheckDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetCheckDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetCheckDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetCheckDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetCheckDetails mutation op: %q", m.Op())
	}
}

// AssetMaintenanceClient is a client for the AssetMaintenance schema.
type AssetMaintenanceClient struct {
	config
}

// NewAssetMaintenanceClient returns a client for the AssetMaintenance from the given config.
func NewAssetMaintenanceClient(c config) *AssetMaintenanceClient {
	return &AssetMaintenanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetmaintenance.Hooks(f(g(h())))`.
func (c *AssetMaintenanceClient) Use(hooks ...Hook) {
	c.hooks.AssetMaintenance = append(c.hooks.AssetMaintenance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetmaintenance.Intercept(f(g(h())))`.
func (c *AssetMaintenanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetMaintenance = append(c.inters.AssetMaintenance, interceptors...)
}

// Create returns a builder for creating a AssetMaintenance entity.
func (c *AssetMaintenanceClient) Create() *AssetMaintenanceCreate {
	mutation := newAssetMaintenanceMutation(c.config, OpCreate)
	return &AssetMaintenanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetMaintenance entities.
func (c *AssetMaintenanceClient) CreateBulk(builders ...*AssetMaintenanceCreate) *AssetMaintenanceCreateBulk {
	return &AssetMaintenanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetMaintenanceClient) MapCreateBulk(slice any, setFunc func(*AssetMaintenanceCreate, int)) *AssetMaintenanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetMaintenanceCreateBulk{err: fmt.Errorf("calling to AssetMaintenanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetMaintenanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetMaintenanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetMaintenance.
func (c *AssetMaintenanceClient) Update() *AssetMaintenanceUpdate {
	mutation := newAssetMaintenanceMutation(c.config, OpUpdate)
	return &AssetMaintenanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetMaintenanceClient) UpdateOne(am *AssetMaintenance) *AssetMaintenanceUpdateOne {
	mutation := newAssetMaintenanceMutation(c.config, OpUpdateOne, withAssetMaintenance(am))
	return &AssetMaintenanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetMaintenanceClient) UpdateOneID(id uint64) *AssetMaintenanceUpdateOne {
	mutation := newAssetMaintenanceMutation(c.config, OpUpdateOne, withAssetMaintenanceID(id))
	return &AssetMaintenanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetMaintenance.
func (c *AssetMaintenanceClient) Delete() *AssetMaintenanceDelete {
	mutation := newAssetMaintenanceMutation(c.config, OpDelete)
	return &AssetMaintenanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetMaintenanceClient) DeleteOne(am *AssetMaintenance) *AssetMaintenanceDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetMaintenanceClient) DeleteOneID(id uint64) *AssetMaintenanceDeleteOne {
	builder := c.Delete().Where(assetmaintenance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetMaintenanceDeleteOne{builder}
}

// Query returns a query builder for AssetMaintenance.
func (c *AssetMaintenanceClient) Query() *AssetMaintenanceQuery {
	return &AssetMaintenanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetMaintenance},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetMaintenance entity by its id.
func (c *AssetMaintenanceClient) Get(ctx context.Context, id uint64) (*AssetMaintenance, error) {
	return c.Query().Where(assetmaintenance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetMaintenanceClient) GetX(ctx context.Context, id uint64) *AssetMaintenance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCabinet queries the cabinet edge of a AssetMaintenance.
func (c *AssetMaintenanceClient) QueryCabinet(am *AssetMaintenance) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenance.Table, assetmaintenance.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetmaintenance.CabinetTable, assetmaintenance.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaintainer queries the maintainer edge of a AssetMaintenance.
func (c *AssetMaintenanceClient) QueryMaintainer(am *AssetMaintenance) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenance.Table, assetmaintenance.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetmaintenance.MaintainerTable, assetmaintenance.MaintainerColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaintenanceDetails queries the maintenance_details edge of a AssetMaintenance.
func (c *AssetMaintenanceClient) QueryMaintenanceDetails(am *AssetMaintenance) *AssetMaintenanceDetailsQuery {
	query := (&AssetMaintenanceDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenance.Table, assetmaintenance.FieldID, id),
			sqlgraph.To(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assetmaintenance.MaintenanceDetailsTable, assetmaintenance.MaintenanceDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetMaintenanceClient) Hooks() []Hook {
	hooks := c.hooks.AssetMaintenance
	return append(hooks[:len(hooks):len(hooks)], assetmaintenance.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetMaintenanceClient) Interceptors() []Interceptor {
	return c.inters.AssetMaintenance
}

func (c *AssetMaintenanceClient) mutate(ctx context.Context, m *AssetMaintenanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetMaintenanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetMaintenanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetMaintenanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetMaintenanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetMaintenance mutation op: %q", m.Op())
	}
}

// AssetMaintenanceDetailsClient is a client for the AssetMaintenanceDetails schema.
type AssetMaintenanceDetailsClient struct {
	config
}

// NewAssetMaintenanceDetailsClient returns a client for the AssetMaintenanceDetails from the given config.
func NewAssetMaintenanceDetailsClient(c config) *AssetMaintenanceDetailsClient {
	return &AssetMaintenanceDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetmaintenancedetails.Hooks(f(g(h())))`.
func (c *AssetMaintenanceDetailsClient) Use(hooks ...Hook) {
	c.hooks.AssetMaintenanceDetails = append(c.hooks.AssetMaintenanceDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetmaintenancedetails.Intercept(f(g(h())))`.
func (c *AssetMaintenanceDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetMaintenanceDetails = append(c.inters.AssetMaintenanceDetails, interceptors...)
}

// Create returns a builder for creating a AssetMaintenanceDetails entity.
func (c *AssetMaintenanceDetailsClient) Create() *AssetMaintenanceDetailsCreate {
	mutation := newAssetMaintenanceDetailsMutation(c.config, OpCreate)
	return &AssetMaintenanceDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetMaintenanceDetails entities.
func (c *AssetMaintenanceDetailsClient) CreateBulk(builders ...*AssetMaintenanceDetailsCreate) *AssetMaintenanceDetailsCreateBulk {
	return &AssetMaintenanceDetailsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetMaintenanceDetailsClient) MapCreateBulk(slice any, setFunc func(*AssetMaintenanceDetailsCreate, int)) *AssetMaintenanceDetailsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetMaintenanceDetailsCreateBulk{err: fmt.Errorf("calling to AssetMaintenanceDetailsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetMaintenanceDetailsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetMaintenanceDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetMaintenanceDetails.
func (c *AssetMaintenanceDetailsClient) Update() *AssetMaintenanceDetailsUpdate {
	mutation := newAssetMaintenanceDetailsMutation(c.config, OpUpdate)
	return &AssetMaintenanceDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetMaintenanceDetailsClient) UpdateOne(amd *AssetMaintenanceDetails) *AssetMaintenanceDetailsUpdateOne {
	mutation := newAssetMaintenanceDetailsMutation(c.config, OpUpdateOne, withAssetMaintenanceDetails(amd))
	return &AssetMaintenanceDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetMaintenanceDetailsClient) UpdateOneID(id uint64) *AssetMaintenanceDetailsUpdateOne {
	mutation := newAssetMaintenanceDetailsMutation(c.config, OpUpdateOne, withAssetMaintenanceDetailsID(id))
	return &AssetMaintenanceDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetMaintenanceDetails.
func (c *AssetMaintenanceDetailsClient) Delete() *AssetMaintenanceDetailsDelete {
	mutation := newAssetMaintenanceDetailsMutation(c.config, OpDelete)
	return &AssetMaintenanceDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetMaintenanceDetailsClient) DeleteOne(amd *AssetMaintenanceDetails) *AssetMaintenanceDetailsDeleteOne {
	return c.DeleteOneID(amd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetMaintenanceDetailsClient) DeleteOneID(id uint64) *AssetMaintenanceDetailsDeleteOne {
	builder := c.Delete().Where(assetmaintenancedetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetMaintenanceDetailsDeleteOne{builder}
}

// Query returns a query builder for AssetMaintenanceDetails.
func (c *AssetMaintenanceDetailsClient) Query() *AssetMaintenanceDetailsQuery {
	return &AssetMaintenanceDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetMaintenanceDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetMaintenanceDetails entity by its id.
func (c *AssetMaintenanceDetailsClient) Get(ctx context.Context, id uint64) (*AssetMaintenanceDetails, error) {
	return c.Query().Where(assetmaintenancedetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetMaintenanceDetailsClient) GetX(ctx context.Context, id uint64) *AssetMaintenanceDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMaterial queries the material edge of a AssetMaintenanceDetails.
func (c *AssetMaintenanceDetailsClient) QueryMaterial(amd *AssetMaintenanceDetails) *MaterialQuery {
	query := (&MaterialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := amd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID, id),
			sqlgraph.To(material.Table, material.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetmaintenancedetails.MaterialTable, assetmaintenancedetails.MaterialColumn),
		)
		fromV = sqlgraph.Neighbors(amd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAsset queries the asset edge of a AssetMaintenanceDetails.
func (c *AssetMaintenanceDetailsClient) QueryAsset(amd *AssetMaintenanceDetails) *AssetQuery {
	query := (&AssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := amd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetmaintenancedetails.AssetTable, assetmaintenancedetails.AssetColumn),
		)
		fromV = sqlgraph.Neighbors(amd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaintenance queries the maintenance edge of a AssetMaintenanceDetails.
func (c *AssetMaintenanceDetailsClient) QueryMaintenance(amd *AssetMaintenanceDetails) *AssetMaintenanceQuery {
	query := (&AssetMaintenanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := amd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID, id),
			sqlgraph.To(assetmaintenance.Table, assetmaintenance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetmaintenancedetails.MaintenanceTable, assetmaintenancedetails.MaintenanceColumn),
		)
		fromV = sqlgraph.Neighbors(amd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetMaintenanceDetailsClient) Hooks() []Hook {
	hooks := c.hooks.AssetMaintenanceDetails
	return append(hooks[:len(hooks):len(hooks)], assetmaintenancedetails.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetMaintenanceDetailsClient) Interceptors() []Interceptor {
	return c.inters.AssetMaintenanceDetails
}

func (c *AssetMaintenanceDetailsClient) mutate(ctx context.Context, m *AssetMaintenanceDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetMaintenanceDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetMaintenanceDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetMaintenanceDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetMaintenanceDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetMaintenanceDetails mutation op: %q", m.Op())
	}
}

// AssetManagerClient is a client for the AssetManager schema.
type AssetManagerClient struct {
	config
}

// NewAssetManagerClient returns a client for the AssetManager from the given config.
func NewAssetManagerClient(c config) *AssetManagerClient {
	return &AssetManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetmanager.Hooks(f(g(h())))`.
func (c *AssetManagerClient) Use(hooks ...Hook) {
	c.hooks.AssetManager = append(c.hooks.AssetManager, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetmanager.Intercept(f(g(h())))`.
func (c *AssetManagerClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetManager = append(c.inters.AssetManager, interceptors...)
}

// Create returns a builder for creating a AssetManager entity.
func (c *AssetManagerClient) Create() *AssetManagerCreate {
	mutation := newAssetManagerMutation(c.config, OpCreate)
	return &AssetManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetManager entities.
func (c *AssetManagerClient) CreateBulk(builders ...*AssetManagerCreate) *AssetManagerCreateBulk {
	return &AssetManagerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetManagerClient) MapCreateBulk(slice any, setFunc func(*AssetManagerCreate, int)) *AssetManagerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetManagerCreateBulk{err: fmt.Errorf("calling to AssetManagerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetManagerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetManager.
func (c *AssetManagerClient) Update() *AssetManagerUpdate {
	mutation := newAssetManagerMutation(c.config, OpUpdate)
	return &AssetManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetManagerClient) UpdateOne(am *AssetManager) *AssetManagerUpdateOne {
	mutation := newAssetManagerMutation(c.config, OpUpdateOne, withAssetManager(am))
	return &AssetManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetManagerClient) UpdateOneID(id uint64) *AssetManagerUpdateOne {
	mutation := newAssetManagerMutation(c.config, OpUpdateOne, withAssetManagerID(id))
	return &AssetManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetManager.
func (c *AssetManagerClient) Delete() *AssetManagerDelete {
	mutation := newAssetManagerMutation(c.config, OpDelete)
	return &AssetManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetManagerClient) DeleteOne(am *AssetManager) *AssetManagerDeleteOne {
	return c.DeleteOneID(am.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetManagerClient) DeleteOneID(id uint64) *AssetManagerDeleteOne {
	builder := c.Delete().Where(assetmanager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetManagerDeleteOne{builder}
}

// Query returns a query builder for AssetManager.
func (c *AssetManagerClient) Query() *AssetManagerQuery {
	return &AssetManagerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetManager},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetManager entity by its id.
func (c *AssetManagerClient) Get(ctx context.Context, id uint64) (*AssetManager, error) {
	return c.Query().Where(assetmanager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetManagerClient) GetX(ctx context.Context, id uint64) *AssetManager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a AssetManager.
func (c *AssetManagerClient) QueryRole(am *AssetManager) *AssetRoleQuery {
	query := (&AssetRoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmanager.Table, assetmanager.FieldID, id),
			sqlgraph.To(assetrole.Table, assetrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetmanager.RoleTable, assetmanager.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWarehouses queries the warehouses edge of a AssetManager.
func (c *AssetManagerClient) QueryWarehouses(am *AssetManager) *WarehouseQuery {
	query := (&WarehouseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := am.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmanager.Table, assetmanager.FieldID, id),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, assetmanager.WarehousesTable, assetmanager.WarehousesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(am.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetManagerClient) Hooks() []Hook {
	hooks := c.hooks.AssetManager
	return append(hooks[:len(hooks):len(hooks)], assetmanager.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetManagerClient) Interceptors() []Interceptor {
	return c.inters.AssetManager
}

func (c *AssetManagerClient) mutate(ctx context.Context, m *AssetManagerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetManagerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetManagerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetManager mutation op: %q", m.Op())
	}
}

// AssetRoleClient is a client for the AssetRole schema.
type AssetRoleClient struct {
	config
}

// NewAssetRoleClient returns a client for the AssetRole from the given config.
func NewAssetRoleClient(c config) *AssetRoleClient {
	return &AssetRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetrole.Hooks(f(g(h())))`.
func (c *AssetRoleClient) Use(hooks ...Hook) {
	c.hooks.AssetRole = append(c.hooks.AssetRole, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetrole.Intercept(f(g(h())))`.
func (c *AssetRoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetRole = append(c.inters.AssetRole, interceptors...)
}

// Create returns a builder for creating a AssetRole entity.
func (c *AssetRoleClient) Create() *AssetRoleCreate {
	mutation := newAssetRoleMutation(c.config, OpCreate)
	return &AssetRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetRole entities.
func (c *AssetRoleClient) CreateBulk(builders ...*AssetRoleCreate) *AssetRoleCreateBulk {
	return &AssetRoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetRoleClient) MapCreateBulk(slice any, setFunc func(*AssetRoleCreate, int)) *AssetRoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetRoleCreateBulk{err: fmt.Errorf("calling to AssetRoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetRoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetRole.
func (c *AssetRoleClient) Update() *AssetRoleUpdate {
	mutation := newAssetRoleMutation(c.config, OpUpdate)
	return &AssetRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetRoleClient) UpdateOne(ar *AssetRole) *AssetRoleUpdateOne {
	mutation := newAssetRoleMutation(c.config, OpUpdateOne, withAssetRole(ar))
	return &AssetRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetRoleClient) UpdateOneID(id uint64) *AssetRoleUpdateOne {
	mutation := newAssetRoleMutation(c.config, OpUpdateOne, withAssetRoleID(id))
	return &AssetRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetRole.
func (c *AssetRoleClient) Delete() *AssetRoleDelete {
	mutation := newAssetRoleMutation(c.config, OpDelete)
	return &AssetRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetRoleClient) DeleteOne(ar *AssetRole) *AssetRoleDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetRoleClient) DeleteOneID(id uint64) *AssetRoleDeleteOne {
	builder := c.Delete().Where(assetrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetRoleDeleteOne{builder}
}

// Query returns a query builder for AssetRole.
func (c *AssetRoleClient) Query() *AssetRoleQuery {
	return &AssetRoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetRole},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetRole entity by its id.
func (c *AssetRoleClient) Get(ctx context.Context, id uint64) (*AssetRole, error) {
	return c.Query().Where(assetrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetRoleClient) GetX(ctx context.Context, id uint64) *AssetRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAssetManagers queries the asset_managers edge of a AssetRole.
func (c *AssetRoleClient) QueryAssetManagers(ar *AssetRole) *AssetManagerQuery {
	query := (&AssetManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetrole.Table, assetrole.FieldID, id),
			sqlgraph.To(assetmanager.Table, assetmanager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assetrole.AssetManagersTable, assetrole.AssetManagersColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetRoleClient) Hooks() []Hook {
	return c.hooks.AssetRole
}

// Interceptors returns the client interceptors.
func (c *AssetRoleClient) Interceptors() []Interceptor {
	return c.inters.AssetRole
}

func (c *AssetRoleClient) mutate(ctx context.Context, m *AssetRoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetRoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetRoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetRole mutation op: %q", m.Op())
	}
}

// AssetScrapClient is a client for the AssetScrap schema.
type AssetScrapClient struct {
	config
}

// NewAssetScrapClient returns a client for the AssetScrap from the given config.
func NewAssetScrapClient(c config) *AssetScrapClient {
	return &AssetScrapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetscrap.Hooks(f(g(h())))`.
func (c *AssetScrapClient) Use(hooks ...Hook) {
	c.hooks.AssetScrap = append(c.hooks.AssetScrap, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetscrap.Intercept(f(g(h())))`.
func (c *AssetScrapClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetScrap = append(c.inters.AssetScrap, interceptors...)
}

// Create returns a builder for creating a AssetScrap entity.
func (c *AssetScrapClient) Create() *AssetScrapCreate {
	mutation := newAssetScrapMutation(c.config, OpCreate)
	return &AssetScrapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetScrap entities.
func (c *AssetScrapClient) CreateBulk(builders ...*AssetScrapCreate) *AssetScrapCreateBulk {
	return &AssetScrapCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetScrapClient) MapCreateBulk(slice any, setFunc func(*AssetScrapCreate, int)) *AssetScrapCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetScrapCreateBulk{err: fmt.Errorf("calling to AssetScrapClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetScrapCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetScrapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetScrap.
func (c *AssetScrapClient) Update() *AssetScrapUpdate {
	mutation := newAssetScrapMutation(c.config, OpUpdate)
	return &AssetScrapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetScrapClient) UpdateOne(as *AssetScrap) *AssetScrapUpdateOne {
	mutation := newAssetScrapMutation(c.config, OpUpdateOne, withAssetScrap(as))
	return &AssetScrapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetScrapClient) UpdateOneID(id uint64) *AssetScrapUpdateOne {
	mutation := newAssetScrapMutation(c.config, OpUpdateOne, withAssetScrapID(id))
	return &AssetScrapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetScrap.
func (c *AssetScrapClient) Delete() *AssetScrapDelete {
	mutation := newAssetScrapMutation(c.config, OpDelete)
	return &AssetScrapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetScrapClient) DeleteOne(as *AssetScrap) *AssetScrapDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetScrapClient) DeleteOneID(id uint64) *AssetScrapDeleteOne {
	builder := c.Delete().Where(assetscrap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetScrapDeleteOne{builder}
}

// Query returns a query builder for AssetScrap.
func (c *AssetScrapClient) Query() *AssetScrapQuery {
	return &AssetScrapQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetScrap},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetScrap entity by its id.
func (c *AssetScrapClient) Get(ctx context.Context, id uint64) (*AssetScrap, error) {
	return c.Query().Where(assetscrap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetScrapClient) GetX(ctx context.Context, id uint64) *AssetScrap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManager queries the manager edge of a AssetScrap.
func (c *AssetScrapClient) QueryManager(as *AssetScrap) *AssetManagerQuery {
	query := (&AssetManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrap.Table, assetscrap.FieldID, id),
			sqlgraph.To(assetmanager.Table, assetmanager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetscrap.ManagerTable, assetscrap.ManagerColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a AssetScrap.
func (c *AssetScrapClient) QueryEmployee(as *AssetScrap) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrap.Table, assetscrap.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetscrap.EmployeeTable, assetscrap.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaintainer queries the maintainer edge of a AssetScrap.
func (c *AssetScrapClient) QueryMaintainer(as *AssetScrap) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrap.Table, assetscrap.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetscrap.MaintainerTable, assetscrap.MaintainerColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a AssetScrap.
func (c *AssetScrapClient) QueryAgent(as *AssetScrap) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrap.Table, assetscrap.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetscrap.AgentTable, assetscrap.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScrapDetails queries the scrap_details edge of a AssetScrap.
func (c *AssetScrapClient) QueryScrapDetails(as *AssetScrap) *AssetScrapDetailsQuery {
	query := (&AssetScrapDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrap.Table, assetscrap.FieldID, id),
			sqlgraph.To(assetscrapdetails.Table, assetscrapdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assetscrap.ScrapDetailsTable, assetscrap.ScrapDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetScrapClient) Hooks() []Hook {
	hooks := c.hooks.AssetScrap
	return append(hooks[:len(hooks):len(hooks)], assetscrap.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetScrapClient) Interceptors() []Interceptor {
	return c.inters.AssetScrap
}

func (c *AssetScrapClient) mutate(ctx context.Context, m *AssetScrapMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetScrapCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetScrapUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetScrapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetScrapDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetScrap mutation op: %q", m.Op())
	}
}

// AssetScrapDetailsClient is a client for the AssetScrapDetails schema.
type AssetScrapDetailsClient struct {
	config
}

// NewAssetScrapDetailsClient returns a client for the AssetScrapDetails from the given config.
func NewAssetScrapDetailsClient(c config) *AssetScrapDetailsClient {
	return &AssetScrapDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assetscrapdetails.Hooks(f(g(h())))`.
func (c *AssetScrapDetailsClient) Use(hooks ...Hook) {
	c.hooks.AssetScrapDetails = append(c.hooks.AssetScrapDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assetscrapdetails.Intercept(f(g(h())))`.
func (c *AssetScrapDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetScrapDetails = append(c.inters.AssetScrapDetails, interceptors...)
}

// Create returns a builder for creating a AssetScrapDetails entity.
func (c *AssetScrapDetailsClient) Create() *AssetScrapDetailsCreate {
	mutation := newAssetScrapDetailsMutation(c.config, OpCreate)
	return &AssetScrapDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetScrapDetails entities.
func (c *AssetScrapDetailsClient) CreateBulk(builders ...*AssetScrapDetailsCreate) *AssetScrapDetailsCreateBulk {
	return &AssetScrapDetailsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetScrapDetailsClient) MapCreateBulk(slice any, setFunc func(*AssetScrapDetailsCreate, int)) *AssetScrapDetailsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetScrapDetailsCreateBulk{err: fmt.Errorf("calling to AssetScrapDetailsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetScrapDetailsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetScrapDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetScrapDetails.
func (c *AssetScrapDetailsClient) Update() *AssetScrapDetailsUpdate {
	mutation := newAssetScrapDetailsMutation(c.config, OpUpdate)
	return &AssetScrapDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetScrapDetailsClient) UpdateOne(asd *AssetScrapDetails) *AssetScrapDetailsUpdateOne {
	mutation := newAssetScrapDetailsMutation(c.config, OpUpdateOne, withAssetScrapDetails(asd))
	return &AssetScrapDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetScrapDetailsClient) UpdateOneID(id uint64) *AssetScrapDetailsUpdateOne {
	mutation := newAssetScrapDetailsMutation(c.config, OpUpdateOne, withAssetScrapDetailsID(id))
	return &AssetScrapDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetScrapDetails.
func (c *AssetScrapDetailsClient) Delete() *AssetScrapDetailsDelete {
	mutation := newAssetScrapDetailsMutation(c.config, OpDelete)
	return &AssetScrapDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetScrapDetailsClient) DeleteOne(asd *AssetScrapDetails) *AssetScrapDetailsDeleteOne {
	return c.DeleteOneID(asd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetScrapDetailsClient) DeleteOneID(id uint64) *AssetScrapDetailsDeleteOne {
	builder := c.Delete().Where(assetscrapdetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetScrapDetailsDeleteOne{builder}
}

// Query returns a query builder for AssetScrapDetails.
func (c *AssetScrapDetailsClient) Query() *AssetScrapDetailsQuery {
	return &AssetScrapDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetScrapDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetScrapDetails entity by its id.
func (c *AssetScrapDetailsClient) Get(ctx context.Context, id uint64) (*AssetScrapDetails, error) {
	return c.Query().Where(assetscrapdetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetScrapDetailsClient) GetX(ctx context.Context, id uint64) *AssetScrapDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMaterial queries the material edge of a AssetScrapDetails.
func (c *AssetScrapDetailsClient) QueryMaterial(asd *AssetScrapDetails) *MaterialQuery {
	query := (&MaterialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := asd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrapdetails.Table, assetscrapdetails.FieldID, id),
			sqlgraph.To(material.Table, material.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetscrapdetails.MaterialTable, assetscrapdetails.MaterialColumn),
		)
		fromV = sqlgraph.Neighbors(asd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAsset queries the asset edge of a AssetScrapDetails.
func (c *AssetScrapDetailsClient) QueryAsset(asd *AssetScrapDetails) *AssetQuery {
	query := (&AssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := asd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrapdetails.Table, assetscrapdetails.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetscrapdetails.AssetTable, assetscrapdetails.AssetColumn),
		)
		fromV = sqlgraph.Neighbors(asd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScrap queries the scrap edge of a AssetScrapDetails.
func (c *AssetScrapDetailsClient) QueryScrap(asd *AssetScrapDetails) *AssetScrapQuery {
	query := (&AssetScrapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := asd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrapdetails.Table, assetscrapdetails.FieldID, id),
			sqlgraph.To(assetscrap.Table, assetscrap.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetscrapdetails.ScrapTable, assetscrapdetails.ScrapColumn),
		)
		fromV = sqlgraph.Neighbors(asd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetScrapDetailsClient) Hooks() []Hook {
	return c.hooks.AssetScrapDetails
}

// Interceptors returns the client interceptors.
func (c *AssetScrapDetailsClient) Interceptors() []Interceptor {
	return c.inters.AssetScrapDetails
}

func (c *AssetScrapDetailsClient) mutate(ctx context.Context, m *AssetScrapDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetScrapDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetScrapDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetScrapDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetScrapDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetScrapDetails mutation op: %q", m.Op())
	}
}

// AssetTransferClient is a client for the AssetTransfer schema.
type AssetTransferClient struct {
	config
}

// NewAssetTransferClient returns a client for the AssetTransfer from the given config.
func NewAssetTransferClient(c config) *AssetTransferClient {
	return &AssetTransferClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assettransfer.Hooks(f(g(h())))`.
func (c *AssetTransferClient) Use(hooks ...Hook) {
	c.hooks.AssetTransfer = append(c.hooks.AssetTransfer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assettransfer.Intercept(f(g(h())))`.
func (c *AssetTransferClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetTransfer = append(c.inters.AssetTransfer, interceptors...)
}

// Create returns a builder for creating a AssetTransfer entity.
func (c *AssetTransferClient) Create() *AssetTransferCreate {
	mutation := newAssetTransferMutation(c.config, OpCreate)
	return &AssetTransferCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetTransfer entities.
func (c *AssetTransferClient) CreateBulk(builders ...*AssetTransferCreate) *AssetTransferCreateBulk {
	return &AssetTransferCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetTransferClient) MapCreateBulk(slice any, setFunc func(*AssetTransferCreate, int)) *AssetTransferCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetTransferCreateBulk{err: fmt.Errorf("calling to AssetTransferClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetTransferCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetTransferCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetTransfer.
func (c *AssetTransferClient) Update() *AssetTransferUpdate {
	mutation := newAssetTransferMutation(c.config, OpUpdate)
	return &AssetTransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetTransferClient) UpdateOne(at *AssetTransfer) *AssetTransferUpdateOne {
	mutation := newAssetTransferMutation(c.config, OpUpdateOne, withAssetTransfer(at))
	return &AssetTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetTransferClient) UpdateOneID(id uint64) *AssetTransferUpdateOne {
	mutation := newAssetTransferMutation(c.config, OpUpdateOne, withAssetTransferID(id))
	return &AssetTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetTransfer.
func (c *AssetTransferClient) Delete() *AssetTransferDelete {
	mutation := newAssetTransferMutation(c.config, OpDelete)
	return &AssetTransferDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetTransferClient) DeleteOne(at *AssetTransfer) *AssetTransferDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetTransferClient) DeleteOneID(id uint64) *AssetTransferDeleteOne {
	builder := c.Delete().Where(assettransfer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetTransferDeleteOne{builder}
}

// Query returns a query builder for AssetTransfer.
func (c *AssetTransferClient) Query() *AssetTransferQuery {
	return &AssetTransferQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetTransfer},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetTransfer entity by its id.
func (c *AssetTransferClient) Get(ctx context.Context, id uint64) (*AssetTransfer, error) {
	return c.Query().Where(assettransfer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetTransferClient) GetX(ctx context.Context, id uint64) *AssetTransfer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransferDetails queries the transfer_details edge of a AssetTransfer.
func (c *AssetTransferClient) QueryTransferDetails(at *AssetTransfer) *AssetTransferDetailsQuery {
	query := (&AssetTransferDetailsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(assettransferdetails.Table, assettransferdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, assettransfer.TransferDetailsTable, assettransfer.TransferDetailsColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromLocationStore queries the from_location_store edge of a AssetTransfer.
func (c *AssetTransferClient) QueryFromLocationStore(at *AssetTransfer) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.FromLocationStoreTable, assettransfer.FromLocationStoreColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromLocationCabinet queries the from_location_cabinet edge of a AssetTransfer.
func (c *AssetTransferClient) QueryFromLocationCabinet(at *AssetTransfer) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.FromLocationCabinetTable, assettransfer.FromLocationCabinetColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromLocationStation queries the from_location_station edge of a AssetTransfer.
func (c *AssetTransferClient) QueryFromLocationStation(at *AssetTransfer) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.FromLocationStationTable, assettransfer.FromLocationStationColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromLocationRider queries the from_location_rider edge of a AssetTransfer.
func (c *AssetTransferClient) QueryFromLocationRider(at *AssetTransfer) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.FromLocationRiderTable, assettransfer.FromLocationRiderColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromLocationOperator queries the from_location_operator edge of a AssetTransfer.
func (c *AssetTransferClient) QueryFromLocationOperator(at *AssetTransfer) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.FromLocationOperatorTable, assettransfer.FromLocationOperatorColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFromLocationWarehouse queries the from_location_warehouse edge of a AssetTransfer.
func (c *AssetTransferClient) QueryFromLocationWarehouse(at *AssetTransfer) *WarehouseQuery {
	query := (&WarehouseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.FromLocationWarehouseTable, assettransfer.FromLocationWarehouseColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToLocationStore queries the to_location_store edge of a AssetTransfer.
func (c *AssetTransferClient) QueryToLocationStore(at *AssetTransfer) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToLocationStoreTable, assettransfer.ToLocationStoreColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToLocationCabinet queries the to_location_cabinet edge of a AssetTransfer.
func (c *AssetTransferClient) QueryToLocationCabinet(at *AssetTransfer) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToLocationCabinetTable, assettransfer.ToLocationCabinetColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToLocationStation queries the to_location_station edge of a AssetTransfer.
func (c *AssetTransferClient) QueryToLocationStation(at *AssetTransfer) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToLocationStationTable, assettransfer.ToLocationStationColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToLocationRider queries the to_location_rider edge of a AssetTransfer.
func (c *AssetTransferClient) QueryToLocationRider(at *AssetTransfer) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToLocationRiderTable, assettransfer.ToLocationRiderColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToLocationOperator queries the to_location_operator edge of a AssetTransfer.
func (c *AssetTransferClient) QueryToLocationOperator(at *AssetTransfer) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToLocationOperatorTable, assettransfer.ToLocationOperatorColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryToLocationWarehouse queries the to_location_warehouse edge of a AssetTransfer.
func (c *AssetTransferClient) QueryToLocationWarehouse(at *AssetTransfer) *WarehouseQuery {
	query := (&WarehouseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.ToLocationWarehouseTable, assettransfer.ToLocationWarehouseColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutOperateManager queries the out_operate_manager edge of a AssetTransfer.
func (c *AssetTransferClient) QueryOutOperateManager(at *AssetTransfer) *AssetManagerQuery {
	query := (&AssetManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(assetmanager.Table, assetmanager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateManagerTable, assettransfer.OutOperateManagerColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutOperateStore queries the out_operate_store edge of a AssetTransfer.
func (c *AssetTransferClient) QueryOutOperateStore(at *AssetTransfer) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateStoreTable, assettransfer.OutOperateStoreColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutOperateAgent queries the out_operate_agent edge of a AssetTransfer.
func (c *AssetTransferClient) QueryOutOperateAgent(at *AssetTransfer) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateAgentTable, assettransfer.OutOperateAgentColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutOperateMaintainer queries the out_operate_maintainer edge of a AssetTransfer.
func (c *AssetTransferClient) QueryOutOperateMaintainer(at *AssetTransfer) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateMaintainerTable, assettransfer.OutOperateMaintainerColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutOperateCabinet queries the out_operate_cabinet edge of a AssetTransfer.
func (c *AssetTransferClient) QueryOutOperateCabinet(at *AssetTransfer) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateCabinetTable, assettransfer.OutOperateCabinetColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOutOperateRider queries the out_operate_rider edge of a AssetTransfer.
func (c *AssetTransferClient) QueryOutOperateRider(at *AssetTransfer) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransfer.Table, assettransfer.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransfer.OutOperateRiderTable, assettransfer.OutOperateRiderColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetTransferClient) Hooks() []Hook {
	hooks := c.hooks.AssetTransfer
	return append(hooks[:len(hooks):len(hooks)], assettransfer.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetTransferClient) Interceptors() []Interceptor {
	return c.inters.AssetTransfer
}

func (c *AssetTransferClient) mutate(ctx context.Context, m *AssetTransferMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetTransferCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetTransferUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetTransferDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetTransfer mutation op: %q", m.Op())
	}
}

// AssetTransferDetailsClient is a client for the AssetTransferDetails schema.
type AssetTransferDetailsClient struct {
	config
}

// NewAssetTransferDetailsClient returns a client for the AssetTransferDetails from the given config.
func NewAssetTransferDetailsClient(c config) *AssetTransferDetailsClient {
	return &AssetTransferDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assettransferdetails.Hooks(f(g(h())))`.
func (c *AssetTransferDetailsClient) Use(hooks ...Hook) {
	c.hooks.AssetTransferDetails = append(c.hooks.AssetTransferDetails, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assettransferdetails.Intercept(f(g(h())))`.
func (c *AssetTransferDetailsClient) Intercept(interceptors ...Interceptor) {
	c.inters.AssetTransferDetails = append(c.inters.AssetTransferDetails, interceptors...)
}

// Create returns a builder for creating a AssetTransferDetails entity.
func (c *AssetTransferDetailsClient) Create() *AssetTransferDetailsCreate {
	mutation := newAssetTransferDetailsMutation(c.config, OpCreate)
	return &AssetTransferDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AssetTransferDetails entities.
func (c *AssetTransferDetailsClient) CreateBulk(builders ...*AssetTransferDetailsCreate) *AssetTransferDetailsCreateBulk {
	return &AssetTransferDetailsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssetTransferDetailsClient) MapCreateBulk(slice any, setFunc func(*AssetTransferDetailsCreate, int)) *AssetTransferDetailsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssetTransferDetailsCreateBulk{err: fmt.Errorf("calling to AssetTransferDetailsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssetTransferDetailsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssetTransferDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AssetTransferDetails.
func (c *AssetTransferDetailsClient) Update() *AssetTransferDetailsUpdate {
	mutation := newAssetTransferDetailsMutation(c.config, OpUpdate)
	return &AssetTransferDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetTransferDetailsClient) UpdateOne(atd *AssetTransferDetails) *AssetTransferDetailsUpdateOne {
	mutation := newAssetTransferDetailsMutation(c.config, OpUpdateOne, withAssetTransferDetails(atd))
	return &AssetTransferDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetTransferDetailsClient) UpdateOneID(id uint64) *AssetTransferDetailsUpdateOne {
	mutation := newAssetTransferDetailsMutation(c.config, OpUpdateOne, withAssetTransferDetailsID(id))
	return &AssetTransferDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AssetTransferDetails.
func (c *AssetTransferDetailsClient) Delete() *AssetTransferDetailsDelete {
	mutation := newAssetTransferDetailsMutation(c.config, OpDelete)
	return &AssetTransferDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssetTransferDetailsClient) DeleteOne(atd *AssetTransferDetails) *AssetTransferDetailsDeleteOne {
	return c.DeleteOneID(atd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssetTransferDetailsClient) DeleteOneID(id uint64) *AssetTransferDetailsDeleteOne {
	builder := c.Delete().Where(assettransferdetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetTransferDetailsDeleteOne{builder}
}

// Query returns a query builder for AssetTransferDetails.
func (c *AssetTransferDetailsClient) Query() *AssetTransferDetailsQuery {
	return &AssetTransferDetailsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssetTransferDetails},
		inters: c.Interceptors(),
	}
}

// Get returns a AssetTransferDetails entity by its id.
func (c *AssetTransferDetailsClient) Get(ctx context.Context, id uint64) (*AssetTransferDetails, error) {
	return c.Query().Where(assettransferdetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetTransferDetailsClient) GetX(ctx context.Context, id uint64) *AssetTransferDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransfer queries the transfer edge of a AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryTransfer(atd *AssetTransferDetails) *AssetTransferQuery {
	query := (&AssetTransferClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := atd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, id),
			sqlgraph.To(assettransfer.Table, assettransfer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assettransferdetails.TransferTable, assettransferdetails.TransferColumn),
		)
		fromV = sqlgraph.Neighbors(atd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInOperateManager queries the in_operate_manager edge of a AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryInOperateManager(atd *AssetTransferDetails) *AssetManagerQuery {
	query := (&AssetManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := atd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, id),
			sqlgraph.To(assetmanager.Table, assetmanager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateManagerTable, assettransferdetails.InOperateManagerColumn),
		)
		fromV = sqlgraph.Neighbors(atd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInOperateStore queries the in_operate_store edge of a AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryInOperateStore(atd *AssetTransferDetails) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := atd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateStoreTable, assettransferdetails.InOperateStoreColumn),
		)
		fromV = sqlgraph.Neighbors(atd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInOperateAgent queries the in_operate_agent edge of a AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryInOperateAgent(atd *AssetTransferDetails) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := atd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateAgentTable, assettransferdetails.InOperateAgentColumn),
		)
		fromV = sqlgraph.Neighbors(atd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInOperateMaintainer queries the in_operate_maintainer edge of a AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryInOperateMaintainer(atd *AssetTransferDetails) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := atd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateMaintainerTable, assettransferdetails.InOperateMaintainerColumn),
		)
		fromV = sqlgraph.Neighbors(atd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInOperateCabinet queries the in_operate_cabinet edge of a AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryInOperateCabinet(atd *AssetTransferDetails) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := atd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateCabinetTable, assettransferdetails.InOperateCabinetColumn),
		)
		fromV = sqlgraph.Neighbors(atd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInOperateRider queries the in_operate_rider edge of a AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryInOperateRider(atd *AssetTransferDetails) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := atd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateRiderTable, assettransferdetails.InOperateRiderColumn),
		)
		fromV = sqlgraph.Neighbors(atd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAsset queries the asset edge of a AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryAsset(atd *AssetTransferDetails) *AssetQuery {
	query := (&AssetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := atd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assettransferdetails.AssetTable, assettransferdetails.AssetColumn),
		)
		fromV = sqlgraph.Neighbors(atd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetTransferDetailsClient) Hooks() []Hook {
	hooks := c.hooks.AssetTransferDetails
	return append(hooks[:len(hooks):len(hooks)], assettransferdetails.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssetTransferDetailsClient) Interceptors() []Interceptor {
	return c.inters.AssetTransferDetails
}

func (c *AssetTransferDetailsClient) mutate(ctx context.Context, m *AssetTransferDetailsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssetTransferDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssetTransferDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssetTransferDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssetTransferDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AssetTransferDetails mutation op: %q", m.Op())
	}
}

// AssistanceClient is a client for the Assistance schema.
type AssistanceClient struct {
	config
}

// NewAssistanceClient returns a client for the Assistance from the given config.
func NewAssistanceClient(c config) *AssistanceClient {
	return &AssistanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `assistance.Hooks(f(g(h())))`.
func (c *AssistanceClient) Use(hooks ...Hook) {
	c.hooks.Assistance = append(c.hooks.Assistance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `assistance.Intercept(f(g(h())))`.
func (c *AssistanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Assistance = append(c.inters.Assistance, interceptors...)
}

// Create returns a builder for creating a Assistance entity.
func (c *AssistanceClient) Create() *AssistanceCreate {
	mutation := newAssistanceMutation(c.config, OpCreate)
	return &AssistanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Assistance entities.
func (c *AssistanceClient) CreateBulk(builders ...*AssistanceCreate) *AssistanceCreateBulk {
	return &AssistanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AssistanceClient) MapCreateBulk(slice any, setFunc func(*AssistanceCreate, int)) *AssistanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AssistanceCreateBulk{err: fmt.Errorf("calling to AssistanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AssistanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AssistanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Assistance.
func (c *AssistanceClient) Update() *AssistanceUpdate {
	mutation := newAssistanceMutation(c.config, OpUpdate)
	return &AssistanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssistanceClient) UpdateOne(a *Assistance) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistance(a))
	return &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssistanceClient) UpdateOneID(id uint64) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistanceID(id))
	return &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Assistance.
func (c *AssistanceClient) Delete() *AssistanceDelete {
	mutation := newAssistanceMutation(c.config, OpDelete)
	return &AssistanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AssistanceClient) DeleteOne(a *Assistance) *AssistanceDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AssistanceClient) DeleteOneID(id uint64) *AssistanceDeleteOne {
	builder := c.Delete().Where(assistance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssistanceDeleteOne{builder}
}

// Query returns a query builder for Assistance.
func (c *AssistanceClient) Query() *AssistanceQuery {
	return &AssistanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAssistance},
		inters: c.Interceptors(),
	}
}

// Get returns a Assistance entity by its id.
func (c *AssistanceClient) Get(ctx context.Context, id uint64) (*Assistance, error) {
	return c.Query().Where(assistance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssistanceClient) GetX(ctx context.Context, id uint64) *Assistance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStore queries the store edge of a Assistance.
func (c *AssistanceClient) QueryStore(a *Assistance) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.StoreTable, assistance.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Assistance.
func (c *AssistanceClient) QueryRider(a *Assistance) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.RiderTable, assistance.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Assistance.
func (c *AssistanceClient) QuerySubscribe(a *Assistance) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.SubscribeTable, assistance.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Assistance.
func (c *AssistanceClient) QueryCity(a *Assistance) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.CityTable, assistance.CityColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a Assistance.
func (c *AssistanceClient) QueryOrder(a *Assistance) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, assistance.OrderTable, assistance.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Assistance.
func (c *AssistanceClient) QueryEmployee(a *Assistance) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assistance.EmployeeTable, assistance.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssistanceClient) Hooks() []Hook {
	hooks := c.hooks.Assistance
	return append(hooks[:len(hooks):len(hooks)], assistance.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AssistanceClient) Interceptors() []Interceptor {
	return c.inters.Assistance
}

func (c *AssistanceClient) mutate(ctx context.Context, m *AssistanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AssistanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AssistanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AssistanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Assistance mutation op: %q", m.Op())
	}
}

// AttendanceClient is a client for the Attendance schema.
type AttendanceClient struct {
	config
}

// NewAttendanceClient returns a client for the Attendance from the given config.
func NewAttendanceClient(c config) *AttendanceClient {
	return &AttendanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attendance.Hooks(f(g(h())))`.
func (c *AttendanceClient) Use(hooks ...Hook) {
	c.hooks.Attendance = append(c.hooks.Attendance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attendance.Intercept(f(g(h())))`.
func (c *AttendanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Attendance = append(c.inters.Attendance, interceptors...)
}

// Create returns a builder for creating a Attendance entity.
func (c *AttendanceClient) Create() *AttendanceCreate {
	mutation := newAttendanceMutation(c.config, OpCreate)
	return &AttendanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attendance entities.
func (c *AttendanceClient) CreateBulk(builders ...*AttendanceCreate) *AttendanceCreateBulk {
	return &AttendanceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttendanceClient) MapCreateBulk(slice any, setFunc func(*AttendanceCreate, int)) *AttendanceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttendanceCreateBulk{err: fmt.Errorf("calling to AttendanceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttendanceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttendanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attendance.
func (c *AttendanceClient) Update() *AttendanceUpdate {
	mutation := newAttendanceMutation(c.config, OpUpdate)
	return &AttendanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttendanceClient) UpdateOne(a *Attendance) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendance(a))
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttendanceClient) UpdateOneID(id uint64) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendanceID(id))
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attendance.
func (c *AttendanceClient) Delete() *AttendanceDelete {
	mutation := newAttendanceMutation(c.config, OpDelete)
	return &AttendanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttendanceClient) DeleteOne(a *Attendance) *AttendanceDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttendanceClient) DeleteOneID(id uint64) *AttendanceDeleteOne {
	builder := c.Delete().Where(attendance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttendanceDeleteOne{builder}
}

// Query returns a query builder for Attendance.
func (c *AttendanceClient) Query() *AttendanceQuery {
	return &AttendanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttendance},
		inters: c.Interceptors(),
	}
}

// Get returns a Attendance entity by its id.
func (c *AttendanceClient) Get(ctx context.Context, id uint64) (*Attendance, error) {
	return c.Query().Where(attendance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttendanceClient) GetX(ctx context.Context, id uint64) *Attendance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStore queries the store edge of a Attendance.
func (c *AttendanceClient) QueryStore(a *Attendance) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attendance.Table, attendance.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attendance.StoreTable, attendance.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Attendance.
func (c *AttendanceClient) QueryEmployee(a *Attendance) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attendance.Table, attendance.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attendance.EmployeeTable, attendance.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttendanceClient) Hooks() []Hook {
	hooks := c.hooks.Attendance
	return append(hooks[:len(hooks):len(hooks)], attendance.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *AttendanceClient) Interceptors() []Interceptor {
	return c.inters.Attendance
}

func (c *AttendanceClient) mutate(ctx context.Context, m *AttendanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttendanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttendanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttendanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Attendance mutation op: %q", m.Op())
	}
}

// BatteryClient is a client for the Battery schema.
type BatteryClient struct {
	config
}

// NewBatteryClient returns a client for the Battery from the given config.
func NewBatteryClient(c config) *BatteryClient {
	return &BatteryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `battery.Hooks(f(g(h())))`.
func (c *BatteryClient) Use(hooks ...Hook) {
	c.hooks.Battery = append(c.hooks.Battery, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `battery.Intercept(f(g(h())))`.
func (c *BatteryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Battery = append(c.inters.Battery, interceptors...)
}

// Create returns a builder for creating a Battery entity.
func (c *BatteryClient) Create() *BatteryCreate {
	mutation := newBatteryMutation(c.config, OpCreate)
	return &BatteryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Battery entities.
func (c *BatteryClient) CreateBulk(builders ...*BatteryCreate) *BatteryCreateBulk {
	return &BatteryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BatteryClient) MapCreateBulk(slice any, setFunc func(*BatteryCreate, int)) *BatteryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BatteryCreateBulk{err: fmt.Errorf("calling to BatteryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BatteryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BatteryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Battery.
func (c *BatteryClient) Update() *BatteryUpdate {
	mutation := newBatteryMutation(c.config, OpUpdate)
	return &BatteryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BatteryClient) UpdateOne(b *Battery) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBattery(b))
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BatteryClient) UpdateOneID(id uint64) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBatteryID(id))
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Battery.
func (c *BatteryClient) Delete() *BatteryDelete {
	mutation := newBatteryMutation(c.config, OpDelete)
	return &BatteryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BatteryClient) DeleteOne(b *Battery) *BatteryDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BatteryClient) DeleteOneID(id uint64) *BatteryDeleteOne {
	builder := c.Delete().Where(battery.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BatteryDeleteOne{builder}
}

// Query returns a query builder for Battery.
func (c *BatteryClient) Query() *BatteryQuery {
	return &BatteryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBattery},
		inters: c.Interceptors(),
	}
}

// Get returns a Battery entity by its id.
func (c *BatteryClient) Get(ctx context.Context, id uint64) (*Battery, error) {
	return c.Query().Where(battery.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BatteryClient) GetX(ctx context.Context, id uint64) *Battery {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Battery.
func (c *BatteryClient) QueryCity(b *Battery) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, battery.CityTable, battery.CityColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Battery.
func (c *BatteryClient) QueryRider(b *Battery) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, battery.RiderTable, battery.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Battery.
func (c *BatteryClient) QueryCabinet(b *Battery) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.CabinetTable, battery.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Battery.
func (c *BatteryClient) QuerySubscribe(b *Battery) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, battery.SubscribeTable, battery.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Battery.
func (c *BatteryClient) QueryEnterprise(b *Battery) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.EnterpriseTable, battery.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlows queries the flows edge of a Battery.
func (c *BatteryClient) QueryFlows(b *Battery) *BatteryFlowQuery {
	query := (&BatteryFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(batteryflow.Table, batteryflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, battery.FlowsTable, battery.FlowsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Battery.
func (c *BatteryClient) QueryStation(b *Battery) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.StationTable, battery.StationColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BatteryClient) Hooks() []Hook {
	hooks := c.hooks.Battery
	return append(hooks[:len(hooks):len(hooks)], battery.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BatteryClient) Interceptors() []Interceptor {
	return c.inters.Battery
}

func (c *BatteryClient) mutate(ctx context.Context, m *BatteryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BatteryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BatteryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BatteryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Battery mutation op: %q", m.Op())
	}
}

// BatteryFlowClient is a client for the BatteryFlow schema.
type BatteryFlowClient struct {
	config
}

// NewBatteryFlowClient returns a client for the BatteryFlow from the given config.
func NewBatteryFlowClient(c config) *BatteryFlowClient {
	return &BatteryFlowClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `batteryflow.Hooks(f(g(h())))`.
func (c *BatteryFlowClient) Use(hooks ...Hook) {
	c.hooks.BatteryFlow = append(c.hooks.BatteryFlow, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `batteryflow.Intercept(f(g(h())))`.
func (c *BatteryFlowClient) Intercept(interceptors ...Interceptor) {
	c.inters.BatteryFlow = append(c.inters.BatteryFlow, interceptors...)
}

// Create returns a builder for creating a BatteryFlow entity.
func (c *BatteryFlowClient) Create() *BatteryFlowCreate {
	mutation := newBatteryFlowMutation(c.config, OpCreate)
	return &BatteryFlowCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BatteryFlow entities.
func (c *BatteryFlowClient) CreateBulk(builders ...*BatteryFlowCreate) *BatteryFlowCreateBulk {
	return &BatteryFlowCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BatteryFlowClient) MapCreateBulk(slice any, setFunc func(*BatteryFlowCreate, int)) *BatteryFlowCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BatteryFlowCreateBulk{err: fmt.Errorf("calling to BatteryFlowClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BatteryFlowCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BatteryFlowCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BatteryFlow.
func (c *BatteryFlowClient) Update() *BatteryFlowUpdate {
	mutation := newBatteryFlowMutation(c.config, OpUpdate)
	return &BatteryFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BatteryFlowClient) UpdateOne(bf *BatteryFlow) *BatteryFlowUpdateOne {
	mutation := newBatteryFlowMutation(c.config, OpUpdateOne, withBatteryFlow(bf))
	return &BatteryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BatteryFlowClient) UpdateOneID(id uint64) *BatteryFlowUpdateOne {
	mutation := newBatteryFlowMutation(c.config, OpUpdateOne, withBatteryFlowID(id))
	return &BatteryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BatteryFlow.
func (c *BatteryFlowClient) Delete() *BatteryFlowDelete {
	mutation := newBatteryFlowMutation(c.config, OpDelete)
	return &BatteryFlowDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BatteryFlowClient) DeleteOne(bf *BatteryFlow) *BatteryFlowDeleteOne {
	return c.DeleteOneID(bf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BatteryFlowClient) DeleteOneID(id uint64) *BatteryFlowDeleteOne {
	builder := c.Delete().Where(batteryflow.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BatteryFlowDeleteOne{builder}
}

// Query returns a query builder for BatteryFlow.
func (c *BatteryFlowClient) Query() *BatteryFlowQuery {
	return &BatteryFlowQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBatteryFlow},
		inters: c.Interceptors(),
	}
}

// Get returns a BatteryFlow entity by its id.
func (c *BatteryFlowClient) Get(ctx context.Context, id uint64) (*BatteryFlow, error) {
	return c.Query().Where(batteryflow.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BatteryFlowClient) GetX(ctx context.Context, id uint64) *BatteryFlow {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribe queries the subscribe edge of a BatteryFlow.
func (c *BatteryFlowClient) QuerySubscribe(bf *BatteryFlow) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, batteryflow.SubscribeTable, batteryflow.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(bf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a BatteryFlow.
func (c *BatteryFlowClient) QueryBattery(bf *BatteryFlow) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, batteryflow.BatteryTable, batteryflow.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(bf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a BatteryFlow.
func (c *BatteryFlowClient) QueryCabinet(bf *BatteryFlow) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, batteryflow.CabinetTable, batteryflow.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(bf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a BatteryFlow.
func (c *BatteryFlowClient) QueryRider(bf *BatteryFlow) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batteryflow.Table, batteryflow.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, batteryflow.RiderTable, batteryflow.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(bf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BatteryFlowClient) Hooks() []Hook {
	return c.hooks.BatteryFlow
}

// Interceptors returns the client interceptors.
func (c *BatteryFlowClient) Interceptors() []Interceptor {
	return c.inters.BatteryFlow
}

func (c *BatteryFlowClient) mutate(ctx context.Context, m *BatteryFlowMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BatteryFlowCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BatteryFlowUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BatteryFlowUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BatteryFlowDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BatteryFlow mutation op: %q", m.Op())
	}
}

// BatteryModelClient is a client for the BatteryModel schema.
type BatteryModelClient struct {
	config
}

// NewBatteryModelClient returns a client for the BatteryModel from the given config.
func NewBatteryModelClient(c config) *BatteryModelClient {
	return &BatteryModelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `batterymodel.Hooks(f(g(h())))`.
func (c *BatteryModelClient) Use(hooks ...Hook) {
	c.hooks.BatteryModel = append(c.hooks.BatteryModel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `batterymodel.Intercept(f(g(h())))`.
func (c *BatteryModelClient) Intercept(interceptors ...Interceptor) {
	c.inters.BatteryModel = append(c.inters.BatteryModel, interceptors...)
}

// Create returns a builder for creating a BatteryModel entity.
func (c *BatteryModelClient) Create() *BatteryModelCreate {
	mutation := newBatteryModelMutation(c.config, OpCreate)
	return &BatteryModelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BatteryModel entities.
func (c *BatteryModelClient) CreateBulk(builders ...*BatteryModelCreate) *BatteryModelCreateBulk {
	return &BatteryModelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BatteryModelClient) MapCreateBulk(slice any, setFunc func(*BatteryModelCreate, int)) *BatteryModelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BatteryModelCreateBulk{err: fmt.Errorf("calling to BatteryModelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BatteryModelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BatteryModelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BatteryModel.
func (c *BatteryModelClient) Update() *BatteryModelUpdate {
	mutation := newBatteryModelMutation(c.config, OpUpdate)
	return &BatteryModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BatteryModelClient) UpdateOne(bm *BatteryModel) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModel(bm))
	return &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BatteryModelClient) UpdateOneID(id uint64) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModelID(id))
	return &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BatteryModel.
func (c *BatteryModelClient) Delete() *BatteryModelDelete {
	mutation := newBatteryModelMutation(c.config, OpDelete)
	return &BatteryModelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BatteryModelClient) DeleteOne(bm *BatteryModel) *BatteryModelDeleteOne {
	return c.DeleteOneID(bm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BatteryModelClient) DeleteOneID(id uint64) *BatteryModelDeleteOne {
	builder := c.Delete().Where(batterymodel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BatteryModelDeleteOne{builder}
}

// Query returns a query builder for BatteryModel.
func (c *BatteryModelClient) Query() *BatteryModelQuery {
	return &BatteryModelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBatteryModel},
		inters: c.Interceptors(),
	}
}

// Get returns a BatteryModel entity by its id.
func (c *BatteryModelClient) Get(ctx context.Context, id uint64) (*BatteryModel, error) {
	return c.Query().Where(batterymodel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BatteryModelClient) GetX(ctx context.Context, id uint64) *BatteryModel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCabinets queries the cabinets edge of a BatteryModel.
func (c *BatteryModelClient) QueryCabinets(bm *BatteryModel) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(batterymodel.Table, batterymodel.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, batterymodel.CabinetsTable, batterymodel.CabinetsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(bm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BatteryModelClient) Hooks() []Hook {
	return c.hooks.BatteryModel
}

// Interceptors returns the client interceptors.
func (c *BatteryModelClient) Interceptors() []Interceptor {
	return c.inters.BatteryModel
}

func (c *BatteryModelClient) mutate(ctx context.Context, m *BatteryModelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BatteryModelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BatteryModelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BatteryModelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BatteryModel mutation op: %q", m.Op())
	}
}

// BranchClient is a client for the Branch schema.
type BranchClient struct {
	config
}

// NewBranchClient returns a client for the Branch from the given config.
func NewBranchClient(c config) *BranchClient {
	return &BranchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branch.Hooks(f(g(h())))`.
func (c *BranchClient) Use(hooks ...Hook) {
	c.hooks.Branch = append(c.hooks.Branch, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `branch.Intercept(f(g(h())))`.
func (c *BranchClient) Intercept(interceptors ...Interceptor) {
	c.inters.Branch = append(c.inters.Branch, interceptors...)
}

// Create returns a builder for creating a Branch entity.
func (c *BranchClient) Create() *BranchCreate {
	mutation := newBranchMutation(c.config, OpCreate)
	return &BranchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Branch entities.
func (c *BranchClient) CreateBulk(builders ...*BranchCreate) *BranchCreateBulk {
	return &BranchCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BranchClient) MapCreateBulk(slice any, setFunc func(*BranchCreate, int)) *BranchCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BranchCreateBulk{err: fmt.Errorf("calling to BranchClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BranchCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BranchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Branch.
func (c *BranchClient) Update() *BranchUpdate {
	mutation := newBranchMutation(c.config, OpUpdate)
	return &BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchClient) UpdateOne(b *Branch) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(b))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchClient) UpdateOneID(id uint64) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranchID(id))
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Branch.
func (c *BranchClient) Delete() *BranchDelete {
	mutation := newBranchMutation(c.config, OpDelete)
	return &BranchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BranchClient) DeleteOne(b *Branch) *BranchDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BranchClient) DeleteOneID(id uint64) *BranchDeleteOne {
	builder := c.Delete().Where(branch.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchDeleteOne{builder}
}

// Query returns a query builder for Branch.
func (c *BranchClient) Query() *BranchQuery {
	return &BranchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBranch},
		inters: c.Interceptors(),
	}
}

// Get returns a Branch entity by its id.
func (c *BranchClient) Get(ctx context.Context, id uint64) (*Branch, error) {
	return c.Query().Where(branch.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchClient) GetX(ctx context.Context, id uint64) *Branch {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Branch.
func (c *BranchClient) QueryCity(b *Branch) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, branch.CityTable, branch.CityColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContracts queries the contracts edge of a Branch.
func (c *BranchClient) QueryContracts(b *Branch) *BranchContractQuery {
	query := (&BranchContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(branchcontract.Table, branchcontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.ContractsTable, branch.ContractsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinets queries the cabinets edge of a Branch.
func (c *BranchClient) QueryCabinets(b *Branch) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.CabinetsTable, branch.CabinetsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFaults queries the faults edge of a Branch.
func (c *BranchClient) QueryFaults(b *Branch) *CabinetFaultQuery {
	query := (&CabinetFaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(cabinetfault.Table, cabinetfault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.FaultsTable, branch.FaultsColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStores queries the stores edge of a Branch.
func (c *BranchClient) QueryStores(b *Branch) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.StoresTable, branch.StoresColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BranchClient) Hooks() []Hook {
	hooks := c.hooks.Branch
	return append(hooks[:len(hooks):len(hooks)], branch.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BranchClient) Interceptors() []Interceptor {
	return c.inters.Branch
}

func (c *BranchClient) mutate(ctx context.Context, m *BranchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BranchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BranchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Branch mutation op: %q", m.Op())
	}
}

// BranchContractClient is a client for the BranchContract schema.
type BranchContractClient struct {
	config
}

// NewBranchContractClient returns a client for the BranchContract from the given config.
func NewBranchContractClient(c config) *BranchContractClient {
	return &BranchContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `branchcontract.Hooks(f(g(h())))`.
func (c *BranchContractClient) Use(hooks ...Hook) {
	c.hooks.BranchContract = append(c.hooks.BranchContract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `branchcontract.Intercept(f(g(h())))`.
func (c *BranchContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.BranchContract = append(c.inters.BranchContract, interceptors...)
}

// Create returns a builder for creating a BranchContract entity.
func (c *BranchContractClient) Create() *BranchContractCreate {
	mutation := newBranchContractMutation(c.config, OpCreate)
	return &BranchContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BranchContract entities.
func (c *BranchContractClient) CreateBulk(builders ...*BranchContractCreate) *BranchContractCreateBulk {
	return &BranchContractCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BranchContractClient) MapCreateBulk(slice any, setFunc func(*BranchContractCreate, int)) *BranchContractCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BranchContractCreateBulk{err: fmt.Errorf("calling to BranchContractClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BranchContractCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BranchContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BranchContract.
func (c *BranchContractClient) Update() *BranchContractUpdate {
	mutation := newBranchContractMutation(c.config, OpUpdate)
	return &BranchContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BranchContractClient) UpdateOne(bc *BranchContract) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContract(bc))
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BranchContractClient) UpdateOneID(id uint64) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContractID(id))
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BranchContract.
func (c *BranchContractClient) Delete() *BranchContractDelete {
	mutation := newBranchContractMutation(c.config, OpDelete)
	return &BranchContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BranchContractClient) DeleteOne(bc *BranchContract) *BranchContractDeleteOne {
	return c.DeleteOneID(bc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BranchContractClient) DeleteOneID(id uint64) *BranchContractDeleteOne {
	builder := c.Delete().Where(branchcontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BranchContractDeleteOne{builder}
}

// Query returns a query builder for BranchContract.
func (c *BranchContractClient) Query() *BranchContractQuery {
	return &BranchContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBranchContract},
		inters: c.Interceptors(),
	}
}

// Get returns a BranchContract entity by its id.
func (c *BranchContractClient) Get(ctx context.Context, id uint64) (*BranchContract, error) {
	return c.Query().Where(branchcontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BranchContractClient) GetX(ctx context.Context, id uint64) *BranchContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBranch queries the branch edge of a BranchContract.
func (c *BranchContractClient) QueryBranch(bc *BranchContract) *BranchQuery {
	query := (&BranchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := bc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(branchcontract.Table, branchcontract.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, branchcontract.BranchTable, branchcontract.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(bc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BranchContractClient) Hooks() []Hook {
	hooks := c.hooks.BranchContract
	return append(hooks[:len(hooks):len(hooks)], branchcontract.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BranchContractClient) Interceptors() []Interceptor {
	return c.inters.BranchContract
}

func (c *BranchContractClient) mutate(ctx context.Context, m *BranchContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BranchContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BranchContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BranchContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BranchContract mutation op: %q", m.Op())
	}
}

// BusinessClient is a client for the Business schema.
type BusinessClient struct {
	config
}

// NewBusinessClient returns a client for the Business from the given config.
func NewBusinessClient(c config) *BusinessClient {
	return &BusinessClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `business.Hooks(f(g(h())))`.
func (c *BusinessClient) Use(hooks ...Hook) {
	c.hooks.Business = append(c.hooks.Business, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `business.Intercept(f(g(h())))`.
func (c *BusinessClient) Intercept(interceptors ...Interceptor) {
	c.inters.Business = append(c.inters.Business, interceptors...)
}

// Create returns a builder for creating a Business entity.
func (c *BusinessClient) Create() *BusinessCreate {
	mutation := newBusinessMutation(c.config, OpCreate)
	return &BusinessCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Business entities.
func (c *BusinessClient) CreateBulk(builders ...*BusinessCreate) *BusinessCreateBulk {
	return &BusinessCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BusinessClient) MapCreateBulk(slice any, setFunc func(*BusinessCreate, int)) *BusinessCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BusinessCreateBulk{err: fmt.Errorf("calling to BusinessClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BusinessCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BusinessCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Business.
func (c *BusinessClient) Update() *BusinessUpdate {
	mutation := newBusinessMutation(c.config, OpUpdate)
	return &BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BusinessClient) UpdateOne(b *Business) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusiness(b))
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BusinessClient) UpdateOneID(id uint64) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusinessID(id))
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Business.
func (c *BusinessClient) Delete() *BusinessDelete {
	mutation := newBusinessMutation(c.config, OpDelete)
	return &BusinessDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BusinessClient) DeleteOne(b *Business) *BusinessDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BusinessClient) DeleteOneID(id uint64) *BusinessDeleteOne {
	builder := c.Delete().Where(business.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BusinessDeleteOne{builder}
}

// Query returns a query builder for Business.
func (c *BusinessClient) Query() *BusinessQuery {
	return &BusinessQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBusiness},
		inters: c.Interceptors(),
	}
}

// Get returns a Business entity by its id.
func (c *BusinessClient) Get(ctx context.Context, id uint64) (*Business, error) {
	return c.Query().Where(business.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BusinessClient) GetX(ctx context.Context, id uint64) *Business {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Business.
func (c *BusinessClient) QueryRider(b *Business) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.RiderTable, business.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Business.
func (c *BusinessClient) QueryCity(b *Business) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.CityTable, business.CityColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Business.
func (c *BusinessClient) QuerySubscribe(b *Business) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.SubscribeTable, business.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Business.
func (c *BusinessClient) QueryEmployee(b *Business) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.EmployeeTable, business.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Business.
func (c *BusinessClient) QueryStore(b *Business) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.StoreTable, business.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a Business.
func (c *BusinessClient) QueryPlan(b *Business) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.PlanTable, business.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Business.
func (c *BusinessClient) QueryEnterprise(b *Business) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.EnterpriseTable, business.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Business.
func (c *BusinessClient) QueryStation(b *Business) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.StationTable, business.StationColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Business.
func (c *BusinessClient) QueryCabinet(b *Business) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.CabinetTable, business.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Business.
func (c *BusinessClient) QueryBattery(b *Business) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.BatteryTable, business.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Business.
func (c *BusinessClient) QueryAgent(b *Business) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.AgentTable, business.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRtoEbike queries the rto_ebike edge of a Business.
func (c *BusinessClient) QueryRtoEbike(b *Business) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(business.Table, business.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, business.RtoEbikeTable, business.RtoEbikeColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BusinessClient) Hooks() []Hook {
	hooks := c.hooks.Business
	return append(hooks[:len(hooks):len(hooks)], business.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *BusinessClient) Interceptors() []Interceptor {
	return c.inters.Business
}

func (c *BusinessClient) mutate(ctx context.Context, m *BusinessMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BusinessCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BusinessDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Business mutation op: %q", m.Op())
	}
}

// CabinetClient is a client for the Cabinet schema.
type CabinetClient struct {
	config
}

// NewCabinetClient returns a client for the Cabinet from the given config.
func NewCabinetClient(c config) *CabinetClient {
	return &CabinetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cabinet.Hooks(f(g(h())))`.
func (c *CabinetClient) Use(hooks ...Hook) {
	c.hooks.Cabinet = append(c.hooks.Cabinet, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cabinet.Intercept(f(g(h())))`.
func (c *CabinetClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cabinet = append(c.inters.Cabinet, interceptors...)
}

// Create returns a builder for creating a Cabinet entity.
func (c *CabinetClient) Create() *CabinetCreate {
	mutation := newCabinetMutation(c.config, OpCreate)
	return &CabinetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cabinet entities.
func (c *CabinetClient) CreateBulk(builders ...*CabinetCreate) *CabinetCreateBulk {
	return &CabinetCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CabinetClient) MapCreateBulk(slice any, setFunc func(*CabinetCreate, int)) *CabinetCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CabinetCreateBulk{err: fmt.Errorf("calling to CabinetClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CabinetCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CabinetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cabinet.
func (c *CabinetClient) Update() *CabinetUpdate {
	mutation := newCabinetMutation(c.config, OpUpdate)
	return &CabinetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CabinetClient) UpdateOne(ca *Cabinet) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinet(ca))
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CabinetClient) UpdateOneID(id uint64) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinetID(id))
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cabinet.
func (c *CabinetClient) Delete() *CabinetDelete {
	mutation := newCabinetMutation(c.config, OpDelete)
	return &CabinetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CabinetClient) DeleteOne(ca *Cabinet) *CabinetDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CabinetClient) DeleteOneID(id uint64) *CabinetDeleteOne {
	builder := c.Delete().Where(cabinet.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CabinetDeleteOne{builder}
}

// Query returns a query builder for Cabinet.
func (c *CabinetClient) Query() *CabinetQuery {
	return &CabinetQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCabinet},
		inters: c.Interceptors(),
	}
}

// Get returns a Cabinet entity by its id.
func (c *CabinetClient) Get(ctx context.Context, id uint64) (*Cabinet, error) {
	return c.Query().Where(cabinet.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CabinetClient) GetX(ctx context.Context, id uint64) *Cabinet {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Cabinet.
func (c *CabinetClient) QueryCity(ca *Cabinet) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cabinet.CityTable, cabinet.CityColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Cabinet.
func (c *CabinetClient) QueryStore(ca *Cabinet) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cabinet.StoreTable, cabinet.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBranch queries the branch edge of a Cabinet.
func (c *CabinetClient) QueryBranch(ca *Cabinet) *BranchQuery {
	query := (&BranchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinet.BranchTable, cabinet.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryModels queries the models edge of a Cabinet.
func (c *CabinetClient) QueryModels(ca *Cabinet) *BatteryModelQuery {
	query := (&BatteryModelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(batterymodel.Table, batterymodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cabinet.ModelsTable, cabinet.ModelsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFaults queries the faults edge of a Cabinet.
func (c *CabinetClient) QueryFaults(ca *Cabinet) *CabinetFaultQuery {
	query := (&CabinetFaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(cabinetfault.Table, cabinetfault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.FaultsTable, cabinet.FaultsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExchanges queries the exchanges edge of a Cabinet.
func (c *CabinetClient) QueryExchanges(ca *Cabinet) *ExchangeQuery {
	query := (&ExchangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.ExchangesTable, cabinet.ExchangesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Cabinet.
func (c *CabinetClient) QueryStocks(ca *Cabinet) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.StocksTable, cabinet.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteries queries the batteries edge of a Cabinet.
func (c *CabinetClient) QueryBatteries(ca *Cabinet) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.BatteriesTable, cabinet.BatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteryFlows queries the battery_flows edge of a Cabinet.
func (c *CabinetClient) QueryBatteryFlows(ca *Cabinet) *BatteryFlowQuery {
	query := (&BatteryFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(batteryflow.Table, batteryflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cabinet.BatteryFlowsTable, cabinet.BatteryFlowsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Cabinet.
func (c *CabinetClient) QueryStation(ca *Cabinet) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinet.StationTable, cabinet.StationColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Cabinet.
func (c *CabinetClient) QueryEnterprise(ca *Cabinet) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinet.Table, cabinet.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinet.EnterpriseTable, cabinet.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CabinetClient) Hooks() []Hook {
	hooks := c.hooks.Cabinet
	return append(hooks[:len(hooks):len(hooks)], cabinet.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CabinetClient) Interceptors() []Interceptor {
	return c.inters.Cabinet
}

func (c *CabinetClient) mutate(ctx context.Context, m *CabinetMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CabinetCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CabinetUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CabinetDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cabinet mutation op: %q", m.Op())
	}
}

// CabinetEcClient is a client for the CabinetEc schema.
type CabinetEcClient struct {
	config
}

// NewCabinetEcClient returns a client for the CabinetEc from the given config.
func NewCabinetEcClient(c config) *CabinetEcClient {
	return &CabinetEcClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cabinetec.Hooks(f(g(h())))`.
func (c *CabinetEcClient) Use(hooks ...Hook) {
	c.hooks.CabinetEc = append(c.hooks.CabinetEc, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cabinetec.Intercept(f(g(h())))`.
func (c *CabinetEcClient) Intercept(interceptors ...Interceptor) {
	c.inters.CabinetEc = append(c.inters.CabinetEc, interceptors...)
}

// Create returns a builder for creating a CabinetEc entity.
func (c *CabinetEcClient) Create() *CabinetEcCreate {
	mutation := newCabinetEcMutation(c.config, OpCreate)
	return &CabinetEcCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CabinetEc entities.
func (c *CabinetEcClient) CreateBulk(builders ...*CabinetEcCreate) *CabinetEcCreateBulk {
	return &CabinetEcCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CabinetEcClient) MapCreateBulk(slice any, setFunc func(*CabinetEcCreate, int)) *CabinetEcCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CabinetEcCreateBulk{err: fmt.Errorf("calling to CabinetEcClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CabinetEcCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CabinetEcCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CabinetEc.
func (c *CabinetEcClient) Update() *CabinetEcUpdate {
	mutation := newCabinetEcMutation(c.config, OpUpdate)
	return &CabinetEcUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CabinetEcClient) UpdateOne(ce *CabinetEc) *CabinetEcUpdateOne {
	mutation := newCabinetEcMutation(c.config, OpUpdateOne, withCabinetEc(ce))
	return &CabinetEcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CabinetEcClient) UpdateOneID(id uint64) *CabinetEcUpdateOne {
	mutation := newCabinetEcMutation(c.config, OpUpdateOne, withCabinetEcID(id))
	return &CabinetEcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CabinetEc.
func (c *CabinetEcClient) Delete() *CabinetEcDelete {
	mutation := newCabinetEcMutation(c.config, OpDelete)
	return &CabinetEcDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CabinetEcClient) DeleteOne(ce *CabinetEc) *CabinetEcDeleteOne {
	return c.DeleteOneID(ce.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CabinetEcClient) DeleteOneID(id uint64) *CabinetEcDeleteOne {
	builder := c.Delete().Where(cabinetec.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CabinetEcDeleteOne{builder}
}

// Query returns a query builder for CabinetEc.
func (c *CabinetEcClient) Query() *CabinetEcQuery {
	return &CabinetEcQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCabinetEc},
		inters: c.Interceptors(),
	}
}

// Get returns a CabinetEc entity by its id.
func (c *CabinetEcClient) Get(ctx context.Context, id uint64) (*CabinetEc, error) {
	return c.Query().Where(cabinetec.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CabinetEcClient) GetX(ctx context.Context, id uint64) *CabinetEc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCabinet queries the cabinet edge of a CabinetEc.
func (c *CabinetEcClient) QueryCabinet(ce *CabinetEc) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ce.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetec.Table, cabinetec.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cabinetec.CabinetTable, cabinetec.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(ce.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CabinetEcClient) Hooks() []Hook {
	return c.hooks.CabinetEc
}

// Interceptors returns the client interceptors.
func (c *CabinetEcClient) Interceptors() []Interceptor {
	return c.inters.CabinetEc
}

func (c *CabinetEcClient) mutate(ctx context.Context, m *CabinetEcMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CabinetEcCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CabinetEcUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CabinetEcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CabinetEcDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CabinetEc mutation op: %q", m.Op())
	}
}

// CabinetFaultClient is a client for the CabinetFault schema.
type CabinetFaultClient struct {
	config
}

// NewCabinetFaultClient returns a client for the CabinetFault from the given config.
func NewCabinetFaultClient(c config) *CabinetFaultClient {
	return &CabinetFaultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cabinetfault.Hooks(f(g(h())))`.
func (c *CabinetFaultClient) Use(hooks ...Hook) {
	c.hooks.CabinetFault = append(c.hooks.CabinetFault, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cabinetfault.Intercept(f(g(h())))`.
func (c *CabinetFaultClient) Intercept(interceptors ...Interceptor) {
	c.inters.CabinetFault = append(c.inters.CabinetFault, interceptors...)
}

// Create returns a builder for creating a CabinetFault entity.
func (c *CabinetFaultClient) Create() *CabinetFaultCreate {
	mutation := newCabinetFaultMutation(c.config, OpCreate)
	return &CabinetFaultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CabinetFault entities.
func (c *CabinetFaultClient) CreateBulk(builders ...*CabinetFaultCreate) *CabinetFaultCreateBulk {
	return &CabinetFaultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CabinetFaultClient) MapCreateBulk(slice any, setFunc func(*CabinetFaultCreate, int)) *CabinetFaultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CabinetFaultCreateBulk{err: fmt.Errorf("calling to CabinetFaultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CabinetFaultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CabinetFaultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CabinetFault.
func (c *CabinetFaultClient) Update() *CabinetFaultUpdate {
	mutation := newCabinetFaultMutation(c.config, OpUpdate)
	return &CabinetFaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CabinetFaultClient) UpdateOne(cf *CabinetFault) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFault(cf))
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CabinetFaultClient) UpdateOneID(id uint64) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFaultID(id))
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CabinetFault.
func (c *CabinetFaultClient) Delete() *CabinetFaultDelete {
	mutation := newCabinetFaultMutation(c.config, OpDelete)
	return &CabinetFaultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CabinetFaultClient) DeleteOne(cf *CabinetFault) *CabinetFaultDeleteOne {
	return c.DeleteOneID(cf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CabinetFaultClient) DeleteOneID(id uint64) *CabinetFaultDeleteOne {
	builder := c.Delete().Where(cabinetfault.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CabinetFaultDeleteOne{builder}
}

// Query returns a query builder for CabinetFault.
func (c *CabinetFaultClient) Query() *CabinetFaultQuery {
	return &CabinetFaultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCabinetFault},
		inters: c.Interceptors(),
	}
}

// Get returns a CabinetFault entity by its id.
func (c *CabinetFaultClient) Get(ctx context.Context, id uint64) (*CabinetFault, error) {
	return c.Query().Where(cabinetfault.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CabinetFaultClient) GetX(ctx context.Context, id uint64) *CabinetFault {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a CabinetFault.
func (c *CabinetFaultClient) QueryCity(cf *CabinetFault) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cabinetfault.CityTable, cabinetfault.CityColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBranch queries the branch edge of a CabinetFault.
func (c *CabinetFaultClient) QueryBranch(cf *CabinetFault) *BranchQuery {
	query := (&BranchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.BranchTable, cabinetfault.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a CabinetFault.
func (c *CabinetFaultClient) QueryCabinet(cf *CabinetFault) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.CabinetTable, cabinetfault.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a CabinetFault.
func (c *CabinetFaultClient) QueryRider(cf *CabinetFault) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.RiderTable, cabinetfault.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(cf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CabinetFaultClient) Hooks() []Hook {
	hooks := c.hooks.CabinetFault
	return append(hooks[:len(hooks):len(hooks)], cabinetfault.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CabinetFaultClient) Interceptors() []Interceptor {
	return c.inters.CabinetFault
}

func (c *CabinetFaultClient) mutate(ctx context.Context, m *CabinetFaultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CabinetFaultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CabinetFaultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CabinetFaultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CabinetFault mutation op: %q", m.Op())
	}
}

// CityClient is a client for the City schema.
type CityClient struct {
	config
}

// NewCityClient returns a client for the City from the given config.
func NewCityClient(c config) *CityClient {
	return &CityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `city.Hooks(f(g(h())))`.
func (c *CityClient) Use(hooks ...Hook) {
	c.hooks.City = append(c.hooks.City, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `city.Intercept(f(g(h())))`.
func (c *CityClient) Intercept(interceptors ...Interceptor) {
	c.inters.City = append(c.inters.City, interceptors...)
}

// Create returns a builder for creating a City entity.
func (c *CityClient) Create() *CityCreate {
	mutation := newCityMutation(c.config, OpCreate)
	return &CityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of City entities.
func (c *CityClient) CreateBulk(builders ...*CityCreate) *CityCreateBulk {
	return &CityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CityClient) MapCreateBulk(slice any, setFunc func(*CityCreate, int)) *CityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CityCreateBulk{err: fmt.Errorf("calling to CityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for City.
func (c *CityClient) Update() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CityClient) UpdateOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CityClient) UpdateOneID(id uint64) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for City.
func (c *CityClient) Delete() *CityDelete {
	mutation := newCityMutation(c.config, OpDelete)
	return &CityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CityClient) DeleteOne(ci *City) *CityDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CityClient) DeleteOneID(id uint64) *CityDeleteOne {
	builder := c.Delete().Where(city.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CityDeleteOne{builder}
}

// Query returns a query builder for City.
func (c *CityClient) Query() *CityQuery {
	return &CityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCity},
		inters: c.Interceptors(),
	}
}

// Get returns a City entity by its id.
func (c *CityClient) Get(ctx context.Context, id uint64) (*City, error) {
	return c.Query().Where(city.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CityClient) GetX(ctx context.Context, id uint64) *City {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a City.
func (c *CityClient) QueryParent(ci *City) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, city.ParentTable, city.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a City.
func (c *CityClient) QueryChildren(ci *City) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, city.ChildrenTable, city.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlans queries the plans edge of a City.
func (c *CityClient) QueryPlans(ci *City) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, city.PlansTable, city.PlansPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMaintainers queries the maintainers edge of a City.
func (c *CityClient) QueryMaintainers(ci *City) *MaintainerQuery {
	query := (&MaintainerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(city.Table, city.FieldID, id),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, city.MaintainersTable, city.MaintainersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CityClient) Hooks() []Hook {
	hooks := c.hooks.City
	return append(hooks[:len(hooks):len(hooks)], city.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CityClient) Interceptors() []Interceptor {
	return c.inters.City
}

func (c *CityClient) mutate(ctx context.Context, m *CityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown City mutation op: %q", m.Op())
	}
}

// CommissionClient is a client for the Commission schema.
type CommissionClient struct {
	config
}

// NewCommissionClient returns a client for the Commission from the given config.
func NewCommissionClient(c config) *CommissionClient {
	return &CommissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `commission.Hooks(f(g(h())))`.
func (c *CommissionClient) Use(hooks ...Hook) {
	c.hooks.Commission = append(c.hooks.Commission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `commission.Intercept(f(g(h())))`.
func (c *CommissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Commission = append(c.inters.Commission, interceptors...)
}

// Create returns a builder for creating a Commission entity.
func (c *CommissionClient) Create() *CommissionCreate {
	mutation := newCommissionMutation(c.config, OpCreate)
	return &CommissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Commission entities.
func (c *CommissionClient) CreateBulk(builders ...*CommissionCreate) *CommissionCreateBulk {
	return &CommissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CommissionClient) MapCreateBulk(slice any, setFunc func(*CommissionCreate, int)) *CommissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CommissionCreateBulk{err: fmt.Errorf("calling to CommissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CommissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CommissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Commission.
func (c *CommissionClient) Update() *CommissionUpdate {
	mutation := newCommissionMutation(c.config, OpUpdate)
	return &CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommissionClient) UpdateOne(co *Commission) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(co))
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommissionClient) UpdateOneID(id uint64) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommissionID(id))
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Commission.
func (c *CommissionClient) Delete() *CommissionDelete {
	mutation := newCommissionMutation(c.config, OpDelete)
	return &CommissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CommissionClient) DeleteOne(co *Commission) *CommissionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CommissionClient) DeleteOneID(id uint64) *CommissionDeleteOne {
	builder := c.Delete().Where(commission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommissionDeleteOne{builder}
}

// Query returns a query builder for Commission.
func (c *CommissionClient) Query() *CommissionQuery {
	return &CommissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCommission},
		inters: c.Interceptors(),
	}
}

// Get returns a Commission entity by its id.
func (c *CommissionClient) Get(ctx context.Context, id uint64) (*Commission, error) {
	return c.Query().Where(commission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommissionClient) GetX(ctx context.Context, id uint64) *Commission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBusiness queries the business edge of a Commission.
func (c *CommissionClient) QueryBusiness(co *Commission) *BusinessQuery {
	query := (&BusinessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commission.BusinessTable, commission.BusinessColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Commission.
func (c *CommissionClient) QuerySubscribe(co *Commission) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commission.SubscribeTable, commission.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a Commission.
func (c *CommissionClient) QueryPlan(co *Commission) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commission.PlanTable, commission.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Commission.
func (c *CommissionClient) QueryRider(co *Commission) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, commission.RiderTable, commission.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a Commission.
func (c *CommissionClient) QueryOrder(co *Commission) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, commission.OrderTable, commission.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Commission.
func (c *CommissionClient) QueryEmployee(co *Commission) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(commission.Table, commission.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, commission.EmployeeTable, commission.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommissionClient) Hooks() []Hook {
	hooks := c.hooks.Commission
	return append(hooks[:len(hooks):len(hooks)], commission.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CommissionClient) Interceptors() []Interceptor {
	return c.inters.Commission
}

func (c *CommissionClient) mutate(ctx context.Context, m *CommissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CommissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CommissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Commission mutation op: %q", m.Op())
	}
}

// ContractClient is a client for the Contract schema.
type ContractClient struct {
	config
}

// NewContractClient returns a client for the Contract from the given config.
func NewContractClient(c config) *ContractClient {
	return &ContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contract.Hooks(f(g(h())))`.
func (c *ContractClient) Use(hooks ...Hook) {
	c.hooks.Contract = append(c.hooks.Contract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contract.Intercept(f(g(h())))`.
func (c *ContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.Contract = append(c.inters.Contract, interceptors...)
}

// Create returns a builder for creating a Contract entity.
func (c *ContractClient) Create() *ContractCreate {
	mutation := newContractMutation(c.config, OpCreate)
	return &ContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Contract entities.
func (c *ContractClient) CreateBulk(builders ...*ContractCreate) *ContractCreateBulk {
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContractClient) MapCreateBulk(slice any, setFunc func(*ContractCreate, int)) *ContractCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContractCreateBulk{err: fmt.Errorf("calling to ContractClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContractCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Contract.
func (c *ContractClient) Update() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractClient) UpdateOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractClient) UpdateOneID(id uint64) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Contract.
func (c *ContractClient) Delete() *ContractDelete {
	mutation := newContractMutation(c.config, OpDelete)
	return &ContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContractClient) DeleteOne(co *Contract) *ContractDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContractClient) DeleteOneID(id uint64) *ContractDeleteOne {
	builder := c.Delete().Where(contract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractDeleteOne{builder}
}

// Query returns a query builder for Contract.
func (c *ContractClient) Query() *ContractQuery {
	return &ContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContract},
		inters: c.Interceptors(),
	}
}

// Get returns a Contract entity by its id.
func (c *ContractClient) Get(ctx context.Context, id uint64) (*Contract, error) {
	return c.Query().Where(contract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractClient) GetX(ctx context.Context, id uint64) *Contract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribe queries the subscribe edge of a Contract.
func (c *ContractClient) QuerySubscribe(co *Contract) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contract.SubscribeTable, contract.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Contract.
func (c *ContractClient) QueryEmployee(co *Contract) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, contract.EmployeeTable, contract.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Contract.
func (c *ContractClient) QueryRider(co *Contract) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, contract.RiderTable, contract.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllocate queries the allocate edge of a Contract.
func (c *ContractClient) QueryAllocate(co *Contract) *AllocateQuery {
	query := (&AllocateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(contract.Table, contract.FieldID, id),
			sqlgraph.To(allocate.Table, allocate.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, contract.AllocateTable, contract.AllocateColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ContractClient) Hooks() []Hook {
	hooks := c.hooks.Contract
	return append(hooks[:len(hooks):len(hooks)], contract.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ContractClient) Interceptors() []Interceptor {
	return c.inters.Contract
}

func (c *ContractClient) mutate(ctx context.Context, m *ContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Contract mutation op: %q", m.Op())
	}
}

// ContractTemplateClient is a client for the ContractTemplate schema.
type ContractTemplateClient struct {
	config
}

// NewContractTemplateClient returns a client for the ContractTemplate from the given config.
func NewContractTemplateClient(c config) *ContractTemplateClient {
	return &ContractTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `contracttemplate.Hooks(f(g(h())))`.
func (c *ContractTemplateClient) Use(hooks ...Hook) {
	c.hooks.ContractTemplate = append(c.hooks.ContractTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `contracttemplate.Intercept(f(g(h())))`.
func (c *ContractTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.ContractTemplate = append(c.inters.ContractTemplate, interceptors...)
}

// Create returns a builder for creating a ContractTemplate entity.
func (c *ContractTemplateClient) Create() *ContractTemplateCreate {
	mutation := newContractTemplateMutation(c.config, OpCreate)
	return &ContractTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ContractTemplate entities.
func (c *ContractTemplateClient) CreateBulk(builders ...*ContractTemplateCreate) *ContractTemplateCreateBulk {
	return &ContractTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ContractTemplateClient) MapCreateBulk(slice any, setFunc func(*ContractTemplateCreate, int)) *ContractTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ContractTemplateCreateBulk{err: fmt.Errorf("calling to ContractTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ContractTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ContractTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ContractTemplate.
func (c *ContractTemplateClient) Update() *ContractTemplateUpdate {
	mutation := newContractTemplateMutation(c.config, OpUpdate)
	return &ContractTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ContractTemplateClient) UpdateOne(ct *ContractTemplate) *ContractTemplateUpdateOne {
	mutation := newContractTemplateMutation(c.config, OpUpdateOne, withContractTemplate(ct))
	return &ContractTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ContractTemplateClient) UpdateOneID(id uint64) *ContractTemplateUpdateOne {
	mutation := newContractTemplateMutation(c.config, OpUpdateOne, withContractTemplateID(id))
	return &ContractTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ContractTemplate.
func (c *ContractTemplateClient) Delete() *ContractTemplateDelete {
	mutation := newContractTemplateMutation(c.config, OpDelete)
	return &ContractTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ContractTemplateClient) DeleteOne(ct *ContractTemplate) *ContractTemplateDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ContractTemplateClient) DeleteOneID(id uint64) *ContractTemplateDeleteOne {
	builder := c.Delete().Where(contracttemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ContractTemplateDeleteOne{builder}
}

// Query returns a query builder for ContractTemplate.
func (c *ContractTemplateClient) Query() *ContractTemplateQuery {
	return &ContractTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeContractTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a ContractTemplate entity by its id.
func (c *ContractTemplateClient) Get(ctx context.Context, id uint64) (*ContractTemplate, error) {
	return c.Query().Where(contracttemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ContractTemplateClient) GetX(ctx context.Context, id uint64) *ContractTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ContractTemplateClient) Hooks() []Hook {
	hooks := c.hooks.ContractTemplate
	return append(hooks[:len(hooks):len(hooks)], contracttemplate.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ContractTemplateClient) Interceptors() []Interceptor {
	return c.inters.ContractTemplate
}

func (c *ContractTemplateClient) mutate(ctx context.Context, m *ContractTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ContractTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ContractTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ContractTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ContractTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ContractTemplate mutation op: %q", m.Op())
	}
}

// CouponClient is a client for the Coupon schema.
type CouponClient struct {
	config
}

// NewCouponClient returns a client for the Coupon from the given config.
func NewCouponClient(c config) *CouponClient {
	return &CouponClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupon.Hooks(f(g(h())))`.
func (c *CouponClient) Use(hooks ...Hook) {
	c.hooks.Coupon = append(c.hooks.Coupon, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coupon.Intercept(f(g(h())))`.
func (c *CouponClient) Intercept(interceptors ...Interceptor) {
	c.inters.Coupon = append(c.inters.Coupon, interceptors...)
}

// Create returns a builder for creating a Coupon entity.
func (c *CouponClient) Create() *CouponCreate {
	mutation := newCouponMutation(c.config, OpCreate)
	return &CouponCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coupon entities.
func (c *CouponClient) CreateBulk(builders ...*CouponCreate) *CouponCreateBulk {
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CouponClient) MapCreateBulk(slice any, setFunc func(*CouponCreate, int)) *CouponCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CouponCreateBulk{err: fmt.Errorf("calling to CouponClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CouponCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CouponCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coupon.
func (c *CouponClient) Update() *CouponUpdate {
	mutation := newCouponMutation(c.config, OpUpdate)
	return &CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponClient) UpdateOne(co *Coupon) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCoupon(co))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponClient) UpdateOneID(id uint64) *CouponUpdateOne {
	mutation := newCouponMutation(c.config, OpUpdateOne, withCouponID(id))
	return &CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coupon.
func (c *CouponClient) Delete() *CouponDelete {
	mutation := newCouponMutation(c.config, OpDelete)
	return &CouponDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponClient) DeleteOne(co *Coupon) *CouponDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CouponClient) DeleteOneID(id uint64) *CouponDeleteOne {
	builder := c.Delete().Where(coupon.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponDeleteOne{builder}
}

// Query returns a query builder for Coupon.
func (c *CouponClient) Query() *CouponQuery {
	return &CouponQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCoupon},
		inters: c.Interceptors(),
	}
}

// Get returns a Coupon entity by its id.
func (c *CouponClient) Get(ctx context.Context, id uint64) (*Coupon, error) {
	return c.Query().Where(coupon.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponClient) GetX(ctx context.Context, id uint64) *Coupon {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a Coupon.
func (c *CouponClient) QueryRider(co *Coupon) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.RiderTable, coupon.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssembly queries the assembly edge of a Coupon.
func (c *CouponClient) QueryAssembly(co *Coupon) *CouponAssemblyQuery {
	query := (&CouponAssemblyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(couponassembly.Table, couponassembly.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.AssemblyTable, coupon.AssemblyColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a Coupon.
func (c *CouponClient) QueryPlan(co *Coupon) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.PlanTable, coupon.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTemplate queries the template edge of a Coupon.
func (c *CouponClient) QueryTemplate(co *Coupon) *CouponTemplateQuery {
	query := (&CouponTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(coupontemplate.Table, coupontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coupon.TemplateTable, coupon.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a Coupon.
func (c *CouponClient) QueryOrder(co *Coupon) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coupon.OrderTable, coupon.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponClient) Hooks() []Hook {
	hooks := c.hooks.Coupon
	return append(hooks[:len(hooks):len(hooks)], coupon.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CouponClient) Interceptors() []Interceptor {
	return c.inters.Coupon
}

func (c *CouponClient) mutate(ctx context.Context, m *CouponMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CouponCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CouponUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CouponUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CouponDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Coupon mutation op: %q", m.Op())
	}
}

// CouponAssemblyClient is a client for the CouponAssembly schema.
type CouponAssemblyClient struct {
	config
}

// NewCouponAssemblyClient returns a client for the CouponAssembly from the given config.
func NewCouponAssemblyClient(c config) *CouponAssemblyClient {
	return &CouponAssemblyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `couponassembly.Hooks(f(g(h())))`.
func (c *CouponAssemblyClient) Use(hooks ...Hook) {
	c.hooks.CouponAssembly = append(c.hooks.CouponAssembly, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `couponassembly.Intercept(f(g(h())))`.
func (c *CouponAssemblyClient) Intercept(interceptors ...Interceptor) {
	c.inters.CouponAssembly = append(c.inters.CouponAssembly, interceptors...)
}

// Create returns a builder for creating a CouponAssembly entity.
func (c *CouponAssemblyClient) Create() *CouponAssemblyCreate {
	mutation := newCouponAssemblyMutation(c.config, OpCreate)
	return &CouponAssemblyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponAssembly entities.
func (c *CouponAssemblyClient) CreateBulk(builders ...*CouponAssemblyCreate) *CouponAssemblyCreateBulk {
	return &CouponAssemblyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CouponAssemblyClient) MapCreateBulk(slice any, setFunc func(*CouponAssemblyCreate, int)) *CouponAssemblyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CouponAssemblyCreateBulk{err: fmt.Errorf("calling to CouponAssemblyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CouponAssemblyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CouponAssemblyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponAssembly.
func (c *CouponAssemblyClient) Update() *CouponAssemblyUpdate {
	mutation := newCouponAssemblyMutation(c.config, OpUpdate)
	return &CouponAssemblyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponAssemblyClient) UpdateOne(ca *CouponAssembly) *CouponAssemblyUpdateOne {
	mutation := newCouponAssemblyMutation(c.config, OpUpdateOne, withCouponAssembly(ca))
	return &CouponAssemblyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponAssemblyClient) UpdateOneID(id uint64) *CouponAssemblyUpdateOne {
	mutation := newCouponAssemblyMutation(c.config, OpUpdateOne, withCouponAssemblyID(id))
	return &CouponAssemblyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponAssembly.
func (c *CouponAssemblyClient) Delete() *CouponAssemblyDelete {
	mutation := newCouponAssemblyMutation(c.config, OpDelete)
	return &CouponAssemblyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponAssemblyClient) DeleteOne(ca *CouponAssembly) *CouponAssemblyDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CouponAssemblyClient) DeleteOneID(id uint64) *CouponAssemblyDeleteOne {
	builder := c.Delete().Where(couponassembly.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponAssemblyDeleteOne{builder}
}

// Query returns a query builder for CouponAssembly.
func (c *CouponAssemblyClient) Query() *CouponAssemblyQuery {
	return &CouponAssemblyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCouponAssembly},
		inters: c.Interceptors(),
	}
}

// Get returns a CouponAssembly entity by its id.
func (c *CouponAssemblyClient) Get(ctx context.Context, id uint64) (*CouponAssembly, error) {
	return c.Query().Where(couponassembly.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponAssemblyClient) GetX(ctx context.Context, id uint64) *CouponAssembly {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTemplate queries the template edge of a CouponAssembly.
func (c *CouponAssemblyClient) QueryTemplate(ca *CouponAssembly) *CouponTemplateQuery {
	query := (&CouponTemplateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(couponassembly.Table, couponassembly.FieldID, id),
			sqlgraph.To(coupontemplate.Table, coupontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, couponassembly.TemplateTable, couponassembly.TemplateColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponAssemblyClient) Hooks() []Hook {
	hooks := c.hooks.CouponAssembly
	return append(hooks[:len(hooks):len(hooks)], couponassembly.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CouponAssemblyClient) Interceptors() []Interceptor {
	return c.inters.CouponAssembly
}

func (c *CouponAssemblyClient) mutate(ctx context.Context, m *CouponAssemblyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CouponAssemblyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CouponAssemblyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CouponAssemblyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CouponAssemblyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CouponAssembly mutation op: %q", m.Op())
	}
}

// CouponTemplateClient is a client for the CouponTemplate schema.
type CouponTemplateClient struct {
	config
}

// NewCouponTemplateClient returns a client for the CouponTemplate from the given config.
func NewCouponTemplateClient(c config) *CouponTemplateClient {
	return &CouponTemplateClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coupontemplate.Hooks(f(g(h())))`.
func (c *CouponTemplateClient) Use(hooks ...Hook) {
	c.hooks.CouponTemplate = append(c.hooks.CouponTemplate, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `coupontemplate.Intercept(f(g(h())))`.
func (c *CouponTemplateClient) Intercept(interceptors ...Interceptor) {
	c.inters.CouponTemplate = append(c.inters.CouponTemplate, interceptors...)
}

// Create returns a builder for creating a CouponTemplate entity.
func (c *CouponTemplateClient) Create() *CouponTemplateCreate {
	mutation := newCouponTemplateMutation(c.config, OpCreate)
	return &CouponTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CouponTemplate entities.
func (c *CouponTemplateClient) CreateBulk(builders ...*CouponTemplateCreate) *CouponTemplateCreateBulk {
	return &CouponTemplateCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CouponTemplateClient) MapCreateBulk(slice any, setFunc func(*CouponTemplateCreate, int)) *CouponTemplateCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CouponTemplateCreateBulk{err: fmt.Errorf("calling to CouponTemplateClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CouponTemplateCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CouponTemplateCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CouponTemplate.
func (c *CouponTemplateClient) Update() *CouponTemplateUpdate {
	mutation := newCouponTemplateMutation(c.config, OpUpdate)
	return &CouponTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CouponTemplateClient) UpdateOne(ct *CouponTemplate) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplate(ct))
	return &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CouponTemplateClient) UpdateOneID(id uint64) *CouponTemplateUpdateOne {
	mutation := newCouponTemplateMutation(c.config, OpUpdateOne, withCouponTemplateID(id))
	return &CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CouponTemplate.
func (c *CouponTemplateClient) Delete() *CouponTemplateDelete {
	mutation := newCouponTemplateMutation(c.config, OpDelete)
	return &CouponTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CouponTemplateClient) DeleteOne(ct *CouponTemplate) *CouponTemplateDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CouponTemplateClient) DeleteOneID(id uint64) *CouponTemplateDeleteOne {
	builder := c.Delete().Where(coupontemplate.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CouponTemplateDeleteOne{builder}
}

// Query returns a query builder for CouponTemplate.
func (c *CouponTemplateClient) Query() *CouponTemplateQuery {
	return &CouponTemplateQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCouponTemplate},
		inters: c.Interceptors(),
	}
}

// Get returns a CouponTemplate entity by its id.
func (c *CouponTemplateClient) Get(ctx context.Context, id uint64) (*CouponTemplate, error) {
	return c.Query().Where(coupontemplate.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CouponTemplateClient) GetX(ctx context.Context, id uint64) *CouponTemplate {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCoupons queries the coupons edge of a CouponTemplate.
func (c *CouponTemplateClient) QueryCoupons(ct *CouponTemplate) *CouponQuery {
	query := (&CouponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ct.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(coupontemplate.Table, coupontemplate.FieldID, id),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, coupontemplate.CouponsTable, coupontemplate.CouponsColumn),
		)
		fromV = sqlgraph.Neighbors(ct.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CouponTemplateClient) Hooks() []Hook {
	hooks := c.hooks.CouponTemplate
	return append(hooks[:len(hooks):len(hooks)], coupontemplate.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *CouponTemplateClient) Interceptors() []Interceptor {
	return c.inters.CouponTemplate
}

func (c *CouponTemplateClient) mutate(ctx context.Context, m *CouponTemplateMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CouponTemplateCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CouponTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CouponTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CouponTemplateDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CouponTemplate mutation op: %q", m.Op())
	}
}

// EbikeClient is a client for the Ebike schema.
type EbikeClient struct {
	config
}

// NewEbikeClient returns a client for the Ebike from the given config.
func NewEbikeClient(c config) *EbikeClient {
	return &EbikeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ebike.Hooks(f(g(h())))`.
func (c *EbikeClient) Use(hooks ...Hook) {
	c.hooks.Ebike = append(c.hooks.Ebike, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ebike.Intercept(f(g(h())))`.
func (c *EbikeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ebike = append(c.inters.Ebike, interceptors...)
}

// Create returns a builder for creating a Ebike entity.
func (c *EbikeClient) Create() *EbikeCreate {
	mutation := newEbikeMutation(c.config, OpCreate)
	return &EbikeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ebike entities.
func (c *EbikeClient) CreateBulk(builders ...*EbikeCreate) *EbikeCreateBulk {
	return &EbikeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EbikeClient) MapCreateBulk(slice any, setFunc func(*EbikeCreate, int)) *EbikeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EbikeCreateBulk{err: fmt.Errorf("calling to EbikeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EbikeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EbikeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ebike.
func (c *EbikeClient) Update() *EbikeUpdate {
	mutation := newEbikeMutation(c.config, OpUpdate)
	return &EbikeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EbikeClient) UpdateOne(e *Ebike) *EbikeUpdateOne {
	mutation := newEbikeMutation(c.config, OpUpdateOne, withEbike(e))
	return &EbikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EbikeClient) UpdateOneID(id uint64) *EbikeUpdateOne {
	mutation := newEbikeMutation(c.config, OpUpdateOne, withEbikeID(id))
	return &EbikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ebike.
func (c *EbikeClient) Delete() *EbikeDelete {
	mutation := newEbikeMutation(c.config, OpDelete)
	return &EbikeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EbikeClient) DeleteOne(e *Ebike) *EbikeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EbikeClient) DeleteOneID(id uint64) *EbikeDeleteOne {
	builder := c.Delete().Where(ebike.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EbikeDeleteOne{builder}
}

// Query returns a query builder for Ebike.
func (c *EbikeClient) Query() *EbikeQuery {
	return &EbikeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEbike},
		inters: c.Interceptors(),
	}
}

// Get returns a Ebike entity by its id.
func (c *EbikeClient) Get(ctx context.Context, id uint64) (*Ebike, error) {
	return c.Query().Where(ebike.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EbikeClient) GetX(ctx context.Context, id uint64) *Ebike {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a Ebike.
func (c *EbikeClient) QueryBrand(e *Ebike) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.BrandTable, ebike.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Ebike.
func (c *EbikeClient) QueryRider(e *Ebike) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.RiderTable, ebike.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Ebike.
func (c *EbikeClient) QueryStore(e *Ebike) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.StoreTable, ebike.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Ebike.
func (c *EbikeClient) QueryEnterprise(e *Ebike) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.EnterpriseTable, ebike.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Ebike.
func (c *EbikeClient) QueryStation(e *Ebike) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.StationTable, ebike.StationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAllocates queries the allocates edge of a Ebike.
func (c *EbikeClient) QueryAllocates(e *Ebike) *AllocateQuery {
	query := (&AllocateClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(allocate.Table, allocate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ebike.AllocatesTable, ebike.AllocatesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRtoRider queries the rto_rider edge of a Ebike.
func (c *EbikeClient) QueryRtoRider(e *Ebike) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.RtoRiderTable, ebike.RtoRiderColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EbikeClient) Hooks() []Hook {
	hooks := c.hooks.Ebike
	return append(hooks[:len(hooks):len(hooks)], ebike.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EbikeClient) Interceptors() []Interceptor {
	return c.inters.Ebike
}

func (c *EbikeClient) mutate(ctx context.Context, m *EbikeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EbikeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EbikeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EbikeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EbikeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ebike mutation op: %q", m.Op())
	}
}

// EbikeBrandClient is a client for the EbikeBrand schema.
type EbikeBrandClient struct {
	config
}

// NewEbikeBrandClient returns a client for the EbikeBrand from the given config.
func NewEbikeBrandClient(c config) *EbikeBrandClient {
	return &EbikeBrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ebikebrand.Hooks(f(g(h())))`.
func (c *EbikeBrandClient) Use(hooks ...Hook) {
	c.hooks.EbikeBrand = append(c.hooks.EbikeBrand, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ebikebrand.Intercept(f(g(h())))`.
func (c *EbikeBrandClient) Intercept(interceptors ...Interceptor) {
	c.inters.EbikeBrand = append(c.inters.EbikeBrand, interceptors...)
}

// Create returns a builder for creating a EbikeBrand entity.
func (c *EbikeBrandClient) Create() *EbikeBrandCreate {
	mutation := newEbikeBrandMutation(c.config, OpCreate)
	return &EbikeBrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EbikeBrand entities.
func (c *EbikeBrandClient) CreateBulk(builders ...*EbikeBrandCreate) *EbikeBrandCreateBulk {
	return &EbikeBrandCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EbikeBrandClient) MapCreateBulk(slice any, setFunc func(*EbikeBrandCreate, int)) *EbikeBrandCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EbikeBrandCreateBulk{err: fmt.Errorf("calling to EbikeBrandClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EbikeBrandCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EbikeBrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EbikeBrand.
func (c *EbikeBrandClient) Update() *EbikeBrandUpdate {
	mutation := newEbikeBrandMutation(c.config, OpUpdate)
	return &EbikeBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EbikeBrandClient) UpdateOne(eb *EbikeBrand) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrand(eb))
	return &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EbikeBrandClient) UpdateOneID(id uint64) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrandID(id))
	return &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EbikeBrand.
func (c *EbikeBrandClient) Delete() *EbikeBrandDelete {
	mutation := newEbikeBrandMutation(c.config, OpDelete)
	return &EbikeBrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EbikeBrandClient) DeleteOne(eb *EbikeBrand) *EbikeBrandDeleteOne {
	return c.DeleteOneID(eb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EbikeBrandClient) DeleteOneID(id uint64) *EbikeBrandDeleteOne {
	builder := c.Delete().Where(ebikebrand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EbikeBrandDeleteOne{builder}
}

// Query returns a query builder for EbikeBrand.
func (c *EbikeBrandClient) Query() *EbikeBrandQuery {
	return &EbikeBrandQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEbikeBrand},
		inters: c.Interceptors(),
	}
}

// Get returns a EbikeBrand entity by its id.
func (c *EbikeBrandClient) Get(ctx context.Context, id uint64) (*EbikeBrand, error) {
	return c.Query().Where(ebikebrand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EbikeBrandClient) GetX(ctx context.Context, id uint64) *EbikeBrand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrandAttribute queries the brand_attribute edge of a EbikeBrand.
func (c *EbikeBrandClient) QueryBrandAttribute(eb *EbikeBrand) *EbikeBrandAttributeQuery {
	query := (&EbikeBrandAttributeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikebrand.Table, ebikebrand.FieldID, id),
			sqlgraph.To(ebikebrandattribute.Table, ebikebrandattribute.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ebikebrand.BrandAttributeTable, ebikebrand.BrandAttributeColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlans queries the plans edge of a EbikeBrand.
func (c *EbikeBrandClient) QueryPlans(eb *EbikeBrand) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikebrand.Table, ebikebrand.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ebikebrand.PlansTable, ebikebrand.PlansColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EbikeBrandClient) Hooks() []Hook {
	hooks := c.hooks.EbikeBrand
	return append(hooks[:len(hooks):len(hooks)], ebikebrand.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EbikeBrandClient) Interceptors() []Interceptor {
	return c.inters.EbikeBrand
}

func (c *EbikeBrandClient) mutate(ctx context.Context, m *EbikeBrandMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EbikeBrandCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EbikeBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EbikeBrandDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EbikeBrand mutation op: %q", m.Op())
	}
}

// EbikeBrandAttributeClient is a client for the EbikeBrandAttribute schema.
type EbikeBrandAttributeClient struct {
	config
}

// NewEbikeBrandAttributeClient returns a client for the EbikeBrandAttribute from the given config.
func NewEbikeBrandAttributeClient(c config) *EbikeBrandAttributeClient {
	return &EbikeBrandAttributeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ebikebrandattribute.Hooks(f(g(h())))`.
func (c *EbikeBrandAttributeClient) Use(hooks ...Hook) {
	c.hooks.EbikeBrandAttribute = append(c.hooks.EbikeBrandAttribute, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ebikebrandattribute.Intercept(f(g(h())))`.
func (c *EbikeBrandAttributeClient) Intercept(interceptors ...Interceptor) {
	c.inters.EbikeBrandAttribute = append(c.inters.EbikeBrandAttribute, interceptors...)
}

// Create returns a builder for creating a EbikeBrandAttribute entity.
func (c *EbikeBrandAttributeClient) Create() *EbikeBrandAttributeCreate {
	mutation := newEbikeBrandAttributeMutation(c.config, OpCreate)
	return &EbikeBrandAttributeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EbikeBrandAttribute entities.
func (c *EbikeBrandAttributeClient) CreateBulk(builders ...*EbikeBrandAttributeCreate) *EbikeBrandAttributeCreateBulk {
	return &EbikeBrandAttributeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EbikeBrandAttributeClient) MapCreateBulk(slice any, setFunc func(*EbikeBrandAttributeCreate, int)) *EbikeBrandAttributeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EbikeBrandAttributeCreateBulk{err: fmt.Errorf("calling to EbikeBrandAttributeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EbikeBrandAttributeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EbikeBrandAttributeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EbikeBrandAttribute.
func (c *EbikeBrandAttributeClient) Update() *EbikeBrandAttributeUpdate {
	mutation := newEbikeBrandAttributeMutation(c.config, OpUpdate)
	return &EbikeBrandAttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EbikeBrandAttributeClient) UpdateOne(eba *EbikeBrandAttribute) *EbikeBrandAttributeUpdateOne {
	mutation := newEbikeBrandAttributeMutation(c.config, OpUpdateOne, withEbikeBrandAttribute(eba))
	return &EbikeBrandAttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EbikeBrandAttributeClient) UpdateOneID(id uint64) *EbikeBrandAttributeUpdateOne {
	mutation := newEbikeBrandAttributeMutation(c.config, OpUpdateOne, withEbikeBrandAttributeID(id))
	return &EbikeBrandAttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EbikeBrandAttribute.
func (c *EbikeBrandAttributeClient) Delete() *EbikeBrandAttributeDelete {
	mutation := newEbikeBrandAttributeMutation(c.config, OpDelete)
	return &EbikeBrandAttributeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EbikeBrandAttributeClient) DeleteOne(eba *EbikeBrandAttribute) *EbikeBrandAttributeDeleteOne {
	return c.DeleteOneID(eba.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EbikeBrandAttributeClient) DeleteOneID(id uint64) *EbikeBrandAttributeDeleteOne {
	builder := c.Delete().Where(ebikebrandattribute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EbikeBrandAttributeDeleteOne{builder}
}

// Query returns a query builder for EbikeBrandAttribute.
func (c *EbikeBrandAttributeClient) Query() *EbikeBrandAttributeQuery {
	return &EbikeBrandAttributeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEbikeBrandAttribute},
		inters: c.Interceptors(),
	}
}

// Get returns a EbikeBrandAttribute entity by its id.
func (c *EbikeBrandAttributeClient) Get(ctx context.Context, id uint64) (*EbikeBrandAttribute, error) {
	return c.Query().Where(ebikebrandattribute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EbikeBrandAttributeClient) GetX(ctx context.Context, id uint64) *EbikeBrandAttribute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a EbikeBrandAttribute.
func (c *EbikeBrandAttributeClient) QueryBrand(eba *EbikeBrandAttribute) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eba.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikebrandattribute.Table, ebikebrandattribute.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ebikebrandattribute.BrandTable, ebikebrandattribute.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(eba.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EbikeBrandAttributeClient) Hooks() []Hook {
	hooks := c.hooks.EbikeBrandAttribute
	return append(hooks[:len(hooks):len(hooks)], ebikebrandattribute.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EbikeBrandAttributeClient) Interceptors() []Interceptor {
	return c.inters.EbikeBrandAttribute
}

func (c *EbikeBrandAttributeClient) mutate(ctx context.Context, m *EbikeBrandAttributeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EbikeBrandAttributeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EbikeBrandAttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EbikeBrandAttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EbikeBrandAttributeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EbikeBrandAttribute mutation op: %q", m.Op())
	}
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employee.Intercept(f(g(h())))`.
func (c *EmployeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employee = append(c.inters.Employee, interceptors...)
}

// Create returns a builder for creating a Employee entity.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employee entities.
func (c *EmployeeClient) CreateBulk(builders ...*EmployeeCreate) *EmployeeCreateBulk {
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmployeeClient) MapCreateBulk(slice any, setFunc func(*EmployeeCreate, int)) *EmployeeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmployeeCreateBulk{err: fmt.Errorf("calling to EmployeeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmployeeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id uint64) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeClient) DeleteOneID(id uint64) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Query returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployee},
		inters: c.Interceptors(),
	}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id uint64) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id uint64) *Employee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Employee.
func (c *EmployeeClient) QueryCity(e *Employee) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, employee.CityTable, employee.CityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Employee.
func (c *EmployeeClient) QueryStore(e *Employee) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, employee.StoreTable, employee.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttendances queries the attendances edge of a Employee.
func (c *EmployeeClient) QueryAttendances(e *Employee) *AttendanceQuery {
	query := (&AttendanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.AttendancesTable, employee.AttendancesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Employee.
func (c *EmployeeClient) QueryStocks(e *Employee) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.StocksTable, employee.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExchanges queries the exchanges edge of a Employee.
func (c *EmployeeClient) QueryExchanges(e *Employee) *ExchangeQuery {
	query := (&ExchangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.ExchangesTable, employee.ExchangesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommissions queries the commissions edge of a Employee.
func (c *EmployeeClient) QueryCommissions(e *Employee) *CommissionQuery {
	query := (&CommissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(commission.Table, commission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.CommissionsTable, employee.CommissionsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssistances queries the assistances edge of a Employee.
func (c *EmployeeClient) QueryAssistances(e *Employee) *AssistanceQuery {
	query := (&AssistanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(assistance.Table, assistance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.AssistancesTable, employee.AssistancesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStores queries the stores edge of a Employee.
func (c *EmployeeClient) QueryStores(e *Employee) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, employee.StoresTable, employee.StoresPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	hooks := c.hooks.Employee
	return append(hooks[:len(hooks):len(hooks)], employee.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EmployeeClient) Interceptors() []Interceptor {
	return c.inters.Employee
}

func (c *EmployeeClient) mutate(ctx context.Context, m *EmployeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Employee mutation op: %q", m.Op())
	}
}

// EnterpriseClient is a client for the Enterprise schema.
type EnterpriseClient struct {
	config
}

// NewEnterpriseClient returns a client for the Enterprise from the given config.
func NewEnterpriseClient(c config) *EnterpriseClient {
	return &EnterpriseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprise.Hooks(f(g(h())))`.
func (c *EnterpriseClient) Use(hooks ...Hook) {
	c.hooks.Enterprise = append(c.hooks.Enterprise, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprise.Intercept(f(g(h())))`.
func (c *EnterpriseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Enterprise = append(c.inters.Enterprise, interceptors...)
}

// Create returns a builder for creating a Enterprise entity.
func (c *EnterpriseClient) Create() *EnterpriseCreate {
	mutation := newEnterpriseMutation(c.config, OpCreate)
	return &EnterpriseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Enterprise entities.
func (c *EnterpriseClient) CreateBulk(builders ...*EnterpriseCreate) *EnterpriseCreateBulk {
	return &EnterpriseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnterpriseClient) MapCreateBulk(slice any, setFunc func(*EnterpriseCreate, int)) *EnterpriseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnterpriseCreateBulk{err: fmt.Errorf("calling to EnterpriseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnterpriseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnterpriseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Enterprise.
func (c *EnterpriseClient) Update() *EnterpriseUpdate {
	mutation := newEnterpriseMutation(c.config, OpUpdate)
	return &EnterpriseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseClient) UpdateOne(e *Enterprise) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterprise(e))
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseClient) UpdateOneID(id uint64) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterpriseID(id))
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Enterprise.
func (c *EnterpriseClient) Delete() *EnterpriseDelete {
	mutation := newEnterpriseMutation(c.config, OpDelete)
	return &EnterpriseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseClient) DeleteOne(e *Enterprise) *EnterpriseDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseClient) DeleteOneID(id uint64) *EnterpriseDeleteOne {
	builder := c.Delete().Where(enterprise.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseDeleteOne{builder}
}

// Query returns a query builder for Enterprise.
func (c *EnterpriseClient) Query() *EnterpriseQuery {
	return &EnterpriseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterprise},
		inters: c.Interceptors(),
	}
}

// Get returns a Enterprise entity by its id.
func (c *EnterpriseClient) Get(ctx context.Context, id uint64) (*Enterprise, error) {
	return c.Query().Where(enterprise.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseClient) GetX(ctx context.Context, id uint64) *Enterprise {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Enterprise.
func (c *EnterpriseClient) QueryCity(e *Enterprise) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprise.CityTable, enterprise.CityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRiders queries the riders edge of a Enterprise.
func (c *EnterpriseClient) QueryRiders(e *Enterprise) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.RidersTable, enterprise.RidersColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContracts queries the contracts edge of a Enterprise.
func (c *EnterpriseClient) QueryContracts(e *Enterprise) *EnterpriseContractQuery {
	query := (&EnterpriseContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisecontract.Table, enterprisecontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.ContractsTable, enterprise.ContractsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrices queries the prices edge of a Enterprise.
func (c *EnterpriseClient) QueryPrices(e *Enterprise) *EnterprisePriceQuery {
	query := (&EnterprisePriceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterpriseprice.Table, enterpriseprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.PricesTable, enterprise.PricesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribes queries the subscribes edge of a Enterprise.
func (c *EnterpriseClient) QuerySubscribes(e *Enterprise) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SubscribesTable, enterprise.SubscribesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatements queries the statements edge of a Enterprise.
func (c *EnterpriseClient) QueryStatements(e *Enterprise) *EnterpriseStatementQuery {
	query := (&EnterpriseStatementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisestatement.Table, enterprisestatement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StatementsTable, enterprise.StatementsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStations queries the stations edge of a Enterprise.
func (c *EnterpriseClient) QueryStations(e *Enterprise) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StationsTable, enterprise.StationsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the bills edge of a Enterprise.
func (c *EnterpriseClient) QueryBills(e *Enterprise) *EnterpriseBillQuery {
	query := (&EnterpriseBillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisebill.Table, enterprisebill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.BillsTable, enterprise.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteries queries the batteries edge of a Enterprise.
func (c *EnterpriseClient) QueryBatteries(e *Enterprise) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.BatteriesTable, enterprise.BatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgents queries the agents edge of a Enterprise.
func (c *EnterpriseClient) QueryAgents(e *Enterprise) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.AgentsTable, enterprise.AgentsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinets queries the cabinets edge of a Enterprise.
func (c *EnterpriseClient) QueryCabinets(e *Enterprise) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.CabinetsTable, enterprise.CabinetsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Enterprise.
func (c *EnterpriseClient) QueryStocks(e *Enterprise) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StocksTable, enterprise.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwapPutinBatteries queries the swap_putin_batteries edge of a Enterprise.
func (c *EnterpriseClient) QuerySwapPutinBatteries(e *Enterprise) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SwapPutinBatteriesTable, enterprise.SwapPutinBatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwapPutoutBatteries queries the swap_putout_batteries edge of a Enterprise.
func (c *EnterpriseClient) QuerySwapPutoutBatteries(e *Enterprise) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, id),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SwapPutoutBatteriesTable, enterprise.SwapPutoutBatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseClient) Hooks() []Hook {
	hooks := c.hooks.Enterprise
	return append(hooks[:len(hooks):len(hooks)], enterprise.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseClient) Interceptors() []Interceptor {
	return c.inters.Enterprise
}

func (c *EnterpriseClient) mutate(ctx context.Context, m *EnterpriseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Enterprise mutation op: %q", m.Op())
	}
}

// EnterpriseBatterySwapClient is a client for the EnterpriseBatterySwap schema.
type EnterpriseBatterySwapClient struct {
	config
}

// NewEnterpriseBatterySwapClient returns a client for the EnterpriseBatterySwap from the given config.
func NewEnterpriseBatterySwapClient(c config) *EnterpriseBatterySwapClient {
	return &EnterpriseBatterySwapClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisebatteryswap.Hooks(f(g(h())))`.
func (c *EnterpriseBatterySwapClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseBatterySwap = append(c.hooks.EnterpriseBatterySwap, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisebatteryswap.Intercept(f(g(h())))`.
func (c *EnterpriseBatterySwapClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseBatterySwap = append(c.inters.EnterpriseBatterySwap, interceptors...)
}

// Create returns a builder for creating a EnterpriseBatterySwap entity.
func (c *EnterpriseBatterySwapClient) Create() *EnterpriseBatterySwapCreate {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpCreate)
	return &EnterpriseBatterySwapCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseBatterySwap entities.
func (c *EnterpriseBatterySwapClient) CreateBulk(builders ...*EnterpriseBatterySwapCreate) *EnterpriseBatterySwapCreateBulk {
	return &EnterpriseBatterySwapCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnterpriseBatterySwapClient) MapCreateBulk(slice any, setFunc func(*EnterpriseBatterySwapCreate, int)) *EnterpriseBatterySwapCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnterpriseBatterySwapCreateBulk{err: fmt.Errorf("calling to EnterpriseBatterySwapClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnterpriseBatterySwapCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnterpriseBatterySwapCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) Update() *EnterpriseBatterySwapUpdate {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpUpdate)
	return &EnterpriseBatterySwapUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseBatterySwapClient) UpdateOne(ebs *EnterpriseBatterySwap) *EnterpriseBatterySwapUpdateOne {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpUpdateOne, withEnterpriseBatterySwap(ebs))
	return &EnterpriseBatterySwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseBatterySwapClient) UpdateOneID(id uint64) *EnterpriseBatterySwapUpdateOne {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpUpdateOne, withEnterpriseBatterySwapID(id))
	return &EnterpriseBatterySwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) Delete() *EnterpriseBatterySwapDelete {
	mutation := newEnterpriseBatterySwapMutation(c.config, OpDelete)
	return &EnterpriseBatterySwapDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseBatterySwapClient) DeleteOne(ebs *EnterpriseBatterySwap) *EnterpriseBatterySwapDeleteOne {
	return c.DeleteOneID(ebs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseBatterySwapClient) DeleteOneID(id uint64) *EnterpriseBatterySwapDeleteOne {
	builder := c.Delete().Where(enterprisebatteryswap.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseBatterySwapDeleteOne{builder}
}

// Query returns a query builder for EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) Query() *EnterpriseBatterySwapQuery {
	return &EnterpriseBatterySwapQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseBatterySwap},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseBatterySwap entity by its id.
func (c *EnterpriseBatterySwapClient) Get(ctx context.Context, id uint64) (*EnterpriseBatterySwap, error) {
	return c.Query().Where(enterprisebatteryswap.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseBatterySwapClient) GetX(ctx context.Context, id uint64) *EnterpriseBatterySwap {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExchange queries the exchange edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryExchange(ebs *EnterpriseBatterySwap) *ExchangeQuery {
	query := (&ExchangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.ExchangeTable, enterprisebatteryswap.ExchangeColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryCabinet(ebs *EnterpriseBatterySwap) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.CabinetTable, enterprisebatteryswap.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutin queries the putin edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutin(ebs *EnterpriseBatterySwap) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.PutinTable, enterprisebatteryswap.PutinColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutinEnterprise queries the putin_enterprise edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutinEnterprise(ebs *EnterpriseBatterySwap) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutinEnterpriseTable, enterprisebatteryswap.PutinEnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutinStation queries the putin_station edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutinStation(ebs *EnterpriseBatterySwap) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutinStationTable, enterprisebatteryswap.PutinStationColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutout queries the putout edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutout(ebs *EnterpriseBatterySwap) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.PutoutTable, enterprisebatteryswap.PutoutColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutoutEnterprise queries the putout_enterprise edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutoutEnterprise(ebs *EnterpriseBatterySwap) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutoutEnterpriseTable, enterprisebatteryswap.PutoutEnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPutoutStation queries the putout_station edge of a EnterpriseBatterySwap.
func (c *EnterpriseBatterySwapClient) QueryPutoutStation(ebs *EnterpriseBatterySwap) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ebs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutoutStationTable, enterprisebatteryswap.PutoutStationColumn),
		)
		fromV = sqlgraph.Neighbors(ebs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseBatterySwapClient) Hooks() []Hook {
	return c.hooks.EnterpriseBatterySwap
}

// Interceptors returns the client interceptors.
func (c *EnterpriseBatterySwapClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseBatterySwap
}

func (c *EnterpriseBatterySwapClient) mutate(ctx context.Context, m *EnterpriseBatterySwapMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseBatterySwapCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseBatterySwapUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseBatterySwapUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseBatterySwapDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseBatterySwap mutation op: %q", m.Op())
	}
}

// EnterpriseBillClient is a client for the EnterpriseBill schema.
type EnterpriseBillClient struct {
	config
}

// NewEnterpriseBillClient returns a client for the EnterpriseBill from the given config.
func NewEnterpriseBillClient(c config) *EnterpriseBillClient {
	return &EnterpriseBillClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisebill.Hooks(f(g(h())))`.
func (c *EnterpriseBillClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseBill = append(c.hooks.EnterpriseBill, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisebill.Intercept(f(g(h())))`.
func (c *EnterpriseBillClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseBill = append(c.inters.EnterpriseBill, interceptors...)
}

// Create returns a builder for creating a EnterpriseBill entity.
func (c *EnterpriseBillClient) Create() *EnterpriseBillCreate {
	mutation := newEnterpriseBillMutation(c.config, OpCreate)
	return &EnterpriseBillCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseBill entities.
func (c *EnterpriseBillClient) CreateBulk(builders ...*EnterpriseBillCreate) *EnterpriseBillCreateBulk {
	return &EnterpriseBillCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnterpriseBillClient) MapCreateBulk(slice any, setFunc func(*EnterpriseBillCreate, int)) *EnterpriseBillCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnterpriseBillCreateBulk{err: fmt.Errorf("calling to EnterpriseBillClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnterpriseBillCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnterpriseBillCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseBill.
func (c *EnterpriseBillClient) Update() *EnterpriseBillUpdate {
	mutation := newEnterpriseBillMutation(c.config, OpUpdate)
	return &EnterpriseBillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseBillClient) UpdateOne(eb *EnterpriseBill) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBill(eb))
	return &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseBillClient) UpdateOneID(id uint64) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBillID(id))
	return &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseBill.
func (c *EnterpriseBillClient) Delete() *EnterpriseBillDelete {
	mutation := newEnterpriseBillMutation(c.config, OpDelete)
	return &EnterpriseBillDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseBillClient) DeleteOne(eb *EnterpriseBill) *EnterpriseBillDeleteOne {
	return c.DeleteOneID(eb.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseBillClient) DeleteOneID(id uint64) *EnterpriseBillDeleteOne {
	builder := c.Delete().Where(enterprisebill.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseBillDeleteOne{builder}
}

// Query returns a query builder for EnterpriseBill.
func (c *EnterpriseBillClient) Query() *EnterpriseBillQuery {
	return &EnterpriseBillQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseBill},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseBill entity by its id.
func (c *EnterpriseBillClient) Get(ctx context.Context, id uint64) (*EnterpriseBill, error) {
	return c.Query().Where(enterprisebill.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseBillClient) GetX(ctx context.Context, id uint64) *EnterpriseBill {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryRider(eb *EnterpriseBill) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.RiderTable, enterprisebill.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryCity(eb *EnterpriseBill) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.CityTable, enterprisebill.CityColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryStation(eb *EnterpriseBill) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebill.StationTable, enterprisebill.StationColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryEnterprise(eb *EnterpriseBill) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.EnterpriseTable, enterprisebill.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatement queries the statement edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QueryStatement(eb *EnterpriseBill) *EnterpriseStatementQuery {
	query := (&EnterpriseStatementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(enterprisestatement.Table, enterprisestatement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.StatementTable, enterprisebill.StatementColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a EnterpriseBill.
func (c *EnterpriseBillClient) QuerySubscribe(eb *EnterpriseBill) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := eb.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebill.Table, enterprisebill.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebill.SubscribeTable, enterprisebill.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(eb.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseBillClient) Hooks() []Hook {
	hooks := c.hooks.EnterpriseBill
	return append(hooks[:len(hooks):len(hooks)], enterprisebill.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseBillClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseBill
}

func (c *EnterpriseBillClient) mutate(ctx context.Context, m *EnterpriseBillMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseBillCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseBillUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseBillDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseBill mutation op: %q", m.Op())
	}
}

// EnterpriseContractClient is a client for the EnterpriseContract schema.
type EnterpriseContractClient struct {
	config
}

// NewEnterpriseContractClient returns a client for the EnterpriseContract from the given config.
func NewEnterpriseContractClient(c config) *EnterpriseContractClient {
	return &EnterpriseContractClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisecontract.Hooks(f(g(h())))`.
func (c *EnterpriseContractClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseContract = append(c.hooks.EnterpriseContract, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisecontract.Intercept(f(g(h())))`.
func (c *EnterpriseContractClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseContract = append(c.inters.EnterpriseContract, interceptors...)
}

// Create returns a builder for creating a EnterpriseContract entity.
func (c *EnterpriseContractClient) Create() *EnterpriseContractCreate {
	mutation := newEnterpriseContractMutation(c.config, OpCreate)
	return &EnterpriseContractCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseContract entities.
func (c *EnterpriseContractClient) CreateBulk(builders ...*EnterpriseContractCreate) *EnterpriseContractCreateBulk {
	return &EnterpriseContractCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnterpriseContractClient) MapCreateBulk(slice any, setFunc func(*EnterpriseContractCreate, int)) *EnterpriseContractCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnterpriseContractCreateBulk{err: fmt.Errorf("calling to EnterpriseContractClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnterpriseContractCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnterpriseContractCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseContract.
func (c *EnterpriseContractClient) Update() *EnterpriseContractUpdate {
	mutation := newEnterpriseContractMutation(c.config, OpUpdate)
	return &EnterpriseContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseContractClient) UpdateOne(ec *EnterpriseContract) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContract(ec))
	return &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseContractClient) UpdateOneID(id uint64) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContractID(id))
	return &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseContract.
func (c *EnterpriseContractClient) Delete() *EnterpriseContractDelete {
	mutation := newEnterpriseContractMutation(c.config, OpDelete)
	return &EnterpriseContractDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseContractClient) DeleteOne(ec *EnterpriseContract) *EnterpriseContractDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseContractClient) DeleteOneID(id uint64) *EnterpriseContractDeleteOne {
	builder := c.Delete().Where(enterprisecontract.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseContractDeleteOne{builder}
}

// Query returns a query builder for EnterpriseContract.
func (c *EnterpriseContractClient) Query() *EnterpriseContractQuery {
	return &EnterpriseContractQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseContract},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseContract entity by its id.
func (c *EnterpriseContractClient) Get(ctx context.Context, id uint64) (*EnterpriseContract, error) {
	return c.Query().Where(enterprisecontract.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseContractClient) GetX(ctx context.Context, id uint64) *EnterpriseContract {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a EnterpriseContract.
func (c *EnterpriseContractClient) QueryEnterprise(ec *EnterpriseContract) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisecontract.Table, enterprisecontract.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisecontract.EnterpriseTable, enterprisecontract.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseContractClient) Hooks() []Hook {
	hooks := c.hooks.EnterpriseContract
	return append(hooks[:len(hooks):len(hooks)], enterprisecontract.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseContractClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseContract
}

func (c *EnterpriseContractClient) mutate(ctx context.Context, m *EnterpriseContractMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseContractCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseContractUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseContractDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseContract mutation op: %q", m.Op())
	}
}

// EnterprisePrepaymentClient is a client for the EnterprisePrepayment schema.
type EnterprisePrepaymentClient struct {
	config
}

// NewEnterprisePrepaymentClient returns a client for the EnterprisePrepayment from the given config.
func NewEnterprisePrepaymentClient(c config) *EnterprisePrepaymentClient {
	return &EnterprisePrepaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterpriseprepayment.Hooks(f(g(h())))`.
func (c *EnterprisePrepaymentClient) Use(hooks ...Hook) {
	c.hooks.EnterprisePrepayment = append(c.hooks.EnterprisePrepayment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterpriseprepayment.Intercept(f(g(h())))`.
func (c *EnterprisePrepaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterprisePrepayment = append(c.inters.EnterprisePrepayment, interceptors...)
}

// Create returns a builder for creating a EnterprisePrepayment entity.
func (c *EnterprisePrepaymentClient) Create() *EnterprisePrepaymentCreate {
	mutation := newEnterprisePrepaymentMutation(c.config, OpCreate)
	return &EnterprisePrepaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterprisePrepayment entities.
func (c *EnterprisePrepaymentClient) CreateBulk(builders ...*EnterprisePrepaymentCreate) *EnterprisePrepaymentCreateBulk {
	return &EnterprisePrepaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnterprisePrepaymentClient) MapCreateBulk(slice any, setFunc func(*EnterprisePrepaymentCreate, int)) *EnterprisePrepaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnterprisePrepaymentCreateBulk{err: fmt.Errorf("calling to EnterprisePrepaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnterprisePrepaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnterprisePrepaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) Update() *EnterprisePrepaymentUpdate {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdate)
	return &EnterprisePrepaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterprisePrepaymentClient) UpdateOne(ep *EnterprisePrepayment) *EnterprisePrepaymentUpdateOne {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdateOne, withEnterprisePrepayment(ep))
	return &EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterprisePrepaymentClient) UpdateOneID(id uint64) *EnterprisePrepaymentUpdateOne {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdateOne, withEnterprisePrepaymentID(id))
	return &EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) Delete() *EnterprisePrepaymentDelete {
	mutation := newEnterprisePrepaymentMutation(c.config, OpDelete)
	return &EnterprisePrepaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterprisePrepaymentClient) DeleteOne(ep *EnterprisePrepayment) *EnterprisePrepaymentDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterprisePrepaymentClient) DeleteOneID(id uint64) *EnterprisePrepaymentDeleteOne {
	builder := c.Delete().Where(enterpriseprepayment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterprisePrepaymentDeleteOne{builder}
}

// Query returns a query builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) Query() *EnterprisePrepaymentQuery {
	return &EnterprisePrepaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterprisePrepayment},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterprisePrepayment entity by its id.
func (c *EnterprisePrepaymentClient) Get(ctx context.Context, id uint64) (*EnterprisePrepayment, error) {
	return c.Query().Where(enterpriseprepayment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterprisePrepaymentClient) GetX(ctx context.Context, id uint64) *EnterprisePrepayment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) QueryEnterprise(ep *EnterprisePrepayment) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprepayment.Table, enterpriseprepayment.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprepayment.EnterpriseTable, enterpriseprepayment.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) QueryAgent(ep *EnterprisePrepayment) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprepayment.Table, enterpriseprepayment.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprepayment.AgentTable, enterpriseprepayment.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterprisePrepaymentClient) Hooks() []Hook {
	hooks := c.hooks.EnterprisePrepayment
	return append(hooks[:len(hooks):len(hooks)], enterpriseprepayment.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterprisePrepaymentClient) Interceptors() []Interceptor {
	return c.inters.EnterprisePrepayment
}

func (c *EnterprisePrepaymentClient) mutate(ctx context.Context, m *EnterprisePrepaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterprisePrepaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterprisePrepaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterprisePrepaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterprisePrepayment mutation op: %q", m.Op())
	}
}

// EnterprisePriceClient is a client for the EnterprisePrice schema.
type EnterprisePriceClient struct {
	config
}

// NewEnterprisePriceClient returns a client for the EnterprisePrice from the given config.
func NewEnterprisePriceClient(c config) *EnterprisePriceClient {
	return &EnterprisePriceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterpriseprice.Hooks(f(g(h())))`.
func (c *EnterprisePriceClient) Use(hooks ...Hook) {
	c.hooks.EnterprisePrice = append(c.hooks.EnterprisePrice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterpriseprice.Intercept(f(g(h())))`.
func (c *EnterprisePriceClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterprisePrice = append(c.inters.EnterprisePrice, interceptors...)
}

// Create returns a builder for creating a EnterprisePrice entity.
func (c *EnterprisePriceClient) Create() *EnterprisePriceCreate {
	mutation := newEnterprisePriceMutation(c.config, OpCreate)
	return &EnterprisePriceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterprisePrice entities.
func (c *EnterprisePriceClient) CreateBulk(builders ...*EnterprisePriceCreate) *EnterprisePriceCreateBulk {
	return &EnterprisePriceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnterprisePriceClient) MapCreateBulk(slice any, setFunc func(*EnterprisePriceCreate, int)) *EnterprisePriceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnterprisePriceCreateBulk{err: fmt.Errorf("calling to EnterprisePriceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnterprisePriceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnterprisePriceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterprisePrice.
func (c *EnterprisePriceClient) Update() *EnterprisePriceUpdate {
	mutation := newEnterprisePriceMutation(c.config, OpUpdate)
	return &EnterprisePriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterprisePriceClient) UpdateOne(ep *EnterprisePrice) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePrice(ep))
	return &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterprisePriceClient) UpdateOneID(id uint64) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePriceID(id))
	return &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterprisePrice.
func (c *EnterprisePriceClient) Delete() *EnterprisePriceDelete {
	mutation := newEnterprisePriceMutation(c.config, OpDelete)
	return &EnterprisePriceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterprisePriceClient) DeleteOne(ep *EnterprisePrice) *EnterprisePriceDeleteOne {
	return c.DeleteOneID(ep.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterprisePriceClient) DeleteOneID(id uint64) *EnterprisePriceDeleteOne {
	builder := c.Delete().Where(enterpriseprice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterprisePriceDeleteOne{builder}
}

// Query returns a query builder for EnterprisePrice.
func (c *EnterprisePriceClient) Query() *EnterprisePriceQuery {
	return &EnterprisePriceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterprisePrice},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterprisePrice entity by its id.
func (c *EnterprisePriceClient) Get(ctx context.Context, id uint64) (*EnterprisePrice, error) {
	return c.Query().Where(enterpriseprice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterprisePriceClient) GetX(ctx context.Context, id uint64) *EnterprisePrice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a EnterprisePrice.
func (c *EnterprisePriceClient) QueryCity(ep *EnterprisePrice) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprice.CityTable, enterpriseprice.CityColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a EnterprisePrice.
func (c *EnterprisePriceClient) QueryBrand(ep *EnterprisePrice) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprice.BrandTable, enterpriseprice.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgreement queries the agreement edge of a EnterprisePrice.
func (c *EnterprisePriceClient) QueryAgreement(ep *EnterprisePrice) *AgreementQuery {
	query := (&AgreementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, id),
			sqlgraph.To(agreement.Table, agreement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprice.AgreementTable, enterpriseprice.AgreementColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a EnterprisePrice.
func (c *EnterprisePriceClient) QueryEnterprise(ep *EnterprisePrice) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ep.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterpriseprice.EnterpriseTable, enterpriseprice.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ep.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterprisePriceClient) Hooks() []Hook {
	hooks := c.hooks.EnterprisePrice
	return append(hooks[:len(hooks):len(hooks)], enterpriseprice.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterprisePriceClient) Interceptors() []Interceptor {
	return c.inters.EnterprisePrice
}

func (c *EnterprisePriceClient) mutate(ctx context.Context, m *EnterprisePriceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterprisePriceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterprisePriceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterprisePriceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterprisePrice mutation op: %q", m.Op())
	}
}

// EnterpriseStatementClient is a client for the EnterpriseStatement schema.
type EnterpriseStatementClient struct {
	config
}

// NewEnterpriseStatementClient returns a client for the EnterpriseStatement from the given config.
func NewEnterpriseStatementClient(c config) *EnterpriseStatementClient {
	return &EnterpriseStatementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisestatement.Hooks(f(g(h())))`.
func (c *EnterpriseStatementClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseStatement = append(c.hooks.EnterpriseStatement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisestatement.Intercept(f(g(h())))`.
func (c *EnterpriseStatementClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseStatement = append(c.inters.EnterpriseStatement, interceptors...)
}

// Create returns a builder for creating a EnterpriseStatement entity.
func (c *EnterpriseStatementClient) Create() *EnterpriseStatementCreate {
	mutation := newEnterpriseStatementMutation(c.config, OpCreate)
	return &EnterpriseStatementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseStatement entities.
func (c *EnterpriseStatementClient) CreateBulk(builders ...*EnterpriseStatementCreate) *EnterpriseStatementCreateBulk {
	return &EnterpriseStatementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnterpriseStatementClient) MapCreateBulk(slice any, setFunc func(*EnterpriseStatementCreate, int)) *EnterpriseStatementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnterpriseStatementCreateBulk{err: fmt.Errorf("calling to EnterpriseStatementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnterpriseStatementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnterpriseStatementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) Update() *EnterpriseStatementUpdate {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdate)
	return &EnterpriseStatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseStatementClient) UpdateOne(es *EnterpriseStatement) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatement(es))
	return &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseStatementClient) UpdateOneID(id uint64) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatementID(id))
	return &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) Delete() *EnterpriseStatementDelete {
	mutation := newEnterpriseStatementMutation(c.config, OpDelete)
	return &EnterpriseStatementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseStatementClient) DeleteOne(es *EnterpriseStatement) *EnterpriseStatementDeleteOne {
	return c.DeleteOneID(es.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseStatementClient) DeleteOneID(id uint64) *EnterpriseStatementDeleteOne {
	builder := c.Delete().Where(enterprisestatement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseStatementDeleteOne{builder}
}

// Query returns a query builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) Query() *EnterpriseStatementQuery {
	return &EnterpriseStatementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseStatement},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseStatement entity by its id.
func (c *EnterpriseStatementClient) Get(ctx context.Context, id uint64) (*EnterpriseStatement, error) {
	return c.Query().Where(enterprisestatement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseStatementClient) GetX(ctx context.Context, id uint64) *EnterpriseStatement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a EnterpriseStatement.
func (c *EnterpriseStatementClient) QueryEnterprise(es *EnterpriseStatement) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestatement.Table, enterprisestatement.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisestatement.EnterpriseTable, enterprisestatement.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the bills edge of a EnterpriseStatement.
func (c *EnterpriseStatementClient) QueryBills(es *EnterpriseStatement) *EnterpriseBillQuery {
	query := (&EnterpriseBillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestatement.Table, enterprisestatement.FieldID, id),
			sqlgraph.To(enterprisebill.Table, enterprisebill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestatement.BillsTable, enterprisestatement.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseStatementClient) Hooks() []Hook {
	hooks := c.hooks.EnterpriseStatement
	return append(hooks[:len(hooks):len(hooks)], enterprisestatement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseStatementClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseStatement
}

func (c *EnterpriseStatementClient) mutate(ctx context.Context, m *EnterpriseStatementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseStatementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseStatementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseStatementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseStatement mutation op: %q", m.Op())
	}
}

// EnterpriseStationClient is a client for the EnterpriseStation schema.
type EnterpriseStationClient struct {
	config
}

// NewEnterpriseStationClient returns a client for the EnterpriseStation from the given config.
func NewEnterpriseStationClient(c config) *EnterpriseStationClient {
	return &EnterpriseStationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enterprisestation.Hooks(f(g(h())))`.
func (c *EnterpriseStationClient) Use(hooks ...Hook) {
	c.hooks.EnterpriseStation = append(c.hooks.EnterpriseStation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `enterprisestation.Intercept(f(g(h())))`.
func (c *EnterpriseStationClient) Intercept(interceptors ...Interceptor) {
	c.inters.EnterpriseStation = append(c.inters.EnterpriseStation, interceptors...)
}

// Create returns a builder for creating a EnterpriseStation entity.
func (c *EnterpriseStationClient) Create() *EnterpriseStationCreate {
	mutation := newEnterpriseStationMutation(c.config, OpCreate)
	return &EnterpriseStationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnterpriseStation entities.
func (c *EnterpriseStationClient) CreateBulk(builders ...*EnterpriseStationCreate) *EnterpriseStationCreateBulk {
	return &EnterpriseStationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EnterpriseStationClient) MapCreateBulk(slice any, setFunc func(*EnterpriseStationCreate, int)) *EnterpriseStationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EnterpriseStationCreateBulk{err: fmt.Errorf("calling to EnterpriseStationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EnterpriseStationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EnterpriseStationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnterpriseStation.
func (c *EnterpriseStationClient) Update() *EnterpriseStationUpdate {
	mutation := newEnterpriseStationMutation(c.config, OpUpdate)
	return &EnterpriseStationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnterpriseStationClient) UpdateOne(es *EnterpriseStation) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStation(es))
	return &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnterpriseStationClient) UpdateOneID(id uint64) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStationID(id))
	return &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnterpriseStation.
func (c *EnterpriseStationClient) Delete() *EnterpriseStationDelete {
	mutation := newEnterpriseStationMutation(c.config, OpDelete)
	return &EnterpriseStationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnterpriseStationClient) DeleteOne(es *EnterpriseStation) *EnterpriseStationDeleteOne {
	return c.DeleteOneID(es.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnterpriseStationClient) DeleteOneID(id uint64) *EnterpriseStationDeleteOne {
	builder := c.Delete().Where(enterprisestation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnterpriseStationDeleteOne{builder}
}

// Query returns a query builder for EnterpriseStation.
func (c *EnterpriseStationClient) Query() *EnterpriseStationQuery {
	return &EnterpriseStationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEnterpriseStation},
		inters: c.Interceptors(),
	}
}

// Get returns a EnterpriseStation entity by its id.
func (c *EnterpriseStationClient) Get(ctx context.Context, id uint64) (*EnterpriseStation, error) {
	return c.Query().Where(enterprisestation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnterpriseStationClient) GetX(ctx context.Context, id uint64) *EnterpriseStation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryCity(es *EnterpriseStation) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisestation.CityTable, enterprisestation.CityColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryEnterprise(es *EnterpriseStation) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisestation.EnterpriseTable, enterprisestation.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgents queries the agents edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryAgents(es *EnterpriseStation) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, enterprisestation.AgentsTable, enterprisestation.AgentsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwapPutinBatteries queries the swap_putin_batteries edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QuerySwapPutinBatteries(es *EnterpriseStation) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.SwapPutinBatteriesTable, enterprisestation.SwapPutinBatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySwapPutoutBatteries queries the swap_putout_batteries edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QuerySwapPutoutBatteries(es *EnterpriseStation) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.SwapPutoutBatteriesTable, enterprisestation.SwapPutoutBatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinets queries the cabinets edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryCabinets(es *EnterpriseStation) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.CabinetsTable, enterprisestation.CabinetsColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteries queries the batteries edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryBatteries(es *EnterpriseStation) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.BatteriesTable, enterprisestation.BatteriesColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a EnterpriseStation.
func (c *EnterpriseStationClient) QueryStocks(es *EnterpriseStation) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.StocksTable, enterprisestation.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnterpriseStationClient) Hooks() []Hook {
	hooks := c.hooks.EnterpriseStation
	return append(hooks[:len(hooks):len(hooks)], enterprisestation.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EnterpriseStationClient) Interceptors() []Interceptor {
	return c.inters.EnterpriseStation
}

func (c *EnterpriseStationClient) mutate(ctx context.Context, m *EnterpriseStationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EnterpriseStationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EnterpriseStationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EnterpriseStationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EnterpriseStation mutation op: %q", m.Op())
	}
}

// ExceptionClient is a client for the Exception schema.
type ExceptionClient struct {
	config
}

// NewExceptionClient returns a client for the Exception from the given config.
func NewExceptionClient(c config) *ExceptionClient {
	return &ExceptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exception.Hooks(f(g(h())))`.
func (c *ExceptionClient) Use(hooks ...Hook) {
	c.hooks.Exception = append(c.hooks.Exception, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exception.Intercept(f(g(h())))`.
func (c *ExceptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exception = append(c.inters.Exception, interceptors...)
}

// Create returns a builder for creating a Exception entity.
func (c *ExceptionClient) Create() *ExceptionCreate {
	mutation := newExceptionMutation(c.config, OpCreate)
	return &ExceptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exception entities.
func (c *ExceptionClient) CreateBulk(builders ...*ExceptionCreate) *ExceptionCreateBulk {
	return &ExceptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExceptionClient) MapCreateBulk(slice any, setFunc func(*ExceptionCreate, int)) *ExceptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExceptionCreateBulk{err: fmt.Errorf("calling to ExceptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExceptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExceptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exception.
func (c *ExceptionClient) Update() *ExceptionUpdate {
	mutation := newExceptionMutation(c.config, OpUpdate)
	return &ExceptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExceptionClient) UpdateOne(e *Exception) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withException(e))
	return &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExceptionClient) UpdateOneID(id uint64) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withExceptionID(id))
	return &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exception.
func (c *ExceptionClient) Delete() *ExceptionDelete {
	mutation := newExceptionMutation(c.config, OpDelete)
	return &ExceptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExceptionClient) DeleteOne(e *Exception) *ExceptionDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExceptionClient) DeleteOneID(id uint64) *ExceptionDeleteOne {
	builder := c.Delete().Where(exception.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExceptionDeleteOne{builder}
}

// Query returns a query builder for Exception.
func (c *ExceptionClient) Query() *ExceptionQuery {
	return &ExceptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeException},
		inters: c.Interceptors(),
	}
}

// Get returns a Exception entity by its id.
func (c *ExceptionClient) Get(ctx context.Context, id uint64) (*Exception, error) {
	return c.Query().Where(exception.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExceptionClient) GetX(ctx context.Context, id uint64) *Exception {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Exception.
func (c *ExceptionClient) QueryCity(e *Exception) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exception.CityTable, exception.CityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Exception.
func (c *ExceptionClient) QueryEmployee(e *Exception) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exception.EmployeeTable, exception.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Exception.
func (c *ExceptionClient) QueryStore(e *Exception) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exception.StoreTable, exception.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExceptionClient) Hooks() []Hook {
	hooks := c.hooks.Exception
	return append(hooks[:len(hooks):len(hooks)], exception.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ExceptionClient) Interceptors() []Interceptor {
	return c.inters.Exception
}

func (c *ExceptionClient) mutate(ctx context.Context, m *ExceptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExceptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExceptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExceptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exception mutation op: %q", m.Op())
	}
}

// ExchangeClient is a client for the Exchange schema.
type ExchangeClient struct {
	config
}

// NewExchangeClient returns a client for the Exchange from the given config.
func NewExchangeClient(c config) *ExchangeClient {
	return &ExchangeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exchange.Hooks(f(g(h())))`.
func (c *ExchangeClient) Use(hooks ...Hook) {
	c.hooks.Exchange = append(c.hooks.Exchange, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exchange.Intercept(f(g(h())))`.
func (c *ExchangeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exchange = append(c.inters.Exchange, interceptors...)
}

// Create returns a builder for creating a Exchange entity.
func (c *ExchangeClient) Create() *ExchangeCreate {
	mutation := newExchangeMutation(c.config, OpCreate)
	return &ExchangeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exchange entities.
func (c *ExchangeClient) CreateBulk(builders ...*ExchangeCreate) *ExchangeCreateBulk {
	return &ExchangeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExchangeClient) MapCreateBulk(slice any, setFunc func(*ExchangeCreate, int)) *ExchangeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExchangeCreateBulk{err: fmt.Errorf("calling to ExchangeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExchangeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExchangeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exchange.
func (c *ExchangeClient) Update() *ExchangeUpdate {
	mutation := newExchangeMutation(c.config, OpUpdate)
	return &ExchangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExchangeClient) UpdateOne(e *Exchange) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchange(e))
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExchangeClient) UpdateOneID(id uint64) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchangeID(id))
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exchange.
func (c *ExchangeClient) Delete() *ExchangeDelete {
	mutation := newExchangeMutation(c.config, OpDelete)
	return &ExchangeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExchangeClient) DeleteOne(e *Exchange) *ExchangeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExchangeClient) DeleteOneID(id uint64) *ExchangeDeleteOne {
	builder := c.Delete().Where(exchange.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExchangeDeleteOne{builder}
}

// Query returns a query builder for Exchange.
func (c *ExchangeClient) Query() *ExchangeQuery {
	return &ExchangeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExchange},
		inters: c.Interceptors(),
	}
}

// Get returns a Exchange entity by its id.
func (c *ExchangeClient) Get(ctx context.Context, id uint64) (*Exchange, error) {
	return c.Query().Where(exchange.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExchangeClient) GetX(ctx context.Context, id uint64) *Exchange {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribe queries the subscribe edge of a Exchange.
func (c *ExchangeClient) QuerySubscribe(e *Exchange) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.SubscribeTable, exchange.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Exchange.
func (c *ExchangeClient) QueryCity(e *Exchange) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.CityTable, exchange.CityColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Exchange.
func (c *ExchangeClient) QueryStore(e *Exchange) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.StoreTable, exchange.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Exchange.
func (c *ExchangeClient) QueryEnterprise(e *Exchange) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.EnterpriseTable, exchange.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Exchange.
func (c *ExchangeClient) QueryStation(e *Exchange) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exchange.StationTable, exchange.StationColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Exchange.
func (c *ExchangeClient) QueryCabinet(e *Exchange) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exchange.CabinetTable, exchange.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Exchange.
func (c *ExchangeClient) QueryRider(e *Exchange) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exchange.RiderTable, exchange.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Exchange.
func (c *ExchangeClient) QueryEmployee(e *Exchange) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exchange.Table, exchange.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exchange.EmployeeTable, exchange.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExchangeClient) Hooks() []Hook {
	hooks := c.hooks.Exchange
	return append(hooks[:len(hooks):len(hooks)], exchange.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ExchangeClient) Interceptors() []Interceptor {
	return c.inters.Exchange
}

func (c *ExchangeClient) mutate(ctx context.Context, m *ExchangeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExchangeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExchangeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExchangeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exchange mutation op: %q", m.Op())
	}
}

// ExportClient is a client for the Export schema.
type ExportClient struct {
	config
}

// NewExportClient returns a client for the Export from the given config.
func NewExportClient(c config) *ExportClient {
	return &ExportClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `export.Hooks(f(g(h())))`.
func (c *ExportClient) Use(hooks ...Hook) {
	c.hooks.Export = append(c.hooks.Export, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `export.Intercept(f(g(h())))`.
func (c *ExportClient) Intercept(interceptors ...Interceptor) {
	c.inters.Export = append(c.inters.Export, interceptors...)
}

// Create returns a builder for creating a Export entity.
func (c *ExportClient) Create() *ExportCreate {
	mutation := newExportMutation(c.config, OpCreate)
	return &ExportCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Export entities.
func (c *ExportClient) CreateBulk(builders ...*ExportCreate) *ExportCreateBulk {
	return &ExportCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExportClient) MapCreateBulk(slice any, setFunc func(*ExportCreate, int)) *ExportCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExportCreateBulk{err: fmt.Errorf("calling to ExportClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExportCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExportCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Export.
func (c *ExportClient) Update() *ExportUpdate {
	mutation := newExportMutation(c.config, OpUpdate)
	return &ExportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExportClient) UpdateOne(e *Export) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExport(e))
	return &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExportClient) UpdateOneID(id uint64) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExportID(id))
	return &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Export.
func (c *ExportClient) Delete() *ExportDelete {
	mutation := newExportMutation(c.config, OpDelete)
	return &ExportDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExportClient) DeleteOne(e *Export) *ExportDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExportClient) DeleteOneID(id uint64) *ExportDeleteOne {
	builder := c.Delete().Where(export.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExportDeleteOne{builder}
}

// Query returns a query builder for Export.
func (c *ExportClient) Query() *ExportQuery {
	return &ExportQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExport},
		inters: c.Interceptors(),
	}
}

// Get returns a Export entity by its id.
func (c *ExportClient) Get(ctx context.Context, id uint64) (*Export, error) {
	return c.Query().Where(export.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExportClient) GetX(ctx context.Context, id uint64) *Export {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManager queries the manager edge of a Export.
func (c *ExportClient) QueryManager(e *Export) *ManagerQuery {
	query := (&ManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(export.Table, export.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, export.ManagerTable, export.ManagerColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExportClient) Hooks() []Hook {
	return c.hooks.Export
}

// Interceptors returns the client interceptors.
func (c *ExportClient) Interceptors() []Interceptor {
	return c.inters.Export
}

func (c *ExportClient) mutate(ctx context.Context, m *ExportMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExportCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExportUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExportDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Export mutation op: %q", m.Op())
	}
}

// FaultClient is a client for the Fault schema.
type FaultClient struct {
	config
}

// NewFaultClient returns a client for the Fault from the given config.
func NewFaultClient(c config) *FaultClient {
	return &FaultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fault.Hooks(f(g(h())))`.
func (c *FaultClient) Use(hooks ...Hook) {
	c.hooks.Fault = append(c.hooks.Fault, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fault.Intercept(f(g(h())))`.
func (c *FaultClient) Intercept(interceptors ...Interceptor) {
	c.inters.Fault = append(c.inters.Fault, interceptors...)
}

// Create returns a builder for creating a Fault entity.
func (c *FaultClient) Create() *FaultCreate {
	mutation := newFaultMutation(c.config, OpCreate)
	return &FaultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fault entities.
func (c *FaultClient) CreateBulk(builders ...*FaultCreate) *FaultCreateBulk {
	return &FaultCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FaultClient) MapCreateBulk(slice any, setFunc func(*FaultCreate, int)) *FaultCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FaultCreateBulk{err: fmt.Errorf("calling to FaultClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FaultCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FaultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fault.
func (c *FaultClient) Update() *FaultUpdate {
	mutation := newFaultMutation(c.config, OpUpdate)
	return &FaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FaultClient) UpdateOne(f *Fault) *FaultUpdateOne {
	mutation := newFaultMutation(c.config, OpUpdateOne, withFault(f))
	return &FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FaultClient) UpdateOneID(id uint64) *FaultUpdateOne {
	mutation := newFaultMutation(c.config, OpUpdateOne, withFaultID(id))
	return &FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fault.
func (c *FaultClient) Delete() *FaultDelete {
	mutation := newFaultMutation(c.config, OpDelete)
	return &FaultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FaultClient) DeleteOne(f *Fault) *FaultDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FaultClient) DeleteOneID(id uint64) *FaultDeleteOne {
	builder := c.Delete().Where(fault.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FaultDeleteOne{builder}
}

// Query returns a query builder for Fault.
func (c *FaultClient) Query() *FaultQuery {
	return &FaultQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFault},
		inters: c.Interceptors(),
	}
}

// Get returns a Fault entity by its id.
func (c *FaultClient) Get(ctx context.Context, id uint64) (*Fault, error) {
	return c.Query().Where(fault.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FaultClient) GetX(ctx context.Context, id uint64) *Fault {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Fault.
func (c *FaultClient) QueryCity(f *Fault) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fault.Table, fault.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fault.CityTable, fault.CityColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Fault.
func (c *FaultClient) QueryCabinet(f *Fault) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fault.Table, fault.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fault.CabinetTable, fault.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Fault.
func (c *FaultClient) QueryBattery(f *Fault) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fault.Table, fault.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fault.BatteryTable, fault.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Fault.
func (c *FaultClient) QueryEbike(f *Fault) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fault.Table, fault.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fault.EbikeTable, fault.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Fault.
func (c *FaultClient) QueryRider(f *Fault) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fault.Table, fault.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, fault.RiderTable, fault.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FaultClient) Hooks() []Hook {
	hooks := c.hooks.Fault
	return append(hooks[:len(hooks):len(hooks)], fault.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *FaultClient) Interceptors() []Interceptor {
	return c.inters.Fault
}

func (c *FaultClient) mutate(ctx context.Context, m *FaultMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FaultCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FaultUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FaultDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Fault mutation op: %q", m.Op())
	}
}

// FeedbackClient is a client for the Feedback schema.
type FeedbackClient struct {
	config
}

// NewFeedbackClient returns a client for the Feedback from the given config.
func NewFeedbackClient(c config) *FeedbackClient {
	return &FeedbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `feedback.Hooks(f(g(h())))`.
func (c *FeedbackClient) Use(hooks ...Hook) {
	c.hooks.Feedback = append(c.hooks.Feedback, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `feedback.Intercept(f(g(h())))`.
func (c *FeedbackClient) Intercept(interceptors ...Interceptor) {
	c.inters.Feedback = append(c.inters.Feedback, interceptors...)
}

// Create returns a builder for creating a Feedback entity.
func (c *FeedbackClient) Create() *FeedbackCreate {
	mutation := newFeedbackMutation(c.config, OpCreate)
	return &FeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Feedback entities.
func (c *FeedbackClient) CreateBulk(builders ...*FeedbackCreate) *FeedbackCreateBulk {
	return &FeedbackCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FeedbackClient) MapCreateBulk(slice any, setFunc func(*FeedbackCreate, int)) *FeedbackCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FeedbackCreateBulk{err: fmt.Errorf("calling to FeedbackClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FeedbackCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FeedbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Feedback.
func (c *FeedbackClient) Update() *FeedbackUpdate {
	mutation := newFeedbackMutation(c.config, OpUpdate)
	return &FeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FeedbackClient) UpdateOne(f *Feedback) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedback(f))
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FeedbackClient) UpdateOneID(id uint64) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedbackID(id))
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Feedback.
func (c *FeedbackClient) Delete() *FeedbackDelete {
	mutation := newFeedbackMutation(c.config, OpDelete)
	return &FeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FeedbackClient) DeleteOne(f *Feedback) *FeedbackDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FeedbackClient) DeleteOneID(id uint64) *FeedbackDeleteOne {
	builder := c.Delete().Where(feedback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FeedbackDeleteOne{builder}
}

// Query returns a query builder for Feedback.
func (c *FeedbackClient) Query() *FeedbackQuery {
	return &FeedbackQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFeedback},
		inters: c.Interceptors(),
	}
}

// Get returns a Feedback entity by its id.
func (c *FeedbackClient) Get(ctx context.Context, id uint64) (*Feedback, error) {
	return c.Query().Where(feedback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FeedbackClient) GetX(ctx context.Context, id uint64) *Feedback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a Feedback.
func (c *FeedbackClient) QueryEnterprise(f *Feedback) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.EnterpriseTable, feedback.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Feedback.
func (c *FeedbackClient) QueryAgent(f *Feedback) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.AgentTable, feedback.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Feedback.
func (c *FeedbackClient) QueryRider(f *Feedback) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.RiderTable, feedback.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Feedback.
func (c *FeedbackClient) QueryCity(f *Feedback) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.CityTable, feedback.CityColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FeedbackClient) Hooks() []Hook {
	return c.hooks.Feedback
}

// Interceptors returns the client interceptors.
func (c *FeedbackClient) Interceptors() []Interceptor {
	return c.inters.Feedback
}

func (c *FeedbackClient) mutate(ctx context.Context, m *FeedbackMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FeedbackCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FeedbackDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Feedback mutation op: %q", m.Op())
	}
}

// GoodsClient is a client for the Goods schema.
type GoodsClient struct {
	config
}

// NewGoodsClient returns a client for the Goods from the given config.
func NewGoodsClient(c config) *GoodsClient {
	return &GoodsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `goods.Hooks(f(g(h())))`.
func (c *GoodsClient) Use(hooks ...Hook) {
	c.hooks.Goods = append(c.hooks.Goods, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `goods.Intercept(f(g(h())))`.
func (c *GoodsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Goods = append(c.inters.Goods, interceptors...)
}

// Create returns a builder for creating a Goods entity.
func (c *GoodsClient) Create() *GoodsCreate {
	mutation := newGoodsMutation(c.config, OpCreate)
	return &GoodsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Goods entities.
func (c *GoodsClient) CreateBulk(builders ...*GoodsCreate) *GoodsCreateBulk {
	return &GoodsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GoodsClient) MapCreateBulk(slice any, setFunc func(*GoodsCreate, int)) *GoodsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GoodsCreateBulk{err: fmt.Errorf("calling to GoodsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GoodsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GoodsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Goods.
func (c *GoodsClient) Update() *GoodsUpdate {
	mutation := newGoodsMutation(c.config, OpUpdate)
	return &GoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodsClient) UpdateOne(_go *Goods) *GoodsUpdateOne {
	mutation := newGoodsMutation(c.config, OpUpdateOne, withGoods(_go))
	return &GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodsClient) UpdateOneID(id uint64) *GoodsUpdateOne {
	mutation := newGoodsMutation(c.config, OpUpdateOne, withGoodsID(id))
	return &GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Goods.
func (c *GoodsClient) Delete() *GoodsDelete {
	mutation := newGoodsMutation(c.config, OpDelete)
	return &GoodsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodsClient) DeleteOne(_go *Goods) *GoodsDeleteOne {
	return c.DeleteOneID(_go.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GoodsClient) DeleteOneID(id uint64) *GoodsDeleteOne {
	builder := c.Delete().Where(goods.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodsDeleteOne{builder}
}

// Query returns a query builder for Goods.
func (c *GoodsClient) Query() *GoodsQuery {
	return &GoodsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGoods},
		inters: c.Interceptors(),
	}
}

// Get returns a Goods entity by its id.
func (c *GoodsClient) Get(ctx context.Context, id uint64) (*Goods, error) {
	return c.Query().Where(goods.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodsClient) GetX(ctx context.Context, id uint64) *Goods {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStores queries the stores edge of a Goods.
func (c *GoodsClient) QueryStores(_go *Goods) *StoreGoodsQuery {
	query := (&StoreGoodsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _go.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(goods.Table, goods.FieldID, id),
			sqlgraph.To(storegoods.Table, storegoods.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, goods.StoresTable, goods.StoresColumn),
		)
		fromV = sqlgraph.Neighbors(_go.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GoodsClient) Hooks() []Hook {
	hooks := c.hooks.Goods
	return append(hooks[:len(hooks):len(hooks)], goods.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *GoodsClient) Interceptors() []Interceptor {
	return c.inters.Goods
}

func (c *GoodsClient) mutate(ctx context.Context, m *GoodsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GoodsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GoodsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Goods mutation op: %q", m.Op())
	}
}

// InstructionsClient is a client for the Instructions schema.
type InstructionsClient struct {
	config
}

// NewInstructionsClient returns a client for the Instructions from the given config.
func NewInstructionsClient(c config) *InstructionsClient {
	return &InstructionsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instructions.Hooks(f(g(h())))`.
func (c *InstructionsClient) Use(hooks ...Hook) {
	c.hooks.Instructions = append(c.hooks.Instructions, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `instructions.Intercept(f(g(h())))`.
func (c *InstructionsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Instructions = append(c.inters.Instructions, interceptors...)
}

// Create returns a builder for creating a Instructions entity.
func (c *InstructionsClient) Create() *InstructionsCreate {
	mutation := newInstructionsMutation(c.config, OpCreate)
	return &InstructionsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Instructions entities.
func (c *InstructionsClient) CreateBulk(builders ...*InstructionsCreate) *InstructionsCreateBulk {
	return &InstructionsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InstructionsClient) MapCreateBulk(slice any, setFunc func(*InstructionsCreate, int)) *InstructionsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InstructionsCreateBulk{err: fmt.Errorf("calling to InstructionsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InstructionsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InstructionsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Instructions.
func (c *InstructionsClient) Update() *InstructionsUpdate {
	mutation := newInstructionsMutation(c.config, OpUpdate)
	return &InstructionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstructionsClient) UpdateOne(i *Instructions) *InstructionsUpdateOne {
	mutation := newInstructionsMutation(c.config, OpUpdateOne, withInstructions(i))
	return &InstructionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstructionsClient) UpdateOneID(id uint64) *InstructionsUpdateOne {
	mutation := newInstructionsMutation(c.config, OpUpdateOne, withInstructionsID(id))
	return &InstructionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Instructions.
func (c *InstructionsClient) Delete() *InstructionsDelete {
	mutation := newInstructionsMutation(c.config, OpDelete)
	return &InstructionsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstructionsClient) DeleteOne(i *Instructions) *InstructionsDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstructionsClient) DeleteOneID(id uint64) *InstructionsDeleteOne {
	builder := c.Delete().Where(instructions.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstructionsDeleteOne{builder}
}

// Query returns a query builder for Instructions.
func (c *InstructionsClient) Query() *InstructionsQuery {
	return &InstructionsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstructions},
		inters: c.Interceptors(),
	}
}

// Get returns a Instructions entity by its id.
func (c *InstructionsClient) Get(ctx context.Context, id uint64) (*Instructions, error) {
	return c.Query().Where(instructions.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstructionsClient) GetX(ctx context.Context, id uint64) *Instructions {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InstructionsClient) Hooks() []Hook {
	hooks := c.hooks.Instructions
	return append(hooks[:len(hooks):len(hooks)], instructions.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *InstructionsClient) Interceptors() []Interceptor {
	return c.inters.Instructions
}

func (c *InstructionsClient) mutate(ctx context.Context, m *InstructionsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstructionsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstructionsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstructionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstructionsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Instructions mutation op: %q", m.Op())
	}
}

// InventoryClient is a client for the Inventory schema.
type InventoryClient struct {
	config
}

// NewInventoryClient returns a client for the Inventory from the given config.
func NewInventoryClient(c config) *InventoryClient {
	return &InventoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventory.Hooks(f(g(h())))`.
func (c *InventoryClient) Use(hooks ...Hook) {
	c.hooks.Inventory = append(c.hooks.Inventory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inventory.Intercept(f(g(h())))`.
func (c *InventoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Inventory = append(c.inters.Inventory, interceptors...)
}

// Create returns a builder for creating a Inventory entity.
func (c *InventoryClient) Create() *InventoryCreate {
	mutation := newInventoryMutation(c.config, OpCreate)
	return &InventoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Inventory entities.
func (c *InventoryClient) CreateBulk(builders ...*InventoryCreate) *InventoryCreateBulk {
	return &InventoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InventoryClient) MapCreateBulk(slice any, setFunc func(*InventoryCreate, int)) *InventoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InventoryCreateBulk{err: fmt.Errorf("calling to InventoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InventoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InventoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inventory.
func (c *InventoryClient) Update() *InventoryUpdate {
	mutation := newInventoryMutation(c.config, OpUpdate)
	return &InventoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventoryClient) UpdateOne(i *Inventory) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventory(i))
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventoryClient) UpdateOneID(id uint64) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventoryID(id))
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inventory.
func (c *InventoryClient) Delete() *InventoryDelete {
	mutation := newInventoryMutation(c.config, OpDelete)
	return &InventoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InventoryClient) DeleteOne(i *Inventory) *InventoryDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InventoryClient) DeleteOneID(id uint64) *InventoryDeleteOne {
	builder := c.Delete().Where(inventory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventoryDeleteOne{builder}
}

// Query returns a query builder for Inventory.
func (c *InventoryClient) Query() *InventoryQuery {
	return &InventoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInventory},
		inters: c.Interceptors(),
	}
}

// Get returns a Inventory entity by its id.
func (c *InventoryClient) Get(ctx context.Context, id uint64) (*Inventory, error) {
	return c.Query().Where(inventory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventoryClient) GetX(ctx context.Context, id uint64) *Inventory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *InventoryClient) Hooks() []Hook {
	hooks := c.hooks.Inventory
	return append(hooks[:len(hooks):len(hooks)], inventory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *InventoryClient) Interceptors() []Interceptor {
	return c.inters.Inventory
}

func (c *InventoryClient) mutate(ctx context.Context, m *InventoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InventoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InventoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InventoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Inventory mutation op: %q", m.Op())
	}
}

// MaintainerClient is a client for the Maintainer schema.
type MaintainerClient struct {
	config
}

// NewMaintainerClient returns a client for the Maintainer from the given config.
func NewMaintainerClient(c config) *MaintainerClient {
	return &MaintainerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `maintainer.Hooks(f(g(h())))`.
func (c *MaintainerClient) Use(hooks ...Hook) {
	c.hooks.Maintainer = append(c.hooks.Maintainer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `maintainer.Intercept(f(g(h())))`.
func (c *MaintainerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Maintainer = append(c.inters.Maintainer, interceptors...)
}

// Create returns a builder for creating a Maintainer entity.
func (c *MaintainerClient) Create() *MaintainerCreate {
	mutation := newMaintainerMutation(c.config, OpCreate)
	return &MaintainerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Maintainer entities.
func (c *MaintainerClient) CreateBulk(builders ...*MaintainerCreate) *MaintainerCreateBulk {
	return &MaintainerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MaintainerClient) MapCreateBulk(slice any, setFunc func(*MaintainerCreate, int)) *MaintainerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MaintainerCreateBulk{err: fmt.Errorf("calling to MaintainerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MaintainerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MaintainerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Maintainer.
func (c *MaintainerClient) Update() *MaintainerUpdate {
	mutation := newMaintainerMutation(c.config, OpUpdate)
	return &MaintainerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MaintainerClient) UpdateOne(m *Maintainer) *MaintainerUpdateOne {
	mutation := newMaintainerMutation(c.config, OpUpdateOne, withMaintainer(m))
	return &MaintainerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MaintainerClient) UpdateOneID(id uint64) *MaintainerUpdateOne {
	mutation := newMaintainerMutation(c.config, OpUpdateOne, withMaintainerID(id))
	return &MaintainerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Maintainer.
func (c *MaintainerClient) Delete() *MaintainerDelete {
	mutation := newMaintainerMutation(c.config, OpDelete)
	return &MaintainerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MaintainerClient) DeleteOne(m *Maintainer) *MaintainerDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MaintainerClient) DeleteOneID(id uint64) *MaintainerDeleteOne {
	builder := c.Delete().Where(maintainer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MaintainerDeleteOne{builder}
}

// Query returns a query builder for Maintainer.
func (c *MaintainerClient) Query() *MaintainerQuery {
	return &MaintainerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMaintainer},
		inters: c.Interceptors(),
	}
}

// Get returns a Maintainer entity by its id.
func (c *MaintainerClient) Get(ctx context.Context, id uint64) (*Maintainer, error) {
	return c.Query().Where(maintainer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MaintainerClient) GetX(ctx context.Context, id uint64) *Maintainer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCities queries the cities edge of a Maintainer.
func (c *MaintainerClient) QueryCities(m *Maintainer) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(maintainer.Table, maintainer.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, maintainer.CitiesTable, maintainer.CitiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MaintainerClient) Hooks() []Hook {
	return c.hooks.Maintainer
}

// Interceptors returns the client interceptors.
func (c *MaintainerClient) Interceptors() []Interceptor {
	return c.inters.Maintainer
}

func (c *MaintainerClient) mutate(ctx context.Context, m *MaintainerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MaintainerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MaintainerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MaintainerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MaintainerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Maintainer mutation op: %q", m.Op())
	}
}

// ManagerClient is a client for the Manager schema.
type ManagerClient struct {
	config
}

// NewManagerClient returns a client for the Manager from the given config.
func NewManagerClient(c config) *ManagerClient {
	return &ManagerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `manager.Hooks(f(g(h())))`.
func (c *ManagerClient) Use(hooks ...Hook) {
	c.hooks.Manager = append(c.hooks.Manager, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `manager.Intercept(f(g(h())))`.
func (c *ManagerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Manager = append(c.inters.Manager, interceptors...)
}

// Create returns a builder for creating a Manager entity.
func (c *ManagerClient) Create() *ManagerCreate {
	mutation := newManagerMutation(c.config, OpCreate)
	return &ManagerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Manager entities.
func (c *ManagerClient) CreateBulk(builders ...*ManagerCreate) *ManagerCreateBulk {
	return &ManagerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ManagerClient) MapCreateBulk(slice any, setFunc func(*ManagerCreate, int)) *ManagerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ManagerCreateBulk{err: fmt.Errorf("calling to ManagerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ManagerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ManagerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Manager.
func (c *ManagerClient) Update() *ManagerUpdate {
	mutation := newManagerMutation(c.config, OpUpdate)
	return &ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ManagerClient) UpdateOne(m *Manager) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(m))
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ManagerClient) UpdateOneID(id uint64) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManagerID(id))
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Manager.
func (c *ManagerClient) Delete() *ManagerDelete {
	mutation := newManagerMutation(c.config, OpDelete)
	return &ManagerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ManagerClient) DeleteOne(m *Manager) *ManagerDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ManagerClient) DeleteOneID(id uint64) *ManagerDeleteOne {
	builder := c.Delete().Where(manager.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ManagerDeleteOne{builder}
}

// Query returns a query builder for Manager.
func (c *ManagerClient) Query() *ManagerQuery {
	return &ManagerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeManager},
		inters: c.Interceptors(),
	}
}

// Get returns a Manager entity by its id.
func (c *ManagerClient) Get(ctx context.Context, id uint64) (*Manager, error) {
	return c.Query().Where(manager.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ManagerClient) GetX(ctx context.Context, id uint64) *Manager {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a Manager.
func (c *ManagerClient) QueryRole(m *Manager) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(manager.Table, manager.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, manager.RoleTable, manager.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ManagerClient) Hooks() []Hook {
	hooks := c.hooks.Manager
	return append(hooks[:len(hooks):len(hooks)], manager.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ManagerClient) Interceptors() []Interceptor {
	return c.inters.Manager
}

func (c *ManagerClient) mutate(ctx context.Context, m *ManagerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ManagerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ManagerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Manager mutation op: %q", m.Op())
	}
}

// MaterialClient is a client for the Material schema.
type MaterialClient struct {
	config
}

// NewMaterialClient returns a client for the Material from the given config.
func NewMaterialClient(c config) *MaterialClient {
	return &MaterialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `material.Hooks(f(g(h())))`.
func (c *MaterialClient) Use(hooks ...Hook) {
	c.hooks.Material = append(c.hooks.Material, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `material.Intercept(f(g(h())))`.
func (c *MaterialClient) Intercept(interceptors ...Interceptor) {
	c.inters.Material = append(c.inters.Material, interceptors...)
}

// Create returns a builder for creating a Material entity.
func (c *MaterialClient) Create() *MaterialCreate {
	mutation := newMaterialMutation(c.config, OpCreate)
	return &MaterialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Material entities.
func (c *MaterialClient) CreateBulk(builders ...*MaterialCreate) *MaterialCreateBulk {
	return &MaterialCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MaterialClient) MapCreateBulk(slice any, setFunc func(*MaterialCreate, int)) *MaterialCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MaterialCreateBulk{err: fmt.Errorf("calling to MaterialClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MaterialCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MaterialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Material.
func (c *MaterialClient) Update() *MaterialUpdate {
	mutation := newMaterialMutation(c.config, OpUpdate)
	return &MaterialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MaterialClient) UpdateOne(m *Material) *MaterialUpdateOne {
	mutation := newMaterialMutation(c.config, OpUpdateOne, withMaterial(m))
	return &MaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MaterialClient) UpdateOneID(id uint64) *MaterialUpdateOne {
	mutation := newMaterialMutation(c.config, OpUpdateOne, withMaterialID(id))
	return &MaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Material.
func (c *MaterialClient) Delete() *MaterialDelete {
	mutation := newMaterialMutation(c.config, OpDelete)
	return &MaterialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MaterialClient) DeleteOne(m *Material) *MaterialDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MaterialClient) DeleteOneID(id uint64) *MaterialDeleteOne {
	builder := c.Delete().Where(material.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MaterialDeleteOne{builder}
}

// Query returns a query builder for Material.
func (c *MaterialClient) Query() *MaterialQuery {
	return &MaterialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMaterial},
		inters: c.Interceptors(),
	}
}

// Get returns a Material entity by its id.
func (c *MaterialClient) Get(ctx context.Context, id uint64) (*Material, error) {
	return c.Query().Where(material.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MaterialClient) GetX(ctx context.Context, id uint64) *Material {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MaterialClient) Hooks() []Hook {
	hooks := c.hooks.Material
	return append(hooks[:len(hooks):len(hooks)], material.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *MaterialClient) Interceptors() []Interceptor {
	return c.inters.Material
}

func (c *MaterialClient) mutate(ctx context.Context, m *MaterialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MaterialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MaterialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MaterialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Material mutation op: %q", m.Op())
	}
}

// OrderClient is a client for the Order schema.
type OrderClient struct {
	config
}

// NewOrderClient returns a client for the Order from the given config.
func NewOrderClient(c config) *OrderClient {
	return &OrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `order.Hooks(f(g(h())))`.
func (c *OrderClient) Use(hooks ...Hook) {
	c.hooks.Order = append(c.hooks.Order, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `order.Intercept(f(g(h())))`.
func (c *OrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Order = append(c.inters.Order, interceptors...)
}

// Create returns a builder for creating a Order entity.
func (c *OrderClient) Create() *OrderCreate {
	mutation := newOrderMutation(c.config, OpCreate)
	return &OrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Order entities.
func (c *OrderClient) CreateBulk(builders ...*OrderCreate) *OrderCreateBulk {
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderClient) MapCreateBulk(slice any, setFunc func(*OrderCreate, int)) *OrderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderCreateBulk{err: fmt.Errorf("calling to OrderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Order.
func (c *OrderClient) Update() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderClient) UpdateOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderClient) UpdateOneID(id uint64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Order.
func (c *OrderClient) Delete() *OrderDelete {
	mutation := newOrderMutation(c.config, OpDelete)
	return &OrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderClient) DeleteOne(o *Order) *OrderDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderClient) DeleteOneID(id uint64) *OrderDeleteOne {
	builder := c.Delete().Where(order.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderDeleteOne{builder}
}

// Query returns a query builder for Order.
func (c *OrderClient) Query() *OrderQuery {
	return &OrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a Order entity by its id.
func (c *OrderClient) Get(ctx context.Context, id uint64) (*Order, error) {
	return c.Query().Where(order.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderClient) GetX(ctx context.Context, id uint64) *Order {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a Order.
func (c *OrderClient) QueryPlan(o *Order) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.PlanTable, order.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Order.
func (c *OrderClient) QueryCity(o *Order) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.CityTable, order.CityColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Order.
func (c *OrderClient) QueryBrand(o *Order) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.BrandTable, order.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Order.
func (c *OrderClient) QueryEbike(o *Order) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.EbikeTable, order.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Order.
func (c *OrderClient) QueryAgent(o *Order) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.AgentTable, order.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Order.
func (c *OrderClient) QueryRider(o *Order) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.RiderTable, order.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Order.
func (c *OrderClient) QuerySubscribe(o *Order) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.SubscribeTable, order.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommission queries the commission edge of a Order.
func (c *OrderClient) QueryCommission(o *Order) *CommissionQuery {
	query := (&CommissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(commission.Table, commission.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.CommissionTable, order.CommissionColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Order.
func (c *OrderClient) QueryParent(o *Order) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.ParentTable, order.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Order.
func (c *OrderClient) QueryChildren(o *Order) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.ChildrenTable, order.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRefund queries the refund edge of a Order.
func (c *OrderClient) QueryRefund(o *Order) *OrderRefundQuery {
	query := (&OrderRefundClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(orderrefund.Table, orderrefund.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.RefundTable, order.RefundColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssistance queries the assistance edge of a Order.
func (c *OrderClient) QueryAssistance(o *Order) *AssistanceQuery {
	query := (&AssistanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(assistance.Table, assistance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.AssistanceTable, order.AssistanceColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCoupons queries the coupons edge of a Order.
func (c *OrderClient) QueryCoupons(o *Order) *CouponQuery {
	query := (&CouponClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, id),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.CouponsTable, order.CouponsColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderClient) Hooks() []Hook {
	hooks := c.hooks.Order
	return append(hooks[:len(hooks):len(hooks)], order.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderClient) Interceptors() []Interceptor {
	return c.inters.Order
}

func (c *OrderClient) mutate(ctx context.Context, m *OrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Order mutation op: %q", m.Op())
	}
}

// OrderRefundClient is a client for the OrderRefund schema.
type OrderRefundClient struct {
	config
}

// NewOrderRefundClient returns a client for the OrderRefund from the given config.
func NewOrderRefundClient(c config) *OrderRefundClient {
	return &OrderRefundClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderrefund.Hooks(f(g(h())))`.
func (c *OrderRefundClient) Use(hooks ...Hook) {
	c.hooks.OrderRefund = append(c.hooks.OrderRefund, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `orderrefund.Intercept(f(g(h())))`.
func (c *OrderRefundClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrderRefund = append(c.inters.OrderRefund, interceptors...)
}

// Create returns a builder for creating a OrderRefund entity.
func (c *OrderRefundClient) Create() *OrderRefundCreate {
	mutation := newOrderRefundMutation(c.config, OpCreate)
	return &OrderRefundCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderRefund entities.
func (c *OrderRefundClient) CreateBulk(builders ...*OrderRefundCreate) *OrderRefundCreateBulk {
	return &OrderRefundCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrderRefundClient) MapCreateBulk(slice any, setFunc func(*OrderRefundCreate, int)) *OrderRefundCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrderRefundCreateBulk{err: fmt.Errorf("calling to OrderRefundClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrderRefundCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrderRefundCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderRefund.
func (c *OrderRefundClient) Update() *OrderRefundUpdate {
	mutation := newOrderRefundMutation(c.config, OpUpdate)
	return &OrderRefundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderRefundClient) UpdateOne(or *OrderRefund) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefund(or))
	return &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderRefundClient) UpdateOneID(id uint64) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefundID(id))
	return &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderRefund.
func (c *OrderRefundClient) Delete() *OrderRefundDelete {
	mutation := newOrderRefundMutation(c.config, OpDelete)
	return &OrderRefundDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderRefundClient) DeleteOne(or *OrderRefund) *OrderRefundDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrderRefundClient) DeleteOneID(id uint64) *OrderRefundDeleteOne {
	builder := c.Delete().Where(orderrefund.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderRefundDeleteOne{builder}
}

// Query returns a query builder for OrderRefund.
func (c *OrderRefundClient) Query() *OrderRefundQuery {
	return &OrderRefundQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrderRefund},
		inters: c.Interceptors(),
	}
}

// Get returns a OrderRefund entity by its id.
func (c *OrderRefundClient) Get(ctx context.Context, id uint64) (*OrderRefund, error) {
	return c.Query().Where(orderrefund.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderRefundClient) GetX(ctx context.Context, id uint64) *OrderRefund {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrder queries the order edge of a OrderRefund.
func (c *OrderRefundClient) QueryOrder(or *OrderRefund) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(orderrefund.Table, orderrefund.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, orderrefund.OrderTable, orderrefund.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrderRefundClient) Hooks() []Hook {
	hooks := c.hooks.OrderRefund
	return append(hooks[:len(hooks):len(hooks)], orderrefund.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrderRefundClient) Interceptors() []Interceptor {
	return c.inters.OrderRefund
}

func (c *OrderRefundClient) mutate(ctx context.Context, m *OrderRefundMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrderRefundCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrderRefundUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrderRefundDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OrderRefund mutation op: %q", m.Op())
	}
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `person.Intercept(f(g(h())))`.
func (c *PersonClient) Intercept(interceptors ...Interceptor) {
	c.inters.Person = append(c.inters.Person, interceptors...)
}

// Create returns a builder for creating a Person entity.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonClient) MapCreateBulk(slice any, setFunc func(*PersonCreate, int)) *PersonCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonCreateBulk{err: fmt.Errorf("calling to PersonClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id uint64) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonClient) DeleteOneID(id uint64) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePerson},
		inters: c.Interceptors(),
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id uint64) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id uint64) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRiders queries the riders edge of a Person.
func (c *PersonClient) QueryRiders(pe *Person) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(person.Table, person.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, person.RidersTable, person.RidersColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	hooks := c.hooks.Person
	return append(hooks[:len(hooks):len(hooks)], person.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PersonClient) Interceptors() []Interceptor {
	return c.inters.Person
}

func (c *PersonClient) mutate(ctx context.Context, m *PersonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Person mutation op: %q", m.Op())
	}
}

// PlanClient is a client for the Plan schema.
type PlanClient struct {
	config
}

// NewPlanClient returns a client for the Plan from the given config.
func NewPlanClient(c config) *PlanClient {
	return &PlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `plan.Hooks(f(g(h())))`.
func (c *PlanClient) Use(hooks ...Hook) {
	c.hooks.Plan = append(c.hooks.Plan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `plan.Intercept(f(g(h())))`.
func (c *PlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.Plan = append(c.inters.Plan, interceptors...)
}

// Create returns a builder for creating a Plan entity.
func (c *PlanClient) Create() *PlanCreate {
	mutation := newPlanMutation(c.config, OpCreate)
	return &PlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Plan entities.
func (c *PlanClient) CreateBulk(builders ...*PlanCreate) *PlanCreateBulk {
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanClient) MapCreateBulk(slice any, setFunc func(*PlanCreate, int)) *PlanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanCreateBulk{err: fmt.Errorf("calling to PlanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Plan.
func (c *PlanClient) Update() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanClient) UpdateOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanClient) UpdateOneID(id uint64) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Plan.
func (c *PlanClient) Delete() *PlanDelete {
	mutation := newPlanMutation(c.config, OpDelete)
	return &PlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanClient) DeleteOne(pl *Plan) *PlanDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanClient) DeleteOneID(id uint64) *PlanDeleteOne {
	builder := c.Delete().Where(plan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanDeleteOne{builder}
}

// Query returns a query builder for Plan.
func (c *PlanClient) Query() *PlanQuery {
	return &PlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlan},
		inters: c.Interceptors(),
	}
}

// Get returns a Plan entity by its id.
func (c *PlanClient) Get(ctx context.Context, id uint64) (*Plan, error) {
	return c.Query().Where(plan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanClient) GetX(ctx context.Context, id uint64) *Plan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAgreement queries the agreement edge of a Plan.
func (c *PlanClient) QueryAgreement(pl *Plan) *AgreementQuery {
	query := (&AgreementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(agreement.Table, agreement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, plan.AgreementTable, plan.AgreementColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCities queries the cities edge of a Plan.
func (c *PlanClient) QueryCities(pl *Plan) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, plan.CitiesTable, plan.CitiesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Plan.
func (c *PlanClient) QueryParent(pl *Plan) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, plan.ParentTable, plan.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryComplexes queries the complexes edge of a Plan.
func (c *PlanClient) QueryComplexes(pl *Plan) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.ComplexesTable, plan.ComplexesColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommissions queries the commissions edge of a Plan.
func (c *PlanClient) QueryCommissions(pl *Plan) *PromotionCommissionPlanQuery {
	query := (&PromotionCommissionPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(promotioncommissionplan.Table, promotioncommissionplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, plan.CommissionsTable, plan.CommissionsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Plan.
func (c *PlanClient) QueryBrand(pl *Plan) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(plan.Table, plan.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, plan.BrandTable, plan.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanClient) Hooks() []Hook {
	hooks := c.hooks.Plan
	return append(hooks[:len(hooks):len(hooks)], plan.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PlanClient) Interceptors() []Interceptor {
	return c.inters.Plan
}

func (c *PlanClient) mutate(ctx context.Context, m *PlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Plan mutation op: %q", m.Op())
	}
}

// PlanIntroduceClient is a client for the PlanIntroduce schema.
type PlanIntroduceClient struct {
	config
}

// NewPlanIntroduceClient returns a client for the PlanIntroduce from the given config.
func NewPlanIntroduceClient(c config) *PlanIntroduceClient {
	return &PlanIntroduceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `planintroduce.Hooks(f(g(h())))`.
func (c *PlanIntroduceClient) Use(hooks ...Hook) {
	c.hooks.PlanIntroduce = append(c.hooks.PlanIntroduce, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `planintroduce.Intercept(f(g(h())))`.
func (c *PlanIntroduceClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlanIntroduce = append(c.inters.PlanIntroduce, interceptors...)
}

// Create returns a builder for creating a PlanIntroduce entity.
func (c *PlanIntroduceClient) Create() *PlanIntroduceCreate {
	mutation := newPlanIntroduceMutation(c.config, OpCreate)
	return &PlanIntroduceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlanIntroduce entities.
func (c *PlanIntroduceClient) CreateBulk(builders ...*PlanIntroduceCreate) *PlanIntroduceCreateBulk {
	return &PlanIntroduceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PlanIntroduceClient) MapCreateBulk(slice any, setFunc func(*PlanIntroduceCreate, int)) *PlanIntroduceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PlanIntroduceCreateBulk{err: fmt.Errorf("calling to PlanIntroduceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PlanIntroduceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PlanIntroduceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlanIntroduce.
func (c *PlanIntroduceClient) Update() *PlanIntroduceUpdate {
	mutation := newPlanIntroduceMutation(c.config, OpUpdate)
	return &PlanIntroduceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlanIntroduceClient) UpdateOne(pi *PlanIntroduce) *PlanIntroduceUpdateOne {
	mutation := newPlanIntroduceMutation(c.config, OpUpdateOne, withPlanIntroduce(pi))
	return &PlanIntroduceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlanIntroduceClient) UpdateOneID(id uint64) *PlanIntroduceUpdateOne {
	mutation := newPlanIntroduceMutation(c.config, OpUpdateOne, withPlanIntroduceID(id))
	return &PlanIntroduceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlanIntroduce.
func (c *PlanIntroduceClient) Delete() *PlanIntroduceDelete {
	mutation := newPlanIntroduceMutation(c.config, OpDelete)
	return &PlanIntroduceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlanIntroduceClient) DeleteOne(pi *PlanIntroduce) *PlanIntroduceDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlanIntroduceClient) DeleteOneID(id uint64) *PlanIntroduceDeleteOne {
	builder := c.Delete().Where(planintroduce.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlanIntroduceDeleteOne{builder}
}

// Query returns a query builder for PlanIntroduce.
func (c *PlanIntroduceClient) Query() *PlanIntroduceQuery {
	return &PlanIntroduceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlanIntroduce},
		inters: c.Interceptors(),
	}
}

// Get returns a PlanIntroduce entity by its id.
func (c *PlanIntroduceClient) Get(ctx context.Context, id uint64) (*PlanIntroduce, error) {
	return c.Query().Where(planintroduce.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlanIntroduceClient) GetX(ctx context.Context, id uint64) *PlanIntroduce {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a PlanIntroduce.
func (c *PlanIntroduceClient) QueryBrand(pi *PlanIntroduce) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(planintroduce.Table, planintroduce.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, planintroduce.BrandTable, planintroduce.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(pi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlanIntroduceClient) Hooks() []Hook {
	return c.hooks.PlanIntroduce
}

// Interceptors returns the client interceptors.
func (c *PlanIntroduceClient) Interceptors() []Interceptor {
	return c.inters.PlanIntroduce
}

func (c *PlanIntroduceClient) mutate(ctx context.Context, m *PlanIntroduceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlanIntroduceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlanIntroduceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlanIntroduceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlanIntroduceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlanIntroduce mutation op: %q", m.Op())
	}
}

// PointLogClient is a client for the PointLog schema.
type PointLogClient struct {
	config
}

// NewPointLogClient returns a client for the PointLog from the given config.
func NewPointLogClient(c config) *PointLogClient {
	return &PointLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `pointlog.Hooks(f(g(h())))`.
func (c *PointLogClient) Use(hooks ...Hook) {
	c.hooks.PointLog = append(c.hooks.PointLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `pointlog.Intercept(f(g(h())))`.
func (c *PointLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.PointLog = append(c.inters.PointLog, interceptors...)
}

// Create returns a builder for creating a PointLog entity.
func (c *PointLogClient) Create() *PointLogCreate {
	mutation := newPointLogMutation(c.config, OpCreate)
	return &PointLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PointLog entities.
func (c *PointLogClient) CreateBulk(builders ...*PointLogCreate) *PointLogCreateBulk {
	return &PointLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PointLogClient) MapCreateBulk(slice any, setFunc func(*PointLogCreate, int)) *PointLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PointLogCreateBulk{err: fmt.Errorf("calling to PointLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PointLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PointLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PointLog.
func (c *PointLogClient) Update() *PointLogUpdate {
	mutation := newPointLogMutation(c.config, OpUpdate)
	return &PointLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PointLogClient) UpdateOne(pl *PointLog) *PointLogUpdateOne {
	mutation := newPointLogMutation(c.config, OpUpdateOne, withPointLog(pl))
	return &PointLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PointLogClient) UpdateOneID(id uint64) *PointLogUpdateOne {
	mutation := newPointLogMutation(c.config, OpUpdateOne, withPointLogID(id))
	return &PointLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PointLog.
func (c *PointLogClient) Delete() *PointLogDelete {
	mutation := newPointLogMutation(c.config, OpDelete)
	return &PointLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PointLogClient) DeleteOne(pl *PointLog) *PointLogDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PointLogClient) DeleteOneID(id uint64) *PointLogDeleteOne {
	builder := c.Delete().Where(pointlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PointLogDeleteOne{builder}
}

// Query returns a query builder for PointLog.
func (c *PointLogClient) Query() *PointLogQuery {
	return &PointLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePointLog},
		inters: c.Interceptors(),
	}
}

// Get returns a PointLog entity by its id.
func (c *PointLogClient) Get(ctx context.Context, id uint64) (*PointLog, error) {
	return c.Query().Where(pointlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PointLogClient) GetX(ctx context.Context, id uint64) *PointLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a PointLog.
func (c *PointLogClient) QueryRider(pl *PointLog) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointlog.Table, pointlog.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pointlog.RiderTable, pointlog.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a PointLog.
func (c *PointLogClient) QueryOrder(pl *PointLog) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(pointlog.Table, pointlog.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, pointlog.OrderTable, pointlog.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PointLogClient) Hooks() []Hook {
	hooks := c.hooks.PointLog
	return append(hooks[:len(hooks):len(hooks)], pointlog.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PointLogClient) Interceptors() []Interceptor {
	return c.inters.PointLog
}

func (c *PointLogClient) mutate(ctx context.Context, m *PointLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PointLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PointLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PointLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PointLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PointLog mutation op: %q", m.Op())
	}
}

// PromotionAchievementClient is a client for the PromotionAchievement schema.
type PromotionAchievementClient struct {
	config
}

// NewPromotionAchievementClient returns a client for the PromotionAchievement from the given config.
func NewPromotionAchievementClient(c config) *PromotionAchievementClient {
	return &PromotionAchievementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionachievement.Hooks(f(g(h())))`.
func (c *PromotionAchievementClient) Use(hooks ...Hook) {
	c.hooks.PromotionAchievement = append(c.hooks.PromotionAchievement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionachievement.Intercept(f(g(h())))`.
func (c *PromotionAchievementClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionAchievement = append(c.inters.PromotionAchievement, interceptors...)
}

// Create returns a builder for creating a PromotionAchievement entity.
func (c *PromotionAchievementClient) Create() *PromotionAchievementCreate {
	mutation := newPromotionAchievementMutation(c.config, OpCreate)
	return &PromotionAchievementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionAchievement entities.
func (c *PromotionAchievementClient) CreateBulk(builders ...*PromotionAchievementCreate) *PromotionAchievementCreateBulk {
	return &PromotionAchievementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionAchievementClient) MapCreateBulk(slice any, setFunc func(*PromotionAchievementCreate, int)) *PromotionAchievementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionAchievementCreateBulk{err: fmt.Errorf("calling to PromotionAchievementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionAchievementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionAchievementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionAchievement.
func (c *PromotionAchievementClient) Update() *PromotionAchievementUpdate {
	mutation := newPromotionAchievementMutation(c.config, OpUpdate)
	return &PromotionAchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionAchievementClient) UpdateOne(pa *PromotionAchievement) *PromotionAchievementUpdateOne {
	mutation := newPromotionAchievementMutation(c.config, OpUpdateOne, withPromotionAchievement(pa))
	return &PromotionAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionAchievementClient) UpdateOneID(id uint64) *PromotionAchievementUpdateOne {
	mutation := newPromotionAchievementMutation(c.config, OpUpdateOne, withPromotionAchievementID(id))
	return &PromotionAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionAchievement.
func (c *PromotionAchievementClient) Delete() *PromotionAchievementDelete {
	mutation := newPromotionAchievementMutation(c.config, OpDelete)
	return &PromotionAchievementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionAchievementClient) DeleteOne(pa *PromotionAchievement) *PromotionAchievementDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionAchievementClient) DeleteOneID(id uint64) *PromotionAchievementDeleteOne {
	builder := c.Delete().Where(promotionachievement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionAchievementDeleteOne{builder}
}

// Query returns a query builder for PromotionAchievement.
func (c *PromotionAchievementClient) Query() *PromotionAchievementQuery {
	return &PromotionAchievementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionAchievement},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionAchievement entity by its id.
func (c *PromotionAchievementClient) Get(ctx context.Context, id uint64) (*PromotionAchievement, error) {
	return c.Query().Where(promotionachievement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionAchievementClient) GetX(ctx context.Context, id uint64) *PromotionAchievement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromotionAchievementClient) Hooks() []Hook {
	hooks := c.hooks.PromotionAchievement
	return append(hooks[:len(hooks):len(hooks)], promotionachievement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionAchievementClient) Interceptors() []Interceptor {
	return c.inters.PromotionAchievement
}

func (c *PromotionAchievementClient) mutate(ctx context.Context, m *PromotionAchievementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionAchievementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionAchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionAchievementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionAchievement mutation op: %q", m.Op())
	}
}

// PromotionBankCardClient is a client for the PromotionBankCard schema.
type PromotionBankCardClient struct {
	config
}

// NewPromotionBankCardClient returns a client for the PromotionBankCard from the given config.
func NewPromotionBankCardClient(c config) *PromotionBankCardClient {
	return &PromotionBankCardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionbankcard.Hooks(f(g(h())))`.
func (c *PromotionBankCardClient) Use(hooks ...Hook) {
	c.hooks.PromotionBankCard = append(c.hooks.PromotionBankCard, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionbankcard.Intercept(f(g(h())))`.
func (c *PromotionBankCardClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionBankCard = append(c.inters.PromotionBankCard, interceptors...)
}

// Create returns a builder for creating a PromotionBankCard entity.
func (c *PromotionBankCardClient) Create() *PromotionBankCardCreate {
	mutation := newPromotionBankCardMutation(c.config, OpCreate)
	return &PromotionBankCardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionBankCard entities.
func (c *PromotionBankCardClient) CreateBulk(builders ...*PromotionBankCardCreate) *PromotionBankCardCreateBulk {
	return &PromotionBankCardCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionBankCardClient) MapCreateBulk(slice any, setFunc func(*PromotionBankCardCreate, int)) *PromotionBankCardCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionBankCardCreateBulk{err: fmt.Errorf("calling to PromotionBankCardClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionBankCardCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionBankCardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionBankCard.
func (c *PromotionBankCardClient) Update() *PromotionBankCardUpdate {
	mutation := newPromotionBankCardMutation(c.config, OpUpdate)
	return &PromotionBankCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionBankCardClient) UpdateOne(pbc *PromotionBankCard) *PromotionBankCardUpdateOne {
	mutation := newPromotionBankCardMutation(c.config, OpUpdateOne, withPromotionBankCard(pbc))
	return &PromotionBankCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionBankCardClient) UpdateOneID(id uint64) *PromotionBankCardUpdateOne {
	mutation := newPromotionBankCardMutation(c.config, OpUpdateOne, withPromotionBankCardID(id))
	return &PromotionBankCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionBankCard.
func (c *PromotionBankCardClient) Delete() *PromotionBankCardDelete {
	mutation := newPromotionBankCardMutation(c.config, OpDelete)
	return &PromotionBankCardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionBankCardClient) DeleteOne(pbc *PromotionBankCard) *PromotionBankCardDeleteOne {
	return c.DeleteOneID(pbc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionBankCardClient) DeleteOneID(id uint64) *PromotionBankCardDeleteOne {
	builder := c.Delete().Where(promotionbankcard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionBankCardDeleteOne{builder}
}

// Query returns a query builder for PromotionBankCard.
func (c *PromotionBankCardClient) Query() *PromotionBankCardQuery {
	return &PromotionBankCardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionBankCard},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionBankCard entity by its id.
func (c *PromotionBankCardClient) Get(ctx context.Context, id uint64) (*PromotionBankCard, error) {
	return c.Query().Where(promotionbankcard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionBankCardClient) GetX(ctx context.Context, id uint64) *PromotionBankCard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMember queries the member edge of a PromotionBankCard.
func (c *PromotionBankCardClient) QueryMember(pbc *PromotionBankCard) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pbc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionbankcard.Table, promotionbankcard.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotionbankcard.MemberTable, promotionbankcard.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pbc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWithdrawals queries the withdrawals edge of a PromotionBankCard.
func (c *PromotionBankCardClient) QueryWithdrawals(pbc *PromotionBankCard) *PromotionWithdrawalQuery {
	query := (&PromotionWithdrawalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pbc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionbankcard.Table, promotionbankcard.FieldID, id),
			sqlgraph.To(promotionwithdrawal.Table, promotionwithdrawal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionbankcard.WithdrawalsTable, promotionbankcard.WithdrawalsColumn),
		)
		fromV = sqlgraph.Neighbors(pbc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionBankCardClient) Hooks() []Hook {
	hooks := c.hooks.PromotionBankCard
	return append(hooks[:len(hooks):len(hooks)], promotionbankcard.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionBankCardClient) Interceptors() []Interceptor {
	return c.inters.PromotionBankCard
}

func (c *PromotionBankCardClient) mutate(ctx context.Context, m *PromotionBankCardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionBankCardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionBankCardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionBankCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionBankCardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionBankCard mutation op: %q", m.Op())
	}
}

// PromotionCommissionClient is a client for the PromotionCommission schema.
type PromotionCommissionClient struct {
	config
}

// NewPromotionCommissionClient returns a client for the PromotionCommission from the given config.
func NewPromotionCommissionClient(c config) *PromotionCommissionClient {
	return &PromotionCommissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotioncommission.Hooks(f(g(h())))`.
func (c *PromotionCommissionClient) Use(hooks ...Hook) {
	c.hooks.PromotionCommission = append(c.hooks.PromotionCommission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotioncommission.Intercept(f(g(h())))`.
func (c *PromotionCommissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionCommission = append(c.inters.PromotionCommission, interceptors...)
}

// Create returns a builder for creating a PromotionCommission entity.
func (c *PromotionCommissionClient) Create() *PromotionCommissionCreate {
	mutation := newPromotionCommissionMutation(c.config, OpCreate)
	return &PromotionCommissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionCommission entities.
func (c *PromotionCommissionClient) CreateBulk(builders ...*PromotionCommissionCreate) *PromotionCommissionCreateBulk {
	return &PromotionCommissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionCommissionClient) MapCreateBulk(slice any, setFunc func(*PromotionCommissionCreate, int)) *PromotionCommissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionCommissionCreateBulk{err: fmt.Errorf("calling to PromotionCommissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionCommissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionCommissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionCommission.
func (c *PromotionCommissionClient) Update() *PromotionCommissionUpdate {
	mutation := newPromotionCommissionMutation(c.config, OpUpdate)
	return &PromotionCommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionCommissionClient) UpdateOne(pc *PromotionCommission) *PromotionCommissionUpdateOne {
	mutation := newPromotionCommissionMutation(c.config, OpUpdateOne, withPromotionCommission(pc))
	return &PromotionCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionCommissionClient) UpdateOneID(id uint64) *PromotionCommissionUpdateOne {
	mutation := newPromotionCommissionMutation(c.config, OpUpdateOne, withPromotionCommissionID(id))
	return &PromotionCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionCommission.
func (c *PromotionCommissionClient) Delete() *PromotionCommissionDelete {
	mutation := newPromotionCommissionMutation(c.config, OpDelete)
	return &PromotionCommissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionCommissionClient) DeleteOne(pc *PromotionCommission) *PromotionCommissionDeleteOne {
	return c.DeleteOneID(pc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionCommissionClient) DeleteOneID(id uint64) *PromotionCommissionDeleteOne {
	builder := c.Delete().Where(promotioncommission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionCommissionDeleteOne{builder}
}

// Query returns a query builder for PromotionCommission.
func (c *PromotionCommissionClient) Query() *PromotionCommissionQuery {
	return &PromotionCommissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionCommission},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionCommission entity by its id.
func (c *PromotionCommissionClient) Get(ctx context.Context, id uint64) (*PromotionCommission, error) {
	return c.Query().Where(promotioncommission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionCommissionClient) GetX(ctx context.Context, id uint64) *PromotionCommission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMember queries the member edge of a PromotionCommission.
func (c *PromotionCommissionClient) QueryMember(pc *PromotionCommission) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommission.Table, promotioncommission.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotioncommission.MemberTable, promotioncommission.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlans queries the plans edge of a PromotionCommission.
func (c *PromotionCommissionClient) QueryPlans(pc *PromotionCommission) *PromotionCommissionPlanQuery {
	query := (&PromotionCommissionPlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommission.Table, promotioncommission.FieldID, id),
			sqlgraph.To(promotioncommissionplan.Table, promotioncommissionplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotioncommission.PlansTable, promotioncommission.PlansColumn),
		)
		fromV = sqlgraph.Neighbors(pc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionCommissionClient) Hooks() []Hook {
	hooks := c.hooks.PromotionCommission
	return append(hooks[:len(hooks):len(hooks)], promotioncommission.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionCommissionClient) Interceptors() []Interceptor {
	return c.inters.PromotionCommission
}

func (c *PromotionCommissionClient) mutate(ctx context.Context, m *PromotionCommissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionCommissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionCommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionCommissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionCommission mutation op: %q", m.Op())
	}
}

// PromotionCommissionPlanClient is a client for the PromotionCommissionPlan schema.
type PromotionCommissionPlanClient struct {
	config
}

// NewPromotionCommissionPlanClient returns a client for the PromotionCommissionPlan from the given config.
func NewPromotionCommissionPlanClient(c config) *PromotionCommissionPlanClient {
	return &PromotionCommissionPlanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotioncommissionplan.Hooks(f(g(h())))`.
func (c *PromotionCommissionPlanClient) Use(hooks ...Hook) {
	c.hooks.PromotionCommissionPlan = append(c.hooks.PromotionCommissionPlan, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotioncommissionplan.Intercept(f(g(h())))`.
func (c *PromotionCommissionPlanClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionCommissionPlan = append(c.inters.PromotionCommissionPlan, interceptors...)
}

// Create returns a builder for creating a PromotionCommissionPlan entity.
func (c *PromotionCommissionPlanClient) Create() *PromotionCommissionPlanCreate {
	mutation := newPromotionCommissionPlanMutation(c.config, OpCreate)
	return &PromotionCommissionPlanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionCommissionPlan entities.
func (c *PromotionCommissionPlanClient) CreateBulk(builders ...*PromotionCommissionPlanCreate) *PromotionCommissionPlanCreateBulk {
	return &PromotionCommissionPlanCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionCommissionPlanClient) MapCreateBulk(slice any, setFunc func(*PromotionCommissionPlanCreate, int)) *PromotionCommissionPlanCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionCommissionPlanCreateBulk{err: fmt.Errorf("calling to PromotionCommissionPlanClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionCommissionPlanCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionCommissionPlanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) Update() *PromotionCommissionPlanUpdate {
	mutation := newPromotionCommissionPlanMutation(c.config, OpUpdate)
	return &PromotionCommissionPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionCommissionPlanClient) UpdateOne(pcp *PromotionCommissionPlan) *PromotionCommissionPlanUpdateOne {
	mutation := newPromotionCommissionPlanMutation(c.config, OpUpdateOne, withPromotionCommissionPlan(pcp))
	return &PromotionCommissionPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionCommissionPlanClient) UpdateOneID(id uint64) *PromotionCommissionPlanUpdateOne {
	mutation := newPromotionCommissionPlanMutation(c.config, OpUpdateOne, withPromotionCommissionPlanID(id))
	return &PromotionCommissionPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) Delete() *PromotionCommissionPlanDelete {
	mutation := newPromotionCommissionPlanMutation(c.config, OpDelete)
	return &PromotionCommissionPlanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionCommissionPlanClient) DeleteOne(pcp *PromotionCommissionPlan) *PromotionCommissionPlanDeleteOne {
	return c.DeleteOneID(pcp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionCommissionPlanClient) DeleteOneID(id uint64) *PromotionCommissionPlanDeleteOne {
	builder := c.Delete().Where(promotioncommissionplan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionCommissionPlanDeleteOne{builder}
}

// Query returns a query builder for PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) Query() *PromotionCommissionPlanQuery {
	return &PromotionCommissionPlanQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionCommissionPlan},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionCommissionPlan entity by its id.
func (c *PromotionCommissionPlanClient) Get(ctx context.Context, id uint64) (*PromotionCommissionPlan, error) {
	return c.Query().Where(promotioncommissionplan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionCommissionPlanClient) GetX(ctx context.Context, id uint64) *PromotionCommissionPlan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMember queries the member edge of a PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) QueryMember(pcp *PromotionCommissionPlan) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pcp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommissionplan.Table, promotioncommissionplan.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotioncommissionplan.MemberTable, promotioncommissionplan.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pcp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPromotionCommission queries the promotion_commission edge of a PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) QueryPromotionCommission(pcp *PromotionCommissionPlan) *PromotionCommissionQuery {
	query := (&PromotionCommissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pcp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommissionplan.Table, promotioncommissionplan.FieldID, id),
			sqlgraph.To(promotioncommission.Table, promotioncommission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotioncommissionplan.PromotionCommissionTable, promotioncommissionplan.PromotionCommissionColumn),
		)
		fromV = sqlgraph.Neighbors(pcp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) QueryPlan(pcp *PromotionCommissionPlan) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pcp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommissionplan.Table, promotioncommissionplan.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotioncommissionplan.PlanTable, promotioncommissionplan.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(pcp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionCommissionPlanClient) Hooks() []Hook {
	return c.hooks.PromotionCommissionPlan
}

// Interceptors returns the client interceptors.
func (c *PromotionCommissionPlanClient) Interceptors() []Interceptor {
	return c.inters.PromotionCommissionPlan
}

func (c *PromotionCommissionPlanClient) mutate(ctx context.Context, m *PromotionCommissionPlanMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionCommissionPlanCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionCommissionPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionCommissionPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionCommissionPlanDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionCommissionPlan mutation op: %q", m.Op())
	}
}

// PromotionEarningsClient is a client for the PromotionEarnings schema.
type PromotionEarningsClient struct {
	config
}

// NewPromotionEarningsClient returns a client for the PromotionEarnings from the given config.
func NewPromotionEarningsClient(c config) *PromotionEarningsClient {
	return &PromotionEarningsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionearnings.Hooks(f(g(h())))`.
func (c *PromotionEarningsClient) Use(hooks ...Hook) {
	c.hooks.PromotionEarnings = append(c.hooks.PromotionEarnings, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionearnings.Intercept(f(g(h())))`.
func (c *PromotionEarningsClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionEarnings = append(c.inters.PromotionEarnings, interceptors...)
}

// Create returns a builder for creating a PromotionEarnings entity.
func (c *PromotionEarningsClient) Create() *PromotionEarningsCreate {
	mutation := newPromotionEarningsMutation(c.config, OpCreate)
	return &PromotionEarningsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionEarnings entities.
func (c *PromotionEarningsClient) CreateBulk(builders ...*PromotionEarningsCreate) *PromotionEarningsCreateBulk {
	return &PromotionEarningsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionEarningsClient) MapCreateBulk(slice any, setFunc func(*PromotionEarningsCreate, int)) *PromotionEarningsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionEarningsCreateBulk{err: fmt.Errorf("calling to PromotionEarningsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionEarningsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionEarningsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionEarnings.
func (c *PromotionEarningsClient) Update() *PromotionEarningsUpdate {
	mutation := newPromotionEarningsMutation(c.config, OpUpdate)
	return &PromotionEarningsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionEarningsClient) UpdateOne(pe *PromotionEarnings) *PromotionEarningsUpdateOne {
	mutation := newPromotionEarningsMutation(c.config, OpUpdateOne, withPromotionEarnings(pe))
	return &PromotionEarningsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionEarningsClient) UpdateOneID(id uint64) *PromotionEarningsUpdateOne {
	mutation := newPromotionEarningsMutation(c.config, OpUpdateOne, withPromotionEarningsID(id))
	return &PromotionEarningsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionEarnings.
func (c *PromotionEarningsClient) Delete() *PromotionEarningsDelete {
	mutation := newPromotionEarningsMutation(c.config, OpDelete)
	return &PromotionEarningsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionEarningsClient) DeleteOne(pe *PromotionEarnings) *PromotionEarningsDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionEarningsClient) DeleteOneID(id uint64) *PromotionEarningsDeleteOne {
	builder := c.Delete().Where(promotionearnings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionEarningsDeleteOne{builder}
}

// Query returns a query builder for PromotionEarnings.
func (c *PromotionEarningsClient) Query() *PromotionEarningsQuery {
	return &PromotionEarningsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionEarnings},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionEarnings entity by its id.
func (c *PromotionEarningsClient) Get(ctx context.Context, id uint64) (*PromotionEarnings, error) {
	return c.Query().Where(promotionearnings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionEarningsClient) GetX(ctx context.Context, id uint64) *PromotionEarnings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCommission queries the commission edge of a PromotionEarnings.
func (c *PromotionEarningsClient) QueryCommission(pe *PromotionEarnings) *PromotionCommissionQuery {
	query := (&PromotionCommissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionearnings.Table, promotionearnings.FieldID, id),
			sqlgraph.To(promotioncommission.Table, promotioncommission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionearnings.CommissionTable, promotionearnings.CommissionColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMember queries the member edge of a PromotionEarnings.
func (c *PromotionEarningsClient) QueryMember(pe *PromotionEarnings) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionearnings.Table, promotionearnings.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionearnings.MemberTable, promotionearnings.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a PromotionEarnings.
func (c *PromotionEarningsClient) QueryRider(pe *PromotionEarnings) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionearnings.Table, promotionearnings.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionearnings.RiderTable, promotionearnings.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrder queries the order edge of a PromotionEarnings.
func (c *PromotionEarningsClient) QueryOrder(pe *PromotionEarnings) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionearnings.Table, promotionearnings.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionearnings.OrderTable, promotionearnings.OrderColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a PromotionEarnings.
func (c *PromotionEarningsClient) QueryPlan(pe *PromotionEarnings) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionearnings.Table, promotionearnings.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionearnings.PlanTable, promotionearnings.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionEarningsClient) Hooks() []Hook {
	hooks := c.hooks.PromotionEarnings
	return append(hooks[:len(hooks):len(hooks)], promotionearnings.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionEarningsClient) Interceptors() []Interceptor {
	return c.inters.PromotionEarnings
}

func (c *PromotionEarningsClient) mutate(ctx context.Context, m *PromotionEarningsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionEarningsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionEarningsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionEarningsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionEarningsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionEarnings mutation op: %q", m.Op())
	}
}

// PromotionGrowthClient is a client for the PromotionGrowth schema.
type PromotionGrowthClient struct {
	config
}

// NewPromotionGrowthClient returns a client for the PromotionGrowth from the given config.
func NewPromotionGrowthClient(c config) *PromotionGrowthClient {
	return &PromotionGrowthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotiongrowth.Hooks(f(g(h())))`.
func (c *PromotionGrowthClient) Use(hooks ...Hook) {
	c.hooks.PromotionGrowth = append(c.hooks.PromotionGrowth, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotiongrowth.Intercept(f(g(h())))`.
func (c *PromotionGrowthClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionGrowth = append(c.inters.PromotionGrowth, interceptors...)
}

// Create returns a builder for creating a PromotionGrowth entity.
func (c *PromotionGrowthClient) Create() *PromotionGrowthCreate {
	mutation := newPromotionGrowthMutation(c.config, OpCreate)
	return &PromotionGrowthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionGrowth entities.
func (c *PromotionGrowthClient) CreateBulk(builders ...*PromotionGrowthCreate) *PromotionGrowthCreateBulk {
	return &PromotionGrowthCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionGrowthClient) MapCreateBulk(slice any, setFunc func(*PromotionGrowthCreate, int)) *PromotionGrowthCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionGrowthCreateBulk{err: fmt.Errorf("calling to PromotionGrowthClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionGrowthCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionGrowthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionGrowth.
func (c *PromotionGrowthClient) Update() *PromotionGrowthUpdate {
	mutation := newPromotionGrowthMutation(c.config, OpUpdate)
	return &PromotionGrowthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionGrowthClient) UpdateOne(pg *PromotionGrowth) *PromotionGrowthUpdateOne {
	mutation := newPromotionGrowthMutation(c.config, OpUpdateOne, withPromotionGrowth(pg))
	return &PromotionGrowthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionGrowthClient) UpdateOneID(id uint64) *PromotionGrowthUpdateOne {
	mutation := newPromotionGrowthMutation(c.config, OpUpdateOne, withPromotionGrowthID(id))
	return &PromotionGrowthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionGrowth.
func (c *PromotionGrowthClient) Delete() *PromotionGrowthDelete {
	mutation := newPromotionGrowthMutation(c.config, OpDelete)
	return &PromotionGrowthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionGrowthClient) DeleteOne(pg *PromotionGrowth) *PromotionGrowthDeleteOne {
	return c.DeleteOneID(pg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionGrowthClient) DeleteOneID(id uint64) *PromotionGrowthDeleteOne {
	builder := c.Delete().Where(promotiongrowth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionGrowthDeleteOne{builder}
}

// Query returns a query builder for PromotionGrowth.
func (c *PromotionGrowthClient) Query() *PromotionGrowthQuery {
	return &PromotionGrowthQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionGrowth},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionGrowth entity by its id.
func (c *PromotionGrowthClient) Get(ctx context.Context, id uint64) (*PromotionGrowth, error) {
	return c.Query().Where(promotiongrowth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionGrowthClient) GetX(ctx context.Context, id uint64) *PromotionGrowth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMember queries the member edge of a PromotionGrowth.
func (c *PromotionGrowthClient) QueryMember(pg *PromotionGrowth) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotiongrowth.Table, promotiongrowth.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotiongrowth.MemberTable, promotiongrowth.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTask queries the task edge of a PromotionGrowth.
func (c *PromotionGrowthClient) QueryTask(pg *PromotionGrowth) *PromotionLevelTaskQuery {
	query := (&PromotionLevelTaskClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotiongrowth.Table, promotiongrowth.FieldID, id),
			sqlgraph.To(promotionleveltask.Table, promotionleveltask.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotiongrowth.TaskTable, promotiongrowth.TaskColumn),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a PromotionGrowth.
func (c *PromotionGrowthClient) QueryRider(pg *PromotionGrowth) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotiongrowth.Table, promotiongrowth.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotiongrowth.RiderTable, promotiongrowth.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(pg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionGrowthClient) Hooks() []Hook {
	return c.hooks.PromotionGrowth
}

// Interceptors returns the client interceptors.
func (c *PromotionGrowthClient) Interceptors() []Interceptor {
	return c.inters.PromotionGrowth
}

func (c *PromotionGrowthClient) mutate(ctx context.Context, m *PromotionGrowthMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionGrowthCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionGrowthUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionGrowthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionGrowthDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionGrowth mutation op: %q", m.Op())
	}
}

// PromotionLevelClient is a client for the PromotionLevel schema.
type PromotionLevelClient struct {
	config
}

// NewPromotionLevelClient returns a client for the PromotionLevel from the given config.
func NewPromotionLevelClient(c config) *PromotionLevelClient {
	return &PromotionLevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionlevel.Hooks(f(g(h())))`.
func (c *PromotionLevelClient) Use(hooks ...Hook) {
	c.hooks.PromotionLevel = append(c.hooks.PromotionLevel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionlevel.Intercept(f(g(h())))`.
func (c *PromotionLevelClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionLevel = append(c.inters.PromotionLevel, interceptors...)
}

// Create returns a builder for creating a PromotionLevel entity.
func (c *PromotionLevelClient) Create() *PromotionLevelCreate {
	mutation := newPromotionLevelMutation(c.config, OpCreate)
	return &PromotionLevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionLevel entities.
func (c *PromotionLevelClient) CreateBulk(builders ...*PromotionLevelCreate) *PromotionLevelCreateBulk {
	return &PromotionLevelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionLevelClient) MapCreateBulk(slice any, setFunc func(*PromotionLevelCreate, int)) *PromotionLevelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionLevelCreateBulk{err: fmt.Errorf("calling to PromotionLevelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionLevelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionLevelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionLevel.
func (c *PromotionLevelClient) Update() *PromotionLevelUpdate {
	mutation := newPromotionLevelMutation(c.config, OpUpdate)
	return &PromotionLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionLevelClient) UpdateOne(pl *PromotionLevel) *PromotionLevelUpdateOne {
	mutation := newPromotionLevelMutation(c.config, OpUpdateOne, withPromotionLevel(pl))
	return &PromotionLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionLevelClient) UpdateOneID(id uint64) *PromotionLevelUpdateOne {
	mutation := newPromotionLevelMutation(c.config, OpUpdateOne, withPromotionLevelID(id))
	return &PromotionLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionLevel.
func (c *PromotionLevelClient) Delete() *PromotionLevelDelete {
	mutation := newPromotionLevelMutation(c.config, OpDelete)
	return &PromotionLevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionLevelClient) DeleteOne(pl *PromotionLevel) *PromotionLevelDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionLevelClient) DeleteOneID(id uint64) *PromotionLevelDeleteOne {
	builder := c.Delete().Where(promotionlevel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionLevelDeleteOne{builder}
}

// Query returns a query builder for PromotionLevel.
func (c *PromotionLevelClient) Query() *PromotionLevelQuery {
	return &PromotionLevelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionLevel},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionLevel entity by its id.
func (c *PromotionLevelClient) Get(ctx context.Context, id uint64) (*PromotionLevel, error) {
	return c.Query().Where(promotionlevel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionLevelClient) GetX(ctx context.Context, id uint64) *PromotionLevel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromotionLevelClient) Hooks() []Hook {
	hooks := c.hooks.PromotionLevel
	return append(hooks[:len(hooks):len(hooks)], promotionlevel.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionLevelClient) Interceptors() []Interceptor {
	return c.inters.PromotionLevel
}

func (c *PromotionLevelClient) mutate(ctx context.Context, m *PromotionLevelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionLevelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionLevelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionLevel mutation op: %q", m.Op())
	}
}

// PromotionLevelTaskClient is a client for the PromotionLevelTask schema.
type PromotionLevelTaskClient struct {
	config
}

// NewPromotionLevelTaskClient returns a client for the PromotionLevelTask from the given config.
func NewPromotionLevelTaskClient(c config) *PromotionLevelTaskClient {
	return &PromotionLevelTaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionleveltask.Hooks(f(g(h())))`.
func (c *PromotionLevelTaskClient) Use(hooks ...Hook) {
	c.hooks.PromotionLevelTask = append(c.hooks.PromotionLevelTask, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionleveltask.Intercept(f(g(h())))`.
func (c *PromotionLevelTaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionLevelTask = append(c.inters.PromotionLevelTask, interceptors...)
}

// Create returns a builder for creating a PromotionLevelTask entity.
func (c *PromotionLevelTaskClient) Create() *PromotionLevelTaskCreate {
	mutation := newPromotionLevelTaskMutation(c.config, OpCreate)
	return &PromotionLevelTaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionLevelTask entities.
func (c *PromotionLevelTaskClient) CreateBulk(builders ...*PromotionLevelTaskCreate) *PromotionLevelTaskCreateBulk {
	return &PromotionLevelTaskCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionLevelTaskClient) MapCreateBulk(slice any, setFunc func(*PromotionLevelTaskCreate, int)) *PromotionLevelTaskCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionLevelTaskCreateBulk{err: fmt.Errorf("calling to PromotionLevelTaskClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionLevelTaskCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionLevelTaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionLevelTask.
func (c *PromotionLevelTaskClient) Update() *PromotionLevelTaskUpdate {
	mutation := newPromotionLevelTaskMutation(c.config, OpUpdate)
	return &PromotionLevelTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionLevelTaskClient) UpdateOne(plt *PromotionLevelTask) *PromotionLevelTaskUpdateOne {
	mutation := newPromotionLevelTaskMutation(c.config, OpUpdateOne, withPromotionLevelTask(plt))
	return &PromotionLevelTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionLevelTaskClient) UpdateOneID(id uint64) *PromotionLevelTaskUpdateOne {
	mutation := newPromotionLevelTaskMutation(c.config, OpUpdateOne, withPromotionLevelTaskID(id))
	return &PromotionLevelTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionLevelTask.
func (c *PromotionLevelTaskClient) Delete() *PromotionLevelTaskDelete {
	mutation := newPromotionLevelTaskMutation(c.config, OpDelete)
	return &PromotionLevelTaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionLevelTaskClient) DeleteOne(plt *PromotionLevelTask) *PromotionLevelTaskDeleteOne {
	return c.DeleteOneID(plt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionLevelTaskClient) DeleteOneID(id uint64) *PromotionLevelTaskDeleteOne {
	builder := c.Delete().Where(promotionleveltask.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionLevelTaskDeleteOne{builder}
}

// Query returns a query builder for PromotionLevelTask.
func (c *PromotionLevelTaskClient) Query() *PromotionLevelTaskQuery {
	return &PromotionLevelTaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionLevelTask},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionLevelTask entity by its id.
func (c *PromotionLevelTaskClient) Get(ctx context.Context, id uint64) (*PromotionLevelTask, error) {
	return c.Query().Where(promotionleveltask.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionLevelTaskClient) GetX(ctx context.Context, id uint64) *PromotionLevelTask {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromotionLevelTaskClient) Hooks() []Hook {
	hooks := c.hooks.PromotionLevelTask
	return append(hooks[:len(hooks):len(hooks)], promotionleveltask.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionLevelTaskClient) Interceptors() []Interceptor {
	return c.inters.PromotionLevelTask
}

func (c *PromotionLevelTaskClient) mutate(ctx context.Context, m *PromotionLevelTaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionLevelTaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionLevelTaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionLevelTaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionLevelTaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionLevelTask mutation op: %q", m.Op())
	}
}

// PromotionMemberClient is a client for the PromotionMember schema.
type PromotionMemberClient struct {
	config
}

// NewPromotionMemberClient returns a client for the PromotionMember from the given config.
func NewPromotionMemberClient(c config) *PromotionMemberClient {
	return &PromotionMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionmember.Hooks(f(g(h())))`.
func (c *PromotionMemberClient) Use(hooks ...Hook) {
	c.hooks.PromotionMember = append(c.hooks.PromotionMember, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionmember.Intercept(f(g(h())))`.
func (c *PromotionMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionMember = append(c.inters.PromotionMember, interceptors...)
}

// Create returns a builder for creating a PromotionMember entity.
func (c *PromotionMemberClient) Create() *PromotionMemberCreate {
	mutation := newPromotionMemberMutation(c.config, OpCreate)
	return &PromotionMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionMember entities.
func (c *PromotionMemberClient) CreateBulk(builders ...*PromotionMemberCreate) *PromotionMemberCreateBulk {
	return &PromotionMemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionMemberClient) MapCreateBulk(slice any, setFunc func(*PromotionMemberCreate, int)) *PromotionMemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionMemberCreateBulk{err: fmt.Errorf("calling to PromotionMemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionMemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionMember.
func (c *PromotionMemberClient) Update() *PromotionMemberUpdate {
	mutation := newPromotionMemberMutation(c.config, OpUpdate)
	return &PromotionMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionMemberClient) UpdateOne(pm *PromotionMember) *PromotionMemberUpdateOne {
	mutation := newPromotionMemberMutation(c.config, OpUpdateOne, withPromotionMember(pm))
	return &PromotionMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionMemberClient) UpdateOneID(id uint64) *PromotionMemberUpdateOne {
	mutation := newPromotionMemberMutation(c.config, OpUpdateOne, withPromotionMemberID(id))
	return &PromotionMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionMember.
func (c *PromotionMemberClient) Delete() *PromotionMemberDelete {
	mutation := newPromotionMemberMutation(c.config, OpDelete)
	return &PromotionMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionMemberClient) DeleteOne(pm *PromotionMember) *PromotionMemberDeleteOne {
	return c.DeleteOneID(pm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionMemberClient) DeleteOneID(id uint64) *PromotionMemberDeleteOne {
	builder := c.Delete().Where(promotionmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionMemberDeleteOne{builder}
}

// Query returns a query builder for PromotionMember.
func (c *PromotionMemberClient) Query() *PromotionMemberQuery {
	return &PromotionMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionMember},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionMember entity by its id.
func (c *PromotionMemberClient) Get(ctx context.Context, id uint64) (*PromotionMember, error) {
	return c.Query().Where(promotionmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionMemberClient) GetX(ctx context.Context, id uint64) *PromotionMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a PromotionMember.
func (c *PromotionMemberClient) QueryRider(pm *PromotionMember) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionmember.RiderTable, promotionmember.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a PromotionMember.
func (c *PromotionMemberClient) QuerySubscribe(pm *PromotionMember) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionmember.SubscribeTable, promotionmember.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLevel queries the level edge of a PromotionMember.
func (c *PromotionMemberClient) QueryLevel(pm *PromotionMember) *PromotionLevelQuery {
	query := (&PromotionLevelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, id),
			sqlgraph.To(promotionlevel.Table, promotionlevel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionmember.LevelTable, promotionmember.LevelColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferrals queries the referrals edge of a PromotionMember.
func (c *PromotionMemberClient) QueryReferrals(pm *PromotionMember) *PromotionReferralsQuery {
	query := (&PromotionReferralsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, id),
			sqlgraph.To(promotionreferrals.Table, promotionreferrals.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionmember.ReferralsTable, promotionmember.ReferralsColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferred queries the referred edge of a PromotionMember.
func (c *PromotionMemberClient) QueryReferred(pm *PromotionMember) *PromotionReferralsQuery {
	query := (&PromotionReferralsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, id),
			sqlgraph.To(promotionreferrals.Table, promotionreferrals.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, promotionmember.ReferredTable, promotionmember.ReferredColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a PromotionMember.
func (c *PromotionMemberClient) QueryPerson(pm *PromotionMember) *PromotionPersonQuery {
	query := (&PromotionPersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, id),
			sqlgraph.To(promotionperson.Table, promotionperson.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotionmember.PersonTable, promotionmember.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCards queries the cards edge of a PromotionMember.
func (c *PromotionMemberClient) QueryCards(pm *PromotionMember) *PromotionBankCardQuery {
	query := (&PromotionBankCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, id),
			sqlgraph.To(promotionbankcard.Table, promotionbankcard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionmember.CardsTable, promotionmember.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCommissions queries the commissions edge of a PromotionMember.
func (c *PromotionMemberClient) QueryCommissions(pm *PromotionMember) *PromotionMemberCommissionQuery {
	query := (&PromotionMemberCommissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, id),
			sqlgraph.To(promotionmembercommission.Table, promotionmembercommission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionmember.CommissionsTable, promotionmember.CommissionsColumn),
		)
		fromV = sqlgraph.Neighbors(pm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionMemberClient) Hooks() []Hook {
	hooks := c.hooks.PromotionMember
	return append(hooks[:len(hooks):len(hooks)], promotionmember.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionMemberClient) Interceptors() []Interceptor {
	return c.inters.PromotionMember
}

func (c *PromotionMemberClient) mutate(ctx context.Context, m *PromotionMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionMember mutation op: %q", m.Op())
	}
}

// PromotionMemberCommissionClient is a client for the PromotionMemberCommission schema.
type PromotionMemberCommissionClient struct {
	config
}

// NewPromotionMemberCommissionClient returns a client for the PromotionMemberCommission from the given config.
func NewPromotionMemberCommissionClient(c config) *PromotionMemberCommissionClient {
	return &PromotionMemberCommissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionmembercommission.Hooks(f(g(h())))`.
func (c *PromotionMemberCommissionClient) Use(hooks ...Hook) {
	c.hooks.PromotionMemberCommission = append(c.hooks.PromotionMemberCommission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionmembercommission.Intercept(f(g(h())))`.
func (c *PromotionMemberCommissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionMemberCommission = append(c.inters.PromotionMemberCommission, interceptors...)
}

// Create returns a builder for creating a PromotionMemberCommission entity.
func (c *PromotionMemberCommissionClient) Create() *PromotionMemberCommissionCreate {
	mutation := newPromotionMemberCommissionMutation(c.config, OpCreate)
	return &PromotionMemberCommissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionMemberCommission entities.
func (c *PromotionMemberCommissionClient) CreateBulk(builders ...*PromotionMemberCommissionCreate) *PromotionMemberCommissionCreateBulk {
	return &PromotionMemberCommissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionMemberCommissionClient) MapCreateBulk(slice any, setFunc func(*PromotionMemberCommissionCreate, int)) *PromotionMemberCommissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionMemberCommissionCreateBulk{err: fmt.Errorf("calling to PromotionMemberCommissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionMemberCommissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionMemberCommissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionMemberCommission.
func (c *PromotionMemberCommissionClient) Update() *PromotionMemberCommissionUpdate {
	mutation := newPromotionMemberCommissionMutation(c.config, OpUpdate)
	return &PromotionMemberCommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionMemberCommissionClient) UpdateOne(pmc *PromotionMemberCommission) *PromotionMemberCommissionUpdateOne {
	mutation := newPromotionMemberCommissionMutation(c.config, OpUpdateOne, withPromotionMemberCommission(pmc))
	return &PromotionMemberCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionMemberCommissionClient) UpdateOneID(id uint64) *PromotionMemberCommissionUpdateOne {
	mutation := newPromotionMemberCommissionMutation(c.config, OpUpdateOne, withPromotionMemberCommissionID(id))
	return &PromotionMemberCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionMemberCommission.
func (c *PromotionMemberCommissionClient) Delete() *PromotionMemberCommissionDelete {
	mutation := newPromotionMemberCommissionMutation(c.config, OpDelete)
	return &PromotionMemberCommissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionMemberCommissionClient) DeleteOne(pmc *PromotionMemberCommission) *PromotionMemberCommissionDeleteOne {
	return c.DeleteOneID(pmc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionMemberCommissionClient) DeleteOneID(id uint64) *PromotionMemberCommissionDeleteOne {
	builder := c.Delete().Where(promotionmembercommission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionMemberCommissionDeleteOne{builder}
}

// Query returns a query builder for PromotionMemberCommission.
func (c *PromotionMemberCommissionClient) Query() *PromotionMemberCommissionQuery {
	return &PromotionMemberCommissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionMemberCommission},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionMemberCommission entity by its id.
func (c *PromotionMemberCommissionClient) Get(ctx context.Context, id uint64) (*PromotionMemberCommission, error) {
	return c.Query().Where(promotionmembercommission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionMemberCommissionClient) GetX(ctx context.Context, id uint64) *PromotionMemberCommission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCommission queries the commission edge of a PromotionMemberCommission.
func (c *PromotionMemberCommissionClient) QueryCommission(pmc *PromotionMemberCommission) *PromotionCommissionQuery {
	query := (&PromotionCommissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pmc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmembercommission.Table, promotionmembercommission.FieldID, id),
			sqlgraph.To(promotioncommission.Table, promotioncommission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionmembercommission.CommissionTable, promotionmembercommission.CommissionColumn),
		)
		fromV = sqlgraph.Neighbors(pmc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMember queries the member edge of a PromotionMemberCommission.
func (c *PromotionMemberCommissionClient) QueryMember(pmc *PromotionMemberCommission) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pmc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmembercommission.Table, promotionmembercommission.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotionmembercommission.MemberTable, promotionmembercommission.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pmc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionMemberCommissionClient) Hooks() []Hook {
	return c.hooks.PromotionMemberCommission
}

// Interceptors returns the client interceptors.
func (c *PromotionMemberCommissionClient) Interceptors() []Interceptor {
	return c.inters.PromotionMemberCommission
}

func (c *PromotionMemberCommissionClient) mutate(ctx context.Context, m *PromotionMemberCommissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionMemberCommissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionMemberCommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionMemberCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionMemberCommissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionMemberCommission mutation op: %q", m.Op())
	}
}

// PromotionPersonClient is a client for the PromotionPerson schema.
type PromotionPersonClient struct {
	config
}

// NewPromotionPersonClient returns a client for the PromotionPerson from the given config.
func NewPromotionPersonClient(c config) *PromotionPersonClient {
	return &PromotionPersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionperson.Hooks(f(g(h())))`.
func (c *PromotionPersonClient) Use(hooks ...Hook) {
	c.hooks.PromotionPerson = append(c.hooks.PromotionPerson, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionperson.Intercept(f(g(h())))`.
func (c *PromotionPersonClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionPerson = append(c.inters.PromotionPerson, interceptors...)
}

// Create returns a builder for creating a PromotionPerson entity.
func (c *PromotionPersonClient) Create() *PromotionPersonCreate {
	mutation := newPromotionPersonMutation(c.config, OpCreate)
	return &PromotionPersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionPerson entities.
func (c *PromotionPersonClient) CreateBulk(builders ...*PromotionPersonCreate) *PromotionPersonCreateBulk {
	return &PromotionPersonCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionPersonClient) MapCreateBulk(slice any, setFunc func(*PromotionPersonCreate, int)) *PromotionPersonCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionPersonCreateBulk{err: fmt.Errorf("calling to PromotionPersonClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionPersonCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionPersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionPerson.
func (c *PromotionPersonClient) Update() *PromotionPersonUpdate {
	mutation := newPromotionPersonMutation(c.config, OpUpdate)
	return &PromotionPersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionPersonClient) UpdateOne(pp *PromotionPerson) *PromotionPersonUpdateOne {
	mutation := newPromotionPersonMutation(c.config, OpUpdateOne, withPromotionPerson(pp))
	return &PromotionPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionPersonClient) UpdateOneID(id uint64) *PromotionPersonUpdateOne {
	mutation := newPromotionPersonMutation(c.config, OpUpdateOne, withPromotionPersonID(id))
	return &PromotionPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionPerson.
func (c *PromotionPersonClient) Delete() *PromotionPersonDelete {
	mutation := newPromotionPersonMutation(c.config, OpDelete)
	return &PromotionPersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionPersonClient) DeleteOne(pp *PromotionPerson) *PromotionPersonDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionPersonClient) DeleteOneID(id uint64) *PromotionPersonDeleteOne {
	builder := c.Delete().Where(promotionperson.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionPersonDeleteOne{builder}
}

// Query returns a query builder for PromotionPerson.
func (c *PromotionPersonClient) Query() *PromotionPersonQuery {
	return &PromotionPersonQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionPerson},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionPerson entity by its id.
func (c *PromotionPersonClient) Get(ctx context.Context, id uint64) (*PromotionPerson, error) {
	return c.Query().Where(promotionperson.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionPersonClient) GetX(ctx context.Context, id uint64) *PromotionPerson {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMember queries the member edge of a PromotionPerson.
func (c *PromotionPersonClient) QueryMember(pp *PromotionPerson) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionperson.Table, promotionperson.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionperson.MemberTable, promotionperson.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionPersonClient) Hooks() []Hook {
	return c.hooks.PromotionPerson
}

// Interceptors returns the client interceptors.
func (c *PromotionPersonClient) Interceptors() []Interceptor {
	return c.inters.PromotionPerson
}

func (c *PromotionPersonClient) mutate(ctx context.Context, m *PromotionPersonMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionPersonCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionPersonUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionPersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionPersonDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionPerson mutation op: %q", m.Op())
	}
}

// PromotionPrivilegeClient is a client for the PromotionPrivilege schema.
type PromotionPrivilegeClient struct {
	config
}

// NewPromotionPrivilegeClient returns a client for the PromotionPrivilege from the given config.
func NewPromotionPrivilegeClient(c config) *PromotionPrivilegeClient {
	return &PromotionPrivilegeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionprivilege.Hooks(f(g(h())))`.
func (c *PromotionPrivilegeClient) Use(hooks ...Hook) {
	c.hooks.PromotionPrivilege = append(c.hooks.PromotionPrivilege, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionprivilege.Intercept(f(g(h())))`.
func (c *PromotionPrivilegeClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionPrivilege = append(c.inters.PromotionPrivilege, interceptors...)
}

// Create returns a builder for creating a PromotionPrivilege entity.
func (c *PromotionPrivilegeClient) Create() *PromotionPrivilegeCreate {
	mutation := newPromotionPrivilegeMutation(c.config, OpCreate)
	return &PromotionPrivilegeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionPrivilege entities.
func (c *PromotionPrivilegeClient) CreateBulk(builders ...*PromotionPrivilegeCreate) *PromotionPrivilegeCreateBulk {
	return &PromotionPrivilegeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionPrivilegeClient) MapCreateBulk(slice any, setFunc func(*PromotionPrivilegeCreate, int)) *PromotionPrivilegeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionPrivilegeCreateBulk{err: fmt.Errorf("calling to PromotionPrivilegeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionPrivilegeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionPrivilegeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionPrivilege.
func (c *PromotionPrivilegeClient) Update() *PromotionPrivilegeUpdate {
	mutation := newPromotionPrivilegeMutation(c.config, OpUpdate)
	return &PromotionPrivilegeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionPrivilegeClient) UpdateOne(pp *PromotionPrivilege) *PromotionPrivilegeUpdateOne {
	mutation := newPromotionPrivilegeMutation(c.config, OpUpdateOne, withPromotionPrivilege(pp))
	return &PromotionPrivilegeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionPrivilegeClient) UpdateOneID(id uint64) *PromotionPrivilegeUpdateOne {
	mutation := newPromotionPrivilegeMutation(c.config, OpUpdateOne, withPromotionPrivilegeID(id))
	return &PromotionPrivilegeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionPrivilege.
func (c *PromotionPrivilegeClient) Delete() *PromotionPrivilegeDelete {
	mutation := newPromotionPrivilegeMutation(c.config, OpDelete)
	return &PromotionPrivilegeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionPrivilegeClient) DeleteOne(pp *PromotionPrivilege) *PromotionPrivilegeDeleteOne {
	return c.DeleteOneID(pp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionPrivilegeClient) DeleteOneID(id uint64) *PromotionPrivilegeDeleteOne {
	builder := c.Delete().Where(promotionprivilege.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionPrivilegeDeleteOne{builder}
}

// Query returns a query builder for PromotionPrivilege.
func (c *PromotionPrivilegeClient) Query() *PromotionPrivilegeQuery {
	return &PromotionPrivilegeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionPrivilege},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionPrivilege entity by its id.
func (c *PromotionPrivilegeClient) Get(ctx context.Context, id uint64) (*PromotionPrivilege, error) {
	return c.Query().Where(promotionprivilege.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionPrivilegeClient) GetX(ctx context.Context, id uint64) *PromotionPrivilege {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromotionPrivilegeClient) Hooks() []Hook {
	hooks := c.hooks.PromotionPrivilege
	return append(hooks[:len(hooks):len(hooks)], promotionprivilege.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionPrivilegeClient) Interceptors() []Interceptor {
	return c.inters.PromotionPrivilege
}

func (c *PromotionPrivilegeClient) mutate(ctx context.Context, m *PromotionPrivilegeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionPrivilegeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionPrivilegeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionPrivilegeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionPrivilegeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionPrivilege mutation op: %q", m.Op())
	}
}

// PromotionReferralsClient is a client for the PromotionReferrals schema.
type PromotionReferralsClient struct {
	config
}

// NewPromotionReferralsClient returns a client for the PromotionReferrals from the given config.
func NewPromotionReferralsClient(c config) *PromotionReferralsClient {
	return &PromotionReferralsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionreferrals.Hooks(f(g(h())))`.
func (c *PromotionReferralsClient) Use(hooks ...Hook) {
	c.hooks.PromotionReferrals = append(c.hooks.PromotionReferrals, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionreferrals.Intercept(f(g(h())))`.
func (c *PromotionReferralsClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionReferrals = append(c.inters.PromotionReferrals, interceptors...)
}

// Create returns a builder for creating a PromotionReferrals entity.
func (c *PromotionReferralsClient) Create() *PromotionReferralsCreate {
	mutation := newPromotionReferralsMutation(c.config, OpCreate)
	return &PromotionReferralsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionReferrals entities.
func (c *PromotionReferralsClient) CreateBulk(builders ...*PromotionReferralsCreate) *PromotionReferralsCreateBulk {
	return &PromotionReferralsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionReferralsClient) MapCreateBulk(slice any, setFunc func(*PromotionReferralsCreate, int)) *PromotionReferralsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionReferralsCreateBulk{err: fmt.Errorf("calling to PromotionReferralsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionReferralsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionReferralsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionReferrals.
func (c *PromotionReferralsClient) Update() *PromotionReferralsUpdate {
	mutation := newPromotionReferralsMutation(c.config, OpUpdate)
	return &PromotionReferralsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionReferralsClient) UpdateOne(pr *PromotionReferrals) *PromotionReferralsUpdateOne {
	mutation := newPromotionReferralsMutation(c.config, OpUpdateOne, withPromotionReferrals(pr))
	return &PromotionReferralsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionReferralsClient) UpdateOneID(id uint64) *PromotionReferralsUpdateOne {
	mutation := newPromotionReferralsMutation(c.config, OpUpdateOne, withPromotionReferralsID(id))
	return &PromotionReferralsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionReferrals.
func (c *PromotionReferralsClient) Delete() *PromotionReferralsDelete {
	mutation := newPromotionReferralsMutation(c.config, OpDelete)
	return &PromotionReferralsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionReferralsClient) DeleteOne(pr *PromotionReferrals) *PromotionReferralsDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionReferralsClient) DeleteOneID(id uint64) *PromotionReferralsDeleteOne {
	builder := c.Delete().Where(promotionreferrals.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionReferralsDeleteOne{builder}
}

// Query returns a query builder for PromotionReferrals.
func (c *PromotionReferralsClient) Query() *PromotionReferralsQuery {
	return &PromotionReferralsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionReferrals},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionReferrals entity by its id.
func (c *PromotionReferralsClient) Get(ctx context.Context, id uint64) (*PromotionReferrals, error) {
	return c.Query().Where(promotionreferrals.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionReferralsClient) GetX(ctx context.Context, id uint64) *PromotionReferrals {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a PromotionReferrals.
func (c *PromotionReferralsClient) QueryRider(pr *PromotionReferrals) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionreferrals.Table, promotionreferrals.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionreferrals.RiderTable, promotionreferrals.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a PromotionReferrals.
func (c *PromotionReferralsClient) QuerySubscribe(pr *PromotionReferrals) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionreferrals.Table, promotionreferrals.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionreferrals.SubscribeTable, promotionreferrals.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferringMember queries the referring_member edge of a PromotionReferrals.
func (c *PromotionReferralsClient) QueryReferringMember(pr *PromotionReferrals) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionreferrals.Table, promotionreferrals.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotionreferrals.ReferringMemberTable, promotionreferrals.ReferringMemberColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReferredMember queries the referred_member edge of a PromotionReferrals.
func (c *PromotionReferralsClient) QueryReferredMember(pr *PromotionReferrals) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionreferrals.Table, promotionreferrals.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, promotionreferrals.ReferredMemberTable, promotionreferrals.ReferredMemberColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionReferralsClient) Hooks() []Hook {
	hooks := c.hooks.PromotionReferrals
	return append(hooks[:len(hooks):len(hooks)], promotionreferrals.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionReferralsClient) Interceptors() []Interceptor {
	return c.inters.PromotionReferrals
}

func (c *PromotionReferralsClient) mutate(ctx context.Context, m *PromotionReferralsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionReferralsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionReferralsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionReferralsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionReferralsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionReferrals mutation op: %q", m.Op())
	}
}

// PromotionReferralsProgressClient is a client for the PromotionReferralsProgress schema.
type PromotionReferralsProgressClient struct {
	config
}

// NewPromotionReferralsProgressClient returns a client for the PromotionReferralsProgress from the given config.
func NewPromotionReferralsProgressClient(c config) *PromotionReferralsProgressClient {
	return &PromotionReferralsProgressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionreferralsprogress.Hooks(f(g(h())))`.
func (c *PromotionReferralsProgressClient) Use(hooks ...Hook) {
	c.hooks.PromotionReferralsProgress = append(c.hooks.PromotionReferralsProgress, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionreferralsprogress.Intercept(f(g(h())))`.
func (c *PromotionReferralsProgressClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionReferralsProgress = append(c.inters.PromotionReferralsProgress, interceptors...)
}

// Create returns a builder for creating a PromotionReferralsProgress entity.
func (c *PromotionReferralsProgressClient) Create() *PromotionReferralsProgressCreate {
	mutation := newPromotionReferralsProgressMutation(c.config, OpCreate)
	return &PromotionReferralsProgressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionReferralsProgress entities.
func (c *PromotionReferralsProgressClient) CreateBulk(builders ...*PromotionReferralsProgressCreate) *PromotionReferralsProgressCreateBulk {
	return &PromotionReferralsProgressCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionReferralsProgressClient) MapCreateBulk(slice any, setFunc func(*PromotionReferralsProgressCreate, int)) *PromotionReferralsProgressCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionReferralsProgressCreateBulk{err: fmt.Errorf("calling to PromotionReferralsProgressClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionReferralsProgressCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionReferralsProgressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionReferralsProgress.
func (c *PromotionReferralsProgressClient) Update() *PromotionReferralsProgressUpdate {
	mutation := newPromotionReferralsProgressMutation(c.config, OpUpdate)
	return &PromotionReferralsProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionReferralsProgressClient) UpdateOne(prp *PromotionReferralsProgress) *PromotionReferralsProgressUpdateOne {
	mutation := newPromotionReferralsProgressMutation(c.config, OpUpdateOne, withPromotionReferralsProgress(prp))
	return &PromotionReferralsProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionReferralsProgressClient) UpdateOneID(id uint64) *PromotionReferralsProgressUpdateOne {
	mutation := newPromotionReferralsProgressMutation(c.config, OpUpdateOne, withPromotionReferralsProgressID(id))
	return &PromotionReferralsProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionReferralsProgress.
func (c *PromotionReferralsProgressClient) Delete() *PromotionReferralsProgressDelete {
	mutation := newPromotionReferralsProgressMutation(c.config, OpDelete)
	return &PromotionReferralsProgressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionReferralsProgressClient) DeleteOne(prp *PromotionReferralsProgress) *PromotionReferralsProgressDeleteOne {
	return c.DeleteOneID(prp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionReferralsProgressClient) DeleteOneID(id uint64) *PromotionReferralsProgressDeleteOne {
	builder := c.Delete().Where(promotionreferralsprogress.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionReferralsProgressDeleteOne{builder}
}

// Query returns a query builder for PromotionReferralsProgress.
func (c *PromotionReferralsProgressClient) Query() *PromotionReferralsProgressQuery {
	return &PromotionReferralsProgressQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionReferralsProgress},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionReferralsProgress entity by its id.
func (c *PromotionReferralsProgressClient) Get(ctx context.Context, id uint64) (*PromotionReferralsProgress, error) {
	return c.Query().Where(promotionreferralsprogress.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionReferralsProgressClient) GetX(ctx context.Context, id uint64) *PromotionReferralsProgress {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a PromotionReferralsProgress.
func (c *PromotionReferralsProgressClient) QueryRider(prp *PromotionReferralsProgress) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := prp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionreferralsprogress.Table, promotionreferralsprogress.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionreferralsprogress.RiderTable, promotionreferralsprogress.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(prp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionReferralsProgressClient) Hooks() []Hook {
	hooks := c.hooks.PromotionReferralsProgress
	return append(hooks[:len(hooks):len(hooks)], promotionreferralsprogress.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionReferralsProgressClient) Interceptors() []Interceptor {
	return c.inters.PromotionReferralsProgress
}

func (c *PromotionReferralsProgressClient) mutate(ctx context.Context, m *PromotionReferralsProgressMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionReferralsProgressCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionReferralsProgressUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionReferralsProgressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionReferralsProgressDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionReferralsProgress mutation op: %q", m.Op())
	}
}

// PromotionSettingClient is a client for the PromotionSetting schema.
type PromotionSettingClient struct {
	config
}

// NewPromotionSettingClient returns a client for the PromotionSetting from the given config.
func NewPromotionSettingClient(c config) *PromotionSettingClient {
	return &PromotionSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionsetting.Hooks(f(g(h())))`.
func (c *PromotionSettingClient) Use(hooks ...Hook) {
	c.hooks.PromotionSetting = append(c.hooks.PromotionSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionsetting.Intercept(f(g(h())))`.
func (c *PromotionSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionSetting = append(c.inters.PromotionSetting, interceptors...)
}

// Create returns a builder for creating a PromotionSetting entity.
func (c *PromotionSettingClient) Create() *PromotionSettingCreate {
	mutation := newPromotionSettingMutation(c.config, OpCreate)
	return &PromotionSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionSetting entities.
func (c *PromotionSettingClient) CreateBulk(builders ...*PromotionSettingCreate) *PromotionSettingCreateBulk {
	return &PromotionSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionSettingClient) MapCreateBulk(slice any, setFunc func(*PromotionSettingCreate, int)) *PromotionSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionSettingCreateBulk{err: fmt.Errorf("calling to PromotionSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionSetting.
func (c *PromotionSettingClient) Update() *PromotionSettingUpdate {
	mutation := newPromotionSettingMutation(c.config, OpUpdate)
	return &PromotionSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionSettingClient) UpdateOne(ps *PromotionSetting) *PromotionSettingUpdateOne {
	mutation := newPromotionSettingMutation(c.config, OpUpdateOne, withPromotionSetting(ps))
	return &PromotionSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionSettingClient) UpdateOneID(id uint64) *PromotionSettingUpdateOne {
	mutation := newPromotionSettingMutation(c.config, OpUpdateOne, withPromotionSettingID(id))
	return &PromotionSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionSetting.
func (c *PromotionSettingClient) Delete() *PromotionSettingDelete {
	mutation := newPromotionSettingMutation(c.config, OpDelete)
	return &PromotionSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionSettingClient) DeleteOne(ps *PromotionSetting) *PromotionSettingDeleteOne {
	return c.DeleteOneID(ps.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionSettingClient) DeleteOneID(id uint64) *PromotionSettingDeleteOne {
	builder := c.Delete().Where(promotionsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionSettingDeleteOne{builder}
}

// Query returns a query builder for PromotionSetting.
func (c *PromotionSettingClient) Query() *PromotionSettingQuery {
	return &PromotionSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionSetting entity by its id.
func (c *PromotionSettingClient) Get(ctx context.Context, id uint64) (*PromotionSetting, error) {
	return c.Query().Where(promotionsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionSettingClient) GetX(ctx context.Context, id uint64) *PromotionSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PromotionSettingClient) Hooks() []Hook {
	hooks := c.hooks.PromotionSetting
	return append(hooks[:len(hooks):len(hooks)], promotionsetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionSettingClient) Interceptors() []Interceptor {
	return c.inters.PromotionSetting
}

func (c *PromotionSettingClient) mutate(ctx context.Context, m *PromotionSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionSetting mutation op: %q", m.Op())
	}
}

// PromotionWithdrawalClient is a client for the PromotionWithdrawal schema.
type PromotionWithdrawalClient struct {
	config
}

// NewPromotionWithdrawalClient returns a client for the PromotionWithdrawal from the given config.
func NewPromotionWithdrawalClient(c config) *PromotionWithdrawalClient {
	return &PromotionWithdrawalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `promotionwithdrawal.Hooks(f(g(h())))`.
func (c *PromotionWithdrawalClient) Use(hooks ...Hook) {
	c.hooks.PromotionWithdrawal = append(c.hooks.PromotionWithdrawal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `promotionwithdrawal.Intercept(f(g(h())))`.
func (c *PromotionWithdrawalClient) Intercept(interceptors ...Interceptor) {
	c.inters.PromotionWithdrawal = append(c.inters.PromotionWithdrawal, interceptors...)
}

// Create returns a builder for creating a PromotionWithdrawal entity.
func (c *PromotionWithdrawalClient) Create() *PromotionWithdrawalCreate {
	mutation := newPromotionWithdrawalMutation(c.config, OpCreate)
	return &PromotionWithdrawalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PromotionWithdrawal entities.
func (c *PromotionWithdrawalClient) CreateBulk(builders ...*PromotionWithdrawalCreate) *PromotionWithdrawalCreateBulk {
	return &PromotionWithdrawalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PromotionWithdrawalClient) MapCreateBulk(slice any, setFunc func(*PromotionWithdrawalCreate, int)) *PromotionWithdrawalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PromotionWithdrawalCreateBulk{err: fmt.Errorf("calling to PromotionWithdrawalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PromotionWithdrawalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PromotionWithdrawalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PromotionWithdrawal.
func (c *PromotionWithdrawalClient) Update() *PromotionWithdrawalUpdate {
	mutation := newPromotionWithdrawalMutation(c.config, OpUpdate)
	return &PromotionWithdrawalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PromotionWithdrawalClient) UpdateOne(pw *PromotionWithdrawal) *PromotionWithdrawalUpdateOne {
	mutation := newPromotionWithdrawalMutation(c.config, OpUpdateOne, withPromotionWithdrawal(pw))
	return &PromotionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PromotionWithdrawalClient) UpdateOneID(id uint64) *PromotionWithdrawalUpdateOne {
	mutation := newPromotionWithdrawalMutation(c.config, OpUpdateOne, withPromotionWithdrawalID(id))
	return &PromotionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PromotionWithdrawal.
func (c *PromotionWithdrawalClient) Delete() *PromotionWithdrawalDelete {
	mutation := newPromotionWithdrawalMutation(c.config, OpDelete)
	return &PromotionWithdrawalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PromotionWithdrawalClient) DeleteOne(pw *PromotionWithdrawal) *PromotionWithdrawalDeleteOne {
	return c.DeleteOneID(pw.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PromotionWithdrawalClient) DeleteOneID(id uint64) *PromotionWithdrawalDeleteOne {
	builder := c.Delete().Where(promotionwithdrawal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PromotionWithdrawalDeleteOne{builder}
}

// Query returns a query builder for PromotionWithdrawal.
func (c *PromotionWithdrawalClient) Query() *PromotionWithdrawalQuery {
	return &PromotionWithdrawalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePromotionWithdrawal},
		inters: c.Interceptors(),
	}
}

// Get returns a PromotionWithdrawal entity by its id.
func (c *PromotionWithdrawalClient) Get(ctx context.Context, id uint64) (*PromotionWithdrawal, error) {
	return c.Query().Where(promotionwithdrawal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PromotionWithdrawalClient) GetX(ctx context.Context, id uint64) *PromotionWithdrawal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMember queries the member edge of a PromotionWithdrawal.
func (c *PromotionWithdrawalClient) QueryMember(pw *PromotionWithdrawal) *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionwithdrawal.Table, promotionwithdrawal.FieldID, id),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionwithdrawal.MemberTable, promotionwithdrawal.MemberColumn),
		)
		fromV = sqlgraph.Neighbors(pw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCards queries the cards edge of a PromotionWithdrawal.
func (c *PromotionWithdrawalClient) QueryCards(pw *PromotionWithdrawal) *PromotionBankCardQuery {
	query := (&PromotionBankCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pw.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionwithdrawal.Table, promotionwithdrawal.FieldID, id),
			sqlgraph.To(promotionbankcard.Table, promotionbankcard.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotionwithdrawal.CardsTable, promotionwithdrawal.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(pw.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PromotionWithdrawalClient) Hooks() []Hook {
	hooks := c.hooks.PromotionWithdrawal
	return append(hooks[:len(hooks):len(hooks)], promotionwithdrawal.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PromotionWithdrawalClient) Interceptors() []Interceptor {
	return c.inters.PromotionWithdrawal
}

func (c *PromotionWithdrawalClient) mutate(ctx context.Context, m *PromotionWithdrawalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PromotionWithdrawalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PromotionWithdrawalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PromotionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PromotionWithdrawalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PromotionWithdrawal mutation op: %q", m.Op())
	}
}

// QuestionClient is a client for the Question schema.
type QuestionClient struct {
	config
}

// NewQuestionClient returns a client for the Question from the given config.
func NewQuestionClient(c config) *QuestionClient {
	return &QuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `question.Hooks(f(g(h())))`.
func (c *QuestionClient) Use(hooks ...Hook) {
	c.hooks.Question = append(c.hooks.Question, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `question.Intercept(f(g(h())))`.
func (c *QuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Question = append(c.inters.Question, interceptors...)
}

// Create returns a builder for creating a Question entity.
func (c *QuestionClient) Create() *QuestionCreate {
	mutation := newQuestionMutation(c.config, OpCreate)
	return &QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Question entities.
func (c *QuestionClient) CreateBulk(builders ...*QuestionCreate) *QuestionCreateBulk {
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestionClient) MapCreateBulk(slice any, setFunc func(*QuestionCreate, int)) *QuestionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestionCreateBulk{err: fmt.Errorf("calling to QuestionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Question.
func (c *QuestionClient) Update() *QuestionUpdate {
	mutation := newQuestionMutation(c.config, OpUpdate)
	return &QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionClient) UpdateOne(q *Question) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestion(q))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionClient) UpdateOneID(id uint64) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestionID(id))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Question.
func (c *QuestionClient) Delete() *QuestionDelete {
	mutation := newQuestionMutation(c.config, OpDelete)
	return &QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionClient) DeleteOne(q *Question) *QuestionDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionClient) DeleteOneID(id uint64) *QuestionDeleteOne {
	builder := c.Delete().Where(question.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionDeleteOne{builder}
}

// Query returns a query builder for Question.
func (c *QuestionClient) Query() *QuestionQuery {
	return &QuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a Question entity by its id.
func (c *QuestionClient) Get(ctx context.Context, id uint64) (*Question, error) {
	return c.Query().Where(question.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionClient) GetX(ctx context.Context, id uint64) *Question {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategory queries the category edge of a Question.
func (c *QuestionClient) QueryCategory(q *Question) *QuestionCategoryQuery {
	query := (&QuestionCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(questioncategory.Table, questioncategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, question.CategoryTable, question.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionClient) Hooks() []Hook {
	hooks := c.hooks.Question
	return append(hooks[:len(hooks):len(hooks)], question.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *QuestionClient) Interceptors() []Interceptor {
	return c.inters.Question
}

func (c *QuestionClient) mutate(ctx context.Context, m *QuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Question mutation op: %q", m.Op())
	}
}

// QuestionCategoryClient is a client for the QuestionCategory schema.
type QuestionCategoryClient struct {
	config
}

// NewQuestionCategoryClient returns a client for the QuestionCategory from the given config.
func NewQuestionCategoryClient(c config) *QuestionCategoryClient {
	return &QuestionCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `questioncategory.Hooks(f(g(h())))`.
func (c *QuestionCategoryClient) Use(hooks ...Hook) {
	c.hooks.QuestionCategory = append(c.hooks.QuestionCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `questioncategory.Intercept(f(g(h())))`.
func (c *QuestionCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.QuestionCategory = append(c.inters.QuestionCategory, interceptors...)
}

// Create returns a builder for creating a QuestionCategory entity.
func (c *QuestionCategoryClient) Create() *QuestionCategoryCreate {
	mutation := newQuestionCategoryMutation(c.config, OpCreate)
	return &QuestionCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QuestionCategory entities.
func (c *QuestionCategoryClient) CreateBulk(builders ...*QuestionCategoryCreate) *QuestionCategoryCreateBulk {
	return &QuestionCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *QuestionCategoryClient) MapCreateBulk(slice any, setFunc func(*QuestionCategoryCreate, int)) *QuestionCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &QuestionCategoryCreateBulk{err: fmt.Errorf("calling to QuestionCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*QuestionCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &QuestionCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QuestionCategory.
func (c *QuestionCategoryClient) Update() *QuestionCategoryUpdate {
	mutation := newQuestionCategoryMutation(c.config, OpUpdate)
	return &QuestionCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionCategoryClient) UpdateOne(qc *QuestionCategory) *QuestionCategoryUpdateOne {
	mutation := newQuestionCategoryMutation(c.config, OpUpdateOne, withQuestionCategory(qc))
	return &QuestionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionCategoryClient) UpdateOneID(id uint64) *QuestionCategoryUpdateOne {
	mutation := newQuestionCategoryMutation(c.config, OpUpdateOne, withQuestionCategoryID(id))
	return &QuestionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QuestionCategory.
func (c *QuestionCategoryClient) Delete() *QuestionCategoryDelete {
	mutation := newQuestionCategoryMutation(c.config, OpDelete)
	return &QuestionCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionCategoryClient) DeleteOne(qc *QuestionCategory) *QuestionCategoryDeleteOne {
	return c.DeleteOneID(qc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionCategoryClient) DeleteOneID(id uint64) *QuestionCategoryDeleteOne {
	builder := c.Delete().Where(questioncategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionCategoryDeleteOne{builder}
}

// Query returns a query builder for QuestionCategory.
func (c *QuestionCategoryClient) Query() *QuestionCategoryQuery {
	return &QuestionCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestionCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a QuestionCategory entity by its id.
func (c *QuestionCategoryClient) Get(ctx context.Context, id uint64) (*QuestionCategory, error) {
	return c.Query().Where(questioncategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionCategoryClient) GetX(ctx context.Context, id uint64) *QuestionCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestions queries the questions edge of a QuestionCategory.
func (c *QuestionCategoryClient) QueryQuestions(qc *QuestionCategory) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questioncategory.Table, questioncategory.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, questioncategory.QuestionsTable, questioncategory.QuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(qc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionCategoryClient) Hooks() []Hook {
	hooks := c.hooks.QuestionCategory
	return append(hooks[:len(hooks):len(hooks)], questioncategory.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *QuestionCategoryClient) Interceptors() []Interceptor {
	return c.inters.QuestionCategory
}

func (c *QuestionCategoryClient) mutate(ctx context.Context, m *QuestionCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown QuestionCategory mutation op: %q", m.Op())
	}
}

// ReserveClient is a client for the Reserve schema.
type ReserveClient struct {
	config
}

// NewReserveClient returns a client for the Reserve from the given config.
func NewReserveClient(c config) *ReserveClient {
	return &ReserveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reserve.Hooks(f(g(h())))`.
func (c *ReserveClient) Use(hooks ...Hook) {
	c.hooks.Reserve = append(c.hooks.Reserve, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reserve.Intercept(f(g(h())))`.
func (c *ReserveClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reserve = append(c.inters.Reserve, interceptors...)
}

// Create returns a builder for creating a Reserve entity.
func (c *ReserveClient) Create() *ReserveCreate {
	mutation := newReserveMutation(c.config, OpCreate)
	return &ReserveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reserve entities.
func (c *ReserveClient) CreateBulk(builders ...*ReserveCreate) *ReserveCreateBulk {
	return &ReserveCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ReserveClient) MapCreateBulk(slice any, setFunc func(*ReserveCreate, int)) *ReserveCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ReserveCreateBulk{err: fmt.Errorf("calling to ReserveClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ReserveCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ReserveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reserve.
func (c *ReserveClient) Update() *ReserveUpdate {
	mutation := newReserveMutation(c.config, OpUpdate)
	return &ReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReserveClient) UpdateOne(r *Reserve) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserve(r))
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReserveClient) UpdateOneID(id uint64) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserveID(id))
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reserve.
func (c *ReserveClient) Delete() *ReserveDelete {
	mutation := newReserveMutation(c.config, OpDelete)
	return &ReserveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReserveClient) DeleteOne(r *Reserve) *ReserveDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReserveClient) DeleteOneID(id uint64) *ReserveDeleteOne {
	builder := c.Delete().Where(reserve.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReserveDeleteOne{builder}
}

// Query returns a query builder for Reserve.
func (c *ReserveClient) Query() *ReserveQuery {
	return &ReserveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReserve},
		inters: c.Interceptors(),
	}
}

// Get returns a Reserve entity by its id.
func (c *ReserveClient) Get(ctx context.Context, id uint64) (*Reserve, error) {
	return c.Query().Where(reserve.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReserveClient) GetX(ctx context.Context, id uint64) *Reserve {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCabinet queries the cabinet edge of a Reserve.
func (c *ReserveClient) QueryCabinet(r *Reserve) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserve.Table, reserve.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, reserve.CabinetTable, reserve.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Reserve.
func (c *ReserveClient) QueryRider(r *Reserve) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserve.Table, reserve.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, reserve.RiderTable, reserve.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Reserve.
func (c *ReserveClient) QueryCity(r *Reserve) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserve.Table, reserve.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, reserve.CityTable, reserve.CityColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBusiness queries the business edge of a Reserve.
func (c *ReserveClient) QueryBusiness(r *Reserve) *BusinessQuery {
	query := (&BusinessClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(reserve.Table, reserve.FieldID, id),
			sqlgraph.To(business.Table, business.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, reserve.BusinessTable, reserve.BusinessColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReserveClient) Hooks() []Hook {
	hooks := c.hooks.Reserve
	return append(hooks[:len(hooks):len(hooks)], reserve.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *ReserveClient) Interceptors() []Interceptor {
	return c.inters.Reserve
}

func (c *ReserveClient) mutate(ctx context.Context, m *ReserveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReserveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReserveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reserve mutation op: %q", m.Op())
	}
}

// RiderClient is a client for the Rider schema.
type RiderClient struct {
	config
}

// NewRiderClient returns a client for the Rider from the given config.
func NewRiderClient(c config) *RiderClient {
	return &RiderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rider.Hooks(f(g(h())))`.
func (c *RiderClient) Use(hooks ...Hook) {
	c.hooks.Rider = append(c.hooks.Rider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rider.Intercept(f(g(h())))`.
func (c *RiderClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rider = append(c.inters.Rider, interceptors...)
}

// Create returns a builder for creating a Rider entity.
func (c *RiderClient) Create() *RiderCreate {
	mutation := newRiderMutation(c.config, OpCreate)
	return &RiderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rider entities.
func (c *RiderClient) CreateBulk(builders ...*RiderCreate) *RiderCreateBulk {
	return &RiderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiderClient) MapCreateBulk(slice any, setFunc func(*RiderCreate, int)) *RiderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiderCreateBulk{err: fmt.Errorf("calling to RiderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rider.
func (c *RiderClient) Update() *RiderUpdate {
	mutation := newRiderMutation(c.config, OpUpdate)
	return &RiderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiderClient) UpdateOne(r *Rider) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRider(r))
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiderClient) UpdateOneID(id uint64) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRiderID(id))
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rider.
func (c *RiderClient) Delete() *RiderDelete {
	mutation := newRiderMutation(c.config, OpDelete)
	return &RiderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiderClient) DeleteOne(r *Rider) *RiderDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiderClient) DeleteOneID(id uint64) *RiderDeleteOne {
	builder := c.Delete().Where(rider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiderDeleteOne{builder}
}

// Query returns a query builder for Rider.
func (c *RiderClient) Query() *RiderQuery {
	return &RiderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRider},
		inters: c.Interceptors(),
	}
}

// Get returns a Rider entity by its id.
func (c *RiderClient) Get(ctx context.Context, id uint64) (*Rider, error) {
	return c.Query().Where(rider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiderClient) GetX(ctx context.Context, id uint64) *Rider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStation queries the station edge of a Rider.
func (c *RiderClient) QueryStation(r *Rider) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, rider.StationTable, rider.StationColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPerson queries the person edge of a Rider.
func (c *RiderClient) QueryPerson(r *Rider) *PersonQuery {
	query := (&PersonClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(person.Table, person.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rider.PersonTable, rider.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Rider.
func (c *RiderClient) QueryEnterprise(r *Rider) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rider.EnterpriseTable, rider.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContracts queries the contracts edge of a Rider.
func (c *RiderClient) QueryContracts(r *Rider) *ContractQuery {
	query := (&ContractClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.ContractsTable, rider.ContractsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFaults queries the faults edge of a Rider.
func (c *RiderClient) QueryFaults(r *Rider) *CabinetFaultQuery {
	query := (&CabinetFaultClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(cabinetfault.Table, cabinetfault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.FaultsTable, rider.FaultsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Rider.
func (c *RiderClient) QueryOrders(r *Rider) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.OrdersTable, rider.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExchanges queries the exchanges edge of a Rider.
func (c *RiderClient) QueryExchanges(r *Rider) *ExchangeQuery {
	query := (&ExchangeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.ExchangesTable, rider.ExchangesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribes queries the subscribes edge of a Rider.
func (c *RiderClient) QuerySubscribes(r *Rider) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.SubscribesTable, rider.SubscribesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Rider.
func (c *RiderClient) QueryStocks(r *Rider) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.StocksTable, rider.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFollowups queries the followups edge of a Rider.
func (c *RiderClient) QueryFollowups(r *Rider) *RiderFollowUpQuery {
	query := (&RiderFollowUpClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(riderfollowup.Table, riderfollowup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.FollowupsTable, rider.FollowupsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Rider.
func (c *RiderClient) QueryBattery(r *Rider) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, rider.BatteryTable, rider.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBatteryFlows queries the battery_flows edge of a Rider.
func (c *RiderClient) QueryBatteryFlows(r *Rider) *BatteryFlowQuery {
	query := (&BatteryFlowClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rider.Table, rider.FieldID, id),
			sqlgraph.To(batteryflow.Table, batteryflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rider.BatteryFlowsTable, rider.BatteryFlowsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiderClient) Hooks() []Hook {
	hooks := c.hooks.Rider
	return append(hooks[:len(hooks):len(hooks)], rider.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RiderClient) Interceptors() []Interceptor {
	return c.inters.Rider
}

func (c *RiderClient) mutate(ctx context.Context, m *RiderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Rider mutation op: %q", m.Op())
	}
}

// RiderFollowUpClient is a client for the RiderFollowUp schema.
type RiderFollowUpClient struct {
	config
}

// NewRiderFollowUpClient returns a client for the RiderFollowUp from the given config.
func NewRiderFollowUpClient(c config) *RiderFollowUpClient {
	return &RiderFollowUpClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `riderfollowup.Hooks(f(g(h())))`.
func (c *RiderFollowUpClient) Use(hooks ...Hook) {
	c.hooks.RiderFollowUp = append(c.hooks.RiderFollowUp, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `riderfollowup.Intercept(f(g(h())))`.
func (c *RiderFollowUpClient) Intercept(interceptors ...Interceptor) {
	c.inters.RiderFollowUp = append(c.inters.RiderFollowUp, interceptors...)
}

// Create returns a builder for creating a RiderFollowUp entity.
func (c *RiderFollowUpClient) Create() *RiderFollowUpCreate {
	mutation := newRiderFollowUpMutation(c.config, OpCreate)
	return &RiderFollowUpCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RiderFollowUp entities.
func (c *RiderFollowUpClient) CreateBulk(builders ...*RiderFollowUpCreate) *RiderFollowUpCreateBulk {
	return &RiderFollowUpCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiderFollowUpClient) MapCreateBulk(slice any, setFunc func(*RiderFollowUpCreate, int)) *RiderFollowUpCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiderFollowUpCreateBulk{err: fmt.Errorf("calling to RiderFollowUpClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiderFollowUpCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiderFollowUpCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RiderFollowUp.
func (c *RiderFollowUpClient) Update() *RiderFollowUpUpdate {
	mutation := newRiderFollowUpMutation(c.config, OpUpdate)
	return &RiderFollowUpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiderFollowUpClient) UpdateOne(rfu *RiderFollowUp) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUp(rfu))
	return &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiderFollowUpClient) UpdateOneID(id uint64) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUpID(id))
	return &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RiderFollowUp.
func (c *RiderFollowUpClient) Delete() *RiderFollowUpDelete {
	mutation := newRiderFollowUpMutation(c.config, OpDelete)
	return &RiderFollowUpDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiderFollowUpClient) DeleteOne(rfu *RiderFollowUp) *RiderFollowUpDeleteOne {
	return c.DeleteOneID(rfu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiderFollowUpClient) DeleteOneID(id uint64) *RiderFollowUpDeleteOne {
	builder := c.Delete().Where(riderfollowup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiderFollowUpDeleteOne{builder}
}

// Query returns a query builder for RiderFollowUp.
func (c *RiderFollowUpClient) Query() *RiderFollowUpQuery {
	return &RiderFollowUpQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRiderFollowUp},
		inters: c.Interceptors(),
	}
}

// Get returns a RiderFollowUp entity by its id.
func (c *RiderFollowUpClient) Get(ctx context.Context, id uint64) (*RiderFollowUp, error) {
	return c.Query().Where(riderfollowup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiderFollowUpClient) GetX(ctx context.Context, id uint64) *RiderFollowUp {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManager queries the manager edge of a RiderFollowUp.
func (c *RiderFollowUpClient) QueryManager(rfu *RiderFollowUp) *ManagerQuery {
	query := (&ManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rfu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riderfollowup.Table, riderfollowup.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, riderfollowup.ManagerTable, riderfollowup.ManagerColumn),
		)
		fromV = sqlgraph.Neighbors(rfu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a RiderFollowUp.
func (c *RiderFollowUpClient) QueryRider(rfu *RiderFollowUp) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rfu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(riderfollowup.Table, riderfollowup.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, riderfollowup.RiderTable, riderfollowup.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(rfu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RiderFollowUpClient) Hooks() []Hook {
	hooks := c.hooks.RiderFollowUp
	return append(hooks[:len(hooks):len(hooks)], riderfollowup.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *RiderFollowUpClient) Interceptors() []Interceptor {
	return c.inters.RiderFollowUp
}

func (c *RiderFollowUpClient) mutate(ctx context.Context, m *RiderFollowUpMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiderFollowUpCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiderFollowUpUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiderFollowUpDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RiderFollowUp mutation op: %q", m.Op())
	}
}

// RiderPhoneDeviceClient is a client for the RiderPhoneDevice schema.
type RiderPhoneDeviceClient struct {
	config
}

// NewRiderPhoneDeviceClient returns a client for the RiderPhoneDevice from the given config.
func NewRiderPhoneDeviceClient(c config) *RiderPhoneDeviceClient {
	return &RiderPhoneDeviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `riderphonedevice.Hooks(f(g(h())))`.
func (c *RiderPhoneDeviceClient) Use(hooks ...Hook) {
	c.hooks.RiderPhoneDevice = append(c.hooks.RiderPhoneDevice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `riderphonedevice.Intercept(f(g(h())))`.
func (c *RiderPhoneDeviceClient) Intercept(interceptors ...Interceptor) {
	c.inters.RiderPhoneDevice = append(c.inters.RiderPhoneDevice, interceptors...)
}

// Create returns a builder for creating a RiderPhoneDevice entity.
func (c *RiderPhoneDeviceClient) Create() *RiderPhoneDeviceCreate {
	mutation := newRiderPhoneDeviceMutation(c.config, OpCreate)
	return &RiderPhoneDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RiderPhoneDevice entities.
func (c *RiderPhoneDeviceClient) CreateBulk(builders ...*RiderPhoneDeviceCreate) *RiderPhoneDeviceCreateBulk {
	return &RiderPhoneDeviceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RiderPhoneDeviceClient) MapCreateBulk(slice any, setFunc func(*RiderPhoneDeviceCreate, int)) *RiderPhoneDeviceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RiderPhoneDeviceCreateBulk{err: fmt.Errorf("calling to RiderPhoneDeviceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RiderPhoneDeviceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RiderPhoneDeviceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RiderPhoneDevice.
func (c *RiderPhoneDeviceClient) Update() *RiderPhoneDeviceUpdate {
	mutation := newRiderPhoneDeviceMutation(c.config, OpUpdate)
	return &RiderPhoneDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RiderPhoneDeviceClient) UpdateOne(rpd *RiderPhoneDevice) *RiderPhoneDeviceUpdateOne {
	mutation := newRiderPhoneDeviceMutation(c.config, OpUpdateOne, withRiderPhoneDevice(rpd))
	return &RiderPhoneDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RiderPhoneDeviceClient) UpdateOneID(id uint64) *RiderPhoneDeviceUpdateOne {
	mutation := newRiderPhoneDeviceMutation(c.config, OpUpdateOne, withRiderPhoneDeviceID(id))
	return &RiderPhoneDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RiderPhoneDevice.
func (c *RiderPhoneDeviceClient) Delete() *RiderPhoneDeviceDelete {
	mutation := newRiderPhoneDeviceMutation(c.config, OpDelete)
	return &RiderPhoneDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RiderPhoneDeviceClient) DeleteOne(rpd *RiderPhoneDevice) *RiderPhoneDeviceDeleteOne {
	return c.DeleteOneID(rpd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RiderPhoneDeviceClient) DeleteOneID(id uint64) *RiderPhoneDeviceDeleteOne {
	builder := c.Delete().Where(riderphonedevice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RiderPhoneDeviceDeleteOne{builder}
}

// Query returns a query builder for RiderPhoneDevice.
func (c *RiderPhoneDeviceClient) Query() *RiderPhoneDeviceQuery {
	return &RiderPhoneDeviceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRiderPhoneDevice},
		inters: c.Interceptors(),
	}
}

// Get returns a RiderPhoneDevice entity by its id.
func (c *RiderPhoneDeviceClient) Get(ctx context.Context, id uint64) (*RiderPhoneDevice, error) {
	return c.Query().Where(riderphonedevice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RiderPhoneDeviceClient) GetX(ctx context.Context, id uint64) *RiderPhoneDevice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RiderPhoneDeviceClient) Hooks() []Hook {
	return c.hooks.RiderPhoneDevice
}

// Interceptors returns the client interceptors.
func (c *RiderPhoneDeviceClient) Interceptors() []Interceptor {
	return c.inters.RiderPhoneDevice
}

func (c *RiderPhoneDeviceClient) mutate(ctx context.Context, m *RiderPhoneDeviceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RiderPhoneDeviceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RiderPhoneDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RiderPhoneDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RiderPhoneDeviceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RiderPhoneDevice mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleClient) MapCreateBulk(slice any, setFunc func(*RoleCreate, int)) *RoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleCreateBulk{err: fmt.Errorf("calling to RoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id uint64) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id uint64) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id uint64) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id uint64) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryManagers queries the managers edge of a Role.
func (c *RoleClient) QueryManagers(r *Role) *ManagerQuery {
	query := (&ManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.ManagersTable, role.ManagersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// SettingClient is a client for the Setting schema.
type SettingClient struct {
	config
}

// NewSettingClient returns a client for the Setting from the given config.
func NewSettingClient(c config) *SettingClient {
	return &SettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `setting.Hooks(f(g(h())))`.
func (c *SettingClient) Use(hooks ...Hook) {
	c.hooks.Setting = append(c.hooks.Setting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `setting.Intercept(f(g(h())))`.
func (c *SettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.Setting = append(c.inters.Setting, interceptors...)
}

// Create returns a builder for creating a Setting entity.
func (c *SettingClient) Create() *SettingCreate {
	mutation := newSettingMutation(c.config, OpCreate)
	return &SettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Setting entities.
func (c *SettingClient) CreateBulk(builders ...*SettingCreate) *SettingCreateBulk {
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SettingClient) MapCreateBulk(slice any, setFunc func(*SettingCreate, int)) *SettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SettingCreateBulk{err: fmt.Errorf("calling to SettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Setting.
func (c *SettingClient) Update() *SettingUpdate {
	mutation := newSettingMutation(c.config, OpUpdate)
	return &SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SettingClient) UpdateOne(s *Setting) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSetting(s))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SettingClient) UpdateOneID(id uint64) *SettingUpdateOne {
	mutation := newSettingMutation(c.config, OpUpdateOne, withSettingID(id))
	return &SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Setting.
func (c *SettingClient) Delete() *SettingDelete {
	mutation := newSettingMutation(c.config, OpDelete)
	return &SettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SettingClient) DeleteOne(s *Setting) *SettingDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SettingClient) DeleteOneID(id uint64) *SettingDeleteOne {
	builder := c.Delete().Where(setting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SettingDeleteOne{builder}
}

// Query returns a query builder for Setting.
func (c *SettingClient) Query() *SettingQuery {
	return &SettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a Setting entity by its id.
func (c *SettingClient) Get(ctx context.Context, id uint64) (*Setting, error) {
	return c.Query().Where(setting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SettingClient) GetX(ctx context.Context, id uint64) *Setting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SettingClient) Hooks() []Hook {
	hooks := c.hooks.Setting
	return append(hooks[:len(hooks):len(hooks)], setting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SettingClient) Interceptors() []Interceptor {
	return c.inters.Setting
}

func (c *SettingClient) mutate(ctx context.Context, m *SettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Setting mutation op: %q", m.Op())
	}
}

// StockClient is a client for the Stock schema.
type StockClient struct {
	config
}

// NewStockClient returns a client for the Stock from the given config.
func NewStockClient(c config) *StockClient {
	return &StockClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stock.Hooks(f(g(h())))`.
func (c *StockClient) Use(hooks ...Hook) {
	c.hooks.Stock = append(c.hooks.Stock, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stock.Intercept(f(g(h())))`.
func (c *StockClient) Intercept(interceptors ...Interceptor) {
	c.inters.Stock = append(c.inters.Stock, interceptors...)
}

// Create returns a builder for creating a Stock entity.
func (c *StockClient) Create() *StockCreate {
	mutation := newStockMutation(c.config, OpCreate)
	return &StockCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Stock entities.
func (c *StockClient) CreateBulk(builders ...*StockCreate) *StockCreateBulk {
	return &StockCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StockClient) MapCreateBulk(slice any, setFunc func(*StockCreate, int)) *StockCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StockCreateBulk{err: fmt.Errorf("calling to StockClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StockCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StockCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Stock.
func (c *StockClient) Update() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockClient) UpdateOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockClient) UpdateOneID(id uint64) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Stock.
func (c *StockClient) Delete() *StockDelete {
	mutation := newStockMutation(c.config, OpDelete)
	return &StockDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockClient) DeleteOne(s *Stock) *StockDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StockClient) DeleteOneID(id uint64) *StockDeleteOne {
	builder := c.Delete().Where(stock.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockDeleteOne{builder}
}

// Query returns a query builder for Stock.
func (c *StockClient) Query() *StockQuery {
	return &StockQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStock},
		inters: c.Interceptors(),
	}
}

// Get returns a Stock entity by its id.
func (c *StockClient) Get(ctx context.Context, id uint64) (*Stock, error) {
	return c.Query().Where(stock.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockClient) GetX(ctx context.Context, id uint64) *Stock {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Stock.
func (c *StockClient) QueryCity(s *Stock) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.CityTable, stock.CityColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a Stock.
func (c *StockClient) QuerySubscribe(s *Stock) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.SubscribeTable, stock.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Stock.
func (c *StockClient) QueryEbike(s *Stock) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.EbikeTable, stock.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Stock.
func (c *StockClient) QueryBrand(s *Stock) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.BrandTable, stock.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Stock.
func (c *StockClient) QueryBattery(s *Stock) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.BatteryTable, stock.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a Stock.
func (c *StockClient) QueryAgent(s *Stock) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stock.AgentTable, stock.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Stock.
func (c *StockClient) QueryStore(s *Stock) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.StoreTable, stock.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Stock.
func (c *StockClient) QueryCabinet(s *Stock) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.CabinetTable, stock.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Stock.
func (c *StockClient) QueryRider(s *Stock) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.RiderTable, stock.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Stock.
func (c *StockClient) QueryEmployee(s *Stock) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.EmployeeTable, stock.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySpouse queries the spouse edge of a Stock.
func (c *StockClient) QuerySpouse(s *Stock) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, stock.SpouseTable, stock.SpouseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Stock.
func (c *StockClient) QueryParent(s *Stock) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.ParentTable, stock.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Stock.
func (c *StockClient) QueryChildren(s *Stock) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, stock.ChildrenTable, stock.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Stock.
func (c *StockClient) QueryEnterprise(s *Stock) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.EnterpriseTable, stock.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Stock.
func (c *StockClient) QueryStation(s *Stock) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stock.Table, stock.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stock.StationTable, stock.StationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StockClient) Hooks() []Hook {
	hooks := c.hooks.Stock
	return append(hooks[:len(hooks):len(hooks)], stock.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *StockClient) Interceptors() []Interceptor {
	return c.inters.Stock
}

func (c *StockClient) mutate(ctx context.Context, m *StockMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StockCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StockUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StockDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Stock mutation op: %q", m.Op())
	}
}

// StockSummaryClient is a client for the StockSummary schema.
type StockSummaryClient struct {
	config
}

// NewStockSummaryClient returns a client for the StockSummary from the given config.
func NewStockSummaryClient(c config) *StockSummaryClient {
	return &StockSummaryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stocksummary.Hooks(f(g(h())))`.
func (c *StockSummaryClient) Use(hooks ...Hook) {
	c.hooks.StockSummary = append(c.hooks.StockSummary, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stocksummary.Intercept(f(g(h())))`.
func (c *StockSummaryClient) Intercept(interceptors ...Interceptor) {
	c.inters.StockSummary = append(c.inters.StockSummary, interceptors...)
}

// Create returns a builder for creating a StockSummary entity.
func (c *StockSummaryClient) Create() *StockSummaryCreate {
	mutation := newStockSummaryMutation(c.config, OpCreate)
	return &StockSummaryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StockSummary entities.
func (c *StockSummaryClient) CreateBulk(builders ...*StockSummaryCreate) *StockSummaryCreateBulk {
	return &StockSummaryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StockSummaryClient) MapCreateBulk(slice any, setFunc func(*StockSummaryCreate, int)) *StockSummaryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StockSummaryCreateBulk{err: fmt.Errorf("calling to StockSummaryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StockSummaryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StockSummaryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StockSummary.
func (c *StockSummaryClient) Update() *StockSummaryUpdate {
	mutation := newStockSummaryMutation(c.config, OpUpdate)
	return &StockSummaryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockSummaryClient) UpdateOne(ss *StockSummary) *StockSummaryUpdateOne {
	mutation := newStockSummaryMutation(c.config, OpUpdateOne, withStockSummary(ss))
	return &StockSummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockSummaryClient) UpdateOneID(id uint64) *StockSummaryUpdateOne {
	mutation := newStockSummaryMutation(c.config, OpUpdateOne, withStockSummaryID(id))
	return &StockSummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StockSummary.
func (c *StockSummaryClient) Delete() *StockSummaryDelete {
	mutation := newStockSummaryMutation(c.config, OpDelete)
	return &StockSummaryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockSummaryClient) DeleteOne(ss *StockSummary) *StockSummaryDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StockSummaryClient) DeleteOneID(id uint64) *StockSummaryDeleteOne {
	builder := c.Delete().Where(stocksummary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockSummaryDeleteOne{builder}
}

// Query returns a query builder for StockSummary.
func (c *StockSummaryClient) Query() *StockSummaryQuery {
	return &StockSummaryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStockSummary},
		inters: c.Interceptors(),
	}
}

// Get returns a StockSummary entity by its id.
func (c *StockSummaryClient) Get(ctx context.Context, id uint64) (*StockSummary, error) {
	return c.Query().Where(stocksummary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockSummaryClient) GetX(ctx context.Context, id uint64) *StockSummary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEnterprise queries the enterprise edge of a StockSummary.
func (c *StockSummaryClient) QueryEnterprise(ss *StockSummary) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.EnterpriseTable, stocksummary.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a StockSummary.
func (c *StockSummaryClient) QueryStation(ss *StockSummary) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.StationTable, stocksummary.StationColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a StockSummary.
func (c *StockSummaryClient) QueryStore(ss *StockSummary) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.StoreTable, stocksummary.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a StockSummary.
func (c *StockSummaryClient) QueryRider(ss *StockSummary) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.RiderTable, stocksummary.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a StockSummary.
func (c *StockSummaryClient) QueryCabinet(ss *StockSummary) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stocksummary.Table, stocksummary.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, stocksummary.CabinetTable, stocksummary.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StockSummaryClient) Hooks() []Hook {
	return c.hooks.StockSummary
}

// Interceptors returns the client interceptors.
func (c *StockSummaryClient) Interceptors() []Interceptor {
	return c.inters.StockSummary
}

func (c *StockSummaryClient) mutate(ctx context.Context, m *StockSummaryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StockSummaryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StockSummaryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StockSummaryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StockSummaryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StockSummary mutation op: %q", m.Op())
	}
}

// StoreClient is a client for the Store schema.
type StoreClient struct {
	config
}

// NewStoreClient returns a client for the Store from the given config.
func NewStoreClient(c config) *StoreClient {
	return &StoreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `store.Hooks(f(g(h())))`.
func (c *StoreClient) Use(hooks ...Hook) {
	c.hooks.Store = append(c.hooks.Store, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `store.Intercept(f(g(h())))`.
func (c *StoreClient) Intercept(interceptors ...Interceptor) {
	c.inters.Store = append(c.inters.Store, interceptors...)
}

// Create returns a builder for creating a Store entity.
func (c *StoreClient) Create() *StoreCreate {
	mutation := newStoreMutation(c.config, OpCreate)
	return &StoreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Store entities.
func (c *StoreClient) CreateBulk(builders ...*StoreCreate) *StoreCreateBulk {
	return &StoreCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StoreClient) MapCreateBulk(slice any, setFunc func(*StoreCreate, int)) *StoreCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StoreCreateBulk{err: fmt.Errorf("calling to StoreClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StoreCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StoreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Store.
func (c *StoreClient) Update() *StoreUpdate {
	mutation := newStoreMutation(c.config, OpUpdate)
	return &StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreClient) UpdateOne(s *Store) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(s))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreClient) UpdateOneID(id uint64) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStoreID(id))
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Store.
func (c *StoreClient) Delete() *StoreDelete {
	mutation := newStoreMutation(c.config, OpDelete)
	return &StoreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreClient) DeleteOne(s *Store) *StoreDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreClient) DeleteOneID(id uint64) *StoreDeleteOne {
	builder := c.Delete().Where(store.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreDeleteOne{builder}
}

// Query returns a query builder for Store.
func (c *StoreClient) Query() *StoreQuery {
	return &StoreQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStore},
		inters: c.Interceptors(),
	}
}

// Get returns a Store entity by its id.
func (c *StoreClient) Get(ctx context.Context, id uint64) (*Store, error) {
	return c.Query().Where(store.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreClient) GetX(ctx context.Context, id uint64) *Store {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Store.
func (c *StoreClient) QueryCity(s *Store) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, store.CityTable, store.CityColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroup queries the group edge of a Store.
func (c *StoreClient) QueryGroup(s *Store) *StoreGroupQuery {
	query := (&StoreGroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(storegroup.Table, storegroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, store.GroupTable, store.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBranch queries the branch edge of a Store.
func (c *StoreClient) QueryBranch(s *Store) *BranchQuery {
	query := (&BranchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, store.BranchTable, store.BranchColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Store.
func (c *StoreClient) QueryEmployee(s *Store) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, store.EmployeeTable, store.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStocks queries the stocks edge of a Store.
func (c *StoreClient) QueryStocks(s *Store) *StockQuery {
	query := (&StockClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.StocksTable, store.StocksColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttendances queries the attendances edge of a Store.
func (c *StoreClient) QueryAttendances(s *Store) *AttendanceQuery {
	query := (&AttendanceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.AttendancesTable, store.AttendancesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryExceptions queries the exceptions edge of a Store.
func (c *StoreClient) QueryExceptions(s *Store) *ExceptionQuery {
	query := (&ExceptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(exception.Table, exception.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.ExceptionsTable, store.ExceptionsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGoods queries the goods edge of a Store.
func (c *StoreClient) QueryGoods(s *Store) *StoreGoodsQuery {
	query := (&StoreGoodsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(storegoods.Table, storegoods.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.GoodsTable, store.GoodsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployees queries the employees edge of a Store.
func (c *StoreClient) QueryEmployees(s *Store) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, store.EmployeesTable, store.EmployeesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StoreClient) Hooks() []Hook {
	hooks := c.hooks.Store
	return append(hooks[:len(hooks):len(hooks)], store.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *StoreClient) Interceptors() []Interceptor {
	return c.inters.Store
}

func (c *StoreClient) mutate(ctx context.Context, m *StoreMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Store mutation op: %q", m.Op())
	}
}

// StoreGoodsClient is a client for the StoreGoods schema.
type StoreGoodsClient struct {
	config
}

// NewStoreGoodsClient returns a client for the StoreGoods from the given config.
func NewStoreGoodsClient(c config) *StoreGoodsClient {
	return &StoreGoodsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storegoods.Hooks(f(g(h())))`.
func (c *StoreGoodsClient) Use(hooks ...Hook) {
	c.hooks.StoreGoods = append(c.hooks.StoreGoods, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storegoods.Intercept(f(g(h())))`.
func (c *StoreGoodsClient) Intercept(interceptors ...Interceptor) {
	c.inters.StoreGoods = append(c.inters.StoreGoods, interceptors...)
}

// Create returns a builder for creating a StoreGoods entity.
func (c *StoreGoodsClient) Create() *StoreGoodsCreate {
	mutation := newStoreGoodsMutation(c.config, OpCreate)
	return &StoreGoodsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StoreGoods entities.
func (c *StoreGoodsClient) CreateBulk(builders ...*StoreGoodsCreate) *StoreGoodsCreateBulk {
	return &StoreGoodsCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StoreGoodsClient) MapCreateBulk(slice any, setFunc func(*StoreGoodsCreate, int)) *StoreGoodsCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StoreGoodsCreateBulk{err: fmt.Errorf("calling to StoreGoodsClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StoreGoodsCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StoreGoodsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StoreGoods.
func (c *StoreGoodsClient) Update() *StoreGoodsUpdate {
	mutation := newStoreGoodsMutation(c.config, OpUpdate)
	return &StoreGoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreGoodsClient) UpdateOne(sg *StoreGoods) *StoreGoodsUpdateOne {
	mutation := newStoreGoodsMutation(c.config, OpUpdateOne, withStoreGoods(sg))
	return &StoreGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreGoodsClient) UpdateOneID(id uint64) *StoreGoodsUpdateOne {
	mutation := newStoreGoodsMutation(c.config, OpUpdateOne, withStoreGoodsID(id))
	return &StoreGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StoreGoods.
func (c *StoreGoodsClient) Delete() *StoreGoodsDelete {
	mutation := newStoreGoodsMutation(c.config, OpDelete)
	return &StoreGoodsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreGoodsClient) DeleteOne(sg *StoreGoods) *StoreGoodsDeleteOne {
	return c.DeleteOneID(sg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreGoodsClient) DeleteOneID(id uint64) *StoreGoodsDeleteOne {
	builder := c.Delete().Where(storegoods.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreGoodsDeleteOne{builder}
}

// Query returns a query builder for StoreGoods.
func (c *StoreGoodsClient) Query() *StoreGoodsQuery {
	return &StoreGoodsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStoreGoods},
		inters: c.Interceptors(),
	}
}

// Get returns a StoreGoods entity by its id.
func (c *StoreGoodsClient) Get(ctx context.Context, id uint64) (*StoreGoods, error) {
	return c.Query().Where(storegoods.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreGoodsClient) GetX(ctx context.Context, id uint64) *StoreGoods {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGoods queries the goods edge of a StoreGoods.
func (c *StoreGoodsClient) QueryGoods(sg *StoreGoods) *GoodsQuery {
	query := (&GoodsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storegoods.Table, storegoods.FieldID, id),
			sqlgraph.To(goods.Table, goods.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, storegoods.GoodsTable, storegoods.GoodsColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a StoreGoods.
func (c *StoreGoodsClient) QueryStore(sg *StoreGoods) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sg.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storegoods.Table, storegoods.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, storegoods.StoreTable, storegoods.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(sg.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StoreGoodsClient) Hooks() []Hook {
	return c.hooks.StoreGoods
}

// Interceptors returns the client interceptors.
func (c *StoreGoodsClient) Interceptors() []Interceptor {
	return c.inters.StoreGoods
}

func (c *StoreGoodsClient) mutate(ctx context.Context, m *StoreGoodsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreGoodsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreGoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreGoodsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StoreGoods mutation op: %q", m.Op())
	}
}

// StoreGroupClient is a client for the StoreGroup schema.
type StoreGroupClient struct {
	config
}

// NewStoreGroupClient returns a client for the StoreGroup from the given config.
func NewStoreGroupClient(c config) *StoreGroupClient {
	return &StoreGroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storegroup.Hooks(f(g(h())))`.
func (c *StoreGroupClient) Use(hooks ...Hook) {
	c.hooks.StoreGroup = append(c.hooks.StoreGroup, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storegroup.Intercept(f(g(h())))`.
func (c *StoreGroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.StoreGroup = append(c.inters.StoreGroup, interceptors...)
}

// Create returns a builder for creating a StoreGroup entity.
func (c *StoreGroupClient) Create() *StoreGroupCreate {
	mutation := newStoreGroupMutation(c.config, OpCreate)
	return &StoreGroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StoreGroup entities.
func (c *StoreGroupClient) CreateBulk(builders ...*StoreGroupCreate) *StoreGroupCreateBulk {
	return &StoreGroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StoreGroupClient) MapCreateBulk(slice any, setFunc func(*StoreGroupCreate, int)) *StoreGroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StoreGroupCreateBulk{err: fmt.Errorf("calling to StoreGroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StoreGroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StoreGroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StoreGroup.
func (c *StoreGroupClient) Update() *StoreGroupUpdate {
	mutation := newStoreGroupMutation(c.config, OpUpdate)
	return &StoreGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StoreGroupClient) UpdateOne(sg *StoreGroup) *StoreGroupUpdateOne {
	mutation := newStoreGroupMutation(c.config, OpUpdateOne, withStoreGroup(sg))
	return &StoreGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StoreGroupClient) UpdateOneID(id uint64) *StoreGroupUpdateOne {
	mutation := newStoreGroupMutation(c.config, OpUpdateOne, withStoreGroupID(id))
	return &StoreGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StoreGroup.
func (c *StoreGroupClient) Delete() *StoreGroupDelete {
	mutation := newStoreGroupMutation(c.config, OpDelete)
	return &StoreGroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StoreGroupClient) DeleteOne(sg *StoreGroup) *StoreGroupDeleteOne {
	return c.DeleteOneID(sg.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StoreGroupClient) DeleteOneID(id uint64) *StoreGroupDeleteOne {
	builder := c.Delete().Where(storegroup.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StoreGroupDeleteOne{builder}
}

// Query returns a query builder for StoreGroup.
func (c *StoreGroupClient) Query() *StoreGroupQuery {
	return &StoreGroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStoreGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a StoreGroup entity by its id.
func (c *StoreGroupClient) Get(ctx context.Context, id uint64) (*StoreGroup, error) {
	return c.Query().Where(storegroup.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StoreGroupClient) GetX(ctx context.Context, id uint64) *StoreGroup {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StoreGroupClient) Hooks() []Hook {
	hooks := c.hooks.StoreGroup
	return append(hooks[:len(hooks):len(hooks)], storegroup.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *StoreGroupClient) Interceptors() []Interceptor {
	return c.inters.StoreGroup
}

func (c *StoreGroupClient) mutate(ctx context.Context, m *StoreGroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StoreGroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StoreGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StoreGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StoreGroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StoreGroup mutation op: %q", m.Op())
	}
}

// SubscribeClient is a client for the Subscribe schema.
type SubscribeClient struct {
	config
}

// NewSubscribeClient returns a client for the Subscribe from the given config.
func NewSubscribeClient(c config) *SubscribeClient {
	return &SubscribeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribe.Hooks(f(g(h())))`.
func (c *SubscribeClient) Use(hooks ...Hook) {
	c.hooks.Subscribe = append(c.hooks.Subscribe, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribe.Intercept(f(g(h())))`.
func (c *SubscribeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subscribe = append(c.inters.Subscribe, interceptors...)
}

// Create returns a builder for creating a Subscribe entity.
func (c *SubscribeClient) Create() *SubscribeCreate {
	mutation := newSubscribeMutation(c.config, OpCreate)
	return &SubscribeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subscribe entities.
func (c *SubscribeClient) CreateBulk(builders ...*SubscribeCreate) *SubscribeCreateBulk {
	return &SubscribeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscribeClient) MapCreateBulk(slice any, setFunc func(*SubscribeCreate, int)) *SubscribeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscribeCreateBulk{err: fmt.Errorf("calling to SubscribeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscribeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscribeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subscribe.
func (c *SubscribeClient) Update() *SubscribeUpdate {
	mutation := newSubscribeMutation(c.config, OpUpdate)
	return &SubscribeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeClient) UpdateOne(s *Subscribe) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribe(s))
	return &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeClient) UpdateOneID(id uint64) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribeID(id))
	return &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subscribe.
func (c *SubscribeClient) Delete() *SubscribeDelete {
	mutation := newSubscribeMutation(c.config, OpDelete)
	return &SubscribeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeClient) DeleteOne(s *Subscribe) *SubscribeDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeClient) DeleteOneID(id uint64) *SubscribeDeleteOne {
	builder := c.Delete().Where(subscribe.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeDeleteOne{builder}
}

// Query returns a query builder for Subscribe.
func (c *SubscribeClient) Query() *SubscribeQuery {
	return &SubscribeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribe},
		inters: c.Interceptors(),
	}
}

// Get returns a Subscribe entity by its id.
func (c *SubscribeClient) Get(ctx context.Context, id uint64) (*Subscribe, error) {
	return c.Query().Where(subscribe.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeClient) GetX(ctx context.Context, id uint64) *Subscribe {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlan queries the plan edge of a Subscribe.
func (c *SubscribeClient) QueryPlan(s *Subscribe) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.PlanTable, subscribe.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a Subscribe.
func (c *SubscribeClient) QueryEmployee(s *Subscribe) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.EmployeeTable, subscribe.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a Subscribe.
func (c *SubscribeClient) QueryCity(s *Subscribe) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.CityTable, subscribe.CityColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStation queries the station edge of a Subscribe.
func (c *SubscribeClient) QueryStation(s *Subscribe) *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.StationTable, subscribe.StationColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a Subscribe.
func (c *SubscribeClient) QueryStore(s *Subscribe) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.StoreTable, subscribe.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a Subscribe.
func (c *SubscribeClient) QueryCabinet(s *Subscribe) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.CabinetTable, subscribe.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBrand queries the brand edge of a Subscribe.
func (c *SubscribeClient) QueryBrand(s *Subscribe) *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.BrandTable, subscribe.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEbike queries the ebike edge of a Subscribe.
func (c *SubscribeClient) QueryEbike(s *Subscribe) *EbikeQuery {
	query := (&EbikeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.EbikeTable, subscribe.EbikeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a Subscribe.
func (c *SubscribeClient) QueryRider(s *Subscribe) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.RiderTable, subscribe.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a Subscribe.
func (c *SubscribeClient) QueryEnterprise(s *Subscribe) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.EnterpriseTable, subscribe.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPauses queries the pauses edge of a Subscribe.
func (c *SubscribeClient) QueryPauses(s *Subscribe) *SubscribePauseQuery {
	query := (&SubscribePauseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(subscribepause.Table, subscribepause.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.PausesTable, subscribe.PausesColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySuspends queries the suspends edge of a Subscribe.
func (c *SubscribeClient) QuerySuspends(s *Subscribe) *SubscribeSuspendQuery {
	query := (&SubscribeSuspendClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(subscribesuspend.Table, subscribesuspend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.SuspendsTable, subscribe.SuspendsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAlters queries the alters edge of a Subscribe.
func (c *SubscribeClient) QueryAlters(s *Subscribe) *SubscribeAlterQuery {
	query := (&SubscribeAlterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(subscribealter.Table, subscribealter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.AltersTable, subscribe.AltersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrders queries the orders edge of a Subscribe.
func (c *SubscribeClient) QueryOrders(s *Subscribe) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.OrdersTable, subscribe.OrdersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInitialOrder queries the initial_order edge of a Subscribe.
func (c *SubscribeClient) QueryInitialOrder(s *Subscribe) *OrderQuery {
	query := (&OrderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.InitialOrderTable, subscribe.InitialOrderColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBills queries the bills edge of a Subscribe.
func (c *SubscribeClient) QueryBills(s *Subscribe) *EnterpriseBillQuery {
	query := (&EnterpriseBillClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(enterprisebill.Table, enterprisebill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.BillsTable, subscribe.BillsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBattery queries the battery edge of a Subscribe.
func (c *SubscribeClient) QueryBattery(s *Subscribe) *BatteryQuery {
	query := (&BatteryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, subscribe.BatteryTable, subscribe.BatteryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprisePrice queries the enterprise_price edge of a Subscribe.
func (c *SubscribeClient) QueryEnterprisePrice(s *Subscribe) *EnterprisePriceQuery {
	query := (&EnterprisePriceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, id),
			sqlgraph.To(enterpriseprice.Table, enterpriseprice.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.EnterprisePriceTable, subscribe.EnterprisePriceColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribeClient) Hooks() []Hook {
	hooks := c.hooks.Subscribe
	return append(hooks[:len(hooks):len(hooks)], subscribe.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubscribeClient) Interceptors() []Interceptor {
	return c.inters.Subscribe
}

func (c *SubscribeClient) mutate(ctx context.Context, m *SubscribeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subscribe mutation op: %q", m.Op())
	}
}

// SubscribeAlterClient is a client for the SubscribeAlter schema.
type SubscribeAlterClient struct {
	config
}

// NewSubscribeAlterClient returns a client for the SubscribeAlter from the given config.
func NewSubscribeAlterClient(c config) *SubscribeAlterClient {
	return &SubscribeAlterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribealter.Hooks(f(g(h())))`.
func (c *SubscribeAlterClient) Use(hooks ...Hook) {
	c.hooks.SubscribeAlter = append(c.hooks.SubscribeAlter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribealter.Intercept(f(g(h())))`.
func (c *SubscribeAlterClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribeAlter = append(c.inters.SubscribeAlter, interceptors...)
}

// Create returns a builder for creating a SubscribeAlter entity.
func (c *SubscribeAlterClient) Create() *SubscribeAlterCreate {
	mutation := newSubscribeAlterMutation(c.config, OpCreate)
	return &SubscribeAlterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribeAlter entities.
func (c *SubscribeAlterClient) CreateBulk(builders ...*SubscribeAlterCreate) *SubscribeAlterCreateBulk {
	return &SubscribeAlterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscribeAlterClient) MapCreateBulk(slice any, setFunc func(*SubscribeAlterCreate, int)) *SubscribeAlterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscribeAlterCreateBulk{err: fmt.Errorf("calling to SubscribeAlterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscribeAlterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscribeAlterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribeAlter.
func (c *SubscribeAlterClient) Update() *SubscribeAlterUpdate {
	mutation := newSubscribeAlterMutation(c.config, OpUpdate)
	return &SubscribeAlterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeAlterClient) UpdateOne(sa *SubscribeAlter) *SubscribeAlterUpdateOne {
	mutation := newSubscribeAlterMutation(c.config, OpUpdateOne, withSubscribeAlter(sa))
	return &SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeAlterClient) UpdateOneID(id uint64) *SubscribeAlterUpdateOne {
	mutation := newSubscribeAlterMutation(c.config, OpUpdateOne, withSubscribeAlterID(id))
	return &SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribeAlter.
func (c *SubscribeAlterClient) Delete() *SubscribeAlterDelete {
	mutation := newSubscribeAlterMutation(c.config, OpDelete)
	return &SubscribeAlterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeAlterClient) DeleteOne(sa *SubscribeAlter) *SubscribeAlterDeleteOne {
	return c.DeleteOneID(sa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeAlterClient) DeleteOneID(id uint64) *SubscribeAlterDeleteOne {
	builder := c.Delete().Where(subscribealter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeAlterDeleteOne{builder}
}

// Query returns a query builder for SubscribeAlter.
func (c *SubscribeAlterClient) Query() *SubscribeAlterQuery {
	return &SubscribeAlterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribeAlter},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribeAlter entity by its id.
func (c *SubscribeAlterClient) Get(ctx context.Context, id uint64) (*SubscribeAlter, error) {
	return c.Query().Where(subscribealter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeAlterClient) GetX(ctx context.Context, id uint64) *SubscribeAlter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QueryRider(sa *SubscribeAlter) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribealter.RiderTable, subscribealter.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryManager queries the manager edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QueryManager(sa *SubscribeAlter) *ManagerQuery {
	query := (&ManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribealter.ManagerTable, subscribealter.ManagerColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnterprise queries the enterprise edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QueryEnterprise(sa *SubscribeAlter) *EnterpriseQuery {
	query := (&EnterpriseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribealter.EnterpriseTable, subscribealter.EnterpriseColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAgent queries the agent edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QueryAgent(sa *SubscribeAlter) *AgentQuery {
	query := (&AgentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribealter.AgentTable, subscribealter.AgentColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a SubscribeAlter.
func (c *SubscribeAlterClient) QuerySubscribe(sa *SubscribeAlter) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribealter.Table, subscribealter.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribealter.SubscribeTable, subscribealter.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(sa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribeAlterClient) Hooks() []Hook {
	hooks := c.hooks.SubscribeAlter
	return append(hooks[:len(hooks):len(hooks)], subscribealter.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubscribeAlterClient) Interceptors() []Interceptor {
	return c.inters.SubscribeAlter
}

func (c *SubscribeAlterClient) mutate(ctx context.Context, m *SubscribeAlterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeAlterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeAlterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeAlterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribeAlter mutation op: %q", m.Op())
	}
}

// SubscribePauseClient is a client for the SubscribePause schema.
type SubscribePauseClient struct {
	config
}

// NewSubscribePauseClient returns a client for the SubscribePause from the given config.
func NewSubscribePauseClient(c config) *SubscribePauseClient {
	return &SubscribePauseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribepause.Hooks(f(g(h())))`.
func (c *SubscribePauseClient) Use(hooks ...Hook) {
	c.hooks.SubscribePause = append(c.hooks.SubscribePause, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribepause.Intercept(f(g(h())))`.
func (c *SubscribePauseClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribePause = append(c.inters.SubscribePause, interceptors...)
}

// Create returns a builder for creating a SubscribePause entity.
func (c *SubscribePauseClient) Create() *SubscribePauseCreate {
	mutation := newSubscribePauseMutation(c.config, OpCreate)
	return &SubscribePauseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribePause entities.
func (c *SubscribePauseClient) CreateBulk(builders ...*SubscribePauseCreate) *SubscribePauseCreateBulk {
	return &SubscribePauseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscribePauseClient) MapCreateBulk(slice any, setFunc func(*SubscribePauseCreate, int)) *SubscribePauseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscribePauseCreateBulk{err: fmt.Errorf("calling to SubscribePauseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscribePauseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscribePauseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribePause.
func (c *SubscribePauseClient) Update() *SubscribePauseUpdate {
	mutation := newSubscribePauseMutation(c.config, OpUpdate)
	return &SubscribePauseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribePauseClient) UpdateOne(sp *SubscribePause) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePause(sp))
	return &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribePauseClient) UpdateOneID(id uint64) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePauseID(id))
	return &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribePause.
func (c *SubscribePauseClient) Delete() *SubscribePauseDelete {
	mutation := newSubscribePauseMutation(c.config, OpDelete)
	return &SubscribePauseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribePauseClient) DeleteOne(sp *SubscribePause) *SubscribePauseDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribePauseClient) DeleteOneID(id uint64) *SubscribePauseDeleteOne {
	builder := c.Delete().Where(subscribepause.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribePauseDeleteOne{builder}
}

// Query returns a query builder for SubscribePause.
func (c *SubscribePauseClient) Query() *SubscribePauseQuery {
	return &SubscribePauseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribePause},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribePause entity by its id.
func (c *SubscribePauseClient) Get(ctx context.Context, id uint64) (*SubscribePause, error) {
	return c.Query().Where(subscribepause.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribePauseClient) GetX(ctx context.Context, id uint64) *SubscribePause {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRider queries the rider edge of a SubscribePause.
func (c *SubscribePauseClient) QueryRider(sp *SubscribePause) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.RiderTable, subscribepause.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmployee queries the employee edge of a SubscribePause.
func (c *SubscribePauseClient) QueryEmployee(sp *SubscribePause) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EmployeeTable, subscribepause.EmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCity queries the city edge of a SubscribePause.
func (c *SubscribePauseClient) QueryCity(sp *SubscribePause) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.CityTable, subscribepause.CityColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStore queries the store edge of a SubscribePause.
func (c *SubscribePauseClient) QueryStore(sp *SubscribePause) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.StoreTable, subscribepause.StoreColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndStore queries the endStore edge of a SubscribePause.
func (c *SubscribePauseClient) QueryEndStore(sp *SubscribePause) *StoreQuery {
	query := (&StoreClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndStoreTable, subscribepause.EndStoreColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCabinet queries the cabinet edge of a SubscribePause.
func (c *SubscribePauseClient) QueryCabinet(sp *SubscribePause) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.CabinetTable, subscribepause.CabinetColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndCabinet queries the endCabinet edge of a SubscribePause.
func (c *SubscribePauseClient) QueryEndCabinet(sp *SubscribePause) *CabinetQuery {
	query := (&CabinetClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndCabinetTable, subscribepause.EndCabinetColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a SubscribePause.
func (c *SubscribePauseClient) QuerySubscribe(sp *SubscribePause) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribepause.SubscribeTable, subscribepause.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEndEmployee queries the end_employee edge of a SubscribePause.
func (c *SubscribePauseClient) QueryEndEmployee(sp *SubscribePause) *EmployeeQuery {
	query := (&EmployeeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndEmployeeTable, subscribepause.EndEmployeeColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySuspends queries the suspends edge of a SubscribePause.
func (c *SubscribePauseClient) QuerySuspends(sp *SubscribePause) *SubscribeSuspendQuery {
	query := (&SubscribeSuspendClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, id),
			sqlgraph.To(subscribesuspend.Table, subscribesuspend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribepause.SuspendsTable, subscribepause.SuspendsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribePauseClient) Hooks() []Hook {
	hooks := c.hooks.SubscribePause
	return append(hooks[:len(hooks):len(hooks)], subscribepause.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubscribePauseClient) Interceptors() []Interceptor {
	return c.inters.SubscribePause
}

func (c *SubscribePauseClient) mutate(ctx context.Context, m *SubscribePauseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribePauseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribePauseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribePauseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribePause mutation op: %q", m.Op())
	}
}

// SubscribeReminderClient is a client for the SubscribeReminder schema.
type SubscribeReminderClient struct {
	config
}

// NewSubscribeReminderClient returns a client for the SubscribeReminder from the given config.
func NewSubscribeReminderClient(c config) *SubscribeReminderClient {
	return &SubscribeReminderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribereminder.Hooks(f(g(h())))`.
func (c *SubscribeReminderClient) Use(hooks ...Hook) {
	c.hooks.SubscribeReminder = append(c.hooks.SubscribeReminder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribereminder.Intercept(f(g(h())))`.
func (c *SubscribeReminderClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribeReminder = append(c.inters.SubscribeReminder, interceptors...)
}

// Create returns a builder for creating a SubscribeReminder entity.
func (c *SubscribeReminderClient) Create() *SubscribeReminderCreate {
	mutation := newSubscribeReminderMutation(c.config, OpCreate)
	return &SubscribeReminderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribeReminder entities.
func (c *SubscribeReminderClient) CreateBulk(builders ...*SubscribeReminderCreate) *SubscribeReminderCreateBulk {
	return &SubscribeReminderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscribeReminderClient) MapCreateBulk(slice any, setFunc func(*SubscribeReminderCreate, int)) *SubscribeReminderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscribeReminderCreateBulk{err: fmt.Errorf("calling to SubscribeReminderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscribeReminderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscribeReminderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribeReminder.
func (c *SubscribeReminderClient) Update() *SubscribeReminderUpdate {
	mutation := newSubscribeReminderMutation(c.config, OpUpdate)
	return &SubscribeReminderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeReminderClient) UpdateOne(sr *SubscribeReminder) *SubscribeReminderUpdateOne {
	mutation := newSubscribeReminderMutation(c.config, OpUpdateOne, withSubscribeReminder(sr))
	return &SubscribeReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeReminderClient) UpdateOneID(id uint64) *SubscribeReminderUpdateOne {
	mutation := newSubscribeReminderMutation(c.config, OpUpdateOne, withSubscribeReminderID(id))
	return &SubscribeReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribeReminder.
func (c *SubscribeReminderClient) Delete() *SubscribeReminderDelete {
	mutation := newSubscribeReminderMutation(c.config, OpDelete)
	return &SubscribeReminderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeReminderClient) DeleteOne(sr *SubscribeReminder) *SubscribeReminderDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeReminderClient) DeleteOneID(id uint64) *SubscribeReminderDeleteOne {
	builder := c.Delete().Where(subscribereminder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeReminderDeleteOne{builder}
}

// Query returns a query builder for SubscribeReminder.
func (c *SubscribeReminderClient) Query() *SubscribeReminderQuery {
	return &SubscribeReminderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribeReminder},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribeReminder entity by its id.
func (c *SubscribeReminderClient) Get(ctx context.Context, id uint64) (*SubscribeReminder, error) {
	return c.Query().Where(subscribereminder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeReminderClient) GetX(ctx context.Context, id uint64) *SubscribeReminder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubscribe queries the subscribe edge of a SubscribeReminder.
func (c *SubscribeReminderClient) QuerySubscribe(sr *SubscribeReminder) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribereminder.Table, subscribereminder.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribereminder.SubscribeTable, subscribereminder.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlan queries the plan edge of a SubscribeReminder.
func (c *SubscribeReminderClient) QueryPlan(sr *SubscribeReminder) *PlanQuery {
	query := (&PlanClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribereminder.Table, subscribereminder.FieldID, id),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribereminder.PlanTable, subscribereminder.PlanColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a SubscribeReminder.
func (c *SubscribeReminderClient) QueryRider(sr *SubscribeReminder) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribereminder.Table, subscribereminder.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribereminder.RiderTable, subscribereminder.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribeReminderClient) Hooks() []Hook {
	return c.hooks.SubscribeReminder
}

// Interceptors returns the client interceptors.
func (c *SubscribeReminderClient) Interceptors() []Interceptor {
	return c.inters.SubscribeReminder
}

func (c *SubscribeReminderClient) mutate(ctx context.Context, m *SubscribeReminderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeReminderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeReminderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeReminderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeReminderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribeReminder mutation op: %q", m.Op())
	}
}

// SubscribeSuspendClient is a client for the SubscribeSuspend schema.
type SubscribeSuspendClient struct {
	config
}

// NewSubscribeSuspendClient returns a client for the SubscribeSuspend from the given config.
func NewSubscribeSuspendClient(c config) *SubscribeSuspendClient {
	return &SubscribeSuspendClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subscribesuspend.Hooks(f(g(h())))`.
func (c *SubscribeSuspendClient) Use(hooks ...Hook) {
	c.hooks.SubscribeSuspend = append(c.hooks.SubscribeSuspend, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subscribesuspend.Intercept(f(g(h())))`.
func (c *SubscribeSuspendClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubscribeSuspend = append(c.inters.SubscribeSuspend, interceptors...)
}

// Create returns a builder for creating a SubscribeSuspend entity.
func (c *SubscribeSuspendClient) Create() *SubscribeSuspendCreate {
	mutation := newSubscribeSuspendMutation(c.config, OpCreate)
	return &SubscribeSuspendCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubscribeSuspend entities.
func (c *SubscribeSuspendClient) CreateBulk(builders ...*SubscribeSuspendCreate) *SubscribeSuspendCreateBulk {
	return &SubscribeSuspendCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubscribeSuspendClient) MapCreateBulk(slice any, setFunc func(*SubscribeSuspendCreate, int)) *SubscribeSuspendCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubscribeSuspendCreateBulk{err: fmt.Errorf("calling to SubscribeSuspendClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubscribeSuspendCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubscribeSuspendCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubscribeSuspend.
func (c *SubscribeSuspendClient) Update() *SubscribeSuspendUpdate {
	mutation := newSubscribeSuspendMutation(c.config, OpUpdate)
	return &SubscribeSuspendUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubscribeSuspendClient) UpdateOne(ss *SubscribeSuspend) *SubscribeSuspendUpdateOne {
	mutation := newSubscribeSuspendMutation(c.config, OpUpdateOne, withSubscribeSuspend(ss))
	return &SubscribeSuspendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubscribeSuspendClient) UpdateOneID(id uint64) *SubscribeSuspendUpdateOne {
	mutation := newSubscribeSuspendMutation(c.config, OpUpdateOne, withSubscribeSuspendID(id))
	return &SubscribeSuspendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubscribeSuspend.
func (c *SubscribeSuspendClient) Delete() *SubscribeSuspendDelete {
	mutation := newSubscribeSuspendMutation(c.config, OpDelete)
	return &SubscribeSuspendDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubscribeSuspendClient) DeleteOne(ss *SubscribeSuspend) *SubscribeSuspendDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubscribeSuspendClient) DeleteOneID(id uint64) *SubscribeSuspendDeleteOne {
	builder := c.Delete().Where(subscribesuspend.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubscribeSuspendDeleteOne{builder}
}

// Query returns a query builder for SubscribeSuspend.
func (c *SubscribeSuspendClient) Query() *SubscribeSuspendQuery {
	return &SubscribeSuspendQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubscribeSuspend},
		inters: c.Interceptors(),
	}
}

// Get returns a SubscribeSuspend entity by its id.
func (c *SubscribeSuspendClient) Get(ctx context.Context, id uint64) (*SubscribeSuspend, error) {
	return c.Query().Where(subscribesuspend.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubscribeSuspendClient) GetX(ctx context.Context, id uint64) *SubscribeSuspend {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a SubscribeSuspend.
func (c *SubscribeSuspendClient) QueryCity(ss *SubscribeSuspend) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribesuspend.CityTable, subscribesuspend.CityColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRider queries the rider edge of a SubscribeSuspend.
func (c *SubscribeSuspendClient) QueryRider(ss *SubscribeSuspend) *RiderQuery {
	query := (&RiderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, id),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribesuspend.RiderTable, subscribesuspend.RiderColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubscribe queries the subscribe edge of a SubscribeSuspend.
func (c *SubscribeSuspendClient) QuerySubscribe(ss *SubscribeSuspend) *SubscribeQuery {
	query := (&SubscribeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, id),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribesuspend.SubscribeTable, subscribesuspend.SubscribeColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPause queries the pause edge of a SubscribeSuspend.
func (c *SubscribeSuspendClient) QueryPause(ss *SubscribeSuspend) *SubscribePauseQuery {
	query := (&SubscribePauseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, id),
			sqlgraph.To(subscribepause.Table, subscribepause.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribesuspend.PauseTable, subscribesuspend.PauseColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubscribeSuspendClient) Hooks() []Hook {
	hooks := c.hooks.SubscribeSuspend
	return append(hooks[:len(hooks):len(hooks)], subscribesuspend.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SubscribeSuspendClient) Interceptors() []Interceptor {
	return c.inters.SubscribeSuspend
}

func (c *SubscribeSuspendClient) mutate(ctx context.Context, m *SubscribeSuspendMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubscribeSuspendCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubscribeSuspendUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubscribeSuspendUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubscribeSuspendDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubscribeSuspend mutation op: %q", m.Op())
	}
}

// VersionClient is a client for the Version schema.
type VersionClient struct {
	config
}

// NewVersionClient returns a client for the Version from the given config.
func NewVersionClient(c config) *VersionClient {
	return &VersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `version.Hooks(f(g(h())))`.
func (c *VersionClient) Use(hooks ...Hook) {
	c.hooks.Version = append(c.hooks.Version, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `version.Intercept(f(g(h())))`.
func (c *VersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Version = append(c.inters.Version, interceptors...)
}

// Create returns a builder for creating a Version entity.
func (c *VersionClient) Create() *VersionCreate {
	mutation := newVersionMutation(c.config, OpCreate)
	return &VersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Version entities.
func (c *VersionClient) CreateBulk(builders ...*VersionCreate) *VersionCreateBulk {
	return &VersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *VersionClient) MapCreateBulk(slice any, setFunc func(*VersionCreate, int)) *VersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &VersionCreateBulk{err: fmt.Errorf("calling to VersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*VersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &VersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Version.
func (c *VersionClient) Update() *VersionUpdate {
	mutation := newVersionMutation(c.config, OpUpdate)
	return &VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VersionClient) UpdateOne(v *Version) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersion(v))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VersionClient) UpdateOneID(id uint64) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersionID(id))
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Version.
func (c *VersionClient) Delete() *VersionDelete {
	mutation := newVersionMutation(c.config, OpDelete)
	return &VersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VersionClient) DeleteOne(v *Version) *VersionDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VersionClient) DeleteOneID(id uint64) *VersionDeleteOne {
	builder := c.Delete().Where(version.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VersionDeleteOne{builder}
}

// Query returns a query builder for Version.
func (c *VersionClient) Query() *VersionQuery {
	return &VersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a Version entity by its id.
func (c *VersionClient) Get(ctx context.Context, id uint64) (*Version, error) {
	return c.Query().Where(version.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VersionClient) GetX(ctx context.Context, id uint64) *Version {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *VersionClient) Hooks() []Hook {
	hooks := c.hooks.Version
	return append(hooks[:len(hooks):len(hooks)], version.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *VersionClient) Interceptors() []Interceptor {
	return c.inters.Version
}

func (c *VersionClient) mutate(ctx context.Context, m *VersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Version mutation op: %q", m.Op())
	}
}

// WarehouseClient is a client for the Warehouse schema.
type WarehouseClient struct {
	config
}

// NewWarehouseClient returns a client for the Warehouse from the given config.
func NewWarehouseClient(c config) *WarehouseClient {
	return &WarehouseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `warehouse.Hooks(f(g(h())))`.
func (c *WarehouseClient) Use(hooks ...Hook) {
	c.hooks.Warehouse = append(c.hooks.Warehouse, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `warehouse.Intercept(f(g(h())))`.
func (c *WarehouseClient) Intercept(interceptors ...Interceptor) {
	c.inters.Warehouse = append(c.inters.Warehouse, interceptors...)
}

// Create returns a builder for creating a Warehouse entity.
func (c *WarehouseClient) Create() *WarehouseCreate {
	mutation := newWarehouseMutation(c.config, OpCreate)
	return &WarehouseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Warehouse entities.
func (c *WarehouseClient) CreateBulk(builders ...*WarehouseCreate) *WarehouseCreateBulk {
	return &WarehouseCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WarehouseClient) MapCreateBulk(slice any, setFunc func(*WarehouseCreate, int)) *WarehouseCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WarehouseCreateBulk{err: fmt.Errorf("calling to WarehouseClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WarehouseCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WarehouseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Warehouse.
func (c *WarehouseClient) Update() *WarehouseUpdate {
	mutation := newWarehouseMutation(c.config, OpUpdate)
	return &WarehouseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WarehouseClient) UpdateOne(w *Warehouse) *WarehouseUpdateOne {
	mutation := newWarehouseMutation(c.config, OpUpdateOne, withWarehouse(w))
	return &WarehouseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WarehouseClient) UpdateOneID(id uint64) *WarehouseUpdateOne {
	mutation := newWarehouseMutation(c.config, OpUpdateOne, withWarehouseID(id))
	return &WarehouseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Warehouse.
func (c *WarehouseClient) Delete() *WarehouseDelete {
	mutation := newWarehouseMutation(c.config, OpDelete)
	return &WarehouseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WarehouseClient) DeleteOne(w *Warehouse) *WarehouseDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WarehouseClient) DeleteOneID(id uint64) *WarehouseDeleteOne {
	builder := c.Delete().Where(warehouse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WarehouseDeleteOne{builder}
}

// Query returns a query builder for Warehouse.
func (c *WarehouseClient) Query() *WarehouseQuery {
	return &WarehouseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWarehouse},
		inters: c.Interceptors(),
	}
}

// Get returns a Warehouse entity by its id.
func (c *WarehouseClient) Get(ctx context.Context, id uint64) (*Warehouse, error) {
	return c.Query().Where(warehouse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WarehouseClient) GetX(ctx context.Context, id uint64) *Warehouse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCity queries the city edge of a Warehouse.
func (c *WarehouseClient) QueryCity(w *Warehouse) *CityQuery {
	query := (&CityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(warehouse.Table, warehouse.FieldID, id),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, warehouse.CityTable, warehouse.CityColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssetManagers queries the asset_managers edge of a Warehouse.
func (c *WarehouseClient) QueryAssetManagers(w *Warehouse) *AssetManagerQuery {
	query := (&AssetManagerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(warehouse.Table, warehouse.FieldID, id),
			sqlgraph.To(assetmanager.Table, assetmanager.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, warehouse.AssetManagersTable, warehouse.AssetManagersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WarehouseClient) Hooks() []Hook {
	hooks := c.hooks.Warehouse
	return append(hooks[:len(hooks):len(hooks)], warehouse.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *WarehouseClient) Interceptors() []Interceptor {
	return c.inters.Warehouse
}

func (c *WarehouseClient) mutate(ctx context.Context, m *WarehouseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WarehouseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WarehouseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WarehouseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WarehouseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Warehouse mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Activity, Agent, Agreement, Allocate, Asset, AssetAttributeValues,
		AssetAttributes, AssetCheck, AssetCheckDetails, AssetMaintenance,
		AssetMaintenanceDetails, AssetManager, AssetRole, AssetScrap,
		AssetScrapDetails, AssetTransfer, AssetTransferDetails, Assistance, Attendance,
		Battery, BatteryFlow, BatteryModel, Branch, BranchContract, Business, Cabinet,
		CabinetEc, CabinetFault, City, Commission, Contract, ContractTemplate, Coupon,
		CouponAssembly, CouponTemplate, Ebike, EbikeBrand, EbikeBrandAttribute,
		Employee, Enterprise, EnterpriseBatterySwap, EnterpriseBill,
		EnterpriseContract, EnterprisePrepayment, EnterprisePrice, EnterpriseStatement,
		EnterpriseStation, Exception, Exchange, Export, Fault, Feedback, Goods,
		Instructions, Inventory, Maintainer, Manager, Material, Order, OrderRefund,
		Person, Plan, PlanIntroduce, PointLog, PromotionAchievement, PromotionBankCard,
		PromotionCommission, PromotionCommissionPlan, PromotionEarnings,
		PromotionGrowth, PromotionLevel, PromotionLevelTask, PromotionMember,
		PromotionMemberCommission, PromotionPerson, PromotionPrivilege,
		PromotionReferrals, PromotionReferralsProgress, PromotionSetting,
		PromotionWithdrawal, Question, QuestionCategory, Reserve, Rider, RiderFollowUp,
		RiderPhoneDevice, Role, Setting, Stock, StockSummary, Store, StoreGoods,
		StoreGroup, Subscribe, SubscribeAlter, SubscribePause, SubscribeReminder,
		SubscribeSuspend, Version, Warehouse []ent.Hook
	}
	inters struct {
		Activity, Agent, Agreement, Allocate, Asset, AssetAttributeValues,
		AssetAttributes, AssetCheck, AssetCheckDetails, AssetMaintenance,
		AssetMaintenanceDetails, AssetManager, AssetRole, AssetScrap,
		AssetScrapDetails, AssetTransfer, AssetTransferDetails, Assistance, Attendance,
		Battery, BatteryFlow, BatteryModel, Branch, BranchContract, Business, Cabinet,
		CabinetEc, CabinetFault, City, Commission, Contract, ContractTemplate, Coupon,
		CouponAssembly, CouponTemplate, Ebike, EbikeBrand, EbikeBrandAttribute,
		Employee, Enterprise, EnterpriseBatterySwap, EnterpriseBill,
		EnterpriseContract, EnterprisePrepayment, EnterprisePrice, EnterpriseStatement,
		EnterpriseStation, Exception, Exchange, Export, Fault, Feedback, Goods,
		Instructions, Inventory, Maintainer, Manager, Material, Order, OrderRefund,
		Person, Plan, PlanIntroduce, PointLog, PromotionAchievement, PromotionBankCard,
		PromotionCommission, PromotionCommissionPlan, PromotionEarnings,
		PromotionGrowth, PromotionLevel, PromotionLevelTask, PromotionMember,
		PromotionMemberCommission, PromotionPerson, PromotionPrivilege,
		PromotionReferrals, PromotionReferralsProgress, PromotionSetting,
		PromotionWithdrawal, Question, QuestionCategory, Reserve, Rider, RiderFollowUp,
		RiderPhoneDevice, Role, Setting, Stock, StockSummary, Store, StoreGoods,
		StoreGroup, Subscribe, SubscribeAlter, SubscribePause, SubscribeReminder,
		SubscribeSuspend, Version, Warehouse []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
