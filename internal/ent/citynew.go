// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/citynew"
)

// CityNew is the model entity for the CityNew schema.
type CityNew struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 启用
	Open *bool `json:"open,omitempty"`
	// 城市
	Name string `json:"name,omitempty"`
	// 城市编号
	Code string `json:"code,omitempty"`
	// 父级
	ParentID *uint64 `json:"parent_id,omitempty"`
	// 经度
	Lng float64 `json:"lng,omitempty"`
	// 纬度
	Lat          float64 `json:"lat,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CityNew) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case citynew.FieldCreator, citynew.FieldLastModifier:
			values[i] = new([]byte)
		case citynew.FieldOpen:
			values[i] = new(sql.NullBool)
		case citynew.FieldLng, citynew.FieldLat:
			values[i] = new(sql.NullFloat64)
		case citynew.FieldID, citynew.FieldParentID:
			values[i] = new(sql.NullInt64)
		case citynew.FieldRemark, citynew.FieldName, citynew.FieldCode:
			values[i] = new(sql.NullString)
		case citynew.FieldCreatedAt, citynew.FieldUpdatedAt, citynew.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CityNew fields.
func (cn *CityNew) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case citynew.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cn.ID = uint64(value.Int64)
		case citynew.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cn.CreatedAt = value.Time
			}
		case citynew.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cn.UpdatedAt = value.Time
			}
		case citynew.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cn.DeletedAt = new(time.Time)
				*cn.DeletedAt = value.Time
			}
		case citynew.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cn.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case citynew.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cn.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case citynew.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				cn.Remark = value.String
			}
		case citynew.FieldOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field open", values[i])
			} else if value.Valid {
				cn.Open = new(bool)
				*cn.Open = value.Bool
			}
		case citynew.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cn.Name = value.String
			}
		case citynew.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				cn.Code = value.String
			}
		case citynew.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				cn.ParentID = new(uint64)
				*cn.ParentID = uint64(value.Int64)
			}
		case citynew.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				cn.Lng = value.Float64
			}
		case citynew.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				cn.Lat = value.Float64
			}
		default:
			cn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CityNew.
// This includes values selected through modifiers, order, etc.
func (cn *CityNew) Value(name string) (ent.Value, error) {
	return cn.selectValues.Get(name)
}

// Update returns a builder for updating this CityNew.
// Note that you need to call CityNew.Unwrap() before calling this method if this CityNew
// was returned from a transaction, and the transaction was committed or rolled back.
func (cn *CityNew) Update() *CityNewUpdateOne {
	return NewCityNewClient(cn.config).UpdateOne(cn)
}

// Unwrap unwraps the CityNew entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cn *CityNew) Unwrap() *CityNew {
	_tx, ok := cn.config.driver.(*txDriver)
	if !ok {
		panic("ent: CityNew is not a transactional entity")
	}
	cn.config.driver = _tx.drv
	return cn
}

// String implements the fmt.Stringer.
func (cn *CityNew) String() string {
	var builder strings.Builder
	builder.WriteString("CityNew(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cn.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", cn.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", cn.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(cn.Remark)
	builder.WriteString(", ")
	if v := cn.Open; v != nil {
		builder.WriteString("open=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cn.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(cn.Code)
	builder.WriteString(", ")
	if v := cn.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("lng=")
	builder.WriteString(fmt.Sprintf("%v", cn.Lng))
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", cn.Lat))
	builder.WriteByte(')')
	return builder.String()
}

// CityNews is a parsable slice of CityNew.
type CityNews []*CityNew
