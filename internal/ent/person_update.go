// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks     []Hook
	mutation  *PersonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PersonUpdate) SetUpdatedAt(t time.Time) *PersonUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PersonUpdate) SetDeletedAt(t time.Time) *PersonUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableDeletedAt(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PersonUpdate) ClearDeletedAt() *PersonUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetLastModifier sets the "last_modifier" field.
func (pu *PersonUpdate) SetLastModifier(m *model.Modifier) *PersonUpdate {
	pu.mutation.SetLastModifier(m)
	return pu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pu *PersonUpdate) ClearLastModifier() *PersonUpdate {
	pu.mutation.ClearLastModifier()
	return pu
}

// SetRemark sets the "remark" field.
func (pu *PersonUpdate) SetRemark(s string) *PersonUpdate {
	pu.mutation.SetRemark(s)
	return pu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableRemark(s *string) *PersonUpdate {
	if s != nil {
		pu.SetRemark(*s)
	}
	return pu
}

// ClearRemark clears the value of the "remark" field.
func (pu *PersonUpdate) ClearRemark() *PersonUpdate {
	pu.mutation.ClearRemark()
	return pu
}

// SetStatus sets the "status" field.
func (pu *PersonUpdate) SetStatus(u uint8) *PersonUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(u)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableStatus(u *uint8) *PersonUpdate {
	if u != nil {
		pu.SetStatus(*u)
	}
	return pu
}

// AddStatus adds u to the "status" field.
func (pu *PersonUpdate) AddStatus(u int8) *PersonUpdate {
	pu.mutation.AddStatus(u)
	return pu
}

// SetBanned sets the "banned" field.
func (pu *PersonUpdate) SetBanned(b bool) *PersonUpdate {
	pu.mutation.SetBanned(b)
	return pu
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBanned(b *bool) *PersonUpdate {
	if b != nil {
		pu.SetBanned(*b)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetIDCardNumber sets the "id_card_number" field.
func (pu *PersonUpdate) SetIDCardNumber(s string) *PersonUpdate {
	pu.mutation.SetIDCardNumber(s)
	return pu
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableIDCardNumber(s *string) *PersonUpdate {
	if s != nil {
		pu.SetIDCardNumber(*s)
	}
	return pu
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (pu *PersonUpdate) ClearIDCardNumber() *PersonUpdate {
	pu.mutation.ClearIDCardNumber()
	return pu
}

// SetIDCardType sets the "id_card_type" field.
func (pu *PersonUpdate) SetIDCardType(u uint8) *PersonUpdate {
	pu.mutation.ResetIDCardType()
	pu.mutation.SetIDCardType(u)
	return pu
}

// SetNillableIDCardType sets the "id_card_type" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableIDCardType(u *uint8) *PersonUpdate {
	if u != nil {
		pu.SetIDCardType(*u)
	}
	return pu
}

// AddIDCardType adds u to the "id_card_type" field.
func (pu *PersonUpdate) AddIDCardType(u int8) *PersonUpdate {
	pu.mutation.AddIDCardType(u)
	return pu
}

// SetIDCardPortrait sets the "id_card_portrait" field.
func (pu *PersonUpdate) SetIDCardPortrait(s string) *PersonUpdate {
	pu.mutation.SetIDCardPortrait(s)
	return pu
}

// SetNillableIDCardPortrait sets the "id_card_portrait" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableIDCardPortrait(s *string) *PersonUpdate {
	if s != nil {
		pu.SetIDCardPortrait(*s)
	}
	return pu
}

// ClearIDCardPortrait clears the value of the "id_card_portrait" field.
func (pu *PersonUpdate) ClearIDCardPortrait() *PersonUpdate {
	pu.mutation.ClearIDCardPortrait()
	return pu
}

// SetIDCardNational sets the "id_card_national" field.
func (pu *PersonUpdate) SetIDCardNational(s string) *PersonUpdate {
	pu.mutation.SetIDCardNational(s)
	return pu
}

// SetNillableIDCardNational sets the "id_card_national" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableIDCardNational(s *string) *PersonUpdate {
	if s != nil {
		pu.SetIDCardNational(*s)
	}
	return pu
}

// ClearIDCardNational clears the value of the "id_card_national" field.
func (pu *PersonUpdate) ClearIDCardNational() *PersonUpdate {
	pu.mutation.ClearIDCardNational()
	return pu
}

// SetAuthFace sets the "auth_face" field.
func (pu *PersonUpdate) SetAuthFace(s string) *PersonUpdate {
	pu.mutation.SetAuthFace(s)
	return pu
}

// SetNillableAuthFace sets the "auth_face" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableAuthFace(s *string) *PersonUpdate {
	if s != nil {
		pu.SetAuthFace(*s)
	}
	return pu
}

// ClearAuthFace clears the value of the "auth_face" field.
func (pu *PersonUpdate) ClearAuthFace() *PersonUpdate {
	pu.mutation.ClearAuthFace()
	return pu
}

// SetAuthResult sets the "auth_result" field.
func (pu *PersonUpdate) SetAuthResult(mvr *model.FaceVerifyResult) *PersonUpdate {
	pu.mutation.SetAuthResult(mvr)
	return pu
}

// ClearAuthResult clears the value of the "auth_result" field.
func (pu *PersonUpdate) ClearAuthResult() *PersonUpdate {
	pu.mutation.ClearAuthResult()
	return pu
}

// SetAuthAt sets the "auth_at" field.
func (pu *PersonUpdate) SetAuthAt(t time.Time) *PersonUpdate {
	pu.mutation.SetAuthAt(t)
	return pu
}

// SetNillableAuthAt sets the "auth_at" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableAuthAt(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetAuthAt(*t)
	}
	return pu
}

// ClearAuthAt clears the value of the "auth_at" field.
func (pu *PersonUpdate) ClearAuthAt() *PersonUpdate {
	pu.mutation.ClearAuthAt()
	return pu
}

// SetEsignAccountID sets the "esign_account_id" field.
func (pu *PersonUpdate) SetEsignAccountID(s string) *PersonUpdate {
	pu.mutation.SetEsignAccountID(s)
	return pu
}

// SetNillableEsignAccountID sets the "esign_account_id" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableEsignAccountID(s *string) *PersonUpdate {
	if s != nil {
		pu.SetEsignAccountID(*s)
	}
	return pu
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (pu *PersonUpdate) ClearEsignAccountID() *PersonUpdate {
	pu.mutation.ClearEsignAccountID()
	return pu
}

// SetBaiduVerifyToken sets the "baidu_verify_token" field.
func (pu *PersonUpdate) SetBaiduVerifyToken(s string) *PersonUpdate {
	pu.mutation.SetBaiduVerifyToken(s)
	return pu
}

// SetNillableBaiduVerifyToken sets the "baidu_verify_token" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBaiduVerifyToken(s *string) *PersonUpdate {
	if s != nil {
		pu.SetBaiduVerifyToken(*s)
	}
	return pu
}

// ClearBaiduVerifyToken clears the value of the "baidu_verify_token" field.
func (pu *PersonUpdate) ClearBaiduVerifyToken() *PersonUpdate {
	pu.mutation.ClearBaiduVerifyToken()
	return pu
}

// SetBaiduLogID sets the "baidu_log_id" field.
func (pu *PersonUpdate) SetBaiduLogID(s string) *PersonUpdate {
	pu.mutation.SetBaiduLogID(s)
	return pu
}

// SetNillableBaiduLogID sets the "baidu_log_id" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBaiduLogID(s *string) *PersonUpdate {
	if s != nil {
		pu.SetBaiduLogID(*s)
	}
	return pu
}

// ClearBaiduLogID clears the value of the "baidu_log_id" field.
func (pu *PersonUpdate) ClearBaiduLogID() *PersonUpdate {
	pu.mutation.ClearBaiduLogID()
	return pu
}

// AddRiderIDs adds the "rider" edge to the Rider entity by IDs.
func (pu *PersonUpdate) AddRiderIDs(ids ...uint64) *PersonUpdate {
	pu.mutation.AddRiderIDs(ids...)
	return pu
}

// AddRider adds the "rider" edges to the Rider entity.
func (pu *PersonUpdate) AddRider(r ...*Rider) *PersonUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRiderIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// ClearRider clears all "rider" edges to the Rider entity.
func (pu *PersonUpdate) ClearRider() *PersonUpdate {
	pu.mutation.ClearRider()
	return pu
}

// RemoveRiderIDs removes the "rider" edge to Rider entities by IDs.
func (pu *PersonUpdate) RemoveRiderIDs(ids ...uint64) *PersonUpdate {
	pu.mutation.RemoveRiderIDs(ids...)
	return pu
}

// RemoveRider removes "rider" edges to Rider entities.
func (pu *PersonUpdate) RemoveRider(r ...*Rider) *PersonUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRiderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PersonUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if person.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized person.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := person.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *PersonUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Person.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.IDCardNumber(); ok {
		if err := person.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`ent: validator failed for field "Person.id_card_number": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PersonUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PersonUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeletedAt,
		})
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDeletedAt,
		})
	}
	if pu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldCreator,
		})
	}
	if value, ok := pu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldLastModifier,
		})
	}
	if pu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldLastModifier,
		})
	}
	if value, ok := pu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldRemark,
		})
	}
	if pu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldRemark,
		})
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
	}
	if value, ok := pu.mutation.Banned(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldBanned,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
	}
	if value, ok := pu.mutation.IDCardNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardNumber,
		})
	}
	if pu.mutation.IDCardNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldIDCardNumber,
		})
	}
	if value, ok := pu.mutation.IDCardType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIDCardType,
		})
	}
	if value, ok := pu.mutation.AddedIDCardType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIDCardType,
		})
	}
	if value, ok := pu.mutation.IDCardPortrait(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardPortrait,
		})
	}
	if pu.mutation.IDCardPortraitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldIDCardPortrait,
		})
	}
	if value, ok := pu.mutation.IDCardNational(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardNational,
		})
	}
	if pu.mutation.IDCardNationalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldIDCardNational,
		})
	}
	if value, ok := pu.mutation.AuthFace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldAuthFace,
		})
	}
	if pu.mutation.AuthFaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldAuthFace,
		})
	}
	if value, ok := pu.mutation.AuthResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldAuthResult,
		})
	}
	if pu.mutation.AuthResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldAuthResult,
		})
	}
	if value, ok := pu.mutation.AuthAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldAuthAt,
		})
	}
	if pu.mutation.AuthAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldAuthAt,
		})
	}
	if value, ok := pu.mutation.EsignAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldEsignAccountID,
		})
	}
	if pu.mutation.EsignAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldEsignAccountID,
		})
	}
	if value, ok := pu.mutation.BaiduVerifyToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBaiduVerifyToken,
		})
	}
	if pu.mutation.BaiduVerifyTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldBaiduVerifyToken,
		})
	}
	if value, ok := pu.mutation.BaiduLogID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBaiduLogID,
		})
	}
	if pu.mutation.BaiduLogIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldBaiduLogID,
		})
	}
	if pu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRiderIDs(); len(nodes) > 0 && !pu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = pu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PersonMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PersonUpdateOne) SetUpdatedAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PersonUpdateOne) SetDeletedAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableDeletedAt(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PersonUpdateOne) ClearDeletedAt() *PersonUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetLastModifier sets the "last_modifier" field.
func (puo *PersonUpdateOne) SetLastModifier(m *model.Modifier) *PersonUpdateOne {
	puo.mutation.SetLastModifier(m)
	return puo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (puo *PersonUpdateOne) ClearLastModifier() *PersonUpdateOne {
	puo.mutation.ClearLastModifier()
	return puo
}

// SetRemark sets the "remark" field.
func (puo *PersonUpdateOne) SetRemark(s string) *PersonUpdateOne {
	puo.mutation.SetRemark(s)
	return puo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableRemark(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetRemark(*s)
	}
	return puo
}

// ClearRemark clears the value of the "remark" field.
func (puo *PersonUpdateOne) ClearRemark() *PersonUpdateOne {
	puo.mutation.ClearRemark()
	return puo
}

// SetStatus sets the "status" field.
func (puo *PersonUpdateOne) SetStatus(u uint8) *PersonUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(u)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableStatus(u *uint8) *PersonUpdateOne {
	if u != nil {
		puo.SetStatus(*u)
	}
	return puo
}

// AddStatus adds u to the "status" field.
func (puo *PersonUpdateOne) AddStatus(u int8) *PersonUpdateOne {
	puo.mutation.AddStatus(u)
	return puo
}

// SetBanned sets the "banned" field.
func (puo *PersonUpdateOne) SetBanned(b bool) *PersonUpdateOne {
	puo.mutation.SetBanned(b)
	return puo
}

// SetNillableBanned sets the "banned" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBanned(b *bool) *PersonUpdateOne {
	if b != nil {
		puo.SetBanned(*b)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetIDCardNumber sets the "id_card_number" field.
func (puo *PersonUpdateOne) SetIDCardNumber(s string) *PersonUpdateOne {
	puo.mutation.SetIDCardNumber(s)
	return puo
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableIDCardNumber(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetIDCardNumber(*s)
	}
	return puo
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (puo *PersonUpdateOne) ClearIDCardNumber() *PersonUpdateOne {
	puo.mutation.ClearIDCardNumber()
	return puo
}

// SetIDCardType sets the "id_card_type" field.
func (puo *PersonUpdateOne) SetIDCardType(u uint8) *PersonUpdateOne {
	puo.mutation.ResetIDCardType()
	puo.mutation.SetIDCardType(u)
	return puo
}

// SetNillableIDCardType sets the "id_card_type" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableIDCardType(u *uint8) *PersonUpdateOne {
	if u != nil {
		puo.SetIDCardType(*u)
	}
	return puo
}

// AddIDCardType adds u to the "id_card_type" field.
func (puo *PersonUpdateOne) AddIDCardType(u int8) *PersonUpdateOne {
	puo.mutation.AddIDCardType(u)
	return puo
}

// SetIDCardPortrait sets the "id_card_portrait" field.
func (puo *PersonUpdateOne) SetIDCardPortrait(s string) *PersonUpdateOne {
	puo.mutation.SetIDCardPortrait(s)
	return puo
}

// SetNillableIDCardPortrait sets the "id_card_portrait" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableIDCardPortrait(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetIDCardPortrait(*s)
	}
	return puo
}

// ClearIDCardPortrait clears the value of the "id_card_portrait" field.
func (puo *PersonUpdateOne) ClearIDCardPortrait() *PersonUpdateOne {
	puo.mutation.ClearIDCardPortrait()
	return puo
}

// SetIDCardNational sets the "id_card_national" field.
func (puo *PersonUpdateOne) SetIDCardNational(s string) *PersonUpdateOne {
	puo.mutation.SetIDCardNational(s)
	return puo
}

// SetNillableIDCardNational sets the "id_card_national" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableIDCardNational(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetIDCardNational(*s)
	}
	return puo
}

// ClearIDCardNational clears the value of the "id_card_national" field.
func (puo *PersonUpdateOne) ClearIDCardNational() *PersonUpdateOne {
	puo.mutation.ClearIDCardNational()
	return puo
}

// SetAuthFace sets the "auth_face" field.
func (puo *PersonUpdateOne) SetAuthFace(s string) *PersonUpdateOne {
	puo.mutation.SetAuthFace(s)
	return puo
}

// SetNillableAuthFace sets the "auth_face" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableAuthFace(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetAuthFace(*s)
	}
	return puo
}

// ClearAuthFace clears the value of the "auth_face" field.
func (puo *PersonUpdateOne) ClearAuthFace() *PersonUpdateOne {
	puo.mutation.ClearAuthFace()
	return puo
}

// SetAuthResult sets the "auth_result" field.
func (puo *PersonUpdateOne) SetAuthResult(mvr *model.FaceVerifyResult) *PersonUpdateOne {
	puo.mutation.SetAuthResult(mvr)
	return puo
}

// ClearAuthResult clears the value of the "auth_result" field.
func (puo *PersonUpdateOne) ClearAuthResult() *PersonUpdateOne {
	puo.mutation.ClearAuthResult()
	return puo
}

// SetAuthAt sets the "auth_at" field.
func (puo *PersonUpdateOne) SetAuthAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetAuthAt(t)
	return puo
}

// SetNillableAuthAt sets the "auth_at" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableAuthAt(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetAuthAt(*t)
	}
	return puo
}

// ClearAuthAt clears the value of the "auth_at" field.
func (puo *PersonUpdateOne) ClearAuthAt() *PersonUpdateOne {
	puo.mutation.ClearAuthAt()
	return puo
}

// SetEsignAccountID sets the "esign_account_id" field.
func (puo *PersonUpdateOne) SetEsignAccountID(s string) *PersonUpdateOne {
	puo.mutation.SetEsignAccountID(s)
	return puo
}

// SetNillableEsignAccountID sets the "esign_account_id" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableEsignAccountID(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetEsignAccountID(*s)
	}
	return puo
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (puo *PersonUpdateOne) ClearEsignAccountID() *PersonUpdateOne {
	puo.mutation.ClearEsignAccountID()
	return puo
}

// SetBaiduVerifyToken sets the "baidu_verify_token" field.
func (puo *PersonUpdateOne) SetBaiduVerifyToken(s string) *PersonUpdateOne {
	puo.mutation.SetBaiduVerifyToken(s)
	return puo
}

// SetNillableBaiduVerifyToken sets the "baidu_verify_token" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBaiduVerifyToken(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetBaiduVerifyToken(*s)
	}
	return puo
}

// ClearBaiduVerifyToken clears the value of the "baidu_verify_token" field.
func (puo *PersonUpdateOne) ClearBaiduVerifyToken() *PersonUpdateOne {
	puo.mutation.ClearBaiduVerifyToken()
	return puo
}

// SetBaiduLogID sets the "baidu_log_id" field.
func (puo *PersonUpdateOne) SetBaiduLogID(s string) *PersonUpdateOne {
	puo.mutation.SetBaiduLogID(s)
	return puo
}

// SetNillableBaiduLogID sets the "baidu_log_id" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBaiduLogID(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetBaiduLogID(*s)
	}
	return puo
}

// ClearBaiduLogID clears the value of the "baidu_log_id" field.
func (puo *PersonUpdateOne) ClearBaiduLogID() *PersonUpdateOne {
	puo.mutation.ClearBaiduLogID()
	return puo
}

// AddRiderIDs adds the "rider" edge to the Rider entity by IDs.
func (puo *PersonUpdateOne) AddRiderIDs(ids ...uint64) *PersonUpdateOne {
	puo.mutation.AddRiderIDs(ids...)
	return puo
}

// AddRider adds the "rider" edges to the Rider entity.
func (puo *PersonUpdateOne) AddRider(r ...*Rider) *PersonUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRiderIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// ClearRider clears all "rider" edges to the Rider entity.
func (puo *PersonUpdateOne) ClearRider() *PersonUpdateOne {
	puo.mutation.ClearRider()
	return puo
}

// RemoveRiderIDs removes the "rider" edge to Rider entities by IDs.
func (puo *PersonUpdateOne) RemoveRiderIDs(ids ...uint64) *PersonUpdateOne {
	puo.mutation.RemoveRiderIDs(ids...)
	return puo
}

// RemoveRider removes "rider" edges to Rider entities.
func (puo *PersonUpdateOne) RemoveRider(r ...*Rider) *PersonUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRiderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Person)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PersonMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PersonUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if person.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized person.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := person.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *PersonUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Person.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.IDCardNumber(); ok {
		if err := person.IDCardNumberValidator(v); err != nil {
			return &ValidationError{Name: "id_card_number", err: fmt.Errorf(`ent: validator failed for field "Person.id_card_number": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PersonUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PersonUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Person.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeletedAt,
		})
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDeletedAt,
		})
	}
	if puo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldCreator,
		})
	}
	if value, ok := puo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldLastModifier,
		})
	}
	if puo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldLastModifier,
		})
	}
	if value, ok := puo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldRemark,
		})
	}
	if puo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldRemark,
		})
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
	}
	if value, ok := puo.mutation.Banned(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldBanned,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
	}
	if value, ok := puo.mutation.IDCardNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardNumber,
		})
	}
	if puo.mutation.IDCardNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldIDCardNumber,
		})
	}
	if value, ok := puo.mutation.IDCardType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIDCardType,
		})
	}
	if value, ok := puo.mutation.AddedIDCardType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIDCardType,
		})
	}
	if value, ok := puo.mutation.IDCardPortrait(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardPortrait,
		})
	}
	if puo.mutation.IDCardPortraitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldIDCardPortrait,
		})
	}
	if value, ok := puo.mutation.IDCardNational(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIDCardNational,
		})
	}
	if puo.mutation.IDCardNationalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldIDCardNational,
		})
	}
	if value, ok := puo.mutation.AuthFace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldAuthFace,
		})
	}
	if puo.mutation.AuthFaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldAuthFace,
		})
	}
	if value, ok := puo.mutation.AuthResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldAuthResult,
		})
	}
	if puo.mutation.AuthResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldAuthResult,
		})
	}
	if value, ok := puo.mutation.AuthAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldAuthAt,
		})
	}
	if puo.mutation.AuthAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldAuthAt,
		})
	}
	if value, ok := puo.mutation.EsignAccountID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldEsignAccountID,
		})
	}
	if puo.mutation.EsignAccountIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldEsignAccountID,
		})
	}
	if value, ok := puo.mutation.BaiduVerifyToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBaiduVerifyToken,
		})
	}
	if puo.mutation.BaiduVerifyTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldBaiduVerifyToken,
		})
	}
	if value, ok := puo.mutation.BaiduLogID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldBaiduLogID,
		})
	}
	if puo.mutation.BaiduLogIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldBaiduLogID,
		})
	}
	if puo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRiderIDs(); len(nodes) > 0 && !puo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = puo.modifiers
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
