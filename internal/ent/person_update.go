// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PersonUpdate) SetUpdatedAt(t time.Time) *PersonUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PersonUpdate) SetDeletedAt(t time.Time) *PersonUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableDeletedAt(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PersonUpdate) ClearDeletedAt() *PersonUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetLastModify sets the "last_modify" field.
func (pu *PersonUpdate) SetLastModify(t time.Time) *PersonUpdate {
	pu.mutation.SetLastModify(t)
	return pu
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableLastModify(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetLastModify(*t)
	}
	return pu
}

// ClearLastModify clears the value of the "last_modify" field.
func (pu *PersonUpdate) ClearLastModify() *PersonUpdate {
	pu.mutation.ClearLastModify()
	return pu
}

// SetRemark sets the "remark" field.
func (pu *PersonUpdate) SetRemark(s string) *PersonUpdate {
	pu.mutation.SetRemark(s)
	return pu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableRemark(s *string) *PersonUpdate {
	if s != nil {
		pu.SetRemark(*s)
	}
	return pu
}

// ClearRemark clears the value of the "remark" field.
func (pu *PersonUpdate) ClearRemark() *PersonUpdate {
	pu.mutation.ClearRemark()
	return pu
}

// SetStatus sets the "status" field.
func (pu *PersonUpdate) SetStatus(u uint8) *PersonUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(u)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableStatus(u *uint8) *PersonUpdate {
	if u != nil {
		pu.SetStatus(*u)
	}
	return pu
}

// AddStatus adds u to the "status" field.
func (pu *PersonUpdate) AddStatus(u uint8) *PersonUpdate {
	pu.mutation.AddStatus(u)
	return pu
}

// SetBlock sets the "block" field.
func (pu *PersonUpdate) SetBlock(b bool) *PersonUpdate {
	pu.mutation.SetBlock(b)
	return pu
}

// SetNillableBlock sets the "block" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableBlock(b *bool) *PersonUpdate {
	if b != nil {
		pu.SetBlock(*b)
	}
	return pu
}

// SetName sets the "name" field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetIcNumber sets the "ic_number" field.
func (pu *PersonUpdate) SetIcNumber(s string) *PersonUpdate {
	pu.mutation.SetIcNumber(s)
	return pu
}

// SetIcType sets the "ic_type" field.
func (pu *PersonUpdate) SetIcType(u uint8) *PersonUpdate {
	pu.mutation.ResetIcType()
	pu.mutation.SetIcType(u)
	return pu
}

// SetNillableIcType sets the "ic_type" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableIcType(u *uint8) *PersonUpdate {
	if u != nil {
		pu.SetIcType(*u)
	}
	return pu
}

// AddIcType adds u to the "ic_type" field.
func (pu *PersonUpdate) AddIcType(u uint8) *PersonUpdate {
	pu.mutation.AddIcType(u)
	return pu
}

// SetIcPortrait sets the "ic_portrait" field.
func (pu *PersonUpdate) SetIcPortrait(s string) *PersonUpdate {
	pu.mutation.SetIcPortrait(s)
	return pu
}

// SetIcNational sets the "ic_national" field.
func (pu *PersonUpdate) SetIcNational(s string) *PersonUpdate {
	pu.mutation.SetIcNational(s)
	return pu
}

// SetFaceImg sets the "face_img" field.
func (pu *PersonUpdate) SetFaceImg(s string) *PersonUpdate {
	pu.mutation.SetFaceImg(s)
	return pu
}

// SetFaceVerifyResult sets the "face_verify_result" field.
func (pu *PersonUpdate) SetFaceVerifyResult(mvr *model.FaceVerifyResult) *PersonUpdate {
	pu.mutation.SetFaceVerifyResult(mvr)
	return pu
}

// ClearFaceVerifyResult clears the value of the "face_verify_result" field.
func (pu *PersonUpdate) ClearFaceVerifyResult() *PersonUpdate {
	pu.mutation.ClearFaceVerifyResult()
	return pu
}

// SetSuccessAt sets the "success_at" field.
func (pu *PersonUpdate) SetSuccessAt(t time.Time) *PersonUpdate {
	pu.mutation.SetSuccessAt(t)
	return pu
}

// SetNillableSuccessAt sets the "success_at" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableSuccessAt(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetSuccessAt(*t)
	}
	return pu
}

// ClearSuccessAt clears the value of the "success_at" field.
func (pu *PersonUpdate) ClearSuccessAt() *PersonUpdate {
	pu.mutation.ClearSuccessAt()
	return pu
}

// AddRiderIDs adds the "rider" edge to the Rider entity by IDs.
func (pu *PersonUpdate) AddRiderIDs(ids ...uint64) *PersonUpdate {
	pu.mutation.AddRiderIDs(ids...)
	return pu
}

// AddRider adds the "rider" edges to the Rider entity.
func (pu *PersonUpdate) AddRider(r ...*Rider) *PersonUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRiderIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// ClearRider clears all "rider" edges to the Rider entity.
func (pu *PersonUpdate) ClearRider() *PersonUpdate {
	pu.mutation.ClearRider()
	return pu
}

// RemoveRiderIDs removes the "rider" edge to Rider entities by IDs.
func (pu *PersonUpdate) RemoveRiderIDs(ids ...uint64) *PersonUpdate {
	pu.mutation.RemoveRiderIDs(ids...)
	return pu
}

// RemoveRider removes "rider" edges to Rider entities.
func (pu *PersonUpdate) RemoveRider(r ...*Rider) *PersonUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRiderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PersonUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := person.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PersonUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.IcNumber(); ok {
		if err := person.IcNumberValidator(v); err != nil {
			return &ValidationError{Name: "ic_number", err: fmt.Errorf("ent: validator failed for field \"ic_number\": %w", err)}
		}
	}
	return nil
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeletedAt,
		})
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDeletedAt,
		})
	}
	if value, ok := pu.mutation.LastModify(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldLastModify,
		})
	}
	if pu.mutation.LastModifyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldLastModify,
		})
	}
	if value, ok := pu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldRemark,
		})
	}
	if pu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldRemark,
		})
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
	}
	if value, ok := pu.mutation.Block(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldBlock,
		})
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
	}
	if value, ok := pu.mutation.IcNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcNumber,
		})
	}
	if value, ok := pu.mutation.IcType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIcType,
		})
	}
	if value, ok := pu.mutation.AddedIcType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIcType,
		})
	}
	if value, ok := pu.mutation.IcPortrait(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcPortrait,
		})
	}
	if value, ok := pu.mutation.IcNational(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcNational,
		})
	}
	if value, ok := pu.mutation.FaceImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFaceImg,
		})
	}
	if value, ok := pu.mutation.FaceVerifyResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldFaceVerifyResult,
		})
	}
	if pu.mutation.FaceVerifyResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldFaceVerifyResult,
		})
	}
	if value, ok := pu.mutation.SuccessAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldSuccessAt,
		})
	}
	if pu.mutation.SuccessAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldSuccessAt,
		})
	}
	if pu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRiderIDs(); len(nodes) > 0 && !pu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PersonUpdateOne) SetUpdatedAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PersonUpdateOne) SetDeletedAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableDeletedAt(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PersonUpdateOne) ClearDeletedAt() *PersonUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetLastModify sets the "last_modify" field.
func (puo *PersonUpdateOne) SetLastModify(t time.Time) *PersonUpdateOne {
	puo.mutation.SetLastModify(t)
	return puo
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableLastModify(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetLastModify(*t)
	}
	return puo
}

// ClearLastModify clears the value of the "last_modify" field.
func (puo *PersonUpdateOne) ClearLastModify() *PersonUpdateOne {
	puo.mutation.ClearLastModify()
	return puo
}

// SetRemark sets the "remark" field.
func (puo *PersonUpdateOne) SetRemark(s string) *PersonUpdateOne {
	puo.mutation.SetRemark(s)
	return puo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableRemark(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetRemark(*s)
	}
	return puo
}

// ClearRemark clears the value of the "remark" field.
func (puo *PersonUpdateOne) ClearRemark() *PersonUpdateOne {
	puo.mutation.ClearRemark()
	return puo
}

// SetStatus sets the "status" field.
func (puo *PersonUpdateOne) SetStatus(u uint8) *PersonUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(u)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableStatus(u *uint8) *PersonUpdateOne {
	if u != nil {
		puo.SetStatus(*u)
	}
	return puo
}

// AddStatus adds u to the "status" field.
func (puo *PersonUpdateOne) AddStatus(u uint8) *PersonUpdateOne {
	puo.mutation.AddStatus(u)
	return puo
}

// SetBlock sets the "block" field.
func (puo *PersonUpdateOne) SetBlock(b bool) *PersonUpdateOne {
	puo.mutation.SetBlock(b)
	return puo
}

// SetNillableBlock sets the "block" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableBlock(b *bool) *PersonUpdateOne {
	if b != nil {
		puo.SetBlock(*b)
	}
	return puo
}

// SetName sets the "name" field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetIcNumber sets the "ic_number" field.
func (puo *PersonUpdateOne) SetIcNumber(s string) *PersonUpdateOne {
	puo.mutation.SetIcNumber(s)
	return puo
}

// SetIcType sets the "ic_type" field.
func (puo *PersonUpdateOne) SetIcType(u uint8) *PersonUpdateOne {
	puo.mutation.ResetIcType()
	puo.mutation.SetIcType(u)
	return puo
}

// SetNillableIcType sets the "ic_type" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableIcType(u *uint8) *PersonUpdateOne {
	if u != nil {
		puo.SetIcType(*u)
	}
	return puo
}

// AddIcType adds u to the "ic_type" field.
func (puo *PersonUpdateOne) AddIcType(u uint8) *PersonUpdateOne {
	puo.mutation.AddIcType(u)
	return puo
}

// SetIcPortrait sets the "ic_portrait" field.
func (puo *PersonUpdateOne) SetIcPortrait(s string) *PersonUpdateOne {
	puo.mutation.SetIcPortrait(s)
	return puo
}

// SetIcNational sets the "ic_national" field.
func (puo *PersonUpdateOne) SetIcNational(s string) *PersonUpdateOne {
	puo.mutation.SetIcNational(s)
	return puo
}

// SetFaceImg sets the "face_img" field.
func (puo *PersonUpdateOne) SetFaceImg(s string) *PersonUpdateOne {
	puo.mutation.SetFaceImg(s)
	return puo
}

// SetFaceVerifyResult sets the "face_verify_result" field.
func (puo *PersonUpdateOne) SetFaceVerifyResult(mvr *model.FaceVerifyResult) *PersonUpdateOne {
	puo.mutation.SetFaceVerifyResult(mvr)
	return puo
}

// ClearFaceVerifyResult clears the value of the "face_verify_result" field.
func (puo *PersonUpdateOne) ClearFaceVerifyResult() *PersonUpdateOne {
	puo.mutation.ClearFaceVerifyResult()
	return puo
}

// SetSuccessAt sets the "success_at" field.
func (puo *PersonUpdateOne) SetSuccessAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetSuccessAt(t)
	return puo
}

// SetNillableSuccessAt sets the "success_at" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableSuccessAt(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetSuccessAt(*t)
	}
	return puo
}

// ClearSuccessAt clears the value of the "success_at" field.
func (puo *PersonUpdateOne) ClearSuccessAt() *PersonUpdateOne {
	puo.mutation.ClearSuccessAt()
	return puo
}

// AddRiderIDs adds the "rider" edge to the Rider entity by IDs.
func (puo *PersonUpdateOne) AddRiderIDs(ids ...uint64) *PersonUpdateOne {
	puo.mutation.AddRiderIDs(ids...)
	return puo
}

// AddRider adds the "rider" edges to the Rider entity.
func (puo *PersonUpdateOne) AddRider(r ...*Rider) *PersonUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRiderIDs(ids...)
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// ClearRider clears all "rider" edges to the Rider entity.
func (puo *PersonUpdateOne) ClearRider() *PersonUpdateOne {
	puo.mutation.ClearRider()
	return puo
}

// RemoveRiderIDs removes the "rider" edge to Rider entities by IDs.
func (puo *PersonUpdateOne) RemoveRiderIDs(ids ...uint64) *PersonUpdateOne {
	puo.mutation.RemoveRiderIDs(ids...)
	return puo
}

// RemoveRider removes "rider" edges to Rider entities.
func (puo *PersonUpdateOne) RemoveRider(r ...*Rider) *PersonUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRiderIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PersonUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := person.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PersonUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.IcNumber(); ok {
		if err := person.IcNumberValidator(v); err != nil {
			return &ValidationError{Name: "ic_number", err: fmt.Errorf("ent: validator failed for field \"ic_number\": %w", err)}
		}
	}
	return nil
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: person.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Person.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldUpdatedAt,
		})
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldDeletedAt,
		})
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldDeletedAt,
		})
	}
	if value, ok := puo.mutation.LastModify(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldLastModify,
		})
	}
	if puo.mutation.LastModifyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldLastModify,
		})
	}
	if value, ok := puo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldRemark,
		})
	}
	if puo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldRemark,
		})
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldStatus,
		})
	}
	if value, ok := puo.mutation.Block(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldBlock,
		})
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
	}
	if value, ok := puo.mutation.IcNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcNumber,
		})
	}
	if value, ok := puo.mutation.IcType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIcType,
		})
	}
	if value, ok := puo.mutation.AddedIcType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: person.FieldIcType,
		})
	}
	if value, ok := puo.mutation.IcPortrait(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcPortrait,
		})
	}
	if value, ok := puo.mutation.IcNational(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldIcNational,
		})
	}
	if value, ok := puo.mutation.FaceImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldFaceImg,
		})
	}
	if value, ok := puo.mutation.FaceVerifyResult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldFaceVerifyResult,
		})
	}
	if puo.mutation.FaceVerifyResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldFaceVerifyResult,
		})
	}
	if value, ok := puo.mutation.SuccessAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldSuccessAt,
		})
	}
	if puo.mutation.SuccessAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: person.FieldSuccessAt,
		})
	}
	if puo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRiderIDs(); len(nodes) > 0 && !puo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.RiderTable,
			Columns: []string{person.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
