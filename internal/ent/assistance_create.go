// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// AssistanceCreate is the builder for creating a Assistance entity.
type AssistanceCreate struct {
	config
	mutation *AssistanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AssistanceCreate) SetCreatedAt(t time.Time) *AssistanceCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableCreatedAt(t *time.Time) *AssistanceCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AssistanceCreate) SetUpdatedAt(t time.Time) *AssistanceCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableUpdatedAt(t *time.Time) *AssistanceCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AssistanceCreate) SetDeletedAt(t time.Time) *AssistanceCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableDeletedAt(t *time.Time) *AssistanceCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreator sets the "creator" field.
func (ac *AssistanceCreate) SetCreator(m *model.Modifier) *AssistanceCreate {
	ac.mutation.SetCreator(m)
	return ac
}

// SetLastModifier sets the "last_modifier" field.
func (ac *AssistanceCreate) SetLastModifier(m *model.Modifier) *AssistanceCreate {
	ac.mutation.SetLastModifier(m)
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AssistanceCreate) SetRemark(s string) *AssistanceCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableRemark(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetStoreID sets the "store_id" field.
func (ac *AssistanceCreate) SetStoreID(u uint64) *AssistanceCreate {
	ac.mutation.SetStoreID(u)
	return ac
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableStoreID(u *uint64) *AssistanceCreate {
	if u != nil {
		ac.SetStoreID(*u)
	}
	return ac
}

// SetRiderID sets the "rider_id" field.
func (ac *AssistanceCreate) SetRiderID(u uint64) *AssistanceCreate {
	ac.mutation.SetRiderID(u)
	return ac
}

// SetSubscribeID sets the "subscribe_id" field.
func (ac *AssistanceCreate) SetSubscribeID(u uint64) *AssistanceCreate {
	ac.mutation.SetSubscribeID(u)
	return ac
}

// SetCityID sets the "city_id" field.
func (ac *AssistanceCreate) SetCityID(u uint64) *AssistanceCreate {
	ac.mutation.SetCityID(u)
	return ac
}

// SetEmployeeID sets the "employee_id" field.
func (ac *AssistanceCreate) SetEmployeeID(u uint64) *AssistanceCreate {
	ac.mutation.SetEmployeeID(u)
	return ac
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableEmployeeID(u *uint64) *AssistanceCreate {
	if u != nil {
		ac.SetEmployeeID(*u)
	}
	return ac
}

// SetOrderID sets the "order_id" field.
func (ac *AssistanceCreate) SetOrderID(u uint64) *AssistanceCreate {
	ac.mutation.SetOrderID(u)
	return ac
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableOrderID(u *uint64) *AssistanceCreate {
	if u != nil {
		ac.SetOrderID(*u)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AssistanceCreate) SetStatus(u uint8) *AssistanceCreate {
	ac.mutation.SetStatus(u)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableStatus(u *uint8) *AssistanceCreate {
	if u != nil {
		ac.SetStatus(*u)
	}
	return ac
}

// SetOutTradeNo sets the "out_trade_no" field.
func (ac *AssistanceCreate) SetOutTradeNo(s string) *AssistanceCreate {
	ac.mutation.SetOutTradeNo(s)
	return ac
}

// SetLng sets the "lng" field.
func (ac *AssistanceCreate) SetLng(f float64) *AssistanceCreate {
	ac.mutation.SetLng(f)
	return ac
}

// SetLat sets the "lat" field.
func (ac *AssistanceCreate) SetLat(f float64) *AssistanceCreate {
	ac.mutation.SetLat(f)
	return ac
}

// SetAddress sets the "address" field.
func (ac *AssistanceCreate) SetAddress(s string) *AssistanceCreate {
	ac.mutation.SetAddress(s)
	return ac
}

// SetBreakdown sets the "breakdown" field.
func (ac *AssistanceCreate) SetBreakdown(s string) *AssistanceCreate {
	ac.mutation.SetBreakdown(s)
	return ac
}

// SetBreakdownDesc sets the "breakdown_desc" field.
func (ac *AssistanceCreate) SetBreakdownDesc(s string) *AssistanceCreate {
	ac.mutation.SetBreakdownDesc(s)
	return ac
}

// SetNillableBreakdownDesc sets the "breakdown_desc" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableBreakdownDesc(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetBreakdownDesc(*s)
	}
	return ac
}

// SetBreakdownPhotos sets the "breakdown_photos" field.
func (ac *AssistanceCreate) SetBreakdownPhotos(s []string) *AssistanceCreate {
	ac.mutation.SetBreakdownPhotos(s)
	return ac
}

// SetCancelReason sets the "cancel_reason" field.
func (ac *AssistanceCreate) SetCancelReason(s string) *AssistanceCreate {
	ac.mutation.SetCancelReason(s)
	return ac
}

// SetNillableCancelReason sets the "cancel_reason" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableCancelReason(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetCancelReason(*s)
	}
	return ac
}

// SetCancelReasonDesc sets the "cancel_reason_desc" field.
func (ac *AssistanceCreate) SetCancelReasonDesc(s string) *AssistanceCreate {
	ac.mutation.SetCancelReasonDesc(s)
	return ac
}

// SetNillableCancelReasonDesc sets the "cancel_reason_desc" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableCancelReasonDesc(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetCancelReasonDesc(*s)
	}
	return ac
}

// SetDistance sets the "distance" field.
func (ac *AssistanceCreate) SetDistance(f float64) *AssistanceCreate {
	ac.mutation.SetDistance(f)
	return ac
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableDistance(f *float64) *AssistanceCreate {
	if f != nil {
		ac.SetDistance(*f)
	}
	return ac
}

// SetReason sets the "reason" field.
func (ac *AssistanceCreate) SetReason(s string) *AssistanceCreate {
	ac.mutation.SetReason(s)
	return ac
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableReason(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetReason(*s)
	}
	return ac
}

// SetDetectPhoto sets the "detect_photo" field.
func (ac *AssistanceCreate) SetDetectPhoto(s string) *AssistanceCreate {
	ac.mutation.SetDetectPhoto(s)
	return ac
}

// SetNillableDetectPhoto sets the "detect_photo" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableDetectPhoto(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetDetectPhoto(*s)
	}
	return ac
}

// SetJointPhoto sets the "joint_photo" field.
func (ac *AssistanceCreate) SetJointPhoto(s string) *AssistanceCreate {
	ac.mutation.SetJointPhoto(s)
	return ac
}

// SetNillableJointPhoto sets the "joint_photo" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableJointPhoto(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetJointPhoto(*s)
	}
	return ac
}

// SetCost sets the "cost" field.
func (ac *AssistanceCreate) SetCost(f float64) *AssistanceCreate {
	ac.mutation.SetCost(f)
	return ac
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableCost(f *float64) *AssistanceCreate {
	if f != nil {
		ac.SetCost(*f)
	}
	return ac
}

// SetRefusedDesc sets the "refused_desc" field.
func (ac *AssistanceCreate) SetRefusedDesc(s string) *AssistanceCreate {
	ac.mutation.SetRefusedDesc(s)
	return ac
}

// SetNillableRefusedDesc sets the "refused_desc" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableRefusedDesc(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetRefusedDesc(*s)
	}
	return ac
}

// SetPayAt sets the "pay_at" field.
func (ac *AssistanceCreate) SetPayAt(t time.Time) *AssistanceCreate {
	ac.mutation.SetPayAt(t)
	return ac
}

// SetNillablePayAt sets the "pay_at" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillablePayAt(t *time.Time) *AssistanceCreate {
	if t != nil {
		ac.SetPayAt(*t)
	}
	return ac
}

// SetAllocateAt sets the "allocate_at" field.
func (ac *AssistanceCreate) SetAllocateAt(t time.Time) *AssistanceCreate {
	ac.mutation.SetAllocateAt(t)
	return ac
}

// SetNillableAllocateAt sets the "allocate_at" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableAllocateAt(t *time.Time) *AssistanceCreate {
	if t != nil {
		ac.SetAllocateAt(*t)
	}
	return ac
}

// SetWait sets the "wait" field.
func (ac *AssistanceCreate) SetWait(i int) *AssistanceCreate {
	ac.mutation.SetWait(i)
	return ac
}

// SetNillableWait sets the "wait" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableWait(i *int) *AssistanceCreate {
	if i != nil {
		ac.SetWait(*i)
	}
	return ac
}

// SetFreeReason sets the "free_reason" field.
func (ac *AssistanceCreate) SetFreeReason(s string) *AssistanceCreate {
	ac.mutation.SetFreeReason(s)
	return ac
}

// SetNillableFreeReason sets the "free_reason" field if the given value is not nil.
func (ac *AssistanceCreate) SetNillableFreeReason(s *string) *AssistanceCreate {
	if s != nil {
		ac.SetFreeReason(*s)
	}
	return ac
}

// SetStore sets the "store" edge to the Store entity.
func (ac *AssistanceCreate) SetStore(s *Store) *AssistanceCreate {
	return ac.SetStoreID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ac *AssistanceCreate) SetRider(r *Rider) *AssistanceCreate {
	return ac.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ac *AssistanceCreate) SetSubscribe(s *Subscribe) *AssistanceCreate {
	return ac.SetSubscribeID(s.ID)
}

// SetCity sets the "city" edge to the City entity.
func (ac *AssistanceCreate) SetCity(c *City) *AssistanceCreate {
	return ac.SetCityID(c.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (ac *AssistanceCreate) SetOrder(o *Order) *AssistanceCreate {
	return ac.SetOrderID(o.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ac *AssistanceCreate) SetEmployee(e *Employee) *AssistanceCreate {
	return ac.SetEmployeeID(e.ID)
}

// Mutation returns the AssistanceMutation object of the builder.
func (ac *AssistanceCreate) Mutation() *AssistanceMutation {
	return ac.mutation
}

// Save creates the Assistance in the database.
func (ac *AssistanceCreate) Save(ctx context.Context) (*Assistance, error) {
	var (
		err  error
		node *Assistance
	)
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssistanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Assistance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AssistanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AssistanceCreate) SaveX(ctx context.Context) *Assistance {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AssistanceCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AssistanceCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AssistanceCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if assistance.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assistance.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assistance.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if assistance.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assistance.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assistance.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := assistance.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.Cost(); !ok {
		v := assistance.DefaultCost
		ac.mutation.SetCost(v)
	}
	if _, ok := ac.mutation.Wait(); !ok {
		v := assistance.DefaultWait
		ac.mutation.SetWait(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AssistanceCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Assistance.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Assistance.updated_at"`)}
	}
	if _, ok := ac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "Assistance.rider_id"`)}
	}
	if _, ok := ac.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "Assistance.subscribe_id"`)}
	}
	if _, ok := ac.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Assistance.city_id"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Assistance.status"`)}
	}
	if _, ok := ac.mutation.OutTradeNo(); !ok {
		return &ValidationError{Name: "out_trade_no", err: errors.New(`ent: missing required field "Assistance.out_trade_no"`)}
	}
	if _, ok := ac.mutation.Lng(); !ok {
		return &ValidationError{Name: "lng", err: errors.New(`ent: missing required field "Assistance.lng"`)}
	}
	if _, ok := ac.mutation.Lat(); !ok {
		return &ValidationError{Name: "lat", err: errors.New(`ent: missing required field "Assistance.lat"`)}
	}
	if _, ok := ac.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Assistance.address"`)}
	}
	if _, ok := ac.mutation.Breakdown(); !ok {
		return &ValidationError{Name: "breakdown", err: errors.New(`ent: missing required field "Assistance.breakdown"`)}
	}
	if _, ok := ac.mutation.BreakdownPhotos(); !ok {
		return &ValidationError{Name: "breakdown_photos", err: errors.New(`ent: missing required field "Assistance.breakdown_photos"`)}
	}
	if _, ok := ac.mutation.Wait(); !ok {
		return &ValidationError{Name: "wait", err: errors.New(`ent: missing required field "Assistance.wait"`)}
	}
	if _, ok := ac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "Assistance.rider"`)}
	}
	if _, ok := ac.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "Assistance.subscribe"`)}
	}
	if _, ok := ac.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Assistance.city"`)}
	}
	return nil
}

func (ac *AssistanceCreate) sqlSave(ctx context.Context) (*Assistance, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (ac *AssistanceCreate) createSpec() (*Assistance, *sqlgraph.CreateSpec) {
	var (
		_node = &Assistance{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: assistance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: assistance.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := ac.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: assistance.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ac.mutation.OutTradeNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldOutTradeNo,
		})
		_node.OutTradeNo = value
	}
	if value, ok := ac.mutation.Lng(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLng,
		})
		_node.Lng = value
	}
	if value, ok := ac.mutation.Lat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLat,
		})
		_node.Lat = value
	}
	if value, ok := ac.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := ac.mutation.Breakdown(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldBreakdown,
		})
		_node.Breakdown = value
	}
	if value, ok := ac.mutation.BreakdownDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldBreakdownDesc,
		})
		_node.BreakdownDesc = value
	}
	if value, ok := ac.mutation.BreakdownPhotos(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldBreakdownPhotos,
		})
		_node.BreakdownPhotos = value
	}
	if value, ok := ac.mutation.CancelReason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldCancelReason,
		})
		_node.CancelReason = &value
	}
	if value, ok := ac.mutation.CancelReasonDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldCancelReasonDesc,
		})
		_node.CancelReasonDesc = &value
	}
	if value, ok := ac.mutation.Distance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldDistance,
		})
		_node.Distance = value
	}
	if value, ok := ac.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := ac.mutation.DetectPhoto(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldDetectPhoto,
		})
		_node.DetectPhoto = value
	}
	if value, ok := ac.mutation.JointPhoto(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldJointPhoto,
		})
		_node.JointPhoto = value
	}
	if value, ok := ac.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := ac.mutation.RefusedDesc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldRefusedDesc,
		})
		_node.RefusedDesc = &value
	}
	if value, ok := ac.mutation.PayAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldPayAt,
		})
		_node.PayAt = &value
	}
	if value, ok := ac.mutation.AllocateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldAllocateAt,
		})
		_node.AllocateAt = &value
	}
	if value, ok := ac.mutation.Wait(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldWait,
		})
		_node.Wait = value
	}
	if value, ok := ac.mutation.FreeReason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldFreeReason,
		})
		_node.FreeReason = &value
	}
	if nodes := ac.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.StoreTable,
			Columns: []string{assistance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.RiderTable,
			Columns: []string{assistance.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.SubscribeTable,
			Columns: []string{assistance.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.CityTable,
			Columns: []string{assistance.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   assistance.OrderTable,
			Columns: []string{assistance.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assistance.EmployeeTable,
			Columns: []string{assistance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Assistance.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssistanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AssistanceCreate) OnConflict(opts ...sql.ConflictOption) *AssistanceUpsertOne {
	ac.conflict = opts
	return &AssistanceUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Assistance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AssistanceCreate) OnConflictColumns(columns ...string) *AssistanceUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AssistanceUpsertOne{
		create: ac,
	}
}

type (
	// AssistanceUpsertOne is the builder for "upsert"-ing
	//  one Assistance node.
	AssistanceUpsertOne struct {
		create *AssistanceCreate
	}

	// AssistanceUpsert is the "OnConflict" setter.
	AssistanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AssistanceUpsert) SetCreatedAt(v time.Time) *AssistanceUpsert {
	u.Set(assistance.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateCreatedAt() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssistanceUpsert) SetUpdatedAt(v time.Time) *AssistanceUpsert {
	u.Set(assistance.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateUpdatedAt() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssistanceUpsert) SetDeletedAt(v time.Time) *AssistanceUpsert {
	u.Set(assistance.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateDeletedAt() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssistanceUpsert) ClearDeletedAt() *AssistanceUpsert {
	u.SetNull(assistance.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *AssistanceUpsert) SetCreator(v *model.Modifier) *AssistanceUpsert {
	u.Set(assistance.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateCreator() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *AssistanceUpsert) ClearCreator() *AssistanceUpsert {
	u.SetNull(assistance.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssistanceUpsert) SetLastModifier(v *model.Modifier) *AssistanceUpsert {
	u.Set(assistance.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateLastModifier() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssistanceUpsert) ClearLastModifier() *AssistanceUpsert {
	u.SetNull(assistance.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssistanceUpsert) SetRemark(v string) *AssistanceUpsert {
	u.Set(assistance.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateRemark() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssistanceUpsert) ClearRemark() *AssistanceUpsert {
	u.SetNull(assistance.FieldRemark)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *AssistanceUpsert) SetStoreID(v uint64) *AssistanceUpsert {
	u.Set(assistance.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateStoreID() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *AssistanceUpsert) ClearStoreID() *AssistanceUpsert {
	u.SetNull(assistance.FieldStoreID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *AssistanceUpsert) SetRiderID(v uint64) *AssistanceUpsert {
	u.Set(assistance.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateRiderID() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldRiderID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AssistanceUpsert) SetSubscribeID(v uint64) *AssistanceUpsert {
	u.Set(assistance.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateSubscribeID() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldSubscribeID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *AssistanceUpsert) SetCityID(v uint64) *AssistanceUpsert {
	u.Set(assistance.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateCityID() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldCityID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *AssistanceUpsert) SetEmployeeID(v uint64) *AssistanceUpsert {
	u.Set(assistance.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateEmployeeID() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *AssistanceUpsert) ClearEmployeeID() *AssistanceUpsert {
	u.SetNull(assistance.FieldEmployeeID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *AssistanceUpsert) SetOrderID(v uint64) *AssistanceUpsert {
	u.Set(assistance.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateOrderID() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *AssistanceUpsert) ClearOrderID() *AssistanceUpsert {
	u.SetNull(assistance.FieldOrderID)
	return u
}

// SetStatus sets the "status" field.
func (u *AssistanceUpsert) SetStatus(v uint8) *AssistanceUpsert {
	u.Set(assistance.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateStatus() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AssistanceUpsert) AddStatus(v uint8) *AssistanceUpsert {
	u.Add(assistance.FieldStatus, v)
	return u
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *AssistanceUpsert) SetOutTradeNo(v string) *AssistanceUpsert {
	u.Set(assistance.FieldOutTradeNo, v)
	return u
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateOutTradeNo() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldOutTradeNo)
	return u
}

// SetLng sets the "lng" field.
func (u *AssistanceUpsert) SetLng(v float64) *AssistanceUpsert {
	u.Set(assistance.FieldLng, v)
	return u
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateLng() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldLng)
	return u
}

// AddLng adds v to the "lng" field.
func (u *AssistanceUpsert) AddLng(v float64) *AssistanceUpsert {
	u.Add(assistance.FieldLng, v)
	return u
}

// SetLat sets the "lat" field.
func (u *AssistanceUpsert) SetLat(v float64) *AssistanceUpsert {
	u.Set(assistance.FieldLat, v)
	return u
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateLat() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldLat)
	return u
}

// AddLat adds v to the "lat" field.
func (u *AssistanceUpsert) AddLat(v float64) *AssistanceUpsert {
	u.Add(assistance.FieldLat, v)
	return u
}

// SetAddress sets the "address" field.
func (u *AssistanceUpsert) SetAddress(v string) *AssistanceUpsert {
	u.Set(assistance.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateAddress() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldAddress)
	return u
}

// SetBreakdown sets the "breakdown" field.
func (u *AssistanceUpsert) SetBreakdown(v string) *AssistanceUpsert {
	u.Set(assistance.FieldBreakdown, v)
	return u
}

// UpdateBreakdown sets the "breakdown" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateBreakdown() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldBreakdown)
	return u
}

// SetBreakdownDesc sets the "breakdown_desc" field.
func (u *AssistanceUpsert) SetBreakdownDesc(v string) *AssistanceUpsert {
	u.Set(assistance.FieldBreakdownDesc, v)
	return u
}

// UpdateBreakdownDesc sets the "breakdown_desc" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateBreakdownDesc() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldBreakdownDesc)
	return u
}

// ClearBreakdownDesc clears the value of the "breakdown_desc" field.
func (u *AssistanceUpsert) ClearBreakdownDesc() *AssistanceUpsert {
	u.SetNull(assistance.FieldBreakdownDesc)
	return u
}

// SetBreakdownPhotos sets the "breakdown_photos" field.
func (u *AssistanceUpsert) SetBreakdownPhotos(v []string) *AssistanceUpsert {
	u.Set(assistance.FieldBreakdownPhotos, v)
	return u
}

// UpdateBreakdownPhotos sets the "breakdown_photos" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateBreakdownPhotos() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldBreakdownPhotos)
	return u
}

// SetCancelReason sets the "cancel_reason" field.
func (u *AssistanceUpsert) SetCancelReason(v string) *AssistanceUpsert {
	u.Set(assistance.FieldCancelReason, v)
	return u
}

// UpdateCancelReason sets the "cancel_reason" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateCancelReason() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldCancelReason)
	return u
}

// ClearCancelReason clears the value of the "cancel_reason" field.
func (u *AssistanceUpsert) ClearCancelReason() *AssistanceUpsert {
	u.SetNull(assistance.FieldCancelReason)
	return u
}

// SetCancelReasonDesc sets the "cancel_reason_desc" field.
func (u *AssistanceUpsert) SetCancelReasonDesc(v string) *AssistanceUpsert {
	u.Set(assistance.FieldCancelReasonDesc, v)
	return u
}

// UpdateCancelReasonDesc sets the "cancel_reason_desc" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateCancelReasonDesc() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldCancelReasonDesc)
	return u
}

// ClearCancelReasonDesc clears the value of the "cancel_reason_desc" field.
func (u *AssistanceUpsert) ClearCancelReasonDesc() *AssistanceUpsert {
	u.SetNull(assistance.FieldCancelReasonDesc)
	return u
}

// SetDistance sets the "distance" field.
func (u *AssistanceUpsert) SetDistance(v float64) *AssistanceUpsert {
	u.Set(assistance.FieldDistance, v)
	return u
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateDistance() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldDistance)
	return u
}

// AddDistance adds v to the "distance" field.
func (u *AssistanceUpsert) AddDistance(v float64) *AssistanceUpsert {
	u.Add(assistance.FieldDistance, v)
	return u
}

// ClearDistance clears the value of the "distance" field.
func (u *AssistanceUpsert) ClearDistance() *AssistanceUpsert {
	u.SetNull(assistance.FieldDistance)
	return u
}

// SetReason sets the "reason" field.
func (u *AssistanceUpsert) SetReason(v string) *AssistanceUpsert {
	u.Set(assistance.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateReason() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldReason)
	return u
}

// ClearReason clears the value of the "reason" field.
func (u *AssistanceUpsert) ClearReason() *AssistanceUpsert {
	u.SetNull(assistance.FieldReason)
	return u
}

// SetDetectPhoto sets the "detect_photo" field.
func (u *AssistanceUpsert) SetDetectPhoto(v string) *AssistanceUpsert {
	u.Set(assistance.FieldDetectPhoto, v)
	return u
}

// UpdateDetectPhoto sets the "detect_photo" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateDetectPhoto() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldDetectPhoto)
	return u
}

// ClearDetectPhoto clears the value of the "detect_photo" field.
func (u *AssistanceUpsert) ClearDetectPhoto() *AssistanceUpsert {
	u.SetNull(assistance.FieldDetectPhoto)
	return u
}

// SetJointPhoto sets the "joint_photo" field.
func (u *AssistanceUpsert) SetJointPhoto(v string) *AssistanceUpsert {
	u.Set(assistance.FieldJointPhoto, v)
	return u
}

// UpdateJointPhoto sets the "joint_photo" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateJointPhoto() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldJointPhoto)
	return u
}

// ClearJointPhoto clears the value of the "joint_photo" field.
func (u *AssistanceUpsert) ClearJointPhoto() *AssistanceUpsert {
	u.SetNull(assistance.FieldJointPhoto)
	return u
}

// SetCost sets the "cost" field.
func (u *AssistanceUpsert) SetCost(v float64) *AssistanceUpsert {
	u.Set(assistance.FieldCost, v)
	return u
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateCost() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldCost)
	return u
}

// AddCost adds v to the "cost" field.
func (u *AssistanceUpsert) AddCost(v float64) *AssistanceUpsert {
	u.Add(assistance.FieldCost, v)
	return u
}

// ClearCost clears the value of the "cost" field.
func (u *AssistanceUpsert) ClearCost() *AssistanceUpsert {
	u.SetNull(assistance.FieldCost)
	return u
}

// SetRefusedDesc sets the "refused_desc" field.
func (u *AssistanceUpsert) SetRefusedDesc(v string) *AssistanceUpsert {
	u.Set(assistance.FieldRefusedDesc, v)
	return u
}

// UpdateRefusedDesc sets the "refused_desc" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateRefusedDesc() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldRefusedDesc)
	return u
}

// ClearRefusedDesc clears the value of the "refused_desc" field.
func (u *AssistanceUpsert) ClearRefusedDesc() *AssistanceUpsert {
	u.SetNull(assistance.FieldRefusedDesc)
	return u
}

// SetPayAt sets the "pay_at" field.
func (u *AssistanceUpsert) SetPayAt(v time.Time) *AssistanceUpsert {
	u.Set(assistance.FieldPayAt, v)
	return u
}

// UpdatePayAt sets the "pay_at" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdatePayAt() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldPayAt)
	return u
}

// ClearPayAt clears the value of the "pay_at" field.
func (u *AssistanceUpsert) ClearPayAt() *AssistanceUpsert {
	u.SetNull(assistance.FieldPayAt)
	return u
}

// SetAllocateAt sets the "allocate_at" field.
func (u *AssistanceUpsert) SetAllocateAt(v time.Time) *AssistanceUpsert {
	u.Set(assistance.FieldAllocateAt, v)
	return u
}

// UpdateAllocateAt sets the "allocate_at" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateAllocateAt() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldAllocateAt)
	return u
}

// ClearAllocateAt clears the value of the "allocate_at" field.
func (u *AssistanceUpsert) ClearAllocateAt() *AssistanceUpsert {
	u.SetNull(assistance.FieldAllocateAt)
	return u
}

// SetWait sets the "wait" field.
func (u *AssistanceUpsert) SetWait(v int) *AssistanceUpsert {
	u.Set(assistance.FieldWait, v)
	return u
}

// UpdateWait sets the "wait" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateWait() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldWait)
	return u
}

// AddWait adds v to the "wait" field.
func (u *AssistanceUpsert) AddWait(v int) *AssistanceUpsert {
	u.Add(assistance.FieldWait, v)
	return u
}

// SetFreeReason sets the "free_reason" field.
func (u *AssistanceUpsert) SetFreeReason(v string) *AssistanceUpsert {
	u.Set(assistance.FieldFreeReason, v)
	return u
}

// UpdateFreeReason sets the "free_reason" field to the value that was provided on create.
func (u *AssistanceUpsert) UpdateFreeReason() *AssistanceUpsert {
	u.SetExcluded(assistance.FieldFreeReason)
	return u
}

// ClearFreeReason clears the value of the "free_reason" field.
func (u *AssistanceUpsert) ClearFreeReason() *AssistanceUpsert {
	u.SetNull(assistance.FieldFreeReason)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Assistance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AssistanceUpsertOne) UpdateNewValues() *AssistanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assistance.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(assistance.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Assistance.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AssistanceUpsertOne) Ignore() *AssistanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssistanceUpsertOne) DoNothing() *AssistanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssistanceCreate.OnConflict
// documentation for more info.
func (u *AssistanceUpsertOne) Update(set func(*AssistanceUpsert)) *AssistanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssistanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AssistanceUpsertOne) SetCreatedAt(v time.Time) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateCreatedAt() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssistanceUpsertOne) SetUpdatedAt(v time.Time) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateUpdatedAt() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssistanceUpsertOne) SetDeletedAt(v time.Time) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateDeletedAt() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssistanceUpsertOne) ClearDeletedAt() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *AssistanceUpsertOne) SetCreator(v *model.Modifier) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateCreator() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *AssistanceUpsertOne) ClearCreator() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssistanceUpsertOne) SetLastModifier(v *model.Modifier) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateLastModifier() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssistanceUpsertOne) ClearLastModifier() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssistanceUpsertOne) SetRemark(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateRemark() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssistanceUpsertOne) ClearRemark() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearRemark()
	})
}

// SetStoreID sets the "store_id" field.
func (u *AssistanceUpsertOne) SetStoreID(v uint64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateStoreID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *AssistanceUpsertOne) ClearStoreID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearStoreID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *AssistanceUpsertOne) SetRiderID(v uint64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateRiderID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AssistanceUpsertOne) SetSubscribeID(v uint64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateSubscribeID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetCityID sets the "city_id" field.
func (u *AssistanceUpsertOne) SetCityID(v uint64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateCityID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCityID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *AssistanceUpsertOne) SetEmployeeID(v uint64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateEmployeeID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *AssistanceUpsertOne) ClearEmployeeID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearEmployeeID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *AssistanceUpsertOne) SetOrderID(v uint64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateOrderID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *AssistanceUpsertOne) ClearOrderID() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearOrderID()
	})
}

// SetStatus sets the "status" field.
func (u *AssistanceUpsertOne) SetStatus(v uint8) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssistanceUpsertOne) AddStatus(v uint8) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateStatus() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateStatus()
	})
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *AssistanceUpsertOne) SetOutTradeNo(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetOutTradeNo(v)
	})
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateOutTradeNo() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateOutTradeNo()
	})
}

// SetLng sets the "lng" field.
func (u *AssistanceUpsertOne) SetLng(v float64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *AssistanceUpsertOne) AddLng(v float64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateLng() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateLng()
	})
}

// SetLat sets the "lat" field.
func (u *AssistanceUpsertOne) SetLat(v float64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *AssistanceUpsertOne) AddLat(v float64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateLat() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateLat()
	})
}

// SetAddress sets the "address" field.
func (u *AssistanceUpsertOne) SetAddress(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateAddress() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateAddress()
	})
}

// SetBreakdown sets the "breakdown" field.
func (u *AssistanceUpsertOne) SetBreakdown(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetBreakdown(v)
	})
}

// UpdateBreakdown sets the "breakdown" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateBreakdown() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateBreakdown()
	})
}

// SetBreakdownDesc sets the "breakdown_desc" field.
func (u *AssistanceUpsertOne) SetBreakdownDesc(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetBreakdownDesc(v)
	})
}

// UpdateBreakdownDesc sets the "breakdown_desc" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateBreakdownDesc() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateBreakdownDesc()
	})
}

// ClearBreakdownDesc clears the value of the "breakdown_desc" field.
func (u *AssistanceUpsertOne) ClearBreakdownDesc() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearBreakdownDesc()
	})
}

// SetBreakdownPhotos sets the "breakdown_photos" field.
func (u *AssistanceUpsertOne) SetBreakdownPhotos(v []string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetBreakdownPhotos(v)
	})
}

// UpdateBreakdownPhotos sets the "breakdown_photos" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateBreakdownPhotos() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateBreakdownPhotos()
	})
}

// SetCancelReason sets the "cancel_reason" field.
func (u *AssistanceUpsertOne) SetCancelReason(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCancelReason(v)
	})
}

// UpdateCancelReason sets the "cancel_reason" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateCancelReason() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCancelReason()
	})
}

// ClearCancelReason clears the value of the "cancel_reason" field.
func (u *AssistanceUpsertOne) ClearCancelReason() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearCancelReason()
	})
}

// SetCancelReasonDesc sets the "cancel_reason_desc" field.
func (u *AssistanceUpsertOne) SetCancelReasonDesc(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCancelReasonDesc(v)
	})
}

// UpdateCancelReasonDesc sets the "cancel_reason_desc" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateCancelReasonDesc() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCancelReasonDesc()
	})
}

// ClearCancelReasonDesc clears the value of the "cancel_reason_desc" field.
func (u *AssistanceUpsertOne) ClearCancelReasonDesc() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearCancelReasonDesc()
	})
}

// SetDistance sets the "distance" field.
func (u *AssistanceUpsertOne) SetDistance(v float64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetDistance(v)
	})
}

// AddDistance adds v to the "distance" field.
func (u *AssistanceUpsertOne) AddDistance(v float64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddDistance(v)
	})
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateDistance() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateDistance()
	})
}

// ClearDistance clears the value of the "distance" field.
func (u *AssistanceUpsertOne) ClearDistance() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearDistance()
	})
}

// SetReason sets the "reason" field.
func (u *AssistanceUpsertOne) SetReason(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateReason() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *AssistanceUpsertOne) ClearReason() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearReason()
	})
}

// SetDetectPhoto sets the "detect_photo" field.
func (u *AssistanceUpsertOne) SetDetectPhoto(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetDetectPhoto(v)
	})
}

// UpdateDetectPhoto sets the "detect_photo" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateDetectPhoto() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateDetectPhoto()
	})
}

// ClearDetectPhoto clears the value of the "detect_photo" field.
func (u *AssistanceUpsertOne) ClearDetectPhoto() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearDetectPhoto()
	})
}

// SetJointPhoto sets the "joint_photo" field.
func (u *AssistanceUpsertOne) SetJointPhoto(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetJointPhoto(v)
	})
}

// UpdateJointPhoto sets the "joint_photo" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateJointPhoto() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateJointPhoto()
	})
}

// ClearJointPhoto clears the value of the "joint_photo" field.
func (u *AssistanceUpsertOne) ClearJointPhoto() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearJointPhoto()
	})
}

// SetCost sets the "cost" field.
func (u *AssistanceUpsertOne) SetCost(v float64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCost(v)
	})
}

// AddCost adds v to the "cost" field.
func (u *AssistanceUpsertOne) AddCost(v float64) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddCost(v)
	})
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateCost() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCost()
	})
}

// ClearCost clears the value of the "cost" field.
func (u *AssistanceUpsertOne) ClearCost() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearCost()
	})
}

// SetRefusedDesc sets the "refused_desc" field.
func (u *AssistanceUpsertOne) SetRefusedDesc(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetRefusedDesc(v)
	})
}

// UpdateRefusedDesc sets the "refused_desc" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateRefusedDesc() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateRefusedDesc()
	})
}

// ClearRefusedDesc clears the value of the "refused_desc" field.
func (u *AssistanceUpsertOne) ClearRefusedDesc() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearRefusedDesc()
	})
}

// SetPayAt sets the "pay_at" field.
func (u *AssistanceUpsertOne) SetPayAt(v time.Time) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetPayAt(v)
	})
}

// UpdatePayAt sets the "pay_at" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdatePayAt() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdatePayAt()
	})
}

// ClearPayAt clears the value of the "pay_at" field.
func (u *AssistanceUpsertOne) ClearPayAt() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearPayAt()
	})
}

// SetAllocateAt sets the "allocate_at" field.
func (u *AssistanceUpsertOne) SetAllocateAt(v time.Time) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetAllocateAt(v)
	})
}

// UpdateAllocateAt sets the "allocate_at" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateAllocateAt() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateAllocateAt()
	})
}

// ClearAllocateAt clears the value of the "allocate_at" field.
func (u *AssistanceUpsertOne) ClearAllocateAt() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearAllocateAt()
	})
}

// SetWait sets the "wait" field.
func (u *AssistanceUpsertOne) SetWait(v int) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetWait(v)
	})
}

// AddWait adds v to the "wait" field.
func (u *AssistanceUpsertOne) AddWait(v int) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddWait(v)
	})
}

// UpdateWait sets the "wait" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateWait() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateWait()
	})
}

// SetFreeReason sets the "free_reason" field.
func (u *AssistanceUpsertOne) SetFreeReason(v string) *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetFreeReason(v)
	})
}

// UpdateFreeReason sets the "free_reason" field to the value that was provided on create.
func (u *AssistanceUpsertOne) UpdateFreeReason() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateFreeReason()
	})
}

// ClearFreeReason clears the value of the "free_reason" field.
func (u *AssistanceUpsertOne) ClearFreeReason() *AssistanceUpsertOne {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearFreeReason()
	})
}

// Exec executes the query.
func (u *AssistanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssistanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssistanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssistanceUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssistanceUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssistanceCreateBulk is the builder for creating many Assistance entities in bulk.
type AssistanceCreateBulk struct {
	config
	builders []*AssistanceCreate
	conflict []sql.ConflictOption
}

// Save creates the Assistance entities in the database.
func (acb *AssistanceCreateBulk) Save(ctx context.Context) ([]*Assistance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Assistance, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssistanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AssistanceCreateBulk) SaveX(ctx context.Context) []*Assistance {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AssistanceCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AssistanceCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Assistance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssistanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AssistanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssistanceUpsertBulk {
	acb.conflict = opts
	return &AssistanceUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Assistance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AssistanceCreateBulk) OnConflictColumns(columns ...string) *AssistanceUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AssistanceUpsertBulk{
		create: acb,
	}
}

// AssistanceUpsertBulk is the builder for "upsert"-ing
// a bulk of Assistance nodes.
type AssistanceUpsertBulk struct {
	create *AssistanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Assistance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AssistanceUpsertBulk) UpdateNewValues() *AssistanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assistance.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(assistance.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Assistance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AssistanceUpsertBulk) Ignore() *AssistanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssistanceUpsertBulk) DoNothing() *AssistanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssistanceCreateBulk.OnConflict
// documentation for more info.
func (u *AssistanceUpsertBulk) Update(set func(*AssistanceUpsert)) *AssistanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssistanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AssistanceUpsertBulk) SetCreatedAt(v time.Time) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateCreatedAt() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssistanceUpsertBulk) SetUpdatedAt(v time.Time) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateUpdatedAt() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssistanceUpsertBulk) SetDeletedAt(v time.Time) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateDeletedAt() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssistanceUpsertBulk) ClearDeletedAt() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *AssistanceUpsertBulk) SetCreator(v *model.Modifier) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateCreator() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *AssistanceUpsertBulk) ClearCreator() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssistanceUpsertBulk) SetLastModifier(v *model.Modifier) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateLastModifier() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssistanceUpsertBulk) ClearLastModifier() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssistanceUpsertBulk) SetRemark(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateRemark() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssistanceUpsertBulk) ClearRemark() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearRemark()
	})
}

// SetStoreID sets the "store_id" field.
func (u *AssistanceUpsertBulk) SetStoreID(v uint64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateStoreID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *AssistanceUpsertBulk) ClearStoreID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearStoreID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *AssistanceUpsertBulk) SetRiderID(v uint64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateRiderID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AssistanceUpsertBulk) SetSubscribeID(v uint64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateSubscribeID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetCityID sets the "city_id" field.
func (u *AssistanceUpsertBulk) SetCityID(v uint64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateCityID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCityID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *AssistanceUpsertBulk) SetEmployeeID(v uint64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateEmployeeID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *AssistanceUpsertBulk) ClearEmployeeID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearEmployeeID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *AssistanceUpsertBulk) SetOrderID(v uint64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateOrderID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *AssistanceUpsertBulk) ClearOrderID() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearOrderID()
	})
}

// SetStatus sets the "status" field.
func (u *AssistanceUpsertBulk) SetStatus(v uint8) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssistanceUpsertBulk) AddStatus(v uint8) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateStatus() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateStatus()
	})
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *AssistanceUpsertBulk) SetOutTradeNo(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetOutTradeNo(v)
	})
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateOutTradeNo() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateOutTradeNo()
	})
}

// SetLng sets the "lng" field.
func (u *AssistanceUpsertBulk) SetLng(v float64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *AssistanceUpsertBulk) AddLng(v float64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateLng() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateLng()
	})
}

// SetLat sets the "lat" field.
func (u *AssistanceUpsertBulk) SetLat(v float64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *AssistanceUpsertBulk) AddLat(v float64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateLat() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateLat()
	})
}

// SetAddress sets the "address" field.
func (u *AssistanceUpsertBulk) SetAddress(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateAddress() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateAddress()
	})
}

// SetBreakdown sets the "breakdown" field.
func (u *AssistanceUpsertBulk) SetBreakdown(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetBreakdown(v)
	})
}

// UpdateBreakdown sets the "breakdown" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateBreakdown() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateBreakdown()
	})
}

// SetBreakdownDesc sets the "breakdown_desc" field.
func (u *AssistanceUpsertBulk) SetBreakdownDesc(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetBreakdownDesc(v)
	})
}

// UpdateBreakdownDesc sets the "breakdown_desc" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateBreakdownDesc() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateBreakdownDesc()
	})
}

// ClearBreakdownDesc clears the value of the "breakdown_desc" field.
func (u *AssistanceUpsertBulk) ClearBreakdownDesc() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearBreakdownDesc()
	})
}

// SetBreakdownPhotos sets the "breakdown_photos" field.
func (u *AssistanceUpsertBulk) SetBreakdownPhotos(v []string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetBreakdownPhotos(v)
	})
}

// UpdateBreakdownPhotos sets the "breakdown_photos" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateBreakdownPhotos() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateBreakdownPhotos()
	})
}

// SetCancelReason sets the "cancel_reason" field.
func (u *AssistanceUpsertBulk) SetCancelReason(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCancelReason(v)
	})
}

// UpdateCancelReason sets the "cancel_reason" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateCancelReason() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCancelReason()
	})
}

// ClearCancelReason clears the value of the "cancel_reason" field.
func (u *AssistanceUpsertBulk) ClearCancelReason() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearCancelReason()
	})
}

// SetCancelReasonDesc sets the "cancel_reason_desc" field.
func (u *AssistanceUpsertBulk) SetCancelReasonDesc(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCancelReasonDesc(v)
	})
}

// UpdateCancelReasonDesc sets the "cancel_reason_desc" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateCancelReasonDesc() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCancelReasonDesc()
	})
}

// ClearCancelReasonDesc clears the value of the "cancel_reason_desc" field.
func (u *AssistanceUpsertBulk) ClearCancelReasonDesc() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearCancelReasonDesc()
	})
}

// SetDistance sets the "distance" field.
func (u *AssistanceUpsertBulk) SetDistance(v float64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetDistance(v)
	})
}

// AddDistance adds v to the "distance" field.
func (u *AssistanceUpsertBulk) AddDistance(v float64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddDistance(v)
	})
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateDistance() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateDistance()
	})
}

// ClearDistance clears the value of the "distance" field.
func (u *AssistanceUpsertBulk) ClearDistance() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearDistance()
	})
}

// SetReason sets the "reason" field.
func (u *AssistanceUpsertBulk) SetReason(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateReason() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *AssistanceUpsertBulk) ClearReason() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearReason()
	})
}

// SetDetectPhoto sets the "detect_photo" field.
func (u *AssistanceUpsertBulk) SetDetectPhoto(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetDetectPhoto(v)
	})
}

// UpdateDetectPhoto sets the "detect_photo" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateDetectPhoto() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateDetectPhoto()
	})
}

// ClearDetectPhoto clears the value of the "detect_photo" field.
func (u *AssistanceUpsertBulk) ClearDetectPhoto() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearDetectPhoto()
	})
}

// SetJointPhoto sets the "joint_photo" field.
func (u *AssistanceUpsertBulk) SetJointPhoto(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetJointPhoto(v)
	})
}

// UpdateJointPhoto sets the "joint_photo" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateJointPhoto() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateJointPhoto()
	})
}

// ClearJointPhoto clears the value of the "joint_photo" field.
func (u *AssistanceUpsertBulk) ClearJointPhoto() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearJointPhoto()
	})
}

// SetCost sets the "cost" field.
func (u *AssistanceUpsertBulk) SetCost(v float64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetCost(v)
	})
}

// AddCost adds v to the "cost" field.
func (u *AssistanceUpsertBulk) AddCost(v float64) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddCost(v)
	})
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateCost() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateCost()
	})
}

// ClearCost clears the value of the "cost" field.
func (u *AssistanceUpsertBulk) ClearCost() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearCost()
	})
}

// SetRefusedDesc sets the "refused_desc" field.
func (u *AssistanceUpsertBulk) SetRefusedDesc(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetRefusedDesc(v)
	})
}

// UpdateRefusedDesc sets the "refused_desc" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateRefusedDesc() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateRefusedDesc()
	})
}

// ClearRefusedDesc clears the value of the "refused_desc" field.
func (u *AssistanceUpsertBulk) ClearRefusedDesc() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearRefusedDesc()
	})
}

// SetPayAt sets the "pay_at" field.
func (u *AssistanceUpsertBulk) SetPayAt(v time.Time) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetPayAt(v)
	})
}

// UpdatePayAt sets the "pay_at" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdatePayAt() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdatePayAt()
	})
}

// ClearPayAt clears the value of the "pay_at" field.
func (u *AssistanceUpsertBulk) ClearPayAt() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearPayAt()
	})
}

// SetAllocateAt sets the "allocate_at" field.
func (u *AssistanceUpsertBulk) SetAllocateAt(v time.Time) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetAllocateAt(v)
	})
}

// UpdateAllocateAt sets the "allocate_at" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateAllocateAt() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateAllocateAt()
	})
}

// ClearAllocateAt clears the value of the "allocate_at" field.
func (u *AssistanceUpsertBulk) ClearAllocateAt() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearAllocateAt()
	})
}

// SetWait sets the "wait" field.
func (u *AssistanceUpsertBulk) SetWait(v int) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetWait(v)
	})
}

// AddWait adds v to the "wait" field.
func (u *AssistanceUpsertBulk) AddWait(v int) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.AddWait(v)
	})
}

// UpdateWait sets the "wait" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateWait() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateWait()
	})
}

// SetFreeReason sets the "free_reason" field.
func (u *AssistanceUpsertBulk) SetFreeReason(v string) *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.SetFreeReason(v)
	})
}

// UpdateFreeReason sets the "free_reason" field to the value that was provided on create.
func (u *AssistanceUpsertBulk) UpdateFreeReason() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.UpdateFreeReason()
	})
}

// ClearFreeReason clears the value of the "free_reason" field.
func (u *AssistanceUpsertBulk) ClearFreeReason() *AssistanceUpsertBulk {
	return u.Update(func(s *AssistanceUpsert) {
		s.ClearFreeReason()
	})
}

// Exec executes the query.
func (u *AssistanceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssistanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssistanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssistanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
