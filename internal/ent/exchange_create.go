// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// ExchangeCreate is the builder for creating a Exchange entity.
type ExchangeCreate struct {
	config
	mutation *ExchangeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *ExchangeCreate) SetCreatedAt(t time.Time) *ExchangeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableCreatedAt(t *time.Time) *ExchangeCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *ExchangeCreate) SetUpdatedAt(t time.Time) *ExchangeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableUpdatedAt(t *time.Time) *ExchangeCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *ExchangeCreate) SetDeletedAt(t time.Time) *ExchangeCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableDeletedAt(t *time.Time) *ExchangeCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetCreator sets the "creator" field.
func (ec *ExchangeCreate) SetCreator(m *model.Modifier) *ExchangeCreate {
	ec.mutation.SetCreator(m)
	return ec
}

// SetLastModifier sets the "last_modifier" field.
func (ec *ExchangeCreate) SetLastModifier(m *model.Modifier) *ExchangeCreate {
	ec.mutation.SetLastModifier(m)
	return ec
}

// SetRemark sets the "remark" field.
func (ec *ExchangeCreate) SetRemark(s string) *ExchangeCreate {
	ec.mutation.SetRemark(s)
	return ec
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableRemark(s *string) *ExchangeCreate {
	if s != nil {
		ec.SetRemark(*s)
	}
	return ec
}

// SetCityID sets the "city_id" field.
func (ec *ExchangeCreate) SetCityID(u uint64) *ExchangeCreate {
	ec.mutation.SetCityID(u)
	return ec
}

// SetEmployeeID sets the "employee_id" field.
func (ec *ExchangeCreate) SetEmployeeID(u uint64) *ExchangeCreate {
	ec.mutation.SetEmployeeID(u)
	return ec
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableEmployeeID(u *uint64) *ExchangeCreate {
	if u != nil {
		ec.SetEmployeeID(*u)
	}
	return ec
}

// SetStoreID sets the "store_id" field.
func (ec *ExchangeCreate) SetStoreID(u uint64) *ExchangeCreate {
	ec.mutation.SetStoreID(u)
	return ec
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableStoreID(u *uint64) *ExchangeCreate {
	if u != nil {
		ec.SetStoreID(*u)
	}
	return ec
}

// SetRiderID sets the "rider_id" field.
func (ec *ExchangeCreate) SetRiderID(u uint64) *ExchangeCreate {
	ec.mutation.SetRiderID(u)
	return ec
}

// SetUUID sets the "uuid" field.
func (ec *ExchangeCreate) SetUUID(s string) *ExchangeCreate {
	ec.mutation.SetUUID(s)
	return ec
}

// SetCabinetID sets the "cabinet_id" field.
func (ec *ExchangeCreate) SetCabinetID(u uint64) *ExchangeCreate {
	ec.mutation.SetCabinetID(u)
	return ec
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableCabinetID(u *uint64) *ExchangeCreate {
	if u != nil {
		ec.SetCabinetID(*u)
	}
	return ec
}

// SetSuccess sets the "success" field.
func (ec *ExchangeCreate) SetSuccess(b bool) *ExchangeCreate {
	ec.mutation.SetSuccess(b)
	return ec
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (ec *ExchangeCreate) SetNillableSuccess(b *bool) *ExchangeCreate {
	if b != nil {
		ec.SetSuccess(*b)
	}
	return ec
}

// SetDetail sets the "detail" field.
func (ec *ExchangeCreate) SetDetail(mc *model.ExchangeCabinet) *ExchangeCreate {
	ec.mutation.SetDetail(mc)
	return ec
}

// SetCity sets the "city" edge to the City entity.
func (ec *ExchangeCreate) SetCity(c *City) *ExchangeCreate {
	return ec.SetCityID(c.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ec *ExchangeCreate) SetEmployee(e *Employee) *ExchangeCreate {
	return ec.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (ec *ExchangeCreate) SetStore(s *Store) *ExchangeCreate {
	return ec.SetStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ec *ExchangeCreate) SetCabinet(c *Cabinet) *ExchangeCreate {
	return ec.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ec *ExchangeCreate) SetRider(r *Rider) *ExchangeCreate {
	return ec.SetRiderID(r.ID)
}

// Mutation returns the ExchangeMutation object of the builder.
func (ec *ExchangeCreate) Mutation() *ExchangeMutation {
	return ec.mutation
}

// Save creates the Exchange in the database.
func (ec *ExchangeCreate) Save(ctx context.Context) (*Exchange, error) {
	var (
		err  error
		node *Exchange
	)
	if err := ec.defaults(); err != nil {
		return nil, err
	}
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Exchange)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExchangeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExchangeCreate) SaveX(ctx context.Context) *Exchange {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExchangeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExchangeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExchangeCreate) defaults() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		if exchange.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchange.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := exchange.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		if exchange.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exchange.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exchange.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Success(); !ok {
		v := exchange.DefaultSuccess
		ec.mutation.SetSuccess(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExchangeCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Exchange.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Exchange.updated_at"`)}
	}
	if _, ok := ec.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Exchange.city_id"`)}
	}
	if _, ok := ec.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "Exchange.rider_id"`)}
	}
	if _, ok := ec.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Exchange.uuid"`)}
	}
	if _, ok := ec.mutation.Success(); !ok {
		return &ValidationError{Name: "success", err: errors.New(`ent: missing required field "Exchange.success"`)}
	}
	if _, ok := ec.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Exchange.city"`)}
	}
	if _, ok := ec.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "Exchange.rider"`)}
	}
	return nil
}

func (ec *ExchangeCreate) sqlSave(ctx context.Context) (*Exchange, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (ec *ExchangeCreate) createSpec() (*Exchange, *sqlgraph.CreateSpec) {
	var (
		_node = &Exchange{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: exchange.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exchange.FieldID,
			},
		}
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exchange.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := ec.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := ec.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ec.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exchange.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := ec.mutation.Success(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: exchange.FieldSuccess,
		})
		_node.Success = value
	}
	if value, ok := ec.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exchange.FieldDetail,
		})
		_node.Detail = value
	}
	if nodes := ec.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.CityTable,
			Columns: []string{exchange.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.EmployeeTable,
			Columns: []string{exchange.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exchange.StoreTable,
			Columns: []string{exchange.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.CabinetTable,
			Columns: []string{exchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exchange.RiderTable,
			Columns: []string{exchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exchange.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExchangeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ec *ExchangeCreate) OnConflict(opts ...sql.ConflictOption) *ExchangeUpsertOne {
	ec.conflict = opts
	return &ExchangeUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ec *ExchangeCreate) OnConflictColumns(columns ...string) *ExchangeUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &ExchangeUpsertOne{
		create: ec,
	}
}

type (
	// ExchangeUpsertOne is the builder for "upsert"-ing
	//  one Exchange node.
	ExchangeUpsertOne struct {
		create *ExchangeCreate
	}

	// ExchangeUpsert is the "OnConflict" setter.
	ExchangeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ExchangeUpsert) SetCreatedAt(v time.Time) *ExchangeUpsert {
	u.Set(exchange.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateCreatedAt() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExchangeUpsert) SetUpdatedAt(v time.Time) *ExchangeUpsert {
	u.Set(exchange.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateUpdatedAt() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExchangeUpsert) SetDeletedAt(v time.Time) *ExchangeUpsert {
	u.Set(exchange.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateDeletedAt() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExchangeUpsert) ClearDeletedAt() *ExchangeUpsert {
	u.SetNull(exchange.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *ExchangeUpsert) SetCreator(v *model.Modifier) *ExchangeUpsert {
	u.Set(exchange.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateCreator() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *ExchangeUpsert) ClearCreator() *ExchangeUpsert {
	u.SetNull(exchange.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *ExchangeUpsert) SetLastModifier(v *model.Modifier) *ExchangeUpsert {
	u.Set(exchange.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateLastModifier() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ExchangeUpsert) ClearLastModifier() *ExchangeUpsert {
	u.SetNull(exchange.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *ExchangeUpsert) SetRemark(v string) *ExchangeUpsert {
	u.Set(exchange.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateRemark() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *ExchangeUpsert) ClearRemark() *ExchangeUpsert {
	u.SetNull(exchange.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *ExchangeUpsert) SetCityID(v uint64) *ExchangeUpsert {
	u.Set(exchange.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateCityID() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldCityID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *ExchangeUpsert) SetEmployeeID(v uint64) *ExchangeUpsert {
	u.Set(exchange.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateEmployeeID() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *ExchangeUpsert) ClearEmployeeID() *ExchangeUpsert {
	u.SetNull(exchange.FieldEmployeeID)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *ExchangeUpsert) SetStoreID(v uint64) *ExchangeUpsert {
	u.Set(exchange.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateStoreID() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *ExchangeUpsert) ClearStoreID() *ExchangeUpsert {
	u.SetNull(exchange.FieldStoreID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *ExchangeUpsert) SetRiderID(v uint64) *ExchangeUpsert {
	u.Set(exchange.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateRiderID() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldRiderID)
	return u
}

// SetUUID sets the "uuid" field.
func (u *ExchangeUpsert) SetUUID(v string) *ExchangeUpsert {
	u.Set(exchange.FieldUUID, v)
	return u
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateUUID() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldUUID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ExchangeUpsert) SetCabinetID(v uint64) *ExchangeUpsert {
	u.Set(exchange.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateCabinetID() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *ExchangeUpsert) ClearCabinetID() *ExchangeUpsert {
	u.SetNull(exchange.FieldCabinetID)
	return u
}

// SetSuccess sets the "success" field.
func (u *ExchangeUpsert) SetSuccess(v bool) *ExchangeUpsert {
	u.Set(exchange.FieldSuccess, v)
	return u
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateSuccess() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldSuccess)
	return u
}

// SetDetail sets the "detail" field.
func (u *ExchangeUpsert) SetDetail(v *model.ExchangeCabinet) *ExchangeUpsert {
	u.Set(exchange.FieldDetail, v)
	return u
}

// UpdateDetail sets the "detail" field to the value that was provided on create.
func (u *ExchangeUpsert) UpdateDetail() *ExchangeUpsert {
	u.SetExcluded(exchange.FieldDetail)
	return u
}

// ClearDetail clears the value of the "detail" field.
func (u *ExchangeUpsert) ClearDetail() *ExchangeUpsert {
	u.SetNull(exchange.FieldDetail)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ExchangeUpsertOne) UpdateNewValues() *ExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(exchange.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(exchange.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Exchange.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ExchangeUpsertOne) Ignore() *ExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExchangeUpsertOne) DoNothing() *ExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExchangeCreate.OnConflict
// documentation for more info.
func (u *ExchangeUpsertOne) Update(set func(*ExchangeUpsert)) *ExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExchangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ExchangeUpsertOne) SetCreatedAt(v time.Time) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateCreatedAt() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExchangeUpsertOne) SetUpdatedAt(v time.Time) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateUpdatedAt() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExchangeUpsertOne) SetDeletedAt(v time.Time) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateDeletedAt() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExchangeUpsertOne) ClearDeletedAt() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *ExchangeUpsertOne) SetCreator(v *model.Modifier) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateCreator() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *ExchangeUpsertOne) ClearCreator() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ExchangeUpsertOne) SetLastModifier(v *model.Modifier) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateLastModifier() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ExchangeUpsertOne) ClearLastModifier() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ExchangeUpsertOne) SetRemark(v string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateRemark() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ExchangeUpsertOne) ClearRemark() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *ExchangeUpsertOne) SetCityID(v uint64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateCityID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCityID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *ExchangeUpsertOne) SetEmployeeID(v uint64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateEmployeeID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *ExchangeUpsertOne) ClearEmployeeID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearEmployeeID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *ExchangeUpsertOne) SetStoreID(v uint64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateStoreID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *ExchangeUpsertOne) ClearStoreID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearStoreID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *ExchangeUpsertOne) SetRiderID(v uint64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateRiderID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateRiderID()
	})
}

// SetUUID sets the "uuid" field.
func (u *ExchangeUpsertOne) SetUUID(v string) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateUUID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateUUID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ExchangeUpsertOne) SetCabinetID(v uint64) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateCabinetID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *ExchangeUpsertOne) ClearCabinetID() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearCabinetID()
	})
}

// SetSuccess sets the "success" field.
func (u *ExchangeUpsertOne) SetSuccess(v bool) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateSuccess() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateSuccess()
	})
}

// SetDetail sets the "detail" field.
func (u *ExchangeUpsertOne) SetDetail(v *model.ExchangeCabinet) *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetDetail(v)
	})
}

// UpdateDetail sets the "detail" field to the value that was provided on create.
func (u *ExchangeUpsertOne) UpdateDetail() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateDetail()
	})
}

// ClearDetail clears the value of the "detail" field.
func (u *ExchangeUpsertOne) ClearDetail() *ExchangeUpsertOne {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearDetail()
	})
}

// Exec executes the query.
func (u *ExchangeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExchangeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExchangeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExchangeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExchangeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExchangeCreateBulk is the builder for creating many Exchange entities in bulk.
type ExchangeCreateBulk struct {
	config
	builders []*ExchangeCreate
	conflict []sql.ConflictOption
}

// Save creates the Exchange entities in the database.
func (ecb *ExchangeCreateBulk) Save(ctx context.Context) ([]*Exchange, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exchange, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExchangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExchangeCreateBulk) SaveX(ctx context.Context) []*Exchange {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExchangeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExchangeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exchange.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExchangeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ecb *ExchangeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExchangeUpsertBulk {
	ecb.conflict = opts
	return &ExchangeUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ecb *ExchangeCreateBulk) OnConflictColumns(columns ...string) *ExchangeUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &ExchangeUpsertBulk{
		create: ecb,
	}
}

// ExchangeUpsertBulk is the builder for "upsert"-ing
// a bulk of Exchange nodes.
type ExchangeUpsertBulk struct {
	create *ExchangeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ExchangeUpsertBulk) UpdateNewValues() *ExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(exchange.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(exchange.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exchange.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ExchangeUpsertBulk) Ignore() *ExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExchangeUpsertBulk) DoNothing() *ExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExchangeCreateBulk.OnConflict
// documentation for more info.
func (u *ExchangeUpsertBulk) Update(set func(*ExchangeUpsert)) *ExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExchangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ExchangeUpsertBulk) SetCreatedAt(v time.Time) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateCreatedAt() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExchangeUpsertBulk) SetUpdatedAt(v time.Time) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateUpdatedAt() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExchangeUpsertBulk) SetDeletedAt(v time.Time) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateDeletedAt() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExchangeUpsertBulk) ClearDeletedAt() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *ExchangeUpsertBulk) SetCreator(v *model.Modifier) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateCreator() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *ExchangeUpsertBulk) ClearCreator() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ExchangeUpsertBulk) SetLastModifier(v *model.Modifier) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateLastModifier() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ExchangeUpsertBulk) ClearLastModifier() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ExchangeUpsertBulk) SetRemark(v string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateRemark() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ExchangeUpsertBulk) ClearRemark() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *ExchangeUpsertBulk) SetCityID(v uint64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateCityID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCityID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *ExchangeUpsertBulk) SetEmployeeID(v uint64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateEmployeeID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *ExchangeUpsertBulk) ClearEmployeeID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearEmployeeID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *ExchangeUpsertBulk) SetStoreID(v uint64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateStoreID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *ExchangeUpsertBulk) ClearStoreID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearStoreID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *ExchangeUpsertBulk) SetRiderID(v uint64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateRiderID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateRiderID()
	})
}

// SetUUID sets the "uuid" field.
func (u *ExchangeUpsertBulk) SetUUID(v string) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetUUID(v)
	})
}

// UpdateUUID sets the "uuid" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateUUID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateUUID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ExchangeUpsertBulk) SetCabinetID(v uint64) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateCabinetID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *ExchangeUpsertBulk) ClearCabinetID() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearCabinetID()
	})
}

// SetSuccess sets the "success" field.
func (u *ExchangeUpsertBulk) SetSuccess(v bool) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateSuccess() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateSuccess()
	})
}

// SetDetail sets the "detail" field.
func (u *ExchangeUpsertBulk) SetDetail(v *model.ExchangeCabinet) *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.SetDetail(v)
	})
}

// UpdateDetail sets the "detail" field to the value that was provided on create.
func (u *ExchangeUpsertBulk) UpdateDetail() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.UpdateDetail()
	})
}

// ClearDetail clears the value of the "detail" field.
func (u *ExchangeUpsertBulk) ClearDetail() *ExchangeUpsertBulk {
	return u.Update(func(s *ExchangeUpsert) {
		s.ClearDetail()
	})
}

// Exec executes the query.
func (u *ExchangeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExchangeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExchangeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExchangeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
