// Code generated by ent, DO NOT EDIT.

package batterymodelnew

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldRemark, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldType, v))
}

// Voltage applies equality check predicate on the "voltage" field. It's identical to VoltageEQ.
func Voltage(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldVoltage, v))
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldCapacity, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldModel, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldContainsFold(FieldRemark, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldType, v))
}

// VoltageEQ applies the EQ predicate on the "voltage" field.
func VoltageEQ(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldVoltage, v))
}

// VoltageNEQ applies the NEQ predicate on the "voltage" field.
func VoltageNEQ(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldVoltage, v))
}

// VoltageIn applies the In predicate on the "voltage" field.
func VoltageIn(vs ...uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldVoltage, vs...))
}

// VoltageNotIn applies the NotIn predicate on the "voltage" field.
func VoltageNotIn(vs ...uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldVoltage, vs...))
}

// VoltageGT applies the GT predicate on the "voltage" field.
func VoltageGT(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldVoltage, v))
}

// VoltageGTE applies the GTE predicate on the "voltage" field.
func VoltageGTE(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldVoltage, v))
}

// VoltageLT applies the LT predicate on the "voltage" field.
func VoltageLT(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldVoltage, v))
}

// VoltageLTE applies the LTE predicate on the "voltage" field.
func VoltageLTE(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldVoltage, v))
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldCapacity, v))
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldCapacity, v))
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldCapacity, vs...))
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldCapacity, vs...))
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldCapacity, v))
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldCapacity, v))
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldCapacity, v))
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v uint) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldCapacity, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.FieldContainsFold(FieldModel, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BatteryModelNew) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BatteryModelNew) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BatteryModelNew) predicate.BatteryModelNew {
	return predicate.BatteryModelNew(sql.NotPredicates(p))
}
