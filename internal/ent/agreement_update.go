// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agreement"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AgreementUpdate is the builder for updating Agreement entities.
type AgreementUpdate struct {
	config
	hooks     []Hook
	mutation  *AgreementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AgreementUpdate builder.
func (au *AgreementUpdate) Where(ps ...predicate.Agreement) *AgreementUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AgreementUpdate) SetUpdatedAt(t time.Time) *AgreementUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AgreementUpdate) SetDeletedAt(t time.Time) *AgreementUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableDeletedAt(t *time.Time) *AgreementUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AgreementUpdate) ClearDeletedAt() *AgreementUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetLastModifier sets the "last_modifier" field.
func (au *AgreementUpdate) SetLastModifier(m *model.Modifier) *AgreementUpdate {
	au.mutation.SetLastModifier(m)
	return au
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (au *AgreementUpdate) ClearLastModifier() *AgreementUpdate {
	au.mutation.ClearLastModifier()
	return au
}

// SetRemark sets the "remark" field.
func (au *AgreementUpdate) SetRemark(s string) *AgreementUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableRemark(s *string) *AgreementUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// ClearRemark clears the value of the "remark" field.
func (au *AgreementUpdate) ClearRemark() *AgreementUpdate {
	au.mutation.ClearRemark()
	return au
}

// SetName sets the "name" field.
func (au *AgreementUpdate) SetName(s string) *AgreementUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableName(s *string) *AgreementUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetContent sets the "content" field.
func (au *AgreementUpdate) SetContent(s string) *AgreementUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableContent(s *string) *AgreementUpdate {
	if s != nil {
		au.SetContent(*s)
	}
	return au
}

// SetUserType sets the "user_type" field.
func (au *AgreementUpdate) SetUserType(u uint8) *AgreementUpdate {
	au.mutation.ResetUserType()
	au.mutation.SetUserType(u)
	return au
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableUserType(u *uint8) *AgreementUpdate {
	if u != nil {
		au.SetUserType(*u)
	}
	return au
}

// AddUserType adds u to the "user_type" field.
func (au *AgreementUpdate) AddUserType(u int8) *AgreementUpdate {
	au.mutation.AddUserType(u)
	return au
}

// SetForceReadTime sets the "force_read_time" field.
func (au *AgreementUpdate) SetForceReadTime(u uint8) *AgreementUpdate {
	au.mutation.ResetForceReadTime()
	au.mutation.SetForceReadTime(u)
	return au
}

// SetNillableForceReadTime sets the "force_read_time" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableForceReadTime(u *uint8) *AgreementUpdate {
	if u != nil {
		au.SetForceReadTime(*u)
	}
	return au
}

// AddForceReadTime adds u to the "force_read_time" field.
func (au *AgreementUpdate) AddForceReadTime(u int8) *AgreementUpdate {
	au.mutation.AddForceReadTime(u)
	return au
}

// SetIsDefault sets the "is_default" field.
func (au *AgreementUpdate) SetIsDefault(b bool) *AgreementUpdate {
	au.mutation.SetIsDefault(b)
	return au
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableIsDefault(b *bool) *AgreementUpdate {
	if b != nil {
		au.SetIsDefault(*b)
	}
	return au
}

// SetHash sets the "hash" field.
func (au *AgreementUpdate) SetHash(s string) *AgreementUpdate {
	au.mutation.SetHash(s)
	return au
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableHash(s *string) *AgreementUpdate {
	if s != nil {
		au.SetHash(*s)
	}
	return au
}

// ClearHash clears the value of the "hash" field.
func (au *AgreementUpdate) ClearHash() *AgreementUpdate {
	au.mutation.ClearHash()
	return au
}

// SetURL sets the "url" field.
func (au *AgreementUpdate) SetURL(s string) *AgreementUpdate {
	au.mutation.SetURL(s)
	return au
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (au *AgreementUpdate) SetNillableURL(s *string) *AgreementUpdate {
	if s != nil {
		au.SetURL(*s)
	}
	return au
}

// ClearURL clears the value of the "url" field.
func (au *AgreementUpdate) ClearURL() *AgreementUpdate {
	au.mutation.ClearURL()
	return au
}

// Mutation returns the AgreementMutation object of the builder.
func (au *AgreementUpdate) Mutation() *AgreementMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgreementUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgreementUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgreementUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgreementUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AgreementUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if agreement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agreement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agreement.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AgreementUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AgreementUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AgreementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(agreement.Table, agreement.Columns, sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(agreement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(agreement.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(agreement.FieldDeletedAt, field.TypeTime)
	}
	if au.mutation.CreatorCleared() {
		_spec.ClearField(agreement.FieldCreator, field.TypeJSON)
	}
	if value, ok := au.mutation.LastModifier(); ok {
		_spec.SetField(agreement.FieldLastModifier, field.TypeJSON, value)
	}
	if au.mutation.LastModifierCleared() {
		_spec.ClearField(agreement.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.SetField(agreement.FieldRemark, field.TypeString, value)
	}
	if au.mutation.RemarkCleared() {
		_spec.ClearField(agreement.FieldRemark, field.TypeString)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(agreement.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.SetField(agreement.FieldContent, field.TypeString, value)
	}
	if value, ok := au.mutation.UserType(); ok {
		_spec.SetField(agreement.FieldUserType, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedUserType(); ok {
		_spec.AddField(agreement.FieldUserType, field.TypeUint8, value)
	}
	if value, ok := au.mutation.ForceReadTime(); ok {
		_spec.SetField(agreement.FieldForceReadTime, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedForceReadTime(); ok {
		_spec.AddField(agreement.FieldForceReadTime, field.TypeUint8, value)
	}
	if value, ok := au.mutation.IsDefault(); ok {
		_spec.SetField(agreement.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := au.mutation.Hash(); ok {
		_spec.SetField(agreement.FieldHash, field.TypeString, value)
	}
	if au.mutation.HashCleared() {
		_spec.ClearField(agreement.FieldHash, field.TypeString)
	}
	if value, ok := au.mutation.URL(); ok {
		_spec.SetField(agreement.FieldURL, field.TypeString, value)
	}
	if au.mutation.URLCleared() {
		_spec.ClearField(agreement.FieldURL, field.TypeString)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agreement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgreementUpdateOne is the builder for updating a single Agreement entity.
type AgreementUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AgreementMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AgreementUpdateOne) SetUpdatedAt(t time.Time) *AgreementUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AgreementUpdateOne) SetDeletedAt(t time.Time) *AgreementUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableDeletedAt(t *time.Time) *AgreementUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AgreementUpdateOne) ClearDeletedAt() *AgreementUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetLastModifier sets the "last_modifier" field.
func (auo *AgreementUpdateOne) SetLastModifier(m *model.Modifier) *AgreementUpdateOne {
	auo.mutation.SetLastModifier(m)
	return auo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (auo *AgreementUpdateOne) ClearLastModifier() *AgreementUpdateOne {
	auo.mutation.ClearLastModifier()
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AgreementUpdateOne) SetRemark(s string) *AgreementUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableRemark(s *string) *AgreementUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// ClearRemark clears the value of the "remark" field.
func (auo *AgreementUpdateOne) ClearRemark() *AgreementUpdateOne {
	auo.mutation.ClearRemark()
	return auo
}

// SetName sets the "name" field.
func (auo *AgreementUpdateOne) SetName(s string) *AgreementUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableName(s *string) *AgreementUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetContent sets the "content" field.
func (auo *AgreementUpdateOne) SetContent(s string) *AgreementUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableContent(s *string) *AgreementUpdateOne {
	if s != nil {
		auo.SetContent(*s)
	}
	return auo
}

// SetUserType sets the "user_type" field.
func (auo *AgreementUpdateOne) SetUserType(u uint8) *AgreementUpdateOne {
	auo.mutation.ResetUserType()
	auo.mutation.SetUserType(u)
	return auo
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableUserType(u *uint8) *AgreementUpdateOne {
	if u != nil {
		auo.SetUserType(*u)
	}
	return auo
}

// AddUserType adds u to the "user_type" field.
func (auo *AgreementUpdateOne) AddUserType(u int8) *AgreementUpdateOne {
	auo.mutation.AddUserType(u)
	return auo
}

// SetForceReadTime sets the "force_read_time" field.
func (auo *AgreementUpdateOne) SetForceReadTime(u uint8) *AgreementUpdateOne {
	auo.mutation.ResetForceReadTime()
	auo.mutation.SetForceReadTime(u)
	return auo
}

// SetNillableForceReadTime sets the "force_read_time" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableForceReadTime(u *uint8) *AgreementUpdateOne {
	if u != nil {
		auo.SetForceReadTime(*u)
	}
	return auo
}

// AddForceReadTime adds u to the "force_read_time" field.
func (auo *AgreementUpdateOne) AddForceReadTime(u int8) *AgreementUpdateOne {
	auo.mutation.AddForceReadTime(u)
	return auo
}

// SetIsDefault sets the "is_default" field.
func (auo *AgreementUpdateOne) SetIsDefault(b bool) *AgreementUpdateOne {
	auo.mutation.SetIsDefault(b)
	return auo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableIsDefault(b *bool) *AgreementUpdateOne {
	if b != nil {
		auo.SetIsDefault(*b)
	}
	return auo
}

// SetHash sets the "hash" field.
func (auo *AgreementUpdateOne) SetHash(s string) *AgreementUpdateOne {
	auo.mutation.SetHash(s)
	return auo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableHash(s *string) *AgreementUpdateOne {
	if s != nil {
		auo.SetHash(*s)
	}
	return auo
}

// ClearHash clears the value of the "hash" field.
func (auo *AgreementUpdateOne) ClearHash() *AgreementUpdateOne {
	auo.mutation.ClearHash()
	return auo
}

// SetURL sets the "url" field.
func (auo *AgreementUpdateOne) SetURL(s string) *AgreementUpdateOne {
	auo.mutation.SetURL(s)
	return auo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (auo *AgreementUpdateOne) SetNillableURL(s *string) *AgreementUpdateOne {
	if s != nil {
		auo.SetURL(*s)
	}
	return auo
}

// ClearURL clears the value of the "url" field.
func (auo *AgreementUpdateOne) ClearURL() *AgreementUpdateOne {
	auo.mutation.ClearURL()
	return auo
}

// Mutation returns the AgreementMutation object of the builder.
func (auo *AgreementUpdateOne) Mutation() *AgreementMutation {
	return auo.mutation
}

// Where appends a list predicates to the AgreementUpdate builder.
func (auo *AgreementUpdateOne) Where(ps ...predicate.Agreement) *AgreementUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgreementUpdateOne) Select(field string, fields ...string) *AgreementUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agreement entity.
func (auo *AgreementUpdateOne) Save(ctx context.Context) (*Agreement, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgreementUpdateOne) SaveX(ctx context.Context) *Agreement {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgreementUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgreementUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AgreementUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if agreement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agreement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agreement.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AgreementUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AgreementUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AgreementUpdateOne) sqlSave(ctx context.Context) (_node *Agreement, err error) {
	_spec := sqlgraph.NewUpdateSpec(agreement.Table, agreement.Columns, sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agreement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agreement.FieldID)
		for _, f := range fields {
			if !agreement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agreement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(agreement.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(agreement.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(agreement.FieldDeletedAt, field.TypeTime)
	}
	if auo.mutation.CreatorCleared() {
		_spec.ClearField(agreement.FieldCreator, field.TypeJSON)
	}
	if value, ok := auo.mutation.LastModifier(); ok {
		_spec.SetField(agreement.FieldLastModifier, field.TypeJSON, value)
	}
	if auo.mutation.LastModifierCleared() {
		_spec.ClearField(agreement.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.SetField(agreement.FieldRemark, field.TypeString, value)
	}
	if auo.mutation.RemarkCleared() {
		_spec.ClearField(agreement.FieldRemark, field.TypeString)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(agreement.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.SetField(agreement.FieldContent, field.TypeString, value)
	}
	if value, ok := auo.mutation.UserType(); ok {
		_spec.SetField(agreement.FieldUserType, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedUserType(); ok {
		_spec.AddField(agreement.FieldUserType, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.ForceReadTime(); ok {
		_spec.SetField(agreement.FieldForceReadTime, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedForceReadTime(); ok {
		_spec.AddField(agreement.FieldForceReadTime, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.IsDefault(); ok {
		_spec.SetField(agreement.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := auo.mutation.Hash(); ok {
		_spec.SetField(agreement.FieldHash, field.TypeString, value)
	}
	if auo.mutation.HashCleared() {
		_spec.ClearField(agreement.FieldHash, field.TypeString)
	}
	if value, ok := auo.mutation.URL(); ok {
		_spec.SetField(agreement.FieldURL, field.TypeString, value)
	}
	if auo.mutation.URLCleared() {
		_spec.ClearField(agreement.FieldURL, field.TypeString)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Agreement{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agreement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
