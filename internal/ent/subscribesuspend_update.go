// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"
)

// SubscribeSuspendUpdate is the builder for updating SubscribeSuspend entities.
type SubscribeSuspendUpdate struct {
	config
	hooks    []Hook
	mutation *SubscribeSuspendMutation
}

// Where appends a list predicates to the SubscribeSuspendUpdate builder.
func (ssu *SubscribeSuspendUpdate) Where(ps ...predicate.SubscribeSuspend) *SubscribeSuspendUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetLastModifier sets the "last_modifier" field.
func (ssu *SubscribeSuspendUpdate) SetLastModifier(m *model.Modifier) *SubscribeSuspendUpdate {
	ssu.mutation.SetLastModifier(m)
	return ssu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ssu *SubscribeSuspendUpdate) ClearLastModifier() *SubscribeSuspendUpdate {
	ssu.mutation.ClearLastModifier()
	return ssu
}

// SetRemark sets the "remark" field.
func (ssu *SubscribeSuspendUpdate) SetRemark(s string) *SubscribeSuspendUpdate {
	ssu.mutation.SetRemark(s)
	return ssu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ssu *SubscribeSuspendUpdate) SetNillableRemark(s *string) *SubscribeSuspendUpdate {
	if s != nil {
		ssu.SetRemark(*s)
	}
	return ssu
}

// ClearRemark clears the value of the "remark" field.
func (ssu *SubscribeSuspendUpdate) ClearRemark() *SubscribeSuspendUpdate {
	ssu.mutation.ClearRemark()
	return ssu
}

// SetCityID sets the "city_id" field.
func (ssu *SubscribeSuspendUpdate) SetCityID(u uint64) *SubscribeSuspendUpdate {
	ssu.mutation.SetCityID(u)
	return ssu
}

// SetRiderID sets the "rider_id" field.
func (ssu *SubscribeSuspendUpdate) SetRiderID(u uint64) *SubscribeSuspendUpdate {
	ssu.mutation.SetRiderID(u)
	return ssu
}

// SetSubscribeID sets the "subscribe_id" field.
func (ssu *SubscribeSuspendUpdate) SetSubscribeID(u uint64) *SubscribeSuspendUpdate {
	ssu.mutation.SetSubscribeID(u)
	return ssu
}

// SetDays sets the "days" field.
func (ssu *SubscribeSuspendUpdate) SetDays(i int) *SubscribeSuspendUpdate {
	ssu.mutation.ResetDays()
	ssu.mutation.SetDays(i)
	return ssu
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (ssu *SubscribeSuspendUpdate) SetNillableDays(i *int) *SubscribeSuspendUpdate {
	if i != nil {
		ssu.SetDays(*i)
	}
	return ssu
}

// AddDays adds i to the "days" field.
func (ssu *SubscribeSuspendUpdate) AddDays(i int) *SubscribeSuspendUpdate {
	ssu.mutation.AddDays(i)
	return ssu
}

// SetStartAt sets the "start_at" field.
func (ssu *SubscribeSuspendUpdate) SetStartAt(t time.Time) *SubscribeSuspendUpdate {
	ssu.mutation.SetStartAt(t)
	return ssu
}

// SetEndAt sets the "end_at" field.
func (ssu *SubscribeSuspendUpdate) SetEndAt(t time.Time) *SubscribeSuspendUpdate {
	ssu.mutation.SetEndAt(t)
	return ssu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ssu *SubscribeSuspendUpdate) SetNillableEndAt(t *time.Time) *SubscribeSuspendUpdate {
	if t != nil {
		ssu.SetEndAt(*t)
	}
	return ssu
}

// ClearEndAt clears the value of the "end_at" field.
func (ssu *SubscribeSuspendUpdate) ClearEndAt() *SubscribeSuspendUpdate {
	ssu.mutation.ClearEndAt()
	return ssu
}

// SetCity sets the "city" edge to the City entity.
func (ssu *SubscribeSuspendUpdate) SetCity(c *City) *SubscribeSuspendUpdate {
	return ssu.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ssu *SubscribeSuspendUpdate) SetRider(r *Rider) *SubscribeSuspendUpdate {
	return ssu.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ssu *SubscribeSuspendUpdate) SetSubscribe(s *Subscribe) *SubscribeSuspendUpdate {
	return ssu.SetSubscribeID(s.ID)
}

// Mutation returns the SubscribeSuspendMutation object of the builder.
func (ssu *SubscribeSuspendUpdate) Mutation() *SubscribeSuspendMutation {
	return ssu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (ssu *SubscribeSuspendUpdate) ClearCity() *SubscribeSuspendUpdate {
	ssu.mutation.ClearCity()
	return ssu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ssu *SubscribeSuspendUpdate) ClearRider() *SubscribeSuspendUpdate {
	ssu.mutation.ClearRider()
	return ssu
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (ssu *SubscribeSuspendUpdate) ClearSubscribe() *SubscribeSuspendUpdate {
	ssu.mutation.ClearSubscribe()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SubscribeSuspendUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ssu.hooks) == 0 {
		if err = ssu.check(); err != nil {
			return 0, err
		}
		affected, err = ssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribeSuspendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssu.check(); err != nil {
				return 0, err
			}
			ssu.mutation = mutation
			affected, err = ssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ssu.hooks) - 1; i >= 0; i-- {
			if ssu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SubscribeSuspendUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SubscribeSuspendUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SubscribeSuspendUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SubscribeSuspendUpdate) check() error {
	if _, ok := ssu.mutation.CityID(); ssu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeSuspend.city"`)
	}
	if _, ok := ssu.mutation.RiderID(); ssu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeSuspend.rider"`)
	}
	if _, ok := ssu.mutation.SubscribeID(); ssu.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeSuspend.subscribe"`)
	}
	return nil
}

func (ssu *SubscribeSuspendUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribesuspend.Table,
			Columns: subscribesuspend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribesuspend.FieldID,
			},
		},
	}
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ssu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribesuspend.FieldCreator,
		})
	}
	if value, ok := ssu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribesuspend.FieldLastModifier,
		})
	}
	if ssu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribesuspend.FieldLastModifier,
		})
	}
	if value, ok := ssu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribesuspend.FieldRemark,
		})
	}
	if ssu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: subscribesuspend.FieldRemark,
		})
	}
	if value, ok := ssu.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribesuspend.FieldDays,
		})
	}
	if value, ok := ssu.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribesuspend.FieldDays,
		})
	}
	if value, ok := ssu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribesuspend.FieldStartAt,
		})
	}
	if value, ok := ssu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribesuspend.FieldEndAt,
		})
	}
	if ssu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribesuspend.FieldEndAt,
		})
	}
	if ssu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.CityTable,
			Columns: []string{subscribesuspend.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.CityTable,
			Columns: []string{subscribesuspend.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.RiderTable,
			Columns: []string{subscribesuspend.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.RiderTable,
			Columns: []string{subscribesuspend.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribesuspend.SubscribeTable,
			Columns: []string{subscribesuspend.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribesuspend.SubscribeTable,
			Columns: []string{subscribesuspend.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribesuspend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SubscribeSuspendUpdateOne is the builder for updating a single SubscribeSuspend entity.
type SubscribeSuspendUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscribeSuspendMutation
}

// SetLastModifier sets the "last_modifier" field.
func (ssuo *SubscribeSuspendUpdateOne) SetLastModifier(m *model.Modifier) *SubscribeSuspendUpdateOne {
	ssuo.mutation.SetLastModifier(m)
	return ssuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ssuo *SubscribeSuspendUpdateOne) ClearLastModifier() *SubscribeSuspendUpdateOne {
	ssuo.mutation.ClearLastModifier()
	return ssuo
}

// SetRemark sets the "remark" field.
func (ssuo *SubscribeSuspendUpdateOne) SetRemark(s string) *SubscribeSuspendUpdateOne {
	ssuo.mutation.SetRemark(s)
	return ssuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ssuo *SubscribeSuspendUpdateOne) SetNillableRemark(s *string) *SubscribeSuspendUpdateOne {
	if s != nil {
		ssuo.SetRemark(*s)
	}
	return ssuo
}

// ClearRemark clears the value of the "remark" field.
func (ssuo *SubscribeSuspendUpdateOne) ClearRemark() *SubscribeSuspendUpdateOne {
	ssuo.mutation.ClearRemark()
	return ssuo
}

// SetCityID sets the "city_id" field.
func (ssuo *SubscribeSuspendUpdateOne) SetCityID(u uint64) *SubscribeSuspendUpdateOne {
	ssuo.mutation.SetCityID(u)
	return ssuo
}

// SetRiderID sets the "rider_id" field.
func (ssuo *SubscribeSuspendUpdateOne) SetRiderID(u uint64) *SubscribeSuspendUpdateOne {
	ssuo.mutation.SetRiderID(u)
	return ssuo
}

// SetSubscribeID sets the "subscribe_id" field.
func (ssuo *SubscribeSuspendUpdateOne) SetSubscribeID(u uint64) *SubscribeSuspendUpdateOne {
	ssuo.mutation.SetSubscribeID(u)
	return ssuo
}

// SetDays sets the "days" field.
func (ssuo *SubscribeSuspendUpdateOne) SetDays(i int) *SubscribeSuspendUpdateOne {
	ssuo.mutation.ResetDays()
	ssuo.mutation.SetDays(i)
	return ssuo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (ssuo *SubscribeSuspendUpdateOne) SetNillableDays(i *int) *SubscribeSuspendUpdateOne {
	if i != nil {
		ssuo.SetDays(*i)
	}
	return ssuo
}

// AddDays adds i to the "days" field.
func (ssuo *SubscribeSuspendUpdateOne) AddDays(i int) *SubscribeSuspendUpdateOne {
	ssuo.mutation.AddDays(i)
	return ssuo
}

// SetStartAt sets the "start_at" field.
func (ssuo *SubscribeSuspendUpdateOne) SetStartAt(t time.Time) *SubscribeSuspendUpdateOne {
	ssuo.mutation.SetStartAt(t)
	return ssuo
}

// SetEndAt sets the "end_at" field.
func (ssuo *SubscribeSuspendUpdateOne) SetEndAt(t time.Time) *SubscribeSuspendUpdateOne {
	ssuo.mutation.SetEndAt(t)
	return ssuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ssuo *SubscribeSuspendUpdateOne) SetNillableEndAt(t *time.Time) *SubscribeSuspendUpdateOne {
	if t != nil {
		ssuo.SetEndAt(*t)
	}
	return ssuo
}

// ClearEndAt clears the value of the "end_at" field.
func (ssuo *SubscribeSuspendUpdateOne) ClearEndAt() *SubscribeSuspendUpdateOne {
	ssuo.mutation.ClearEndAt()
	return ssuo
}

// SetCity sets the "city" edge to the City entity.
func (ssuo *SubscribeSuspendUpdateOne) SetCity(c *City) *SubscribeSuspendUpdateOne {
	return ssuo.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ssuo *SubscribeSuspendUpdateOne) SetRider(r *Rider) *SubscribeSuspendUpdateOne {
	return ssuo.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ssuo *SubscribeSuspendUpdateOne) SetSubscribe(s *Subscribe) *SubscribeSuspendUpdateOne {
	return ssuo.SetSubscribeID(s.ID)
}

// Mutation returns the SubscribeSuspendMutation object of the builder.
func (ssuo *SubscribeSuspendUpdateOne) Mutation() *SubscribeSuspendMutation {
	return ssuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (ssuo *SubscribeSuspendUpdateOne) ClearCity() *SubscribeSuspendUpdateOne {
	ssuo.mutation.ClearCity()
	return ssuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ssuo *SubscribeSuspendUpdateOne) ClearRider() *SubscribeSuspendUpdateOne {
	ssuo.mutation.ClearRider()
	return ssuo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (ssuo *SubscribeSuspendUpdateOne) ClearSubscribe() *SubscribeSuspendUpdateOne {
	ssuo.mutation.ClearSubscribe()
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SubscribeSuspendUpdateOne) Select(field string, fields ...string) *SubscribeSuspendUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SubscribeSuspend entity.
func (ssuo *SubscribeSuspendUpdateOne) Save(ctx context.Context) (*SubscribeSuspend, error) {
	var (
		err  error
		node *SubscribeSuspend
	)
	if len(ssuo.hooks) == 0 {
		if err = ssuo.check(); err != nil {
			return nil, err
		}
		node, err = ssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribeSuspendMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssuo.check(); err != nil {
				return nil, err
			}
			ssuo.mutation = mutation
			node, err = ssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ssuo.hooks) - 1; i >= 0; i-- {
			if ssuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ssuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubscribeSuspend)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubscribeSuspendMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SubscribeSuspendUpdateOne) SaveX(ctx context.Context) *SubscribeSuspend {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SubscribeSuspendUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SubscribeSuspendUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SubscribeSuspendUpdateOne) check() error {
	if _, ok := ssuo.mutation.CityID(); ssuo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeSuspend.city"`)
	}
	if _, ok := ssuo.mutation.RiderID(); ssuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeSuspend.rider"`)
	}
	if _, ok := ssuo.mutation.SubscribeID(); ssuo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeSuspend.subscribe"`)
	}
	return nil
}

func (ssuo *SubscribeSuspendUpdateOne) sqlSave(ctx context.Context) (_node *SubscribeSuspend, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribesuspend.Table,
			Columns: subscribesuspend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribesuspend.FieldID,
			},
		},
	}
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscribeSuspend.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribesuspend.FieldID)
		for _, f := range fields {
			if !subscribesuspend.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscribesuspend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ssuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribesuspend.FieldCreator,
		})
	}
	if value, ok := ssuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribesuspend.FieldLastModifier,
		})
	}
	if ssuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribesuspend.FieldLastModifier,
		})
	}
	if value, ok := ssuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribesuspend.FieldRemark,
		})
	}
	if ssuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: subscribesuspend.FieldRemark,
		})
	}
	if value, ok := ssuo.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribesuspend.FieldDays,
		})
	}
	if value, ok := ssuo.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribesuspend.FieldDays,
		})
	}
	if value, ok := ssuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribesuspend.FieldStartAt,
		})
	}
	if value, ok := ssuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribesuspend.FieldEndAt,
		})
	}
	if ssuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribesuspend.FieldEndAt,
		})
	}
	if ssuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.CityTable,
			Columns: []string{subscribesuspend.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.CityTable,
			Columns: []string{subscribesuspend.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.RiderTable,
			Columns: []string{subscribesuspend.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.RiderTable,
			Columns: []string{subscribesuspend.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribesuspend.SubscribeTable,
			Columns: []string{subscribesuspend.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribesuspend.SubscribeTable,
			Columns: []string{subscribesuspend.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscribeSuspend{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribesuspend.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
