// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionmembercommission"
	"github.com/auroraride/aurservd/internal/ent/promotionperson"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// PromotionMemberCreate is the builder for creating a PromotionMember entity.
type PromotionMemberCreate struct {
	config
	mutation *PromotionMemberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PromotionMemberCreate) SetCreatedAt(t time.Time) *PromotionMemberCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableCreatedAt(t *time.Time) *PromotionMemberCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetUpdatedAt sets the "updated_at" field.
func (pmc *PromotionMemberCreate) SetUpdatedAt(t time.Time) *PromotionMemberCreate {
	pmc.mutation.SetUpdatedAt(t)
	return pmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableUpdatedAt(t *time.Time) *PromotionMemberCreate {
	if t != nil {
		pmc.SetUpdatedAt(*t)
	}
	return pmc
}

// SetDeletedAt sets the "deleted_at" field.
func (pmc *PromotionMemberCreate) SetDeletedAt(t time.Time) *PromotionMemberCreate {
	pmc.mutation.SetDeletedAt(t)
	return pmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableDeletedAt(t *time.Time) *PromotionMemberCreate {
	if t != nil {
		pmc.SetDeletedAt(*t)
	}
	return pmc
}

// SetCreator sets the "creator" field.
func (pmc *PromotionMemberCreate) SetCreator(m *model.Modifier) *PromotionMemberCreate {
	pmc.mutation.SetCreator(m)
	return pmc
}

// SetLastModifier sets the "last_modifier" field.
func (pmc *PromotionMemberCreate) SetLastModifier(m *model.Modifier) *PromotionMemberCreate {
	pmc.mutation.SetLastModifier(m)
	return pmc
}

// SetRemark sets the "remark" field.
func (pmc *PromotionMemberCreate) SetRemark(s string) *PromotionMemberCreate {
	pmc.mutation.SetRemark(s)
	return pmc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableRemark(s *string) *PromotionMemberCreate {
	if s != nil {
		pmc.SetRemark(*s)
	}
	return pmc
}

// SetRiderID sets the "rider_id" field.
func (pmc *PromotionMemberCreate) SetRiderID(u uint64) *PromotionMemberCreate {
	pmc.mutation.SetRiderID(u)
	return pmc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableRiderID(u *uint64) *PromotionMemberCreate {
	if u != nil {
		pmc.SetRiderID(*u)
	}
	return pmc
}

// SetSubscribeID sets the "subscribe_id" field.
func (pmc *PromotionMemberCreate) SetSubscribeID(u uint64) *PromotionMemberCreate {
	pmc.mutation.SetSubscribeID(u)
	return pmc
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableSubscribeID(u *uint64) *PromotionMemberCreate {
	if u != nil {
		pmc.SetSubscribeID(*u)
	}
	return pmc
}

// SetLevelID sets the "level_id" field.
func (pmc *PromotionMemberCreate) SetLevelID(u uint64) *PromotionMemberCreate {
	pmc.mutation.SetLevelID(u)
	return pmc
}

// SetNillableLevelID sets the "level_id" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableLevelID(u *uint64) *PromotionMemberCreate {
	if u != nil {
		pmc.SetLevelID(*u)
	}
	return pmc
}

// SetPhone sets the "phone" field.
func (pmc *PromotionMemberCreate) SetPhone(s string) *PromotionMemberCreate {
	pmc.mutation.SetPhone(s)
	return pmc
}

// SetName sets the "name" field.
func (pmc *PromotionMemberCreate) SetName(s string) *PromotionMemberCreate {
	pmc.mutation.SetName(s)
	return pmc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableName(s *string) *PromotionMemberCreate {
	if s != nil {
		pmc.SetName(*s)
	}
	return pmc
}

// SetBalance sets the "balance" field.
func (pmc *PromotionMemberCreate) SetBalance(f float64) *PromotionMemberCreate {
	pmc.mutation.SetBalance(f)
	return pmc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableBalance(f *float64) *PromotionMemberCreate {
	if f != nil {
		pmc.SetBalance(*f)
	}
	return pmc
}

// SetFrozen sets the "frozen" field.
func (pmc *PromotionMemberCreate) SetFrozen(f float64) *PromotionMemberCreate {
	pmc.mutation.SetFrozen(f)
	return pmc
}

// SetNillableFrozen sets the "frozen" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableFrozen(f *float64) *PromotionMemberCreate {
	if f != nil {
		pmc.SetFrozen(*f)
	}
	return pmc
}

// SetTotalGrowthValue sets the "total_growth_value" field.
func (pmc *PromotionMemberCreate) SetTotalGrowthValue(u uint64) *PromotionMemberCreate {
	pmc.mutation.SetTotalGrowthValue(u)
	return pmc
}

// SetNillableTotalGrowthValue sets the "total_growth_value" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableTotalGrowthValue(u *uint64) *PromotionMemberCreate {
	if u != nil {
		pmc.SetTotalGrowthValue(*u)
	}
	return pmc
}

// SetCurrentGrowthValue sets the "current_growth_value" field.
func (pmc *PromotionMemberCreate) SetCurrentGrowthValue(u uint64) *PromotionMemberCreate {
	pmc.mutation.SetCurrentGrowthValue(u)
	return pmc
}

// SetNillableCurrentGrowthValue sets the "current_growth_value" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableCurrentGrowthValue(u *uint64) *PromotionMemberCreate {
	if u != nil {
		pmc.SetCurrentGrowthValue(*u)
	}
	return pmc
}

// SetEnable sets the "enable" field.
func (pmc *PromotionMemberCreate) SetEnable(b bool) *PromotionMemberCreate {
	pmc.mutation.SetEnable(b)
	return pmc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableEnable(b *bool) *PromotionMemberCreate {
	if b != nil {
		pmc.SetEnable(*b)
	}
	return pmc
}

// SetPersonID sets the "person_id" field.
func (pmc *PromotionMemberCreate) SetPersonID(u uint64) *PromotionMemberCreate {
	pmc.mutation.SetPersonID(u)
	return pmc
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillablePersonID(u *uint64) *PromotionMemberCreate {
	if u != nil {
		pmc.SetPersonID(*u)
	}
	return pmc
}

// SetAvatarURL sets the "avatar_url" field.
func (pmc *PromotionMemberCreate) SetAvatarURL(s string) *PromotionMemberCreate {
	pmc.mutation.SetAvatarURL(s)
	return pmc
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableAvatarURL(s *string) *PromotionMemberCreate {
	if s != nil {
		pmc.SetAvatarURL(*s)
	}
	return pmc
}

// SetNewSignCount sets the "new_sign_count" field.
func (pmc *PromotionMemberCreate) SetNewSignCount(u uint64) *PromotionMemberCreate {
	pmc.mutation.SetNewSignCount(u)
	return pmc
}

// SetNillableNewSignCount sets the "new_sign_count" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableNewSignCount(u *uint64) *PromotionMemberCreate {
	if u != nil {
		pmc.SetNewSignCount(*u)
	}
	return pmc
}

// SetRenewCount sets the "renew_count" field.
func (pmc *PromotionMemberCreate) SetRenewCount(u uint64) *PromotionMemberCreate {
	pmc.mutation.SetRenewCount(u)
	return pmc
}

// SetNillableRenewCount sets the "renew_count" field if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableRenewCount(u *uint64) *PromotionMemberCreate {
	if u != nil {
		pmc.SetRenewCount(*u)
	}
	return pmc
}

// SetRider sets the "rider" edge to the Rider entity.
func (pmc *PromotionMemberCreate) SetRider(r *Rider) *PromotionMemberCreate {
	return pmc.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (pmc *PromotionMemberCreate) SetSubscribe(s *Subscribe) *PromotionMemberCreate {
	return pmc.SetSubscribeID(s.ID)
}

// SetLevel sets the "level" edge to the PromotionLevel entity.
func (pmc *PromotionMemberCreate) SetLevel(p *PromotionLevel) *PromotionMemberCreate {
	return pmc.SetLevelID(p.ID)
}

// AddReferringIDs adds the "referring" edge to the PromotionReferrals entity by IDs.
func (pmc *PromotionMemberCreate) AddReferringIDs(ids ...uint64) *PromotionMemberCreate {
	pmc.mutation.AddReferringIDs(ids...)
	return pmc
}

// AddReferring adds the "referring" edges to the PromotionReferrals entity.
func (pmc *PromotionMemberCreate) AddReferring(p ...*PromotionReferrals) *PromotionMemberCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmc.AddReferringIDs(ids...)
}

// SetReferredID sets the "referred" edge to the PromotionReferrals entity by ID.
func (pmc *PromotionMemberCreate) SetReferredID(id uint64) *PromotionMemberCreate {
	pmc.mutation.SetReferredID(id)
	return pmc
}

// SetNillableReferredID sets the "referred" edge to the PromotionReferrals entity by ID if the given value is not nil.
func (pmc *PromotionMemberCreate) SetNillableReferredID(id *uint64) *PromotionMemberCreate {
	if id != nil {
		pmc = pmc.SetReferredID(*id)
	}
	return pmc
}

// SetReferred sets the "referred" edge to the PromotionReferrals entity.
func (pmc *PromotionMemberCreate) SetReferred(p *PromotionReferrals) *PromotionMemberCreate {
	return pmc.SetReferredID(p.ID)
}

// SetPerson sets the "person" edge to the PromotionPerson entity.
func (pmc *PromotionMemberCreate) SetPerson(p *PromotionPerson) *PromotionMemberCreate {
	return pmc.SetPersonID(p.ID)
}

// AddCardIDs adds the "cards" edge to the PromotionBankCard entity by IDs.
func (pmc *PromotionMemberCreate) AddCardIDs(ids ...uint64) *PromotionMemberCreate {
	pmc.mutation.AddCardIDs(ids...)
	return pmc
}

// AddCards adds the "cards" edges to the PromotionBankCard entity.
func (pmc *PromotionMemberCreate) AddCards(p ...*PromotionBankCard) *PromotionMemberCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmc.AddCardIDs(ids...)
}

// AddCommissionIDs adds the "commissions" edge to the PromotionMemberCommission entity by IDs.
func (pmc *PromotionMemberCreate) AddCommissionIDs(ids ...uint64) *PromotionMemberCreate {
	pmc.mutation.AddCommissionIDs(ids...)
	return pmc
}

// AddCommissions adds the "commissions" edges to the PromotionMemberCommission entity.
func (pmc *PromotionMemberCreate) AddCommissions(p ...*PromotionMemberCommission) *PromotionMemberCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmc.AddCommissionIDs(ids...)
}

// Mutation returns the PromotionMemberMutation object of the builder.
func (pmc *PromotionMemberCreate) Mutation() *PromotionMemberMutation {
	return pmc.mutation
}

// Save creates the PromotionMember in the database.
func (pmc *PromotionMemberCreate) Save(ctx context.Context) (*PromotionMember, error) {
	if err := pmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pmc.sqlSave, pmc.mutation, pmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PromotionMemberCreate) SaveX(ctx context.Context) *PromotionMember {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PromotionMemberCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PromotionMemberCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PromotionMemberCreate) defaults() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		if promotionmember.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionmember.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionmember.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		if promotionmember.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionmember.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionmember.DefaultUpdatedAt()
		pmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pmc.mutation.Balance(); !ok {
		v := promotionmember.DefaultBalance
		pmc.mutation.SetBalance(v)
	}
	if _, ok := pmc.mutation.Frozen(); !ok {
		v := promotionmember.DefaultFrozen
		pmc.mutation.SetFrozen(v)
	}
	if _, ok := pmc.mutation.TotalGrowthValue(); !ok {
		v := promotionmember.DefaultTotalGrowthValue
		pmc.mutation.SetTotalGrowthValue(v)
	}
	if _, ok := pmc.mutation.CurrentGrowthValue(); !ok {
		v := promotionmember.DefaultCurrentGrowthValue
		pmc.mutation.SetCurrentGrowthValue(v)
	}
	if _, ok := pmc.mutation.Enable(); !ok {
		v := promotionmember.DefaultEnable
		pmc.mutation.SetEnable(v)
	}
	if _, ok := pmc.mutation.NewSignCount(); !ok {
		v := promotionmember.DefaultNewSignCount
		pmc.mutation.SetNewSignCount(v)
	}
	if _, ok := pmc.mutation.RenewCount(); !ok {
		v := promotionmember.DefaultRenewCount
		pmc.mutation.SetRenewCount(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PromotionMemberCreate) check() error {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionMember.created_at"`)}
	}
	if _, ok := pmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionMember.updated_at"`)}
	}
	if _, ok := pmc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "PromotionMember.phone"`)}
	}
	if _, ok := pmc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "PromotionMember.balance"`)}
	}
	if _, ok := pmc.mutation.Frozen(); !ok {
		return &ValidationError{Name: "frozen", err: errors.New(`ent: missing required field "PromotionMember.frozen"`)}
	}
	if _, ok := pmc.mutation.TotalGrowthValue(); !ok {
		return &ValidationError{Name: "total_growth_value", err: errors.New(`ent: missing required field "PromotionMember.total_growth_value"`)}
	}
	if _, ok := pmc.mutation.CurrentGrowthValue(); !ok {
		return &ValidationError{Name: "current_growth_value", err: errors.New(`ent: missing required field "PromotionMember.current_growth_value"`)}
	}
	if _, ok := pmc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "PromotionMember.enable"`)}
	}
	if _, ok := pmc.mutation.NewSignCount(); !ok {
		return &ValidationError{Name: "new_sign_count", err: errors.New(`ent: missing required field "PromotionMember.new_sign_count"`)}
	}
	if _, ok := pmc.mutation.RenewCount(); !ok {
		return &ValidationError{Name: "renew_count", err: errors.New(`ent: missing required field "PromotionMember.renew_count"`)}
	}
	return nil
}

func (pmc *PromotionMemberCreate) sqlSave(ctx context.Context) (*PromotionMember, error) {
	if err := pmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pmc.mutation.id = &_node.ID
	pmc.mutation.done = true
	return _node, nil
}

func (pmc *PromotionMemberCreate) createSpec() (*PromotionMember, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionMember{config: pmc.config}
		_spec = sqlgraph.NewCreateSpec(promotionmember.Table, sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pmc.conflict
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionmember.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pmc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionmember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pmc.mutation.DeletedAt(); ok {
		_spec.SetField(promotionmember.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pmc.mutation.Creator(); ok {
		_spec.SetField(promotionmember.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pmc.mutation.LastModifier(); ok {
		_spec.SetField(promotionmember.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pmc.mutation.Remark(); ok {
		_spec.SetField(promotionmember.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pmc.mutation.Phone(); ok {
		_spec.SetField(promotionmember.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := pmc.mutation.Name(); ok {
		_spec.SetField(promotionmember.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pmc.mutation.Balance(); ok {
		_spec.SetField(promotionmember.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := pmc.mutation.Frozen(); ok {
		_spec.SetField(promotionmember.FieldFrozen, field.TypeFloat64, value)
		_node.Frozen = value
	}
	if value, ok := pmc.mutation.TotalGrowthValue(); ok {
		_spec.SetField(promotionmember.FieldTotalGrowthValue, field.TypeUint64, value)
		_node.TotalGrowthValue = value
	}
	if value, ok := pmc.mutation.CurrentGrowthValue(); ok {
		_spec.SetField(promotionmember.FieldCurrentGrowthValue, field.TypeUint64, value)
		_node.CurrentGrowthValue = value
	}
	if value, ok := pmc.mutation.Enable(); ok {
		_spec.SetField(promotionmember.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := pmc.mutation.AvatarURL(); ok {
		_spec.SetField(promotionmember.FieldAvatarURL, field.TypeString, value)
		_node.AvatarURL = value
	}
	if value, ok := pmc.mutation.NewSignCount(); ok {
		_spec.SetField(promotionmember.FieldNewSignCount, field.TypeUint64, value)
		_node.NewSignCount = value
	}
	if value, ok := pmc.mutation.RenewCount(); ok {
		_spec.SetField(promotionmember.FieldRenewCount, field.TypeUint64, value)
		_node.RenewCount = value
	}
	if nodes := pmc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.RiderTable,
			Columns: []string{promotionmember.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.SubscribeTable,
			Columns: []string{promotionmember.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.LevelTable,
			Columns: []string{promotionmember.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LevelID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.ReferringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.ReferringTable,
			Columns: []string{promotionmember.ReferringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.ReferredIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promotionmember.ReferredTable,
			Columns: []string{promotionmember.ReferredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmember.PersonTable,
			Columns: []string{promotionmember.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionperson.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PersonID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CardsTable,
			Columns: []string{promotionmember.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.CommissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CommissionsTable,
			Columns: []string{promotionmember.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionMember.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionMemberUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmc *PromotionMemberCreate) OnConflict(opts ...sql.ConflictOption) *PromotionMemberUpsertOne {
	pmc.conflict = opts
	return &PromotionMemberUpsertOne{
		create: pmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmc *PromotionMemberCreate) OnConflictColumns(columns ...string) *PromotionMemberUpsertOne {
	pmc.conflict = append(pmc.conflict, sql.ConflictColumns(columns...))
	return &PromotionMemberUpsertOne{
		create: pmc,
	}
}

type (
	// PromotionMemberUpsertOne is the builder for "upsert"-ing
	//  one PromotionMember node.
	PromotionMemberUpsertOne struct {
		create *PromotionMemberCreate
	}

	// PromotionMemberUpsert is the "OnConflict" setter.
	PromotionMemberUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionMemberUpsert) SetUpdatedAt(v time.Time) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateUpdatedAt() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionMemberUpsert) SetDeletedAt(v time.Time) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateDeletedAt() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionMemberUpsert) ClearDeletedAt() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionMemberUpsert) SetLastModifier(v *model.Modifier) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateLastModifier() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionMemberUpsert) ClearLastModifier() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionMemberUpsert) SetRemark(v string) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateRemark() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionMemberUpsert) ClearRemark() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionMemberUpsert) SetRiderID(v uint64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateRiderID() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionMemberUpsert) ClearRiderID() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldRiderID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *PromotionMemberUpsert) SetSubscribeID(v uint64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateSubscribeID() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldSubscribeID)
	return u
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *PromotionMemberUpsert) ClearSubscribeID() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldSubscribeID)
	return u
}

// SetLevelID sets the "level_id" field.
func (u *PromotionMemberUpsert) SetLevelID(v uint64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldLevelID, v)
	return u
}

// UpdateLevelID sets the "level_id" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateLevelID() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldLevelID)
	return u
}

// ClearLevelID clears the value of the "level_id" field.
func (u *PromotionMemberUpsert) ClearLevelID() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldLevelID)
	return u
}

// SetPhone sets the "phone" field.
func (u *PromotionMemberUpsert) SetPhone(v string) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdatePhone() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldPhone)
	return u
}

// SetName sets the "name" field.
func (u *PromotionMemberUpsert) SetName(v string) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateName() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PromotionMemberUpsert) ClearName() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldName)
	return u
}

// SetBalance sets the "balance" field.
func (u *PromotionMemberUpsert) SetBalance(v float64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateBalance() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *PromotionMemberUpsert) AddBalance(v float64) *PromotionMemberUpsert {
	u.Add(promotionmember.FieldBalance, v)
	return u
}

// SetFrozen sets the "frozen" field.
func (u *PromotionMemberUpsert) SetFrozen(v float64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldFrozen, v)
	return u
}

// UpdateFrozen sets the "frozen" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateFrozen() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldFrozen)
	return u
}

// AddFrozen adds v to the "frozen" field.
func (u *PromotionMemberUpsert) AddFrozen(v float64) *PromotionMemberUpsert {
	u.Add(promotionmember.FieldFrozen, v)
	return u
}

// SetTotalGrowthValue sets the "total_growth_value" field.
func (u *PromotionMemberUpsert) SetTotalGrowthValue(v uint64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldTotalGrowthValue, v)
	return u
}

// UpdateTotalGrowthValue sets the "total_growth_value" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateTotalGrowthValue() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldTotalGrowthValue)
	return u
}

// AddTotalGrowthValue adds v to the "total_growth_value" field.
func (u *PromotionMemberUpsert) AddTotalGrowthValue(v uint64) *PromotionMemberUpsert {
	u.Add(promotionmember.FieldTotalGrowthValue, v)
	return u
}

// SetCurrentGrowthValue sets the "current_growth_value" field.
func (u *PromotionMemberUpsert) SetCurrentGrowthValue(v uint64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldCurrentGrowthValue, v)
	return u
}

// UpdateCurrentGrowthValue sets the "current_growth_value" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateCurrentGrowthValue() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldCurrentGrowthValue)
	return u
}

// AddCurrentGrowthValue adds v to the "current_growth_value" field.
func (u *PromotionMemberUpsert) AddCurrentGrowthValue(v uint64) *PromotionMemberUpsert {
	u.Add(promotionmember.FieldCurrentGrowthValue, v)
	return u
}

// SetEnable sets the "enable" field.
func (u *PromotionMemberUpsert) SetEnable(v bool) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateEnable() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldEnable)
	return u
}

// SetPersonID sets the "person_id" field.
func (u *PromotionMemberUpsert) SetPersonID(v uint64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldPersonID, v)
	return u
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdatePersonID() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldPersonID)
	return u
}

// ClearPersonID clears the value of the "person_id" field.
func (u *PromotionMemberUpsert) ClearPersonID() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldPersonID)
	return u
}

// SetAvatarURL sets the "avatar_url" field.
func (u *PromotionMemberUpsert) SetAvatarURL(v string) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldAvatarURL, v)
	return u
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateAvatarURL() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldAvatarURL)
	return u
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *PromotionMemberUpsert) ClearAvatarURL() *PromotionMemberUpsert {
	u.SetNull(promotionmember.FieldAvatarURL)
	return u
}

// SetNewSignCount sets the "new_sign_count" field.
func (u *PromotionMemberUpsert) SetNewSignCount(v uint64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldNewSignCount, v)
	return u
}

// UpdateNewSignCount sets the "new_sign_count" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateNewSignCount() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldNewSignCount)
	return u
}

// AddNewSignCount adds v to the "new_sign_count" field.
func (u *PromotionMemberUpsert) AddNewSignCount(v uint64) *PromotionMemberUpsert {
	u.Add(promotionmember.FieldNewSignCount, v)
	return u
}

// SetRenewCount sets the "renew_count" field.
func (u *PromotionMemberUpsert) SetRenewCount(v uint64) *PromotionMemberUpsert {
	u.Set(promotionmember.FieldRenewCount, v)
	return u
}

// UpdateRenewCount sets the "renew_count" field to the value that was provided on create.
func (u *PromotionMemberUpsert) UpdateRenewCount() *PromotionMemberUpsert {
	u.SetExcluded(promotionmember.FieldRenewCount)
	return u
}

// AddRenewCount adds v to the "renew_count" field.
func (u *PromotionMemberUpsert) AddRenewCount(v uint64) *PromotionMemberUpsert {
	u.Add(promotionmember.FieldRenewCount, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionMemberUpsertOne) UpdateNewValues() *PromotionMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionmember.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionmember.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionMember.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionMemberUpsertOne) Ignore() *PromotionMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionMemberUpsertOne) DoNothing() *PromotionMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionMemberCreate.OnConflict
// documentation for more info.
func (u *PromotionMemberUpsertOne) Update(set func(*PromotionMemberUpsert)) *PromotionMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionMemberUpsertOne) SetUpdatedAt(v time.Time) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateUpdatedAt() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionMemberUpsertOne) SetDeletedAt(v time.Time) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateDeletedAt() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionMemberUpsertOne) ClearDeletedAt() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionMemberUpsertOne) SetLastModifier(v *model.Modifier) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateLastModifier() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionMemberUpsertOne) ClearLastModifier() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionMemberUpsertOne) SetRemark(v string) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateRemark() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionMemberUpsertOne) ClearRemark() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionMemberUpsertOne) SetRiderID(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateRiderID() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionMemberUpsertOne) ClearRiderID() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *PromotionMemberUpsertOne) SetSubscribeID(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateSubscribeID() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *PromotionMemberUpsertOne) ClearSubscribeID() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearSubscribeID()
	})
}

// SetLevelID sets the "level_id" field.
func (u *PromotionMemberUpsertOne) SetLevelID(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetLevelID(v)
	})
}

// UpdateLevelID sets the "level_id" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateLevelID() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateLevelID()
	})
}

// ClearLevelID clears the value of the "level_id" field.
func (u *PromotionMemberUpsertOne) ClearLevelID() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearLevelID()
	})
}

// SetPhone sets the "phone" field.
func (u *PromotionMemberUpsertOne) SetPhone(v string) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdatePhone() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdatePhone()
	})
}

// SetName sets the "name" field.
func (u *PromotionMemberUpsertOne) SetName(v string) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateName() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PromotionMemberUpsertOne) ClearName() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearName()
	})
}

// SetBalance sets the "balance" field.
func (u *PromotionMemberUpsertOne) SetBalance(v float64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *PromotionMemberUpsertOne) AddBalance(v float64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateBalance() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateBalance()
	})
}

// SetFrozen sets the "frozen" field.
func (u *PromotionMemberUpsertOne) SetFrozen(v float64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetFrozen(v)
	})
}

// AddFrozen adds v to the "frozen" field.
func (u *PromotionMemberUpsertOne) AddFrozen(v float64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddFrozen(v)
	})
}

// UpdateFrozen sets the "frozen" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateFrozen() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateFrozen()
	})
}

// SetTotalGrowthValue sets the "total_growth_value" field.
func (u *PromotionMemberUpsertOne) SetTotalGrowthValue(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetTotalGrowthValue(v)
	})
}

// AddTotalGrowthValue adds v to the "total_growth_value" field.
func (u *PromotionMemberUpsertOne) AddTotalGrowthValue(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddTotalGrowthValue(v)
	})
}

// UpdateTotalGrowthValue sets the "total_growth_value" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateTotalGrowthValue() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateTotalGrowthValue()
	})
}

// SetCurrentGrowthValue sets the "current_growth_value" field.
func (u *PromotionMemberUpsertOne) SetCurrentGrowthValue(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetCurrentGrowthValue(v)
	})
}

// AddCurrentGrowthValue adds v to the "current_growth_value" field.
func (u *PromotionMemberUpsertOne) AddCurrentGrowthValue(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddCurrentGrowthValue(v)
	})
}

// UpdateCurrentGrowthValue sets the "current_growth_value" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateCurrentGrowthValue() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateCurrentGrowthValue()
	})
}

// SetEnable sets the "enable" field.
func (u *PromotionMemberUpsertOne) SetEnable(v bool) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateEnable() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateEnable()
	})
}

// SetPersonID sets the "person_id" field.
func (u *PromotionMemberUpsertOne) SetPersonID(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetPersonID(v)
	})
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdatePersonID() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdatePersonID()
	})
}

// ClearPersonID clears the value of the "person_id" field.
func (u *PromotionMemberUpsertOne) ClearPersonID() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearPersonID()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *PromotionMemberUpsertOne) SetAvatarURL(v string) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateAvatarURL() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateAvatarURL()
	})
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *PromotionMemberUpsertOne) ClearAvatarURL() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearAvatarURL()
	})
}

// SetNewSignCount sets the "new_sign_count" field.
func (u *PromotionMemberUpsertOne) SetNewSignCount(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetNewSignCount(v)
	})
}

// AddNewSignCount adds v to the "new_sign_count" field.
func (u *PromotionMemberUpsertOne) AddNewSignCount(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddNewSignCount(v)
	})
}

// UpdateNewSignCount sets the "new_sign_count" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateNewSignCount() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateNewSignCount()
	})
}

// SetRenewCount sets the "renew_count" field.
func (u *PromotionMemberUpsertOne) SetRenewCount(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetRenewCount(v)
	})
}

// AddRenewCount adds v to the "renew_count" field.
func (u *PromotionMemberUpsertOne) AddRenewCount(v uint64) *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddRenewCount(v)
	})
}

// UpdateRenewCount sets the "renew_count" field to the value that was provided on create.
func (u *PromotionMemberUpsertOne) UpdateRenewCount() *PromotionMemberUpsertOne {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateRenewCount()
	})
}

// Exec executes the query.
func (u *PromotionMemberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionMemberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionMemberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionMemberUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionMemberUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionMemberCreateBulk is the builder for creating many PromotionMember entities in bulk.
type PromotionMemberCreateBulk struct {
	config
	builders []*PromotionMemberCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionMember entities in the database.
func (pmcb *PromotionMemberCreateBulk) Save(ctx context.Context) ([]*PromotionMember, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PromotionMember, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PromotionMemberCreateBulk) SaveX(ctx context.Context) []*PromotionMember {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PromotionMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PromotionMemberCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionMember.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionMemberUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pmcb *PromotionMemberCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionMemberUpsertBulk {
	pmcb.conflict = opts
	return &PromotionMemberUpsertBulk{
		create: pmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pmcb *PromotionMemberCreateBulk) OnConflictColumns(columns ...string) *PromotionMemberUpsertBulk {
	pmcb.conflict = append(pmcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionMemberUpsertBulk{
		create: pmcb,
	}
}

// PromotionMemberUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionMember nodes.
type PromotionMemberUpsertBulk struct {
	create *PromotionMemberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionMemberUpsertBulk) UpdateNewValues() *PromotionMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionmember.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionmember.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionMember.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionMemberUpsertBulk) Ignore() *PromotionMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionMemberUpsertBulk) DoNothing() *PromotionMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionMemberCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionMemberUpsertBulk) Update(set func(*PromotionMemberUpsert)) *PromotionMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionMemberUpsertBulk) SetUpdatedAt(v time.Time) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateUpdatedAt() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionMemberUpsertBulk) SetDeletedAt(v time.Time) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateDeletedAt() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionMemberUpsertBulk) ClearDeletedAt() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionMemberUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateLastModifier() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionMemberUpsertBulk) ClearLastModifier() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionMemberUpsertBulk) SetRemark(v string) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateRemark() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionMemberUpsertBulk) ClearRemark() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionMemberUpsertBulk) SetRiderID(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateRiderID() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionMemberUpsertBulk) ClearRiderID() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *PromotionMemberUpsertBulk) SetSubscribeID(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateSubscribeID() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *PromotionMemberUpsertBulk) ClearSubscribeID() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearSubscribeID()
	})
}

// SetLevelID sets the "level_id" field.
func (u *PromotionMemberUpsertBulk) SetLevelID(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetLevelID(v)
	})
}

// UpdateLevelID sets the "level_id" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateLevelID() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateLevelID()
	})
}

// ClearLevelID clears the value of the "level_id" field.
func (u *PromotionMemberUpsertBulk) ClearLevelID() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearLevelID()
	})
}

// SetPhone sets the "phone" field.
func (u *PromotionMemberUpsertBulk) SetPhone(v string) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdatePhone() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdatePhone()
	})
}

// SetName sets the "name" field.
func (u *PromotionMemberUpsertBulk) SetName(v string) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateName() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PromotionMemberUpsertBulk) ClearName() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearName()
	})
}

// SetBalance sets the "balance" field.
func (u *PromotionMemberUpsertBulk) SetBalance(v float64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *PromotionMemberUpsertBulk) AddBalance(v float64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateBalance() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateBalance()
	})
}

// SetFrozen sets the "frozen" field.
func (u *PromotionMemberUpsertBulk) SetFrozen(v float64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetFrozen(v)
	})
}

// AddFrozen adds v to the "frozen" field.
func (u *PromotionMemberUpsertBulk) AddFrozen(v float64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddFrozen(v)
	})
}

// UpdateFrozen sets the "frozen" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateFrozen() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateFrozen()
	})
}

// SetTotalGrowthValue sets the "total_growth_value" field.
func (u *PromotionMemberUpsertBulk) SetTotalGrowthValue(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetTotalGrowthValue(v)
	})
}

// AddTotalGrowthValue adds v to the "total_growth_value" field.
func (u *PromotionMemberUpsertBulk) AddTotalGrowthValue(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddTotalGrowthValue(v)
	})
}

// UpdateTotalGrowthValue sets the "total_growth_value" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateTotalGrowthValue() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateTotalGrowthValue()
	})
}

// SetCurrentGrowthValue sets the "current_growth_value" field.
func (u *PromotionMemberUpsertBulk) SetCurrentGrowthValue(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetCurrentGrowthValue(v)
	})
}

// AddCurrentGrowthValue adds v to the "current_growth_value" field.
func (u *PromotionMemberUpsertBulk) AddCurrentGrowthValue(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddCurrentGrowthValue(v)
	})
}

// UpdateCurrentGrowthValue sets the "current_growth_value" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateCurrentGrowthValue() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateCurrentGrowthValue()
	})
}

// SetEnable sets the "enable" field.
func (u *PromotionMemberUpsertBulk) SetEnable(v bool) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateEnable() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateEnable()
	})
}

// SetPersonID sets the "person_id" field.
func (u *PromotionMemberUpsertBulk) SetPersonID(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetPersonID(v)
	})
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdatePersonID() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdatePersonID()
	})
}

// ClearPersonID clears the value of the "person_id" field.
func (u *PromotionMemberUpsertBulk) ClearPersonID() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearPersonID()
	})
}

// SetAvatarURL sets the "avatar_url" field.
func (u *PromotionMemberUpsertBulk) SetAvatarURL(v string) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetAvatarURL(v)
	})
}

// UpdateAvatarURL sets the "avatar_url" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateAvatarURL() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateAvatarURL()
	})
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (u *PromotionMemberUpsertBulk) ClearAvatarURL() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.ClearAvatarURL()
	})
}

// SetNewSignCount sets the "new_sign_count" field.
func (u *PromotionMemberUpsertBulk) SetNewSignCount(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetNewSignCount(v)
	})
}

// AddNewSignCount adds v to the "new_sign_count" field.
func (u *PromotionMemberUpsertBulk) AddNewSignCount(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddNewSignCount(v)
	})
}

// UpdateNewSignCount sets the "new_sign_count" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateNewSignCount() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateNewSignCount()
	})
}

// SetRenewCount sets the "renew_count" field.
func (u *PromotionMemberUpsertBulk) SetRenewCount(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.SetRenewCount(v)
	})
}

// AddRenewCount adds v to the "renew_count" field.
func (u *PromotionMemberUpsertBulk) AddRenewCount(v uint64) *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.AddRenewCount(v)
	})
}

// UpdateRenewCount sets the "renew_count" field to the value that was provided on create.
func (u *PromotionMemberUpsertBulk) UpdateRenewCount() *PromotionMemberUpsertBulk {
	return u.Update(func(s *PromotionMemberUpsert) {
		s.UpdateRenewCount()
	})
}

// Exec executes the query.
func (u *PromotionMemberUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionMemberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionMemberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionMemberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
