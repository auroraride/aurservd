// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenance"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenancedetails"
	"github.com/auroraride/aurservd/internal/ent/material"
)

// AssetMaintenanceDetails is the model entity for the AssetMaintenanceDetails schema.
type AssetMaintenanceDetails struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 物资ID
	MaterialID *uint64 `json:"material_id,omitempty"`
	// 资产ID
	AssetID uint64 `json:"asset_id,omitempty"`
	// 维修ID
	MaintenanceID uint64 `json:"maintenance_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetMaintenanceDetailsQuery when eager-loading is set.
	Edges        AssetMaintenanceDetailsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetMaintenanceDetailsEdges holds the relations/edges for other nodes in the graph.
type AssetMaintenanceDetailsEdges struct {
	// Material holds the value of the material edge.
	Material *Material `json:"material,omitempty"`
	// Asset holds the value of the asset edge.
	Asset *Asset `json:"asset,omitempty"`
	// Maintenance holds the value of the maintenance edge.
	Maintenance *AssetMaintenance `json:"maintenance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MaterialOrErr returns the Material value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetMaintenanceDetailsEdges) MaterialOrErr() (*Material, error) {
	if e.Material != nil {
		return e.Material, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: material.Label}
	}
	return nil, &NotLoadedError{edge: "material"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetMaintenanceDetailsEdges) AssetOrErr() (*Asset, error) {
	if e.Asset != nil {
		return e.Asset, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// MaintenanceOrErr returns the Maintenance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetMaintenanceDetailsEdges) MaintenanceOrErr() (*AssetMaintenance, error) {
	if e.Maintenance != nil {
		return e.Maintenance, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: assetmaintenance.Label}
	}
	return nil, &NotLoadedError{edge: "maintenance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetMaintenanceDetails) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetmaintenancedetails.FieldCreator, assetmaintenancedetails.FieldLastModifier:
			values[i] = new([]byte)
		case assetmaintenancedetails.FieldID, assetmaintenancedetails.FieldMaterialID, assetmaintenancedetails.FieldAssetID, assetmaintenancedetails.FieldMaintenanceID:
			values[i] = new(sql.NullInt64)
		case assetmaintenancedetails.FieldRemark:
			values[i] = new(sql.NullString)
		case assetmaintenancedetails.FieldCreatedAt, assetmaintenancedetails.FieldUpdatedAt, assetmaintenancedetails.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetMaintenanceDetails fields.
func (amd *AssetMaintenanceDetails) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetmaintenancedetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amd.ID = uint64(value.Int64)
		case assetmaintenancedetails.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				amd.CreatedAt = value.Time
			}
		case assetmaintenancedetails.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				amd.UpdatedAt = value.Time
			}
		case assetmaintenancedetails.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				amd.DeletedAt = new(time.Time)
				*amd.DeletedAt = value.Time
			}
		case assetmaintenancedetails.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &amd.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case assetmaintenancedetails.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &amd.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case assetmaintenancedetails.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				amd.Remark = value.String
			}
		case assetmaintenancedetails.FieldMaterialID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field material_id", values[i])
			} else if value.Valid {
				amd.MaterialID = new(uint64)
				*amd.MaterialID = uint64(value.Int64)
			}
		case assetmaintenancedetails.FieldAssetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_id", values[i])
			} else if value.Valid {
				amd.AssetID = uint64(value.Int64)
			}
		case assetmaintenancedetails.FieldMaintenanceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maintenance_id", values[i])
			} else if value.Valid {
				amd.MaintenanceID = uint64(value.Int64)
			}
		default:
			amd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetMaintenanceDetails.
// This includes values selected through modifiers, order, etc.
func (amd *AssetMaintenanceDetails) Value(name string) (ent.Value, error) {
	return amd.selectValues.Get(name)
}

// QueryMaterial queries the "material" edge of the AssetMaintenanceDetails entity.
func (amd *AssetMaintenanceDetails) QueryMaterial() *MaterialQuery {
	return NewAssetMaintenanceDetailsClient(amd.config).QueryMaterial(amd)
}

// QueryAsset queries the "asset" edge of the AssetMaintenanceDetails entity.
func (amd *AssetMaintenanceDetails) QueryAsset() *AssetQuery {
	return NewAssetMaintenanceDetailsClient(amd.config).QueryAsset(amd)
}

// QueryMaintenance queries the "maintenance" edge of the AssetMaintenanceDetails entity.
func (amd *AssetMaintenanceDetails) QueryMaintenance() *AssetMaintenanceQuery {
	return NewAssetMaintenanceDetailsClient(amd.config).QueryMaintenance(amd)
}

// Update returns a builder for updating this AssetMaintenanceDetails.
// Note that you need to call AssetMaintenanceDetails.Unwrap() before calling this method if this AssetMaintenanceDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (amd *AssetMaintenanceDetails) Update() *AssetMaintenanceDetailsUpdateOne {
	return NewAssetMaintenanceDetailsClient(amd.config).UpdateOne(amd)
}

// Unwrap unwraps the AssetMaintenanceDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amd *AssetMaintenanceDetails) Unwrap() *AssetMaintenanceDetails {
	_tx, ok := amd.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetMaintenanceDetails is not a transactional entity")
	}
	amd.config.driver = _tx.drv
	return amd
}

// String implements the fmt.Stringer.
func (amd *AssetMaintenanceDetails) String() string {
	var builder strings.Builder
	builder.WriteString("AssetMaintenanceDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", amd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(amd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(amd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := amd.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", amd.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", amd.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(amd.Remark)
	builder.WriteString(", ")
	if v := amd.MaterialID; v != nil {
		builder.WriteString("material_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("asset_id=")
	builder.WriteString(fmt.Sprintf("%v", amd.AssetID))
	builder.WriteString(", ")
	builder.WriteString("maintenance_id=")
	builder.WriteString(fmt.Sprintf("%v", amd.MaintenanceID))
	builder.WriteByte(')')
	return builder.String()
}

// AssetMaintenanceDetailsSlice is a parsable slice of AssetMaintenanceDetails.
type AssetMaintenanceDetailsSlice []*AssetMaintenanceDetails
