// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
)

// EnterpriseStationQuery is the builder for querying EnterpriseStation entities.
type EnterpriseStationQuery struct {
	config
	ctx                     *QueryContext
	order                   []enterprisestation.OrderOption
	inters                  []Interceptor
	predicates              []predicate.EnterpriseStation
	withCity                *CityQuery
	withEnterprise          *EnterpriseQuery
	withAgents              *AgentQuery
	withSwapPutinBatteries  *EnterpriseBatterySwapQuery
	withSwapPutoutBatteries *EnterpriseBatterySwapQuery
	withCabinets            *CabinetQuery
	withBatteries           *BatteryQuery
	withAsset               *AssetQuery
	withStocks              *StockQuery
	modifiers               []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnterpriseStationQuery builder.
func (esq *EnterpriseStationQuery) Where(ps ...predicate.EnterpriseStation) *EnterpriseStationQuery {
	esq.predicates = append(esq.predicates, ps...)
	return esq
}

// Limit the number of records to be returned by this query.
func (esq *EnterpriseStationQuery) Limit(limit int) *EnterpriseStationQuery {
	esq.ctx.Limit = &limit
	return esq
}

// Offset to start from.
func (esq *EnterpriseStationQuery) Offset(offset int) *EnterpriseStationQuery {
	esq.ctx.Offset = &offset
	return esq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (esq *EnterpriseStationQuery) Unique(unique bool) *EnterpriseStationQuery {
	esq.ctx.Unique = &unique
	return esq
}

// Order specifies how the records should be ordered.
func (esq *EnterpriseStationQuery) Order(o ...enterprisestation.OrderOption) *EnterpriseStationQuery {
	esq.order = append(esq.order, o...)
	return esq
}

// QueryCity chains the current query on the "city" edge.
func (esq *EnterpriseStationQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisestation.CityTable, enterprisestation.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (esq *EnterpriseStationQuery) QueryEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisestation.EnterpriseTable, enterprisestation.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAgents chains the current query on the "agents" edge.
func (esq *EnterpriseStationQuery) QueryAgents() *AgentQuery {
	query := (&AgentClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, enterprisestation.AgentsTable, enterprisestation.AgentsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySwapPutinBatteries chains the current query on the "swap_putin_batteries" edge.
func (esq *EnterpriseStationQuery) QuerySwapPutinBatteries() *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.SwapPutinBatteriesTable, enterprisestation.SwapPutinBatteriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySwapPutoutBatteries chains the current query on the "swap_putout_batteries" edge.
func (esq *EnterpriseStationQuery) QuerySwapPutoutBatteries() *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.SwapPutoutBatteriesTable, enterprisestation.SwapPutoutBatteriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinets chains the current query on the "cabinets" edge.
func (esq *EnterpriseStationQuery) QueryCabinets() *CabinetQuery {
	query := (&CabinetClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.CabinetsTable, enterprisestation.CabinetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBatteries chains the current query on the "batteries" edge.
func (esq *EnterpriseStationQuery) QueryBatteries() *BatteryQuery {
	query := (&BatteryClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.BatteriesTable, enterprisestation.BatteriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (esq *EnterpriseStationQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.AssetTable, enterprisestation.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStocks chains the current query on the "stocks" edge.
func (esq *EnterpriseStationQuery) QueryStocks() *StockQuery {
	query := (&StockClient{config: esq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisestation.Table, enterprisestation.FieldID, selector),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprisestation.StocksTable, enterprisestation.StocksColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EnterpriseStation entity from the query.
// Returns a *NotFoundError when no EnterpriseStation was found.
func (esq *EnterpriseStationQuery) First(ctx context.Context) (*EnterpriseStation, error) {
	nodes, err := esq.Limit(1).All(setContextOp(ctx, esq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enterprisestation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (esq *EnterpriseStationQuery) FirstX(ctx context.Context) *EnterpriseStation {
	node, err := esq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EnterpriseStation ID from the query.
// Returns a *NotFoundError when no EnterpriseStation ID was found.
func (esq *EnterpriseStationQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = esq.Limit(1).IDs(setContextOp(ctx, esq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enterprisestation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (esq *EnterpriseStationQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := esq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EnterpriseStation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EnterpriseStation entity is found.
// Returns a *NotFoundError when no EnterpriseStation entities are found.
func (esq *EnterpriseStationQuery) Only(ctx context.Context) (*EnterpriseStation, error) {
	nodes, err := esq.Limit(2).All(setContextOp(ctx, esq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enterprisestation.Label}
	default:
		return nil, &NotSingularError{enterprisestation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (esq *EnterpriseStationQuery) OnlyX(ctx context.Context) *EnterpriseStation {
	node, err := esq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EnterpriseStation ID in the query.
// Returns a *NotSingularError when more than one EnterpriseStation ID is found.
// Returns a *NotFoundError when no entities are found.
func (esq *EnterpriseStationQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = esq.Limit(2).IDs(setContextOp(ctx, esq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enterprisestation.Label}
	default:
		err = &NotSingularError{enterprisestation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (esq *EnterpriseStationQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := esq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EnterpriseStations.
func (esq *EnterpriseStationQuery) All(ctx context.Context) ([]*EnterpriseStation, error) {
	ctx = setContextOp(ctx, esq.ctx, "All")
	if err := esq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EnterpriseStation, *EnterpriseStationQuery]()
	return withInterceptors[[]*EnterpriseStation](ctx, esq, qr, esq.inters)
}

// AllX is like All, but panics if an error occurs.
func (esq *EnterpriseStationQuery) AllX(ctx context.Context) []*EnterpriseStation {
	nodes, err := esq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EnterpriseStation IDs.
func (esq *EnterpriseStationQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if esq.ctx.Unique == nil && esq.path != nil {
		esq.Unique(true)
	}
	ctx = setContextOp(ctx, esq.ctx, "IDs")
	if err = esq.Select(enterprisestation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (esq *EnterpriseStationQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := esq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (esq *EnterpriseStationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, esq.ctx, "Count")
	if err := esq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, esq, querierCount[*EnterpriseStationQuery](), esq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (esq *EnterpriseStationQuery) CountX(ctx context.Context) int {
	count, err := esq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (esq *EnterpriseStationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, esq.ctx, "Exist")
	switch _, err := esq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (esq *EnterpriseStationQuery) ExistX(ctx context.Context) bool {
	exist, err := esq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnterpriseStationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (esq *EnterpriseStationQuery) Clone() *EnterpriseStationQuery {
	if esq == nil {
		return nil
	}
	return &EnterpriseStationQuery{
		config:                  esq.config,
		ctx:                     esq.ctx.Clone(),
		order:                   append([]enterprisestation.OrderOption{}, esq.order...),
		inters:                  append([]Interceptor{}, esq.inters...),
		predicates:              append([]predicate.EnterpriseStation{}, esq.predicates...),
		withCity:                esq.withCity.Clone(),
		withEnterprise:          esq.withEnterprise.Clone(),
		withAgents:              esq.withAgents.Clone(),
		withSwapPutinBatteries:  esq.withSwapPutinBatteries.Clone(),
		withSwapPutoutBatteries: esq.withSwapPutoutBatteries.Clone(),
		withCabinets:            esq.withCabinets.Clone(),
		withBatteries:           esq.withBatteries.Clone(),
		withAsset:               esq.withAsset.Clone(),
		withStocks:              esq.withStocks.Clone(),
		// clone intermediate query.
		sql:  esq.sql.Clone(),
		path: esq.path,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithCity(opts ...func(*CityQuery)) *EnterpriseStationQuery {
	query := (&CityClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withCity = query
	return esq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *EnterpriseStationQuery {
	query := (&EnterpriseClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withEnterprise = query
	return esq
}

// WithAgents tells the query-builder to eager-load the nodes that are connected to
// the "agents" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithAgents(opts ...func(*AgentQuery)) *EnterpriseStationQuery {
	query := (&AgentClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withAgents = query
	return esq
}

// WithSwapPutinBatteries tells the query-builder to eager-load the nodes that are connected to
// the "swap_putin_batteries" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithSwapPutinBatteries(opts ...func(*EnterpriseBatterySwapQuery)) *EnterpriseStationQuery {
	query := (&EnterpriseBatterySwapClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withSwapPutinBatteries = query
	return esq
}

// WithSwapPutoutBatteries tells the query-builder to eager-load the nodes that are connected to
// the "swap_putout_batteries" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithSwapPutoutBatteries(opts ...func(*EnterpriseBatterySwapQuery)) *EnterpriseStationQuery {
	query := (&EnterpriseBatterySwapClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withSwapPutoutBatteries = query
	return esq
}

// WithCabinets tells the query-builder to eager-load the nodes that are connected to
// the "cabinets" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithCabinets(opts ...func(*CabinetQuery)) *EnterpriseStationQuery {
	query := (&CabinetClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withCabinets = query
	return esq
}

// WithBatteries tells the query-builder to eager-load the nodes that are connected to
// the "batteries" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithBatteries(opts ...func(*BatteryQuery)) *EnterpriseStationQuery {
	query := (&BatteryClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withBatteries = query
	return esq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithAsset(opts ...func(*AssetQuery)) *EnterpriseStationQuery {
	query := (&AssetClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withAsset = query
	return esq
}

// WithStocks tells the query-builder to eager-load the nodes that are connected to
// the "stocks" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnterpriseStationQuery) WithStocks(opts ...func(*StockQuery)) *EnterpriseStationQuery {
	query := (&StockClient{config: esq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	esq.withStocks = query
	return esq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EnterpriseStation.Query().
//		GroupBy(enterprisestation.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (esq *EnterpriseStationQuery) GroupBy(field string, fields ...string) *EnterpriseStationGroupBy {
	esq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EnterpriseStationGroupBy{build: esq}
	grbuild.flds = &esq.ctx.Fields
	grbuild.label = enterprisestation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EnterpriseStation.Query().
//		Select(enterprisestation.FieldCreatedAt).
//		Scan(ctx, &v)
func (esq *EnterpriseStationQuery) Select(fields ...string) *EnterpriseStationSelect {
	esq.ctx.Fields = append(esq.ctx.Fields, fields...)
	sbuild := &EnterpriseStationSelect{EnterpriseStationQuery: esq}
	sbuild.label = enterprisestation.Label
	sbuild.flds, sbuild.scan = &esq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EnterpriseStationSelect configured with the given aggregations.
func (esq *EnterpriseStationQuery) Aggregate(fns ...AggregateFunc) *EnterpriseStationSelect {
	return esq.Select().Aggregate(fns...)
}

func (esq *EnterpriseStationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range esq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, esq); err != nil {
				return err
			}
		}
	}
	for _, f := range esq.ctx.Fields {
		if !enterprisestation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if esq.path != nil {
		prev, err := esq.path(ctx)
		if err != nil {
			return err
		}
		esq.sql = prev
	}
	return nil
}

func (esq *EnterpriseStationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EnterpriseStation, error) {
	var (
		nodes       = []*EnterpriseStation{}
		_spec       = esq.querySpec()
		loadedTypes = [9]bool{
			esq.withCity != nil,
			esq.withEnterprise != nil,
			esq.withAgents != nil,
			esq.withSwapPutinBatteries != nil,
			esq.withSwapPutoutBatteries != nil,
			esq.withCabinets != nil,
			esq.withBatteries != nil,
			esq.withAsset != nil,
			esq.withStocks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EnterpriseStation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EnterpriseStation{config: esq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(esq.modifiers) > 0 {
		_spec.Modifiers = esq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, esq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := esq.withCity; query != nil {
		if err := esq.loadCity(ctx, query, nodes, nil,
			func(n *EnterpriseStation, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := esq.withEnterprise; query != nil {
		if err := esq.loadEnterprise(ctx, query, nodes, nil,
			func(n *EnterpriseStation, e *Enterprise) { n.Edges.Enterprise = e }); err != nil {
			return nil, err
		}
	}
	if query := esq.withAgents; query != nil {
		if err := esq.loadAgents(ctx, query, nodes,
			func(n *EnterpriseStation) { n.Edges.Agents = []*Agent{} },
			func(n *EnterpriseStation, e *Agent) { n.Edges.Agents = append(n.Edges.Agents, e) }); err != nil {
			return nil, err
		}
	}
	if query := esq.withSwapPutinBatteries; query != nil {
		if err := esq.loadSwapPutinBatteries(ctx, query, nodes,
			func(n *EnterpriseStation) { n.Edges.SwapPutinBatteries = []*EnterpriseBatterySwap{} },
			func(n *EnterpriseStation, e *EnterpriseBatterySwap) {
				n.Edges.SwapPutinBatteries = append(n.Edges.SwapPutinBatteries, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := esq.withSwapPutoutBatteries; query != nil {
		if err := esq.loadSwapPutoutBatteries(ctx, query, nodes,
			func(n *EnterpriseStation) { n.Edges.SwapPutoutBatteries = []*EnterpriseBatterySwap{} },
			func(n *EnterpriseStation, e *EnterpriseBatterySwap) {
				n.Edges.SwapPutoutBatteries = append(n.Edges.SwapPutoutBatteries, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := esq.withCabinets; query != nil {
		if err := esq.loadCabinets(ctx, query, nodes,
			func(n *EnterpriseStation) { n.Edges.Cabinets = []*Cabinet{} },
			func(n *EnterpriseStation, e *Cabinet) { n.Edges.Cabinets = append(n.Edges.Cabinets, e) }); err != nil {
			return nil, err
		}
	}
	if query := esq.withBatteries; query != nil {
		if err := esq.loadBatteries(ctx, query, nodes,
			func(n *EnterpriseStation) { n.Edges.Batteries = []*Battery{} },
			func(n *EnterpriseStation, e *Battery) { n.Edges.Batteries = append(n.Edges.Batteries, e) }); err != nil {
			return nil, err
		}
	}
	if query := esq.withAsset; query != nil {
		if err := esq.loadAsset(ctx, query, nodes,
			func(n *EnterpriseStation) { n.Edges.Asset = []*Asset{} },
			func(n *EnterpriseStation, e *Asset) { n.Edges.Asset = append(n.Edges.Asset, e) }); err != nil {
			return nil, err
		}
	}
	if query := esq.withStocks; query != nil {
		if err := esq.loadStocks(ctx, query, nodes,
			func(n *EnterpriseStation) { n.Edges.Stocks = []*Stock{} },
			func(n *EnterpriseStation, e *Stock) { n.Edges.Stocks = append(n.Edges.Stocks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (esq *EnterpriseStationQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseStation)
	for i := range nodes {
		if nodes[i].CityID == nil {
			continue
		}
		fk := *nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (esq *EnterpriseStationQuery) loadEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseStation)
	for i := range nodes {
		fk := nodes[i].EnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (esq *EnterpriseStationQuery) loadAgents(ctx context.Context, query *AgentQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *Agent)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*EnterpriseStation)
	nids := make(map[uint64]map[*EnterpriseStation]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(enterprisestation.AgentsTable)
		s.Join(joinT).On(s.C(agent.FieldID), joinT.C(enterprisestation.AgentsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(enterprisestation.AgentsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(enterprisestation.AgentsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*EnterpriseStation]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Agent](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "agents" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (esq *EnterpriseStationQuery) loadSwapPutinBatteries(ctx context.Context, query *EnterpriseBatterySwapQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *EnterpriseBatterySwap)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*EnterpriseStation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterprisebatteryswap.FieldPutinStationID)
	}
	query.Where(predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprisestation.SwapPutinBatteriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PutinStationID
		if fk == nil {
			return fmt.Errorf(`foreign-key "putin_station_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "putin_station_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (esq *EnterpriseStationQuery) loadSwapPutoutBatteries(ctx context.Context, query *EnterpriseBatterySwapQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *EnterpriseBatterySwap)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*EnterpriseStation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterprisebatteryswap.FieldPutoutStationID)
	}
	query.Where(predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprisestation.SwapPutoutBatteriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PutoutStationID
		if fk == nil {
			return fmt.Errorf(`foreign-key "putout_station_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "putout_station_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (esq *EnterpriseStationQuery) loadCabinets(ctx context.Context, query *CabinetQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *Cabinet)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*EnterpriseStation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cabinet.FieldStationID)
	}
	query.Where(predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprisestation.CabinetsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StationID
		if fk == nil {
			return fmt.Errorf(`foreign-key "station_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "station_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (esq *EnterpriseStationQuery) loadBatteries(ctx context.Context, query *BatteryQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *Battery)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*EnterpriseStation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(battery.FieldStationID)
	}
	query.Where(predicate.Battery(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprisestation.BatteriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StationID
		if fk == nil {
			return fmt.Errorf(`foreign-key "station_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "station_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (esq *EnterpriseStationQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *Asset)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*EnterpriseStation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(asset.FieldLocationsID)
	}
	query.Where(predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprisestation.AssetColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LocationsID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "locations_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (esq *EnterpriseStationQuery) loadStocks(ctx context.Context, query *StockQuery, nodes []*EnterpriseStation, init func(*EnterpriseStation), assign func(*EnterpriseStation, *Stock)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*EnterpriseStation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(stock.FieldStationID)
	}
	query.Where(predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprisestation.StocksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StationID
		if fk == nil {
			return fmt.Errorf(`foreign-key "station_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "station_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (esq *EnterpriseStationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := esq.querySpec()
	if len(esq.modifiers) > 0 {
		_spec.Modifiers = esq.modifiers
	}
	_spec.Node.Columns = esq.ctx.Fields
	if len(esq.ctx.Fields) > 0 {
		_spec.Unique = esq.ctx.Unique != nil && *esq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, esq.driver, _spec)
}

func (esq *EnterpriseStationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(enterprisestation.Table, enterprisestation.Columns, sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64))
	_spec.From = esq.sql
	if unique := esq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if esq.path != nil {
		_spec.Unique = true
	}
	if fields := esq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisestation.FieldID)
		for i := range fields {
			if fields[i] != enterprisestation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if esq.withCity != nil {
			_spec.Node.AddColumnOnce(enterprisestation.FieldCityID)
		}
		if esq.withEnterprise != nil {
			_spec.Node.AddColumnOnce(enterprisestation.FieldEnterpriseID)
		}
	}
	if ps := esq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := esq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := esq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := esq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (esq *EnterpriseStationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(esq.driver.Dialect())
	t1 := builder.Table(enterprisestation.Table)
	columns := esq.ctx.Fields
	if len(columns) == 0 {
		columns = enterprisestation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if esq.sql != nil {
		selector = esq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if esq.ctx.Unique != nil && *esq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range esq.modifiers {
		m(selector)
	}
	for _, p := range esq.predicates {
		p(selector)
	}
	for _, p := range esq.order {
		p(selector)
	}
	if offset := esq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := esq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (esq *EnterpriseStationQuery) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseStationSelect {
	esq.modifiers = append(esq.modifiers, modifiers...)
	return esq.Select()
}

type EnterpriseStationQueryWith string

var (
	EnterpriseStationQueryWithCity                EnterpriseStationQueryWith = "City"
	EnterpriseStationQueryWithEnterprise          EnterpriseStationQueryWith = "Enterprise"
	EnterpriseStationQueryWithAgents              EnterpriseStationQueryWith = "Agents"
	EnterpriseStationQueryWithSwapPutinBatteries  EnterpriseStationQueryWith = "SwapPutinBatteries"
	EnterpriseStationQueryWithSwapPutoutBatteries EnterpriseStationQueryWith = "SwapPutoutBatteries"
	EnterpriseStationQueryWithCabinets            EnterpriseStationQueryWith = "Cabinets"
	EnterpriseStationQueryWithBatteries           EnterpriseStationQueryWith = "Batteries"
	EnterpriseStationQueryWithAsset               EnterpriseStationQueryWith = "Asset"
	EnterpriseStationQueryWithStocks              EnterpriseStationQueryWith = "Stocks"
)

func (esq *EnterpriseStationQuery) With(withEdges ...EnterpriseStationQueryWith) *EnterpriseStationQuery {
	for _, v := range withEdges {
		switch v {
		case EnterpriseStationQueryWithCity:
			esq.WithCity()
		case EnterpriseStationQueryWithEnterprise:
			esq.WithEnterprise()
		case EnterpriseStationQueryWithAgents:
			esq.WithAgents()
		case EnterpriseStationQueryWithSwapPutinBatteries:
			esq.WithSwapPutinBatteries()
		case EnterpriseStationQueryWithSwapPutoutBatteries:
			esq.WithSwapPutoutBatteries()
		case EnterpriseStationQueryWithCabinets:
			esq.WithCabinets()
		case EnterpriseStationQueryWithBatteries:
			esq.WithBatteries()
		case EnterpriseStationQueryWithAsset:
			esq.WithAsset()
		case EnterpriseStationQueryWithStocks:
			esq.WithStocks()
		}
	}
	return esq
}

// EnterpriseStationGroupBy is the group-by builder for EnterpriseStation entities.
type EnterpriseStationGroupBy struct {
	selector
	build *EnterpriseStationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (esgb *EnterpriseStationGroupBy) Aggregate(fns ...AggregateFunc) *EnterpriseStationGroupBy {
	esgb.fns = append(esgb.fns, fns...)
	return esgb
}

// Scan applies the selector query and scans the result into the given value.
func (esgb *EnterpriseStationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, esgb.build.ctx, "GroupBy")
	if err := esgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnterpriseStationQuery, *EnterpriseStationGroupBy](ctx, esgb.build, esgb, esgb.build.inters, v)
}

func (esgb *EnterpriseStationGroupBy) sqlScan(ctx context.Context, root *EnterpriseStationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(esgb.fns))
	for _, fn := range esgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*esgb.flds)+len(esgb.fns))
		for _, f := range *esgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*esgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := esgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EnterpriseStationSelect is the builder for selecting fields of EnterpriseStation entities.
type EnterpriseStationSelect struct {
	*EnterpriseStationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ess *EnterpriseStationSelect) Aggregate(fns ...AggregateFunc) *EnterpriseStationSelect {
	ess.fns = append(ess.fns, fns...)
	return ess
}

// Scan applies the selector query and scans the result into the given value.
func (ess *EnterpriseStationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ess.ctx, "Select")
	if err := ess.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnterpriseStationQuery, *EnterpriseStationSelect](ctx, ess.EnterpriseStationQuery, ess, ess.inters, v)
}

func (ess *EnterpriseStationSelect) sqlScan(ctx context.Context, root *EnterpriseStationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ess.fns))
	for _, fn := range ess.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ess.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ess.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ess *EnterpriseStationSelect) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseStationSelect {
	ess.modifiers = append(ess.modifiers, modifiers...)
	return ess
}
