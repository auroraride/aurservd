// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
)

// CouponAssembly is the model entity for the CouponAssembly schema.
type CouponAssembly struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 总数
	Total int `json:"total,omitempty"`
	// 过期类型
	ExpiredType uint8 `json:"expired_type,omitempty"`
	// 优惠券规则, 1:互斥 2:叠加
	Rule uint8 `json:"rule,omitempty"`
	// 金额
	Amount float64 `json:"amount,omitempty"`
	// 叠加时同类是否可使用多张
	Multiple bool `json:"multiple,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponAssembly) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponassembly.FieldCreator, couponassembly.FieldLastModifier:
			values[i] = new([]byte)
		case couponassembly.FieldMultiple:
			values[i] = new(sql.NullBool)
		case couponassembly.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case couponassembly.FieldID, couponassembly.FieldTotal, couponassembly.FieldExpiredType, couponassembly.FieldRule:
			values[i] = new(sql.NullInt64)
		case couponassembly.FieldRemark:
			values[i] = new(sql.NullString)
		case couponassembly.FieldCreatedAt, couponassembly.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CouponAssembly", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponAssembly fields.
func (ca *CouponAssembly) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponassembly.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = uint64(value.Int64)
		case couponassembly.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case couponassembly.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		case couponassembly.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case couponassembly.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case couponassembly.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ca.Remark = value.String
			}
		case couponassembly.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				ca.Total = int(value.Int64)
			}
		case couponassembly.FieldExpiredType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expired_type", values[i])
			} else if value.Valid {
				ca.ExpiredType = uint8(value.Int64)
			}
		case couponassembly.FieldRule:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rule", values[i])
			} else if value.Valid {
				ca.Rule = uint8(value.Int64)
			}
		case couponassembly.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ca.Amount = value.Float64
			}
		case couponassembly.FieldMultiple:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field multiple", values[i])
			} else if value.Valid {
				ca.Multiple = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CouponAssembly.
// Note that you need to call CouponAssembly.Unwrap() before calling this method if this CouponAssembly
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CouponAssembly) Update() *CouponAssemblyUpdateOne {
	return (&CouponAssemblyClient{config: ca.config}).UpdateOne(ca)
}

// Unwrap unwraps the CouponAssembly entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CouponAssembly) Unwrap() *CouponAssembly {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponAssembly is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CouponAssembly) String() string {
	var builder strings.Builder
	builder.WriteString("CouponAssembly(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", ca.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ca.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ca.Remark)
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", ca.Total))
	builder.WriteString(", ")
	builder.WriteString("expired_type=")
	builder.WriteString(fmt.Sprintf("%v", ca.ExpiredType))
	builder.WriteString(", ")
	builder.WriteString("rule=")
	builder.WriteString(fmt.Sprintf("%v", ca.Rule))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", ca.Amount))
	builder.WriteString(", ")
	builder.WriteString("multiple=")
	builder.WriteString(fmt.Sprintf("%v", ca.Multiple))
	builder.WriteByte(')')
	return builder.String()
}

// CouponAssemblies is a parsable slice of CouponAssembly.
type CouponAssemblies []*CouponAssembly

func (ca CouponAssemblies) config(cfg config) {
	for _i := range ca {
		ca[_i].config = cfg
	}
}
