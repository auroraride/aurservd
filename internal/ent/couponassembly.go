// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
)

// CouponAssembly is the model entity for the CouponAssembly schema.
type CouponAssembly struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// TemplateID holds the value of the "template_id" field.
	TemplateID uint64 `json:"template_id,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 数量
	Number int `json:"number,omitempty"`
	// 金额
	Amount float64 `json:"amount,omitempty"`
	// 发送对象
	Target uint8 `json:"target,omitempty"`
	// 详情
	Meta *model.CouponTemplateMeta `json:"meta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CouponAssemblyQuery when eager-loading is set.
	Edges        CouponAssemblyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CouponAssemblyEdges holds the relations/edges for other nodes in the graph.
type CouponAssemblyEdges struct {
	// Template holds the value of the template edge.
	Template *CouponTemplate `json:"template,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CouponAssemblyEdges) TemplateOrErr() (*CouponTemplate, error) {
	if e.loadedTypes[0] {
		if e.Template == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: coupontemplate.Label}
		}
		return e.Template, nil
	}
	return nil, &NotLoadedError{edge: "template"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponAssembly) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case couponassembly.FieldCreator, couponassembly.FieldLastModifier, couponassembly.FieldMeta:
			values[i] = new([]byte)
		case couponassembly.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case couponassembly.FieldID, couponassembly.FieldTemplateID, couponassembly.FieldNumber, couponassembly.FieldTarget:
			values[i] = new(sql.NullInt64)
		case couponassembly.FieldRemark, couponassembly.FieldName:
			values[i] = new(sql.NullString)
		case couponassembly.FieldCreatedAt, couponassembly.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponAssembly fields.
func (ca *CouponAssembly) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case couponassembly.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ca.ID = uint64(value.Int64)
		case couponassembly.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ca.CreatedAt = value.Time
			}
		case couponassembly.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ca.UpdatedAt = value.Time
			}
		case couponassembly.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case couponassembly.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case couponassembly.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ca.Remark = value.String
			}
		case couponassembly.FieldTemplateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				ca.TemplateID = uint64(value.Int64)
			}
		case couponassembly.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ca.Name = value.String
			}
		case couponassembly.FieldNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number", values[i])
			} else if value.Valid {
				ca.Number = int(value.Int64)
			}
		case couponassembly.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ca.Amount = value.Float64
			}
		case couponassembly.FieldTarget:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				ca.Target = uint8(value.Int64)
			}
		case couponassembly.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ca.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		default:
			ca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CouponAssembly.
// This includes values selected through modifiers, order, etc.
func (ca *CouponAssembly) Value(name string) (ent.Value, error) {
	return ca.selectValues.Get(name)
}

// QueryTemplate queries the "template" edge of the CouponAssembly entity.
func (ca *CouponAssembly) QueryTemplate() *CouponTemplateQuery {
	return NewCouponAssemblyClient(ca.config).QueryTemplate(ca)
}

// Update returns a builder for updating this CouponAssembly.
// Note that you need to call CouponAssembly.Unwrap() before calling this method if this CouponAssembly
// was returned from a transaction, and the transaction was committed or rolled back.
func (ca *CouponAssembly) Update() *CouponAssemblyUpdateOne {
	return NewCouponAssemblyClient(ca.config).UpdateOne(ca)
}

// Unwrap unwraps the CouponAssembly entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ca *CouponAssembly) Unwrap() *CouponAssembly {
	_tx, ok := ca.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponAssembly is not a transactional entity")
	}
	ca.config.driver = _tx.drv
	return ca
}

// String implements the fmt.Stringer.
func (ca *CouponAssembly) String() string {
	var builder strings.Builder
	builder.WriteString("CouponAssembly(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ca.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ca.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ca.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", ca.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ca.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ca.Remark)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(fmt.Sprintf("%v", ca.TemplateID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ca.Name)
	builder.WriteString(", ")
	builder.WriteString("number=")
	builder.WriteString(fmt.Sprintf("%v", ca.Number))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", ca.Amount))
	builder.WriteString(", ")
	builder.WriteString("target=")
	builder.WriteString(fmt.Sprintf("%v", ca.Target))
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", ca.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// CouponAssemblies is a parsable slice of CouponAssembly.
type CouponAssemblies []*CouponAssembly
