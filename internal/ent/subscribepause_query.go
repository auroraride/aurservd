// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"
)

// SubscribePauseQuery is the builder for querying SubscribePause entities.
type SubscribePauseQuery struct {
	config
	ctx             *QueryContext
	order           []OrderFunc
	inters          []Interceptor
	predicates      []predicate.SubscribePause
	withRider       *RiderQuery
	withEmployee    *EmployeeQuery
	withCity        *CityQuery
	withStore       *StoreQuery
	withEndStore    *StoreQuery
	withCabinet     *CabinetQuery
	withEndCabinet  *CabinetQuery
	withSubscribe   *SubscribeQuery
	withEndEmployee *EmployeeQuery
	withSuspends    *SubscribeSuspendQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscribePauseQuery builder.
func (spq *SubscribePauseQuery) Where(ps ...predicate.SubscribePause) *SubscribePauseQuery {
	spq.predicates = append(spq.predicates, ps...)
	return spq
}

// Limit the number of records to be returned by this query.
func (spq *SubscribePauseQuery) Limit(limit int) *SubscribePauseQuery {
	spq.ctx.Limit = &limit
	return spq
}

// Offset to start from.
func (spq *SubscribePauseQuery) Offset(offset int) *SubscribePauseQuery {
	spq.ctx.Offset = &offset
	return spq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spq *SubscribePauseQuery) Unique(unique bool) *SubscribePauseQuery {
	spq.ctx.Unique = &unique
	return spq
}

// Order specifies how the records should be ordered.
func (spq *SubscribePauseQuery) Order(o ...OrderFunc) *SubscribePauseQuery {
	spq.order = append(spq.order, o...)
	return spq
}

// QueryRider chains the current query on the "rider" edge.
func (spq *SubscribePauseQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.RiderTable, subscribepause.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (spq *SubscribePauseQuery) QueryEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EmployeeTable, subscribepause.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (spq *SubscribePauseQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.CityTable, subscribepause.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (spq *SubscribePauseQuery) QueryStore() *StoreQuery {
	query := (&StoreClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.StoreTable, subscribepause.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEndStore chains the current query on the "endStore" edge.
func (spq *SubscribePauseQuery) QueryEndStore() *StoreQuery {
	query := (&StoreClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndStoreTable, subscribepause.EndStoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinet chains the current query on the "cabinet" edge.
func (spq *SubscribePauseQuery) QueryCabinet() *CabinetQuery {
	query := (&CabinetClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.CabinetTable, subscribepause.CabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEndCabinet chains the current query on the "endCabinet" edge.
func (spq *SubscribePauseQuery) QueryEndCabinet() *CabinetQuery {
	query := (&CabinetClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndCabinetTable, subscribepause.EndCabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribe chains the current query on the "subscribe" edge.
func (spq *SubscribePauseQuery) QuerySubscribe() *SubscribeQuery {
	query := (&SubscribeClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribepause.SubscribeTable, subscribepause.SubscribeColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEndEmployee chains the current query on the "end_employee" edge.
func (spq *SubscribePauseQuery) QueryEndEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribepause.EndEmployeeTable, subscribepause.EndEmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySuspends chains the current query on the "suspends" edge.
func (spq *SubscribePauseQuery) QuerySuspends() *SubscribeSuspendQuery {
	query := (&SubscribeSuspendClient{config: spq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribepause.Table, subscribepause.FieldID, selector),
			sqlgraph.To(subscribesuspend.Table, subscribesuspend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribepause.SuspendsTable, subscribepause.SuspendsColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscribePause entity from the query.
// Returns a *NotFoundError when no SubscribePause was found.
func (spq *SubscribePauseQuery) First(ctx context.Context) (*SubscribePause, error) {
	nodes, err := spq.Limit(1).All(setContextOp(ctx, spq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscribepause.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spq *SubscribePauseQuery) FirstX(ctx context.Context) *SubscribePause {
	node, err := spq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscribePause ID from the query.
// Returns a *NotFoundError when no SubscribePause ID was found.
func (spq *SubscribePauseQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = spq.Limit(1).IDs(setContextOp(ctx, spq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscribepause.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spq *SubscribePauseQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := spq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscribePause entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscribePause entity is found.
// Returns a *NotFoundError when no SubscribePause entities are found.
func (spq *SubscribePauseQuery) Only(ctx context.Context) (*SubscribePause, error) {
	nodes, err := spq.Limit(2).All(setContextOp(ctx, spq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscribepause.Label}
	default:
		return nil, &NotSingularError{subscribepause.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spq *SubscribePauseQuery) OnlyX(ctx context.Context) *SubscribePause {
	node, err := spq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscribePause ID in the query.
// Returns a *NotSingularError when more than one SubscribePause ID is found.
// Returns a *NotFoundError when no entities are found.
func (spq *SubscribePauseQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = spq.Limit(2).IDs(setContextOp(ctx, spq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscribepause.Label}
	default:
		err = &NotSingularError{subscribepause.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spq *SubscribePauseQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := spq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscribePauses.
func (spq *SubscribePauseQuery) All(ctx context.Context) ([]*SubscribePause, error) {
	ctx = setContextOp(ctx, spq.ctx, "All")
	if err := spq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscribePause, *SubscribePauseQuery]()
	return withInterceptors[[]*SubscribePause](ctx, spq, qr, spq.inters)
}

// AllX is like All, but panics if an error occurs.
func (spq *SubscribePauseQuery) AllX(ctx context.Context) []*SubscribePause {
	nodes, err := spq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscribePause IDs.
func (spq *SubscribePauseQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	ctx = setContextOp(ctx, spq.ctx, "IDs")
	if err := spq.Select(subscribepause.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spq *SubscribePauseQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := spq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spq *SubscribePauseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, spq.ctx, "Count")
	if err := spq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, spq, querierCount[*SubscribePauseQuery](), spq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (spq *SubscribePauseQuery) CountX(ctx context.Context) int {
	count, err := spq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spq *SubscribePauseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, spq.ctx, "Exist")
	switch _, err := spq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (spq *SubscribePauseQuery) ExistX(ctx context.Context) bool {
	exist, err := spq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscribePauseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spq *SubscribePauseQuery) Clone() *SubscribePauseQuery {
	if spq == nil {
		return nil
	}
	return &SubscribePauseQuery{
		config:          spq.config,
		ctx:             spq.ctx.Clone(),
		order:           append([]OrderFunc{}, spq.order...),
		inters:          append([]Interceptor{}, spq.inters...),
		predicates:      append([]predicate.SubscribePause{}, spq.predicates...),
		withRider:       spq.withRider.Clone(),
		withEmployee:    spq.withEmployee.Clone(),
		withCity:        spq.withCity.Clone(),
		withStore:       spq.withStore.Clone(),
		withEndStore:    spq.withEndStore.Clone(),
		withCabinet:     spq.withCabinet.Clone(),
		withEndCabinet:  spq.withEndCabinet.Clone(),
		withSubscribe:   spq.withSubscribe.Clone(),
		withEndEmployee: spq.withEndEmployee.Clone(),
		withSuspends:    spq.withSuspends.Clone(),
		// clone intermediate query.
		sql:  spq.sql.Clone(),
		path: spq.path,
	}
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithRider(opts ...func(*RiderQuery)) *SubscribePauseQuery {
	query := (&RiderClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withRider = query
	return spq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithEmployee(opts ...func(*EmployeeQuery)) *SubscribePauseQuery {
	query := (&EmployeeClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withEmployee = query
	return spq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithCity(opts ...func(*CityQuery)) *SubscribePauseQuery {
	query := (&CityClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withCity = query
	return spq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithStore(opts ...func(*StoreQuery)) *SubscribePauseQuery {
	query := (&StoreClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withStore = query
	return spq
}

// WithEndStore tells the query-builder to eager-load the nodes that are connected to
// the "endStore" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithEndStore(opts ...func(*StoreQuery)) *SubscribePauseQuery {
	query := (&StoreClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withEndStore = query
	return spq
}

// WithCabinet tells the query-builder to eager-load the nodes that are connected to
// the "cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithCabinet(opts ...func(*CabinetQuery)) *SubscribePauseQuery {
	query := (&CabinetClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withCabinet = query
	return spq
}

// WithEndCabinet tells the query-builder to eager-load the nodes that are connected to
// the "endCabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithEndCabinet(opts ...func(*CabinetQuery)) *SubscribePauseQuery {
	query := (&CabinetClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withEndCabinet = query
	return spq
}

// WithSubscribe tells the query-builder to eager-load the nodes that are connected to
// the "subscribe" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithSubscribe(opts ...func(*SubscribeQuery)) *SubscribePauseQuery {
	query := (&SubscribeClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withSubscribe = query
	return spq
}

// WithEndEmployee tells the query-builder to eager-load the nodes that are connected to
// the "end_employee" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithEndEmployee(opts ...func(*EmployeeQuery)) *SubscribePauseQuery {
	query := (&EmployeeClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withEndEmployee = query
	return spq
}

// WithSuspends tells the query-builder to eager-load the nodes that are connected to
// the "suspends" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SubscribePauseQuery) WithSuspends(opts ...func(*SubscribeSuspendQuery)) *SubscribePauseQuery {
	query := (&SubscribeSuspendClient{config: spq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spq.withSuspends = query
	return spq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscribePause.Query().
//		GroupBy(subscribepause.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (spq *SubscribePauseQuery) GroupBy(field string, fields ...string) *SubscribePauseGroupBy {
	spq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubscribePauseGroupBy{build: spq}
	grbuild.flds = &spq.ctx.Fields
	grbuild.label = subscribepause.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.SubscribePause.Query().
//		Select(subscribepause.FieldCreatedAt).
//		Scan(ctx, &v)
func (spq *SubscribePauseQuery) Select(fields ...string) *SubscribePauseSelect {
	spq.ctx.Fields = append(spq.ctx.Fields, fields...)
	sbuild := &SubscribePauseSelect{SubscribePauseQuery: spq}
	sbuild.label = subscribepause.Label
	sbuild.flds, sbuild.scan = &spq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscribePauseSelect configured with the given aggregations.
func (spq *SubscribePauseQuery) Aggregate(fns ...AggregateFunc) *SubscribePauseSelect {
	return spq.Select().Aggregate(fns...)
}

func (spq *SubscribePauseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range spq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, spq); err != nil {
				return err
			}
		}
	}
	for _, f := range spq.ctx.Fields {
		if !subscribepause.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if spq.path != nil {
		prev, err := spq.path(ctx)
		if err != nil {
			return err
		}
		spq.sql = prev
	}
	return nil
}

func (spq *SubscribePauseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscribePause, error) {
	var (
		nodes       = []*SubscribePause{}
		_spec       = spq.querySpec()
		loadedTypes = [10]bool{
			spq.withRider != nil,
			spq.withEmployee != nil,
			spq.withCity != nil,
			spq.withStore != nil,
			spq.withEndStore != nil,
			spq.withCabinet != nil,
			spq.withEndCabinet != nil,
			spq.withSubscribe != nil,
			spq.withEndEmployee != nil,
			spq.withSuspends != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscribePause).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscribePause{config: spq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(spq.modifiers) > 0 {
		_spec.Modifiers = spq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, spq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := spq.withRider; query != nil {
		if err := spq.loadRider(ctx, query, nodes, nil,
			func(n *SubscribePause, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withEmployee; query != nil {
		if err := spq.loadEmployee(ctx, query, nodes, nil,
			func(n *SubscribePause, e *Employee) { n.Edges.Employee = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withCity; query != nil {
		if err := spq.loadCity(ctx, query, nodes, nil,
			func(n *SubscribePause, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withStore; query != nil {
		if err := spq.loadStore(ctx, query, nodes, nil,
			func(n *SubscribePause, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withEndStore; query != nil {
		if err := spq.loadEndStore(ctx, query, nodes, nil,
			func(n *SubscribePause, e *Store) { n.Edges.EndStore = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withCabinet; query != nil {
		if err := spq.loadCabinet(ctx, query, nodes, nil,
			func(n *SubscribePause, e *Cabinet) { n.Edges.Cabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withEndCabinet; query != nil {
		if err := spq.loadEndCabinet(ctx, query, nodes, nil,
			func(n *SubscribePause, e *Cabinet) { n.Edges.EndCabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withSubscribe; query != nil {
		if err := spq.loadSubscribe(ctx, query, nodes, nil,
			func(n *SubscribePause, e *Subscribe) { n.Edges.Subscribe = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withEndEmployee; query != nil {
		if err := spq.loadEndEmployee(ctx, query, nodes, nil,
			func(n *SubscribePause, e *Employee) { n.Edges.EndEmployee = e }); err != nil {
			return nil, err
		}
	}
	if query := spq.withSuspends; query != nil {
		if err := spq.loadSuspends(ctx, query, nodes,
			func(n *SubscribePause) { n.Edges.Suspends = []*SubscribeSuspend{} },
			func(n *SubscribePause, e *SubscribeSuspend) { n.Edges.Suspends = append(n.Edges.Suspends, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (spq *SubscribePauseQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		fk := nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *Employee)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		if nodes[i].EmployeeID == nil {
			continue
		}
		fk := *nodes[i].EmployeeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		if nodes[i].CityID == nil {
			continue
		}
		fk := *nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		if nodes[i].StoreID == nil {
			continue
		}
		fk := *nodes[i].StoreID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadEndStore(ctx context.Context, query *StoreQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		if nodes[i].EndStoreID == nil {
			continue
		}
		fk := *nodes[i].EndStoreID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "end_store_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadCabinet(ctx context.Context, query *CabinetQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		if nodes[i].CabinetID == nil {
			continue
		}
		fk := *nodes[i].CabinetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "cabinet_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadEndCabinet(ctx context.Context, query *CabinetQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		if nodes[i].EndCabinetID == nil {
			continue
		}
		fk := *nodes[i].EndCabinetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "end_cabinet_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadSubscribe(ctx context.Context, query *SubscribeQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *Subscribe)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		fk := nodes[i].SubscribeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscribe.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadEndEmployee(ctx context.Context, query *EmployeeQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *Employee)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribePause)
	for i := range nodes {
		if nodes[i].EndEmployeeID == nil {
			continue
		}
		fk := *nodes[i].EndEmployeeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "end_employee_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (spq *SubscribePauseQuery) loadSuspends(ctx context.Context, query *SubscribeSuspendQuery, nodes []*SubscribePause, init func(*SubscribePause), assign func(*SubscribePause, *SubscribeSuspend)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*SubscribePause)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.SubscribeSuspend(func(s *sql.Selector) {
		s.Where(sql.InValues(subscribepause.SuspendsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PauseID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "pause_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (spq *SubscribePauseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spq.querySpec()
	if len(spq.modifiers) > 0 {
		_spec.Modifiers = spq.modifiers
	}
	_spec.Node.Columns = spq.ctx.Fields
	if len(spq.ctx.Fields) > 0 {
		_spec.Unique = spq.ctx.Unique != nil && *spq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, spq.driver, _spec)
}

func (spq *SubscribePauseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribepause.Table,
			Columns: subscribepause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribepause.FieldID,
			},
		},
		From:   spq.sql,
		Unique: true,
	}
	if unique := spq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := spq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribepause.FieldID)
		for i := range fields {
			if fields[i] != subscribepause.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := spq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spq *SubscribePauseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spq.driver.Dialect())
	t1 := builder.Table(subscribepause.Table)
	columns := spq.ctx.Fields
	if len(columns) == 0 {
		columns = subscribepause.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spq.sql != nil {
		selector = spq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if spq.ctx.Unique != nil && *spq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range spq.modifiers {
		m(selector)
	}
	for _, p := range spq.predicates {
		p(selector)
	}
	for _, p := range spq.order {
		p(selector)
	}
	if offset := spq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (spq *SubscribePauseQuery) Modify(modifiers ...func(s *sql.Selector)) *SubscribePauseSelect {
	spq.modifiers = append(spq.modifiers, modifiers...)
	return spq.Select()
}

type SubscribePauseQueryWith string

var (
	SubscribePauseQueryWithRider       SubscribePauseQueryWith = "Rider"
	SubscribePauseQueryWithEmployee    SubscribePauseQueryWith = "Employee"
	SubscribePauseQueryWithCity        SubscribePauseQueryWith = "City"
	SubscribePauseQueryWithStore       SubscribePauseQueryWith = "Store"
	SubscribePauseQueryWithEndStore    SubscribePauseQueryWith = "EndStore"
	SubscribePauseQueryWithCabinet     SubscribePauseQueryWith = "Cabinet"
	SubscribePauseQueryWithEndCabinet  SubscribePauseQueryWith = "EndCabinet"
	SubscribePauseQueryWithSubscribe   SubscribePauseQueryWith = "Subscribe"
	SubscribePauseQueryWithEndEmployee SubscribePauseQueryWith = "EndEmployee"
	SubscribePauseQueryWithSuspends    SubscribePauseQueryWith = "Suspends"
)

func (spq *SubscribePauseQuery) With(withEdges ...SubscribePauseQueryWith) *SubscribePauseQuery {
	for _, v := range withEdges {
		switch v {
		case SubscribePauseQueryWithRider:
			spq.WithRider()
		case SubscribePauseQueryWithEmployee:
			spq.WithEmployee()
		case SubscribePauseQueryWithCity:
			spq.WithCity()
		case SubscribePauseQueryWithStore:
			spq.WithStore()
		case SubscribePauseQueryWithEndStore:
			spq.WithEndStore()
		case SubscribePauseQueryWithCabinet:
			spq.WithCabinet()
		case SubscribePauseQueryWithEndCabinet:
			spq.WithEndCabinet()
		case SubscribePauseQueryWithSubscribe:
			spq.WithSubscribe()
		case SubscribePauseQueryWithEndEmployee:
			spq.WithEndEmployee()
		case SubscribePauseQueryWithSuspends:
			spq.WithSuspends()
		}
	}
	return spq
}

// SubscribePauseGroupBy is the group-by builder for SubscribePause entities.
type SubscribePauseGroupBy struct {
	selector
	build *SubscribePauseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spgb *SubscribePauseGroupBy) Aggregate(fns ...AggregateFunc) *SubscribePauseGroupBy {
	spgb.fns = append(spgb.fns, fns...)
	return spgb
}

// Scan applies the selector query and scans the result into the given value.
func (spgb *SubscribePauseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spgb.build.ctx, "GroupBy")
	if err := spgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscribePauseQuery, *SubscribePauseGroupBy](ctx, spgb.build, spgb, spgb.build.inters, v)
}

func (spgb *SubscribePauseGroupBy) sqlScan(ctx context.Context, root *SubscribePauseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(spgb.fns))
	for _, fn := range spgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*spgb.flds)+len(spgb.fns))
		for _, f := range *spgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*spgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscribePauseSelect is the builder for selecting fields of SubscribePause entities.
type SubscribePauseSelect struct {
	*SubscribePauseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sps *SubscribePauseSelect) Aggregate(fns ...AggregateFunc) *SubscribePauseSelect {
	sps.fns = append(sps.fns, fns...)
	return sps
}

// Scan applies the selector query and scans the result into the given value.
func (sps *SubscribePauseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sps.ctx, "Select")
	if err := sps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscribePauseQuery, *SubscribePauseSelect](ctx, sps.SubscribePauseQuery, sps, sps.inters, v)
}

func (sps *SubscribePauseSelect) sqlScan(ctx context.Context, root *SubscribePauseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sps.fns))
	for _, fn := range sps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sps *SubscribePauseSelect) Modify(modifiers ...func(s *sql.Selector)) *SubscribePauseSelect {
	sps.modifiers = append(sps.modifiers, modifiers...)
	return sps
}
