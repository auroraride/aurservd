// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/ordercoupon"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// OrderCouponUpdate is the builder for updating OrderCoupon entities.
type OrderCouponUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderCouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderCouponUpdate builder.
func (ocu *OrderCouponUpdate) Where(ps ...predicate.OrderCoupon) *OrderCouponUpdate {
	ocu.mutation.Where(ps...)
	return ocu
}

// SetUpdatedAt sets the "updated_at" field.
func (ocu *OrderCouponUpdate) SetUpdatedAt(t time.Time) *OrderCouponUpdate {
	ocu.mutation.SetUpdatedAt(t)
	return ocu
}

// SetDeletedAt sets the "deleted_at" field.
func (ocu *OrderCouponUpdate) SetDeletedAt(t time.Time) *OrderCouponUpdate {
	ocu.mutation.SetDeletedAt(t)
	return ocu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ocu *OrderCouponUpdate) SetNillableDeletedAt(t *time.Time) *OrderCouponUpdate {
	if t != nil {
		ocu.SetDeletedAt(*t)
	}
	return ocu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ocu *OrderCouponUpdate) ClearDeletedAt() *OrderCouponUpdate {
	ocu.mutation.ClearDeletedAt()
	return ocu
}

// SetLastModifier sets the "last_modifier" field.
func (ocu *OrderCouponUpdate) SetLastModifier(m *model.Modifier) *OrderCouponUpdate {
	ocu.mutation.SetLastModifier(m)
	return ocu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ocu *OrderCouponUpdate) ClearLastModifier() *OrderCouponUpdate {
	ocu.mutation.ClearLastModifier()
	return ocu
}

// SetRemark sets the "remark" field.
func (ocu *OrderCouponUpdate) SetRemark(s string) *OrderCouponUpdate {
	ocu.mutation.SetRemark(s)
	return ocu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ocu *OrderCouponUpdate) SetNillableRemark(s *string) *OrderCouponUpdate {
	if s != nil {
		ocu.SetRemark(*s)
	}
	return ocu
}

// ClearRemark clears the value of the "remark" field.
func (ocu *OrderCouponUpdate) ClearRemark() *OrderCouponUpdate {
	ocu.mutation.ClearRemark()
	return ocu
}

// Mutation returns the OrderCouponMutation object of the builder.
func (ocu *OrderCouponUpdate) Mutation() *OrderCouponMutation {
	return ocu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ocu *OrderCouponUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ocu.defaults(); err != nil {
		return 0, err
	}
	if len(ocu.hooks) == 0 {
		affected, err = ocu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderCouponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ocu.mutation = mutation
			affected, err = ocu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ocu.hooks) - 1; i >= 0; i-- {
			if ocu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ocu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ocu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ocu *OrderCouponUpdate) SaveX(ctx context.Context) int {
	affected, err := ocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocu *OrderCouponUpdate) Exec(ctx context.Context) error {
	_, err := ocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocu *OrderCouponUpdate) ExecX(ctx context.Context) {
	if err := ocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocu *OrderCouponUpdate) defaults() error {
	if _, ok := ocu.mutation.UpdatedAt(); !ok {
		if ordercoupon.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ordercoupon.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ordercoupon.UpdateDefaultUpdatedAt()
		ocu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ocu *OrderCouponUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderCouponUpdate {
	ocu.modifiers = append(ocu.modifiers, modifiers...)
	return ocu
}

func (ocu *OrderCouponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordercoupon.Table,
			Columns: ordercoupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ordercoupon.FieldID,
			},
		},
	}
	if ps := ocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordercoupon.FieldUpdatedAt,
		})
	}
	if value, ok := ocu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordercoupon.FieldDeletedAt,
		})
	}
	if ocu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ordercoupon.FieldDeletedAt,
		})
	}
	if ocu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: ordercoupon.FieldCreator,
		})
	}
	if value, ok := ocu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ordercoupon.FieldLastModifier,
		})
	}
	if ocu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: ordercoupon.FieldLastModifier,
		})
	}
	if value, ok := ocu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordercoupon.FieldRemark,
		})
	}
	if ocu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ordercoupon.FieldRemark,
		})
	}
	_spec.Modifiers = ocu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordercoupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderCouponUpdateOne is the builder for updating a single OrderCoupon entity.
type OrderCouponUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderCouponMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ocuo *OrderCouponUpdateOne) SetUpdatedAt(t time.Time) *OrderCouponUpdateOne {
	ocuo.mutation.SetUpdatedAt(t)
	return ocuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ocuo *OrderCouponUpdateOne) SetDeletedAt(t time.Time) *OrderCouponUpdateOne {
	ocuo.mutation.SetDeletedAt(t)
	return ocuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ocuo *OrderCouponUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderCouponUpdateOne {
	if t != nil {
		ocuo.SetDeletedAt(*t)
	}
	return ocuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ocuo *OrderCouponUpdateOne) ClearDeletedAt() *OrderCouponUpdateOne {
	ocuo.mutation.ClearDeletedAt()
	return ocuo
}

// SetLastModifier sets the "last_modifier" field.
func (ocuo *OrderCouponUpdateOne) SetLastModifier(m *model.Modifier) *OrderCouponUpdateOne {
	ocuo.mutation.SetLastModifier(m)
	return ocuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ocuo *OrderCouponUpdateOne) ClearLastModifier() *OrderCouponUpdateOne {
	ocuo.mutation.ClearLastModifier()
	return ocuo
}

// SetRemark sets the "remark" field.
func (ocuo *OrderCouponUpdateOne) SetRemark(s string) *OrderCouponUpdateOne {
	ocuo.mutation.SetRemark(s)
	return ocuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ocuo *OrderCouponUpdateOne) SetNillableRemark(s *string) *OrderCouponUpdateOne {
	if s != nil {
		ocuo.SetRemark(*s)
	}
	return ocuo
}

// ClearRemark clears the value of the "remark" field.
func (ocuo *OrderCouponUpdateOne) ClearRemark() *OrderCouponUpdateOne {
	ocuo.mutation.ClearRemark()
	return ocuo
}

// Mutation returns the OrderCouponMutation object of the builder.
func (ocuo *OrderCouponUpdateOne) Mutation() *OrderCouponMutation {
	return ocuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ocuo *OrderCouponUpdateOne) Select(field string, fields ...string) *OrderCouponUpdateOne {
	ocuo.fields = append([]string{field}, fields...)
	return ocuo
}

// Save executes the query and returns the updated OrderCoupon entity.
func (ocuo *OrderCouponUpdateOne) Save(ctx context.Context) (*OrderCoupon, error) {
	var (
		err  error
		node *OrderCoupon
	)
	if err := ocuo.defaults(); err != nil {
		return nil, err
	}
	if len(ocuo.hooks) == 0 {
		node, err = ocuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderCouponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ocuo.mutation = mutation
			node, err = ocuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ocuo.hooks) - 1; i >= 0; i-- {
			if ocuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ocuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ocuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderCoupon)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderCouponMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ocuo *OrderCouponUpdateOne) SaveX(ctx context.Context) *OrderCoupon {
	node, err := ocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ocuo *OrderCouponUpdateOne) Exec(ctx context.Context) error {
	_, err := ocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocuo *OrderCouponUpdateOne) ExecX(ctx context.Context) {
	if err := ocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocuo *OrderCouponUpdateOne) defaults() error {
	if _, ok := ocuo.mutation.UpdatedAt(); !ok {
		if ordercoupon.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ordercoupon.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ordercoupon.UpdateDefaultUpdatedAt()
		ocuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ocuo *OrderCouponUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderCouponUpdateOne {
	ocuo.modifiers = append(ocuo.modifiers, modifiers...)
	return ocuo
}

func (ocuo *OrderCouponUpdateOne) sqlSave(ctx context.Context) (_node *OrderCoupon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ordercoupon.Table,
			Columns: ordercoupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ordercoupon.FieldID,
			},
		},
	}
	id, ok := ocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderCoupon.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ordercoupon.FieldID)
		for _, f := range fields {
			if !ordercoupon.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ordercoupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ocuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordercoupon.FieldUpdatedAt,
		})
	}
	if value, ok := ocuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ordercoupon.FieldDeletedAt,
		})
	}
	if ocuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: ordercoupon.FieldDeletedAt,
		})
	}
	if ocuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: ordercoupon.FieldCreator,
		})
	}
	if value, ok := ocuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ordercoupon.FieldLastModifier,
		})
	}
	if ocuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: ordercoupon.FieldLastModifier,
		})
	}
	if value, ok := ocuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ordercoupon.FieldRemark,
		})
	}
	if ocuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ordercoupon.FieldRemark,
		})
	}
	_spec.Modifiers = ocuo.modifiers
	_node = &OrderCoupon{config: ocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ordercoupon.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
