// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/fault"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// FaultCreate is the builder for creating a Fault entity.
type FaultCreate struct {
	config
	mutation *FaultMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fc *FaultCreate) SetCreatedAt(t time.Time) *FaultCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FaultCreate) SetNillableCreatedAt(t *time.Time) *FaultCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FaultCreate) SetUpdatedAt(t time.Time) *FaultCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FaultCreate) SetNillableUpdatedAt(t *time.Time) *FaultCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetDeletedAt sets the "deleted_at" field.
func (fc *FaultCreate) SetDeletedAt(t time.Time) *FaultCreate {
	fc.mutation.SetDeletedAt(t)
	return fc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fc *FaultCreate) SetNillableDeletedAt(t *time.Time) *FaultCreate {
	if t != nil {
		fc.SetDeletedAt(*t)
	}
	return fc
}

// SetCreator sets the "creator" field.
func (fc *FaultCreate) SetCreator(m *model.Modifier) *FaultCreate {
	fc.mutation.SetCreator(m)
	return fc
}

// SetLastModifier sets the "last_modifier" field.
func (fc *FaultCreate) SetLastModifier(m *model.Modifier) *FaultCreate {
	fc.mutation.SetLastModifier(m)
	return fc
}

// SetRemark sets the "remark" field.
func (fc *FaultCreate) SetRemark(s string) *FaultCreate {
	fc.mutation.SetRemark(s)
	return fc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fc *FaultCreate) SetNillableRemark(s *string) *FaultCreate {
	if s != nil {
		fc.SetRemark(*s)
	}
	return fc
}

// SetCityID sets the "city_id" field.
func (fc *FaultCreate) SetCityID(u uint64) *FaultCreate {
	fc.mutation.SetCityID(u)
	return fc
}

// SetCabinetID sets the "cabinet_id" field.
func (fc *FaultCreate) SetCabinetID(u uint64) *FaultCreate {
	fc.mutation.SetCabinetID(u)
	return fc
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (fc *FaultCreate) SetNillableCabinetID(u *uint64) *FaultCreate {
	if u != nil {
		fc.SetCabinetID(*u)
	}
	return fc
}

// SetRiderID sets the "rider_id" field.
func (fc *FaultCreate) SetRiderID(u uint64) *FaultCreate {
	fc.mutation.SetRiderID(u)
	return fc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (fc *FaultCreate) SetNillableRiderID(u *uint64) *FaultCreate {
	if u != nil {
		fc.SetRiderID(*u)
	}
	return fc
}

// SetStatus sets the "status" field.
func (fc *FaultCreate) SetStatus(u uint8) *FaultCreate {
	fc.mutation.SetStatus(u)
	return fc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fc *FaultCreate) SetNillableStatus(u *uint8) *FaultCreate {
	if u != nil {
		fc.SetStatus(*u)
	}
	return fc
}

// SetDescription sets the "description" field.
func (fc *FaultCreate) SetDescription(s string) *FaultCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fc *FaultCreate) SetNillableDescription(s *string) *FaultCreate {
	if s != nil {
		fc.SetDescription(*s)
	}
	return fc
}

// SetAttachments sets the "attachments" field.
func (fc *FaultCreate) SetAttachments(s []string) *FaultCreate {
	fc.mutation.SetAttachments(s)
	return fc
}

// SetType sets the "type" field.
func (fc *FaultCreate) SetType(u uint8) *FaultCreate {
	fc.mutation.SetType(u)
	return fc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fc *FaultCreate) SetNillableType(u *uint8) *FaultCreate {
	if u != nil {
		fc.SetType(*u)
	}
	return fc
}

// SetFault sets the "fault" field.
func (fc *FaultCreate) SetFault(s []string) *FaultCreate {
	fc.mutation.SetFault(s)
	return fc
}

// SetEbikeID sets the "ebike_id" field.
func (fc *FaultCreate) SetEbikeID(u uint64) *FaultCreate {
	fc.mutation.SetEbikeID(u)
	return fc
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (fc *FaultCreate) SetNillableEbikeID(u *uint64) *FaultCreate {
	if u != nil {
		fc.SetEbikeID(*u)
	}
	return fc
}

// SetBatteryID sets the "battery_id" field.
func (fc *FaultCreate) SetBatteryID(u uint64) *FaultCreate {
	fc.mutation.SetBatteryID(u)
	return fc
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (fc *FaultCreate) SetNillableBatteryID(u *uint64) *FaultCreate {
	if u != nil {
		fc.SetBatteryID(*u)
	}
	return fc
}

// SetCity sets the "city" edge to the City entity.
func (fc *FaultCreate) SetCity(c *City) *FaultCreate {
	return fc.SetCityID(c.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (fc *FaultCreate) SetCabinet(c *Cabinet) *FaultCreate {
	return fc.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (fc *FaultCreate) SetRider(r *Rider) *FaultCreate {
	return fc.SetRiderID(r.ID)
}

// SetEbike sets the "ebike" edge to the Asset entity.
func (fc *FaultCreate) SetEbike(a *Asset) *FaultCreate {
	return fc.SetEbikeID(a.ID)
}

// SetBattery sets the "battery" edge to the Asset entity.
func (fc *FaultCreate) SetBattery(a *Asset) *FaultCreate {
	return fc.SetBatteryID(a.ID)
}

// Mutation returns the FaultMutation object of the builder.
func (fc *FaultCreate) Mutation() *FaultMutation {
	return fc.mutation
}

// Save creates the Fault in the database.
func (fc *FaultCreate) Save(ctx context.Context) (*Fault, error) {
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FaultCreate) SaveX(ctx context.Context) *Fault {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FaultCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FaultCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FaultCreate) defaults() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		if fault.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized fault.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := fault.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		if fault.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fault.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fault.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.Status(); !ok {
		v := fault.DefaultStatus
		fc.mutation.SetStatus(v)
	}
	if _, ok := fc.mutation.GetType(); !ok {
		v := fault.DefaultType
		fc.mutation.SetType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FaultCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Fault.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Fault.updated_at"`)}
	}
	if _, ok := fc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Fault.city_id"`)}
	}
	if _, ok := fc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Fault.status"`)}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Fault.type"`)}
	}
	if _, ok := fc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Fault.city"`)}
	}
	return nil
}

func (fc *FaultCreate) sqlSave(ctx context.Context) (*Fault, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FaultCreate) createSpec() (*Fault, *sqlgraph.CreateSpec) {
	var (
		_node = &Fault{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(fault.Table, sqlgraph.NewFieldSpec(fault.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(fault.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(fault.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.SetField(fault.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := fc.mutation.Creator(); ok {
		_spec.SetField(fault.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := fc.mutation.LastModifier(); ok {
		_spec.SetField(fault.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := fc.mutation.Remark(); ok {
		_spec.SetField(fault.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := fc.mutation.Status(); ok {
		_spec.SetField(fault.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(fault.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.Attachments(); ok {
		_spec.SetField(fault.FieldAttachments, field.TypeJSON, value)
		_node.Attachments = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(fault.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Fault(); ok {
		_spec.SetField(fault.FieldFault, field.TypeJSON, value)
		_node.Fault = value
	}
	if nodes := fc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CityTable,
			Columns: []string{fault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CabinetTable,
			Columns: []string{fault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.RiderTable,
			Columns: []string{fault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.EbikeTable,
			Columns: []string{fault.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EbikeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BatteryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fault.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FaultUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fc *FaultCreate) OnConflict(opts ...sql.ConflictOption) *FaultUpsertOne {
	fc.conflict = opts
	return &FaultUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FaultCreate) OnConflictColumns(columns ...string) *FaultUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FaultUpsertOne{
		create: fc,
	}
}

type (
	// FaultUpsertOne is the builder for "upsert"-ing
	//  one Fault node.
	FaultUpsertOne struct {
		create *FaultCreate
	}

	// FaultUpsert is the "OnConflict" setter.
	FaultUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FaultUpsert) SetUpdatedAt(v time.Time) *FaultUpsert {
	u.Set(fault.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FaultUpsert) UpdateUpdatedAt() *FaultUpsert {
	u.SetExcluded(fault.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FaultUpsert) SetDeletedAt(v time.Time) *FaultUpsert {
	u.Set(fault.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FaultUpsert) UpdateDeletedAt() *FaultUpsert {
	u.SetExcluded(fault.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FaultUpsert) ClearDeletedAt() *FaultUpsert {
	u.SetNull(fault.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *FaultUpsert) SetLastModifier(v *model.Modifier) *FaultUpsert {
	u.Set(fault.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *FaultUpsert) UpdateLastModifier() *FaultUpsert {
	u.SetExcluded(fault.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *FaultUpsert) ClearLastModifier() *FaultUpsert {
	u.SetNull(fault.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *FaultUpsert) SetRemark(v string) *FaultUpsert {
	u.Set(fault.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FaultUpsert) UpdateRemark() *FaultUpsert {
	u.SetExcluded(fault.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *FaultUpsert) ClearRemark() *FaultUpsert {
	u.SetNull(fault.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *FaultUpsert) SetCityID(v uint64) *FaultUpsert {
	u.Set(fault.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *FaultUpsert) UpdateCityID() *FaultUpsert {
	u.SetExcluded(fault.FieldCityID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *FaultUpsert) SetCabinetID(v uint64) *FaultUpsert {
	u.Set(fault.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *FaultUpsert) UpdateCabinetID() *FaultUpsert {
	u.SetExcluded(fault.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *FaultUpsert) ClearCabinetID() *FaultUpsert {
	u.SetNull(fault.FieldCabinetID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *FaultUpsert) SetRiderID(v uint64) *FaultUpsert {
	u.Set(fault.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *FaultUpsert) UpdateRiderID() *FaultUpsert {
	u.SetExcluded(fault.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *FaultUpsert) ClearRiderID() *FaultUpsert {
	u.SetNull(fault.FieldRiderID)
	return u
}

// SetStatus sets the "status" field.
func (u *FaultUpsert) SetStatus(v uint8) *FaultUpsert {
	u.Set(fault.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FaultUpsert) UpdateStatus() *FaultUpsert {
	u.SetExcluded(fault.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *FaultUpsert) AddStatus(v uint8) *FaultUpsert {
	u.Add(fault.FieldStatus, v)
	return u
}

// SetDescription sets the "description" field.
func (u *FaultUpsert) SetDescription(v string) *FaultUpsert {
	u.Set(fault.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FaultUpsert) UpdateDescription() *FaultUpsert {
	u.SetExcluded(fault.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *FaultUpsert) ClearDescription() *FaultUpsert {
	u.SetNull(fault.FieldDescription)
	return u
}

// SetAttachments sets the "attachments" field.
func (u *FaultUpsert) SetAttachments(v []string) *FaultUpsert {
	u.Set(fault.FieldAttachments, v)
	return u
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *FaultUpsert) UpdateAttachments() *FaultUpsert {
	u.SetExcluded(fault.FieldAttachments)
	return u
}

// ClearAttachments clears the value of the "attachments" field.
func (u *FaultUpsert) ClearAttachments() *FaultUpsert {
	u.SetNull(fault.FieldAttachments)
	return u
}

// SetType sets the "type" field.
func (u *FaultUpsert) SetType(v uint8) *FaultUpsert {
	u.Set(fault.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FaultUpsert) UpdateType() *FaultUpsert {
	u.SetExcluded(fault.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *FaultUpsert) AddType(v uint8) *FaultUpsert {
	u.Add(fault.FieldType, v)
	return u
}

// SetFault sets the "fault" field.
func (u *FaultUpsert) SetFault(v []string) *FaultUpsert {
	u.Set(fault.FieldFault, v)
	return u
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *FaultUpsert) UpdateFault() *FaultUpsert {
	u.SetExcluded(fault.FieldFault)
	return u
}

// ClearFault clears the value of the "fault" field.
func (u *FaultUpsert) ClearFault() *FaultUpsert {
	u.SetNull(fault.FieldFault)
	return u
}

// SetEbikeID sets the "ebike_id" field.
func (u *FaultUpsert) SetEbikeID(v uint64) *FaultUpsert {
	u.Set(fault.FieldEbikeID, v)
	return u
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *FaultUpsert) UpdateEbikeID() *FaultUpsert {
	u.SetExcluded(fault.FieldEbikeID)
	return u
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *FaultUpsert) ClearEbikeID() *FaultUpsert {
	u.SetNull(fault.FieldEbikeID)
	return u
}

// SetBatteryID sets the "battery_id" field.
func (u *FaultUpsert) SetBatteryID(v uint64) *FaultUpsert {
	u.Set(fault.FieldBatteryID, v)
	return u
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *FaultUpsert) UpdateBatteryID() *FaultUpsert {
	u.SetExcluded(fault.FieldBatteryID)
	return u
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *FaultUpsert) ClearBatteryID() *FaultUpsert {
	u.SetNull(fault.FieldBatteryID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FaultUpsertOne) UpdateNewValues() *FaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(fault.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(fault.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fault.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FaultUpsertOne) Ignore() *FaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FaultUpsertOne) DoNothing() *FaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FaultCreate.OnConflict
// documentation for more info.
func (u *FaultUpsertOne) Update(set func(*FaultUpsert)) *FaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FaultUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FaultUpsertOne) SetUpdatedAt(v time.Time) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateUpdatedAt() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FaultUpsertOne) SetDeletedAt(v time.Time) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateDeletedAt() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FaultUpsertOne) ClearDeletedAt() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *FaultUpsertOne) SetLastModifier(v *model.Modifier) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateLastModifier() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *FaultUpsertOne) ClearLastModifier() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *FaultUpsertOne) SetRemark(v string) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateRemark() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *FaultUpsertOne) ClearRemark() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *FaultUpsertOne) SetCityID(v uint64) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateCityID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateCityID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *FaultUpsertOne) SetCabinetID(v uint64) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateCabinetID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *FaultUpsertOne) ClearCabinetID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearCabinetID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *FaultUpsertOne) SetRiderID(v uint64) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateRiderID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *FaultUpsertOne) ClearRiderID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearRiderID()
	})
}

// SetStatus sets the "status" field.
func (u *FaultUpsertOne) SetStatus(v uint8) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FaultUpsertOne) AddStatus(v uint8) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateStatus() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateStatus()
	})
}

// SetDescription sets the "description" field.
func (u *FaultUpsertOne) SetDescription(v string) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateDescription() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *FaultUpsertOne) ClearDescription() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearDescription()
	})
}

// SetAttachments sets the "attachments" field.
func (u *FaultUpsertOne) SetAttachments(v []string) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetAttachments(v)
	})
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateAttachments() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateAttachments()
	})
}

// ClearAttachments clears the value of the "attachments" field.
func (u *FaultUpsertOne) ClearAttachments() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearAttachments()
	})
}

// SetType sets the "type" field.
func (u *FaultUpsertOne) SetType(v uint8) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *FaultUpsertOne) AddType(v uint8) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateType() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateType()
	})
}

// SetFault sets the "fault" field.
func (u *FaultUpsertOne) SetFault(v []string) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetFault(v)
	})
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateFault() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateFault()
	})
}

// ClearFault clears the value of the "fault" field.
func (u *FaultUpsertOne) ClearFault() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearFault()
	})
}

// SetEbikeID sets the "ebike_id" field.
func (u *FaultUpsertOne) SetEbikeID(v uint64) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetEbikeID(v)
	})
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateEbikeID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateEbikeID()
	})
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *FaultUpsertOne) ClearEbikeID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearEbikeID()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *FaultUpsertOne) SetBatteryID(v uint64) *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *FaultUpsertOne) UpdateBatteryID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateBatteryID()
	})
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *FaultUpsertOne) ClearBatteryID() *FaultUpsertOne {
	return u.Update(func(s *FaultUpsert) {
		s.ClearBatteryID()
	})
}

// Exec executes the query.
func (u *FaultUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FaultCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FaultUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FaultUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FaultUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FaultCreateBulk is the builder for creating many Fault entities in bulk.
type FaultCreateBulk struct {
	config
	err      error
	builders []*FaultCreate
	conflict []sql.ConflictOption
}

// Save creates the Fault entities in the database.
func (fcb *FaultCreateBulk) Save(ctx context.Context) ([]*Fault, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fault, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FaultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FaultCreateBulk) SaveX(ctx context.Context) []*Fault {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FaultCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FaultCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fault.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FaultUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fcb *FaultCreateBulk) OnConflict(opts ...sql.ConflictOption) *FaultUpsertBulk {
	fcb.conflict = opts
	return &FaultUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FaultCreateBulk) OnConflictColumns(columns ...string) *FaultUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FaultUpsertBulk{
		create: fcb,
	}
}

// FaultUpsertBulk is the builder for "upsert"-ing
// a bulk of Fault nodes.
type FaultUpsertBulk struct {
	create *FaultCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FaultUpsertBulk) UpdateNewValues() *FaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(fault.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(fault.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fault.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FaultUpsertBulk) Ignore() *FaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FaultUpsertBulk) DoNothing() *FaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FaultCreateBulk.OnConflict
// documentation for more info.
func (u *FaultUpsertBulk) Update(set func(*FaultUpsert)) *FaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FaultUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FaultUpsertBulk) SetUpdatedAt(v time.Time) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateUpdatedAt() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FaultUpsertBulk) SetDeletedAt(v time.Time) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateDeletedAt() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FaultUpsertBulk) ClearDeletedAt() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *FaultUpsertBulk) SetLastModifier(v *model.Modifier) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateLastModifier() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *FaultUpsertBulk) ClearLastModifier() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *FaultUpsertBulk) SetRemark(v string) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateRemark() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *FaultUpsertBulk) ClearRemark() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *FaultUpsertBulk) SetCityID(v uint64) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateCityID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateCityID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *FaultUpsertBulk) SetCabinetID(v uint64) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateCabinetID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *FaultUpsertBulk) ClearCabinetID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearCabinetID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *FaultUpsertBulk) SetRiderID(v uint64) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateRiderID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *FaultUpsertBulk) ClearRiderID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearRiderID()
	})
}

// SetStatus sets the "status" field.
func (u *FaultUpsertBulk) SetStatus(v uint8) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FaultUpsertBulk) AddStatus(v uint8) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateStatus() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateStatus()
	})
}

// SetDescription sets the "description" field.
func (u *FaultUpsertBulk) SetDescription(v string) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateDescription() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *FaultUpsertBulk) ClearDescription() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearDescription()
	})
}

// SetAttachments sets the "attachments" field.
func (u *FaultUpsertBulk) SetAttachments(v []string) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetAttachments(v)
	})
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateAttachments() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateAttachments()
	})
}

// ClearAttachments clears the value of the "attachments" field.
func (u *FaultUpsertBulk) ClearAttachments() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearAttachments()
	})
}

// SetType sets the "type" field.
func (u *FaultUpsertBulk) SetType(v uint8) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *FaultUpsertBulk) AddType(v uint8) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateType() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateType()
	})
}

// SetFault sets the "fault" field.
func (u *FaultUpsertBulk) SetFault(v []string) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetFault(v)
	})
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateFault() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateFault()
	})
}

// ClearFault clears the value of the "fault" field.
func (u *FaultUpsertBulk) ClearFault() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearFault()
	})
}

// SetEbikeID sets the "ebike_id" field.
func (u *FaultUpsertBulk) SetEbikeID(v uint64) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetEbikeID(v)
	})
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateEbikeID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateEbikeID()
	})
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *FaultUpsertBulk) ClearEbikeID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearEbikeID()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *FaultUpsertBulk) SetBatteryID(v uint64) *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *FaultUpsertBulk) UpdateBatteryID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.UpdateBatteryID()
	})
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *FaultUpsertBulk) ClearBatteryID() *FaultUpsertBulk {
	return u.Update(func(s *FaultUpsert) {
		s.ClearBatteryID()
	})
}

// Exec executes the query.
func (u *FaultUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FaultCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FaultCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FaultUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
