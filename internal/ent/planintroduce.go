// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/planintroduce"
)

// PlanIntroduce is the model entity for the PlanIntroduce schema.
type PlanIntroduce struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// BrandID holds the value of the "brand_id" field.
	BrandID *uint64 `json:"brand_id,omitempty"`
	// 电池型号
	Model string `json:"model,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlanIntroduceQuery when eager-loading is set.
	Edges        PlanIntroduceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PlanIntroduceEdges holds the relations/edges for other nodes in the graph.
type PlanIntroduceEdges struct {
	// Brand holds the value of the brand edge.
	Brand *EbikeBrand `json:"brand,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlanIntroduceEdges) BrandOrErr() (*EbikeBrand, error) {
	if e.Brand != nil {
		return e.Brand, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ebikebrand.Label}
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlanIntroduce) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case planintroduce.FieldID, planintroduce.FieldBrandID:
			values[i] = new(sql.NullInt64)
		case planintroduce.FieldModel, planintroduce.FieldImage:
			values[i] = new(sql.NullString)
		case planintroduce.FieldCreatedAt, planintroduce.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlanIntroduce fields.
func (pi *PlanIntroduce) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case planintroduce.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = uint64(value.Int64)
		case planintroduce.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case planintroduce.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pi.UpdatedAt = value.Time
			}
		case planintroduce.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				pi.BrandID = new(uint64)
				*pi.BrandID = uint64(value.Int64)
			}
		case planintroduce.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				pi.Model = value.String
			}
		case planintroduce.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				pi.Image = value.String
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlanIntroduce.
// This includes values selected through modifiers, order, etc.
func (pi *PlanIntroduce) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryBrand queries the "brand" edge of the PlanIntroduce entity.
func (pi *PlanIntroduce) QueryBrand() *EbikeBrandQuery {
	return NewPlanIntroduceClient(pi.config).QueryBrand(pi)
}

// Update returns a builder for updating this PlanIntroduce.
// Note that you need to call PlanIntroduce.Unwrap() before calling this method if this PlanIntroduce
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PlanIntroduce) Update() *PlanIntroduceUpdateOne {
	return NewPlanIntroduceClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PlanIntroduce entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PlanIntroduce) Unwrap() *PlanIntroduce {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlanIntroduce is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PlanIntroduce) String() string {
	var builder strings.Builder
	builder.WriteString("PlanIntroduce(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pi.BrandID; v != nil {
		builder.WriteString("brand_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(pi.Model)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(pi.Image)
	builder.WriteByte(')')
	return builder.String()
}

// PlanIntroduces is a parsable slice of PlanIntroduce.
type PlanIntroduces []*PlanIntroduce
