// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// BatteryCreate is the builder for creating a Battery entity.
type BatteryCreate struct {
	config
	mutation *BatteryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bc *BatteryCreate) SetCreatedAt(t time.Time) *BatteryCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableCreatedAt(t *time.Time) *BatteryCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BatteryCreate) SetUpdatedAt(t time.Time) *BatteryCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableUpdatedAt(t *time.Time) *BatteryCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BatteryCreate) SetDeletedAt(t time.Time) *BatteryCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableDeletedAt(t *time.Time) *BatteryCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetCreator sets the "creator" field.
func (bc *BatteryCreate) SetCreator(m *model.Modifier) *BatteryCreate {
	bc.mutation.SetCreator(m)
	return bc
}

// SetLastModifier sets the "last_modifier" field.
func (bc *BatteryCreate) SetLastModifier(m *model.Modifier) *BatteryCreate {
	bc.mutation.SetLastModifier(m)
	return bc
}

// SetRemark sets the "remark" field.
func (bc *BatteryCreate) SetRemark(s string) *BatteryCreate {
	bc.mutation.SetRemark(s)
	return bc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableRemark(s *string) *BatteryCreate {
	if s != nil {
		bc.SetRemark(*s)
	}
	return bc
}

// SetCityID sets the "city_id" field.
func (bc *BatteryCreate) SetCityID(u uint64) *BatteryCreate {
	bc.mutation.SetCityID(u)
	return bc
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableCityID(u *uint64) *BatteryCreate {
	if u != nil {
		bc.SetCityID(*u)
	}
	return bc
}

// SetRiderID sets the "rider_id" field.
func (bc *BatteryCreate) SetRiderID(u uint64) *BatteryCreate {
	bc.mutation.SetRiderID(u)
	return bc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableRiderID(u *uint64) *BatteryCreate {
	if u != nil {
		bc.SetRiderID(*u)
	}
	return bc
}

// SetCabinetID sets the "cabinet_id" field.
func (bc *BatteryCreate) SetCabinetID(u uint64) *BatteryCreate {
	bc.mutation.SetCabinetID(u)
	return bc
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableCabinetID(u *uint64) *BatteryCreate {
	if u != nil {
		bc.SetCabinetID(*u)
	}
	return bc
}

// SetSubscribeID sets the "subscribe_id" field.
func (bc *BatteryCreate) SetSubscribeID(u uint64) *BatteryCreate {
	bc.mutation.SetSubscribeID(u)
	return bc
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableSubscribeID(u *uint64) *BatteryCreate {
	if u != nil {
		bc.SetSubscribeID(*u)
	}
	return bc
}

// SetSn sets the "sn" field.
func (bc *BatteryCreate) SetSn(s string) *BatteryCreate {
	bc.mutation.SetSn(s)
	return bc
}

// SetEnable sets the "enable" field.
func (bc *BatteryCreate) SetEnable(b bool) *BatteryCreate {
	bc.mutation.SetEnable(b)
	return bc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (bc *BatteryCreate) SetNillableEnable(b *bool) *BatteryCreate {
	if b != nil {
		bc.SetEnable(*b)
	}
	return bc
}

// SetModel sets the "model" field.
func (bc *BatteryCreate) SetModel(s string) *BatteryCreate {
	bc.mutation.SetModel(s)
	return bc
}

// SetCity sets the "city" edge to the City entity.
func (bc *BatteryCreate) SetCity(c *City) *BatteryCreate {
	return bc.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (bc *BatteryCreate) SetRider(r *Rider) *BatteryCreate {
	return bc.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (bc *BatteryCreate) SetCabinet(c *Cabinet) *BatteryCreate {
	return bc.SetCabinetID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (bc *BatteryCreate) SetSubscribe(s *Subscribe) *BatteryCreate {
	return bc.SetSubscribeID(s.ID)
}

// Mutation returns the BatteryMutation object of the builder.
func (bc *BatteryCreate) Mutation() *BatteryMutation {
	return bc.mutation
}

// Save creates the Battery in the database.
func (bc *BatteryCreate) Save(ctx context.Context) (*Battery, error) {
	if err := bc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Battery, BatteryMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BatteryCreate) SaveX(ctx context.Context) *Battery {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BatteryCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BatteryCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BatteryCreate) defaults() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		if battery.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized battery.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := battery.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		if battery.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized battery.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := battery.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.Enable(); !ok {
		v := battery.DefaultEnable
		bc.mutation.SetEnable(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bc *BatteryCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Battery.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Battery.updated_at"`)}
	}
	if _, ok := bc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Battery.sn"`)}
	}
	if _, ok := bc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Battery.enable"`)}
	}
	if _, ok := bc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "Battery.model"`)}
	}
	return nil
}

func (bc *BatteryCreate) sqlSave(ctx context.Context) (*Battery, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BatteryCreate) createSpec() (*Battery, *sqlgraph.CreateSpec) {
	var (
		_node = &Battery{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: battery.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: battery.FieldID,
			},
		}
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(battery.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(battery.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(battery.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bc.mutation.Creator(); ok {
		_spec.SetField(battery.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := bc.mutation.LastModifier(); ok {
		_spec.SetField(battery.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := bc.mutation.Remark(); ok {
		_spec.SetField(battery.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := bc.mutation.Sn(); ok {
		_spec.SetField(battery.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := bc.mutation.Enable(); ok {
		_spec.SetField(battery.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := bc.mutation.Model(); ok {
		_spec.SetField(battery.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if nodes := bc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CityTable,
			Columns: []string{battery.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.RiderTable,
			Columns: []string{battery.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.CabinetTable,
			Columns: []string{battery.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   battery.SubscribeTable,
			Columns: []string{battery.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Battery.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bc *BatteryCreate) OnConflict(opts ...sql.ConflictOption) *BatteryUpsertOne {
	bc.conflict = opts
	return &BatteryUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Battery.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BatteryCreate) OnConflictColumns(columns ...string) *BatteryUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BatteryUpsertOne{
		create: bc,
	}
}

type (
	// BatteryUpsertOne is the builder for "upsert"-ing
	//  one Battery node.
	BatteryUpsertOne struct {
		create *BatteryCreate
	}

	// BatteryUpsert is the "OnConflict" setter.
	BatteryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryUpsert) SetUpdatedAt(v time.Time) *BatteryUpsert {
	u.Set(battery.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateUpdatedAt() *BatteryUpsert {
	u.SetExcluded(battery.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryUpsert) SetDeletedAt(v time.Time) *BatteryUpsert {
	u.Set(battery.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateDeletedAt() *BatteryUpsert {
	u.SetExcluded(battery.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryUpsert) ClearDeletedAt() *BatteryUpsert {
	u.SetNull(battery.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryUpsert) SetLastModifier(v *model.Modifier) *BatteryUpsert {
	u.Set(battery.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateLastModifier() *BatteryUpsert {
	u.SetExcluded(battery.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryUpsert) ClearLastModifier() *BatteryUpsert {
	u.SetNull(battery.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *BatteryUpsert) SetRemark(v string) *BatteryUpsert {
	u.Set(battery.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateRemark() *BatteryUpsert {
	u.SetExcluded(battery.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryUpsert) ClearRemark() *BatteryUpsert {
	u.SetNull(battery.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *BatteryUpsert) SetCityID(v uint64) *BatteryUpsert {
	u.Set(battery.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateCityID() *BatteryUpsert {
	u.SetExcluded(battery.FieldCityID)
	return u
}

// ClearCityID clears the value of the "city_id" field.
func (u *BatteryUpsert) ClearCityID() *BatteryUpsert {
	u.SetNull(battery.FieldCityID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *BatteryUpsert) SetRiderID(v uint64) *BatteryUpsert {
	u.Set(battery.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateRiderID() *BatteryUpsert {
	u.SetExcluded(battery.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *BatteryUpsert) ClearRiderID() *BatteryUpsert {
	u.SetNull(battery.FieldRiderID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BatteryUpsert) SetCabinetID(v uint64) *BatteryUpsert {
	u.Set(battery.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateCabinetID() *BatteryUpsert {
	u.SetExcluded(battery.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BatteryUpsert) ClearCabinetID() *BatteryUpsert {
	u.SetNull(battery.FieldCabinetID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BatteryUpsert) SetSubscribeID(v uint64) *BatteryUpsert {
	u.Set(battery.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateSubscribeID() *BatteryUpsert {
	u.SetExcluded(battery.FieldSubscribeID)
	return u
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *BatteryUpsert) ClearSubscribeID() *BatteryUpsert {
	u.SetNull(battery.FieldSubscribeID)
	return u
}

// SetSn sets the "sn" field.
func (u *BatteryUpsert) SetSn(v string) *BatteryUpsert {
	u.Set(battery.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateSn() *BatteryUpsert {
	u.SetExcluded(battery.FieldSn)
	return u
}

// SetEnable sets the "enable" field.
func (u *BatteryUpsert) SetEnable(v bool) *BatteryUpsert {
	u.Set(battery.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateEnable() *BatteryUpsert {
	u.SetExcluded(battery.FieldEnable)
	return u
}

// SetModel sets the "model" field.
func (u *BatteryUpsert) SetModel(v string) *BatteryUpsert {
	u.Set(battery.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryUpsert) UpdateModel() *BatteryUpsert {
	u.SetExcluded(battery.FieldModel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Battery.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryUpsertOne) UpdateNewValues() *BatteryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(battery.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(battery.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Battery.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BatteryUpsertOne) Ignore() *BatteryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryUpsertOne) DoNothing() *BatteryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryCreate.OnConflict
// documentation for more info.
func (u *BatteryUpsertOne) Update(set func(*BatteryUpsert)) *BatteryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryUpsertOne) SetUpdatedAt(v time.Time) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateUpdatedAt() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryUpsertOne) SetDeletedAt(v time.Time) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateDeletedAt() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryUpsertOne) ClearDeletedAt() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryUpsertOne) SetLastModifier(v *model.Modifier) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateLastModifier() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryUpsertOne) ClearLastModifier() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryUpsertOne) SetRemark(v string) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateRemark() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryUpsertOne) ClearRemark() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *BatteryUpsertOne) SetCityID(v uint64) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateCityID() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *BatteryUpsertOne) ClearCityID() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearCityID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *BatteryUpsertOne) SetRiderID(v uint64) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateRiderID() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *BatteryUpsertOne) ClearRiderID() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearRiderID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BatteryUpsertOne) SetCabinetID(v uint64) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateCabinetID() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BatteryUpsertOne) ClearCabinetID() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearCabinetID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BatteryUpsertOne) SetSubscribeID(v uint64) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateSubscribeID() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *BatteryUpsertOne) ClearSubscribeID() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearSubscribeID()
	})
}

// SetSn sets the "sn" field.
func (u *BatteryUpsertOne) SetSn(v string) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateSn() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateSn()
	})
}

// SetEnable sets the "enable" field.
func (u *BatteryUpsertOne) SetEnable(v bool) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateEnable() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateEnable()
	})
}

// SetModel sets the "model" field.
func (u *BatteryUpsertOne) SetModel(v string) *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryUpsertOne) UpdateModel() *BatteryUpsertOne {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *BatteryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BatteryUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BatteryUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BatteryCreateBulk is the builder for creating many Battery entities in bulk.
type BatteryCreateBulk struct {
	config
	builders []*BatteryCreate
	conflict []sql.ConflictOption
}

// Save creates the Battery entities in the database.
func (bcb *BatteryCreateBulk) Save(ctx context.Context) ([]*Battery, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Battery, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatteryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BatteryCreateBulk) SaveX(ctx context.Context) []*Battery {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BatteryCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BatteryCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Battery.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bcb *BatteryCreateBulk) OnConflict(opts ...sql.ConflictOption) *BatteryUpsertBulk {
	bcb.conflict = opts
	return &BatteryUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Battery.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BatteryCreateBulk) OnConflictColumns(columns ...string) *BatteryUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BatteryUpsertBulk{
		create: bcb,
	}
}

// BatteryUpsertBulk is the builder for "upsert"-ing
// a bulk of Battery nodes.
type BatteryUpsertBulk struct {
	create *BatteryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Battery.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryUpsertBulk) UpdateNewValues() *BatteryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(battery.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(battery.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Battery.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BatteryUpsertBulk) Ignore() *BatteryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryUpsertBulk) DoNothing() *BatteryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryCreateBulk.OnConflict
// documentation for more info.
func (u *BatteryUpsertBulk) Update(set func(*BatteryUpsert)) *BatteryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryUpsertBulk) SetUpdatedAt(v time.Time) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateUpdatedAt() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryUpsertBulk) SetDeletedAt(v time.Time) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateDeletedAt() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryUpsertBulk) ClearDeletedAt() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryUpsertBulk) SetLastModifier(v *model.Modifier) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateLastModifier() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryUpsertBulk) ClearLastModifier() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryUpsertBulk) SetRemark(v string) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateRemark() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryUpsertBulk) ClearRemark() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *BatteryUpsertBulk) SetCityID(v uint64) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateCityID() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *BatteryUpsertBulk) ClearCityID() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearCityID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *BatteryUpsertBulk) SetRiderID(v uint64) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateRiderID() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *BatteryUpsertBulk) ClearRiderID() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearRiderID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BatteryUpsertBulk) SetCabinetID(v uint64) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateCabinetID() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BatteryUpsertBulk) ClearCabinetID() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearCabinetID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BatteryUpsertBulk) SetSubscribeID(v uint64) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateSubscribeID() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *BatteryUpsertBulk) ClearSubscribeID() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.ClearSubscribeID()
	})
}

// SetSn sets the "sn" field.
func (u *BatteryUpsertBulk) SetSn(v string) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateSn() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateSn()
	})
}

// SetEnable sets the "enable" field.
func (u *BatteryUpsertBulk) SetEnable(v bool) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateEnable() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateEnable()
	})
}

// SetModel sets the "model" field.
func (u *BatteryUpsertBulk) SetModel(v string) *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryUpsertBulk) UpdateModel() *BatteryUpsertBulk {
	return u.Update(func(s *BatteryUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *BatteryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BatteryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
